@using Models;
@using Models._Cfl;
@{
    var Id = Convert.ToInt64(Request["cbId"]);

    if (ViewBag.Id != null)
    {
        Id = ViewBag.Id;
    }

}

@Html.DevExpress().GridView(settings =>
{
settings.Name = "gvDetail";
settings.KeyFieldName = "DetId";
settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
//settings.Settings.VerticalScrollableHeight = 350;
settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

settings.Width = Unit.Percentage(100);
settings.Height = Unit.Percentage(100);

settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;


settings.CommandColumn.Visible = true;
settings.CommandColumn.ShowDeleteButton = true;
settings.CommandColumn.ShowNewButtonInHeader = true;
settings.CommandColumn.Width = 70;
settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
settings.Columns.Add("Id", "Id").Visible = false;
settings.Columns.Add("DetId", "DetId").Visible = false;

settings.Columns.Add(column =>
{
    column.FieldName = "Bagian";
    column.Name = "Bagian";
    column.Caption = "Bagian";


    column.ColumnType = MVCxGridViewColumnType.ComboBox;
    column.Width = 100;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }
    var cbo = column.PropertiesEdit as ComboBoxProperties;
    cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
    cbo.ValueField = "Bagian";
    cbo.TextField = "Bagian";
    cbo.ValueType = typeof(string);
    cbo.DataSource = Models._Utils.GeneralGetList.GetBagian();
});
settings.Columns.Add(column =>
{
    column.FieldName = "Item";
    column.Name = "Item";
    column.Caption = "Item";


    column.ColumnType = MVCxGridViewColumnType.ComboBox;
    column.Width = 150;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }
    var cbo = column.PropertiesEdit as ComboBoxProperties;
    cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
    cbo.ValueField = "Item";
    cbo.TextFormatString = "{1}";
    cbo.ValueType = typeof(string);
    cbo.DropDownWidth = 550;
    cbo.Columns.Add("Bagian", "Bagian", Unit.Percentage(50));
    cbo.Columns.Add("Item", "Item", Unit.Percentage(50));
    cbo.DataSource = Models._Utils.GeneralGetList.GetItem();
});
settings.Columns.Add(column =>
{
    column.FieldName = "SubItem";
    column.Name = "SubItem";
    column.Caption = "Sub Item";


    column.ColumnType = MVCxGridViewColumnType.TextBox;
    column.Width = 150;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }

    var txt = column.PropertiesEdit as TextBoxProperties;
    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
});
settings.Columns.Add(column =>
{
    column.FieldName = "Penyebab";
    column.Name = "Penyebab";
    column.Caption = "Penyebab";


    column.ColumnType = MVCxGridViewColumnType.TextBox;
    column.Width = 150;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }

    var txt = column.PropertiesEdit as TextBoxProperties;
    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
});
settings.Columns.Add(column =>
{
    column.FieldName = "Tindakan";
    column.Name = "Tindakan";
    column.Caption = "Tindakan";


    column.ColumnType = MVCxGridViewColumnType.TextBox;
    column.Width = 150;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }

    var txt = column.PropertiesEdit as TextBoxProperties;
    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
});
settings.Columns.Add(column =>
{
    column.FieldName = "Part";
    column.Name = "Part";
    column.Caption = "Sparepart";


    column.ColumnType = MVCxGridViewColumnType.TextBox;
    column.Width = 150;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }

    var txt = column.PropertiesEdit as TextBoxProperties;
    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
});
settings.Columns.Add(column =>
{
    column.FieldName = "Qty";
    column.Name = "Qty";
    column.Caption = "Qty";


    column.ColumnType = MVCxGridViewColumnType.SpinEdit;
    column.Width = 70;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }

    var txt = column.PropertiesEdit as SpinEditProperties;
    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
});
settings.Columns.Add(column =>
{
    column.FieldName = "UoM";
    column.Name = "UoM";
    column.Caption = "UoM";


    column.ColumnType = MVCxGridViewColumnType.TextBox;
    column.Width = 70;
    column.Settings.AllowSort = DefaultBoolean.False;
    if (Model.Status == "Draft" || Model.Status == "Open")
    {
        column.ReadOnly = false;
    }
    else
    {
        column.ReadOnly = true;
    }

    var txt = column.PropertiesEdit as TextBoxProperties;
    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
});
//settings.Columns.Add(column =>
    @*{
        column.FieldName = "EstPerbaikan";
        column.Name = "EstPerbaikan";
        column.Caption = "Est. Perbaikan (Hari)";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }

        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
    });*@




    settings.Columns.Add(column =>
    {
        column.FieldName = "StartDate";
        column.Name = "StartDate";
        column.Caption = "StartDate";


        column.ColumnType = MVCxGridViewColumnType.DateEdit;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }

        var txt = column.PropertiesEdit as DateEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.EditFormatString = "dd/MM/yyyy";
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "EndDate";
        column.Name = "EndDate";
        column.Caption = "EndDate";


        column.ColumnType = MVCxGridViewColumnType.DateEdit;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }

        var txt = column.PropertiesEdit as DateEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.EditFormatString = "dd/MM/yyyy";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Status";
        column.Name = "Status";
        column.Caption = "Status";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 100;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Open", "Open"));
        cbo.Items.Insert(1, new ListEditItem("On Progress", "On Progress"));
        cbo.Items.Insert(2, new ListEditItem("Close", "Close"));

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "PIC";
        column.Name = "PIC";
        column.Caption = "PIC";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }

        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
    });
    settings.Settings.ShowFooter = true;

    settings.ClientSideEvents.BeginCallback = "gvDetailOnBeginCallback";
    settings.ClientSideEvents.EndCallback = "gvDetailOnEndCallback";

    settings.ClientSideEvents.BatchEditStartEditing = "gvDetailOnBatchEditStartEditing";
    settings.ClientSideEvents.BatchEditEndEditing = "gvDetailOnBatchEditEndEditing";
    settings.ClientSideEvents.BatchEditRowValidating = "gvDetailOnBatchEditRowValidating";

}).Bind(Model.ListDetails_).GetHtml()

