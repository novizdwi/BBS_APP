@using Models;
@using Models._Cfl;
@{
    var Id = Convert.ToInt64(Request["cbId"]);

    if (ViewBag.Id != null)
    {
        Id = ViewBag.Id;
    }

}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvDaily";
    settings.KeyFieldName = "DetId";
    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    //settings.Settings.VerticalScrollableHeight = 350;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

    settings.Width = Unit.Percentage(100);
    settings.Height = Unit.Percentage(100);

    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
    settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;


    settings.CommandColumn.Visible = true;
    settings.CommandColumn.ShowDeleteButton = true;
    settings.CommandColumn.ShowNewButtonInHeader = true;
    settings.CommandColumn.Width = 70;
    settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
    settings.Columns.Add("Id", "Id").Visible = false;
    settings.Columns.Add("DetId", "DetId").Visible = false;

    settings.Columns.Add(column =>
    {
        column.FieldName = "Date";
        column.Name = "Date";
        column.Caption = "Tanggal";


        column.ColumnType = MVCxGridViewColumnType.DateEdit;
        column.Width = 100;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
        var txt = column.PropertiesEdit as DateEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        //txt.NullText = "dd/MM/yyyy";
        txt.EditFormat = EditFormat.Custom;
        txt.EditFormatString = "dd/MM/yyyy";
        txt.EditFormat = EditFormat.Date;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
            txt.DropDownButton.Visible = false;
        }
    });


    settings.Columns.Add(column =>
    {
        column.FieldName = "MEPS";
        column.Name = "MEPS";
        column.Caption = "ME PS";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.SpinButtons.ShowIncrementButtons = false;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "MESB";
        column.Name = "MESB";
        column.Caption = "ME SB";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.SpinButtons.ShowIncrementButtons = false;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "AE1";
        column.Name = "AE1";
        column.Caption = "AE 1";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.SpinButtons.ShowIncrementButtons = false;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "AE2";
        column.Name = "AE2";
        column.Caption = "AE 2";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.SpinButtons.ShowIncrementButtons = false;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;

        }
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "GBME";
        column.Name = "GBME";
        column.Caption = "GB ME";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.SpinButtons.ShowIncrementButtons = false;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "GBAE";
        column.Name = "GBAE";
        column.Caption = "GB AE";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.SpinButtons.ShowIncrementButtons = false;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Remark";
        column.Name = "Remark";
        column.Caption = "Catatan";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 250;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
    });
    settings.Settings.ShowFooter = true;
    settings.ClientSideEvents.BeginCallback = "gvDetailOnBeginCallback";
    settings.ClientSideEvents.EndCallback = "gvDetailOnEndCallback";

    settings.ClientSideEvents.BatchEditStartEditing = "gvDetailOnBatchEditStartEditing";
    settings.ClientSideEvents.BatchEditEndEditing = "gvDetailOnBatchEditEndEditing";
    settings.ClientSideEvents.BatchEditRowValidating = "gvDetailOnBatchEditRowValidating";

}).Bind(Model.ListDailys_).GetHtml()

