@using Models._Cfl;


@if (false)
{
    <script src="~/Scripts/ASPxScriptIntelliSense.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery-2.2.0.intellisense.js"></script>
    <script src="~/Scripts/Test/DXR.js"></script>
}

@model Models.Transaction.InventoryReceived.InventoryReceivedModel


@{
    ViewBag.Title = "Inventory Transfer (Send)";
}



<script type="text/javascript">


    $(document).ready(function () {

        SetBtnStatus();
    }
    );


</script>



<script type="text/javascript">

    var beforeSaveActiveTabName = '';
    var beforeSaveActiveTabIndex = 0;

    $.ajaxSetup({
        cache: false
    });

    function OnBegin() {
        loadingPanel.Show();

    }

    function SetBtnStatus() {


        var grpBtnAdd = formLayouBtn.GetItemByName('grpBtnAdd');
        var btnAdd = ASPxClientButton.Cast('btnAdd');
        var grpBtnUpdate = formLayouBtn.GetItemByName('grpBtnUpdate');
        var btnUpdate = ASPxClientButton.Cast('btnUpdate');


        var btnRefresh = ASPxClientButton.Cast('btnRefresh');

        var btnPrint = ASPxClientButton.Cast('btnPrint');


        var btnMenuOther = ASPxClientMenu.Cast('btnMenuOther');

        var formMode = '';
        if ((Id.GetValue() == '') || Id.GetValue() == '0') {
            formMode = 'new';
        } else {
            formMode = 'edit';
        }


        var Status = ASPxClientComboBox.Cast('Status');

        switch (formMode) {
            case 'new':

                grpBtnAdd.SetVisible(true);
                grpBtnUpdate.SetVisible(false);

                btnAdd.SetEnabled(true);
                btnUpdate.SetEnabled(false);
                btnRefresh.SetEnabled(false);
                btnPrint.SetEnabled(false);
                btnMenuOther.SetEnabled(false);
                btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);

                btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(false);

                break;
            case 'edit':


                grpBtnAdd.SetVisible(false);
                grpBtnUpdate.SetVisible(true);


                btnAdd.SetEnabled(false);
                btnRefresh.SetEnabled(true);
                btnPrint.SetEnabled(true);
                btnMenuOther.SetEnabled(true);
                var Status = ASPxClientComboBox.Cast('Status');



                switch (Status.GetValue()) {
                    case 'Draft':
                        btnUpdate.SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(true);

                        break;
                    case 'Posted':

                        btnUpdate.SetEnabled(false);

                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(true);

                        break;
                    case 'Cancel':
                        btnUpdate.SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(false);

                        break;


                    default:
                        break;
                }


                break;
            default:

                break;
        }



    }

    var msgCount = 0;
    function OnSuccess() {

        $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());

    }


    function OnSuccessMsgBox() {

        $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());
        loadingPanel.Hide();

        popupSuccess.Show();
        setTimeout(function () { popupSuccess.Hide(); }, 1000);

    }

    function OnFailure(jqXhr, textStatus, errorThrown) {
        if (beforeSaveActiveTabName != '') {
            var tab = ASPxClientTabControl.Cast(beforeSaveActiveTabName);
            tab.SetActiveTabIndex(beforeSaveActiveTabIndex);
            beforeSaveActiveTabName = '';
        }

        if (jqXhr.responseText.substring(0, 12) == "[VALIDATION]") {
            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + jqXhr.responseText + '</p>' + $("#MessageText").html());

            loadingPanel.Hide()
            alert(jqXhr.responseText);
        }
        else {
            // untuk error yg tidak ter capture di validation
            var doc = jqXhr.responseText.match(/.*<title>([\s\S]*)<\/title>.*/);
            if (doc != null) {
                $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + doc[1] + '</p>' + $("#MessageText").html());

                loadingPanel.Hide();
                alert(doc[1]);
            }

        }

    }

    function OnComplete() {
        loadingPanel.Hide();
    }


    function BeforeSave() {

        var tab = ASPxClientTabControl.Cast("TabDetail");
        var tabPageCount = tab.GetTabCount();
        for (var i = 0; i < tabPageCount; i++) {
            tab.SetActiveTabIndex(i);
            if (!($("#formDetail").valid())) {
                var validator = $("#formDetail").validate();
                var errors = validator.numberOfInvalids();
                if (errors) {
                    // alert( validator.errorList[0].message);
                    validator.errorList[0].element.focus();

                }
                return false;
            }
        }

        return true;

    }


    function RefreshAfterSuccess(response) {
        //var tab = ASPxClientTabControl.Cast("TabDetail");

        //if (tab.GetActiveTabIndex != 0) {
        //    tab.SetActiveTabIndex(0);
        //}

        $("#contentForm").html(response);

        $.validator.unobtrusive.parse("#formDetail");

        MVCxClientUtils.FinalizeCallback();
        SetBtnStatus();
        //ExpiredTypeOnValueChange();
    }



    function OnClickBtnNew(s, e) {

        $.ajax({
            type: "POST",
            url: "@Url.Action("DetailPartial", "InventoryReceived")",
            beforeSend: function () {
                OnBegin();
            },

            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },

            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },

            complete: function () {
                OnComplete()
            }
        });

    }


    function GetFormData() {
        var formData = $('#formDetail').serializeObject();

        var Details_ = GetGvDetails('gvDetail');
        $.extend(formData, { Details_: Details_ });
        return formData;
    }
    function GetFormDataBatchDetail() {
        var formData = $('#BatchDetail_formDetail').serializeObject();

        var BatchDetails_ = GetGvDetails('gvInventoryReceivedBatchDetailContentDetail');
        $.extend(formData, { BatchDetails_: BatchDetails_ });
        return formData;
    }

    
    function OnClickBtnAdd(s, e) {
        if (BeforeSave() == false) {
            return;
        }

        var formData = GetFormData();/*$('#formDetail').serializeObject();*/
        
        var mRowVal = formData.Details_.modifiedRowValues;
        //console.log(mRowVal);

        if (mRowVal == 0 || mRowVal == null){
            alert("Quantity Received belum diisi !!");
            return;
        }
        else
        {
            mRowVal.forEach(function (item, index)
            {
                var QtyReceived = item.QtyReceived;
                var Qty = item.Qty;
                if (QtyReceived > Qty) {
                    alert("(" + item.ItemCode + ") Qty Received melebihi Qty! ");
                    throw new Error("(" + item.ItemCode + ") Qty Received melebihi Qty! ");
                    return;

                } 
            });
            $.ajax({
                type: "POST",
                url: '@Url.Action("Add", "InventoryReceived")',
                data: formData,
                beforeSend: function () {
                    OnBegin();
                },
                success: function (response) {
                    RefreshAfterSuccess(response);
                    OnSuccessMsgBox();
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    OnFailure(jqXhr, textStatus, errorThrown)
                },
                complete: function () {
                    OnComplete();
                }
            });
        }
        


    }

    function OnClickBtnUpdate(s, e) {
        if (BeforeSave() == false) {
            return;
        }

        var formData = GetFormData();
        var mRowVal = formData.Details_.modifiedRowValues;
        mRowVal.forEach(function (item, index) {
            var QtyReceived = item.QtyReceived;
            var Qty = item.Qty;
            if (QtyReceived > Qty) {
                alert("(" + item.ItemCode + ") Qty Received melebihi Qty! ");
                throw new Error("(" + item.ItemCode + ") Qty Received melebihi Qty! ");
                return;
            }
        });
        $.ajax({
            type: "POST",
            url: '@Url.Action("Update", "InventoryReceived")',
            data: formData,
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccessMsgBox();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()

            }
        });



    }




    function OnClickBtnNavFirst(s, e) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("NavFirst", "InventoryReceived")",
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnNavPrevious(s, e) {
        key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("NavPrevious", "InventoryReceived")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnNavNext(s, e) {
        key = Id.GetValue();
        $.ajax({
            type: "POST",
            url: '@Url.Action("NavNext", "InventoryReceived")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }



    function OnClickBtnNavLast(s, e) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("NavLast", "InventoryReceived")",
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }


    function OnClickBtnRefresh(s, e) {
        key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartial", "InventoryReceived")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }



    function OnClickBtnListFind(s, e) {
        var popup = ASPxClientPopupControl.Cast("popupList");

        var gv = ASPxClientGridView.Cast('gvInventoryReceivedList');
        if (gv == null) {
            popup.Show();
        } else {
            popup.SetContentHtml("");
            popup.PerformCallback();
            popup.Show();
        }
    }

    function OnClickBtnMenuOther(s, e) {

        switch (e.item.name) {

            case 'btnMenuSetStatusCancel':

                if (confirm('Cancel transaction?')) {
                    key = Id.GetValue();

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Cancel", "InventoryReceived")',
                        data: { Id: key },
                        beforeSend: function () {
                            OnBegin();
                        },
                        success: function (response) {
                            RefreshAfterSuccess(response);
                            OnSuccessMsgBox();

                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            OnFailure(jqXhr, textStatus, errorThrown)
                        },
                        complete: function () {
                            OnComplete()
                        }
                    });
                }


                break;
            case 'btnMenuSetStatusPost':
                if (BeforeSave() == false) {
                    return;
                }
                var formData = GetFormData();
                if (confirm('Post transaction?')) {
                    key = Id.GetValue();

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Post", "InventoryReceived")',
                        data: formData,
                        beforeSend: function () {
                            OnBegin();
                        },
                        success: function (response) {
                            RefreshAfterSuccess(response);
                            OnSuccessMsgBox();

                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            OnFailure(jqXhr, textStatus, errorThrown)
                        },
                        complete: function () {
                            OnComplete()
                        }
                    });
                }


                break;
            default:

                break;
        }
    }



    function OnClickChoose(s, e, key) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartial", "InventoryReceived")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
                popupList.Hide();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnChangeCbFromWhs() {
        var whsName = FromWarehouseCode.GetText();
        FromWarehouseName.SetValue(whsName);
    }

    function OnChangeCbToWhs() {
        var whsName = ToWarehouseCode.GetText();
        ToWarehouseName.SetValue(whsName);
    }
    function BtnShipNameOnClick(s, e) {
        cflShipPopupListInventoryReceived.Show();
    }
    function BtnItemCodeOnClick(s, e) {
        cflItemPopupListInventoryReceived.Show();
    }
    function BtnInventorySendNoOnClick(s, e) {
        cflInventorySendPopupListInventoryReceived.Show();
    }
    function gvInventoryReceivedBatchDetailContentDetailOnBeginCallback(s, e) {
        e.customArgs['cbId'] = Id.GetValue();
        //e.customArgs['cbDocEntry'] = DocEntry.GetValue();
    }
</script>
<script type="text/javascript">
    function gvInventoryReceivedBatchDetailContentDetailOnEndCallBack(s, e) {

    }
    function gvInventoryReceivedBatchDetailContentDetailOnBatchEditEndEditing(s, e) {

    }
    function gvInventoryReceivedBatchDetailContentDetailOnBatchEditStartEditing(s, e) {
    }
    function gvInventoryReceivedBatchDetailContentDetailOnBatchEditRowValidating(s, e) {
    }
</script>
<script>

    function gvInventoryReceivedDetailOnCustomButtonClick(s, e, id) {
        key = id;
        console.log(id);
        if (key == '') {
            alert("Silahkan lengkapi data dan Save terlebih dahulu !!");
            return;
        }
        else {
            //var ItemCodeColumn = s.GetColumnByField("ItemCode");
            //var cellInfoItemCode = e.rowValues[ItemCodeColumn.index];
            //console.log(cellInfoItemCode);
            var popup = ASPxClientPopupControl.Cast("popupBatchDetail");
            popup.callbackUrl = '@Url.Action("BatchDetail_PopupListOnDemandPartial", "InventoryReceived")' + '?id=' + key;
            popup.PerformCallback();

            if (!popup.IsVisible()) {
                loadingPanel.Show();
            }
        }
    }

    function OnClickBtnNewBatchDetail() {
        key = Id.GetValue();
        if (key == 0) {
            alert("Silahkan lengkapi data dan Save terlebih dahulu !!");
            return;
        }
        var popup = ASPxClientPopupControl.Cast("popupBatchDetail");
        popup.callbackUrl = '@Url.Action("BatchDetail_PopupListOnDemandPartialAdd", "InventoryReceived")' + '?id=' + key ;
        popup.PerformCallback();

        if (!popup.IsVisible()) {
            loadingPanel.Show();
        }

    }

    function popupBatchDetail_EndCallback(s, e) {
        $.validator.unobtrusive.parse("#BatchDetail_formDetail");

        var popup = ASPxClientPopupControl.Cast("popupBatchDetail");
        if (!popup.IsVisible()) {
            loadingPanel.Hide();
            popup.ShowAtPos(100, 100);
        }
    }

    function OnClickBtnAddBatchDetail(s, e) {
        //if (BeforeSave() == false) {
        //    return;
        //}

        var docStatus = Status.GetValue();
        if (docStatus == "Posted") {
            alert("Item Code dan Batch Number tidak dapat disimpan");
            return;
        } else if (docStatus == "Cancel") {
            alert("Item Code dan Batch Number tidak dapat disimpan");
            return;
        }

        if (confirm('Save Batch Detail data?')) {
            var formData = GetFormDataBatchDetail();



            var popup = ASPxClientPopupControl.Cast("popupBatchDetail");

            $.ajax({
                type: "POST",
                url: '@Url.Action("AddBatchDetail", "InventoryReceived")',
                data: formData,
                beforeSend: function () {
                    OnBegin();
                },
                success: function (response) {
                    //RefreshAfterSuccess(response);
                    //SetBtnStatus('new');
                    $.validator.unobtrusive.parse("#BatchDetail_formDetail");
                    OnSuccessMsgBox();
                    OnClickBtnRefresh(s, e);
                    popupBatchDetail.Hide();


                },
                error: function (jqXhr, textStatus, errorThrown) {
                    OnFailure(jqXhr, textStatus, errorThrown)
                },
                complete: function () {
                    OnComplete();
                }
            });

        }
    }

     function OnClickBtnDeleteBatchDetail(s, e)
     {

         var docStatus = Status.GetValue();
         if (docStatus == "Posted") {
             alert("Item Code dan Batch Number tidak dapat dihapus");
             return;
         } else if (docStatus == "Cancel") {
             alert("Item Code dan Batch Number tidak dapat disimpan");
             return;
         }

        if (confirm('Delete Batch Detail data?')) {
            key = DetId.GetValue();
            console.log(key);
            var popup = ASPxClientPopupControl.Cast("popupBatchDetail");

            $.ajax({
                type: "POST",
                url: '@Url.Action("DeleteBatchDetail", "InventorySend")',
                data: { Id: key },
                beforeSend: function () {
                    OnBegin();
                },
                success: function (response) {
                    //RefreshAfterSuccess(response);
                    //SetBtnStatus('new');

                    OnSuccessMsgBox();
                    OnClickBtnRefresh(s, e);
                    popupBatchDetail.Hide();
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    OnFailure(jqXhr, textStatus, errorThrown)
                },
                complete: function () {
                    OnComplete()
                }
            });
        }
    }

</script>

<script type="text/javascript">

    function gvDetailOnBeginCallback(s, e) {
        e.customArgs['cbId'] = Id.GetValue();
    }

    function gvDetailOnEndCallback(s, e) {

    }

    function gvDetailOnCustomButtonClick(s, e) {

        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvDetailCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }


    function gvDetailOnBatchEditStartEditing(s, e) {

        var ItemCodeColumn = s.GetColumnByField("ItemCode");
        if (e.rowValues.hasOwnProperty(ItemCodeColumn.index)) {
            var cellInfoItemCode = e.rowValues[ItemCodeColumn.index];
            gvDetail_ItemCode.SetValue(cellInfoItemCode.value);
            return;
        }
        var cellInfo = e.rowValues[ItemNameColumn.index];
        //gvDetail_ItemDesc.SetValue(cellInfo.value);
        //if (e.rowValues.hasOwnProperty(ItemNameColumn.index)) {
        //    var cellInfoItemName = e.rowValues[ItemNameColumn.index];
        //    gvDetail_ItemName.SetValue(cellInfoItemName.value);
        //    return;
        //}

    }
    function gvDetailOnBatchEditEndEditing(s, e) {

        var ItemCodeColumn = s.GetColumnByField("ItemCode");
        if (e.rowValues.hasOwnProperty(ItemCodeColumn.index)) {
            var cellInfoItemCode = e.rowValues[ItemCodeColumn.index];
            cellInfoItemCode.value = gvDetail_ItemCode.GetValue();
            cellInfoItemCode.text = gvDetail_ItemCode.GetText();
            gvDetail_ItemCode.SetValue(null);
        }

        gvDetailCalculateSummary(s, e.rowValues, e.visibleIndex, false);

    }


    function gvDetailOnBatchEditRowValidating(s, e) {


    }

    function gvDetailCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {

    }



</script>



@Html.Partial("Partial/InventoryReceived_Form_Btn_Partial")

@using (Ajax.BeginForm("mantap", "InventoryReceived", null,
new AjaxOptions
{
    HttpMethod = "POST",
    OnBegin = "OnBegin",
    OnSuccess = "OnSuccessMsgBox",
    OnFailure = "OnFailure",
    OnComplete = "OnComplete",
    UpdateTargetId = "contentForm",
    InsertionMode = InsertionMode.Replace,

},
new
{
    id = "formDetail",
    @class = "edit_form",
    style = "height: 200px; width: 100%;",
    autocomplete = "off"
}))
{
    <div id="contentForm" style="padding-top:79px">
        @Html.Partial("Partial/InventoryReceived_Form_Partial")

    </div>
}


@*
    -----------------------------------------------------------------------------
    loadingPanel
    -----------------------------------------------------------------------------
*@

@Html.DevExpress().LoadingPanel(
    settings =>
    {
        settings.Name = "loadingPanel";
        settings.Modal = true;
        settings.ContainerElementID = "contentForm";
        settings.Styles.LoadingDiv.BackColor = System.Drawing.Color.White;
        settings.Styles.LoadingDiv.Opacity = 0;
    }).GetHtml()



@*
    -----------------------------------------------------------------------------
    gvShipList
    -----------------------------------------------------------------------------
*@


@Html.Partial("Partial/InventoryReceived_Panel_List_Partial")

@Html.Partial("Partial/BatchDetail/BatchDetail_Partial")
@{
    var cflShip_ParamModel = new CflShip_ParamModel();
    cflShip_ParamModel.Name = "InventoryReceived";
    cflShip_ParamModel.Type = "InventoryReceived";
    cflShip_ParamModel.Header = "";
    cflShip_ParamModel.SqlWhere = "";
    cflShip_ParamModel.IsMulti = "N";
}
<script type="text/javascript">


    function OnClickChoose_CflShipInventoryReceived(s, e, data) {
        ShipId.SetValue(data.Id);
        ShipName.SetValue(data.ShipName);
        console.log(data);
        cflShipPopupListInventoryReceived.Hide();
        //DocumentTypeOnValueChanged();
    }


</script>
@Html.Partial("~/Views/_Cfl/_CflShip/Partial/_CflShip_Panel_List_Partial.cshtml", cflShip_ParamModel)

@{
    var cflItem_ParamModel = new CflItem_ParamModel();
    cflItem_ParamModel.Name = "InventoryReceived";
    cflItem_ParamModel.Type = "InventoryReceived";
    cflItem_ParamModel.Header = "";
    cflItem_ParamModel.SqlWhere = "";
    cflItem_ParamModel.IsMulti = "N";
}
<script type="text/javascript">


    function OnClickChoose_CflItemInventoryReceived(s, e, data) {

        console.log(data);

        gvDetail_ItemCode.SetValue(data.ItemCode);
        gvDetail_ItemDescription.SetValue(data.ItemName);
        gvDetail_UoMCode.SetValue(data.UomCode);
        gvDetail_UomEntry.SetValue(data.IUoMEntry);
        cflItemPopupListInventoryReceived.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflItem/Partial/_CflItem_Panel_List_Partial.cshtml", cflItem_ParamModel)

@{
    var cflInventorySend_ParamModel = new CflInventorySend_ParamModel();
    cflInventorySend_ParamModel.Name = "InventoryReceived";
    cflInventorySend_ParamModel.Type = "InventoryReceived";
    cflInventorySend_ParamModel.Header = "";
    cflInventorySend_ParamModel.SqlWhere = "";
    cflInventorySend_ParamModel.IsMulti = "N";
}
<script type="text/javascript">


    function OnClickChoose_CflInventorySendInventoryReceived(s, e, data) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartialInventorySend", "InventoryReceived")',
            data: { Id: data.Id },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
                popupList.Hide();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                cflInventorySendPopupListInventoryReceived.Hide();
                OnComplete()
            }
        });
    }


</script>
@Html.Partial("~/Views/_Cfl/_CflInventorySend/Partial/_CflInventorySend_Panel_List_Partial.cshtml", cflInventorySend_ParamModel)


@Html.Partial("~/Views/_CrystalReport/Layout/Print_Panel_Partial.cshtml")