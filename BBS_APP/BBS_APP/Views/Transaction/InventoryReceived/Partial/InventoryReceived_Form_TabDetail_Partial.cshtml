@using Models;
@using Models._Cfl;
@{
    var Id = Convert.ToInt64(Request["cbId"]);

    if (ViewBag.Id != null)
    {
        Id = ViewBag.Id;
    }

}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvDetail";
    settings.KeyFieldName = "DetId";
    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollableHeight = 350;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

    settings.Width = Unit.Percentage(100);
    settings.Height = Unit.Percentage(100);

    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
    settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;


    settings.CommandColumn.Visible = false;
    settings.CommandColumn.ShowDeleteButton = false;
    settings.CommandColumn.ShowNewButtonInHeader = false;
    settings.CommandColumn.Width = 50;
    settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
    if(Model.Status == null)
    {
        settings.SettingsDataSecurity.AllowDelete = false;
        settings.SettingsDataSecurity.AllowEdit = false;
        settings.SettingsDataSecurity.AllowInsert = false;
    }

    settings.Columns.Add("Id", "Id").Visible = false;
    settings.Columns.Add("DetId", "DetId").Visible = false;
    settings.Columns.Add(column =>
    {
        column.FieldName = "BaseDetId";
        column.Name = "BaseDetId";
        column.Caption = "BaseDetId";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 0;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.ReadOnly = true;


        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ClientInstanceName = "gvDetail_ManBtchNum";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "ItemCodeKey";
        column.Name = "ItemCodeKey";
        column.Caption = "Batch";

        column.SetDataItemTemplateContent(c =>
        {

            string valText = (string)DataBinder.Eval(c.DataItem, "ItemCode");

            string valLinkControlerName = "InventorySend";


            string valId = (string)DataBinder.Eval(c.DataItem, "ItemCodeKey");

            string valManBtchNum = (string)DataBinder.Eval(c.DataItem, "ManBtchNum");
            if (valManBtchNum == "Y")
            {

                ViewContext.Writer.Write(

                    Html.DevExpress().HyperLink(settingsHL =>
                    {
                        settingsHL.Name = "BtnColumnLink_" + Guid.NewGuid();
                        settingsHL.NavigateUrl = "javascript:void(0)";
                        settingsHL.Properties.Text = "Batch";
                        settingsHL.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ gvInventoryReceivedDetailOnCustomButtonClick(s, e, '{0}'); }}", valId);

                    }).GetHtml()

                );
            }
            else
            {
                ViewContext.Writer.Write(

                    Html.DevExpress().Label(settingsHL =>
                    {
                        settingsHL.Name = "BtnColumnLink_" + Guid.NewGuid();
                        settingsHL.Text = "Non Batch";
                    }).GetHtml()

                );
            }
        });





        column.PropertiesEdit.Style.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        column.CellStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        column.CellStyle.ForeColor = System.Drawing.Color.Black;
        column.ReadOnly = true;


    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "ManBtchNum";
        column.Name = "ManBtchNum";
        column.Caption = "ManBtchNum";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 0;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.ReadOnly = true;


        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ClientInstanceName = "gvDetail_ManBtchNum";

    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "ItemCode";
        column.Name = "ItemCode";
        column.Caption = "Item Code";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 100;
        column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;


        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

        column.SetEditItemTemplateContent(c =>
        {

            ViewContext.Writer.Write(
                 Html.Partial("Partial/InventoryReceived_DetailItemNameCombobox_ItemCode_Partial")
             );


        });



        column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
        column.CellStyle.BackColor = System.Drawing.Color.Lavender;
        column.CellStyle.ForeColor = System.Drawing.Color.Black;

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "ItemDescription";
        column.Name = "ItemDescription";
        column.Caption = "Description";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 350;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.ReadOnly = true;


        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ClientInstanceName = "gvDetail_ItemDescription";

    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "Qty";
        column.Name = "Qty";
        column.Caption = "Qty";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.ReadOnly = true;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.SpinButtons.ClientVisible = false;
        //txt.ClientInstanceName = "gvDocContentReferenceDetail_Reference";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "QtyOpen";
        column.Name = "QtyOpen";
        column.Caption = "Qty Open";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 0;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.ReadOnly = true;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.SpinButtons.ClientVisible = false;
        //txt.ClientInstanceName = "gvDocContentReferenceDetail_Reference";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "QtyReceived";
        column.Name = "QtyReceived";
        column.Caption = "Qty Received";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.SpinButtons.ClientVisible = false;
        //txt.ClientInstanceName = "gvDocContentReferenceDetail_Reference";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "UomEntry";
        column.Name = "UomEntry";
        column.Caption = "UomEntry";
        column.ReadOnly = true;

        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 0;
        column.Settings.AllowSort = DefaultBoolean.False;
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ClientInstanceName = "gvDetail_UomEntry";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "UoMCode";
        column.Name = "UoMCode";
        column.Caption = "UoM";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.ReadOnly = true;
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ClientInstanceName = "gvDetail_UoMCode";
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "Remark";
        column.Name = "Remark";
        column.Caption = "Remark";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 200;
        column.Settings.AllowSort = DefaultBoolean.False;

        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ClientInstanceName = "gvDetail_Remark";
    });



    settings.Settings.ShowFooter = true;

    settings.ClientSideEvents.BeginCallback = "gvDetailOnBeginCallback";
    settings.ClientSideEvents.EndCallback = "gvDetailOnEndCallback";

    settings.ClientSideEvents.BatchEditStartEditing = "gvDetailOnBatchEditStartEditing";
    settings.ClientSideEvents.BatchEditEndEditing = "gvDetailOnBatchEditEndEditing";
    settings.ClientSideEvents.BatchEditRowValidating = "gvDetailOnBatchEditRowValidating";

}).Bind(Model.ListDetails_).GetHtml()

