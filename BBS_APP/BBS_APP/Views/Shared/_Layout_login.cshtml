@using Models

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>
        @{ var pageTitleParts = new string[] { ViewBag.Title, "Bali United" }; }
        @string.Join(" - ", @pageTitleParts.Where(s => !string.IsNullOrEmpty(s)))
    </title>
    <meta name="viewport" content="width=device-width, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0" />
    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Editors },
        new StyleSheet { ExtensionSuite = ExtensionSuite.GridView },
        new StyleSheet { ExtensionSuite = ExtensionSuite.TreeList },
        new StyleSheet { ExtensionSuite = ExtensionSuite.VerticalGrid },
        new StyleSheet { ExtensionSuite = ExtensionSuite.CardView },
        new StyleSheet { ExtensionSuite = ExtensionSuite.PivotGrid },
        new StyleSheet { ExtensionSuite = ExtensionSuite.HtmlEditor },
        new StyleSheet { ExtensionSuite = ExtensionSuite.RichEdit },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Spreadsheet },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Scheduler },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Gantt },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Diagram },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Chart },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Report },
        new StyleSheet { ExtensionSuite = ExtensionSuite.ClientRichEdit },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Dashboard },
        new StyleSheet { ExtensionSuite = ExtensionSuite.SpellChecker },
        new StyleSheet { ExtensionSuite = ExtensionSuite.QueryBuilder }
    )

    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Content.css")" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Layout.css")" />
    @RenderSection("Head", false)
    <script type="text/javascript" src="@Url.Content("~/Content/Script.js")"></script>
    @if (false)
    {
        <script src="~/Scripts/ASPxScriptIntelliSense.js" type="text/javascript"></script>
    }
    @if (false)
    {
        <script src="~/Scripts/jquery-2.2.0.intellisense.js" type="text/javascript"></script>
    }

    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-2.2.0.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
   


    <script type="text/javascript" src="@Url.Content("~/Scripts/MicrosoftAjax.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/MicrosoftMvcAjax.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/MicrosoftMvcValidation.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Idu.js")"></script>
    @Html.DevExpress().GetScripts(
        new Script { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new Script { ExtensionSuite = ExtensionSuite.Editors },
        new Script { ExtensionSuite = ExtensionSuite.GridView },
        new Script { ExtensionSuite = ExtensionSuite.TreeList },
        new Script { ExtensionSuite = ExtensionSuite.VerticalGrid },
        new Script { ExtensionSuite = ExtensionSuite.CardView },
        new Script { ExtensionSuite = ExtensionSuite.PivotGrid },
        new Script { ExtensionSuite = ExtensionSuite.HtmlEditor },
        new Script { ExtensionSuite = ExtensionSuite.RichEdit },
        new Script { ExtensionSuite = ExtensionSuite.Spreadsheet },
        new Script { ExtensionSuite = ExtensionSuite.Scheduler },
        new Script { ExtensionSuite = ExtensionSuite.Gantt },
        new Script { ExtensionSuite = ExtensionSuite.Diagram },
        new Script { ExtensionSuite = ExtensionSuite.Chart },
        new Script { ExtensionSuite = ExtensionSuite.Report },
        new Script { ExtensionSuite = ExtensionSuite.ClientRichEdit },
        new Script { ExtensionSuite = ExtensionSuite.Dashboard },
        new Script { ExtensionSuite = ExtensionSuite.SpellChecker },
        new Script { ExtensionSuite = ExtensionSuite.QueryBuilder }
    )
    <script>
        //// sending the __RequestVerificationToken value manually, see details: https://github.com/DevExpress/aspnet-security-bestpractices/tree/master/SecurityBestPractices.Mvc#4-preventing-cross-site-request-forgery-csrf
        //if (window.jQuery) {
        //    $.ajaxPrefilter(function (options, originalOptions, xhr) {
        //        if (options.dataType && options.dataType !== "html")
        //            return;
        //        var tokenValue = $('input:hidden[name="__RequestVerificationToken"]').val();
        //        if (tokenValue && options && options.data && options.data.indexOf('RequestVerificationToken') === -1)
        //            options.data += "&__RequestVerificationToken=" + tokenValue;
        //    });
        //}
    </script>
    <script type="text/javascript">


        $(document).ready(function () {

        }
        );

       

    </script>
    <script type="text/javascript">

        $.ajaxSetup({
            cache: false
        });

        function OnBegin() {
            loadingPanel.Show();
        }

        var msgCount = 0;
        function OnSuccess() {

            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());

        }


        function OnSuccessMsgBox() {

            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());
            loadingPanel.Hide();

            popupSuccess.Show();
            setTimeout(function () { popupSuccess.Hide(); }, 1000);

        }

        function OnFailure(jqXhr, textStatus, errorThrown) {

            if (jqXhr.responseText.substring(0, 12) == "[VALIDATION]") {
                $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + jqXhr.responseText + '</p>' + $("#MessageText").html());

                loadingPanel.Hide()
                alert(jqXhr.responseText);
            }
            else {
                // untuk error yg tidak ter capture di validation
                var doc = jqXhr.responseText.match(/.*<title>([\s\S]*)<\/title>.*/);
                $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + doc[1] + '</p>' + $("#MessageText").html());

                loadingPanel.Hide();
                alert(doc[1]);
            }

        }

        function OnComplete() {
            loadingPanel.Hide();

        }

        function UserNameOnKeyPress(s, e) {
            if (e.htmlEvent.keyCode == 13) {
                btnLogin.DoClick();
            }
        }

        function PwdOnKeyPress(s, e) {
            if (e.htmlEvent.keyCode == 13) {
                btnLogin.DoClick();
            }
        }


        function OnClickBtnLogin(s, e) {


            if ($("#formDetail").valid()) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Login", "Login")',
                    data: { UserName: UserName.GetValue(), Pwd: Pwd.GetValue() },
                    beforeSend: function () {
                        OnBegin();
                    },
                    success: function (response) {
                        //$("#contentForm").html(response);
                        //$.validator.unobtrusive.parse("#formDetail");
                        //MVCxClientUtils.FinalizeCallback();
                        //OnSuccessMsgBox();

                        @*var url = '@Url.Action("Index", "Home")';*@
                        
                        var url = response;
                        $(location).attr('href', url);

                        //loadingPanel.Show()

                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        OnFailure(jqXhr, textStatus, errorThrown)
                    },
                    complete: function () {
                        loadingPanel.Hide();
                    }
                });

            }
            else {
                var validator = $("#formDetail").validate();
                var errors = validator.numberOfInvalids();
                if (errors) {
                    // alert( validator.errorList[0].message);
                    validator.errorList[0].element.focus();

                }
            }

        }


    </script>
</head>
<body>
    <div class="content-wrapper">
        @Html.DevExpress().Panel(settings => {
       settings.Name = "headerPanel";
       settings.FixedPosition = PanelFixedPosition.WindowTop;
       settings.FixedPositionOverlap = true;
       settings.ControlStyle.CssClass = "app-header";
       settings.SetContent(() => {
           ViewContext.Writer.Write("<div class='left-block'>");

           @Html.DevExpress().Menu(menuSettings => {
               menuSettings.Name = "leftAreaMenu";
               menuSettings.ItemAutoWidth = false;
               menuSettings.EnableHotTrack = false;
               menuSettings.SettingsAdaptivity.Enabled = true;
               menuSettings.Width = Unit.Percentage(100);
               menuSettings.SyncSelectionMode = SyncSelectionMode.None;
               menuSettings.ControlStyle.CssClass = "header-menu";
               menuSettings.ControlStyle.SeparatorWidth = 0;
               menuSettings.Styles.Item.VerticalAlign = VerticalAlign.Middle;
               menuSettings.Styles.Item.CssClass = "item";
               menuSettings.ClientSideEvents.ItemClick = "onLeftMenuItemClick";

               if(ViewBag.ShowBackButton != null && ViewBag.ShowBackButton) {
                   menuSettings.Items.Add(item => {
                       item.Text = "";
                       item.Name = "Back";
                       item.Image.Url = "~/Content/Images/back.svg";
                       item.Image.Height = Unit.Pixel(18);
                       item.Image.Width = Unit.Pixel(18);
                       item.ItemStyle.CssClass = "toggle-item vertically-aligned";
                   });
               }
               if(IsSectionDefined("LeftPanelContent")) {
                   menuSettings.Items.Add(item => {
                       item.Text = "";
                       item.Name = "ToggleLeftPanel";
                       item.GroupName = "LeftPanel";
                       item.Image.Url = "~/Content/Images/menu.svg";
                       item.Image.Height = Unit.Pixel(18);
                       item.Image.Width = Unit.Pixel(18);
                       item.ItemStyle.CssClass = "toggle-item vertically-aligned";
                       item.ItemStyle.CheckedStyle.CssClass = "checked selected";
                   });
               }
               menuSettings.Items.Add(item => {
                   item.Text = "";
                   item.NavigateUrl = "~/";
                   item.ItemStyle.CssClass = "image-item vertically-aligned";
                   item.Image.SpriteProperties.CssClass = "header-logo";
               });
           }).GetHtml();
           ViewContext.Writer.Write("</div><div class='right-block'>");
           
           ViewContext.Writer.Write("</div>");

           ViewContext.Writer.Write("<div class='dx-clear'></div>");
       });
   }).GetHtml()
       

        <div class="content" id="pageContent">
            @RenderBody()
            <div class="footer-wrapper" id="footerWrapper">
                <div class="footer">
                    <span class="footer-left">
                        &copy; 2025 Bali United
                    </span>
                    <span class="footer-right">
                        <a class="footer-link" href="#">Privacy Policy</a>
                        <a class="footer-link" href="#">Terms of Service</a>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">

        MVCxClientGlobalEvents.AddControlsInitializedEventHandler(onControlsInitialized);
        ASPxClientControl.GetControlCollection().BrowserWindowResized.AddHandler(onBrowserWindowResized);
    </script>
    <script type="text/javascript">


        $(document).ready(function () {

        }
        );

        //$(window).load(function () {



        //    popupLogin.Show();
        //    var myElement = document.querySelector("#popupLogin_PW-1");
        //    var position = getPosition(myElement);
        //    if ((position.x == 0) && (position.y == 0)) {
        //        var y = ($(window).height() - 400) / 2;//150: dari height di panel
        //        var x = ($(window).width() / 2) - (popupLogin.GetWidth() / 2); //($(window).width() - 300) / 2; //300 : dari width di panel
        //        popupLogin.ShowAtPos(x, y);
        //    }

        //    UserName.Focus();
        //});

    </script>
    <script type="text/javascript">

        $.ajaxSetup({
            cache: false
        });

        function OnBegin() {
            loadingPanel.Show();
        }

        var msgCount = 0;
        function OnSuccess() {

            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());

        }


        function OnSuccessMsgBox() {

            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());
            loadingPanel.Hide();

            popupSuccess.Show();
            setTimeout(function () { popupSuccess.Hide(); }, 1000);

        }

        function OnFailure(jqXhr, textStatus, errorThrown) {

            if (jqXhr.responseText.substring(0, 12) == "[VALIDATION]") {
                $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + jqXhr.responseText + '</p>' + $("#MessageText").html());

                loadingPanel.Hide()
                alert(jqXhr.responseText);
            }
            else {
                // untuk error yg tidak ter capture di validation
                var doc = jqXhr.responseText.match(/.*<title>([\s\S]*)<\/title>.*/);
                $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + doc[1] + '</p>' + $("#MessageText").html());

                loadingPanel.Hide();
                alert(doc[1]);
            }

        }

        function OnComplete() {
            loadingPanel.Hide();

        }

        function UserNameOnKeyPress(s, e) {
            if (e.htmlEvent.keyCode == 13) {
                btnLogin.DoClick();
            }
        }

        function PwdOnKeyPress(s, e) {
            if (e.htmlEvent.keyCode == 13) {
                btnLogin.DoClick();
            }
        }


        function OnClickBtnLogin(s, e) {


            if ($("#formDetail").valid()) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Login", "Login")',
                    data: { UserName: UserName.GetValue(), Pwd: Pwd.GetValue() },
                    beforeSend: function () {
                        OnBegin();
                    },
                    success: function (response) {
                        //$("#contentForm").html(response);
                        //$.validator.unobtrusive.parse("#formDetail");
                        //MVCxClientUtils.FinalizeCallback();
                        //OnSuccessMsgBox();

                        @*var url = '@Url.Action("Index", "Home")';*@
                        popupLogin.Hide();
                        var url = response;
                        $(location).attr('href', url);

                        //loadingPanel.Show()

                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        OnFailure(jqXhr, textStatus, errorThrown)
                    },
                    complete: function () {
                        loadingPanel.Hide();
                    }
                });

            }
            else {
                var validator = $("#formDetail").validate();
                var errors = validator.numberOfInvalids();
                if (errors) {
                    // alert( validator.errorList[0].message);
                    validator.errorList[0].element.focus();

                }
            }

        }


    </script>

</body>
</html>
