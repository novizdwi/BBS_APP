var ASPx = {};
ASPx.SSLSecureBlankUrl = '/DXR.axd?r=1_0-8W7bc';
ASPx.EmptyImageUrl = '/DXR.axd?r=1_15-8W7bc';
var __aspxVersionInfo = 'Version=\'14.1.4.0\', File Version=\'14.1.4.0\', Date Modified=\'1/30/2016 2:38:14 AM\'';
var __aspxStyleSheet = null;
var __aspxInvalidDimension = -10000;
var __aspxInvalidPosition = -10000;
var __aspxAbsoluteLeftPosition = -10000;
var __aspxAbsoluteRightPosition = 10000;
var __aspxMenuZIndex = 21998;
var __aspxPopupControlZIndex = 11998;
var __aspxPopupShadowWidth = 5;
var __aspxPopupShadowHeight = 5;
var __aspxCallbackSeparator = ":";
var __aspxItemIndexSeparator = "i";
var __aspxCallbackResultPrefix = "/*DX*/";
var __aspxItemClassName = "dxi";
var __aspxAccessibilityEmptyUrl = "javascript:;";
var __aspxAccessibilityMarkerClass = "dxalink";
var __aspxEmptyAttributeValue = { };
var __aspxEmptyCachedValue = { };
var __aspxCachedRules = { };
var __aspxStyleCount = 0;
var __aspxStyleNameCache = { };
var __aspxPossibleNumberDecimalSeparators = [",", "."];
var __aspxAdaptiveClass = "dx-adaptive";
var __aspxCultureInfo = {
 twoDigitYearMax: 2029,
 ts: ":",
 ds: "/",
 am: "AM",
 pm: "PM",
 monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
 genMonthNames: null,
 abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
 abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
 dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
 numDecimalPoint: ".",
 numPrec: 2,
 numGroupSeparator: ",", 
 numGroups: [ 3 ],
 numNegPattern: 1,
 numPosInf: "Infinity", 
 numNegInf: "-Infinity", 
 numNan: "NaN",
 currency: "$",
 currDecimalPoint: ".",
 currPrec: 2,
 currGroupSeparator: ",",
 currGroups: [ 3 ],
 currPosPattern: 0,
 currNegPattern: 0,
 percentPattern: 0,
 shortTime: "h:mm tt",
 longTime: "h:mm:ss tt",
 shortDate: "M/d/yyyy",
 longDate: "dddd, MMMM dd, yyyy",
 monthDay: "MMMM dd",
 yearMonth: "MMMM, yyyy"
};
__aspxCultureInfo.genMonthNames = __aspxCultureInfo.monthNames;
function _aspxGetInvariantDateString(date) {
 if(!date)
  return "01/01/0001";
 var day = date.getDate();
 var month = date.getMonth() + 1;
 var year = date.getFullYear();
 var result = "";
 if(month < 10)
  result += "0";
 result += month.toString() + "/";
 if(day < 10)
  result += "0";
 result += day.toString() + "/";
 if(year < 1000)
  result += "0";
 result += year.toString();
 return result;
}
function _aspxGetInvariantDateTimeString(date) {
 var dateTimeString = _aspxGetInvariantDateString(date);
 var time = {
  h: date.getHours(),
  m: date.getMinutes(),
  s: date.getSeconds()
 };
 for(var key in time) {
  var str = time[key].toString();
  if(str.length < 2)
   str = "0" + str;
  time[key] = str;
 }
 dateTimeString += " " + time.h + ":" + time.m + ":" + time.s;
 var msec = date.getMilliseconds();
 if(msec > 0)
  dateTimeString += "." + msec.toString();
 return dateTimeString;
}
function _aspxExpandTwoDigitYear(value) {
 value += 1900;
 if(value + 99 < __aspxCultureInfo.twoDigitYearMax)
  value += 100;
 return value;  
}
function _aspxToUtcTime(date) {
 var result = new Date();
 result.setTime(date.valueOf() + 60000 * date.getTimezoneOffset());
 return result;
}
function _aspxToLocalTime(date) {
 var result = new Date();
 result.setTime(date.valueOf() - 60000 * date.getTimezoneOffset());
 return result; 
}
function _aspxAreDatesEqualExact(date1, date2) {
 if(date1 == null && date2 == null)
  return true;
 if(date1 == null || date2 == null)
  return false;
 return date1.getTime() == date2.getTime(); 
}
function _aspxFixTimezoneGap(oldDate, newDate) {
 var diff = newDate.getHours() - oldDate.getHours();
 if(diff == 0)
  return;
 var sign = (diff == 1 || diff == -23) ? -1 : 1;
 var trial = new Date(newDate.getTime() + sign * 3600000);
 if(sign > 0 || trial.getDate() == newDate.getDate())
  newDate.setTime(trial.getTime());
}
var ASPxKey = {
 F1     : 112,
 F2     : 113,
 F3     : 114,
 F4     : 115,
 F5     : 116,
 F6     : 117,
 F7     : 118,
 F8     : 119,
 F9     : 120,
 F10    : 121,
 F11    : 122,
 F12    : 123,
 Ctrl   : 17,
 Shift  : 16,
 Alt    : 18,
 Enter  : 13,
 Home   : 36,
 End    : 35,
 Left   : 37,
 Right  : 39,
 Up     : 38,
 Down   : 40,
 PageUp    : 33,
 PageDown  : 34,
 Esc    : 27,
 Space  : 32,
 Tab    : 9,
 Backspace : 8,
 Delete    : 46,
 Insert    : 45,
 ContextMenu  : 93,
 Windows   : 91,
 Decimal   : 110
};
var ASPxCallbackType = {
 Data: "d",
 Common: "c"
};
var ASPxWhiteSpaces = { 
 0x0009: 1, 0x000a: 1, 0x000b: 1, 0x000c: 1, 0x000d: 1, 0x0020: 1, 0x0085: 1, 
 0x00a0: 1, 0x1680: 1, 0x180e: 1, 0x2000: 1, 0x2001: 1, 0x2002: 1, 0x2003: 1, 
 0x2004: 1, 0x2005: 1, 0x2006: 1, 0x2007: 1, 0x2008: 1, 0x2009: 1, 0x200a: 1, 
 0x200b: 1, 0x2028: 1, 0x2029: 1, 0x202f: 1, 0x205f: 1, 0x3000: 1
};
function _aspxFalseFunction() { return false; }
function _aspxGetActiveElement() {
 try{
  return document.activeElement;
 } catch(e) {
 }
 return null;
}
var __aspxUserAgent = navigator.userAgent.toLowerCase();
var __aspxMozilla,
 __aspxIE,
 __aspxFirefox,
 __aspxNetscape,
 __aspxSafari,
 __aspxChrome,
 __aspxOpera,
 __aspxBrowserVersion, 
 __aspxBrowserMajorVersion, 
 __aspxWindowsPlatform,
 __aspxMacOSPlatform,
 __aspxMacOSMobilePlatform,
 __aspxWebKitFamily, 
 __aspxNetscapeFamily, 
 __aspxBrowserWithHardwareAcceleration;
function _aspxIdentUserAgent(userAgent, ignoreDocumentMode) {
 var browserTypesOrderedList = [ "Mozilla", "IE", "Firefox", "Netscape", "Safari", "Chrome", "Opera", "Opera10" ];
 var defaultBrowserType = "IE";
 var defaultPlatform = "Win";
 var defaultVersions = { Safari: 2, Chrome: 0.1, Mozilla: 1.9, Netscape: 8, Firefox: 2, Opera: 9, IE: 6 };
 if(!userAgent || userAgent.length == 0) {
  _aspxFillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
  return;
 }
 userAgent = userAgent.toLowerCase();
 try {
  var platformIdentStrings = {
   "Windows": "Win",
   "Macintosh": "Mac",
   "Mac OS": "Mac",
   "Mac_PowerPC": "Mac",
   "cpu os": "MacMobile",
   "cpu iphone os": "MacMobile",
   "Android": "Android",
   "!Windows Phone": "WinPhone",
   "!WPDesktop": "WinPhone",
   "!ZuneWP": "WinPhone"
  };
  var tridentIdentStrings = {
   "Trident/5": 9,
   "Trident/6": 10
  };
  var optSlashOrSpace = "(?:/|\\s*)?";
  var version = "(\\d+)(?:\\.((?:\\d+?[1-9])|\\d)0*?)?";
  var optVersion = "(?:" + version + ")?";
  var patterns = {
   Safari: "applewebkit(?:.*?(?:version/" + version + "[\\.\\w\\d]*?(?:\\s+mobile\/\\S*)?\\s+safari))?",
   Chrome: "chrome(?!frame)" + optSlashOrSpace + optVersion,
   Mozilla: "mozilla(?:.*rv:" + optVersion + ".*Gecko)?",
   Netscape: "(?:netscape|navigator)\\d*/?\\s*" + optVersion,
   Firefox: "firefox" + optSlashOrSpace + optVersion,
   Opera: "opera" + optSlashOrSpace + optVersion,
   Opera10: "opera.*\\s*version" + optSlashOrSpace + optVersion,
   IE: "msie\\s*" + optVersion
  };
  var browserType;
  var version = -1;
  for(var i = 0; i < browserTypesOrderedList.length; i++) {
   var browserTypeCandidate = browserTypesOrderedList[i];
   var regExp = new RegExp(patterns[browserTypeCandidate], "i");
   if(regExp.compile)
    regExp.compile(patterns[browserTypeCandidate], "i");
   var matches = regExp.exec(userAgent);
   if(matches && matches.index >= 0) {
    browserType = browserTypeCandidate;
    if(browserType == "Opera10")
     browserType = "Opera";
    var tridentPattern = "trident" + optSlashOrSpace + optVersion;
    version = _aspxGetBrowserVersion(userAgent, matches, tridentPattern, _aspxGetIECompatibleVersionString());
    if(browserType == "Mozilla" && version >= 11)
     browserType = "IE";
   }
  }
  if(!browserType)
   browserType = defaultBrowserType;
  var browserVersionDetected = version != -1;
  if(!browserVersionDetected)
   version = defaultVersions[browserType];
  var platform;
  var minOccurenceIndex = Number.MAX_VALUE;
  for(var identStr in platformIdentStrings) {
   if(!platformIdentStrings.hasOwnProperty(identStr)) continue;
   var importantIdent = identStr.substr(0,1) == "!";
   var occurenceIndex = userAgent.indexOf((importantIdent ? identStr.substr(1) : identStr).toLowerCase());
   if(occurenceIndex >= 0 && (occurenceIndex < minOccurenceIndex || importantIdent)) {
    minOccurenceIndex = importantIdent ? 0 : occurenceIndex;
    platform = platformIdentStrings[identStr];
   }
  }
  if(platform == "WinPhone" && version < 9) {
   for(var identStr in tridentIdentStrings) {
    if(!tridentIdentStrings.hasOwnProperty(identStr)) continue;
    if(userAgent.indexOf(identStr.toLowerCase()) > -1)
     version = tridentIdentStrings[identStr];
   }
  }
  if(!ignoreDocumentMode && browserType == "IE" && version > 7 && document.documentMode < version)
   version = document.documentMode;
  if(platform == "WinPhone")
   version = Math.max(9, version);
  if(!platform)
   platform = defaultPlatform;
  if(platform == platformIdentStrings["cpu os"] && !browserVersionDetected) 
   version = 4;
  _aspxFillUserAgentInfo(browserTypesOrderedList, browserType, version, platform);
 } catch(e) {
  _aspxFillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
 }
}
function _aspxGetIECompatibleVersionString() {
 if(document.compatible) {
  for(var i = 0; i < document.compatible.length; i++)
   if(document.compatible[i].userAgent === "IE" && document.compatible[i].version)
    return document.compatible[i].version.toLowerCase();
 }
 return "";
}
function _aspxGetBrowserVersion(userAgent, matches, tridentPattern, ieCompatibleVersionString) {
 var version = _aspxGetVersionFromMatches(matches);
 if(ieCompatibleVersionString) {
  var versionFromTrident = _aspxGetVersionFromTrident(userAgent, tridentPattern);
  if(ieCompatibleVersionString === "edge" || parseInt(ieCompatibleVersionString) === versionFromTrident)
   return versionFromTrident;
 }
 return version;
}
function _aspxGetVersionFromTrident(userAgent, tridentPattern) {
 var tridentDiffFromVersion = 4;
 var matches = new RegExp(tridentPattern, "i").exec(userAgent);
 return _aspxGetVersionFromMatches(matches) + tridentDiffFromVersion;
}
function _aspxGetVersionFromMatches(matches) {
 var result = -1;
 var versionStr = "";
 if(matches[1]) {
  versionStr += matches[1];
  if(matches[2])
   versionStr += "." + matches[2];
 }
 if(versionStr != "") {
  result = parseFloat(versionStr);
  if(result == NaN)
   result = -1;
 }
 return result;
}
function _aspxFillUserAgentInfo(browserTypesOrderedList, browserType, version, platform) {
 for(var i = 0; i < browserTypesOrderedList.length; i++) {
  var type = browserTypesOrderedList[i];
  window["__aspx" + type] = type == browserType;
 }
 __aspxBrowserVersion = Math.floor(10.0 * version) / 10.0;
 __aspxBrowserMajorVersion = Math.floor(__aspxBrowserVersion);
 __aspxWindowsPlatform = platform == "Win" || platform == "WinPhone";
 __aspxMacOSPlatform = platform == "Mac";
 __aspxMacOSMobilePlatform = platform == "MacMobile";
 __aspxAndroidMobilePlatform = platform == "Android";
 __aspxWindowsPhonePlatform = platform == "WinPhone";
 __aspxWebKitFamily = __aspxSafari || __aspxChrome;
 __aspxNetscapeFamily = __aspxNetscape || __aspxMozilla || __aspxFirefox;
 __aspxBrowserWithHardwareAcceleration = (__aspxIE && __aspxBrowserMajorVersion >= 9) || ( __aspxFirefox && __aspxBrowserMajorVersion >= 4);
 __aspxWebKitTouchUI = __aspxMacOSMobilePlatform || __aspxAndroidMobilePlatform;
 __aspxMSTouchUI = __aspxIE && __aspxBrowserMajorVersion > 9 && __aspxWindowsPlatform && __aspxUserAgent.toLowerCase().indexOf("touch") >= 0;
 __aspxTouchUI = __aspxWebKitTouchUI || __aspxMSTouchUI;
 __aspxAndroidDefaultBrowser = __aspxAndroidMobilePlatform && !__aspxChrome;
}
_aspxIdentUserAgent(__aspxUserAgent);
ASPx.BlankUrl = __aspxIE
 ? ASPx.SSLSecureBlankUrl
 : (__aspxOpera
  ? "about:blank"
  : "");
function _aspxArrayInsert(array, element, position){
 if(0 <= position && position < array.length){
  for(var i = array.length; i > position; i --)
   array[i] = array[i - 1];
  array[position] = element;
 }
 else
  array.push(element);
}
function _aspxArrayRemove(array, element){
 var index = _aspxArrayIndexOf(array, element);
 if(index > -1) _aspxArrayRemoveAt(array, index);
}
function _aspxArrayRemoveAt(array, index){
 if(index >= 0  && index < array.length){
  for(var i = index; i < array.length - 1; i++)
   array[i] = array[i + 1];
  array.pop();
 }
}
function _aspxArrayClear(array){
 while(array.length > 0)
  array.pop();
}
function _aspxArrayIndexOf(array, element, comparer) {
 if(!comparer) {
  for(var i = 0; i < array.length; i++) {
   if(array[i] == element)
    return i;
  }
 } else {
  for(var i = 0; i < array.length; i++) {
   if(comparer(array[i], element))
    return i;
  }
 }
 return -1;
}
function _aspxArrayIntegerAscendingSort(array){
 _aspxArrayIntegerSort(array);
}
function _aspxArrayIntegerSort(array, desc) {
 array.sort(function(i1, i2) {
  var res = 0;
  if(i1 > i2)
   res = 1;
  else if(i1 < i2)
   res = -1;
  if(desc)
   res *= -1;
  return res;
 });
}
function _aspxCollectionsUnionToArray(firstCollection, secondCollection) {
 var result = [];
 var firstCollectionLength = firstCollection.length;
 var secondCollectionLength = secondCollection.length;
 for(var i = 0; i <  firstCollectionLength + secondCollectionLength; i++) {
  if(i < firstCollectionLength) 
   result.push(firstCollection[i]);
  else 
   result.push(secondCollection[i - firstCollectionLength]);
 }  
 return result;
}
function _aspxCollectionToArray(collection) {
 var array = [];
 for(var i = 0; i < collection.length; i++)
  array.push(collection[i]);
 return array;
}
function _aspxCreateHashTableFromArray(array) {
 var hash = [];
 for(var i = 0; i < array.length; i++)
  hash[array[i]] = 1;
 return hash;
}
function _aspxCreateIndexHashTableFromArray(array) {
 var hash = [];
 for(var i = 0; i < array.length; i++)
  hash[array[i]] = i;
 return hash;
}
var __aspxDefaultBinarySearchComparer = function(array, index, value) {
 var arrayElement = array[index];
 if(arrayElement == value)
  return 0;
 else
  return arrayElement < value ? -1 : 1;
};
var __aspxNearestLeftBinarySearchComparer = function(array, index, value) { 
 var arrayElement = array[index];
 var leftPoint = arrayElement < value;
 var lastLeftPoint = leftPoint && index == array.length - 1;
 var nearestLeftPoint = lastLeftPoint || (leftPoint && array[index + 1] >= value)
 if(nearestLeftPoint)
  return 0;
 else
  return arrayElement < value ? -1 : 1;
};
function _aspxArrayBinarySearch(array, value, binarySearchComparer, startIndex, length) {
 if(!binarySearchComparer)
  binarySearchComparer = __aspxDefaultBinarySearchComparer;
 if(!_aspxIsExists(startIndex))
  startIndex = 0;
 if(!_aspxIsExists(length))
  length = array.length - startIndex;  
 var endIndex = (startIndex + length) - 1;
 while (startIndex <= endIndex) {
  var middle =  (startIndex + ((endIndex - startIndex) >> 1));
  var compareResult = binarySearchComparer(array, middle, value);
  if (compareResult == 0)
   return middle;
  if (compareResult < 0)
   startIndex = middle + 1;
  else
   endIndex = middle - 1;
 }
 return -(startIndex + 1);
}
function _aspxGetDistinctArray(array) {
 var resultArray = [];
 for(var i = 0; i < array.length; i++) {
  var currentEntry = array[i];
  if(_aspxArrayIndexOf(resultArray, currentEntry) == -1) {
     resultArray.push(currentEntry);
  }
 }
 return resultArray;
}
function _aspxApplyReplacement(text, replecementTable) {
 for(var i = 0; i < replecementTable.length; i++) {
  var replacement = replecementTable[i];
  text = text.replace(replacement[0], replacement[1]);
 }
 return text;
}
function _aspxCompleteReplace(text, regexp, newSubStr) {
 var textPrev;
 do {
  textPrev = text;
  text = text.replace(regexp, newSubStr);
 } while(text != textPrev);
 return text;
}
function _aspxNodeListToArray(nodeList, filter) {
 var result = [];
 for(var i = 0, element; element = nodeList[i]; i++) {
  if(filter && !filter(element))
   continue;
  result.push(element);
 }
 return result;
}
function _aspxEncodeHtml(html) {
 return _aspxApplyReplacement(html, [
  [ /&amp;/g,  '&ampx;'  ], [ /&/g, '&amp;'  ],
  [ /&quot;/g, '&quotx;' ], [ /"/g, '&quot;' ],
  [ /&lt;/g,   '&ltx;'   ], [ /</g, '&lt;'   ],
  [ /&gt;/g,   '&gtx;'   ], [ />/g, '&gt;'   ]
 ]);
}
function _aspxDecodeHtml(html) {
 return _aspxApplyReplacement(html, [
  [ /&gt;/g,   '>' ], [ /&gtx;/g,  '&gt;'   ],
  [ /&lt;/g,   '<' ], [ /&ltx;/g,  '&lt;'   ],
  [ /&quot;/g, '"' ], [ /&quotx;/g,'&quot;' ],
  [ /&amp;/g,  '&' ], [ /&ampx;/g, '&amp;'  ]
 ]);
}
function _aspxParseShortcutString(shortcutString) {
 if(!shortcutString)
  return 0;
 var isCtrlKey = false;
 var isShiftKey = false;
 var isAltKey = false;
 var keyCode = null;
 var shcKeys = shortcutString.toString().split("+");
 if (shcKeys.length > 0) {
  for (var i = 0; i < shcKeys.length; i++) {
   var key = _aspxTrim(shcKeys[i].toUpperCase());
   switch (key) {
    case "CTRL":
     isCtrlKey = true;
     break;
    case "SHIFT":
     isShiftKey = true;
     break;
    case "ALT":
     isAltKey = true;
     break;
    case "F1": keyCode = ASPxKey.F1; break;
    case "F2": keyCode = ASPxKey.F2; break;
    case "F3": keyCode = ASPxKey.F3; break;
    case "F4": keyCode = ASPxKey.F4; break;
    case "F5": keyCode = ASPxKey.F5; break;
    case "F6": keyCode = ASPxKey.F6; break;
    case "F7": keyCode = ASPxKey.F7; break;
    case "F8": keyCode = ASPxKey.F8; break;
    case "F9": keyCode = ASPxKey.F9; break;
    case "F10":   keyCode = ASPxKey.F10; break;
    case "F11":   keyCode = ASPxKey.F11; break;
    case "F12":   keyCode = ASPxKey.F12; break;
    case "ENTER": keyCode = ASPxKey.Enter; break;
    case "HOME":  keyCode = ASPxKey.Home; break;
    case "END":   keyCode = ASPxKey.End; break;
    case "LEFT":  keyCode = ASPxKey.Left; break;
    case "RIGHT": keyCode = ASPxKey.Right; break;
    case "UP": keyCode = ASPxKey.Up; break;
    case "DOWN":  keyCode = ASPxKey.Down; break;
    case "PAGEUP": keyCode = ASPxKey.PageUp; break;
    case "PAGEDOWN": keyCode = ASPxKey.PageDown; break;
    case "SPACE": keyCode = ASPxKey.Space; break;
    case "TAB":   keyCode = ASPxKey.Tab; break;
    case "BACK":  keyCode = ASPxKey.Backspace; break;
    case "CONTEXT": keyCode = ASPxKey.ContextMenu; break;
    case "ESCAPE":
    case "ESC":
     keyCode = ASPxKey.Esc;
     break;
    case "DELETE":
    case "DEL":
     keyCode = ASPxKey.Delete;
     break;
    case "INSERT":
    case "INS":
     keyCode = ASPxKey.Insert;
     break;
    case "PLUS":
     keyCode = "+".charCodeAt(0);
     break;
    default:
     keyCode = key.charCodeAt(0);
     break;
   }
  }
 } else
  alert("Invalid shortcut");
 return _aspxGetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey);
}
function _aspxGetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey) {
 var value = keyCode & 0xFFFF;
 var flags = 0;
 flags |= isCtrlKey ? 1 << 0 : 0;
 flags |= isShiftKey ? 1 << 2 : 0;
 flags |= isAltKey ? 1 << 4 : 0;
 value |= flags << 16;
 return value;
}
function _aspxGetShortcutCodeByEvent(evt) {
 return _aspxGetShortcutCode(_aspxGetKeyCode(evt), evt.ctrlKey, evt.shiftKey, evt.altKey);
}
function _aspxIsPasteShortcut(evt){
 var keyCode = _aspxGetKeyCode(evt);
 if (__aspxNetscapeFamily && evt.which == 0)  
  keyCode = evt.keyCode;
 return (evt.ctrlKey && (keyCode == 118  || (keyCode == 86))) ||
     (evt.shiftKey && !evt.ctrlKey && !evt.altKey &&
     (keyCode == ASPxKey.Insert)) ;
}
var ASPxImageUtils = {
 GetImageSrc: function (image){
  return image.src;
 },
 SetImageSrc: function(image, src){
  image.src = src;
 },
 SetSize: function(image, width, height){
  image.style.width = width + "px";
  image.style.height = height + "px";
 },
 GetSize: function(image, isWidth){
  return (isWidth ? image.offsetWidth : image.offsetHeight);
 }
};
var __aspxVerticalScrollBarWidth;
function _aspxGetVerticalScrollBarWidth() {
 if(typeof(__aspxVerticalScrollBarWidth) == "undefined") {
  var container = document.createElement("DIV");
  container.style.cssText = "position: absolute; top: 0px; left: 0px; visibility: hidden; width: 200px; height: 150px; overflow: hidden";
  document.body.appendChild(container);
  var child = document.createElement("P");
  container.appendChild(child);
  child.style.cssText = "width: 100%; height: 200px;";
  var widthWithoutScrollBar = child.offsetWidth;
  container.style.overflow = "scroll";
  var widthWithScrollBar = child.offsetWidth;
  if(widthWithoutScrollBar == widthWithScrollBar)
   widthWithScrollBar = container.clientWidth;
  __aspxVerticalScrollBarWidth = widthWithoutScrollBar - widthWithScrollBar;
  document.body.removeChild(container);
 }
 return __aspxVerticalScrollBarWidth;
}
function _aspxGetVerticalOverflow(element) {
 if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
  return element.style.overflowY;
 return element.style.overflow;
}
function _aspxSetVerticalOverflow(element, value) {
 if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
  element.style.overflowY = value;
 else
  element.style.overflow = value;
}
function _aspxHideScrollBarCore(element, scrollName) {
 if(element.tagName == "IFRAME") {
  if((element.scrolling == "yes") || (element.scrolling == "auto")) {
   _aspxChangeAttribute(element, "scrolling", "no");
   return true;
  }
 }
 else if(element.tagName == "DIV") {
  if((element.style[scrollName] == "scroll") || (element.style[scrollName] == "auto")) {
   _aspxChangeStyleAttribute(element, scrollName, "hidden");
   return true;
  }
 }
 return false;
}
function _aspxRestoreScrollBarCore(element, scrollName) {
 if(element.tagName == "IFRAME")
  return _aspxRestoreAttribute(element, "scrolling");
 else if(element.tagName == "DIV")
  return _aspxRestoreStyleAttribute(element, scrollName);
 return false;
}
function _aspxSetScrollBarVisibilityCore(element, scrollName, isVisible) {
 return isVisible ? _aspxRestoreScrollBarCore(element, scrollName) : _aspxHideScrollBarCore(element, scrollName);
}
function _aspxSetScrollBarVisibility(element, isVisible) {
 if(_aspxSetScrollBarVisibilityCore(element, "overflow", isVisible)) 
  return true;
 var result = _aspxSetScrollBarVisibilityCore(element, "overflowX", isVisible)
  || _aspxSetScrollBarVisibilityCore(element, "overflowY", isVisible);
 return result;
}
function _aspxSetTimeout(callString, timeout){
 return window.setTimeout(callString, timeout);
}
function _aspxClearTimer(timerID){
 if(timerID > -1)
  window.clearTimeout(timerID);
 return -1;
}
function _aspxSetInterval(callString, interval){
 return window.setInterval(callString, interval);
}
function _aspxClearInterval(timerID){
 if(timerID > -1)
  window.clearInterval(timerID);
 return -1;
}
function _aspxSetInnerHtml(element, html) {
 if(__aspxIE) {
  element.innerHTML = "<em>&nbsp;</em>" + html;
  element.removeChild(element.firstChild);
 } else
  element.innerHTML = html;
}
function _aspxGetInnerText(container) {
 if (__aspxNetscapeFamily)
  return container.textContent;
 else if (__aspxWebKitFamily) {
  var filter = _aspxGetHtml2PlainTextFilter();
  filter.innerHTML = container.innerHTML;
  _aspxSetElementDisplay(filter, true);
  var innerText = filter.innerText;
  _aspxSetElementDisplay(filter, false);
  return innerText;
 } else
  return container.innerText;
}
var __aspxHtml2PlainTextFilter = null;
function _aspxGetHtml2PlainTextFilter() {
 if (__aspxHtml2PlainTextFilter == null) {
  __aspxHtml2PlainTextFilter = document.createElement("DIV");
  __aspxHtml2PlainTextFilter.style.width = "0";
  __aspxHtml2PlainTextFilter.style.height = "0";
  __aspxHtml2PlainTextFilter.style.overflow = "visible";
  _aspxSetElementDisplay(__aspxHtml2PlainTextFilter, false);
  document.body.appendChild(__aspxHtml2PlainTextFilter);
 }
 return __aspxHtml2PlainTextFilter;
}
function _aspxCreateHiddenField(name, id) {
 var input = document.createElement("INPUT");
 input.setAttribute("type", "hidden");
 if(name)
  input.setAttribute("name", name);
 if(id)
  input.setAttribute("id", id);
 return input;
}
function _aspxCloneObject(srcObject) {
  if(typeof(srcObject) != 'object' || srcObject == null)
 return srcObject;
  var newObject = { };
  for(var i in srcObject) 
 newObject[i] = srcObject[i];
  return newObject;
}
function _aspxIsExists(obj){
 return (typeof(obj) != "undefined") && (obj != null);
}
function _aspxIsFunction(obj){
 return typeof(obj) == "function";
}
function _aspxGetDefinedValue(value, defaultValue){
 return (typeof(value) != "undefined") ? value : defaultValue;
}
function _aspxGetKeyCode(srcEvt) {
 return __aspxNetscapeFamily || __aspxOpera ? srcEvt.which : srcEvt.keyCode;
}
function _aspxPreventElementDrag(element) {
 if(__aspxIE)
  _aspxAttachEventToElement(element, "dragstart", _aspxPreventEvent);
 else
  _aspxAttachEventToElement(element, "mousedown", _aspxPreventEvent);
}
function _aspxPreventElementDragAndSelect(element, skipMouseMove, skipIESelect){
 if(__aspxWebKitFamily)
  _aspxAttachEventToElement(element, "selectstart", _aspxPreventEventAndBubble);
 if(__aspxIE){
  if(!skipIESelect)
   _aspxAttachEventToElement(element, "selectstart", _aspxFalseFunction);
  if(!skipMouseMove)
   _aspxAttachEventToElement(element, "mousemove", _aspxClearSelectionOnMouseMove);
  _aspxAttachEventToElement(element, "dragstart", _aspxPreventDragStart);
 }
}
function _aspxSetElementAsUnselectable(element, isWithChild, recursive) {
 if (element && element.nodeType == 1) {
  element.unselectable = "on";
  if(__aspxNetscapeFamily)
   element.onmousedown = _aspxFalseFunction;
  if((__aspxIE && __aspxBrowserVersion >= 9) || __aspxWebKitFamily)
   _aspxAttachEventToElement(element, "mousedown", _aspxPreventEventAndBubble);
  if(isWithChild === true){
   for(var j = 0; j < element.childNodes.length; j ++)
    _aspxSetElementAsUnselectable(element.childNodes[j], (!!recursive ? true : false), (!!recursive));
  }
 }
}
function _aspxIsPercentageSize(size) {
 return size && size.indexOf('%') != -1;
}
function _aspxClearSelection() {
 try {
  if (window.getSelection) {
   if (__aspxWebKitFamily)
    window.getSelection().collapse();
   else
    window.getSelection().removeAllRanges();
  }
  else if (document.selection) {
   if(document.selection.empty)
    document.selection.empty();
   else if(document.selection.clear)
    document.selection.clear();
  }
 } catch(e) {
 }
}
function _aspxClearSelectionOnMouseMove(evt) {
 if (!__aspxIE || (evt.button != 0)) 
  _aspxClearSelection();
}
function _aspxPreventDragStart(evt) {
 evt = _aspxGetEvent(evt);
 var element = _aspxGetEventSource(evt);
 if (element.releaseCapture)
  element.releaseCapture(); 
 return false;
}
function _aspxSetElementSelectionEnabled(element, value) {
 var userSelectValue = value ? "" : "none";
 var func = value ? _aspxDetachEventFromElement : _aspxAttachEventToElement;
 if(__aspxFirefox)
  element.style.MozUserSelect = userSelectValue;
 else if(__aspxWebKitFamily)
  element.style.webkitUserSelect = userSelectValue;
 else if(__aspxOpera)
  func(element, "mousemove", _aspxClearSelection);
 else {
  func(element, "selectstart", _aspxFalseFunction);
  func(element, "mousemove", _aspxClearSelection);
 }
}
function _aspxGetElementById(id) {
 if(document.getElementById)
  return document.getElementById(id);
 else
  return document.all[id];
}
function _aspxGetInputElementById(id) {
 var elem = _aspxGetElementById(id);
 if(!__aspxIE)
  return elem;
 if(elem) {
  if(elem.id == id)
   return elem;
  else {
   for(var i = 1; i < document.all[id].length; i++) {
    if(document.all[id][i].id == id)
     return document.all[id][i];
   }
  }
 }
 return null;
}
function _aspxGetElementByIdInDocument(documentObj, id) {
 if(documentObj.getElementById)
  return documentObj.getElementById(id);
 else
  return documentObj.all[id];
}
function _aspxGetIsParent(parentElement, element) {
 while(element){
  if(element === parentElement)
   return true;
  if(element.tagName === "BODY")
   return false;
  element = element.parentNode;
 }
 return false;
}
function _aspxGetParentById(element, id) {
 element = element.parentNode;
 while(element){
  if(element.id === id)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetParentByTagName(element, tagName) {
 tagName = tagName.toUpperCase();
 while(element) {
  if(element.tagName === "BODY")
   return null;
  if(element.tagName === tagName)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxElementHasCssClass(element, className) {
 try {
  return !!element.className.match("(^|\\s)" + className + "(\\s|$)");
 } catch(e) {
  return false;
 }
}
function _aspxElementCssClassContains(element, className) {
 try {
  return element.className.indexOf(className) != -1;
 } catch(e) {
  return false;
 }
}
function _aspxAddClassNameToElement(element, className){
 if(!_aspxElementHasCssClass(element, className))
  element.className = element.className + " " + className;
}
function _aspxRemoveClassNameFromElement(element, className){
 if(_aspxElementHasCssClass(element, className)) {
  element.className = (" " + element.className + " ").replace(" " + className + " ", " ");
 }
}
function _aspxGetChildNodesByClassName(parent, className) {
 if(parent.querySelectorAll) {
  var children = parent.querySelectorAll('.' + className);
  return _aspxNodeListToArray(children, function(element) { 
   return element.parentNode === parent;
  });
 }
 return _aspxGetChildNodes(parent, function(elem) { return elem.className && _aspxElementHasCssClass(elem, className); });
}
function _aspxGetDescendantNodesByClassName(parent, className) {
 if(parent.querySelectorAll) {
  var children = parent.querySelectorAll('.' + className);
  return _aspxNodeListToArray(children);
 }
 return _aspxGetDescendantNodes(parent, function(elem) { return elem.className && _aspxElementHasCssClass(elem, className); });
}
function _aspxGetParentByClassNameInternal(element, className, selector) {
 while(element != null) {
  if(element.tagName == "BODY")
   return null;
  if(selector(element, className))
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetParentByPartialClassName(element, className) {
 return _aspxGetParentByClassNameInternal(element, className, _aspxElementCssClassContains);
}
function _aspxGetParentByClassName(element, className) {
 return _aspxGetParentByClassNameInternal(element, className, _aspxElementHasCssClass);
}
function _aspxGetParentByTagNameAndAttributeValue(element, tagName, attrName, attrValue) {
 tagName = tagName.toUpperCase();
 while(element != null) {
  if(element.tagName == "BODY")
   return null;
  if(element.tagName == tagName && element[attrName] == attrValue)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetChildById(element, id) {
 if(element.all) {
  var child = element.all[id];
  if (!child) {
   child = element.all(id); 
   if(!child)
    return __aspxIE ? document.getElementById(id) : null; 
  } 
  if(!_aspxIsExists(child.length)) 
   return child;
  else
   return _aspxGetElementById(id);
 }
 else
  return _aspxGetElementById(id);
}
function _aspxGetElementsByTagName(element, tagName) {
 tagName = tagName.toUpperCase();
 if(element) {
  if(element.getElementsByTagName) 
   return element.getElementsByTagName(tagName);
  else if(element.all && element.all.tags !== undefined)
   return __aspxNetscape ? element.all.tags[tagName] : element.all.tags(tagName);
 }
 return null;
}
function _aspxGetChildByTagName(element, tagName, index) {
 if(element != null){    
  var collection = _aspxGetElementsByTagName(element, tagName);
  if(collection != null){
   if(index < collection.length)
    return collection[index];
  }
 }
 return null;
}
function _aspxRetrieveByPredicate(scourceCollection, predicate) {
 var result = [];
 for(var i = 0; i < scourceCollection.length; i++) {
  var element = scourceCollection[i];
  if(!predicate || predicate(element)) 
   result.push(element);
 }
 return result;
}
function _aspxGetChildNodes(parent, predicate) {
 return _aspxRetrieveByPredicate(parent.childNodes, predicate);
}
function _aspxGetChildNodesByTagName(parent, tagName) {
 return _aspxGetChildNodes(parent, function (child) { return child.tagName === tagName; });
}
function _aspxGetDescendantNodes(parent, predicate) {
 var c = parent.all || parent.getElementsByTagName('*');
 return _aspxRetrieveByPredicate(c, predicate);
}
function _aspxGetElementNodes(parent) {
 if(!parent) return null;
 return _aspxGetChildNodes(parent, function(e) { return e.nodeType == 1 })
}
function _aspxGetElementNodesByPredicate(parent, predicate) {
 if(!parent) return null;
 if(!predicate) return _aspxGetElementNodes(parent);
 return _aspxGetChildNodes(parent, function(e) { return e.nodeType == 1 && predicate(e); })
}
function _aspxGetChildTextNode(element, index) {
 if(element != null){
  var collection = [ ];
  _aspxGetChildTextNodeCollection(element, collection);
  if(index < collection.length)
   return collection[index];
 }
 return null;
}
function _aspxGetChildTextNodeCollection(element, collection) {
 for(var i = 0; i < element.childNodes.length; i ++){
  var childNode = element.childNodes[i];
  if(_aspxIsExists(childNode.nodeValue))
   collection.push(childNode);
  _aspxGetChildTextNodeCollection(childNode, collection);
 }
}
function _aspxGetChildrenByPartialClassName(element, className) {
 if(element.querySelectorAll) {
  var list = element.querySelectorAll('*[class*=' + className + ']');
  return _aspxNodeListToArray(list);
 }
 var collection = element.all || element.getElementsByTagName('*');
 var ret = [ ];
 if(collection != null) {
  for(var i = 0; i < collection.length; i ++) {
   if(_aspxElementCssClassContains(collection[i], className))
    ret.push(collection[i]);
  }
 }
 return ret;
}
function _aspxGetParentByPartialId(element, idPart){
 while(element && element.tagName != "BODY") {
  if(element.id && element.id.indexOf(idPart) > -1) 
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetElementsByPartialId(element, partialName, list) {
 if(element.id && element.id.indexOf(partialName) > -1) {
  list.push(element);
 }
 if(element.childNodes)
 for(var i = 0; i < element.childNodes.length; i ++) {
  _aspxGetElementsByPartialId(element.childNodes[i], partialName, list);
 }
}
function _aspxGetElementDocument(element) {
 return element.document || element.ownerDocument;
}
function _aspxRemoveElement(element) {
 if(element && element.parentNode)
  element.parentNode.removeChild(element);
}
function _aspxReplaceTagName(element, newTagName, cloneChilds) {
 if (element.nodeType != 1)
  return null;
 if (element.nodeName == newTagName)
  return element;
 cloneChilds = cloneChilds !== undefined ? cloneChilds : true;
 var doc = element.ownerDocument;
 var newElem = doc.createElement(newTagName);
 _aspxCopyAllAttributes(element, newElem);
 if(cloneChilds) {
  for (var i = 0; i < element.childNodes.length; i++)
   newElem.appendChild(element.childNodes[i].cloneNode(true));
 }
 else {
  for(var child; child = element.firstChild; )
   newElem.appendChild(child);
 }
 element.parentNode.replaceChild(newElem, element);
 return newElem;
}
function _aspxRemoveOuterTags(element) {
 if (__aspxIE) {
  element.insertAdjacentHTML( 'beforeBegin', element.innerHTML ) ;
  _aspxRemoveElement(element);
 } else {
  var docFragment = element.ownerDocument.createDocumentFragment();
  for (var i = 0; i < element.childNodes.length; i++)
   docFragment.appendChild(element.childNodes[i].cloneNode(true));
  element.parentNode.replaceChild(docFragment, element);
 }
}
function _aspxWrapElementInNewElement(element, newElementTagName) { 
 var wrapElement = null;
 if (__aspxIE) {
  var wrapElement = element.ownerDocument.createElement(newElementTagName);
  wrapElement.appendChild(element.cloneNode(true));
  element.parentNode.insertBefore(wrapElement, element);
  element.parentNode.removeChild(element);
 } else {
  var docFragment = element.ownerDocument.createDocumentFragment();
  wrapElement = element.ownerDocument.createElement(newElementTagName);
  docFragment.appendChild(wrapElement);
  wrapElement.appendChild(element.cloneNode(true));
  element.parentNode.replaceChild(docFragment, element);
 }
 return wrapElement;
}
function _aspxInsertElementAfter(newElement, targetElement) {
 var parentElem = targetElement.parentNode;
 if(parentElem.childNodes[parentElem.childNodes.length - 1] == targetElement)
  parentElem.appendChild(newElement);
 else
  parentElem.insertBefore(newElement, targetElement.nextSibling);
}
function _aspxGetEvent(evt){
 return (typeof(event) != "undefined" && event != null && __aspxIE) ? event : evt; 
}
function _aspxEventPrevented(evt) {
 return evt.defaultPrevented || evt.returnValue === false;
}
function _aspxPreventEvent(evt){
 if (evt.preventDefault)
  evt.preventDefault();
 else
  evt.returnValue = false;
 return false;
}
function _aspxPreventEventAndBubble(evt){
 _aspxPreventEvent(evt);
 if (evt.stopPropagation)
  evt.stopPropagation();
 evt.cancelBubble = true;
 return false;
}
function _aspxCancelBubble(evt){
 evt.cancelBubble = true;
 return false;
}
function _aspxPreventImageDragging(image) {
 if(image) {
  if(__aspxNetscapeFamily)
   image.onmousedown = function(evt) {
    evt.cancelBubble = true;
    return false;
   };
  else
   image.ondragstart = function() {
    return false;
   };
 }
}
function _aspxClientEventRequiresDocScrollCorrection() {
 return __aspxAndroidDefaultBrowser || !(__aspxSafari && __aspxBrowserVersion < 3 || __aspxMacOSMobilePlatform && __aspxBrowserVersion < 5.1);
}
function _aspxGetEventSource(evt){
 if(!_aspxIsExists(evt)) return null; 
 return evt.srcElement ? evt.srcElement : evt.target;
}
function _aspxGetEventX(evt){
 if(ASPxClientTouchUI.isTouchEvent(evt))
  return ASPxClientTouchUI.getEventX(evt);
 return evt.clientX  - _aspxGetIEDocumentClientOffsetInternal(true) + (_aspxClientEventRequiresDocScrollCorrection() ? _aspxGetDocumentScrollLeft() : 0);
}
function _aspxGetEventY(evt){
 if(ASPxClientTouchUI.isTouchEvent(evt))
  return ASPxClientTouchUI.getEventY(evt);
 var oldSafari = __aspxSafari && __aspxBrowserVersion < 3 || __aspxMacOSMobilePlatform && __aspxBrowserVersion < 5.1;
 return evt.clientY - _aspxGetIEDocumentClientOffsetInternal(false) + (_aspxClientEventRequiresDocScrollCorrection() ? _aspxGetDocumentScrollTop() : 0 );
}
function _aspxGetIEDocumentClientOffsetInternal(IsX){
 var clientOffset = 0;
 if(__aspxIE && __aspxBrowserVersion < 8){
  if(document.documentElement)
   clientOffset = IsX ? document.documentElement.clientLeft : document.documentElement.clientTop;
  if(clientOffset == 0 && document.body)
   var clientOffset = IsX ? document.body.clientLeft : document.body.clientTop;
 }
 return clientOffset;
}
function _aspxGetIsLeftButtonPressed(evt){
 if(ASPxClientTouchUI.isTouchEvent(evt)) 
  return true;
 evt = _aspxGetEvent(evt);
 if(!evt) return false;
 if(__aspxIE && __aspxBrowserVersion < 11){
  if(__aspxMSTouchUI)
   return true;
  return evt.button % 2 == 1; 
 }
 else if(__aspxNetscapeFamily || __aspxWebKitFamily || (__aspxIE && __aspxBrowserVersion >= 11))
  return evt.which == 1;
 else if (__aspxOpera)
  return evt.button == 0;  
 return true;  
}
function _aspxGetWheelDelta(evt){
 var ret = __aspxNetscapeFamily ? -evt.detail : evt.wheelDelta;
 if (__aspxOpera && __aspxBrowserVersion < 9)
  ret = -ret;
 return ret;
}
function _aspxDelCookie(name){
 _aspxSetCookieInternal(name, "", new Date(1970, 1, 1));
}
function _aspxGetCookie(name) {
 name = escape(name);
 var cookies = document.cookie.split(';');
 for(var i = 0; i < cookies.length; i++) {
  var cookie = _aspxTrim(cookies[i]);
  if(cookie.indexOf(name + "=") == 0)
   return unescape(cookie.substring(name.length + 1, cookie.length));
  else if(cookie.indexOf(name + ";") == 0 || cookie === name)
   return "";
 }
 return null;
}
function _aspxSetCookie(name, value, expirationDate){
 if(!_aspxIsExists(value)) {
  _aspxDelCookie(name);
  return;
 }
 if(!ASPxIdent.IsDate(expirationDate)) {
  expirationDate = new Date();
  expirationDate.setFullYear(expirationDate.getFullYear() + 1);
 }
 _aspxSetCookieInternal(name, value, expirationDate);
}
function _aspxSetCookieInternal(name, value, date){
 document.cookie = escape(name) + "=" + escape(value.toString()) + "; expires=" + date.toGMTString() + "; path=/";
}
function _aspxSetElementOpacity(element, value) {
  var useOpacityStyle = !__aspxIE || __aspxBrowserVersion > 8;
  if (useOpacityStyle){
   element.style.opacity = value;
  } else {
   if(typeof(element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"])
    element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity = value*100;
   else
   element.style.filter = "alpha(opacity=" + (value * 100) + ")";
  }
}
function _aspxGetElementOpacity(element) {
 var useOpacityStyle = !__aspxIE || __aspxBrowserVersion > 8;
 if (useOpacityStyle)
  return parseFloat(_aspxGetCurrentStyle(element).opacity);
 else {
  if(typeof(element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"]){
   return element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity / 100;
  } else {
   var alphaValue = _aspxGetCurrentStyle(element).filter;
   var value = alphaValue.replace("alpha(opacity=", "");
   value = value.replace(")", "");
   return parseInt(value) / 100;
  }
  return 100;
 }
}
function _aspxGetElementDisplay(element){
 return element.style.display != "none";
}
function _aspxSetElementDisplay(element, value) {
 if(!element) return;
 element.style.display = value ? "" : "none";
}
function _aspxGetElementVisibility(element){
 return element.style.visibility != "hidden";
}
function _aspxSetElementVisibility(element, value){
 element.style.visibility = value ? "visible" : "hidden";
}
function _aspxElementIsVisible(element){
 while(element && element.tagName != "BODY") {
  if(!_aspxGetElementDisplay(element) || (!_aspxGetElementVisibility(element) && !_aspxIsExistsAttribute(element, "errorFrame")))
     return false;
  element = element.parentNode;
 }
 return true;
}
function _aspxElementIsDisplayed(element) {
 while(element && element.tagName != "BODY") {
  if(!_aspxGetElementDisplay(element))
     return false;
  element = element.parentNode;
 }
 return true;
}
function _aspxAddStyleSheetLinkToDocument(doc, linkUrl) {
 var newLink = _aspxCreateStyleLink(doc, linkUrl);
 var head = _aspxGetHeadElementOrCreateIfNotExist(doc);
 head.appendChild(newLink);
}
function _aspxGetHeadElementOrCreateIfNotExist(doc) {
 var elements = _aspxGetElementsByTagName(doc, "head");
 var head = null;
 if (elements.length == 0) {
  head = doc.createElement("head");
  head.visibility = "hidden";
  doc.insertBefore(head, doc.body);
 } else
  head = elements[0];
 return head;
}
function _aspxCreateStyleLink(doc, url) {
 var newLink = doc.createElement("link");
 _aspxSetAttribute(newLink, "href", url);
 _aspxSetAttribute(newLink, "type", "text/css");
 _aspxSetAttribute(newLink, "rel", "stylesheet");
 return newLink;
}
function _aspxGetCurrentStyle(element) {
 if(element.currentStyle)
  return element.currentStyle;
 else if(document.defaultView && document.defaultView.getComputedStyle) { 
  var result = document.defaultView.getComputedStyle(element, null);
  if(!result && __aspxFirefox && window.frameElement) {
   var changes = [];
   var curElement = window.frameElement;
   while(!(result = document.defaultView.getComputedStyle(element, null))) {
    changes.push([curElement, curElement.style.display]);
    _aspxSetStyleCore(curElement, "display", "block", true);
    curElement = curElement.tagName == "BODY" ? curElement.ownerDocument.defaultView.frameElement : curElement.parentNode;
   }
   result = _aspxCloneObject(result);
   for(var ch, i = 0; ch = changes[i]; i++)
    _aspxSetStyleCore(ch[0], "display", ch[1]);
  }
  return result;
 }
 return window.getComputedStyle(element, null);
}
function _aspxIsElementRightToLeft(element) {
 return _aspxGetElementDirection(element) == "rtl";
}
function _aspxCreateStyleSheetInDocument(doc) {
 if(doc.createStyleSheet) {
  try {
   return doc.createStyleSheet();
  }
  catch(e) {
   var message = "The CSS link limit (31) has been exceeded. Please enable CSS merging or reduce the number of CSS files on the page. For details, see http://www.devexpress.com/Support/Center/p/K18487.aspx.";
   throw new Error(message);
  }
 }
 else {
  var styleSheet = doc.createElement("STYLE");
  _aspxGetChildByTagName(doc, "HEAD", 0).appendChild(styleSheet);
  return styleSheet.sheet;
 }
}
function _aspxGetCurrentStyleSheet() {
 if(!__aspxStyleSheet)
  __aspxStyleSheet = _aspxCreateStyleSheetInDocument(document);
 return __aspxStyleSheet;
}
function _aspxCreateStyleSheet(){
 return _aspxCreateStyleSheetInDocument(document);
}
function _aspxGetStyleSheetRules(styleSheet){
 try {
  return __aspxIE ? styleSheet.rules : styleSheet.cssRules;
 }
 catch(e) {
  return null;
 }
}
function _aspxGetStyleSheetRule(className){
 if(__aspxCachedRules[className]) {
  if(__aspxCachedRules[className] != __aspxEmptyCachedValue)
   return __aspxCachedRules[className];
  return null;
 }
 for(var i = 0; i < document.styleSheets.length; i ++){
  var styleSheet = document.styleSheets[i];
  var rules = _aspxGetStyleSheetRules(styleSheet);
  if(rules != null){
   for(var j = 0; j < rules.length; j ++){
    if(rules[j].selectorText == "." + className){
     __aspxCachedRules[className] = rules[j];
     return rules[j];
    }
   }
  }
 }
 __aspxCachedRules[className] = __aspxEmptyCachedValue;
 return null;
}
function _aspxCreateImportantStyleRule(styleSheet, cssText, postfix, prefix) {
 styleSheet = styleSheet || _aspxGetCurrentStyleSheet();
 var cacheKey = (postfix ? postfix + "||" : "") + cssText + (prefix ? "||" + prefix : "");
 if(__aspxStyleNameCache[cacheKey])
  return __aspxStyleNameCache[cacheKey];
 prefix = prefix ? prefix + " " : "";
 var className = "dxh" + __aspxStyleCount + (postfix ? postfix : "");
 _aspxAddStyleSheetRule(styleSheet, prefix + "." + className, _aspxCreateImportantCssText(cssText));
 __aspxStyleCount++;
 __aspxStyleNameCache[cacheKey] = className;
 return className; 
}
function _aspxCreateImportantCssText(cssText) {
 var newText = "";
 var attributes = cssText.split(";");
 for(var i = 0; i < attributes.length; i++){
  if(attributes[i] != "")
   newText += attributes[i] + " !important;";
 }
 return newText;
}
function _aspxRemoveStyleSheetRule(styleSheet, index){
 var rules = _aspxGetStyleSheetRules(styleSheet);
 if(rules != null && rules.length > 0 && rules.length >= index){
  if(__aspxIE)
   styleSheet.removeRule(index);
  else   
   styleSheet.deleteRule(index);  
 }    
}
function _aspxAddStyleSheetRule(styleSheet, selector, cssText){
 if(!cssText) return;
 if(__aspxIE)
  styleSheet.addRule(selector, cssText);
 else
  styleSheet.insertRule(selector + " { " + cssText + " }", styleSheet.cssRules.length);
}
function _aspxGetPointerCursor() {
 return "pointer";
}
function _aspxSetPointerCursor(element) {
 if(element.style.cursor == "")
  element.style.cursor = _aspxGetPointerCursor();
}
function _aspxSetElementFloat(element, value) {
 if(_aspxIsExists(element.style.cssFloat))
  element.style.cssFloat = value;
 else if(_aspxIsExists(element.style.styleFloat))
  element.style.styleFloat = value;
 else
  _aspxSetAttribute(element.style, "float", value);
}
function _aspxGetElementFloat(element) {
 var currentStyle = _aspxGetCurrentStyle(element);
 if(_aspxIsExists(currentStyle.cssFloat))
  return currentStyle.cssFloat;
 if(_aspxIsExists(currentStyle.styleFloat))
  return currentStyle.styleFloat;
 return _aspxGetAttribute(currentStyle, "float");
}
function _aspxGetElementDirection(element) {
 return _aspxGetCurrentStyle(element).direction;
}
function _aspxSetElementDirection(element, value) {
 element.style.direction = value;
}
function _aspxAdjustVerticalMarginsInContainer(container) {
 var containerBorderAndPaddings = _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
 var flowElements = [], floatElements = [], floatTextElements = [];
 var maxHeight = 0, maxFlowHeight = 0;
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  _aspxClearVerticalMargins(element);
 }
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  var float = _aspxGetElementFloat(element);
  var isFloat = (float === "left" || float === "right");
  if(isFloat)
   floatElements.push(element)
  else {
   flowElements.push(element);
   if(element.tagName !== "IMG"){
    element.style.verticalAlign = 'baseline'; 
    floatTextElements.push(element);
   }
   if(element.tagName === "DIV")
    _aspxChangeStyleAttribute(element, "float", "left"); 
  }
  if(element.offsetHeight > maxHeight) 
   maxHeight = element.offsetHeight;
  if(!isFloat && element.offsetHeight > maxFlowHeight) 
   maxFlowHeight = element.offsetHeight;
 }
 for(var i = 0; i < flowElements.length; i++) 
  _aspxRestoreStyleAttribute(flowElements[i], "float");
 var containerBorderAndPaddings = _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
 var containerHeight = container.offsetHeight - containerBorderAndPaddings;
 if(maxHeight == containerHeight) {
  var verticalAlign = _aspxGetCurrentStyle(container).verticalAlign;
  for(var i = 0; i < floatTextElements.length; i++)
   floatTextElements[i].style.verticalAlign = '';
  containerHeight = container.offsetHeight - containerBorderAndPaddings;
  for(var i = 0; i < floatElements.length; i++)
   _aspxAdjustVerticalMarginsCore(floatElements[i], containerHeight, verticalAlign, true);
  for(var i = 0; i < flowElements.length; i++) {
   if(maxFlowHeight != maxHeight)
    _aspxAdjustVerticalMarginsCore(flowElements[i], containerHeight, verticalAlign);
  }
 }
}
function _aspxAdjustVerticalMargins(element) {
 _aspxClearVerticalMargins(element);
 var parentElement = element.parentNode;
 var parentHeight = parentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(parentElement);
 _aspxAdjustVerticalMarginsCore(element, parentHeight, _aspxGetCurrentStyle(parentElement).verticalAlign);
}
function _aspxAdjustVerticalMarginsCore(element, parentHeight, verticalAlign, toBottom) {
 var marginTop;
 if(verticalAlign == "top")
  marginTop = 0;
 else if(verticalAlign == "bottom")
  marginTop = parentHeight - element.offsetHeight;
 else
  marginTop = (parentHeight - element.offsetHeight) / 2;
 if(marginTop !== 0){
  var marginAttr = (toBottom ? Math.ceil(marginTop) : Math.floor(marginTop)) + "px"
  element.style.marginTop = marginAttr;
 }
}
function _aspxClearVerticalMargins(element) {
 element.style.marginTop = "";
 element.style.marginBottom = "";
}
function _aspxAdjustHeightInContainer(container) {
 var height = container.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  _aspxClearHeight(element);
 }
 var elements = [];
 var childrenHeight = 0;
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  childrenHeight += element.offsetHeight + _aspxGetTopBottomMargins(element);
  elements.push(element);
 }
 if(elements.length > 0 && childrenHeight < height) {
  var correctedHeight = 0;
  for(var i = 0; i < elements.length; i++) {
   var elementHeight = 0;
   if(i < elements.length - 1){
    var elementHeight = Math.floor(height / elements.length);
    correctedHeight += elementHeight;
   }
   else{
    var elementHeight = height - correctedHeight;
    if(elementHeight < 0) elementHeight = 0;
   }
   _aspxAdjustHeightCore(elements[i], elementHeight);
  }
 }
}
function _aspxAdjustHeight(element) {
 _aspxClearHeight(element);
 var parentElement = element.parentNode;
 var height = parentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(parentElement);
 _aspxAdjustHeightCore(element, height);
}
function _aspxAdjustHeightCore(element, height) {
 var height = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
 element.style.height = height + "px";
}
function _aspxClearHeight(element) {
 element.style.height = "";
}
function _aspxAdjustWrappedTextInContainer(container) {
 if(!container) return;
 var textContainer, leftWidth = 0, rightWidth = 0;
 for(var i = 0; i < container.childNodes.length; i++){
  var child = container.childNodes[i];
  if(child.tagName === "BR")
   return;
  if(!child.tagName)
   continue;
  if(child.tagName !== "IMG"){
   textContainer = child;
   if(_aspxIsTextWrapped(textContainer)){
    textContainer.style.width = "";
    textContainer.style.marginRight = "";
   }
  }
  else {
   if(child.offsetWidth === 0){
    _aspxAttachEventToElement(child, "load", function (evt) {
     _aspxAdjustWrappedTextInContainer(container);
    });
    return;
   }
   var width = child.offsetWidth + _aspxGetLeftRightMargins(child);
   if(textContainer)
    rightWidth += width;
   else
    leftWidth += width;
  }
 }
 var containerWidth = container.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(container);
 if(textContainer && _aspxIsTextWrapped(textContainer) && textContainer.offsetWidth + leftWidth + rightWidth >= containerWidth) {
   if(rightWidth > 0)
   textContainer.style.width = (containerWidth - rightWidth) + "px";
  else if(leftWidth > 0){
   if(_aspxIsElementRightToLeft(container))
    textContainer.style.marginLeft = leftWidth + "px";
   else
    textContainer.style.marginRight = leftWidth + "px";
  }
 }
}
function _aspxIsTextWrapped(element) {
 return element && _aspxGetCurrentStyle(element).whiteSpace !== "nowrap";
}
var _aspxWebKit3TDRealInfo = {
 GetOffsetTop: function(tdElement){
  switch(_aspxGetCurrentStyle(tdElement).verticalAlign){
   case "middle":
    return Math.round(tdElement.offsetTop - (tdElement.offsetHeight - tdElement.clientHeight )/2 + tdElement.clientTop);
   case "bottom":
    return tdElement.offsetTop - tdElement.offsetHeight + tdElement.clientHeight + tdElement.clientTop;
  }
  return tdElement.offsetTop;
 },
 GetClientHeight: function(tdElement){
  var valign = _aspxGetCurrentStyle(tdElement).verticalAlign;
  switch(valign){
   case "middle":
    return tdElement.clientHeight + tdElement.offsetTop * 2;
   case "top":
    return tdElement.offsetHeight - tdElement.clientTop * 2;
   case "bottom":
    return tdElement.clientHeight + tdElement.offsetTop;
  }
  return tdElement.clientHeight;
 }
}
function _aspxGetIsValidPosition(pos){
 return pos != __aspxInvalidPosition && pos != -__aspxInvalidPosition;
}
function _aspxGetAbsoluteX(curEl){
 return _aspxGetAbsolutePositionX(curEl);
}
function _aspxGetAbsoluteY(curEl){
 return _aspxGetAbsolutePositionY(curEl);
}
function _aspxSetAbsoluteX(element, x){
 element.style.left = _aspxPrepareClientPosForElement(x, element, true) + "px";
}
function _aspxSetAbsoluteY(element, y){
 element.style.top = _aspxPrepareClientPosForElement(y, element, false) + "px";
}
function _aspxGetAbsolutePositionX(element){
 if (__aspxIE)
  return _aspxGetAbsolutePositionX_IE(element);
 else if (__aspxFirefox && __aspxBrowserVersion >= 3)
  return _aspxGetAbsolutePositionX_FF3(element);
 else if (__aspxOpera)
  return _aspxGetAbsolutePositionX_Opera(element);
 else if(__aspxNetscapeFamily && (!__aspxFirefox || __aspxBrowserVersion < 3))
  return _aspxGetAbsolutePositionX_NS(element);
 else if(__aspxWebKitFamily)
  return _aspxGetAbsolutePositionX_Safari(element);
 else
  return _aspxGetAbsolutePositionX_Other(element);
}
function _aspxGetAbsolutePositionX_Opera(curEl){
 var isFirstCycle = true;
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, true);
 while (curEl != null) {
  pos += curEl.offsetLeft;
  if(!isFirstCycle)
   pos -= curEl.scrollLeft;
  curEl = curEl.offsetParent;
  isFirstCycle = false;
 }
 pos += document.body.scrollLeft;
 return pos;
}
function _aspxGetAbsolutePositionX_IE(element){
 if(element == null || __aspxIE && element.parentNode == null) return 0; 
 return element.getBoundingClientRect().left + _aspxGetDocumentScrollLeft() - _aspxGetIEDocumentClientOffsetInternal(true);
}
function _aspxGetAbsolutePositionX_FF3(element){
 if(element == null) return 0;
 var x = element.getBoundingClientRect().left + _aspxGetDocumentScrollLeft();
 return Math.round(x);
}
function _aspxGetAbsolutePositionX_NS(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, true);
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetLeft;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollLeft;
  if (!isFirstCycle && __aspxFirefox){
   var style = _aspxGetCurrentStyle(curEl);
   if(curEl.tagName == "DIV" && style.overflow != "visible")
    pos += _aspxPxToInt(style.borderLeftWidth);
  }
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxGetAbsolutePositionX_Safari(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_WebKit(curEl, true);
 var isSafariVerNonLessThan3OrChrome = __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome;
 if(curEl != null){
  var isFirstCycle = true;
  if(isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
   pos += curEl.offsetLeft;
   curEl = curEl.offsetParent;
   isFirstCycle = false;
  }
  while (curEl != null) {
   pos += curEl.offsetLeft;
   var style = _aspxGetCurrentStyle(curEl);
   var posDiv = curEl.tagName == "DIV" && (style.position == "absolute" || style.position == "relative");
   if(!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
    pos += curEl.clientLeft;
   isFirstCycle = false;
   curEl = curEl.offsetParent;
  }
 }
 return pos;
}
function _aspxGetAbsolutePositionX_Other(curEl){
 var pos = 0;
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetLeft;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollLeft;
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxGetAbsolutePositionY(element){
 if (__aspxIE)
  return _aspxGetAbsolutePositionY_IE(element);
 else if (__aspxFirefox && __aspxBrowserVersion >= 3)
  return _aspxGetAbsolutePositionY_FF3(element);
 else if (__aspxOpera)
  return _aspxGetAbsolutePositionY_Opera(element);
 else if(__aspxNetscapeFamily && (!__aspxFirefox || __aspxBrowserVersion < 3))
  return _aspxGetAbsolutePositionY_NS(element);
 else if(__aspxWebKitFamily)
  return _aspxGetAbsolutePositionY_Safari(element);
 else
  return _aspxGetAbsolutePositionY_Other(element);
}
function _aspxGetAbsolutePositionY_Opera(curEl){
 var isFirstCycle = true;
 if(curEl && curEl.tagName == "TR" && curEl.cells.length > 0)
  curEl = curEl.cells[0];
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, false);
 while (curEl != null) {
  pos += curEl.offsetTop;
  if(!isFirstCycle)
   pos -= curEl.scrollTop;
  curEl = curEl.offsetParent;
  isFirstCycle = false;
 }
 pos += document.body.scrollTop;
 return pos;
}
function _aspxGetAbsolutePositionY_IE(element){
 if(element == null || __aspxIE && element.parentNode == null) return 0; 
 return element.getBoundingClientRect().top + _aspxGetDocumentScrollTop() - _aspxGetIEDocumentClientOffsetInternal(false);
}
function _aspxGetAbsolutePositionY_FF3(element){
 if(element == null) return 0;
 var y = element.getBoundingClientRect().top + _aspxGetDocumentScrollTop();
 return Math.round(y);
}
function _aspxGetAbsolutePositionY_NS(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, false);
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetTop;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollTop;
  if (!isFirstCycle && __aspxFirefox){
   var style = _aspxGetCurrentStyle(curEl);
   if(curEl.tagName == "DIV" && style.overflow != "visible")
    pos += _aspxPxToInt(style.borderTopWidth);
  }
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxGetAbsolutePositionY_Safari(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_WebKit(curEl, false);
 var isSafariVerNonLessThan3OrChrome = __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome;
 if(curEl != null){
  var isFirstCycle = true;
  if(isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
   pos += _aspxWebKit3TDRealInfo.GetOffsetTop(curEl);
   curEl = curEl.offsetParent;
   isFirstCycle = false;
  }
  while (curEl != null) {
   pos += curEl.offsetTop;
   var style = _aspxGetCurrentStyle(curEl);
   var posDiv = curEl.tagName == "DIV" && (style.position == "absolute" || style.position == "relative");
   if(!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
    pos += curEl.clientTop;
   isFirstCycle = false;
   curEl = curEl.offsetParent;
  }
 }
 return pos;
}
function _aspxGetAbsoluteScrollOffset_OperaFF(curEl, isX) {
 var pos = 0;   
 var isFirstCycle = true;
 while (curEl != null) {
  if(curEl.tagName == "BODY")
   break;
  var style = _aspxGetCurrentStyle(curEl);
  if(style.position == "absolute")
   break;
  if(!isFirstCycle && curEl.tagName == "DIV" && (style.position == "" || style.position == "static"))
   pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.parentNode;
  isFirstCycle = false;
 }
 return pos; 
}
function _aspxGetAbsoluteScrollOffset_WebKit(curEl, isX) {
 var pos = 0;   
 var isFirstCycle = true;
 var step = 0;
 var absoluteWasFoundAtStep = -1;
 var isThereFixedParent = false;
 while (curEl != null) {
  if(curEl.tagName == "BODY")
   break;
  var style = _aspxGetCurrentStyle(curEl);
  var positionIsDefault = style.position == "" || style.position == "static";
  var absoluteWasFoundAtPreviousStep = absoluteWasFoundAtStep >= 0 && absoluteWasFoundAtStep < step;
  if(!isFirstCycle && curEl.tagName == "DIV" && (!positionIsDefault || !absoluteWasFoundAtPreviousStep))
   pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
  if(style.position == "absolute")
   absoluteWasFoundAtStep = step;
  else if(style.position == "relative")
   absoluteWasFoundAtStep = -1;
  else if(style.position == "fixed")
   isThereFixedParent = true;
  curEl = curEl.parentNode;
  isFirstCycle = false;
  step ++;
 }
 if(isThereFixedParent)
  pos += isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
 return pos; 
}
function _aspxGetAbsolutePositionY_Other(curEl){
 var pos = 0;
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetTop;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollTop;
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxCreateElementMoke(element) {
 var div = document.createElement('DIV');
 div.style.top = "0px";
 div.style.left = "0px";
 div.visibility = "hidden";
 div.style.position = _aspxGetCurrentStyle(element).position;
 return div;
}
function _aspxPrepareClientPosElementForOtherParent(pos, element, otherParent, isX) {
 if(element.parentNode == otherParent)
  return _aspxPrepareClientPosForElement(pos, element, isX);
 var elementMoke = _aspxCreateElementMoke(element);
 otherParent.appendChild(elementMoke); 
 var preparedPos = _aspxPrepareClientPosForElement(pos, elementMoke, isX);
 otherParent.removeChild(elementMoke);
 return preparedPos;
}
function _aspxPrepareClientPosForElement(pos, element, isX) {
 pos -= _aspxGetPositionElementOffset(element, isX);
 return pos;
}
function _aspxGetExperimentalPositionOffset(element, isX) {
    var div = _aspxCreateElementMoke(element);
    if (__aspxFirefox && __aspxBrowserVersion >= 10 && div.style.position == "static")
     div.style.position = "absolute";
    element.parentNode.appendChild(div); 
    var realPos = isX ? _aspxGetAbsoluteX(div) : _aspxGetAbsoluteY(div);
    element.parentNode.removeChild(div);
    return realPos;
}
function _aspxTestElementParentsByFunc(element, func) {
 while(element) {  
  var tagName = element.tagName;
  if(tagName == "HTML" || tagName == "BODY" )
   return false;
  if(func(element)) 
   return true;
  element = element.parentNode; 
 }
 return false;   
}
function _aspxGetPositionElementOffset(element, isX) {
 if(__aspxFirefox && __aspxBrowserVersion >= 10){ 
  return _aspxGetExperimentalPositionOffset(element, isX);
 }
 return _aspxGetPositionElementOffsetCore(element, isX);
}
function _aspxGetPositionElementOffsetCore(element, isX) {
 var curEl = element.offsetParent;
 var offset = 0;
 var scroll = 0;
 var isThereFixedParent = false;
 var isFixed = false;
 var hasDisplayTableParent = false;
 var position = "";
 while(curEl != null) {
  var tagName = curEl.tagName;
  if(tagName == "HTML"){
   break;
  }
  if(tagName == "BODY"){
   if(!__aspxOpera && !__aspxChrome){
    var style = _aspxGetCurrentStyle(curEl);
    if(style.position != "" && style.position != "static"){
     offset += _aspxPxToInt(isX ? style.left : style.top);
     offset += _aspxPxToInt(isX ? style.marginLeft : style.marginTop);
    }
   }
   break;
  }
  if(tagName != "TD" && tagName != "TR") {
   var style = _aspxGetCurrentStyle(curEl);
   isFixed = style.position == "fixed";
   if(isFixed) {
    isThereFixedParent = true;
    if(__aspxIE && __aspxBrowserVersion >= 8) {
     return _aspxGetExperimentalPositionOffset(element, isX); 
    }
   }
   hasDisplayTableParent = style.display == "table" && (style.position == "absolute" || style.position == "relative");
   if(hasDisplayTableParent && __aspxIE && __aspxBrowserVersion >= 8)
    return _aspxGetExperimentalPositionOffset(element, isX);
   if (style.position == "absolute" || isFixed || style.position == "relative") {
    offset += isX ? curEl.offsetLeft : curEl.offsetTop;
    offset += _aspxPxToInt(isX ? style.borderLeftWidth : style.borderTopWidth);
   }
   if(style.position == "relative" && !(__aspxIE && __aspxBrowserVersion < 8)) 
    scroll += _aspxGetElementChainScroll(curEl, curEl.offsetParent, isX);
  }
  scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.offsetParent;
 }
 offset -= scroll; 
 if((__aspxIE && __aspxBrowserVersion >= 7 || __aspxFirefox && __aspxBrowserVersion >= 3 || __aspxWebKitFamily) && isThereFixedParent)
  offset += isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
 return offset;
}
function _aspxGetElementChainScroll(startElement, endElement, isX){
 var curEl = startElement.parentNode;
 var scroll = 0;
 while(curEl != endElement){
  scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.parentNode;
 }
 return scroll;
}
function _aspxGetSizeOfText(text, textCss) {
 var testContainer = document.createElement("tester");
 testContainer.style.fontSize = textCss.fontSize;
 testContainer.style.fontFamily = textCss.fontFamily;
 testContainer.style.fontWeight = textCss.fontWeight;
 testContainer.style.letterSpacing = textCss.letterSpacing;
 testContainer.style.lineHeight = textCss.lineHeight;
 testContainer.style.position = "absolute";
 testContainer.style.top = __aspxInvalidPosition + "px";
 testContainer.style.left = __aspxInvalidPosition + "px";
 testContainer.style.width = "auto";
 testContainer.style.whiteSpace = "nowrap";
 testContainer.appendChild(document.createTextNode(text));
 var testElement = document.body.appendChild(testContainer);
 var size = {
  "width": testElement.offsetWidth,
  "height": testElement.offsetHeight
 };
 document.body.removeChild(testElement);
 return size;
}
function _aspxIsValidJSON(JsonString) {
 return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(JsonString.replace(/"(\\.|[^"\\])*"/g, '')))
}
function _aspxEvalJSON(jsonString, controlName) {
 if(_aspxIsValidJSON(jsonString))
  return eval("(" + jsonString + ")");
 else
  throw new Error(controlName + " received incorrect JSON-data: " + jsonString);
}
function _aspxPointToPixel(points, addPx) {  
 var result = 0;
 try {
  var indexOfPt = points.toLowerCase().indexOf("pt");
  if (indexOfPt > -1)
   result = parseInt(points.substr(0, indexOfPt)) * 96 / 72;
  else
   result = parseInt(points) * 96 / 72;
  if (addPx)
   result = result + "px";
 } catch(e) {}
 return result;
}
function _aspxPixelToPoint(pixels, addPt) { 
 var result = 0;
 try {
  var indexOfPx = pixels.toLowerCase().indexOf("px");
  if (indexOfPx > -1)
   result = parseInt(pixels.substr(0, indexOfPx)) * 72 / 96;
  else
   result = parseInt(pixels) * 72 / 96;
  if (addPt)
   result = result + "pt";
 } catch(e) {}
 return result;         
}
function _aspxPxToInt(px) {
 return _aspxPxToNumber(px, parseInt);
}
function _aspxPxToFloat(px) {
 return _aspxPxToNumber(px, parseFloat);
}
function _aspxPxToNumber(px, parseFunction) {
 var result = 0;
 if (px != null && px != "") {
  try {
   var indexOfPx = px.indexOf("px");
   if (indexOfPx > -1)
    result = parseFunction(px.substr(0, indexOfPx));
  } catch(e) { }
 }
 return result;
}
function _aspxIsNumber(str) {
 return !isNaN(parseFloat(str)) && isFinite(str);
}
function _aspxPercentageToFloat(perc) {
 var result = 0;
 if(perc != null && perc != "") {
  try {
   var indexOfPerc = perc.indexOf("%");
   if(indexOfPerc > -1)
    result = parseFloat(perc.substr(0, indexOfPerc)) / 100;
  } catch(e) { }
 }
 return result;
}
function _aspxGetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle) {
 return _aspxGetLeftRightPaddings(element, currentStyle) + _aspxGetHorizontalBordersWidth(element, currentStyle);
}
function _aspxGetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle) {
 return _aspxGetTopBottomPaddings(element, currentStyle) + _aspxGetVerticalBordersWidth(element, currentStyle);
}
function _aspxGetVerticalBordersWidth(element, style) {
 if(!_aspxIsExists(style))
  style = _aspxGetCurrentStyle(element);
 var res = 0;
 if(style.borderTopStyle != "none")
  res += _aspxPxToFloat(style.borderTopWidth);
 if(style.borderBottomStyle != "none")
  res += _aspxPxToFloat(style.borderBottomWidth);
 return res;
}
function _aspxGetHorizontalBordersWidth(element, style) {
 if(!_aspxIsExists(style))
  style = _aspxGetCurrentStyle(element);
 var res = 0;
 if(style.borderLeftStyle != "none")
  res += _aspxPxToFloat(style.borderLeftWidth);
 if(style.borderRightStyle != "none")
  res += _aspxPxToFloat(style.borderRightWidth);
 return res;
}
function _aspxGetTopBottomPaddings(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.paddingTop) + _aspxPxToInt(currentStyle.paddingBottom);
}
function _aspxGetLeftRightPaddings(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.paddingLeft) + _aspxPxToInt(currentStyle.paddingRight);
}
function _aspxGetTopBottomMargins(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.marginTop) + _aspxPxToInt(currentStyle.marginBottom);
}
function _aspxGetLeftRightMargins(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.marginLeft) + _aspxPxToInt(currentStyle.marginRight);
}
function _aspxGetCeilOffsetHeight(element) {
 if(__aspxIE && __aspxBrowserVersion > 9)
  return Math.ceil(element.getBoundingClientRect().height);
 return element.offsetHeight;
}
function _aspxGetClearClientWidth(element) {
 return element.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
}
function _aspxGetClearClientHeight(element) {
 return element.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
}
function _aspxSetOffsetWidth(element, widthValue, currentStyle) {
 if(!_aspxIsExists(currentStyle))
  currentStyle = _aspxGetCurrentStyle(element);
 var value = widthValue - _aspxPxToInt(currentStyle.marginLeft) - _aspxPxToInt(currentStyle.marginRight);
  value -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
 if(value > -1)
  element.style.width = value + "px";
}
function _aspxSetOffsetHeight(element, heightValue, currentStyle) {
 if(!_aspxIsExists(currentStyle))
  currentStyle = _aspxGetCurrentStyle(element);
 var value = heightValue - _aspxPxToInt(currentStyle.marginTop) - _aspxPxToInt(currentStyle.marginBottom);
  value -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
 if(value > -1)
  element.style.height = value + "px";
}
function _aspxFindOffsetParent(element) {
 if(__aspxIE && __aspxBrowserVersion < 8)
  return element.offsetParent;
 var currentElement = element.parentNode;
 while(_aspxIsExistsElement(currentElement) && currentElement.tagName != "BODY") {
  if (currentElement.offsetWidth > 0 && currentElement.offsetHeight > 0)
   return currentElement;
  currentElement = currentElement.parentNode;
 }
 return document.body;
}
function _aspxGetDocumentScrollTop(){
 if(__aspxWebKitFamily) {
  if(__aspxMacOSMobilePlatform) 
   return window.pageYOffset;
  else 
   return document.body.scrollTop;
 }
 else
  return document.documentElement.scrollTop;
}
function _aspxSetDocumentScrollTop(scrollTop) {
 if(__aspxWebKitFamily) {
  if(__aspxMacOSMobilePlatform) 
   window.pageYOffset = scrollTop;
  else 
   document.body.scrollTop = scrollTop;
 }
 else
  document.documentElement.scrollTop = scrollTop;
}
function _aspxGetDocumentScrollLeft(){
 if(__aspxIE && __aspxBrowserVersion < 8) {
  var body = document.body || document.documentElement;
  if(_aspxIsElementRightToLeft(body))
   return body.scrollWidth - body.scrollLeft - body.clientWidth;
 }
 if(__aspxWebKitFamily)
  return document.body.scrollLeft;
 return document.documentElement.scrollLeft;
}
function _aspxSetDocumentScrollLeft(scrollLeft) {
 if(__aspxWebKitFamily) {
  if(__aspxMacOSMobilePlatform)
   window.pageXOffset = scrollLeft;
  else 
   document.body.scrollLeft = scrollLeft;
 }
 else
  document.documentElement.scrollLeft = scrollLeft;
}
function _aspxGetDocumentClientWidth(){
 if(document.documentElement.clientWidth == 0)
  return document.body.clientWidth;
 else
  return document.documentElement.clientWidth;
}
function _aspxGetDocumentClientHeight() {
 if (__aspxFirefox && window.innerHeight - document.documentElement.clientHeight > _aspxGetVerticalScrollBarWidth()) {
  return window.innerHeight;
 } else if (__aspxOpera && __aspxBrowserVersion < 9.6 || document.documentElement.clientHeight == 0) {
   return document.body.clientHeight
 }
 return document.documentElement.clientHeight;
}
function _aspxSetStyles(element, styles, makeImportant) {
 if (_aspxIsExists(styles.cssText))
  element.style.cssText = styles.cssText;
 if (_aspxIsExists(styles.className))
  element.className = styles.className;
 for (var property in styles) {
  if(!styles.hasOwnProperty(property))
   continue;
  var value = styles[property];
  switch (property) {
   case "cssText":
   case "className":
    break;
   case "float":
    _aspxSetElementFloat(element, value);
    break;
   case "opacity":
    _aspxSetElementOpacity(element, value);
    break;
   case "zIndex":
    _aspxSetStyleCore(element, property, value, makeImportant);
    break;
   default:
    _aspxSetStyleCore(element, property, value + (typeof (value) == "number" ? "px" : ""), makeImportant);
  }
 }
}
function _aspxSetStyleCore(element, property, value, makeImportant) {
 if(makeImportant) {
  var index = property.search("[A-Z]");
  if(index != -1)
   property = property.replace(property.charAt(index), "-" + property.charAt(index).toLowerCase());
  if(element.style.setProperty)
   element.style.setProperty(property, value, "important");
  else 
   element.style.cssText += ";" + property + ":" + value + "!important";
 }
 else
  element.style[property] = value;
}
function _aspxGetDocumentWidth(){
 var bodyWidth = document.body.offsetWidth;
 var docWidth = (__aspxIE && __aspxBrowserMajorVersion != 7) ? document.documentElement.clientWidth : document.documentElement.offsetWidth;
 var bodyScrollWidth = document.body.scrollWidth;
 var docScrollWidth = document.documentElement.scrollWidth;
 return _aspxGetMaxDimensionOf(bodyWidth, docWidth, bodyScrollWidth, docScrollWidth);
}
function _aspxGetDocumentHeight(){
 var bodyHeight = document.body.offsetHeight;
 var docHeight = (__aspxIE && __aspxBrowserMajorVersion != 7) ? document.documentElement.clientHeight : document.documentElement.offsetHeight;
 var bodyScrollHeight = document.body.scrollHeight;
 var docScrollHeight = document.documentElement.scrollHeight;
 var maxHeight = _aspxGetMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight, docScrollHeight);
 if(__aspxOpera && __aspxBrowserVersion >= 9.6){
  if(__aspxBrowserVersion < 10)
   maxHeight = _aspxGetMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight);
  var visibleHeightOfDocument = document.documentElement.clientHeight;
  if(maxHeight > visibleHeightOfDocument)
   maxHeight = _aspxGetMaxDimensionOf(window.outerHeight, maxHeight);
  else
   maxHeight = document.documentElement.clientHeight;
  return maxHeight;
 }
 return maxHeight;
}
function _aspxGetDocumentMaxClientWidth(){
 var bodyWidth = document.body.offsetWidth;
 var docWidth = document.documentElement.offsetWidth;
 var docClientWidth = document.documentElement.clientWidth;
 return _aspxGetMaxDimensionOf(bodyWidth, docWidth, docClientWidth);
}
function _aspxGetDocumentMaxClientHeight(){
 var bodyHeight = document.body.offsetHeight;
 var docHeight = document.documentElement.offsetHeight;
 var docClientHeight = document.documentElement.clientHeight;
 return _aspxGetMaxDimensionOf(bodyHeight, docHeight, docClientHeight);
}
function _aspxGetMaxDimensionOf(){
 var max = __aspxInvalidDimension;
 for (var i = 0; i < arguments.length; i++){
  if(max < arguments[i])
   max = arguments[i];
 }
 return max;
}
function _aspxGetClientLeft(element){
 return _aspxIsExists(element.clientLeft) ? element.clientLeft : (element.offsetWidth - element.clientWidth) / 2;
}
function _aspxGetClientTop(element){
 return _aspxIsExists(element.clientTop) ? element.clientTop : (element.offsetHeight - element.clientHeight) / 2;
}
function _aspxRemoveBorders(element) {
 if(!element)
  return;
 element.style.borderWidth = 0;
 for(var i = 0; i < element.childNodes.length; i++) {
  var child = element.childNodes[i];
  if(child.style)
   child.style.border = "0";
 }
}
function _aspxRemoveBordersAndShadows(el) {
 if(!el || !el.style)
  return;
 el.style.borderWidth = 0;
 if(_aspxIsExists(el.style.boxShadow))
  el.style.boxShadow = "none";
 else if(_aspxIsExists(el.style.MozBoxShadow))
  el.style.MozBoxShadow = "none";
 else if(_aspxIsExists(el.style.webkitBoxShadow))
  el.style.webkitBoxShadow = "none";
}
function _aspxSetBackground(element, background) {
 if(!element)
  return;
 element.style.backgroundColor = background;
 for(var i = 0; i < element.childNodes.length; i++) {
  var child = element.childNodes[i];
  if(child.style)
   child.style.backgroundColor = background;
 }
}
function _aspxDoElementClick(element) {
 try{
  element.click();
 }
 catch(e){ 
 }
}
function _aspxGetCellSpacing(element) {
 var val = parseInt(element.cellSpacing);
 if(!isNaN(val)) return val;
 val = parseInt(_aspxGetCurrentStyle(element).borderSpacing);
 if(!isNaN(val)) return val;
 return 0;
}
function _aspxGetInnerScrollPositions(element) {
 var scrolls = [];
 _aspxGetInnerScrollPositionsCore(element, scrolls);
 return scrolls;
}
function _aspxGetInnerScrollPositionsCore(element, scrolls) {
 for(var child = element.firstChild; child; child = child.nextSibling) {
  var scrollTop = child.scrollTop,
   scrollLeft = child.scrollLeft;
  if(scrollTop > 0 || scrollLeft > 0)
   scrolls.push([child, scrollTop, scrollLeft]);
  _aspxGetInnerScrollPositionsCore(child, scrolls);
 }
}
function _aspxRestoreInnerScrollPositions(scrolls) {
 for(var i = 0, scrollArr; scrollArr = scrolls[i]; i++) {
  if(scrollArr[1] > 0)
   scrollArr[0].scrollTop = scrollArr[1];
  if(scrollArr[2] > 0)
   scrollArr[0].scrollLeft = scrollArr[2];
 }
}
function _aspxGetOuterScrollPosition(element) {
 while(element.tagName !== "BODY") {
  var scrollTop = element.scrollTop,
   scrollLeft = element.scrollLeft;
  if(scrollTop > 0 || scrollLeft > 0) {
   return {
    scrollTop: scrollTop,
    scrollLeft: scrollLeft,
    element: element
   };
  }
  element = element.parentNode;
 }
 return {
  scrollTop: _aspxGetDocumentScrollTop(),
  scrollLeft: _aspxGetDocumentScrollLeft()
 };
}
function _aspxRestoreOuterScrollPosition(scrollInfo) {
 if(scrollInfo.element) {
  if(scrollInfo.scrollTop > 0)
   scrollInfo.element.scrollTop = scrollInfo.scrollTop;
  if(scrollInfo.scrollLeft > 0)
   scrollInfo.element.scrollLeft = scrollInfo.scrollLeft;
 }
 else {
  if(scrollInfo.scrollTop > 0)
   _aspxSetDocumentScrollTop(scrollInfo.scrollTop);
  if(scrollInfo.scrollLeft > 0)
   _aspxSetDocumentScrollLeft(scrollInfo.scrollLeft);
 }
}
function _aspxSetSelection(input, startPos, endPos, scrollToSelection) {
 if(!_aspxIsExistsElement(input))
  return;
 var textLen = input.value.length;
 startPos = _aspxGetDefinedValue(startPos, 0);
 endPos = _aspxGetDefinedValue(endPos, textLen);
 if(startPos < 0)
  startPos = 0;
 if(endPos < 0 || endPos > textLen)
  endPos = textLen;
 if(startPos > endPos)
  startPos = endPos;
 var makeReadOnly = false;
 if(__aspxWebKitFamily && input.readOnly) {
  input.readOnly = false;
  makeReadOnly = true;
 }
 try {
  if (__aspxFirefox && __aspxBrowserVersion >= 8) 
   input.setSelectionRange(startPos, endPos, "backward")
  else if (__aspxIE && __aspxBrowserVersion < 9)  {
   var range = input.createTextRange();
   range.collapse(true);
   range.moveStart("character", startPos);
   range.moveEnd("character", endPos - startPos);
   range.select();
  } else
   input.setSelectionRange(startPos, endPos);
  if(__aspxOpera || __aspxFirefox) 
   input.focus();
 } catch(e) { 
 }
 if(scrollToSelection && input.tagName == 'TEXTAREA') {
  var scrollHeight = input.scrollHeight;
  var approxCaretPos = startPos;
  var scrollTop = Math.max(Math.round(approxCaretPos * scrollHeight / textLen  - input.clientHeight / 2), 0);
  input.scrollTop = scrollTop;
 }
 if(makeReadOnly)
  input.readOnly = true;
}
function _aspxGetSelectionInfo(input) {
 var start, end;
 if(__aspxIE && __aspxBrowserVersion < 9) {
  var range = document.selection.createRange();
  var rangeCopy = range.duplicate();
  range.move('character', -input.value.length);
  range.setEndPoint('EndToStart', rangeCopy);
  start = range.text.length;
  end = start + rangeCopy.text.length;
 } else {
  try {
   start = input.selectionStart;
   end = input.selectionEnd;
  } catch (e) {
  }
 }
 return { startPos: start, endPos: end };
}
function _aspxGetExtSelectionInfo(input) {
 var start = 0, end = 0, textLen = 0;
 if (__aspxIE && __aspxBrowserVersion < 9) {
  var normalizedValue;
  var range, textInputRange, textInputEndRange;
  range = document.selection.createRange();
  if (range && range.parentElement() == input) {
   textLen = input.value.length;
   normalizedValue = input.value.replace(/\r\n/g, "\n");
   textInputRange = input.createTextRange();
   textInputRange.moveToBookmark(range.getBookmark());
   textInputEndRange = input.createTextRange();
   textInputEndRange.collapse(false);
   if (textInputRange.compareEndPoints("StartToEnd", textInputEndRange) > -1) {
    start = textLen;
    end = textLen;
   } else {
    start = normalizedValue.slice(0, start).split("\n").length - textInputRange.moveStart("character", -textLen) -1;
    if (textInputRange.compareEndPoints("EndToEnd", textInputEndRange) > -1)
     end = textLen;
    else
     end = normalizedValue.slice(0, end).split("\n").length - textInputRange.moveEnd("character", -textLen) - 1;    
   }
  }
  return {startPos: start, endPos: end};
 }
 try {
  start = input.selectionStart;
  end = input.selectionEnd;
 } catch (e) {
 }
 return {startPos: start, endPos: end}; 
}
function _aspxSetCaretPosition(input, caretPos) {
 if(typeof caretPos === "undefined" || caretPos < 0)
  caretPos = input.value.length;
 _aspxSetSelection(input, caretPos, caretPos, true);
}
_aspxSetInputSelection = _aspxSetSelectionCore = _aspxSetSelection;
_aspxClearInputSelection = _aspxSetCaretPosition;
function _aspxSetFocus(element, selectAction) {
 function focusCore(element, selectAction){
  try {
    element.focus();
    if(__aspxIE && document.activeElement != element)
     element.focus();
    if(selectAction) {
     var currentSelection = _aspxGetSelectionInfo(element);
     if(currentSelection.startPos == currentSelection.endPos) {
      switch(selectAction) {
       case "start":
        _aspxSetCaretPosition(element, 0);
        break;
       case "all":
        _aspxSetSelection(element);
        break;
      }
     }
    }
   } catch (e) {
  }
 }
 if(ASPxClientUtils.iOSPlatform) 
  focusCore(element, selectAction);
 else {
  window.setTimeout(function() { 
   focusCore(element, selectAction);
  }, 100);
 }
}
function _aspxIsFocusableCore(element, skipContainerVisibilityCheck) {
 var current = element;
 while(current && current.nodeType == 1) {
  if (current == element || !skipContainerVisibilityCheck(current)) {
   if (current.tagName == "BODY")
    return true;
   if (current.disabled || !_aspxGetElementDisplay(current) || !_aspxGetElementVisibility(current))
    return false;
  }
  current = current.parentNode;
 }
 return true;
}
function _aspxIsFocusable(element) {
 return _aspxIsFocusableCore(element, _aspxFalseFunction);
}
function _aspxAttachEventToElement(element, eventName, func, onlyBubbling) {
 if(element.addEventListener)
  element.addEventListener(eventName, func, !onlyBubbling);
 else
  element.attachEvent("on" + eventName, func);
}
function _aspxDetachEventFromElement(element, eventName, func) {
 if(element.removeEventListener)
  element.removeEventListener(eventName, func, true);
 else
  element.detachEvent("on" + eventName, func);
}
function _aspxAttachEventToDocument(eventName, func) {
 var attachingAllowed = ASPxClientTouchUI.onEventAttachingToDocument(eventName, func);
 if(attachingAllowed)
  _aspxAttachEventToDocumentCore(eventName, func);
}
function _aspxAttachEventToDocumentCore(eventName, func) {
 _aspxAttachEventToElement(document, eventName, func);
}
function _aspxDetachEventFromDocument(eventName, func) {
 _aspxDetachEventFromDocumentCore(eventName, func);
 ASPxClientTouchUI.onEventDettachedFromDocument(eventName, func);
}
function _aspxDetachEventFromDocumentCore(eventName, func){
 _aspxDetachEventFromElement(document, eventName, func);
}
function _aspxCreateEventHandlerFunction(funcName, controlName, withHtmlEventArg) {
 if(withHtmlEventArg)
  return function(e) { window[funcName](controlName, e) };
 return function() { window[funcName](controlName) };
}
function _aspxGetMouseWheelEventName(){
 return __aspxNetscapeFamily ? "DOMMouseScroll" : "mousewheel";
}
function _aspxAttachMouseEnterToElement(element, onMouseOverHandler, onMouseOutHandler) {
 _aspxAttachEventToElement(element, "mouseover", function(evt) { _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
 _aspxAttachEventToElement(element, "mouseout", function(evt) { _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
}
function _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler) {
 var isMouseOverExecuted = !!element.dxMouseOverExecuted;
 var isMouseOverEvent = (evt.type == "mouseover");
 if (isMouseOverEvent && isMouseOverExecuted || !isMouseOverEvent && !isMouseOverExecuted)
  return;
 var source = evt.relatedTarget || (isMouseOverEvent ? evt.srcElement : evt.toElement);
 if (!_aspxGetIsParent(element, source)) {
  element.dxMouseOverExecuted = isMouseOverEvent;
  if(isMouseOverEvent)
   onMouseOverHandler(element);
  else
   onMouseOutHandler(element);
 }
 else if (isMouseOverEvent && !isMouseOverExecuted) {
  element.dxMouseOverExecuted = true;
  onMouseOverHandler(element);
 }
}
function _aspxCreateClass(parentClass, properties) {
 var ret = function() {
  if (ret.preparing) 
   return delete(ret.preparing);
  if (ret.constr) {
   this.constructor = ret;
   ret.constr.apply(this, arguments);
  }
 }
 ret.prototype = {};
 if(parentClass) {
  parentClass.preparing = true;
  ret.prototype = new parentClass;
  ret.prototype.constructor = parentClass;
  ret.constr = parentClass;
 }
 if(properties) {
  var constructorName = "constructor";
  for(var name in properties){
   if (name != constructorName) 
    ret.prototype[name] = properties[name];
  }
  if (properties[constructorName] && properties[constructorName] != Object)
   ret.constr = properties[constructorName];
 }
 return ret;
}
function _aspxGetAttribute(obj, attrName){
 if(obj.getAttribute)
  return obj.getAttribute(attrName);
 else if(obj.getPropertyValue)
  return obj.getPropertyValue(attrName);
 return null;
}
function _aspxSetAttribute(obj, attrName, value){
 if(obj.setAttribute)
  obj.setAttribute(attrName, value);
 else if(obj.setProperty)
  obj.setProperty(attrName, value, "");
}
function _aspxRemoveAttribute(obj, attrName){
 if(obj.removeAttribute)
  obj.removeAttribute(attrName);
 else if(obj.removeProperty)
  obj.removeProperty(attrName);
}
function _aspxIsExistsAttribute(obj, attrName){
 var value = _aspxGetAttribute(obj, attrName);
 return (value != null) && (value !== "");
}
function _aspxSetOrRemoveAttribute(obj, attrName, value) {
 if (!value)
  _aspxRemoveAttribute(obj, attrName);
 else
  _aspxSetAttribute(obj, attrName, value);
}
function _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName){
 if(!_aspxIsExistsAttribute(savedObj, savedAttrName)){
  var oldValue = _aspxIsExistsAttribute(obj, attrName) ? _aspxGetAttribute(obj, attrName) : __aspxEmptyAttributeValue;
  _aspxSetAttribute(savedObj, savedAttrName, oldValue);
 }
}
function _aspxSaveStyleAttribute(obj, attrName){
 _aspxSaveAttribute(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxChangeAttributeExtended(obj, attrName, savedObj, savedAttrName, newValue){
 _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName);
 _aspxSetAttribute(obj, attrName, newValue);
}
function _aspxChangeAttribute(obj, attrName, newValue){
 _aspxChangeAttributeExtended(obj, attrName, obj, "saved" + attrName, newValue);
}
function _aspxChangeStyleAttribute(obj, attrName, newValue){
 _aspxChangeAttributeExtended(obj.style, attrName, obj, "saved" + attrName, newValue);
}
function _aspxResetAttributeExtended(obj, attrName, savedObj, savedAttrName){
 _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName);
 _aspxSetAttribute(obj, attrName, "");
 _aspxRemoveAttribute(obj, attrName);
}
function _aspxResetAttribute(obj, attrName){
 _aspxResetAttributeExtended(obj, attrName, obj, "saved" + attrName);
}
function _aspxResetStyleAttribute(obj, attrName){
 _aspxResetAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxRestoreAttributeExtended(obj, attrName, savedObj, savedAttrName){
 if(_aspxIsExistsAttribute(savedObj, savedAttrName)){
  var oldValue = _aspxGetAttribute(savedObj, savedAttrName);
  if(oldValue != __aspxEmptyAttributeValue)
   _aspxSetAttribute(obj, attrName, oldValue);
  else
   _aspxRemoveAttribute(obj, attrName);
  _aspxRemoveAttribute(savedObj, savedAttrName);
  return true;
 }
 return false;
}
function _aspxRestoreAttribute(obj, attrName){
 return _aspxRestoreAttributeExtended(obj, attrName, obj, "saved" + attrName);
}
function _aspxRestoreStyleAttribute(obj, attrName){
 return _aspxRestoreAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxCopyAllAttributes(sourceElem, destElement) {
 var attrs = sourceElem.attributes;
 for (var n = 0; n < attrs.length; n++) {
  var attr = attrs[n];
  if (attr.specified) {
   var attrName = attr.nodeName;
   var attrValue = sourceElem.getAttribute(attrName, 2);
   if (attrValue == null)
    attrValue = attr.nodeValue;
   destElement.setAttribute(attrName, attrValue, 0); 
  }
 }
 if (sourceElem.style.cssText !== '')
  destElement.style.cssText = sourceElem.style.cssText;
}
function _aspxRemoveAllAttributes(element, excludedAttributes) {
 var excludedAttributesHashTable = {};
 if (excludedAttributes)
  excludedAttributesHashTable = _aspxCreateHashTableFromArray(excludedAttributes);
 if (element.attributes) {
  var attrArray = element.attributes;
  for (var i = 0; i < attrArray.length; i++) {
   var attrName = attrArray[i].name;
   if (!_aspxIsExists(excludedAttributesHashTable[attrName.toLowerCase()])) {
    try {
     attrArray.removeNamedItem(attrName);
    } catch (e) { }
   }
  }
 }
}
function _aspxRemoveStyleAttribute(element, attrName) {
 if (element.style) {
  if (__aspxFirefox && element.style[attrName]) 
   element.style[attrName] = "";
  if (element.style.removeAttribute && element.style.removeAttribute != "")
   element.style.removeAttribute(attrName);
  else if (element.style.removeProperty && element.style.removeProperty != "")
   element.style.removeProperty(attrName);
 }
}
function _aspxRemoveAllStyles(element) {
 if (element.style) {
  for(var key in element.style)
   _aspxRemoveStyleAttribute(element, key);
    _aspxRemoveAttribute(element, "style");
 }
}
function _aspxChangeTabIndexAttribute(element){
 var attribute = _aspxGetTabIndexAttribute(); 
 if(_aspxGetAttribute(element, attribute) != -1)
    _aspxChangeAttribute(element, attribute, -1);
}
function _aspxSaveTabIndexAttributeAndReset(element) {
 var attribute = _aspxGetTabIndexAttribute();
 _aspxSaveAttribute(element, attribute, element, "saved" + attribute);
 _aspxSetAttribute(element, attribute, -1);
}
function _aspxRestoreTabIndexAttribute(element){
 var attribute = _aspxGetTabIndexAttribute();
 if(_aspxIsExistsAttribute(element, attribute)) {
  if(_aspxGetAttribute(element, attribute) == -1) {
   if(_aspxIsExistsAttribute(element, "saved" + attribute)){
    var oldValue = _aspxGetAttribute(element, "saved" + attribute);
    if(oldValue != __aspxEmptyAttributeValue)
     _aspxSetAttribute(element, attribute, oldValue);
    else {
     if(__aspxWebKitFamily) 
      _aspxSetAttribute(element, attribute, 0); 
     _aspxRemoveAttribute(element, attribute);   
    }
    _aspxRemoveAttribute(element, "saved" + attribute); 
   }
  }
 }
}
function _aspxGetTabIndexAttribute(){
 return __aspxIE  ? "tabIndex" : "tabindex";
}
function _aspxChangeAttributesMethod(enabled){
 return enabled ? _aspxRestoreAttribute : _aspxResetAttribute;
}
function _aspxInitiallyChangeAttributesMethod(enabled){
 return enabled ? _aspxChangeAttribute : _aspxResetAttribute;
}
function _aspxChangeStyleAttributesMethod(enabled){
 return enabled ? _aspxRestoreStyleAttribute : _aspxResetStyleAttribute;
}
function _aspxInitiallyChangeStyleAttributesMethod(enabled){
 return enabled ? _aspxChangeStyleAttribute : _aspxResetStyleAttribute;
}
function _aspxChangeEventsMethod(enabled){
 return enabled ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
}
function _aspxChangeDocumentEventsMethod(enabled){
 return enabled ? _aspxAttachEventToDocument : _aspxDetachEventFromDocument;
}
function _aspxTrimStart(str) { 
 return _aspxTrimImpl(str, true);
}
function _aspxTrimEnd(str) { 
 return _aspxTrimImpl(str, false, true);
}
function _aspxTrim(str) { 
 return _aspxTrimImpl(str, true, true); 
}
function _aspxTrimImpl(source, trimStart, trimEnd) {
 var len = source.length;
 if(!len)
  return source;
 if(len < 0xBABA1) { 
  var result = source;
  if(trimStart) {
   result = result.replace(/^\s+/, "");
  }
  if(trimEnd) {
   result = result.replace(/\s+$/, "");
  }
  return result;  
 } else {
  var start = 0;
  if(trimEnd) {   
   while(len > 0 && ASPxWhiteSpaces[source.charCodeAt(len - 1)]) {
    len--;
   }
  }
  if(trimStart && len > 0) {
   while(start < len && ASPxWhiteSpaces[source.charCodeAt(start)]) { 
    start++; 
   }   
  }
  return source.substring(start, len);
 }
}
function _aspxInsert(str, subStr, index) { 
 var leftText = str.slice(0, index);
 var rightText = str.slice(index);
 return leftText + subStr + rightText;
}
function _aspxInsertEx(str, subStr, startIndex, endIndex) { 
 var leftText = str.slice(0, startIndex);
 var rightText = str.slice(endIndex);
 return leftText + subStr + rightText;
}
function _aspxNavigateUrl(url, target) {
 var javascriptPrefix = "javascript:";
 if(url == "")
  return;
 else if(url.indexOf(javascriptPrefix) != -1) 
  eval(url.substr(javascriptPrefix.length));
 else {
  try{
   if(target != "")
    _aspxNavigateTo(url, target);
   else
    location.href = url;
  }
  catch(e){
  }
 }
}
function _aspxNavigateByLink(linkElement) {
 _aspxNavigateUrl(_aspxGetAttribute(linkElement, "href"), linkElement.target);
} 
function _aspxNavigateTo(url, target) {
 var lowerCaseTarget = target.toLowerCase();
 if("_top" == lowerCaseTarget)
  top.location.href = url;
 else if("_self" == lowerCaseTarget)
  location.href = url;
 else if("_search" == lowerCaseTarget)
  window.open(url, '_blank');
 else if("_media" == lowerCaseTarget)
  window.open(url, '_blank');
 else if("_parent" == lowerCaseTarget)
  window.parent.location.href = url;
 else if("_blank" == lowerCaseTarget)
  window.open(url, '_blank');
 else {
  var frame = _aspxGetFrame(top.frames, target);
  if(frame != null)
   frame.location.href = url;
  else
   window.open(url, '_blank');
 }
}
function _aspxGetFrame(frames, name) {
 if(frames[name])
  return frames[name];
 for(var i = 0; i < frames.length; i++) {
  try {
   var frame = frames[i];
   if(frame.name == name) 
    return frame; 
   frame = _aspxGetFrame(frame.frames, name);
   if(frame != null)   
    return frame; 
  } catch(e) {
  } 
 }
 return null;
}
function _aspxToHex(d) {
 return (d < 16) ? ("0" + d.toString(16)) : d.toString(16);
}
function _aspxColorToHexadecimal(colorValue) {
 if (typeof(colorValue) == "number") {
  var r = colorValue & 0xFF;
  var g = (colorValue >> 8) & 0xFF;
  var b = (colorValue >> 16) & 0xFF;
  return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
 }
 if (colorValue && (colorValue.substr(0, 3).toLowerCase() == "rgb")) {
  var re = /rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/;
  var regResult = colorValue.toLowerCase().match(re);
  if (regResult) {
   var r = parseInt(regResult[1]);
   var g = parseInt(regResult[2]);
   var b = parseInt(regResult[3]);
   return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
  }
  return null;
 } 
 if (colorValue && (colorValue.charAt(0) == "#"))
  return colorValue;
 return null;
}
function _aspxFormatCallbackArg(prefix, arg) {
 if(prefix == null && arg == null)
  return ""; 
 if(prefix == null) prefix = "";
 if(arg == null) arg = "";
 if(arg != null && !_aspxIsExists(arg.length) && _aspxIsExists(arg.value))
  arg = arg.value;
 arg = arg.toString();
 return [prefix, '|', arg.length, '|' , arg].join('');
}
function _aspxFormatCallbackArgs(callbackData) {
 var sb = [ ];
 for(var i = 0; i < callbackData.length; i++)
  sb.push(_aspxFormatCallbackArg(callbackData[i][0], callbackData[i][1]));
 return sb.join("");
}
function _aspxIsValidElement(element) {
 if(!element) 
  return false;
 if(!(__aspxFirefox && __aspxBrowserVersion < 4)) {
  if(element.ownerDocument && element.ownerDocument.body.compareDocumentPosition)
   return element.ownerDocument.body.compareDocumentPosition(element) % 2 === 0;
 }
 if(!__aspxOpera && !(__aspxIE && __aspxBrowserVersion < 9) && element.offsetParent && element.parentNode.tagName)
  return true;
 while(element != null){
  if(element.tagName == "BODY")
   return true;
  element = element.parentNode;
 }
 return false;
}
function _aspxIsValidElements(elements) {
 if (!elements)
  return false; 
 for(var i = 0; i < elements.length; i++) {
  if(elements[i] && !_aspxIsValidElement(elements[i]))
   return false;
 }
 return true;
}
function _aspxIsExistsElement(element) {
 return element && _aspxIsValidElement(element);
}
function _aspxFindParentByTestFunc(element, testFunc){
 if (!testFunc) return null;
 while(element != null && element.tagName != "BODY"){
  if(testFunc(element))
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxCorrectJSFloatNumber(number) {
 var ret = 21; 
 var numString = number.toPrecision(21);
 numString = numString.replace("-", ""); 
 var integerDigitsCount = numString.indexOf(__aspxPossibleNumberDecimalSeparators[0]);
 if (integerDigitsCount < 0)
  integerDigitsCount = numString.indexOf(__aspxPossibleNumberDecimalSeparators[1]);
 var floatDigitsCount = numString.length - integerDigitsCount - 1;
 if(floatDigitsCount < 10)
  return number;
 if (integerDigitsCount > 0) {
  ret = integerDigitsCount + 12;
 }
 var toPrecisionNumber = Math.min(ret, 21);
 var newValueString = number.toPrecision(toPrecisionNumber);
 return parseFloat(newValueString, 10);
}
function _aspxToJson(param){
 var paramType = typeof(param);
 if((paramType == "undefined") || (param == null))
  return null;
 if((paramType == "object") && (typeof(param.__toJson) == "function"))
  return param.__toJson();
 if((paramType == "number") || (paramType == "boolean"))
  return param;
 if(param.constructor == Date)
  return _aspxDateToJson(param);
 if(paramType == "string") {
  var result = param.replace(/\\/g, "\\\\");
  result = result.replace(/"/g, "\\\"");
  result = result.replace(/</g, "\\u003c");
  result = result.replace(/>/g, "\\u003e");
  return "\"" + result + "\"";
 }
 if(param.constructor == Array){
  var values = [];
  for(var i = 0; i < param.length; i++) {
   var jsonValue = _aspxToJson(param[i]);
   if(jsonValue === null)
    jsonValue = "null";
   values.push(jsonValue);
  }
  return "[" + values.join(",") + "]";
 }
 var exceptKeys = {};
 if(ASPxIdent.IsArray(param.__toJsonExceptKeys))
  exceptKeys = _aspxCreateHashTableFromArray(param.__toJsonExceptKeys);
 exceptKeys["__toJsonExceptKeys"] = 1;
 var values = [];
 for(var key in param){
  if(_aspxIsFunction(param[key]))
   continue;
  if(exceptKeys[key] == 1)
   continue;
  values.push(_aspxToJson(key) + ":" + _aspxToJson(param[key]));
 }
 return "{" + values.join(",") + "}";
}
function _aspxDateToJson(date) {
 var result = [ 
  date.getFullYear(),
  date.getMonth(),
  date.getDate()
 ];
 var time = {
  h: date.getHours(),
  m: date.getMinutes(),
  s: date.getSeconds(),
  ms: date.getMilliseconds()
 };
 if(time.h || time.m || time.s || time.ms)
  result.push(time.h);
 if(time.m || time.s || time.ms)
  result.push(time.m);
 if(time.s || time.ms)
  result.push(time.s);
 if(time.ms)
  result.push(time.ms);
 return "new Date(" + result.join() + ")";
}
function _aspxEmulateDocumentOnMouseDown(evt) {
 _aspxEmulateOnMouseDown(document, evt);
}
function _aspxEmulateOnMouseDown(element, evt) {
 if(__aspxIE && __aspxBrowserVersion < 9)
  element.fireEvent("onmousedown", evt);
 else if(!__aspxWebKitFamily){
  var emulatedEvt = document.createEvent("MouseEvents");
  emulatedEvt.initMouseEvent("mousedown", true, true, window, 0, evt.screenX, evt.screenY, 
   evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
  element.dispatchEvent(emulatedEvt);
 }
}
function _aspxCreateHtmlElementFromString(str) {
 var dummy = document.createElement("DIV");
 dummy.innerHTML = str;
 return dummy.firstChild;
}
function _aspxDelayedFunctionCall(object, functionName) {
 var callTimerIdPropertyName = "delayed" + functionName + "CallTimerId";
 var additionalCallRequiredPropertyName = "delayed" + functionName + "AdditionalCallRequired";
 if(!object[callTimerIdPropertyName] || object[callTimerIdPropertyName] == -1) {
  var timeoutFunction = function() {
   object[functionName]();
   object[callTimerIdPropertyName] = _aspxClearTimer(object[callTimerIdPropertyName]);
   if(object[additionalCallRequiredPropertyName]) {
    object[additionalCallRequiredPropertyName] = false;
    object[callTimerIdPropertyName] = _aspxSetTimeout(timeoutFunction, 0);
   }
  };
  object[callTimerIdPropertyName] = _aspxSetTimeout(timeoutFunction, 0);
 }
 else
  object[additionalCallRequiredPropertyName] = true;
}
function _aspxRestoreElementOriginalWidth(element) {
 if(!_aspxIsExistsElement(element)) 
  return;
 element.style.width = element.dxOrigWidth = _aspxGetElementOriginalWidth(element);
}
function _aspxGetElementOriginalWidth(element) {
 if(!_aspxIsExistsElement(element)) 
  return null;
 var width;
 if(!_aspxIsExists(element.dxOrigWidth)) {
   width = String(element.style.width).length > 0
  ? element.style.width
  : element.offsetWidth + "px";
 } else {
  width = element.dxOrigWidth;
 }
 return width;
}
function _aspxDropElementOriginalWidth(element) {
 if(_aspxIsExists(element.dxOrigWidth))
  element.dxOrigWidth = null;
}
function _aspxPrepareStringForFilter(s){
 s = s.toLowerCase();
 if(__aspxWebKitFamily) {
  return s.replace(new RegExp(__aspxGreekSLFSigmaChar, "g"), __aspxGreekSLSigmaChar);
 }
 return s;
}
function _aspxGetObjectKeys(obj) {
 if (Object.keys)
  return Object.keys(obj);
 var keys = [];
 for (var key in obj) {
  if (obj.hasOwnProperty(key))
   keys.push(key);
 }
 return keys;
}
Function.prototype.aspxBind = function(scope) {
 var func = this;
 return function() {
  return func.apply(scope, arguments);
 };
};
ASPxScrollBarMode = { Hidden: 0, Visible: 1, Auto: 2 };
ASPxColumnResizeMode = { None: 0, Control: 1, NextColumn: 2 };
ASPxSimpleHiddenField = { };
ASPxSimpleHiddenField.Separator = "|";
ASPxSimpleHiddenField.GetBag = function(key, input) {
 if(!key || !input)
  return { "keyIndex": -1 };
 var keyString = key.toString();
 if(keyString.length == 0)
  return { "keyIndex": -1 };
 var value = input.value;
 var keyIndex = value.indexOf(keyString);
 if(keyIndex < 0)
  return { "keyIndex": -1 };
 var sepIndex = value.indexOf(ASPxSimpleHiddenField.Separator, keyIndex + keyString.length);
 var count = Number(value.slice(keyIndex + keyString.length, sepIndex));
 return { 
  "keyIndex": keyIndex,
  "valueIndex": sepIndex + 1,
  "count": count,
  "inputValue": value
 };
};
ASPxSimpleHiddenField.Get = function(key, input) {
 var bag = ASPxSimpleHiddenField.GetBag(key, input);
 if(bag.keyIndex < 0) return;
 return bag.inputValue.substr(bag.valueIndex, bag.count);
};
ASPxSimpleHiddenField.Set = function(key, value, input) {
 var value = _aspxIsExists(value) ? value.toString() : "";
 var newValue = key.toString() + value.length + ASPxSimpleHiddenField.Separator + value;
 var bag = ASPxSimpleHiddenField.GetBag(key, input);
 if(bag.keyIndex < 0) {
  input.value += newValue;
  return;
 }
 var prevValue = bag.inputValue.slice(bag.keyIndex, bag.valueIndex + bag.count);
 input.value = bag.inputValue.replace(prevValue, newValue);
};
(function(){
 window.ASPxMouseScroller = window.ASPxMouseScroller || { };
 ASPxMouseScroller.MinimumOffset = 10;
 ASPxMouseScroller.Create = function(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp) {
  var element = getElement();
  if(!element) 
   return;
  if(!element.dxMouseScroller)
   element.dxMouseScroller = new ASPxMouseScroller.Extender(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp);
  return element.dxMouseScroller;
 }
 ASPxMouseScroller.Extender = function(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp) {
  this.getElement = getElement;
  this.getScrollXElement = getScrollXElement;
  this.getScrollYElement = getScrollYElement;
  this.needPreventScrolling = needPreventScrolling;
  this.vertRecursive = !!vertRecursive;
  this.createHandlers(onMouseDown || function(){ }, onMouseMove || function(){ }, onMouseUp || function(){ });
  this.update()
 };
 ASPxMouseScroller.Extender.prototype = {
  update: function() {
   if(this.element)
    _aspxDetachEventFromElement(this.element, ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownHandler);
   this.element = this.getElement();
   _aspxAttachEventToElement(this.element, ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownHandler);  
   _aspxAttachEventToElement(this.element, "click", this.mouseClickHandler);   
   if(__aspxMSTouchUI && this.element.className.indexOf(ASPxClientTouchUI.msTouchDraggableClassName) < 0)
    this.element.className += " " + ASPxClientTouchUI.msTouchDraggableClassName;
   this.scrollXElement = this.getScrollXElement();
   this.scrollYElement = this.getScrollYElement();
  },
  createHandlers: function(onMouseDown, onMouseMove, onMouseUp) {
   this.onMouseDown = onMouseDown;
   this.onMouseMove = onMouseMove;
   this.onMouseUp = onMouseUp;
   this.mouseDownHandler = function(e) { 
    if(this.needPreventScrolling && this.needPreventScrolling(_aspxGetEventSource(e)))
     return;
    this.scrollableTreeLine = this.GetScrollableElements();
    this.firstX = this.prevX = _aspxGetEventX(e);
    this.firstY = this.prevY = this.GetEventY(e);
    _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseMoveHandler);
    _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, this.mouseUpHandler);
    this.onMouseDown(e);
   }.aspxBind(this);
   this.mouseMoveHandler = function(e) {
    if(ASPxClientTouchUI.isGesture)
     return;
    var x = _aspxGetEventX(e);
    var y = this.GetEventY(e);
    var xDiff = this.prevX - x;
    var yDiff = this.prevY - y;
    if(this.vertRecursive) {
     var isTopDirection = yDiff < 0;
     this.scrollYElement = this.GetElementForVertScrolling(isTopDirection, this.prevIsTopDirection, this.scrollYElement);
     this.prevIsTopDirection = isTopDirection;
    }
    if(this.scrollXElement && xDiff != 0)
     this.scrollXElement.scrollLeft += xDiff;
    if(this.scrollYElement && yDiff != 0)
     this.scrollYElement.scrollTop += yDiff;
    this.prevX = x;
    this.prevY = y;
    e.preventDefault();
    this.onMouseMove(e);
   }.aspxBind(this);
   this.mouseUpHandler = function(e) {
    _aspxDetachEventFromDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseMoveHandler);
    _aspxDetachEventFromDocument(ASPxClientTouchUI.touchMouseUpEventName, this.mouseUpHandler);
    this.scrollableTreeLine = [ ];
    this.prevIsTopDirection = null;
    this.onMouseUp(e);
   }.aspxBind(this);
   this.mouseClickHandler = function(e){
    if(this.needPreventScrolling && this.needPreventScrolling(_aspxGetEventSource(e)))
     return;
    var xDiff = this.firstX - _aspxGetEventX(e);
    var yDiff = this.firstY - _aspxGetEventY(e);
    if(xDiff > ASPxMouseScroller.MinimumOffset || yDiff > ASPxMouseScroller.MinimumOffset)
     return _aspxPreventEventAndBubble(e);
   }.aspxBind(this);
  },
  GetEventY: function(e) {
   return _aspxGetEventY(e) - _aspxGetDocumentScrollTop();
  },
  GetScrollableElements: function() {
   var result = [ ];
   var el = this.element;
   while(el && el != document && this.vertRecursive) {
    if(this.CanVertScroll(el) || el.tagName == "HTML")
     result.push(el);
    el = el.parentNode;
   }
   return result;
  },
  CanVertScroll: function(element) {
   var style = _aspxGetCurrentStyle(element);
   return style.overflow == "scroll" || style.overflow == "auto" || style.overflowY == "scroll" || style.overflowY == "auto";
  },
  GetElementForVertScrolling: function(currentIsTop, prevIsTop, prevElement) {
   if(prevElement && currentIsTop === prevIsTop && this.GetVertScrollExcess(prevElement, currentIsTop) > 0)
    return prevElement;
   for(var i = 0; i < this.scrollableTreeLine.length; i++) {
    var element = this.scrollableTreeLine[i];
    var excess = this.GetVertScrollExcess(element, currentIsTop);
    if(excess > 0)
     return element;
   }
   return null;
  },
  GetVertScrollExcess: function(element, isTop) {
   if(isTop)
    return element.scrollTop;
   return element.scrollHeight - element.clientHeight - element.scrollTop;
  }
 }
})();
function _aspxIsInteractiveControl(element, extremeParent) {
 return _aspxArrayIndexOf(["A", "INPUT", "SELECT", "OPTION", "TEXTAREA", "BUTTON", "IFRAME"], element.tagName) > -1;
}
ASPxClientUtils = {};
ASPxClientUtils.agent = __aspxUserAgent;
ASPxClientUtils.opera = __aspxOpera;
ASPxClientUtils.opera9 = __aspxOpera && __aspxBrowserMajorVersion == 9;
ASPxClientUtils.safari = __aspxSafari;
ASPxClientUtils.safari3 = __aspxSafari && __aspxBrowserMajorVersion == 3;
ASPxClientUtils.safariMacOS = __aspxSafari && __aspxMacOSPlatform;
ASPxClientUtils.chrome = __aspxChrome;
ASPxClientUtils.ie = __aspxIE;
;
ASPxClientUtils.ie7 = __aspxIE && __aspxBrowserMajorVersion == 7;
ASPxClientUtils.firefox = __aspxFirefox;
ASPxClientUtils.firefox3 = __aspxFirefox && __aspxBrowserMajorVersion == 3;
ASPxClientUtils.mozilla = __aspxMozilla;
ASPxClientUtils.netscape = __aspxNetscape;
ASPxClientUtils.browserVersion = __aspxBrowserVersion;
ASPxClientUtils.browserMajorVersion = __aspxBrowserMajorVersion;
ASPxClientUtils.macOSPlatform = __aspxMacOSPlatform;
ASPxClientUtils.windowsPlatform = __aspxWindowsPlatform;
ASPxClientUtils.webKitFamily = __aspxWebKitFamily;
ASPxClientUtils.netscapeFamily = __aspxNetscapeFamily;
ASPxClientUtils.touchUI = __aspxTouchUI;
ASPxClientUtils.webKitTouchUI = __aspxWebKitTouchUI;
ASPxClientUtils.msTouchUI = __aspxMSTouchUI;
ASPxClientUtils.iOSPlatform = __aspxMacOSMobilePlatform;
ASPxClientUtils.androidPlatform = __aspxAndroidMobilePlatform;
ASPxClientUtils.ArrayInsert = _aspxArrayInsert;
ASPxClientUtils.ArrayRemove = _aspxArrayRemove;
ASPxClientUtils.ArrayRemoveAt = _aspxArrayRemoveAt;
ASPxClientUtils.ArrayClear = _aspxArrayClear;
ASPxClientUtils.ArrayIndexOf = _aspxArrayIndexOf;
ASPxClientUtils.AttachEventToElement = _aspxAttachEventToElement;
ASPxClientUtils.DetachEventFromElement = _aspxDetachEventFromElement;
ASPxClientUtils.GetEventSource = _aspxGetEventSource;
ASPxClientUtils.GetEventX = _aspxGetEventX;
ASPxClientUtils.GetEventY = _aspxGetEventY;
ASPxClientUtils.GetKeyCode = _aspxGetKeyCode;
ASPxClientUtils.PreventEvent = _aspxPreventEvent;
ASPxClientUtils.PreventEventAndBubble = _aspxPreventEventAndBubble;
ASPxClientUtils.PreventDragStart = _aspxPreventDragStart;
ASPxClientUtils.ClearSelection = _aspxClearSelection;
ASPxClientUtils.IsExists = _aspxIsExists;
ASPxClientUtils.IsFunction = _aspxIsFunction;
ASPxClientUtils.GetAbsoluteX = _aspxGetAbsoluteX;
ASPxClientUtils.GetAbsoluteY = _aspxGetAbsoluteY;
ASPxClientUtils.SetAbsoluteX = _aspxSetAbsoluteX;
ASPxClientUtils.SetAbsoluteY = _aspxSetAbsoluteY;
ASPxClientUtils.GetDocumentScrollTop = _aspxGetDocumentScrollTop;
ASPxClientUtils.GetDocumentScrollLeft = _aspxGetDocumentScrollLeft;
ASPxClientUtils.GetDocumentClientWidth = _aspxGetDocumentClientWidth;
ASPxClientUtils.GetDocumentClientHeight = _aspxGetDocumentClientHeight;
ASPxClientUtils.GetIsParent = _aspxGetIsParent;
ASPxClientUtils.GetParentById = _aspxGetParentById;
ASPxClientUtils.GetParentByTagName = _aspxGetParentByTagName;
ASPxClientUtils.GetParentByClassName = _aspxGetParentByPartialClassName;
ASPxClientUtils.GetChildById = _aspxGetChildById;
ASPxClientUtils.GetChildByTagName = _aspxGetChildByTagName;
ASPxClientUtils.SetCookie = _aspxSetCookie;
ASPxClientUtils.GetCookie = _aspxGetCookie;
ASPxClientUtils.DeleteCookie = _aspxDelCookie;
ASPxClientUtils.GetShortcutCode = _aspxGetShortcutCode; 
ASPxClientUtils.GetShortcutCodeByEvent = _aspxGetShortcutCodeByEvent;
ASPxClientUtils.StringToShortcutCode = _aspxParseShortcutString;
ASPxClientUtils.Trim = _aspxTrim; 
ASPxClientUtils.TrimStart = _aspxTrimStart;
ASPxClientUtils.TrimEnd = _aspxTrimEnd;

var __aspxClassesScriptParsed = false;
var __aspxDocumentLoaded = false; 
ASPxClientEvent = _aspxCreateClass(null, {
 constructor: function() {
  this.handlerInfoList = [];
 },
 AddHandler: function(handler, executionContext) {
  if(typeof(executionContext) == "undefined")
   executionContext = null;
  var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
  this.handlerInfoList.push(handlerInfo);
 },
 RemoveHandler: function(handler, executionContext) {
  this.removeHandlerByCondition(function(handlerInfo) {
   return handlerInfo.handler == handler && 
    (!executionContext || handlerInfo.executionContext == executionContext);
  });
 },
 removeHandlerByCondition: function(predicate) {
   for(var i = this.handlerInfoList.length - 1; i >= 0; i--) {
   var handlerInfo = this.handlerInfoList[i];
   if(predicate(handlerInfo))
    _aspxArrayRemoveAt(this.handlerInfoList, i);
  }
 },
 removeHandlerByControlName: function(controlName) {
  this.removeHandlerByCondition(function(handlerInfo) {
   return handlerInfo.executionContext &&  
    handlerInfo.executionContext.name === controlName;
  });
 },
 ClearHandlers: function() {
  this.handlerInfoList.length = 0;
 },
 FireEvent: function(obj, args) {
  for(var i = 0; i < this.handlerInfoList.length; i++) {
   var handlerInfo = this.handlerInfoList[i];
   handlerInfo.handler.call(handlerInfo.executionContext, obj, args);
  }
 },
 InsertFirstHandler: function(handler, executionContext){
  if(typeof(executionContext) == "undefined")
   executionContext = null;
  var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
  _aspxArrayInsert(this.handlerInfoList, handlerInfo, 0);
 },
 IsEmpty: function() {
  return this.handlerInfoList.length == 0;
 }
});
ASPxClientEvent.CreateHandlerInfo = function(handler, executionContext) {
 return {
  handler: handler,
  executionContext: executionContext
 };
};
ASPxClientEventArgs = _aspxCreateClass(null, {
 constructor: function() {
 }
});
ASPxClientEventArgs.Empty = new ASPxClientEventArgs();
ASPxClientCancelEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.cancel = false;
 }
});
ASPxClientProcessingModeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(processOnServer){
  this.constructor.prototype.constructor.call(this);
  this.processOnServer = processOnServer;
 }
});
ASPxClientProcessingModeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.cancel = false;
 }
});
ASPxClientBeginCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this);
  this.command = command;
 }
});
ASPxClientEndCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
 }
});
ASPxClientCustomDataCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(result) {
  this.constructor.prototype.constructor.call(this);
  this.result = result;
 }
});
ASPxClientCallbackErrorEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(message){
  this.constructor.prototype.constructor.call(this);
  this.message = message;
  this.handled = false;
 }
});
ASPxClientControlsInitializedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(isCallback) {
  this.isCallback = isCallback;
 }
});
ASPxClientAdaptiveLayoutChangingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.isAdaptiveView = false;
 }
});
ASPxClientControlCollection = _aspxCreateClass(null, {
 constructor: function(){
  this.elements = new Object();
  this.prevWndWidth = "";
  this.prevWndHeight = "";
  this.BeforeInitCallback = new ASPxClientEvent();
  this.ControlsInitialized = new ASPxClientEvent();
 },
 Add: function(element){
  this.elements[element.name] = element;
 },
 Remove: function(element) {
  this.elements[element.name] = null;
 },
 Get: function(name){
  return this.elements[name];
 },
 GetGlobal: function(name) {
  var result = window[name];
  return result && result.isASPxClientControl
   ? result
   : null;
 },
 GetByName: function(name){
  return this.Get(name) || this.GetGlobal(name);
 },
 ForEachControl: function(processFunc, context) {
  if(!context)
   context = this;
  for(var name in this.elements) {
   var control = this.elements[name];
   if(ASPxIdent.IsASPxClientControl(control))
    if(processFunc.call(context, control))
     return;
  }
 },
 forEachControlHierarchy: function(container, context, collapseControls, processFunc) {
  context = context || this;
  var controlTree = new ASPxClientControlTree(this, container);
  controlTree.forEachControl(collapseControls, function(control) {
   processFunc.call(context, control);
  });
 },
 AdjustControls: function(container, collapseControls) {
  container = container || null;
  window.setTimeout(function() {
   this.AdjustControlsCore(container, collapseControls);
  }.aspxBind(this), 0);
 },
 AdjustControlsCore: function(container, collapseControls) {
  this.forEachControlHierarchy(container, this, collapseControls, function(control) {
   control.AdjustControl();
  });
 },
 CollapseControls: function(container) {
  this.ProcessControlsInContainer(container, function(control) {
   if(control.isASPxClientEdit)
    control.CollapseControl();
  });
 },
 AtlasInitialize: function(isCallback) {
  if(__aspxIE && __aspxBrowserMajorVersion < 9) {
   var func = function() {
    if(_aspxIsLinksLoaded())
     _aspxProcessScriptsAndLinks("", isCallback); 
    else
     setTimeout(func, 100);
   }   
   func();
  }
  else
   _aspxProcessScriptsAndLinks("", isCallback);
 },
 DOMContentLoaded: function() {
  this.ForEachControl(function(control){
    control.DOMContentLoaded();
  });
 },
 Initialize: function() {
  this.InitializeElements(false );
  if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
   var checkIsInitialized = function() {
    if(Sys.Application.get_isInitialized())
     Sys.Application.add_load(aspxCAInit);
    else
     setTimeout(checkIsInitialized, 0);
   }
   checkIsInitialized();
  }
  this.InitWindowSizeCache();
 },
 InitializeElements: function(isCallback) {
  this.ForEachControl(function(control){
   if(!control.isInitialized)
    control.Initialize();
  });
  if(typeof(_aspxGetEditorStretchedInputElementsManager) != "undefined")
   _aspxGetEditorStretchedInputElementsManager().Initialize();
  this.AfterInitializeElements(true);
  this.AfterInitializeElements(false);
  this.RaiseControlsInitialized(isCallback);
 },
 AfterInitializeElements: function(leadingCall) {
  this.ForEachControl(function(control){
   if (control.leadingAfterInitCall && leadingCall || !control.leadingAfterInitCall && !leadingCall) {
    if(!control.isInitialized)
     control.AfterInitialize();
   }
  });
 },
 DoFinalizeCallback: function() {
  this.ForEachControl(function(control){
   control.DoFinalizeCallback();
  });
 },
 ProcessControlsInContainer: function(container, processFunc) {
  this.ForEachControl(function(control){
   if(!container || this.IsControlInContainer(container, control))
    processFunc(control);
  });
 },
 IsControlInContainer: function(container, control) {
  if(control.GetMainElement) {
   var mainElement = control.GetMainElement();
   if(mainElement && (mainElement != container)) {
    if(_aspxGetIsParent(container, mainElement))
     return true;
   }
  }
  return false;
 },
 RaiseControlsInitialized: function(isCallback) {
  if(!this.ControlsInitialized.IsEmpty()){
   if(typeof(isCallback) == "undefined")
    isCallback = true;
   var args = new ASPxClientControlsInitializedEventArgs(isCallback);
   this.ControlsInitialized.FireEvent(this, args);
  }
 },
 Before_WebForm_InitCallback: function(callbackOwnerID){
  var args = new ASPxClientBeforeInitCallbackEventArgs(callbackOwnerID);
  this.BeforeInitCallback.FireEvent(this, args);
 },
 InitWindowSizeCache: function(){
  this.prevWndWidth = _aspxGetDocumentClientWidth();
  this.prevWndHeight = _aspxGetDocumentClientHeight();
 },
 BrowserWindowSizeChanged: function(){
  var wndWidth = _aspxGetDocumentClientWidth();
  var wndHeight = _aspxGetDocumentClientHeight();
  var browserWindowSizeChanged = (this.prevWndWidth != wndWidth) || (this.prevWndHeight != wndHeight);
  if(browserWindowSizeChanged){
   this.prevWndWidth = wndWidth;
   this.prevWndHeight = wndHeight;
   return true;
  }
  return false;
 },
 OnBrowserWindowResize: function(evt){
  var shouldIgnoreNestedEvents = __aspxIE && __aspxBrowserMajorVersion == 8;
  if(shouldIgnoreNestedEvents) {
   if(this.prevWndWidth === "" || this.prevWndHeight === "" || this.browserWindowResizeLocked)
    return;
   this.browserWindowResizeLocked = true;
  }
  this.OnBrowserWindowResizeCore(evt);
  if(shouldIgnoreNestedEvents)
   this.browserWindowResizeLocked = false;
 },
 OnBrowserWindowResizeCore: function(evt){
  if(this.BrowserWindowSizeChanged()) {
   this.forEachControlHierarchy(null, this, true, function(control) {
    if(control.IsDOMInitialized())
     control.OnBrowserWindowResizeInternal(evt);
   });
  }
 }
});
ASPxClientControlTree = _aspxCreateClass(null, {
 constructor: function(controlCollection, container) {
  this.container = container;
  this.domMap = { };
  this.rootNode = this.createNode(null, null);
  this.createControlTree(controlCollection, container);
 },
 forEachControl: function(collapseControls, processFunc) {
  var observer = _aspxGetDomObserver();
  observer.pause(this.container, true);
  var documentScrollInfo;
  if(collapseControls) {
   documentScrollInfo = _aspxGetOuterScrollPosition(document.body);
   this.collapseControls(this.rootNode);
  }
  var adjustNodes = [], 
   autoHeightNodes = [];
  var requireReAdjust = this.forEachControlCore(this.rootNode, collapseControls, processFunc, adjustNodes, autoHeightNodes);
  if(requireReAdjust)
   this.forEachControlsBackward(adjustNodes, collapseControls, processFunc);
  else {
   for(var i = 0, node; node = autoHeightNodes[i]; i++)
    node.control.AdjustAutoHeight();
  }
  if(collapseControls)
   _aspxRestoreOuterScrollPosition(documentScrollInfo);
  observer.resume(this.container, true);
 },
 forEachControlCore: function(node, collapseControls, processFunc, adjustNodes, autoHeightNodes) {
  var requireReAdjust = false,
   size, newSize;
  if(node.control) {
   var checkReadjustment = collapseControls && node.control.IsControlCollapsed() && node.control.CanCauseReadjustment();
   if(checkReadjustment)
    size = node.control.GetControlPercentMarkerSize(false, true);
   if(node.control.IsControlCollapsed() && !node.control.IsExpandableByAdjustment())
    node.control.ExpandControl();
   processFunc(node.control);
   if(checkReadjustment) {
    newSize = node.control.GetControlPercentMarkerSize(false, true);
    requireReAdjust = size.width !== newSize.width;
   }
   if(node.control.sizingConfig.supportAutoHeight)
    autoHeightNodes.push(node);
   node.control.ResetControlPercentMarkerSize();
  }
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   requireReAdjust = this.forEachControlCore(childNode, collapseControls, processFunc, adjustNodes, autoHeightNodes) || requireReAdjust;
  adjustNodes.push(node);
  return requireReAdjust;
 },
 forEachControlsBackward: function(adjustNodes, collapseControls, processFunc) {
  for(var i = 0, node; node = adjustNodes[i]; i++)
   this.forEachControlsBackwardCore(node, collapseControls, processFunc);
 },
 forEachControlsBackwardCore: function(node, collapseControls, processFunc) {
  if(node.control)
   processFunc(node.control);
  if(node.children.length > 1) {
   for(var i = 0, childNode; childNode = node.children[i]; i++)
    processFunc(childNode.control);
  }
 },
 collapseControls: function(node) {
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   this.collapseControls(childNode);
  if(node.control && node.control.NeedCollapseControl())
   node.control.CollapseControl();
 },
 createControlTree: function(controlCollection, container) {
  controlCollection.ProcessControlsInContainer(container, function(control) {
   control.RegisterInControlTree(this);
  }.aspxBind(this));
  for(var domElementID in this.domMap) {
   if(!this.domMap.hasOwnProperty(domElementID)) continue;
   var node = this.domMap[domElementID];
   var parentNode = this.findParentNode(domElementID);
   parentNode = parentNode || this.rootNode;
   var childNode = node.mainNode || node;
   this.addChildNode(parentNode, childNode);
  }
 },
 findParentNode: function(id) {
  var element = document.getElementById(id).parentNode;
  while(element && element.tagName !== "BODY") {
   if(element.id) {
    var parentNode = this.domMap[element.id];
    if(parentNode)
     return parentNode;
   }
   element = element.parentNode;
  }
  return null;
 },
 addChildNode: function(node, childNode) {
  if(!childNode.parentNode) {
   node.children.push(childNode);
   childNode.parentNode = node;
  }
 },
 addRelatedNode: function(node, relatedNode) {
  this.addChildNode(node, relatedNode);
  relatedNode.mainNode = node;
 },
 createNode: function(domElementID, control) {
  var node = {
   control: control,
   children: [],
   parentNode: null,
   mainNode: null
  };
  if(domElementID)
   this.domMap[domElementID] = node;
  return node;
 }
});
ASPxClientControl = _aspxCreateClass(null, {
 constructor: function(name){
  this.isASPxClientControl = true;
  this.name = name;
  this.uniqueID = name;  
  this.encodeHtml = true;
  this.enabled = true;
  this.clientEnabled = true;
  this.clientVisible = true;
  this.rtl = false;
  this.autoPostBack = false;
  this.allowMultipleCallbacks = true;
  this.callBack = null;
  this.enableCallbackAnimation = false;
  this.enableSlideCallbackAnimation = false;
  this.slideAnimationDirection = null;
  this.beginCallbackAnimationProcessing = false;
  this.endCallbackAnimationProcessing = false;
  this.savedCallbackResult = null;
  this.savedCallbacks = null;
  this.isCallbackAnimationPrevented = false;
  this.lpDelay = 300;
  this.lpTimer = -1;
  this.isNative = false;
  this.requestCount = 0;
  this.enableSwipeGestures = false;
  this.supportGestures = false;
  this.repeatedGestureValue = 0;
  this.repeatedGestureCount = 0;
  this.isInitialized = false;
  this.isControlCollapsed = false;
  this.initialFocused = false;
  this.leadingAfterInitCall = false; 
  this.adjustedSizes = { };
  this.adjustedHeight = 0;
  this.serverEvents = [];
  this.dialogContentHashTable = { };
  this.loadingPanelElement = null;
  this.loadingDivElement = null;  
  this.hasPhantomLoadingElements = false;
  this.mainElement = null;
  this.renderIFrameForPopupElements = false;
  this.widthValueSetInPercentage = false;
  this.heightValueSetInPercentage = false;
  this.touchUIMouseScroller = null;
  this.verticalAlignedElements = { };
  this.wrappedTextContainers = { };
  this.scrollPositionState = { };
  this.sizingConfig = {
   allowSetWidth: true,
   allowSetHeight: true,
   correction : false,
   adjustControl : false,
   supportPercentHeight: false,
   supportAutoHeight: false
  };
  this.percentSizeConfig = {
   width: -1,
   height: -1,
   markerWidth: -1,
   markerHeight: -1
  };
  this.Init = new ASPxClientEvent();
  this.BeginCallback = new ASPxClientEvent();
  this.EndCallback = new ASPxClientEvent();
  this.EndCallbackAnimationStart = new ASPxClientEvent();
  this.CallbackError = new ASPxClientEvent();
  this.CustomDataCallback = new ASPxClientEvent();
  this.LayoutChanging = new ASPxClientEvent();
  aspxGetControlCollection().Add(this);  
 },
 HtmlEncode: function(text) {
  return this.encodeHtml ? _aspxEncodeHtml(text) : text;
 },
 Initialize: function() {
  if(this.callBack != null)
   this.InitializeCallBackData();
 },
 InlineInitialize: function() {
  this.InitializeDOM();
 },
 InitializeGestures: function() {
  if(this.enableSwipeGestures && this.supportGestures) {
   ASPxGesturesHelper.AddSwipeGestureHandler(this.name, 
    function() { return this.GetCallbackAnimationElement(); }.aspxBind(this), 
    function(evt) { return this.CanHandleGestureCore(evt); }.aspxBind(this), 
    function(value) { return this.AllowStartGesture(); }.aspxBind(this),
    function(value) { return this.StartGesture(); }.aspxBind(this),
    function(value) { return this.AllowExecuteGesture(value); }.aspxBind(this),
    function(value) { this.ExecuteGesture(value); }.aspxBind(this),
    function(value) { this.CancelGesture(value); }.aspxBind(this)
   );
   if(__aspxMSTouchUI)
    this.touchUIMouseScroller = ASPxMouseScroller.Create(
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function() { return null; },
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function(element) { return this.NeedPreventTouchUIMouseScrolling(element); }.aspxBind(this),
     true
    );
  }
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return false;
 },
 InitailizeFocus: function() {
  if(this.initialFocused && this.IsVisible())
   this.Focus();
 },
 AfterCreate: function() { 
  this.InlineInitialize();
  this.InitializeGestures();
  if(!this.CanInitializeAdjustmentOnDOMContentLoaded() || __aspxStartupScriptsRunning)
   this.InitializeAdjustment();
 },
 DOMContentLoaded: function() {
  if(this.CanInitializeAdjustmentOnDOMContentLoaded()) 
   this.InitializeAdjustment();
 },
 CanInitializeAdjustmentOnDOMContentLoaded: function() {
  return !__aspxIE || __aspxBrowserVersion >= 10; 
 },
 InitializeAdjustment: function() {
  this.UpdateAdjustmentFlags();
  this.AdjustControl();
 },
 AfterInitialize: function() {
  this.AdjustControl();
  this.InitailizeFocus();
  this.isInitialized = true;
  this.RaiseInit();
  if(this.savedCallbacks) {
   for(var i = 0; i < this.savedCallbacks.length; i++) 
    this.CreateCallbackInternal(this.savedCallbacks[i].arg, this.savedCallbacks[i].command, 
     false, this.savedCallbacks[i].callbackInfo);
   this.savedCallbacks = null;
  }
 },
 InitializeCallBackData: function() {
 },
 RenderExistsOnPage: function() {
  return _aspxIsExistsElement(this.GetMainElement());
 },
 IsStateControllerEnabled: function(){
  return typeof(aspxGetStateController) != "undefined" && aspxGetStateController();
 },
 InitializeDOM: function() {
  var mainElement = this.GetMainElement();
  if(mainElement)
   mainElement["dxinit"] = true;
 },
 IsDOMInitialized: function() {
  var mainElement = this.GetMainElement();
  return mainElement && mainElement["dxinit"];
 },
 GetWidth: function() {
  return this.GetMainElement().offsetWidth;
 },
 GetHeight: function() {
  return this.GetMainElement().offsetHeight;
 },
 SetWidth: function(width) {
  if(this.sizingConfig.allowSetWidth)
   this.SetSizeCore("width", width, "GetWidth", false);
 },
 SetHeight: function(height) {
  if(this.sizingConfig.allowSetHeight)
   this.SetSizeCore("height", height, "GetHeight", false);
 },
 SetSizeCore: function(sizePropertyName, size, getFunctionName, corrected) {
  if(size < 0)
   return;
  this.GetMainElement().style[sizePropertyName] = size + "px";
  this.UpdateAdjustmentFlags();
  if(this.sizingConfig.adjustControl)
   this.AdjustControl(true);
  if(this.sizingConfig.correction && !corrected) {
   var realSize = this[getFunctionName]();
   if(realSize != size) {
    var correctedSize = size - (realSize - size);
    this.SetSizeCore(sizePropertyName, correctedSize, getFunctionName, true);
   }
  }
 },
 AdjustControl: function(nestedCall) {
  if(this.IsAdjustmentRequired() && (!ASPxClientControl.adjustControlLocked || nestedCall)) {
   ASPxClientControl.adjustControlLocked = true;
   try {
    if(!this.IsAdjustmentAllowed())
     return;
    this.AdjustControlCore();
    this.UpdateAdjustedSizes();
    this.percentMarkerSize = undefined;
   } 
   finally {
    delete ASPxClientControl.adjustControlLocked;
   }
  }
  this.TryShowPhantomLoadingElements();
 },
 ResetControlAdjustment: function () {
  this.adjustedSizes = { };
 },
 UpdateAdjustmentFlags: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = _aspxGetCurrentStyle(mainElement);
   this.UpdatePercentSizeConfig([mainElementStyle.width, mainElement.style.width], [mainElementStyle.height, mainElement.style.height]);
  }
 },
 UpdatePercentSizeConfig: function(widths, heights) {
  this.widthValueSetInPercentage = false;
  this.heightValueSetInPercentage = false;
  for(var i = 0; i < widths.length; i++) {
   if(_aspxIsPercentageSize(widths[i])) {
    this.percentSizeConfig.width = widths[i];
    this.widthValueSetInPercentage = true;
    break;
   }
  }
  for(var i = 0; i < heights.length; i++) {
   if(_aspxIsPercentageSize(heights[i])) {
    this.percentSizeConfig.height = heights[i];
    this.heightValueSetInPercentage = true;
    break;
   }
  }
  this.ResetControlPercentMarkerSize();
 },
 GetAdjustedSizes: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) 
   return { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
  return { width: 0, height: 0 };
 },
 IsAdjusted: function() {
  return (this.adjustedSizes.width && this.adjustedSizes.width > 0) && (this.adjustedSizes.height && this.adjustedSizes.height > 0);
 },
 IsAdjustmentRequired: function() {
  if(!this.IsAdjusted())
   return true;
  if(this.widthValueSetInPercentage)
   return true;
  if(this.heightValueSetInPercentage)
   return true;
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes){
   if(this.adjustedSizes[name] !== sizes[name])
    return true;
  }
  return false;
 },
 IsAdjustmentAllowed: function() {
  var mainElement = this.GetMainElement();
  return mainElement && this.IsDisplayed() && !this.IsHidden() && this.IsDOMInitialized();
 },
 UpdateAdjustedSizes: function() {
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes)
   this.adjustedSizes[name] = sizes[name];
 },
 AdjustControlCore: function() {
 },
 AdjustAutoHeight: function() {
 },
 IsControlCollapsed: function() {
  return this.isControlCollapsed;
 },
 NeedCollapseControl: function() {
  return this.NeedCollapseControlCore() && this.IsAdjustmentRequired() && this.IsAdjustmentAllowed();
 },
 NeedCollapseControlCore: function() {
  return false;
 },
 CollapseControl: function() {
  this.SaveScrollPositions();
  var mainElement = this.GetMainElement(),
   marker = this.GetControlPercentSizeMarker(),
   scrollHeight = mainElement.scrollHeight;
  if(this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight && scrollHeight <= mainElement.offsetHeight)
   marker.style.height = this.percentSizeConfig.height;
  else
   marker.style.height = scrollHeight + "px";
  mainElement.style.display = "none";
  this.isControlCollapsed = true;
 },
 ExpandControl: function() {
  var mainElement = this.GetMainElement();
  mainElement.style.display = "";
  this.GetControlPercentSizeMarker().style.height = "0px";
  this.isControlCollapsed = false;
  this.RestoreScrollPositions();
 },
 CanCauseReadjustment: function() {
  return this.NeedCollapseControlCore();
 },
 IsExpandableByAdjustment: function() {
  return false;
 },
 SaveScrollPositions: function() {
  var mainElement = this.GetMainElement();
  this.scrollPositionState.outer = _aspxGetOuterScrollPosition(mainElement.parentNode);
  this.scrollPositionState.inner = _aspxGetInnerScrollPositions(mainElement);
 },
 RestoreScrollPositions: function() {
  _aspxRestoreOuterScrollPosition(this.scrollPositionState.outer);
  _aspxRestoreInnerScrollPositions(this.scrollPositionState.inner);
 },
 GetControlPercentSizeMarker: function() {
  if(this.percentSizeMarker === undefined) {
   this.percentSizeMarker = _aspxCreateHtmlElementFromString("<div style='height:0px;font-size:0px;line-height:0;width:100%;'></div>");
   _aspxInsertElementAfter(this.percentSizeMarker, this.GetMainElement());
  }
  return this.percentSizeMarker;
 },
 KeepControlPercentSizeMarker: function(needCollapse, needCalculateHeight) {
  var mainElement = this.GetMainElement(),
   marker = this.GetControlPercentSizeMarker(),
   markerHeight;
  if(needCollapse)
   this.CollapseControl();
  if(this.widthValueSetInPercentage && marker.style.width !== this.percentSizeConfig.width)
   marker.style.width = this.percentSizeConfig.width;
  if(needCalculateHeight) {
   if(this.IsControlCollapsed())
    markerHeight = marker.style.height;
   marker.style.height = this.percentSizeConfig.height;
  }
  this.percentSizeConfig.markerWidth = marker.offsetWidth;
  if(needCalculateHeight) {
   this.percentSizeConfig.markerHeight = marker.offsetHeight;
   if(this.IsControlCollapsed())
    marker.style.height = markerHeight;
   else
    marker.style.height = "0px";
  }
  if(needCollapse)
   this.ExpandControl();
 },
 ResetControlPercentMarkerSize: function() {
  this.percentSizeConfig.markerWidth = -1;
  this.percentSizeConfig.markerHeight = -1;
 },
 GetControlPercentMarkerSize: function(hideControl, force) {
  var needCalculateHeight = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight;
  if(force || this.percentSizeConfig.markerWidth < 1 || (needCalculateHeight && this.percentSizeConfig.markerHeight < 1))
   this.KeepControlPercentSizeMarker(hideControl && !this.IsControlCollapsed(), needCalculateHeight);
  return {
   width: this.percentSizeConfig.markerWidth,
   height: this.percentSizeConfig.markerHeight
  };
 },
 OnBrowserWindowResize: function(evt) {
 },
 OnBrowserWindowResizeInternal: function(evt){
  if(this.BrowserWindowResizeSubscriber()) 
   this.OnBrowserWindowResize(evt);
 },
 BrowserWindowResizeSubscriber: function() {
  return this.widthValueSetInPercentage;
 },
 CorrectWrappedText: function(getElements, key, reCorrect) {
  var elements = this.GetCachedElements(getElements, this.wrappedTextContainers, key);
  for(var i = 0; i < elements.length; i++)
   this.CorrectWrappedTextInContainer(elements[i], reCorrect);
 },
 CorrectWrappedTextInContainer: function(container, reCorrect) {
  if(!container || (container.dxWrappedTextCorrected && !reCorrect) || container.offsetWidth === 0) return;
  _aspxAdjustWrappedTextInContainer(container);
  container.dxWrappedTextCorrected = true;
 },
 CorrectVerticalAlignment: function(alignMethod, getElements, key, reAlign) {
  var elements = this.GetCachedElements(getElements, this.verticalAlignedElements, key);
  for(var i = 0; i < elements.length; i++)
   this.CorrectElementVerticalAlignment(alignMethod, elements[i], reAlign);
 },
 CorrectElementVerticalAlignment: function(alignMethod, element, reAlign) {
  if(!element || (element.dxVerticalAligned && !reAlign) || element.offsetHeight === 0) return;
  alignMethod(element);
  element.dxVerticalAligned = true;
 },
 ClearVerticalAlignedElementsCache: function() {
  this.verticalAlignedElements = {};
 },
 ClearWrappedTextContainersCache: function() {
  this.wrappedTextContainers = {};
 },
 GetCachedElements: function(getElements, cache, key) {
  if(!key) key = "elements";
  if(!cache[key] || !_aspxIsValidElements(cache[key])){
   var elements = getElements.call(this);
   if(!ASPxIdent.IsArray(elements))
    elements = [elements];
   cache[key] = elements;
  }
  return cache[key];
 },
 AdjustPagerControls: function() {
  if(typeof(aspxGetPagersCollection) != "undefined")
   aspxGetPagersCollection().AdjustControls(this.GetMainElement());
 },
 OnAdaptiveLayoutChanging: function(isAdaptiveView) {
 },
 RaiseAdaptiveLayoutChanging: function(isAdaptiveView) {
  if(!this.LayoutChanging.IsEmpty()){
   var args = new ASPxClientAdaptiveLayoutChangingEventArgs(isAdaptiveView);
   this.LayoutChanging.FireEvent(this, args);
   return args.isAdaptiveView;
  }
  return isAdaptiveView;
 },
 SetAdaptiveClassNames: function(prevClassName, newClassName) {
  var maiElement = this.GetMainElement();
  if(maiElement) {
   _aspxRemoveClassNameFromElement(maiElement, prevClassName);
   _aspxAddClassNameToElement(maiElement, newClassName);
  }
 },
 RegisterInControlTree: function(tree) {
  var mainElement = this.GetMainElement();
  if(mainElement && mainElement.id)
   tree.createNode(mainElement.id, this);
 },
 RegisterServerEventAssigned: function(eventNames){
  for(var i = 0; i < eventNames.length; i++)
   this.serverEvents[eventNames[i]] = true;
 },
 IsServerEventAssigned: function(eventName){
  return !!this.serverEvents[eventName];
 },
 GetChild: function(idPostfix){
  var mainElement = this.GetMainElement();
  return mainElement ? _aspxGetChildById(mainElement, this.name + idPostfix) : null;
 },
 GetItemElementName: function(element) {
  var name = "";
  if(element.id)
   name = element.id.substring(this.name.length + 1);
  return name;
 },
 GetLinkElement: function(element) {
  if (element == null) return null;
  return (element.tagName == "A") ? element : _aspxGetChildByTagName(element, "A", 0);
 },
 GetInternalHyperlinkElement: function(parentElement, index) {
  var element = _aspxGetChildByTagName(parentElement, "A", index);
  if (element == null) 
   element = _aspxGetChildByTagName(parentElement, "SPAN", index);
  return element;
 },
 GetParentForm: function(){
  return _aspxGetParentByTagName(this.GetMainElement(), "FORM");
 },
 GetMainElement: function(){
  if(!_aspxIsExistsElement(this.mainElement))
   this.mainElement = _aspxGetElementById(this.name);
  return this.mainElement;
 },
 OnControlClick: function(clickedElement, htmlEvent) {
 },
 IsLoadingContainerVisible: function(){
  return this.IsVisible();
 },
 GetLoadingPanelElement: function(){
  return _aspxGetElementById(this.name + "_LP");
 },
 GetClonedLoadingPanel: function(){
  return document.getElementById(this.GetLoadingPanelElement().id + "V"); 
 },
 CloneLoadingPanel: function(element, parent) {
  var clone = element.cloneNode(true);
  clone.id = element.id + "V";
  parent.appendChild(clone);
  return clone;
 },
 CreateLoadingPanelWithoutBordersInsideContainer: function(container) {
  var loadingPanel = this.CreateLoadingPanelInsideContainer(container, false, true, true);
  var contentStyle = _aspxGetCurrentStyle(container);
  if(!loadingPanel || !contentStyle)
   return;
  var elements = [ ];
  elements.push(loadingPanel.tagName == "TABLE" ? loadingPanel : _aspxGetChildByTagName(loadingPanel, "TABLE", 0));
  var cells = _aspxGetElementsByTagName(loadingPanel, "TD");
  if(!cells) cells = [ ];
  for(var i = 0; i < cells.length; i++)
   elements.push(cells[i]);
  for(var i = 0; i < elements.length; i++) {
   var el = elements[i];
   el.style.backgroundColor = contentStyle.backgroundColor;
   _aspxRemoveBordersAndShadows(el);
  }
 },
 CreateLoadingPanelInsideContainer: function(parentElement, hideContent, collapseHeight, collapseWidth) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if (element != null){
   var width = collapseWidth ? 0 : _aspxGetClearClientWidth(parentElement);
   var height = collapseHeight ? 0 : _aspxGetClearClientHeight(parentElement);
   if(hideContent){
    for(var i = parentElement.childNodes.length - 1; i > -1; i--){
     if(parentElement.childNodes[i].style)
      parentElement.childNodes[i].style.display = "none";
     else if(parentElement.childNodes[i].nodeType == 3) 
      parentElement.removeChild(parentElement.childNodes[i]);
    }
   }
   else
    parentElement.innerHTML = "";
   var table = document.createElement("TABLE");
   parentElement.appendChild(table);
   table.border = 0;
   table.cellPadding = 0;
   table.cellSpacing = 0;
   _aspxSetStyles(table, {
    width: (width > 0) ? width : "100%",
    height: (height > 0) ? height : "100%"
   });
   var tbody = document.createElement("TBODY");
   table.appendChild(tbody);
   var tr = document.createElement("TR");
   tbody.appendChild(tr);
   var td = document.createElement("TD");
   tr.appendChild(td);
   td.align = "center";
   td.vAlign = "middle";
   element = this.CloneLoadingPanel(element, td);
   _aspxSetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  } else
   parentElement.innerHTML = "&nbsp;";
  return null;
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   _aspxSetStyles(element, {
    position: "absolute",
    display: ""
   });
   this.SetLoadingPanelLocation(offsetElement, element);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 CreateLoadingPanelInline: function(parentElement){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   _aspxSetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 ShowLoadingPanel: function() {
 },
 ShowLoadingElements: function() {
  if(this.InCallback() || this.lpTimer > -1) return;
  this.ShowLoadingDiv();
  if(this.IsCallbackAnimationEnabled())
   this.StartBeginCallbackAnimation();
  else
   this.ShowLoadingElementsInternal();
 },
 ShowLoadingElementsInternal: function() {
  if(this.lpDelay > 0 && !this.IsCallbackAnimationEnabled()) 
   this.lpTimer = _aspxSetTimeout(function() { 
    this.ShowLoadingPanelOnTimer(); 
   }.aspxBind(this), this.lpDelay);
  else {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 GetLoadingPanelOffsetElement: function (baseElement) {
  if(this.IsCallbackAnimationEnabled()) {
   var element = this.GetLoadingPanelCallbackAnimationOffsetElement();
   if(element) {
    var container = typeof(ASPxAnimationHelper) != "undefined" ? ASPxAnimationHelper.findSlideAnimationContainer(element) : null;
    if(container)
     return container.parentNode.parentNode;
    else
     return element;
   }
  }
  return baseElement;
 },
 GetLoadingPanelCallbackAnimationOffsetElement: function () {
  return this.GetCallbackAnimationElement();
 },
 IsCallbackAnimationEnabled: function () {
  return (this.enableCallbackAnimation || this.enableSlideCallbackAnimation) && !this.isCallbackAnimationPrevented;
 },
 StartBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = true;
  this.isCallbackFinished = false;
  var element = this.GetCallbackAnimationElement();
  if(element && this.enableSlideCallbackAnimation && this.slideAnimationDirection) 
   ASPxAnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeginCallbackAnimation.aspxBind(this));
  else if(element && this.enableCallbackAnimation) 
   ASPxAnimationHelper.fadeOut(element, this.FinishBeginCallbackAnimation.aspxBind(this));
  else
   this.FinishBeginCallbackAnimation();
 },
 FinishBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = false;
  if(!this.isCallbackFinished)
   this.ShowLoadingElementsInternal();
  else {
   this.DoCallback(this.savedCallbackResult);
   this.savedCallbackResult = null;
  }
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  if(this.beginCallbackAnimationProcessing) {
   this.savedCallbackResult = callbackResult;
   this.isCallbackFinished = true;
   return true;
  }
  return false;
 },
 StartEndCallbackAnimation: function () {
  this.HideLoadingPanel();
  this.SetInitialLoadingDivOpacity();
  this.RaiseEndCallbackAnimationStart();
  this.endCallbackAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(element && this.enableSlideCallbackAnimation && this.slideAnimationDirection) 
   ASPxAnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishEndCallbackAnimation.aspxBind(this));
  else if(element && this.enableCallbackAnimation) 
   ASPxAnimationHelper.fadeIn(element, this.FinishEndCallbackAnimation.aspxBind(this));
  else
   this.FinishEndCallbackAnimation();
  this.slideAnimationDirection = null;
 },
 FinishEndCallbackAnimation: function () {
  this.DoEndCallback();
  this.endCallbackAnimationProcessing = false;
  this.CheckRepeatGesture();
 },
 CheckEndCallbackAnimationNeeded: function() {
  if(!this.endCallbackAnimationProcessing && this.requestCount == 1) {
   this.StartEndCallbackAnimation();
   return true;
  }
  return false;
 },
 PreventCallbackAnimation: function() {
  this.isCallbackAnimationPrevented = true;
 },
 GetCallbackAnimationElement: function() {
  return null;
 },
 AssignSlideAnimationDirectionByPagerArgument: function(arg, currentPageIndex) {
  this.slideAnimationDirection = null;
  if(this.enableSlideCallbackAnimation && typeof(ASPxAnimationHelper) != "undefined") {
   if (arg == ASPxClientPagerCommands.Next || arg == ASPxClientPagerCommands.Last)
    this.slideAnimationDirection = ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
   else if (arg == ASPxClientPagerCommands.First || arg == ASPxClientPagerCommands.Prev)
    this.slideAnimationDirection = ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION;
   else if(!isNaN(currentPageIndex) && arg.indexOf(ASPxClientPagerCommands.PageNumber) == 0) {
    var newPageIndex = parseInt(arg.substring(2));
    if(!isNaN(newPageIndex))
     this.slideAnimationDirection = newPageIndex < currentPageIndex ? ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION : ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
   }
  }
 },
 TryShowPhantomLoadingElements: function () {
  if (this.hasPhantomLoadingElements && this.InCallback()) {
   this.ShowLoadingDivAndPanel();
   this.hasPhantomLoadingElements = false;
  }
 },
 ShowLoadingDivAndPanel: function () {
  this.ShowLoadingDiv();
  this.RestoreLoadingDivOpacity();
  this.ShowLoadingPanel();
 },
 HideLoadingElements: function() {
  this.HideLoadingPanel();
  this.HideLoadingDiv();
 },
 ShowLoadingPanelOnTimer: function() {
  this.ClearLoadingPanelTimer();
  if(this.RenderExistsOnPage()) {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 ClearLoadingPanelTimer: function() {
  this.lpTimer = _aspxClearTimer(this.lpTimer);  
 },
 HideLoadingPanel: function() {
  this.ClearLoadingPanelTimer();
  this.hasPhantomLoadingElements = false;
  if(_aspxIsExistsElement(this.loadingPanelElement)) {
   _aspxRemoveElement(this.loadingPanelElement);
   this.loadingPanelElement = null;
  }
 },
 SetLoadingPanelLocation: function(offsetElement, loadingPanel, x, y, offsetX, offsetY) {
  if(!_aspxIsExists(x) || !_aspxIsExists(y)){
   var x1 = _aspxGetAbsoluteX(offsetElement);
   var y1 = _aspxGetAbsoluteY(offsetElement);
   var x2 = x1;
   var y2 = y1;
   if(offsetElement == document.body){
    x2 += _aspxGetDocumentMaxClientWidth();
    y2 += _aspxGetDocumentMaxClientHeight();
   }
   else{
    x2 += offsetElement.offsetWidth;
    y2 += offsetElement.offsetHeight;
   }
   if(x1 < _aspxGetDocumentScrollLeft())
    x1 = _aspxGetDocumentScrollLeft();
   if(y1 < _aspxGetDocumentScrollTop())
    y1 = _aspxGetDocumentScrollTop();
   if(x2 > _aspxGetDocumentScrollLeft() + _aspxGetDocumentClientWidth())
    x2 = _aspxGetDocumentScrollLeft() + _aspxGetDocumentClientWidth();
   if(y2 > _aspxGetDocumentScrollTop() + _aspxGetDocumentClientHeight())
    y2 = _aspxGetDocumentScrollTop() + _aspxGetDocumentClientHeight();
   x = x1 + ((x2 - x1 - loadingPanel.offsetWidth) / 2);
   y = y1 + ((y2 - y1 - loadingPanel.offsetHeight) / 2);
  }
  if(_aspxIsExists(offsetX) && _aspxIsExists(offsetY)){
   x += offsetX;
   y += offsetY;
  }
  x = _aspxPrepareClientPosForElement(x, loadingPanel, true);
  y = _aspxPrepareClientPosForElement(y, loadingPanel, false);
  if(__aspxIE && __aspxBrowserVersion > 8 && (y - Math.floor(y) === 0.5))
   y = Math.ceil(y);
  _aspxSetStyles(loadingPanel, { left: x, top: y });
 },
 GetLoadingDiv: function(){
  return _aspxGetElementById(this.name + "_LD");
 },
 CreateLoadingDiv: function(parentElement, offsetElement){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingDiv();
  if(parentElement == null) 
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var div = this.GetLoadingDiv();
  if(div != null){
   div = div.cloneNode(true);
   parentElement.appendChild(div);
   _aspxSetElementDisplay(div, true);
   _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseDownEventName, _aspxPreventEvent);
   _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseMoveEventName, _aspxPreventEvent);
   _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseUpEventName, _aspxPreventEvent);
   this.SetLoadingDivBounds(offsetElement, div);
   this.loadingDivElement = div;
   this.SetInitialLoadingDivOpacity();
   return div;
  }
  return null;
 },
 SetInitialLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  _aspxSaveStyleAttribute(this.loadingDivElement, "opacity");
  _aspxSaveStyleAttribute(this.loadingDivElement, "filter");
  _aspxSetElementOpacity(this.loadingDivElement, 0.01);
 },
 RestoreLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  _aspxRestoreStyleAttribute(this.loadingDivElement, "opacity");
  _aspxRestoreStyleAttribute(this.loadingDivElement, "filter");
 },
 SetLoadingDivBounds: function(offsetElement, loadingDiv) {
  var absX = (offsetElement == document.body) ? 0 : _aspxGetAbsoluteX(offsetElement);
  var absY = (offsetElement == document.body) ? 0 : _aspxGetAbsoluteY(offsetElement);
  _aspxSetStyles(loadingDiv, {
   left: _aspxPrepareClientPosForElement(absX, loadingDiv, true),
   top: _aspxPrepareClientPosForElement(absY, loadingDiv, false)
  });
  var width = (offsetElement == document.body) ? _aspxGetDocumentWidth() : offsetElement.offsetWidth;
  var height = (offsetElement == document.body) ? _aspxGetDocumentHeight() : offsetElement.offsetHeight;
  if(height < 0) 
   height = 0;
  _aspxSetStyles(loadingDiv, { width: width, height: height });
  var correctedWidth = 2 * width - loadingDiv.offsetWidth;
  if(correctedWidth <= 0) correctedWidth = width;
  var correctedHeight = 2 * height - loadingDiv.offsetHeight;
  if (correctedHeight <= 0) correctedHeight = height;
  _aspxSetStyles(loadingDiv, { width: correctedWidth, height: correctedHeight });
 },
 ShowLoadingDiv: function() {
 },
 HideLoadingDiv: function() {
  this.hasPhantomLoadingElements = false;
  if(_aspxIsExistsElement(this.loadingDivElement)){
   _aspxRemoveElement(this.loadingDivElement);
   this.loadingDivElement = null;
  }
 },
 CanHandleGesture: function(evt) {
  return false;
 },
 CanHandleGestureCore: function(evt) {
  var source = _aspxGetEventSource(evt);
  if(_aspxGetIsParent(this.loadingPanelElement, source) || _aspxGetIsParent(this.loadingDivElement, source))
   return true; 
  var callbackAnimationElement = this.GetCallbackAnimationElement();
  if(!callbackAnimationElement)
   return false;
  var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(callbackAnimationElement, false, false);
  if(animationContainer && _aspxGetIsParent(animationContainer, source) && !_aspxGetIsParent(animationContainer.childNodes[0], source))
   return true; 
  return this.CanHandleGesture(evt); 
 },
 AllowStartGesture: function() {
  return !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing;
 },
 StartGesture: function() {
 },
 AllowExecuteGesture: function(value) {
  return false;
 },
 ExecuteGesture: function(value) {
 },
 CancelGesture: function(value) {
  if(this.repeatedGestureCount === 0) {
   this.repeatedGestureValue = value;
   this.repeatedGestureCount = 1;
  }
  else {
   if(this.repeatedGestureValue * value > 0)
    this.repeatedGestureCount++;
   else
    this.repeatedGestureCount--;
   if(this.repeatedGestureCount === 0)
    this.repeatedGestureCount = 0;
  }
 },
 CheckRepeatGesture: function() {
  if(this.repeatedGestureCount !== 0) {
   if(this.AllowExecuteGesture(this.repeatedGestureValue))
    this.ExecuteGesture(this.repeatedGestureValue, this.repeatedGestureCount);
   this.repeatedGestureValue = 0;
   this.repeatedGestureCount = 0;
  }
 },
 AllowExecutePagerGesture: function (pageIndex, pageCount, value) {
  if(pageIndex < 0) return false;
  if(pageCount <= 1) return false;
  if(value > 0 && pageIndex === 0) return false;
  if(value < 0 && pageIndex === pageCount - 1) return false;
  return true;
 },
 ExecutePagerGesture: function(pageIndex, pageCount, value, count, method) {
  if(!count) count = 1;
  var pageIndex = pageIndex + (value < 0 ? count : -count);
  if(pageIndex < 0) pageIndex = 0;
  if(pageIndex > pageCount - 1) pageIndex = pageCount - 1;
  method(ASPxClientPagerCommands.PageNumber + pageIndex);
 },
 RaiseInit: function(){
  if(!this.Init.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.Init.FireEvent(this, args);
  }
 },
 RaiseBeginCallbackInternal: function(command){
  if(!this.BeginCallback.IsEmpty()){
   var args = new ASPxClientBeginCallbackEventArgs(command);
   this.BeginCallback.FireEvent(this, args);
  }
 },
 RaiseBeginCallback: function(command){
  this.RaiseBeginCallbackInternal(command);
  if(typeof(aspxGetGlobalEvents) != "undefined")
   aspxGetGlobalEvents().OnBeginCallback(this, command);
 },
 RaiseEndCallback: function(){
  if(!this.EndCallback.IsEmpty()){
   var args = new ASPxClientEndCallbackEventArgs();
   this.EndCallback.FireEvent(this, args);
  }
  if(typeof(aspxGetGlobalEvents) != "undefined")
   aspxGetGlobalEvents().OnEndCallback(this);
 },
 RaiseEndCallbackAnimationStart: function(){
  if(!this.EndCallbackAnimationStart.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EndCallbackAnimationStart.FireEvent(this, args);
  }
 },
 RaiseCallbackError: function(message) {
  if(!this.CallbackError.IsEmpty()) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   this.CallbackError.FireEvent(this, args);
   if(args.handled)
    return { isHandled: true, errorMessage: args.message };
  }
  if(typeof(aspxGetGlobalEvents) != "undefined") {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   aspxGetGlobalEvents().OnCallbackError(this, args);
   if(args.handled)
    return { isHandled: true, errorMessage: args.message };
  }
  return { isHandled: false, errorMessage: message };
 },
 IsVisible: function() {
  var element = this.GetMainElement();
  return _aspxElementIsVisible(element);
 },
 IsDisplayed: function() {
  var element = this.GetMainElement();
  while(element && element.tagName != "BODY") {
   if(!_aspxGetElementDisplay(element)) 
    return false;
   element = element.parentNode;
  }
  return true;
 },
 IsHidden: function() {
  var element = this.GetMainElement();
  return element.offsetWidth == 0 && element.offsetHeight == 0;
 },
 Focus: function() {
 },
 GetClientVisible: function(){
  return this.GetVisible();
 },
 SetClientVisible: function(visible){
  this.SetVisible(visible);
 },
 GetVisible: function(){
  return this.clientVisible;
 },
 SetVisible: function(visible){
  if(this.clientVisible != visible){
   this.clientVisible = visible;
   _aspxSetElementDisplay(this.GetMainElement(), visible);
   if (visible) {
    this.AdjustControl();
    var mainElement = this.GetMainElement();
    if(mainElement)
     aspxGetControlCollection().AdjustControls(mainElement);
   }
  }
 },
 GetEnabled: function() {
  return this.clientEnabled;
 },
 SetEnabled: function(enabled) {
  this.clientEnabled = enabled;
  if(ASPxClientControl.setEnabledLocked)
   return;
  else
   ASPxClientControl.setEnabledLocked = true;
  aspxGetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function(control) {
   if(_aspxIsFunction(control.SetEnabled))
    control.SetEnabled(enabled);
  });
  delete ASPxClientControl.setEnabledLocked;
 },
 InCallback: function() {
  return this.requestCount > 0;
 },
 DoBeginCallback: function(command) {
  this.RaiseBeginCallback(command || "");
  aspxGetControlCollection().Before_WebForm_InitCallback(this.name);
  if(typeof(WebForm_InitCallback) != "undefined" && WebForm_InitCallback) {
   __theFormPostData = "";
   __theFormPostCollection = [ ];
   this.ClearPostBackEventInput("__EVENTTARGET");
   this.ClearPostBackEventInput("__EVENTARGUMENT");
   WebForm_InitCallback();
   this.savedFormPostData = __theFormPostData;   
   this.savedFormPostCollection = __theFormPostCollection;
  }
 },
 ClearPostBackEventInput: function(id){
  var element = _aspxGetElementById(id);
  if(element != null) element.value = "";
 },
 PerformDataCallback: function(arg, handler) {
  this.CreateCustomDataCallback(arg, "", handler);
 }, 
 CreateCallback: function(arg, command) {
  var callbackInfo = this.CreateCallbackInfo(ASPxCallbackType.Common, null);
  this.CreateCallbackByInfo(arg, command, callbackInfo);
 },
 CreateCustomDataCallback: function(arg, command, handler) {
  var callbackInfo = this.CreateCallbackInfo(ASPxCallbackType.Data, handler);
  this.CreateCallbackByInfo(arg, command, callbackInfo);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  if(!this.CanCreateCallback()) return;
  if(typeof(WebForm_DoCallback) != "undefined" && WebForm_DoCallback && __aspxDocumentLoaded)
   this.CreateCallbackInternal(arg, command, true, callbackInfo);
  else {
   if(!this.savedCallbacks)
    this.savedCallbacks = [];
   var callbackInfo = { arg: arg, command: command, callbackInfo: callbackInfo };
   if(this.allowMultipleCallbacks)
    this.savedCallbacks.push(callbackInfo);
   else
    this.savedCallbacks[0] = callbackInfo;
  }
 },
 CreateCallbackInternal: function(arg, command, viaTimer, callbackInfo) {
  this.requestCount++;
  this.DoBeginCallback(command);
  if(typeof(arg) == "undefined")
   arg = "";
  if(typeof(command) == "undefined")
   command = "";
  var callbackID = this.SaveCallbackInfo(callbackInfo);
  if(viaTimer)
   window.setTimeout("aspxCreateCallback('" + this.name + "', '" + escape(arg) + "', '" + escape(command) + "', " + callbackID + ");", 0);
  else
   this.CreateCallbackCore(arg, command, callbackID);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  var callBackMethod = this.GetCallbackMethod(command);
  __theFormPostData = this.savedFormPostData;
  __theFormPostCollection = this.savedFormPostCollection;
  callBackMethod.call(this, this.GetSerializedCallbackInfoByID(callbackID) + arg);
 },
 GetCallbackMethod: function(command){
  return this.callBack;
 },
 CanCreateCallback: function() {
  return !this.InCallback() || (this.allowMultipleCallbacks && !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing);
 },
 DoLoadCallbackScripts: function() {
  _aspxProcessScriptsAndLinks(this.name, true);
 },
 DoEndCallback: function() {
  if(this.IsCallbackAnimationEnabled() && this.CheckEndCallbackAnimationNeeded()) 
   return;
  this.requestCount--;
  if(this.HideLoadingPanelOnCallback() && this.requestCount < 1) 
   this.HideLoadingElements();
  if(this.enableSwipeGestures && this.supportGestures) {
   ASPxGesturesHelper.UpdateSwipeAnimationContainer(this.name);
   if(this.touchUIMouseScroller)
    this.touchUIMouseScroller.update();
  }
  this.isCallbackAnimationPrevented = false;
  this.OnCallbackFinalized();
  this.RaiseEndCallback();
 },
 DoFinalizeCallback: function() {
 },
 OnCallbackFinalized: function() {
 },
 HideLoadingPanelOnCallback: function() {
  return true;
 },
 ShouldHideExistingLoadingElements: function() {
  return true;
 },
 EvalCallbackResult: function(resultString){
  return eval(resultString)
 },
 DoCallback: function(result) {
  if(this.IsCallbackAnimationEnabled() && this.CheckBeginCallbackAnimationInProgress(result))
   return;
  result = _aspxTrim(result);
  if(result.indexOf(__aspxCallbackResultPrefix) != 0) 
   this.ProcessCallbackGeneralError(result);
  else {
   var resultObj = null;
   try {
    resultObj = this.EvalCallbackResult(result);
   } 
   catch(e) {
   }
   if(resultObj) {
    if(resultObj.redirect){
     if(!__aspxIE)
      window.location.href = resultObj.redirect;
     else { 
      var fakeLink = document.createElement("a");
      fakeLink.href = resultObj.redirect;
      document.body.appendChild(fakeLink); 
      fakeLink.click();
     }
    }
    else if(resultObj.generalError){
     this.ProcessCallbackGeneralError(resultObj.generalError);
    }
    else {
     var errorObj = resultObj.error;
     if(errorObj)
      this.ProcessCallbackError(errorObj);
     else {
      if(resultObj.cp) {
       for(var name in resultObj.cp)
        this[name] = resultObj.cp[name];
      }
      var callbackInfo = this.DequeueCallbackInfo(resultObj.id);
      if(callbackInfo.type == ASPxCallbackType.Data) 
       this.ProcessCustomDataCallback(resultObj.result, callbackInfo);
      else 
       this.ProcessCallback(resultObj.result);
     }
    }
   } 
  }
  this.DoLoadCallbackScripts();
 },
 DoCallbackError: function(result) {
  this.HideLoadingElements();
  this.ProcessCallbackGeneralError(result); 
 },
 DoControlClick: function(evt) {
  this.OnControlClick(_aspxGetEventSource(evt), evt);
 },
 ProcessCallback: function(result) {
  this.OnCallback(result);
 },
 ProcessCustomDataCallback: function(result, callbackInfo) {
  if(callbackInfo.handler != null)
   callbackInfo.handler(this, result);
  this.RaiseCustomDataCallback(result);
 },
 RaiseCustomDataCallback: function(result) {
  if(!this.CustomDataCallback.IsEmpty()) {
   var arg = new ASPxClientCustomDataCallbackEventArgs(result);
   this.CustomDataCallback.FireEvent(this, arg);
  }
 },
 OnCallback: function(result) {
 },
 CreateCallbackInfo: function(type, handler) {
  return { type: type, handler: handler };
 },
 GetSerializedCallbackInfoByID: function(callbackID) {
  return this.GetCallbackInfoByID(callbackID).type + callbackID + __aspxCallbackSeparator;
 },
 SaveCallbackInfo: function(callbackInfo) {
  var activeCallbacksInfo = this.GetActiveCallbacksInfo();
  for(var i = 0; i < activeCallbacksInfo.length; i++) {
   if(activeCallbacksInfo[i] == null) {
    activeCallbacksInfo[i] = callbackInfo;
    return i;
   }
  }
  activeCallbacksInfo.push(callbackInfo);
  return activeCallbacksInfo.length - 1;
 },
 GetActiveCallbacksInfo: function() {
  var persistentProperties = this.GetPersistentProperties();
  if(!persistentProperties.activeCallbacks)
   persistentProperties.activeCallbacks = [ ];
  return persistentProperties.activeCallbacks;
 },
 GetPersistentProperties: function() {
  var storage = _aspxGetPersistentControlPropertiesStorage();
  var persistentProperties = storage[this.name];
  if(!persistentProperties) {
   persistentProperties = { };
   storage[this.name] = persistentProperties;
  }
  return persistentProperties;
 },
 GetCallbackInfoByID: function(callbackID) {
  return this.GetActiveCallbacksInfo()[callbackID];
 },
 DequeueCallbackInfo: function(index) {
  var activeCallbacksInfo = this.GetActiveCallbacksInfo();
  if(index < 0 || index >= activeCallbacksInfo.length)
   return null;
  var result = activeCallbacksInfo[index];
  activeCallbacksInfo[index] = null;
  return result;
 },
 ProcessCallbackError: function(errorObj) {
  var data = _aspxIsExists(errorObj.data) ? errorObj.data : null;
  var result = this.RaiseCallbackError(errorObj.message);
  if(result.isHandled)
   this.OnCallbackErrorAfterUserHandle(result.errorMessage, data); 
  else
   this.OnCallbackError(result.errorMessage, data); 
 },
 OnCallbackError: function(errorMessage, data) {
  if(errorMessage)
   alert(errorMessage);
 },
 OnCallbackErrorAfterUserHandle: function(errorMessage, data) {
 },
 ProcessCallbackGeneralError: function(errorMessage) {
  var result = this.RaiseCallbackError(errorMessage);
  if(!result.isHandled)
   this.OnCallbackGeneralError(result.errorMessage);
 },
 OnCallbackGeneralError: function(errorMessage) {
  this.OnCallbackError(errorMessage, null);
 },
 SendPostBack: function(params) {
  __doPostBack(this.uniqueID, params);
 }
});
ASPxClientControl.AdjustControls = function(container, collapseControls){
 aspxGetControlCollection().AdjustControls(container, collapseControls);
};
ASPxClientControl.Cast = function(obj) {
 if(typeof obj == "string")
  return window[obj];
 return obj;
};
ASPxClientControl.GetControlCollection = function(){
 return aspxGetControlCollection();
}
var __aspxControlCollection = null;
function aspxGetControlCollection(){
 if(__aspxControlCollection == null)
  __aspxControlCollection = new ASPxClientControlCollection();
 return __aspxControlCollection;
}
var __aspxPersistentControlPropertiesStorage = null;
function _aspxGetPersistentControlPropertiesStorage() {
 if(__aspxPersistentControlPropertiesStorage == null)
  __aspxPersistentControlPropertiesStorage = { };
 return __aspxPersistentControlPropertiesStorage;
}
function _aspxFunctionIsInCallstack(currentCallee, targetFunction, depthLimit) {
 var candidate = currentCallee;
 var depth = 0;
 while(candidate && depth <= depthLimit) {
  candidate = candidate.caller;
  if(candidate == targetFunction)
   return true;
  depth++;
 }
 return false;
}
function aspxCAInit() {
 var isAppInit = typeof(Sys$_Application$initialize) != "undefined" &&
  _aspxFunctionIsInCallstack(arguments.callee, Sys$_Application$initialize, 10 );
 aspxGetControlCollection().AtlasInitialize(!isAppInit);
}
function aspxCreateCallback(name, arg, command, callbackID){
 var control = aspxGetControlCollection().Get(name);
 if(control != null)
  control.CreateCallbackCore(unescape(arg), unescape(command), callbackID);
}
function aspxCallback(result, context){
 var collection = aspxGetControlCollection();
 collection.DoFinalizeCallback();
 var control = collection.Get(context);
 if(control != null)
  control.DoCallback(result);
}
function aspxCallbackError(result, context){
 var control = aspxGetControlCollection().Get(context);
 if(control != null)
  control.DoCallbackError(result, false);
}
function aspxCClick(name, evt) {
 var control = aspxGetControlCollection().Get(name);
 if(control != null) control.DoControlClick(evt);
}
_aspxAttachEventToElement(window, "resize", aspxGlobalWindowResize);
function aspxGlobalWindowResize(evt){
 aspxGetControlCollection().OnBrowserWindowResize(evt); 
}
_aspxAttachEventToElement(window.document, "DOMContentLoaded", aspxClassesDOMContentLoaded);
function aspxClassesDOMContentLoaded(evt){
 aspxGetControlCollection().DOMContentLoaded();
}
_aspxAttachEventToElement(window, "load", aspxClassesWindowOnLoad);
function aspxClassesWindowOnLoad(evt){
 __aspxDocumentLoaded = true;
 _aspxSweepDuplicatedLinks();
 ASPxResourceManager.SynchronizeResources();
 aspxGetControlCollection().Initialize();
 _aspxInitializeScripts();
 _aspxInitializeLinks();
 _aspxInitializeFocus();
}
ASPxIdent = { };
ASPxIdent.IsDate = function(obj) {
 return obj && obj.constructor == Date;
};
ASPxIdent.IsRegExp = function(obj) {
 return obj && obj.constructor === RegExp;
};
ASPxIdent.IsArray = function(obj) {
 return obj && obj.constructor == Array;
};
ASPxIdent.IsASPxClientControl = function(obj) {
 return obj && obj.isASPxClientControl;
};
ASPxIdent.IsASPxClientEdit = function(obj) {
 return obj && obj.isASPxClientEdit;
};
ASPxIdent.IsASPxClientRadioButtonList = function(obj) {
 return obj && obj.isASPxClientRadioButtonList;
};
ASPxClientPagerCommands = {
 Next : "PBN",
 Prev : "PBP",
 Last : "PBL",
 First : "PBF",
 PageNumber : "PN",
 PageSize : "PSP"
};
if(_aspxIsFunction(window.WebForm_InitCallbackAddField)) {
 (function() {
  var original = window.WebForm_InitCallbackAddField;
  window.WebForm_InitCallbackAddField = function(name, value) {
   if(typeof(name) == "string" && name)
    original.apply(null, arguments);
  };
 })();
}
function aspxFireDefaultButton(evt, buttonID) {
 if(_aspxIsDefaultButtonEvent(evt, buttonID)) {
  var defaultButton = _aspxGetElementById(buttonID);
  if(defaultButton && defaultButton.click) {
   if(_aspxIsFocusable(defaultButton))
    defaultButton.focus();
   _aspxDoElementClick(defaultButton);
   _aspxPreventEventAndBubble(evt);
   return false;
  }
 }
 return true;
}
function _aspxIsDefaultButtonEvent(evt, defaultButtonID) {
 if(evt.keyCode != ASPxKey.Enter)
  return false;
 var srcElement = _aspxGetEventSource(evt);
 if(!srcElement || srcElement.id === defaultButtonID)
  return true;
 var tagName = srcElement.tagName;
 var type = srcElement.type;
 return tagName != "TEXTAREA" && tagName != "BUTTON" && tagName != "A" &&
  (tagName != "INPUT" || type != "checkbox" && type != "radio" && type != "button" && type != "submit" && type != "reset");
}
ASPxPostHandler = _aspxCreateClass(null, {
 constructor: function() {
  this.Post = new ASPxClientEvent();
  this.PostFinalization = new ASPxClientEvent();
  this.observableForms = [];
  this.ReplaceGlobalPostFunctions();
  this.HandleDxCallbackBeginning();
  this.HandleMSAjaxRequestBeginning();
 },
 Update: function() {
  this.ReplaceFormsSubmit(true);
 },
 OnPost: function(ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
  var args = new ASPxClientPostHandlerOnPostEventArgs(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
  this.Post.FireEvent(this, args);
  if(args.cancel)
   return false;
  this.PostFinalization.FireEvent(this, ASPxClientEventArgs.Empty);
  return true;
 },
 ReplaceGlobalPostFunctions: function() {
  if(_aspxIsFunction(window.__doPostBack))
   this.ReplaceDoPostBack();
  if(_aspxIsFunction(window.WebForm_DoCallback))
   this.ReplaceDoCallback();
  this.ReplaceFormsSubmit();
 },
 HandleDxCallbackBeginning: function() {
  aspxGetControlCollection().BeforeInitCallback.AddHandler(function(s, e) {
   _aspxRaisePostHandlerOnPost(e.callbackOwnerID, true, false, true); 
  });
 },
 HandleMSAjaxRequestBeginning: function() {
  if(window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager && Sys.WebForms.PageRequestManager.getInstance) {
   var pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
   if(pageRequestManager != null && ASPxIdent.IsArray(pageRequestManager._onSubmitStatements)) {
    pageRequestManager._onSubmitStatements.unshift(function() {
     var manager = Sys.WebForms.PageRequestManager.getInstance()._postBackSettings;
     var targetID = manager && manager.postbackSettings && manager.postbackSettings.asyncTarget;
     _aspxRaisePostHandlerOnPost(targetID, true, true);
     return true;
    });
   }
  }
 },
 ReplaceDoPostBack: function() {
  var original = __doPostBack;
  __doPostBack = function(eventTarget, eventArgument) {
   var postHandler = aspxGetPostHandler();
   _aspxRaisePostHandlerOnPost(eventTarget);
   if(postHandler.cancelPostProcessing)
    return;
   original(eventTarget, eventArgument);
  };
 },
 ReplaceDoCallback: function() {
  var original = WebForm_DoCallback;
  WebForm_DoCallback = function(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync) {
   var postHandler = aspxGetPostHandler();
   if(postHandler.dxCallbackHandled)
    delete postHandler.dxCallbackHandled;
   else
    _aspxRaisePostHandlerOnPost(eventTarget, true);
   if(postHandler.cancelPostProcessing)
    return;
   return original(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync);
  };
 },
 ReplaceFormsSubmit: function(checkObservableCollection) {
  for(var i = 0; i < document.forms.length; i++) { 
   var form = document.forms[i];
   if(checkObservableCollection && _aspxArrayIndexOf(this.observableForms, form) >= 0)
    continue;
   if(form.submit)
    this.ReplaceFormSubmit(form);
   this.ReplaceFormOnSumbit(form);
   this.observableForms.push(form);
  }
 },
 ReplaceFormSubmit: function(form) {
  var originalSubmit = form.submit;
  form.submit = function() {
   var postHandler = aspxGetPostHandler();
   _aspxRaisePostHandlerOnPost();
   if(postHandler.cancelPostProcessing)
    return false;
   var callee = arguments.callee;
   this.submit = originalSubmit;
   var submitResult = this.submit();
   this.submit = callee;
   return submitResult;
  };
  form = null;
 },
 ReplaceFormOnSumbit: function(form) {
  var originalSubmit = form.onsubmit;
  form.onsubmit = function() {
   var postHandler = aspxGetPostHandler();
   if(postHandler.msAjaxRequestBeginningHandled)
    delete postHandler.msAjaxRequestBeginningHandled;
   else
    _aspxRaisePostHandlerOnPost();
   if(postHandler.cancelPostProcessing)
    return false;
   return _aspxIsFunction(originalSubmit)
    ? originalSubmit.apply(this, arguments)
    : true;
  };
  form = null;
 }
});
function _aspxRaisePostHandlerOnPost(ownerID, isCallback, isMSAjaxRequestBeginning, isDXCallbackBeginning) {
 var postHandler = aspxGetPostHandler();
 if(isMSAjaxRequestBeginning)
  postHandler.msAjaxRequestBeginningHandled = true;
 else if(isDXCallbackBeginning)
  postHandler.dxCallbackHandled = true;
 postHandler.cancelPostProcessing = !postHandler.OnPost(ownerID, isCallback, isMSAjaxRequestBeginning, isDXCallbackBeginning);
}
function aspxGetPostHandler() {
 if (!window.__aspxPostHandler)
  window.__aspxPostHandler = new ASPxPostHandler();
 return window.__aspxPostHandler;
}
ASPxClientBeforeInitCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(callbackOwnerID){
  this.constructor.prototype.constructor.call(this);
  this.callbackOwnerID = callbackOwnerID;
 }
});
ASPxClientPostHandlerOnPostEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(ownerID, isCallback, isMSAjaxCallback, isDXCallback){
  this.constructor.prototype.constructor.call(this);
  this.ownerID = ownerID;
  this.isCallback = !!isCallback;
  this.isDXCallback = !!isDXCallback;
  this.isMSAjaxCallback = !!isMSAjaxCallback;
 }
});
ASPxResourceManager = {
 HandlerStr: "DXR.axd?r=",
 ResourceHashes: {},
 SynchronizeResources: function(method){
  if(!method){
   method = function(name, resource) { 
    this.UpdateInputElements(name, resource); 
   }.aspxBind(this);
  }
  var resources = this.GetResourcesData();
  for(var name in resources)
   method(name, resources[name]);
 },
 GetResourcesData: function(){
  return {
   DXScript: this.GetResourcesElementsString(_aspxGetIncludeScripts(), "src", "DXScript"),
   DXCss: this.GetResourcesElementsString(_aspxGetLinks(), "href", "DXCss")
  };
 },
 GetResourcesElementsString: function(elements, urlAttr, id){
  if(!this.ResourceHashes[id]) 
   this.ResourceHashes[id] = {};
  var hash = this.ResourceHashes[id];
  for(var i = 0; i < elements.length; i++) {
   var resourceUrl = _aspxGetAttribute(elements[i], urlAttr);
   if(resourceUrl) {
    var pos = resourceUrl.indexOf(this.HandlerStr);
    if(pos > -1){
     var list = resourceUrl.substr(pos + this.HandlerStr.length);
     var ampPos = list.lastIndexOf("-");
     if(ampPos > -1)
      list = list.substr(0, ampPos);
     var indexes = list.split(",");
     for(var j = 0; j < indexes.length; j++)
      hash[indexes[j]] = indexes[j];
    }
    else
     hash[resourceUrl] = resourceUrl;
   }
  }
  var array = [];
  for(var key in hash) 
   array.push(key);
  return array.join(",");
 },
 UpdateInputElements: function(typeName, list){
  for(var i = 0; i < document.forms.length; i++){
   var inputElement = document.forms[i][typeName];
   if(!inputElement)
    inputElement = this.CreateInputElement(document.forms[i], typeName);
   inputElement.value = list;
  }
 },
 CreateInputElement: function(form, typeName){
  var inputElement = _aspxCreateHiddenField(typeName, typeName);
  form.appendChild(inputElement);
  return inputElement;
 }
};
var __aspxIncludeScriptPrefix = "dxis_";
var __aspxStartupScriptPrefix = "dxss_";
var __aspxIncludeScriptsCache = {};
var __aspxCreatedIncludeScripts = [];
var __aspxAppendedScriptsCount = 0;
var __aspxCallbackOwnerNames = [];
var __aspxScriptsRestartHandlers = { };
function _aspxGetScriptCode(script) {
 var useFirstChildElement = __aspxChrome && __aspxBrowserVersion < 11 
  || __aspxSafari && __aspxBrowserVersion < 5; 
 var text = useFirstChildElement ? script.firstChild.data : script.text;
 var comment = "<!--";
 var pos = text.indexOf(comment);
 if(pos > -1)
  text = text.substr(pos + comment.length);
 return text;
}
function _aspxAppendScript(script) {
 var parent = document.getElementsByTagName("head")[0];
 if(!parent)
  parent = document.body;
 if(parent)
  parent.appendChild(script);
}
function _aspxIsKnownIncludeScript(script) {
 return !!__aspxIncludeScriptsCache[script.src];
}
function _aspxCacheIncludeScript(script) {
 __aspxIncludeScriptsCache[script.src] = 1;
}
function _aspxProcessScriptsAndLinks(ownerName, isCallback) {
 if(!__aspxDocumentLoaded) return; 
 _aspxProcessScripts(ownerName, isCallback);
 _aspxSweepDuplicatedLinks();
 _aspxMoveLinkElements();
 __aspxCachedRules = { };
}
function _aspxGetStartupScripts() {
 return _aspxGetScriptsCore(__aspxStartupScriptPrefix);
}
function _aspxGetIncludeScripts() {
 return _aspxGetScriptsCore(__aspxIncludeScriptPrefix);
}
function _aspxGetScriptsCore(prefix) {
 var result = [];
 var scripts = document.getElementsByTagName("SCRIPT");
 for(var i = 0; i < scripts.length; i++) {
  if (scripts[i].id.indexOf(prefix) == 0)
   result.push(scripts[i]);
 }
 return result;
}
function _aspxGetLinks() {
 var result = [];
 var links = document.getElementsByTagName("LINK");;
 for(var i = 0; i < links.length; i++) 
  result[i] = links[i];
 return result;
}
function _aspxIsLinksLoaded() {
 var links = _aspxGetLinks();
 for(var i = 0, link; link = links[i]; i++) {
  if(link.readyState && link.readyState.toLowerCase() == "loading")
    return false;
  }
 return true;
}
function _aspxInitializeLinks() {
 var links = _aspxGetLinks();
 for(var i = 0; i < links.length; i++)
  links[i].loaded = true; 
}
function _aspxInitializeScripts() {
 var scripts = _aspxGetIncludeScripts();
 for(var i = 0; i < scripts.length; i++)
  _aspxCacheIncludeScript(scripts[i]);   
 var startupScripts = _aspxGetStartupScripts();
 for(var i = 0; i < startupScripts.length; i++)
  startupScripts[i].executed = true; 
}
function _aspxSweepDuplicatedLinks() {
 var hash = { };
 var links = _aspxGetLinks();
 for(var i = 0; i < links.length; i++) {
  var href = links[i].href;
  if(!href)
   continue;
  if(hash[href]){
   if((__aspxIE || !hash[href].loaded) && links[i].loaded) {
    _aspxRemoveElement(hash[href]);
    hash[href] = links[i];
   }
   else
    _aspxRemoveElement(links[i]);
  }
  else
   hash[href] = links[i];
 }
}
function _aspxSweepDuplicatedScripts() {
 var hash = { };
 var scripts = _aspxGetIncludeScripts();
 for(var i = 0; i < scripts.length; i++) {
  var src = scripts[i].src;
  if(!src) continue;
  if(hash[src])
   _aspxRemoveElement(scripts[i]);
  else
   hash[src] = scripts[i];
 }
}
function _aspxProcessScripts(ownerName, isCallback) {
 var scripts = _aspxGetIncludeScripts();
 var previousCreatedScript = null;
 var firstCreatedScript = null;
 for(var i = 0; i < scripts.length; i++) {
  var script = scripts[i];
  if(script.src == "") continue; 
  if(_aspxIsKnownIncludeScript(script))
   continue;
  var createdScript = document.createElement("script");
  createdScript.type = "text/javascript";
  createdScript.src = script.src;
  createdScript.id = script.id;
  function AreScriptsEqual(script1, script2) {
   return script1.src == script2.src;
  }
  if(_aspxArrayIndexOf(__aspxCreatedIncludeScripts, createdScript, AreScriptsEqual) >= 0)
   continue;
  __aspxCreatedIncludeScripts.push(createdScript);
  _aspxRemoveElement(script);
  if(__aspxIE && __aspxBrowserVersion < 9) {
   createdScript.onreadystatechange = new Function("_aspxOnScriptReadyStateChangedCallback(this, " + isCallback + ");");
  } else if(__aspxWebKitFamily || (__aspxFirefox && __aspxBrowserVersion >= 4) || __aspxIE && __aspxBrowserVersion >= 9) {
   createdScript.onload = new Function("_aspxOnScriptLoadCallback(this, " + isCallback + ");");
   if(firstCreatedScript == null)
    firstCreatedScript = createdScript;
   createdScript.nextCreatedScript = null;
   if(previousCreatedScript != null)
    previousCreatedScript.nextCreatedScript = createdScript;
   previousCreatedScript = createdScript;
  } else {
   createdScript.onload = new Function("_aspxOnScriptLoadCallback(this);");
   _aspxAppendScript(createdScript);
   _aspxCacheIncludeScript(createdScript);
  }
 }
 if(firstCreatedScript != null) {
  _aspxAppendScript(firstCreatedScript);
  _aspxCacheIncludeScript(firstCreatedScript);
 }
 __aspxCallbackOwnerNames.push(ownerName);
 if(__aspxCreatedIncludeScripts.length == 0)
  _aspxFinalizeScriptProcessing(isCallback);
}
function _aspxFinalizeScriptProcessing(isCallback) {
 __aspxCreatedIncludeScripts = [];
 __aspxAppendedScriptsCount = 0;
 _aspxSweepDuplicatedScripts();
 _aspxRunStartupScripts(isCallback);
 ASPxResourceManager.SynchronizeResources();
}
var __aspxStartupScriptsRunning = false;
function _aspxRunStartupScripts(isCallback) {
 __aspxStartupScriptsRunning = true;
 try {
  _aspxRunStartupScriptsCore();
 }
 finally {
  __aspxStartupScriptsRunning = false;
 }
 if(__aspxDocumentLoaded) {
  aspxGetControlCollection().InitializeElements(isCallback);
  for(var key in __aspxScriptsRestartHandlers)
   __aspxScriptsRestartHandlers[key]();
  _aspxRunEndCallbackScript();
 }
}
function _aspxRunStartupScriptsCore() {
 var scripts = _aspxGetStartupScripts();
 var code;
 for(var i = 0; i < scripts.length; i++){
  if(!scripts[i].executed) {
   code = _aspxGetScriptCode(scripts[i]);
   eval(code);
   scripts[i].executed = true;
  }
 }
}
function _aspxRunEndCallbackScript() {
 while(__aspxCallbackOwnerNames.length > 0) {
  var callbackOwnerName = __aspxCallbackOwnerNames.pop();
  var callbackOwner = aspxGetControlCollection().Get(callbackOwnerName);
  if(callbackOwner)
   callbackOwner.DoEndCallback();
 }
}
function _aspxOnScriptReadyStateChangedCallback(scriptElement, isCallback) {
 if(scriptElement.readyState == "loaded") {
  _aspxCacheIncludeScript(scriptElement);
  for(var i = 0; i < __aspxCreatedIncludeScripts.length; i++) {
   var script = __aspxCreatedIncludeScripts[i];
   if(_aspxIsKnownIncludeScript(script)) {
    if(!script.executed) {
     script.executed = true;
     _aspxAppendScript(script);
     __aspxAppendedScriptsCount++;
    }
   } else
    break;
  }
  if(__aspxCreatedIncludeScripts.length == __aspxAppendedScriptsCount)
   _aspxFinalizeScriptProcessing(isCallback);
 }
}
function _aspxOnScriptLoadCallback(scriptElement, isCallback) {
 __aspxAppendedScriptsCount++;
 if(scriptElement.nextCreatedScript) {
  _aspxAppendScript(scriptElement.nextCreatedScript);
  _aspxCacheIncludeScript(scriptElement.nextCreatedScript);
 }
 if(__aspxCreatedIncludeScripts.length == __aspxAppendedScriptsCount)
  _aspxFinalizeScriptProcessing(isCallback);
}
function _aspxAddScriptsRestartHandler(objectName, handler) {
 __aspxScriptsRestartHandlers[objectName] = handler;
}
function _aspxMoveLinkElements() {
 var head = _aspxGetElementsByTagName(document, "head")[0];
 var bodyLinks = _aspxGetElementsByTagName(document.body, "link");
 if(head && bodyLinks.length > 0){
  var headLinks = _aspxGetElementsByTagName(head, "link");
  var dxLinkAnchor = head.firstChild;
  for(var i = 0; i < headLinks.length; i++){
   if(headLinks[i].href.indexOf(ASPxResourceManager.HandlerStr) > -1)
    dxLinkAnchor = headLinks[i].nextSibling;
  }
  while(bodyLinks.length > 0) 
   head.insertBefore(bodyLinks[0], dxLinkAnchor);
 }
}
ASPxIFrame = _aspxCreateClass(null, {
 constructor: function(params) {
  this.params = params || {};
  this.params.src = this.params.src || "";
  this.CreateElements();
 },
 CreateElements: function() {
  var elements = ASPxIFrame.Create(this.params);
  this.containerElement = elements.container;
  this.iframeElement = elements.iframe;
  this.AttachOnLoadHandler(this, this.iframeElement);
  this.SetLoading(true);
  if(this.params.onCreate)
   this.params.onCreate(this.containerElement, this.iframeElement);
 },
 AttachOnLoadHandler: function(instance, element) {
  _aspxAttachEventToElement(element, "load", function() {
   instance.OnLoad(element);
  });
 },
 OnLoad: function(element) {
  this.SetLoading(false, element);
  if(!element.preventCustomOnLoad && this.params.onLoad)
   this.params.onLoad();
 },
 IsLoading: function(element) {
  element = element || this.iframeElement;
  if(element)
   return element.loading;
  return false;
 },
 SetLoading: function(value, element) {
  element = element || this.iframeElement;
  if(element)
   element.loading = value;
 },
 GetContentUrl: function() {
  return this.params.src;
 },
 SetContentUrl: function(url, preventBrowserCaching) {
  if(url) {
   this.params.src = url;
   if(preventBrowserCaching)
    url = ASPxIFrame.AddRandomParamToUrl(url);
   this.SetLoading(true);
   this.iframeElement.src = url;
  }
 },
 RefreshContentUrl: function() {
  if(this.IsLoading())
   return;
  this.SetLoading(true);
  var oldContainerElement = this.containerElement;
  var oldIframeElement = this.iframeElement;
  var postfix = "_del" + Math.floor(Math.random()*100000).toString();
  if(this.params.id)
   oldIframeElement.id = this.params.id + postfix;
  if(this.params.name)
   oldIframeElement.name = this.params.name + postfix;
  _aspxSetStyles(oldContainerElement, { height: 0 });
  this.CreateElements();
  oldIframeElement.preventCustomOnLoad = true;
  oldIframeElement.src = ASPx.BlankUrl;
  window.setTimeout(function() {
   oldContainerElement.parentNode.removeChild(oldContainerElement);
  }, 10000); 
 }
});
ASPxIFrame.Create = function(params) {
 var iframeHtmlStringParts = [ "<iframe frameborder='0'" ];
 if(params) {
  if(params.id)
   iframeHtmlStringParts.push(" id='", params.id, "'");
  if(params.name)
   iframeHtmlStringParts.push(" name='", params.name, "'");
  if(params.title)
   iframeHtmlStringParts.push(" title='", params.title, "'");
  if(params.scrolling)
   iframeHtmlStringParts.push(" scrolling='", params.scrolling, "'");
  if(params.src)
   iframeHtmlStringParts.push(" src='", params.src, "'");
 }
 iframeHtmlStringParts.push("></iframe>");
 var containerElement = _aspxCreateHtmlElementFromString("<div style='border-width: 0px; padding: 0px; margin: 0px'></div>");
 var iframeElement = _aspxCreateHtmlElementFromString(iframeHtmlStringParts.join(""));
 containerElement.appendChild(iframeElement);
 return {
  container: containerElement,
  iframe: iframeElement
 };
};
ASPxIFrame.AddRandomParamToUrl = function(url) {
 var prefix = url.indexOf("?") > -1
  ? "&"
  : "?";
 var param = prefix + Math.floor(Math.random()*100000).toString();
 var anchorIndex = url.indexOf("#");
 return anchorIndex == -1
  ? url + param
  : url.substr(0, anchorIndex) + param + url.substr(anchorIndex);
};
ASPxIFrame.GetWindow = function(name) {
 if(__aspxIE)
  return window.frames[name].window;
 else{
  var frameElement = document.getElementById(name);
  return (frameElement != null) ? frameElement.contentWindow : null;
 }
};
ASPxIFrame.GetDocument = function(name) {
 var frameElement;
 if(__aspxIE) {
  frameElement = window.frames[name];
  return (frameElement != null) ? frameElement.document : null;
 }
 else {
  frameElement = document.getElementById(name);
  return (frameElement != null) ? frameElement.contentDocument : null;
 }
};
ASPxIFrame.GetDocumentBody = function(name) {
 var doc = ASPxIFrame.GetDocument(name);
 return (doc != null) ? doc.body : null;
};
ASPxIFrame.GetElement = function(name) {
 if(__aspxIE)
  return window.frames[name].window.frameElement;
 else
  return document.getElementById(name);
};
ASPxKbdHelper = _aspxCreateClass(null, {
 constructor: function(control) {
  this.control = control;
 },
 Init: function() {
  ASPxKbdHelper.GlobalInit();
  var element = this.GetFocusableElement();
  element.tabIndex = Math.max(element.tabIndex, 0);
  var instance = this;
  _aspxAttachEventToElement(element, "click", function(e) {
   instance.HandleClick(e);
  });  
  _aspxAttachEventToElement(element, "focus", function(e) {    
   if(!instance.CanFocus(e))
    return true;
   ASPxKbdHelper.active = instance;
  });
  _aspxAttachEventToElement(element, "blur", function() {
   delete ASPxKbdHelper.active;
  });    
 },
 GetFocusableElement: function() { return this.control.GetMainElement(); },
 CanFocus: function(e) {
  var tag = _aspxGetEventSource(e).tagName;
  if(tag == "A" || tag == "TEXTAREA" || tag == "INPUT" || tag == "SELECT" || tag == "IFRAME" || tag == "OBJECT")
   return false; 
  return true;
 },
 HandleClick: function(e) {
  if(!this.CanFocus(e))
   return;
  this.Focus();
 },
 Focus: function() {
  try {
   this.GetFocusableElement().focus();   
  } catch(e) {
  }
 },
 HandleKeyDown: function(e) { }, 
 HandleKeyPress: function(e) { }, 
 HandleKeyUp: function(e) { }
});
ASPxKbdHelper.GlobalInit = function() {
 if(ASPxKbdHelper.ready)
  return;
 _aspxAttachEventToDocument("keydown", ASPxKbdHelper.OnKeyDown);
 _aspxAttachEventToDocument("keypress", ASPxKbdHelper.OnKeyPress);
 _aspxAttachEventToDocument("keyup", ASPxKbdHelper.OnKeyUp);
 ASPxKbdHelper.ready = true; 
};
ASPxKbdHelper.swallowKey = false;
ASPxKbdHelper.accessKeys = { };
ASPxKbdHelper.ProcessKey = function(e, actionName) {
 if(!ASPxKbdHelper.active) 
  return;
 if(ASPxKbdHelper.active.GetFocusableElement() !== _aspxGetFocusedElement())
  return;
 var ctl = ASPxKbdHelper.active.control;
 if(ctl !== aspxGetControlCollection().Get(ctl.name)) {
  delete ASPxKbdHelper.active;
  return;
 }
 if(!ASPxKbdHelper.swallowKey) 
  ASPxKbdHelper.swallowKey = ASPxKbdHelper.active[actionName](e);
 if(ASPxKbdHelper.swallowKey)
  _aspxPreventEvent(e);
};
ASPxKbdHelper.OnKeyDown = function(e) {
 ASPxKbdHelper.swallowKey = false; 
 if(e.ctrlKey && e.shiftKey && ASPxKbdHelper.TryAccessKey(_aspxGetKeyCode(e)))
  _aspxPreventEvent(e);  
 else 
  ASPxKbdHelper.ProcessKey(e, "HandleKeyDown"); 
};
ASPxKbdHelper.OnKeyPress = function(e) { ASPxKbdHelper.ProcessKey(e, "HandleKeyPress"); };
ASPxKbdHelper.OnKeyUp = function(e) { ASPxKbdHelper.ProcessKey(e, "HandleKeyUp"); };
ASPxKbdHelper.RegisterAccessKey = function(obj) {
 var key = obj.accessKey;
 if(!key) return;
 ASPxKbdHelper.accessKeys[key.toLowerCase()] = obj.name;
};
ASPxKbdHelper.TryAccessKey = function(code) {
 var name = ASPxKbdHelper.accessKeys[String.fromCharCode(code).toLowerCase()];
 if(!name) return false;
 var obj = aspxGetControlCollection().Get(name);
 if(!obj) return false;
 var el = obj.GetMainElement();
 if(!el) return false;
 el.focus();
 return true;
};
var __aspxFocusedElement = null;
function aspxOnElementFocused(evt) {
 evt = _aspxGetEvent(evt);
 if(evt && evt.target)
  __aspxFocusedElement = evt.target;
}
function _aspxInitializeFocus() {
 if(!_aspxGetActiveElement())
  _aspxAttachEventToDocument("focus", aspxOnElementFocused);
}
function _aspxGetFocusedElement() {
 var activeElement = _aspxGetActiveElement();
 return activeElement ? activeElement : __aspxFocusedElement;
}
function _aspxChangeElementContainer(element, container, savePreviousContainer) {
 if(element.parentNode != container) {
  var parentNode = element.parentNode;
  parentNode.removeChild(element);
  container.appendChild(element);
  if(savePreviousContainer)
   element.previousContainer = parentNode;
 }
}
function _aspxRestoreElementContainer(element) {
 if(element.previousContainer) {
  _aspxChangeElementContainer(element, element.previousContainer, false);
  element.previousContainer = null;
 }
}
var ASPxCacheHelper = {};
ASPxCacheHelper.GetCachedValue = function(obj, cacheName, func, cacheObj) {
 if(!cacheObj)
  cacheObj = obj;
 if(!cacheObj.cache)
  cacheObj.cache = {};
 if(!_aspxIsExists(cacheObj.cache[cacheName]))
  cacheObj.cache[cacheName] = func.apply(obj, []);
 return cacheObj.cache[cacheName];
};
ASPxCacheHelper.DropCachedValue = function(cacheObj, cacheName) {
 cacheObj.cache[cacheName] = null;
};  
ASPxClientTemporaryCache = _aspxCreateClass(null, {
 constructor: function() { 
  this.cache = { };
  this.invalidateTimerID = -1;
 },
 Get: function(key, getObjectFunc, context, args) {
  if(this.invalidateTimerID < 0) {
   this.invalidateTimerID = window.setTimeout(function() {
    this.Invalidate();
   }.aspxBind(this), 0);
  }
  if(!_aspxIsExists(this.cache[key])) {
   if(!_aspxIsExists(args))
    args = [ ];
   this.cache[key] = getObjectFunc.apply(context, args);
  }
  return this.cache[key];
 },
 Invalidate: function() {
  this.cache = { };
  this.invalidateTimerID = _aspxClearTimer(this.invalidateTimerID);
 }
});
ASPxClientCheckBoxCheckState = {
 Checked : "Checked",
 Unchecked : "Unchecked",
 Indeterminate : "Indeterminate"
};
ASPxClientCheckBoxInputKey = { 
 Checked : "C",
 Unchecked : "U",
 Indeterminate : "I"
};
ASPxCheckableElementStateController = _aspxCreateClass(null, {
 constructor: function(imageProperties) {
  this.checkBoxStates = [];
  this.imageProperties = imageProperties;
 },
 GetValueByInputKey: function(inputKey) {
  return this.GetFirstValueBySecondValue("Value", "StateInputKey", inputKey);
 },
 GetInputKeyByValue: function(value) {
  return this.GetFirstValueBySecondValue("StateInputKey", "Value", value);
 },
 GetImagePropertiesNumByInputKey: function(value) {
  return this.GetFirstValueBySecondValue("ImagePropertiesNumber", "StateInputKey", value);
 },
 GetNextCheckBoxValue: function(currentValue, allowGrayed) {
  var currentInputKey = this.GetInputKeyByValue(currentValue);
  var nextInputKey = '';
  switch(currentInputKey) {
   case ASPxClientCheckBoxInputKey.Checked:
    nextInputKey = ASPxClientCheckBoxInputKey.Unchecked; break;
   case ASPxClientCheckBoxInputKey.Unchecked:
    nextInputKey = allowGrayed ? ASPxClientCheckBoxInputKey.Indeterminate : ASPxClientCheckBoxInputKey.Checked; break;
   case ASPxClientCheckBoxInputKey.Indeterminate:
    nextInputKey = ASPxClientCheckBoxInputKey.Checked; break;
  }
  return this.GetValueByInputKey(nextInputKey);
 },
 GetCheckStateByInputKey: function(inputKey) {
  switch(inputKey) {
   case ASPxClientCheckBoxInputKey.Checked: 
    return ASPxClientCheckBoxCheckState.Checked;
   case ASPxClientCheckBoxInputKey.Unchecked: 
    return ASPxClientCheckBoxCheckState.Unchecked;
   case ASPxClientCheckBoxInputKey.Indeterminate: 
    return ASPxClientCheckBoxCheckState.Indeterminate;
  }
 },
 GetValueByCheckState: function(checkState) {
  switch(checkState) {
   case ASPxClientCheckBoxCheckState.Checked: 
    return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Checked);
   case ASPxClientCheckBoxCheckState.Unchecked: 
    return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Unchecked);
   case ASPxClientCheckBoxCheckState.Indeterminate: 
    return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Indeterminate);
  }
 },
 GetFirstValueBySecondValue: function(firstValueName, secondValueName, secondValue) {
  return this.GetValueByFunc(firstValueName, 
   function(checkBoxState) { return checkBoxState[secondValueName] === secondValue; });
 },
 GetValueByFunc: function(valueName, func) {
  for(var i = 0; i < this.checkBoxStates.length; i++) {
   if(func(this.checkBoxStates[i]))
    return this.checkBoxStates[i][valueName];
  }  
 },
 AssignElementClassName: function(element, cssClassPropertyKey, disabledCssClassPropertyKey, assignedClassName) {
  var classNames = [ ];
  for(var i = 0; i < this.imageProperties[cssClassPropertyKey].length; i++) {
   classNames.push(this.imageProperties[disabledCssClassPropertyKey][i]);
   classNames.push(this.imageProperties[cssClassPropertyKey][i]);
  }
  var elementClassName = element.className;
  for(var i = 0; i < classNames.length; i++) {
   var className = classNames[i];
   var index = elementClassName.indexOf(className);
   if(index > -1)
    elementClassName = elementClassName.replace((index == 0 ? '' : ' ') + className, "");
  }
  elementClassName += " " + assignedClassName;
  element.className = elementClassName;
 },
 UpdateInternalCheckBoxDecoration: function(mainElement, inputKey, enabled) {
  var imagePropertiesNumber = this.GetImagePropertiesNumByInputKey(inputKey);
  for (var imagePropertyKey in this.imageProperties) {
   var propertyValue = this.imageProperties[imagePropertyKey][imagePropertiesNumber];
   propertyValue = propertyValue || !isNaN(propertyValue) ? propertyValue : "";
   switch(imagePropertyKey) {
    case "0" : mainElement.title = propertyValue; break;
    case "1" : mainElement.style.width = propertyValue + (propertyValue != "" ? "px" : ""); break;
    case "2" : mainElement.style.height = propertyValue + (propertyValue != "" ? "px" : ""); break;
   }
   if(enabled) {
    switch(imagePropertyKey) {
     case "3" : this.SetImageSrc(mainElement, propertyValue); break;
     case "4" : 
      this.AssignElementClassName(mainElement, "4", "8", propertyValue);
      break;
     case "5" : this.SetBackgroundPosition(mainElement, propertyValue, true); break;
     case "6" : this.SetBackgroundPosition(mainElement, propertyValue, false); break;
    }
   } else {
     switch(imagePropertyKey) {
     case "7" : this.SetImageSrc(mainElement, propertyValue); break;
     case "8" : 
      this.AssignElementClassName(mainElement, "4", "8", propertyValue);
      break;
     case "9" : this.SetBackgroundPosition(mainElement, propertyValue, true); break;
     case "10" : this.SetBackgroundPosition(mainElement, propertyValue, false); break;
    }
   }
  }
 },
 SetImageSrc: function(mainElement, src) {
  if(src === ""){
   mainElement.style.backgroundImage = "";
   mainElement.style.backgroundPosition = "";
  }
  else{
   mainElement.style.backgroundImage = "url(" + src + ")";
   this.SetBackgroundPosition(mainElement, 0, true);
   this.SetBackgroundPosition(mainElement, 0, false);
  }
 },
 SetBackgroundPosition: function(element, value, isX) {
  if(value === "") {
   element.style.backgroundPosition = value;
   return;
  }
  if(element.style.backgroundPosition === "")
   element.style.backgroundPosition = isX ? "-" + value.toString() + "px 0px" : "0px -" + value.toString() + "px";
  else {
   var position = element.style.backgroundPosition.split(' ');
   element.style.backgroundPosition = isX ? '-' + value.toString() + "px " + position[1] :  position[0] + " -" + value.toString() + "px";
  }
 },
 AddState: function(value, stateInputKey, imagePropertiesNumber) {
  this.checkBoxStates.push({
   "Value" : value, 
   "StateInputKey" : stateInputKey, 
   "ImagePropertiesNumber" : imagePropertiesNumber
  });
 }
});
ASPxCheckableElementStateController.Create = function(imageProperties, valueChecked, valueUnchecked, valueGrayed, allowGrayed) {
 var stateController = new ASPxCheckableElementStateController(imageProperties);
 stateController.AddState(valueChecked, ASPxClientCheckBoxInputKey.Checked, 0);
 stateController.AddState(valueUnchecked, ASPxClientCheckBoxInputKey.Unchecked, 1);
 if(typeof(valueGrayed) != "undefined")
  stateController.AddState(valueGrayed, ASPxClientCheckBoxInputKey.Indeterminate, allowGrayed ? 2 : 1);
 stateController.allowGrayed = allowGrayed;
 return stateController;
};
ASPxCheckableElementHelper = _aspxCreateClass(null, {
 InternalCheckBoxInitialize: function(internalCheckBox) {
  this.AttachToMainElement(internalCheckBox);
  this.AttachToInputElement(internalCheckBox);
 },
 AttachToMainElement: function(internalCheckBox) {
  var instance = this;
  if(internalCheckBox.mainElement) {
    _aspxAttachEventToElement(internalCheckBox.mainElement, "click",
    function (evt) { 
     instance.InvokeClick(internalCheckBox, evt);
     if(!internalCheckBox.disableCancelBubble)
      return _aspxPreventEventAndBubble(evt);
    }
   );
   _aspxAttachEventToElement(internalCheckBox.mainElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
   _aspxPreventElementDragAndSelect(internalCheckBox.mainElement, true);
  }
 },
 AttachToInputElement: function(internalCheckBox) {
  var instance = this;
  if(internalCheckBox.inputElement && internalCheckBox.mainElement) {
   _aspxAttachEventToElement(internalCheckBox.inputElement, "focus",
    function (evt) { 
     if(!internalCheckBox.enabled)
      internalCheckBox.inputElement.blur();
     else
      internalCheckBox.OnFocus();
    }
   );
   _aspxAttachEventToElement(internalCheckBox.inputElement, "blur", 
    function (evt) { 
     internalCheckBox.OnLostFocus();
    }
   );
   _aspxAttachEventToElement(internalCheckBox.inputElement, "keyup",
    function (evt) { 
     if(_aspxGetKeyCode(evt) == ASPxKey.Space)
      instance.InvokeClick(internalCheckBox, evt);
    }
   );
   _aspxAttachEventToElement(internalCheckBox.inputElement, "keydown",
    function (evt) { 
     if(_aspxGetKeyCode(evt) == ASPxKey.Space)
      return _aspxPreventEvent(evt);
    }
   );
  }
 },
 IsKBSInputWrapperExist: function() {
  return __aspxOpera || __aspxWebKitFamily;
 },
 GetICBMainElementByInput: function(icbInputElement) {
  return this.IsKBSInputWrapperExist() ? icbInputElement.parentNode.parentNode : icbInputElement.parentNode;
 },
 InvokeClick: function(internalCheckBox, evt) {
   if(internalCheckBox.enabled && !internalCheckBox.readOnly) {
   var inputElementValue = internalCheckBox.inputElement.value;
   internalCheckBox.inputElement.focus();
   if(!__aspxIE) 
    internalCheckBox.inputElement.value = inputElementValue;
   this.InvokeClickCore(internalCheckBox, evt)
   }
 },
 InvokeClickCore: function(internalCheckBox, evt) {
  internalCheckBox.OnClick(evt);
 }
});
ASPxCheckableElementHelper.Instance = new ASPxCheckableElementHelper();
ASPxClientCheckBoxInternal = _aspxCreateClass(null, {
 constructor: function(inputElement, stateController, allowGrayed, allowGrayedByClick, helper, container, storeValueInInput, key, disableCancelBubble) {
  this.inputElement = inputElement;
  this.mainElement = helper.GetICBMainElementByInput(this.inputElement);
  this.name = (key ? key : this.inputElement.id) + ASPxClientCheckBoxInternal.GetICBMainElementPostfix();
  this.mainElement.id = this.name;
  this.stateController = stateController;
  this.container = container;
  this.allowGrayed = allowGrayed;
  this.allowGrayedByClick = allowGrayedByClick;
  this.autoSwitchEnabled = true;
  this.storeValueInInput = !!storeValueInInput;
  this.storedInputKey = !this.storeValueInInput ? this.inputElement.value : null;
  this.disableCancelBubble = !!disableCancelBubble;
  this.focusDecoration = null;
  this.focused = false;
  this.focusLocked = false;
  this.enabled = true;
  this.readOnly = false;
  this.CheckedChanged = new ASPxClientEvent();
  this.Focus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  helper.InternalCheckBoxInitialize(this);
 },
 ChangeInputElementTabIndex: function() {  
  var changeMethod = this.enabled ? _aspxRestoreTabIndexAttribute : _aspxSaveTabIndexAttributeAndReset;
  changeMethod(this.inputElement);
 },
 CreateFocusDecoration: function(focusedStyle) {
   this.focusDecoration = new ASPxClientEditStyleDecoration(this);
   this.focusDecoration.AddStyle('F', focusedStyle[0], focusedStyle[1]);
   this.focusDecoration.AddPostfix("");
 },
 UpdateFocusDecoration: function() {
  this.focusDecoration.Update();
 },  
 StoreInputKey: function(inputKey) {
  if(this.storeValueInInput)
   this.inputElement.value = inputKey;
  else
   this.storedInputKey = inputKey;
 },
 GetStoredInputKey: function() {
  if(this.storeValueInInput)
   return this.inputElement.value;
  else
   return this.storedInputKey;
 },
 OnClick: function(e) {
  if(this.autoSwitchEnabled) {
   var currentValue = this.GetValue();
   var value = this.stateController.GetNextCheckBoxValue(currentValue, this.allowGrayedByClick && this.allowGrayed);
   this.SetValue(value);
  }
  this.CheckedChanged.FireEvent(this, e);
 },
 OnFocus: function() {
  if(!this.IsFocusLocked()) {
   this.focused = true;
   this.UpdateFocusDecoration();
   this.Focus.FireEvent(this, null);
  } else
   this.UnlockFocus();
 },
 OnLostFocus: function() {
   if(!this.IsFocusLocked()) {
   this.focused = false;
   this.UpdateFocusDecoration();
   this.LostFocus.FireEvent(this, null);
  }
 },
 Refocus: function() {
  if(this.focused) {
   this.LockFocus();
   this.inputElement.blur();
   _aspxSetFocus(this.inputElement);
  }
 },
 LockFocus: function() {
  this.focusLocked = true;
 },
 UnlockFocus: function() {
  this.focusLocked = false;
 },
 IsFocusLocked: function() {
  return this.focusLocked;
 },
 SetValue: function(value) {
  var currentValue = this.GetValue();
  if(currentValue !== value) {
   var newInputKey = this.stateController.GetInputKeyByValue(value);
   if(newInputKey) {
    this.StoreInputKey(newInputKey);   
    this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, newInputKey, this.enabled);
   }
  }
 },
 GetValue: function() {
  return this.stateController.GetValueByInputKey(this.GetCurrentInputKey());
 },
 GetCurrentCheckState: function() {
  return this.stateController.GetCheckStateByInputKey(this.GetCurrentInputKey());
 },
 GetCurrentInputKey: function() {
  return this.GetStoredInputKey();
 },
 GetChecked: function() {
  return this.GetCurrentInputKey() === ASPxClientCheckBoxInputKey.Checked;
 },
 SetChecked: function(checked) {
  var newValue = this.stateController.GetValueByCheckState(checked ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
  this.SetValue(newValue);
 },
 SetEnabled: function(enabled) {
  if(this.enabled != enabled) {
   this.enabled = enabled;
   this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, this.GetCurrentInputKey(), this.enabled);
   this.ChangeInputElementTabIndex();
  }
 }
});
ASPxClientCheckBoxInternal.GetICBMainElementPostfix = function() {
 return "_D";
};
ASPxCheckBoxInternalCollection = _aspxCreateClass(null, {
 constructor: function(imageProperties, allowGrayed, storeValueInInput, helper, disableCancelBubble) {
  this.checkBoxes = {};
  this.stateController = allowGrayed 
   ? ASPxCheckableElementStateController.Create(imageProperties, ASPxClientCheckBoxInputKey.Checked, ASPxClientCheckBoxInputKey.Unchecked, ASPxClientCheckBoxInputKey.Indeterminate, true)
   : ASPxCheckableElementStateController.Create(imageProperties, ASPxClientCheckBoxInputKey.Checked, ASPxClientCheckBoxInputKey.Unchecked);
  this.helper = helper || ASPxCheckableElementHelper.Instance;
  this.storeValueInInput = !!storeValueInInput;
  this.disableCancelBubble = !!disableCancelBubble;
 },
 Add: function(key, inputElement, container) {
  this.Remove(key);
  this.checkBoxes[key] = this.CreateInternalCheckBox(key, inputElement, container);
  return this.checkBoxes[key];
 },
 Clear: function(){
  this.checkBoxes = {};
 },
 Remove: function(key) {
  delete this.checkBoxes[key];
 },
 Get: function(id) {
  return this.checkBoxes[id];
 },
 SetImageProperties: function(imageProperties) {
  this.stateController.imageProperties = imageProperties;
 },
 CreateInternalCheckBox: function(key, inputElement, container) {
  return new ASPxClientCheckBoxInternal(inputElement, this.stateController, this.stateController.allowGrayed, false, this.helper, container, this.storeValueInInput, key, this.disableCancelBubble);
 }
});
ASPxClientEditStyleDecoration = _aspxCreateClass(null, {
 constructor: function(editor) {
  this.editor = editor;
  this.postfixList = [ ];
  this.styles = { };
  this.innerStyles = { };
 },
 GetStyleSheet: function() {
  if(!ASPxClientEditStyleDecoration.__sheet)
   ASPxClientEditStyleDecoration.__sheet = _aspxCreateStyleSheet();
  return ASPxClientEditStyleDecoration.__sheet;
 },
 AddPostfix: function(value, applyClass, applyBorders, applyBackground) {
  this.postfixList.push(value);
 },
 AddStyle: function(key, className, cssText) {
  this.styles[key] = this.CreateRule(className, cssText);
  this.innerStyles[key] = this.CreateRule("", this.FilterInnerCss(cssText));
 },
 CreateRule: function(className, cssText) {
  return _aspxTrim(className + " " + _aspxCreateImportantStyleRule(this.GetStyleSheet(), cssText));
 },
 Update: function() {
  for(var i = 0; i < this.postfixList.length; i++) {
   var postfix = this.postfixList[i];
   var inner = postfix.length > 0;
   var element = _aspxGetElementById(this.editor.name + postfix);
   if(!element) continue;
   if(this.HasDecoration("I")) {
    var isValid = this.editor.GetIsValid();
    this.ApplyDecoration("I", element, inner, !isValid);
   }
   if(this.HasDecoration("F"))
    this.ApplyDecoration("F", element, inner, this.editor.focused);
   if(this.HasDecoration("N")) {
    var apply = !this.editor.focused;
    if (apply) {
     if (this.editor.CanApplyNullTextDecoration) {
      apply = this.editor.CanApplyNullTextDecoration();
     } else {
      var value = this.editor.GetValue();
      apply = apply && (value == null || value === "");
     }
    }
    if(apply)
     _aspxChangeAttribute(element, "spellcheck", "false");
    else
     _aspxRestoreAttribute(element, "spellcheck");
    this.ApplyDecoration("N", element, inner, apply);
   }
  }
 },
 HasDecoration: function(key) {
  return !!this.styles[key];
 },
 ApplyDecoration: function(key, element, inner, active) {
  var value = inner ? this.innerStyles[key] : this.styles[key];
  element.className = element.className.replace(value, "");
  if(active) {
   element.className = _aspxTrim(element.className + " " + value);
   if (__aspxIE && __aspxBrowserVersion > 10 && element.border != null) { 
    var border = parseInt(element.border) || 0;
    element.border = 1;
    element.border = border;
   }
  }
 },
 FilterInnerCss: function(css) {
  return css.replace(/(border|background-image)[^:]*:[^;]+/gi, "");
 }
});
var ASPxClientTouchUI = {
 isGesture: false,
 isMouseEventFromScrolling: false,
 isNativeScrollingAllowed: true,
 clickSensetivity: 10,
 documentTouchHandlers: {},
 documentEventAttachingAllowed: true,
 msTouchDraggableClassName: "dxMSTouchDraggable",
 touchMouseDownEventName: __aspxWebKitTouchUI ? "touchstart" : "mousedown",
 touchMouseUpEventName:   __aspxWebKitTouchUI ? "touchend"   : "mouseup",
 touchMouseMoveEventName: __aspxWebKitTouchUI ? "touchmove"  : "mousemove",
 isTouchEvent: function(evt) { 
  return __aspxWebKitTouchUI && _aspxIsExists(evt.changedTouches); 
 },
 isTouchEventName: function(eventName) {
  return __aspxWebKitTouchUI && (eventName.indexOf("touch") > -1 || eventName.indexOf("gesture") > -1);
 },
 getEventX: function(evt) { 
  return evt.changedTouches[0].pageX; 
 },
 getEventY: function (evt) { 
  return evt.changedTouches[0].pageY; 
 },
 getWebkitMajorVersion: function(){
  if(!this.webkitMajorVersion){
   var regExp = new RegExp("applewebkit/(\\d+)", "i");
   var matches = regExp.exec(__aspxUserAgent);
   if(matches && matches.index >= 1)
    this.webkitMajorVersion = matches[1];
  }
  return this.webkitMajorVersion;
 },
 getIsLandscapeOrientation: function(){
  if(__aspxMacOSMobilePlatform || __aspxAndroidMobilePlatform)
   return Math.abs(window.orientation) == 90;
  return _aspxGetDocumentClientWidth() > _aspxGetDocumentClientHeight();
 },
 nativeWebKitScrollingSupported: function(){
  return __aspxMacOSMobilePlatform && (__aspxBrowserVersion >= 5.1 || this.getWebkitMajorVersion() > 533);
 },
 makeScrollableIfRequired: function(element, options) {
  if(__aspxWebKitTouchUI && element) {
   var overflow = _aspxGetCurrentStyle(element).overflow;
   if (element.tagName == "DIV" &&  overflow != "hidden" && overflow != "visible" ){
    return this.MakeScrollable(element);
   }
  }
 },
 preventScrollOnEvent: function(evt){
 },
 handleFastTapIfRequired: function(evt, action, preventCommonClickEvents) {
  if(__aspxWebKitTouchUI && evt.type == 'touchstart' && action) {
   this.FastTapHelper.HandleFastTap(evt, action, preventCommonClickEvents);
   return true;
  }
  return false;
 },
 ensureDocumentSizesCorrect: function (){
  return (document.documentElement.clientWidth - document.documentElement.clientHeight) / (screen.width - screen.height) > 0;
 },
 ensureOrientationChanged: function(onOrientationChangedFunction){
  if(ASPxClientUtils.iOSPlatform || this.ensureDocumentSizesCorrect())
   onOrientationChangedFunction();
  else {
   window.setTimeout(function(){
    this.ensureOrientationChanged(onOrientationChangedFunction);
   }.aspxBind(this), 100);
  }
 },
 onEventAttachingToDocument: function(eventName, func){
  if(__aspxMacOSMobilePlatform && this.isTouchEventName(eventName)) {
   if(!this.documentTouchHandlers[eventName])
    this.documentTouchHandlers[eventName] = [];
   this.documentTouchHandlers[eventName].push(func);
   return this.documentEventAttachingAllowed;
  }
  return true;
 },
 onEventDettachedFromDocument: function(eventName, func){
  if(__aspxMacOSMobilePlatform && this.isTouchEventName(eventName)) {
   var handlers = this.documentTouchHandlers[eventName];
   if(handlers)
    _aspxArrayRemove(handlers, func);
  }
 },
 processDocumentTouchEventHandlers: function(proc) {
  var touchEventNames = ["touchstart", "touchend", "touchmove", "gesturestart", "gestureend"];
  for (var i = 0; i < touchEventNames.length; i++) {
   var eventName = touchEventNames[i];
   var handlers = this.documentTouchHandlers[eventName];
   if(handlers) {
    for (var j = 0; j < handlers.length; j++) {
     proc(eventName,handlers[j]);
    }
   }
  }
 },
 removeDocumentTouchEventHandlers: function() {
  if(__aspxMacOSMobilePlatform) {
   this.documentEventAttachingAllowed = false;
   this.processDocumentTouchEventHandlers(_aspxDetachEventFromDocumentCore);
  }
 },
 restoreDocumentTouchEventHandlers: function () {
  if(__aspxMacOSMobilePlatform) {
   this.documentEventAttachingAllowed = true;
   this.processDocumentTouchEventHandlers(_aspxAttachEventToDocumentCore);
  }
 },
 IsNativeScrolling: function() {
  return ASPxClientTouchUI.nativeWebKitScrollingSupported() && ASPxClientTouchUI.isNativeScrollingAllowed;
 },
 msTouchCreateGerturesWrapper: function(element, onTap){
  if(!window.navigator.msPointerEnabled || typeof(MSGesture) == "undefined") 
   return;
  var gesture = new MSGesture();
  gesture.target = element;
  _aspxAttachEventToElement(element, "MSPointerDown", function(evt){
   gesture.addPointer(evt.pointerId);
  });
  _aspxAttachEventToElement(element, "MSPointerUp", function(evt){
   gesture.stop();
  });
  if(onTap)
   _aspxAttachEventToElement(element, "MSGestureTap", onTap);
  return gesture;
 }
};
var ASPxClientAdaptiveCore = {
 adaptiveMode: false,
 isAdaptiveView: function(){ return false; }
};
(function() {
 ASPxDomObserver = _aspxCreateClass(null, {
  constructor: function() {
   this.items = { };
  },
  subscribe: function(elementID, callbackFunc) {
   var item = this.items[elementID];
   if(item)
    this.unsubscribe(elementID);
   item = {
    elementID: elementID,
    callbackFunc: callbackFunc,
    pauseCount: 0
   };
   this.prepareItem(item);
   this.items[elementID] = item;
  },
  prepareItem: function(item) {
  },
  unsubscribe: function(elementID) {
   this.items[elementID] = null;
  },
  getItemElement: function(item) {
   var element = this.getElementById(item.elementID);
   if(element)
    return element;
   this.unsubscribe(item.elementID);
   return null;
  },
  getElementById: function(elementID) {
   var element = document.getElementById(elementID);
   return element && _aspxIsValidElement(element) ? element : null;
  },
  pause: function(element, includeSubtree) {
   this.changeItemsState(element, includeSubtree, true);
  },
  resume: function(element, includeSubtree) {
   this.changeItemsState(element, includeSubtree, false);
  },
  forEachItem: function(processFunc, context) {
   context = context || this;
   for(var itemName in this.items) {
    if(!this.items.hasOwnProperty(itemName))
     continue;
    var item = this.items[itemName];
    if(item) {
     var needBreak = processFunc.call(context, item);
     if(needBreak)
      return;
    }
   }
  },
  changeItemsState: function(element, includeSubtree, pause) {
   this.forEachItem(function(item) {
    if(!element)
     this.changeItemState(item, pause);
    else {
     var itemElement = this.getItemElement(item);
     if(itemElement && (element == itemElement || (includeSubtree && _aspxGetIsParent(element, itemElement)))) {
      this.changeItemState(item, pause);
      if(!includeSubtree)
       return true;
     }
    }
   }.aspxBind(this));
  },
  changeItemState: function(item, pause) {
   if(pause)
    this.pauseItem(item)
   else
    this.resumeItem(item);
  },
  pauseItem: function(item) {
   item.paused = true;
   item.pauseCount++;
  },
  resumeItem: function(item) {
   if(item.pauseCount > 0) {
    if(item.pauseCount == 1)
     item.paused = false;
    item.pauseCount--;
   }
  }
 });
 ASPxDomObserver.IsMutationObserverAvailable = function() {
  return !!window.MutationObserver;
 };
 ASPxTimerObserver = _aspxCreateClass(ASPxDomObserver, {
  constructor: function() {
   this.constructor.prototype.constructor.call(this);
   this.timerID = -1;
   this.observationTimeout = 300;
   this.startObserving();
  },
  startObserving: function() {
   if(this.timerID !== -1)
    window.clearTimeout(this.timerID);
   this.timerID = window.setTimeout(this.onTimeout, this.observationTimeout);
  },
  onTimeout: function() {
   var observer = _aspxGetDomObserver();
   observer.doObserve();
   observer.startObserving();
  },
  doObserve: function() {
   if(!__aspxDocumentLoaded) return;
   this.forEachItem(function(item) {
    if(!item.paused)
     this.doObserveForItem(item);
   }.aspxBind(this));
  },
  doObserveForItem: function(item) {
   var element = this.getItemElement(item);
   if(element)
    item.callbackFunc.call(this, element);
  }
 });
 ASPxMutationObserver = _aspxCreateClass(ASPxDomObserver, {
  constructor: function() {
   this.constructor.prototype.constructor.call(this);
   this.callbackTimeout = 10;
  },
  prepareItem: function(item) {
   item.callbackTimerID = -1;
   var target = this.getElementById(item.elementID);
   if(!target)
    return;
   var observerCallbackFunc = function() {
    if(item.callbackTimerID === -1) {
     var timeoutHander = function() {
      item.callbackTimerID = -1;
      item.callbackFunc.call(this, target);
     }.aspxBind(this);
     item.callbackTimerID = window.setTimeout(timeoutHander, this.callbackTimeout);
    }
   }.aspxBind(this);
   var observer = new MutationObserver(observerCallbackFunc);
   var config = { attributes: true, childList: true, characterData: true, subtree: true };
   observer.observe(target, config);
   item.observer = observer;
   item.config = config;
  },
  unsubscribe: function(elementID) {
   var item = this.items[elementID];
   if(item) {
    item.observer.disconnect();
    item.observer = null;
   }
   this.constructor.prototype.unsubscribe.call(this, elementID);
  },
  pauseItem: function(item) {
   this.constructor.prototype.pauseItem.call(this, item);
   item.observer.disconnect();
  },
  resumeItem: function(item) {
   this.constructor.prototype.resumeItem.call(this, item);
   if(!item.paused) {
    var target = this.getItemElement(item);
    if(target)
     item.observer.observe(target, item.config);
   }
  }
 });
 var __aspxDomObserver = null;
 function _aspxGetDomObserver() {
  if(__aspxDomObserver == null)
   __aspxDomObserver = ASPxDomObserver.IsMutationObserverAvailable() ? new ASPxMutationObserver() : new ASPxTimerObserver();
  return __aspxDomObserver;
 };
 window._aspxGetDomObserver = _aspxGetDomObserver;
})();
__aspxClassesScriptParsed = true;

var __aspxStateItemsExist = false;
var __aspxFocusedItemKind = "FocusedStateItem";
var __aspxHoverItemKind = "HoverStateItem";
var __aspxPressedItemKind = "PressedStateItem";
var __aspxSelectedItemKind = "SelectedStateItem";
var __aspxDisabledItemKind = "DisabledStateItem";
var __aspxCachedStatePrefix = "cached";
ASPxStateItem = _aspxCreateClass(null, {
 constructor: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink){
  this.name = name;
  this.classNames = classNames;
  this.customClassNames = [];
  this.resultClassNames = [];
  this.cssTexts = cssTexts;
  this.postfixes = postfixes;
  this.imageObjs = imageObjs;
  this.imagePostfixes = imagePostfixes;
  this.kind = kind;
  this.classNamePostfix = kind.substr(0, 1).toLowerCase();
  this.enabled = true;
  this.needRefreshBetweenElements = false;
  this.elements = null;
  this.images = null;
  this.linkColor = null;
  this.lintTextDecoration = null;
  this.disableApplyingStyleToLink = !!disableApplyingStyleToLink;
 },
 GetCssText: function(index){
  if(_aspxIsExists(this.cssTexts[index]))
   return this.cssTexts[index];
  return this.cssTexts[0];
 },
 CreateStyleRule: function(index){
  if(this.GetCssText(index) == "") return "";
  var styleSheet = _aspxGetCurrentStyleSheet();
  if(styleSheet)
   return _aspxCreateImportantStyleRule(styleSheet, this.GetCssText(index), this.classNamePostfix);  
  return ""; 
 },
 GetClassName: function(index){
  if(_aspxIsExists(this.classNames[index]))
   return this.classNames[index];
  return this.classNames[0];
 },
 GetResultClassName: function(index){
  if(!_aspxIsExists(this.resultClassNames[index])) {
   if(!_aspxIsExists(this.customClassNames[index]))
    this.customClassNames[index] = this.CreateStyleRule(index);
   if(this.GetClassName(index) != "" && this.customClassNames[index] != "")
    this.resultClassNames[index] = this.GetClassName(index) + " " + this.customClassNames[index];
   else if(this.GetClassName(index) != "")
    this.resultClassNames[index] = this.GetClassName(index);
   else if(this.customClassNames[index] != "")
    this.resultClassNames[index] = this.customClassNames[index];
   else
    this.resultClassNames[index] = "";
  }
  return this.resultClassNames[index];
 },
 GetElements: function(element){
  if(!this.elements || !_aspxIsValidElements(this.elements)){
   if(this.postfixes && this.postfixes.length > 0){
    this.elements = [ ];
    var parentNode = element.parentNode;
    if(parentNode){
     for(var i = 0; i < this.postfixes.length; i++){
      var id = this.name + this.postfixes[i];
      this.elements[i] = _aspxGetChildById(parentNode, id);
      if(!this.elements[i])
       this.elements[i] = _aspxGetElementById(id);
     }
    }
   }
   else
    this.elements = [element];
  }
  return this.elements;
 },
 GetImages: function(element){
  if(!this.images || !_aspxIsValidElements(this.images)){
   this.images = [ ];
   if(this.imagePostfixes && this.imagePostfixes.length > 0){
    var elements = this.GetElements(element);
    for(var i = 0; i < this.imagePostfixes.length; i++){
     var id = this.name + this.imagePostfixes[i];
     for(var j = 0; j < elements.length; j++){
      if(!elements[j]) continue;
      if(elements[j].id == id)
       this.images[i] = elements[j];
      else
       this.images[i] = _aspxGetChildById(elements[j], id);
      if(this.images[i])
       break;
     }
    }
   }
  }
  return this.images;
 },
 Apply: function(element){
  if(!this.enabled) return;
  try{
   this.ApplyStyle(element);
   if(this.imageObjs && this.imageObjs.length > 0)
    this.ApplyImage(element);
   if(__aspxIE && __aspxBrowserMajorVersion >= 11)
    this.ForceRedrawAppearance(element);
  }
  catch(e){
  }
 },
 ApplyStyle: function(element){
  var elements = this.GetElements(element);
  for(var i = 0; i < elements.length; i++){
   if(!elements[i]) continue;
   var className = elements[i].className.replace(this.GetResultClassName(i), "");
   elements[i].className = _aspxTrim(className) + " " + this.GetResultClassName(i);
   if(!__aspxOpera || __aspxBrowserVersion >= 9)
    this.ApplyStyleToLinks(elements, i);
  }
 },
 ApplyStyleToLinks: function(elements, index){
  if(this.disableApplyingStyleToLink)
   return;
  var linkCount = 0;
  var savedLinkCount = -1;
  if(_aspxIsExists(elements[index]["savedLinkCount"]))
   savedLinkCount = parseInt(elements[index]["savedLinkCount"]);
  do{
   if(savedLinkCount > -1 && savedLinkCount <= linkCount)
    break;
   var link = elements[index]["link" + linkCount];
   if(!link){
    link = _aspxGetChildByTagName(elements[index], "A", linkCount);
    if(link)
     elements[index]["link" + linkCount] = link;
   }
   if(link)
    this.ApplyStyleToLinkElement(link, index);
   else
    elements[index]["savedLinkCount"] = linkCount;
   linkCount++;
  }
  while(link != null)
 },
 ApplyStyleToLinkElement: function(link, index){
  if(this.GetLinkColor(index) != "")
   _aspxChangeAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color", this.GetLinkColor(index));
  if(this.GetLinkTextDecoration(index) != "")
   _aspxChangeAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration", this.GetLinkTextDecoration(index));
 },
 ApplyImage: function(element){
  var images = this.GetImages(element);
  for(var i = 0; i < images.length; i++){
   if(!images[i] || !this.imageObjs[i]) continue;
   var useSpriteImage = typeof(this.imageObjs[i]) != "string";
   var newUrl = "", newCssClass = "", newBackground = "";
   if(useSpriteImage){
    newUrl = ASPx.EmptyImageUrl;           
    if(this.imageObjs[i].spriteCssClass) 
     newCssClass = this.imageObjs[i].spriteCssClass;
    if(this.imageObjs[i].spriteBackground)
     newBackground = this.imageObjs[i].spriteBackground;
   }
   else{
    newUrl = this.imageObjs[i];
    if(_aspxIsExistsAttribute(images[i].style, "background"))   
     newBackground = " ";
   }
   if(newUrl != "")
    _aspxChangeAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src", newUrl);
   if(newCssClass != "")
    this.ApplyImageClassName(images[i], newCssClass);
   if(newBackground != ""){
    if(__aspxWebKitFamily) {
     var savedBackground = _aspxGetAttribute(images[i].style, "background");
     if(!useSpriteImage)
      savedBackground += " " + images[i].style["backgroundPosition"];
     _aspxSetAttribute(images[i], "saved" + this.kind + "Background", savedBackground);
     _aspxSetAttribute(images[i].style, "background", newBackground);
    }
    else
     _aspxChangeAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background", newBackground);
   }     
  }
 },
 ApplyImageClassName: function(element, newClassName){
  var className = element.className.replace(newClassName, "");
  _aspxSetAttribute(element, "saved" + this.kind + "ClassName", className);
  element.className = className + " " + newClassName;
 },
 Cancel: function(element){
  if(!this.enabled) return;
  try{  
   if(this.imageObjs && this.imageObjs.length > 0)
    this.CancelImage(element);
   this.CancelStyle(element);
  }
  catch(e){
  }
 },
 CancelStyle: function(element){
  var elements = this.GetElements(element);
  for(var i = 0; i < elements.length; i++){
   if(!elements[i]) continue;
   var className = _aspxTrim(elements[i].className.replace(this.GetResultClassName(i), ""));
   elements[i].className = className;
   if(!__aspxOpera || __aspxBrowserVersion >= 9)
    this.CancelStyleFromLinks(elements, i);
  }
 },
 CancelStyleFromLinks: function(elements, index){
  if(this.disableApplyingStyleToLink)
   return;
  var linkCount = 0;
  var savedLinkCount = -1;
  if(_aspxIsExists(elements[index]["savedLinkCount"]))
   savedLinkCount = parseInt(elements[index]["savedLinkCount"]);
  do{
   if(savedLinkCount > -1 && savedLinkCount <= linkCount)
    break;
   var link = elements[index]["link" + linkCount];
   if(!link){
    link = _aspxGetChildByTagName(elements[index], "A", linkCount);
    if(link)
     elements[index]["link" + linkCount] = link;
   }
   if(link)
    this.CancelStyleFromLinkElement(link, index);
   else
    elements[index]["savedLinkCount"] = linkCount;
   linkCount++;
  }
  while(link != null)
 },
 CancelStyleFromLinkElement: function(link, index){
  if(this.GetLinkColor(index) != "")
   _aspxRestoreAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color");
  if(this.GetLinkTextDecoration(index) != "")
   _aspxRestoreAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration");
 },
 CancelImage: function(element){
  var images = this.GetImages(element);
  for(var i = 0; i < images.length; i++){
   if(!images[i] || !this.imageObjs[i]) continue;
   _aspxRestoreAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src");
   this.CancelImageClassName(images[i]);
   _aspxRestoreAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background");
  }
 },
 CancelImageClassName: function(element){
  var savedClassName = _aspxGetAttribute(element, "saved" + this.kind + "ClassName");
  if(_aspxIsExists(savedClassName)) {
   element.className = savedClassName;
   _aspxRemoveAttribute(element, "saved" + this.kind + "ClassName");
  }
 },
 Clone: function(){
  return new ASPxStateItem(this.name, this.classNames, this.cssTexts, this.postfixes, 
   this.imageObjs, this.imagePostfixes, this.kind, this.disableApplyingStyleToLink);
 },
 IsChildElement: function(element){
  if(element != null){
   var elements = this.GetElements(element);
   for(var i = 0; i < elements.length; i++){
    if(!elements[i]) continue;
    if(_aspxGetIsParent(elements[i], element)) 
     return true;
   }
  }
  return false;
 },
 ForceRedrawAppearance: function(element) {
  _aspxChangeStyleAttribute(element, "width", "0px");
  var dummy = element.offsetWidth;
  _aspxRestoreStyleAttribute(element, "width");
 },
 GetLinkColor: function(index){
  if(!_aspxIsExists(this.linkColor)){
   var rule = _aspxGetStyleSheetRule(this.customClassNames[index]);
   this.linkColor = rule ? rule.style.color : null;
   if(!_aspxIsExists(this.linkColor)){
    var rule = _aspxGetStyleSheetRule(this.GetClassName(index));
    this.linkColor = rule ? rule.style.color : null;
   }
   if(this.linkColor == null) 
    this.linkColor = "";
  }
  return this.linkColor;
 },
 GetLinkTextDecoration: function(index){
  if(!_aspxIsExists(this.linkTextDecoration)){
   var rule = _aspxGetStyleSheetRule(this.customClassNames[index]);
   this.linkTextDecoration = rule ? rule.style.textDecoration : null;
   if(!_aspxIsExists(this.linkTextDecoration)){
    var rule = _aspxGetStyleSheetRule(this.GetClassName(index));
    this.linkTextDecoration = rule ? rule.style.textDecoration : null;
   }
   if(this.linkTextDecoration == null) 
    this.linkTextDecoration = "";
  }
  return this.linkTextDecoration;
 }
});
ASPxClientStateEventArgs = _aspxCreateClass(null, {
 constructor: function(item, element){
  this.item = item;
  this.element = element;
  this.toElement = null;
  this.fromElement = null;
  this.htmlEvent = null;
 }
});
ASPxStateController = _aspxCreateClass(null, {
 constructor: function(){
  this.focusedItems = { };
  this.hoverItems = { };
  this.pressedItems = { };
  this.selectedItems = { };
  this.disabledItems = { };
  this.currentFocusedElement = null;
  this.currentFocusedItemName = null;
  this.currentHoverElement = null;
  this.currentHoverItemName = null;
  this.currentPressedElement = null;
  this.currentPressedItemName = null;
  this.savedCurrentPressedElement = null;
  this.savedCurrentMouseMoveSrcElement = null;
  this.AfterSetFocusedState = new ASPxClientEvent();
  this.AfterClearFocusedState = new ASPxClientEvent();
  this.AfterSetHoverState = new ASPxClientEvent();
  this.AfterClearHoverState = new ASPxClientEvent();
  this.AfterSetPressedState = new ASPxClientEvent();
  this.AfterClearPressedState = new ASPxClientEvent();
  this.AfterDisabled = new ASPxClientEvent();
  this.AfterEnabled = new ASPxClientEvent();
  this.BeforeSetFocusedState = new ASPxClientEvent();
  this.BeforeClearFocusedState = new ASPxClientEvent();
  this.BeforeSetHoverState = new ASPxClientEvent();
  this.BeforeClearHoverState = new ASPxClientEvent();
  this.BeforeSetPressedState = new ASPxClientEvent();
  this.BeforeClearPressedState = new ASPxClientEvent();
  this.BeforeDisabled = new ASPxClientEvent();
  this.BeforeEnabled = new ASPxClientEvent();
  this.FocusedItemKeyDown = new ASPxClientEvent();
 }, 
 AddHoverItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.hoverItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxHoverItemKind, disableApplyingStyleToLink);
  this.AddItem(this.focusedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxFocusedItemKind, disableApplyingStyleToLink);
 },
 AddPressedItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes ,disableApplyingStyleToLink){
  this.AddItem(this.pressedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxPressedItemKind, disableApplyingStyleToLink);
 },
 AddSelectedItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.selectedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxSelectedItemKind, disableApplyingStyleToLink);
 },
 AddDisabledItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.disabledItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxDisabledItemKind, disableApplyingStyleToLink);
 },
 AddItem: function(items, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind , disableApplyingStyleToLink){
  var stateItem = new ASPxStateItem(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink);
  if(postfixes && postfixes.length > 0){
   for(var i = 0; i < postfixes.length; i ++){
    items[name + postfixes[i]] = stateItem;
   }
  }
  else
   items[name] = stateItem;
  __aspxStateItemsExist = true;
 },
 RemoveHoverItem: function(name){
  this.RemoveItem(this.hoverItems, name);
  this.RemoveItem(this.focusedItems, name);
 },
 RemovePressedItem: function(name){
  this.RemoveItem(this.pressedItems, name);
 },
 RemoveSelectedItem: function(name){
  this.RemoveItem(this.selectedItems, name);
 },
 RemoveDisabledItem: function(name){
  this.RemoveItem(this.disabledItems, name);
 },
 RemoveItem: function(items, name){
  delete items[name];
 },
 GetFocusedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.focusedItems, __aspxFocusedItemKind);
 },
 GetHoverElement: function(srcElement){
  return this.GetItemElement(srcElement, this.hoverItems, __aspxHoverItemKind);
 },
 GetPressedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.pressedItems, __aspxPressedItemKind);
 },
 GetSelectedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.selectedItems, __aspxSelectedItemKind);
 },
 GetDisabledElement: function(srcElement){
  return this.GetItemElement(srcElement, this.disabledItems, __aspxDisabledItemKind);
 },
 GetItemElement: function(srcElement, items, kind){
  if(srcElement && srcElement[__aspxCachedStatePrefix + kind]){
   var cachedElement = srcElement[__aspxCachedStatePrefix + kind];
   if(cachedElement != __aspxEmptyCachedValue)
    return cachedElement;
   return null;
  }
  var element = srcElement;
  while(element != null) {
   var item = items[element.id];
   if(item){
    this.CacheItemElement(srcElement, kind, element);
    element[kind] = item;
    return element;
   }
   element = element.parentNode;
  }
  this.CacheItemElement(srcElement, kind, __aspxEmptyCachedValue);
  return null;
 },
 CacheItemElement: function(srcElement, kind, value){
  if(srcElement && !srcElement[__aspxCachedStatePrefix + kind])
   srcElement[__aspxCachedStatePrefix + kind] = value;
 },
 DoSetFocusedState: function(element, fromElement){
  var item = element[__aspxFocusedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.fromElement = fromElement;
   this.BeforeSetFocusedState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetFocusedState.FireEvent(this, args);
  }
 },
 DoClearFocusedState: function(element, toElement){
  var item = element[__aspxFocusedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.toElement = toElement;
   this.BeforeClearFocusedState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearFocusedState.FireEvent(this, args);
  }
 },
 DoSetHoverState: function(element, fromElement){
  var item = element[__aspxHoverItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.fromElement = fromElement;
   this.BeforeSetHoverState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetHoverState.FireEvent(this, args);
  }
 },
 DoClearHoverState: function(element, toElement){
  var item = element[__aspxHoverItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.toElement = toElement;
   this.BeforeClearHoverState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearHoverState.FireEvent(this, args);
  }
 },
 DoSetPressedState: function(element){
  var item = element[__aspxPressedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   this.BeforeSetPressedState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetPressedState.FireEvent(this, args);
  }
 },
 DoClearPressedState: function(element){
  var item = element[__aspxPressedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   this.BeforeClearPressedState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearPressedState.FireEvent(this, args);
  }
 },
 SetCurrentFocusedElement: function(element){
  if(this.currentFocusedElement && !_aspxIsValidElement(this.currentFocusedElement)){
   this.currentFocusedElement = null;
   this.currentFocusedItemName = "";
  }
  if(this.currentFocusedElement != element){
   var oldCurrentFocusedElement = this.currentFocusedElement;
   var item = (element != null) ? element[__aspxFocusedItemKind] : null;
   var itemName = (item != null) ? item.name : "";
   if(this.currentFocusedItemName != itemName){
    if(this.currentHoverItemName != "")
     this.SetCurrentHoverElement(null);
    if(this.currentFocusedElement != null)
     this.DoClearFocusedState(this.currentFocusedElement, element);
    this.currentFocusedElement = element;
    item = (element != null) ? element[__aspxFocusedItemKind] : null;
    this.currentFocusedItemName = (item != null) ? item.name : "";
    if(this.currentFocusedElement != null)
     this.DoSetFocusedState(this.currentFocusedElement, oldCurrentFocusedElement);
   }
  }
 },
 SetCurrentHoverElement: function(element){
  if(this.currentHoverElement && !_aspxIsValidElement(this.currentHoverElement)){
   this.currentHoverElement = null;
   this.currentHoverItemName = "";
  }
  var item = (element != null) ? element[__aspxHoverItemKind] : null;
  if(item && !item.enabled) { 
   element = this.GetItemElement(element.parentNode, this.hoverItems, __aspxHoverItemKind);
   item = (element != null) ? element[__aspxHoverItemKind] : null;
  }
  if(this.currentHoverElement != element){
   var oldCurrentHoverElement = this.currentHoverElement,
    itemName = (item != null) ? item.name : "";
   if(this.currentHoverItemName != itemName || (item != null && item.needRefreshBetweenElements)){
    if(this.currentFocusedItemName != "")
     this.SetCurrentFocusedElement(null);
    if(this.currentHoverElement != null)
     this.DoClearHoverState(this.currentHoverElement, element);
    item = (element != null) ? element[__aspxHoverItemKind] : null;
    if(item == null || item.enabled){
     this.currentHoverElement = element;
     this.currentHoverItemName = (item != null) ? item.name : "";
     if(this.currentHoverElement != null)
      this.DoSetHoverState(this.currentHoverElement, oldCurrentHoverElement);
    }
   }
  }
 },
 SetCurrentPressedElement: function(element){
  if(this.currentPressedElement && !_aspxIsValidElement(this.currentPressedElement)){
   this.currentPressedElement = null;
   this.currentPressedItemName = "";
  }
  if(this.currentPressedElement != element){
   if(this.currentPressedElement != null)
    this.DoClearPressedState(this.currentPressedElement);
   var item = (element != null) ? element[__aspxPressedItemKind] : null;
   if(item == null || item.enabled){
    this.currentPressedElement = element;
    this.currentPressedItemName = (item != null) ? item.name : "";
    if(this.currentPressedElement != null)
     this.DoSetPressedState(this.currentPressedElement);
   }
  }
 },
 SetCurrentFocusedElementBySrcElement: function(srcElement){
  var element = this.GetFocusedElement(srcElement);
  this.SetCurrentFocusedElement(element);
 },
 SetCurrentHoverElementBySrcElement: function(srcElement){
  var element = this.GetHoverElement(srcElement);
  this.SetCurrentHoverElement(element);
 },
 SetCurrentPressedElementBySrcElement: function(srcElement){
  var element = this.GetPressedElement(srcElement);
  this.SetCurrentPressedElement(element);
 },
 SetPressedElement: function (element) {
  this.SetCurrentHoverElement(null);
  this.SetCurrentPressedElementBySrcElement(element);
  this.savedCurrentPressedElement = this.currentPressedElement;
 },
 SelectElement: function (element) {
  var item = element[__aspxSelectedItemKind];
  if(item)
   item.Apply(element);
 }, 
 SelectElementBySrcElement: function(srcElement){
  var element = this.GetSelectedElement(srcElement);
  if(element != null) this.SelectElement(element);
 }, 
 DeselectElement: function(element){
  var item = element[__aspxSelectedItemKind];
  if(item)
   item.Cancel(element);
 }, 
 DeselectElementBySrcElement: function(srcElement){
  var element = this.GetSelectedElement(srcElement);
  if(element != null) this.DeselectElement(element);
 },
 SetElementEnabled: function(element, enable){
  if(enable)
   this.EnableElement(element);
  else
   this.DisableElement(element);
 },
 DisableElement: function(element){
  var element = this.GetDisabledElement(element);
  if(element != null) {
   var item = element[__aspxDisabledItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    this.BeforeDisabled.FireEvent(this, args);
    if(item.name == this.currentPressedItemName)
     this.SetCurrentPressedElement(null);
    if(item.name == this.currentHoverItemName)
     this.SetCurrentHoverElement(null);
    item.Apply(element);
    this.SetMouseStateItemsEnabled(item.name, item.postfixes, false);
    this.AfterDisabled.FireEvent(this, args);
   }
  }
 }, 
 EnableElement: function(element){
  var element = this.GetDisabledElement(element);
  if(element != null) {
   var item = element[__aspxDisabledItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    this.BeforeEnabled.FireEvent(this, args);
    item.Cancel(element);
    this.SetMouseStateItemsEnabled(item.name, item.postfixes, true);
    this.AfterEnabled.FireEvent(this, args);
   }
  }
 }, 
 SetMouseStateItemsEnabled: function(name, postfixes, enabled){   
  if(postfixes && postfixes.length > 0){
   for(var i = 0; i < postfixes.length; i ++){
    this.SetItemsEnabled(this.hoverItems, name + postfixes[i], enabled);
    this.SetItemsEnabled(this.pressedItems, name + postfixes[i], enabled);
    this.SetItemsEnabled(this.focusedItems, name + postfixes[i], enabled);
   }
  }
  else{
   this.SetItemsEnabled(this.hoverItems, name, enabled);
   this.SetItemsEnabled(this.pressedItems, name, enabled);
   this.SetItemsEnabled(this.focusedItems, name, enabled);
  }  
 },
 SetItemsEnabled: function(items, name, enabled){   
  if(items[name])
   items[name].enabled = enabled;
 },
 OnFocusMove: function(evt){
  var element = _aspxGetEventSource(evt);
  aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
 },
 OnMouseMove: function(evt, checkElementChanged){
  var srcElement = _aspxGetEventSource(evt);
  if(checkElementChanged && srcElement == this.savedCurrentMouseMoveSrcElement) return;
  this.savedCurrentMouseMoveSrcElement = srcElement;
  if(__aspxIE && !_aspxGetIsLeftButtonPressed(evt) && this.savedCurrentPressedElement != null)
   this.ClearSavedCurrentPressedElement();
  if(this.savedCurrentPressedElement == null)
   this.SetCurrentHoverElementBySrcElement(srcElement);
  else{
   var element = this.GetPressedElement(srcElement);
   if(element != this.currentPressedElement){
    if(element == this.savedCurrentPressedElement)
     this.SetCurrentPressedElement(this.savedCurrentPressedElement);
    else
     this.SetCurrentPressedElement(null);
   }
  }
 },
 OnMouseDown: function(evt){
  if(!_aspxGetIsLeftButtonPressed(evt)) return;
  var srcElement = _aspxGetEventSource(evt);
  this.OnMouseDownOnElement(srcElement);
 },
 OnMouseDownOnElement: function (element) {
  if (this.GetPressedElement(element) == null) return;
  this.SetPressedElement(element);
 },
 OnMouseUp: function(evt){
  var srcElement = _aspxGetEventSource(evt);
  this.OnMouseUpOnElement(srcElement);
 },
 OnMouseUpOnElement: function(element){
  if(this.savedCurrentPressedElement == null) return;
  this.ClearSavedCurrentPressedElement();
  this.SetCurrentHoverElementBySrcElement(element);
 },
 OnMouseOver: function(evt){
  var element = _aspxGetEventSource(evt);
  if (element && element.tagName == "IFRAME")
   this.OnMouseMove(evt, true);
 },
 OnKeyDown: function(evt){
  var element = this.GetFocusedElement(_aspxGetEventSource(evt));
  if(element != null && element == this.currentFocusedElement) {
   var item = element[__aspxFocusedItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    args.htmlEvent = evt;
    this.FocusedItemKeyDown.FireEvent(this, args);
   }
  }
 },
 OnSelectStart: function(evt){
  if(this.savedCurrentPressedElement) {
   _aspxClearSelection();
   return false;
  }
 },
 ClearSavedCurrentPressedElement: function() {
  this.savedCurrentPressedElement = null;
  this.SetCurrentPressedElement(null);
 },
 ClearCache: function(srcElement, kind) {
  if(srcElement[__aspxCachedStatePrefix + kind])
   srcElement[__aspxCachedStatePrefix + kind] = null;
 },
 ClearElementCache: function(srcElement) {
  this.ClearCache(srcElement, __aspxFocusedItemKind);
  this.ClearCache(srcElement, __aspxHoverItemKind);
  this.ClearCache(srcElement, __aspxPressedItemKind);
  this.ClearCache(srcElement, __aspxSelectedItemKind);
  this.ClearCache(srcElement, __aspxDisabledItemKind);
 }
});
var __aspxStateController = null;
function aspxGetStateController(){
 if(__aspxStateController == null)
  __aspxStateController = new ASPxStateController();
 return __aspxStateController;
}
function aspxAddStateItems(method, namePrefix, classes, disableApplyingStyleToLink){
 for(var i = 0; i < classes.length; i ++){
  for(var j = 0; j < classes[i][2].length; j ++) {
   var name = namePrefix;
   if(classes[i][2][j])
    name += "_" + classes[i][2][j];
   var postfixes = classes[i][3] || null;
   var imageObjs = (classes[i][4] && classes[i][4][j]) || null;
   var imagePostfixes = classes[i][5] || null;
   method.call(aspxGetStateController(), name, classes[i][0], classes[i][1], postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink);
  }
 }
}
function aspxAddHoverItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddHoverItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddPressedItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddPressedItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddSelectedItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddSelectedItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddDisabledItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddDisabledItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxRemoveStateItems(method, namePrefix, classes){
 for(var i = 0; i < classes.length; i ++){
  for(var j = 0; j < classes[i][0].length; j ++) {
   var name = namePrefix;
   if(classes[i][0][j])
    name += "_" + classes[i][0][j];
   method.call(aspxGetStateController(), name);
  }
 }
}
function aspxRemoveHoverItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveHoverItem, namePrefix, classes);
}
function aspxRemovePressedItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemovePressedItem, namePrefix, classes);
}
function aspxRemoveSelectedItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveSelectedItem, namePrefix, classes);
}
function aspxRemoveDisabledItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveDisabledItem, namePrefix, classes);
}
function aspxAddAfterClearFocusedState(handler){
 aspxGetStateController().AfterClearFocusedState.AddHandler(handler);
}
function aspxAddAfterSetFocusedState(handler){
 aspxGetStateController().AfterSetFocusedState.AddHandler(handler);
}
function aspxAddAfterClearHoverState(handler){
 aspxGetStateController().AfterClearHoverState.AddHandler(handler);
}
function aspxAddAfterSetHoverState(handler){
 aspxGetStateController().AfterSetHoverState.AddHandler(handler);
}
function aspxAddAfterClearPressedState(handler){
 aspxGetStateController().AfterClearPressedState.AddHandler(handler);
}
function aspxAddAfterSetPressedState(handler){
 aspxGetStateController().AfterSetPressedState.AddHandler(handler);
}
function aspxAddAfterDisabled(handler){
 aspxGetStateController().AfterDisabled.AddHandler(handler);
}
function aspxAddAfterEnabled(handler){
 aspxGetStateController().AfterEnabled.AddHandler(handler);
}
function aspxAddBeforeClearFocusedState(handler){
 aspxGetStateController().BeforeClearFocusedState.AddHandler(handler);
}
function aspxAddBeforeSetFocusedState(handler){
 aspxGetStateController().BeforeSetFocusedState.AddHandler(handler);
}
function aspxAddBeforeClearHoverState(handler){
 aspxGetStateController().BeforeClearHoverState.AddHandler(handler);
}
function aspxAddBeforeSetHoverState(handler){
 aspxGetStateController().BeforeSetHoverState.AddHandler(handler);
}
function aspxAddBeforeClearPressedState(handler){
 aspxGetStateController().BeforeClearPressedState.AddHandler(handler);
}
function aspxAddBeforeSetPressedState(handler){
 aspxGetStateController().BeforeSetPressedState.AddHandler(handler);
}
function aspxAddBeforeDisabled(handler){
 aspxGetStateController().BeforeDisabled.AddHandler(handler);
}
function aspxAddBeforeEnabled(handler){
 aspxGetStateController().BeforeEnabled.AddHandler(handler);
}
function aspxAddFocusedItemKeyDown(handler){
 aspxGetStateController().FocusedItemKeyDown.AddHandler(handler);
}
function aspxSetHoverState(element){
 aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
}
function aspxClearHoverState(evt){
 aspxGetStateController().SetCurrentHoverElementBySrcElement(null);
}
function aspxUpdateHoverState(evt){
 aspxGetStateController().OnMouseMove(evt, false);
}
function aspxSetFocusedState(element){
 aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
}
function aspxClearFocusedState(evt){
 aspxGetStateController().SetCurrentFocusedElementBySrcElement(null);
}
function aspxUpdateFocusedState(evt){
 aspxGetStateController().OnFocusMove(evt);
}
function aspxAssignAccessabilityEventsToChildrenLinks(container){
 var links = _aspxGetChildrenByPartialClassName(container, __aspxAccessibilityMarkerClass);
 for(var i = 0; i < links.length; i++)
  aspxAssignAccessabilityEventsToLink(links[i]);
}
function aspxAssignAccessabilityEventsToLink(link) {
 if (!_aspxElementCssClassContains(link, __aspxAccessibilityMarkerClass))
  return;
 _aspxAttachEventToElement(link, "focus", function(e) { aspxUpdateFocusedState(e); });
 _aspxAttachEventToElement(link, "blur", function(e) { aspxClearFocusedState(e); });
 if(__aspxIE && __aspxBrowserMajorVersion < 7 && link.href == __aspxAccessibilityEmptyUrl)
  _aspxAttachEventToElement(link, "click", function() { return false; });
}
_aspxAttachEventToDocument("mousemove", aspxClassesDocumentMouseMove);
function aspxClassesDocumentMouseMove(evt) {
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseMove(evt, true);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxClassesDocumentMouseDown);
function aspxClassesDocumentMouseDown(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseDown(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, aspxClassesDocumentMouseUp);
function aspxClassesDocumentMouseUp(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseUp(evt);
}
_aspxAttachEventToDocument("mouseover", aspxClassesDocumentMouseOver);
function aspxClassesDocumentMouseOver(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseOver(evt);
}
_aspxAttachEventToDocument("keydown", aspxClassesDocumentKeyDown);
function aspxClassesDocumentKeyDown(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnKeyDown(evt);
}
_aspxAttachEventToDocument("selectstart", aspxClassesDocumentSelectStart);
function aspxClassesDocumentSelectStart(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  return aspxGetStateController().OnSelectStart(evt); 
}

(function () {
 ASPxClientFormLayoutConsts = {
  ITEM_SYSTEM_CLASS_NAME: "dxflItemSys",
  CAPTION_CELL_SYSTEM_CLASS_NAME: "dxflCaptionCellSys",
  ALIGNED_GROUP_SYSTEM_CLASS_NAME: "dxflAGSys",
  HEADING_LINE_GROUP_BOX_WITH_CAPTION_SYSTEM_CLASS_NAME: "dxflWithCaptionSys",
  HEADING_LINE_GROUP_BOX_SYSTEM_CLASS_NAME: "dxflHeadingLineGroupBoxSys",
  TABBED_GROUP_PAGE_CONTROL_SYSTEM_CLASS_NAME: "dxflPCSys",
  PAGE_CONTROL_ID_PREFIX: "PC_",
  ITEM_PATH_SEPARATOR: "_"
 };
 ASPxClientLayoutItem = _aspxCreateClass(null, {
  constructor: function (formLayout, name, path, parent) {
   this.formLayout = formLayout;
   this.name = name;
   this.path = path;
   this.parent = parent;
   this.visible = true;
   this.clientVisible = true;
   this.isTabbedGroup = false;
   this.needAdjustContentOnShowing = true;
   this.items = [];
  },
  CreateItems: function (itemsProperties) {
   for(var i = 0; i < itemsProperties.length; i++){
    var item = new ASPxClientLayoutItem(this.formLayout, itemsProperties[i][0], itemsProperties[i][1], this);
    if(_aspxIsExists(itemsProperties[i][2]))
     item.visible = itemsProperties[i][2];
    if(_aspxIsExists(itemsProperties[i][3]))
     item.clientVisible = itemsProperties[i][3];
    if(_aspxIsExists(itemsProperties[i][4]))
     item.isTabbedGroup = itemsProperties[i][4];
    if(_aspxIsExists(itemsProperties[i][5]))
     item.CreateItems(itemsProperties[i][5]);
    this.items.push(item);
   }
  },
  GetItemByName: function (name) {
   for(var i = 0; i < this.items.length; i ++)
    if(this.items[i].name == name) return this.items[i];
   for(var i = 0; i < this.items.length; i ++){
    var item = this.items[i].GetItemByName(name);
    if(item != null) return item;
   }
   return null;
  },
  GetItemByPath: function (path) {
   var pathIndexes = path.split(ASPxClientFormLayoutConsts.ITEM_PATH_SEPARATOR);
   var currentIndex = pathIndexes[0];
   pathIndexes.shift();
   if(currentIndex > this.items.length - 1)
    return null;
   if(pathIndexes.length > 0 && this.items[currentIndex].items.length > 0) {
    var newPath = pathIndexes.join(ASPxClientFormLayoutConsts.ITEM_PATH_SEPARATOR);
    var result = this.items[currentIndex].GetItemByPath(newPath);
    if(result != null)
     return result;
   }
   else
    return pathIndexes.length > 0 ? null : this.items[currentIndex];
   return null;
  },
  GetVisible: function () {
   return this.visible && this.clientVisible;
  },
  SetVisible: function (value) {
   if (this.clientVisible != value) {
    this.clientVisible = value;
    this.formLayout.SetItemVisible(this, value, false);
   }
  },
  InitializeNeedAdjustContentOnShowing: function () {
   if(this.visible) {
    this.needAdjustContentOnShowing = !this.IsVisibleOnClient();
    for(var i = 0; i < this.items.length; i++)
     this.items[i].InitializeNeedAdjustContentOnShowing();
   }
  },
  IsVisibleOnClient: function () {
   var currentItem = this;
   while(currentItem != null) {
    if(!currentItem.clientVisible)
     return false;
    currentItem = currentItem.parent;
   }
   return true;
  },
  ResetNeedAdjustContentOnShowing: function () {
   this.needAdjustContentOnShowing = false;
  }
 });
 window.ASPxClientFormLayout = _aspxCreateClass(ASPxClientControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.rootItem = null;
   this.alignItemCaptionsInAllGroups = false;
   this.leftAndRightCaptionsWidth = 0;
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   this.InitializeNeedAdjustItemsContentOnShowing();
   this.UpdateHeadingLineGroupBoxElements();
   if(this.enabled)
    this.addHandlersToActiveTabChangedEvents();
  },
  InitializeNeedAdjustItemsContentOnShowing: function () {
   if(this.rootItem == null) return;
   for(var i = 0; i < this.rootItem.items.length; i++)
    this.rootItem.items[i].InitializeNeedAdjustContentOnShowing();
  },
  CreateItems: function (itemsProperties) {
   this.rootItem = new ASPxClientLayoutItem(this, "", "", null);
   this.rootItem.CreateItems(itemsProperties);
  },
  GetItemByName: function (name) {
   return this.rootItem != null ? this.rootItem.GetItemByName(name) : null;
  },
  GetItemByPath: function (path) {
   return this.rootItem != null ? this.rootItem.GetItemByPath(path) : null;
  },
  GetTargetElementToAlignGroups: function(elementToChangeVisibility, item) {
   if (this.alignItemCaptionsInAllGroups)
    return this.GetMainElement();
   else {
    if (item.items.length > 0)
     return elementToChangeVisibility;
    else
     return this.GetHTMLElementByItem(item.parent);
   }
  },
  SetItemVisible: function (item, visible, initialization) {
   if(visible && initialization) return;
   if(!item.visible) return;
   if(!item.parent.isTabbedGroup) {
    var element = this.GetHTMLElementByItem(item);
    if(element) {
     _aspxSetElementDisplay(element, visible);
     if (visible && item.needAdjustContentOnShowing) {
      var targetElementToAlignGroups = this.GetTargetElementToAlignGroups(element, item);
      if(targetElementToAlignGroups)
       this.alignGroupsInContainer(targetElementToAlignGroups);
      aspxGetControlCollection().AdjustControls(element);
      item.ResetNeedAdjustContentOnShowing();
     }
    }
   }
   else {
    var pageControlName = this.GetPageControlName(item.parent);
    var pageControlObject = aspxGetControlCollection().Get(pageControlName);
    if(pageControlObject) {
     var tab = pageControlObject.GetTabByName(item.path);
     if(tab)
      tab.SetVisible(visible);
    }
   }
  },
  GetPageControlName: function (tabbedGroup) {
   return this.GetItemElementIDPrefix(tabbedGroup) + ASPxClientFormLayoutConsts.PAGE_CONTROL_ID_PREFIX + tabbedGroup.path;
  },
  GetHTMLElementByItem: function (item) {
   return _aspxGetElementById(this.GetItemElementID(item));
  },
  GetItemElementID: function (item) {
   return this.GetItemElementIDPrefix(item) + item.path;
  },
  GetItemElementIDPrefix: function (item) {
   var result = "";
   var currentParent = item.parent;
   while(currentParent != null) {
    if(currentParent.isTabbedGroup)
     result = ASPxClientFormLayoutConsts.PAGE_CONTROL_ID_PREFIX + currentParent.path + "_" + result;
    currentParent = currentParent.parent;
   }
   return this.name + "_" + result;
  },
  UpdateHeadingLineGroupBoxElements: function () {
   var mainElement = this.GetMainElement();
   if (_aspxIsExistsElement(mainElement)) {
    var groupBoxElements = this.getGroupBoxElements(mainElement);
    for (var i = 0; i < groupBoxElements.length; i++) {
     var groupBoxElement = groupBoxElements[i];
     var isHeadingLineGroupBox = groupBoxElement.className.indexOf(ASPxClientFormLayoutConsts.HEADING_LINE_GROUP_BOX_SYSTEM_CLASS_NAME) !== -1;
     if (isHeadingLineGroupBox) {
      var hasGroupBoxCaption = _aspxGetChildNodesByTagName(groupBoxElement, "SPAN").length === 1;
      if (hasGroupBoxCaption)
       groupBoxElement.className += " " + ASPxClientFormLayoutConsts.HEADING_LINE_GROUP_BOX_WITH_CAPTION_SYSTEM_CLASS_NAME;
     }
    }
   }
  },
  AdjustControlCore: function () {
   this.alignGroupsInContainer(this.GetMainElement());
  },
  addHandlersToActiveTabChangedEvents: function () {
   var pageControls = _aspxGetDescendantNodesByClassName(this.GetMainElement(),
    ASPxClientFormLayoutConsts.TABBED_GROUP_PAGE_CONTROL_SYSTEM_CLASS_NAME);
   for(var i = 0; i < pageControls.length; i++) {
    var pageControlObject = aspxGetControlCollection().Get(pageControls[i].id);
    pageControlObject.ActiveTabChanged.AddHandler(function(s, e) {
     this.alignGroupsInContainer(s.GetContentElement(s.GetActiveTabIndex()));
    }.aspxBind(this));
   }
  },
  alignGroupsInContainer: function (groupContainer) {
   if (_aspxIsExistsElement(groupContainer)) {
    if (this.leftAndRightCaptionsWidth === 0) {
     var groupElements = this.getGroupElements(groupContainer);
     this.alignItemCaptionsInAllGroups ? this.alignGroupsTogether(groupElements) : this.alignGroupsSeparately(groupElements);
    }
    else
     this.alignLeftAndRightCaptionsIdentically(groupContainer);
   }
  },
  alignLeftAndRightCaptionsIdentically : function (groupContainer) {
   var captionCells = _aspxGetDescendantNodesByClassName(groupContainer,
    ASPxClientFormLayoutConsts.CAPTION_CELL_SYSTEM_CLASS_NAME);
   for(var i = 0; i < captionCells.length; i++)
    if(this.isLeftOrRigthCaption(captionCells[i]))
     this.setCaptionCellWidth(captionCells[i], this.leftAndRightCaptionsWidth);
  },
  isLeftOrRigthCaption: function (captionCell) {
   var parentTable = _aspxGetParentByTagName(captionCell, "TABLE");
   var rows = this.getRows(parentTable);
   return rows.length === 1;
  },
  alignGroupsTogether: function (groupElements) {
   var captionWidths = [];
   for (var i = 0; i < groupElements.length; i++)
    captionWidths = this.getGroupCaptionWidths(groupElements[i], captionWidths);
   for (var i = 0; i < groupElements.length; i++)
    this.setGroupCaptionWidths(groupElements[i], captionWidths);
  },
  alignGroupsSeparately: function (groupElements) {
   for (var i = 0; i < groupElements.length; i++)
    this.alignGroup(groupElements[i]);
  },
  getGroupCaptionWidths: function (groupElement, captionWidths) {
   var cellMatrix = this.getGroupCellMatrix(groupElement);
   var colCount = this.getCellMatrixColCount(cellMatrix);
   for (var i = 0; i < colCount; i++) {
    var cells = this.getGroupCellOnSimularLevel(cellMatrix, i);
    var maxWidth = this.getGroupCellsMaxWidth(cells);
    if (captionWidths.length <= i)
     captionWidths.push(0);
    if (captionWidths[i] < maxWidth)
     captionWidths[i] = maxWidth;
   }
   return captionWidths;
  },
  setGroupCaptionWidths: function(groupElement, captionWidths) {
   var cellMatrix = this.getGroupCellMatrix(groupElement);
   var colCount = this.getCellMatrixColCount(cellMatrix);
   for (var i = 0; i < colCount; i++) {
    var cells = this.getGroupCellOnSimularLevel(cellMatrix, i);
    this.setGroupCellsWidth(cells, captionWidths[i]);
   }
  },
  alignGroup: function (groupElement) {
   var cellMatrix = this.getGroupCellMatrix(groupElement);
   this.alignCaptionCellsByCellMatrix(cellMatrix);
  },
  getGroupCellMatrix: function (groupElement) {
   var cellMatrix = [];
   var groupRows = this.getRows(groupElement);
   for (var i = 0; i < groupRows.length; i++)
    cellMatrix.push([]);
   for (var i = 0; i < groupRows.length; i++)
    this.addRowToMatrix(cellMatrix, groupRows[i], i);
   return cellMatrix;
  },
  isTopLeftItemCell: function (cellMatrix, i, j) {
   var isLeft = j === 0,
    isTop = i === 0;
   isLeft = isLeft || cellMatrix[i][j] !== cellMatrix[i][j - 1];
   isTop = isTop || cellMatrix[i][j] !== cellMatrix[i - 1][j];
   return isLeft && isTop;
  },
  removeItemFromMatrix: function (cellMatrix, rowIndex, colIndex) {
   var cell = cellMatrix[rowIndex][colIndex];
   for (var i = 0; i < cellMatrix.length; i++) {
    for (var j = 0; j < cellMatrix[i].length; j++) {
     if (cellMatrix[i][j] === cell)
      cellMatrix[i][j] = null;
    }
   }
  },
  getItemCaptionCell: function(groupCell) {
   return _aspxGetDescendantNodesByClassName(groupCell, ASPxClientFormLayoutConsts.CAPTION_CELL_SYSTEM_CLASS_NAME)[0];
  },
  getGroupCellOnSimularLevel: function (cellMatrix, colIndex) {
   var cells = [];
   for (var i = 0; i < cellMatrix.length; i++) {
    if (this.isTopLeftItemCell(cellMatrix, i, colIndex)) {
     var captionCell = this.getItemCaptionCell(cellMatrix[i][colIndex]);
     if(captionCell && this.isLeftOrRigthCaption(captionCell))
      cells.push(cellMatrix[i][colIndex]);
     this.removeItemFromMatrix(cellMatrix, i, colIndex);
    }
   }
   return cells;
  },
  alignCellOnSimularLevel: function (cellMatrix, colIndex) {
   var cells = this.getGroupCellOnSimularLevel(cellMatrix, colIndex);
   this.alignGroupColumnCaptionCellWidths(cells);
  },
  getCellMatrixColCount: function(cellMatrix) {
   var colCount = 0;
   for (var i = 0; i < cellMatrix.length; i++) {
    if (colCount < cellMatrix[i].length)
     colCount = cellMatrix[i].length;
   }
   return colCount;
  },
  alignCaptionCellsByCellMatrix: function (cellMatrix) {
   for (var i = 0; i < this.getCellMatrixColCount(cellMatrix); i++)
    this.alignCellOnSimularLevel(cellMatrix, i);
  },
  addRowToMatrix: function (cellMatrix, row, rowIndex) {
   var cells = this.getRowCells(row);
   for (var i = 0; i < cells.length; i++)
    this.addCellToMatrix(cellMatrix, cells[i], rowIndex);
  },
  addCellToMatrix: function (cellMatrix, cell, rowIndex) {
   var cellRowSpan = this.getCellRowSpan(cell);
   var cellColSpan = this.getCellColSpan(cell);
   var colIndex = cellMatrix[rowIndex].length;
   for (var i = 0; i < cellMatrix[rowIndex].length; i++) {
    if (!cellMatrix[rowIndex][i]) {
     colIndex = i;
     break;
    }
   }
   for (var i = 0; i < cellColSpan; i++) {
    for (var j = 0; j < cellRowSpan; j++) {
     if (j < cellMatrix.length)
      cellMatrix[j + rowIndex][i + colIndex] = cell;
    }
   }
  },
  getGroupCells: function (groupElement) {
   var result = [];
   var rowElements = this.getTableElementRows(groupElement);
   for (var i = 0; i < rowElements.length; i++) {
    var cellElements = _aspxGetChildNodesByTagName(rowElements[i], "TD");
    for (var j = 0; j < cellElements.length; j++)
     result.push(cellElements[i]);
   }
   return result;
  },
  getGroupCellsMaxWidth: function(cellElements) {
   var maxCaptionCellWidth = 0;
   for (var i = 0; i < cellElements.length; i++) {
    var currentCellWidth = this.getGroupCellCaptionElementWindth(cellElements[i]);
    if (maxCaptionCellWidth < currentCellWidth)
     maxCaptionCellWidth = currentCellWidth;
   }
   return maxCaptionCellWidth;
  },
  setGroupCellsWidth: function (cellElements, captionCellWidth) {
   for (var i = 0; i < cellElements.length; i++)
    this.setGroupCellCaptionElementWidth(cellElements[i], captionCellWidth);
  },
  alignGroupColumnCaptionCellWidths: function (cellElements) {
   var maxCaptionCellWidth = this.getGroupCellsMaxWidth(cellElements);
   this.setGroupCellsWidth(cellElements, maxCaptionCellWidth);
  },
  getCellColSpan: function (cellElement) {
   var result = _aspxGetAttribute(cellElement, "colSpan");
   return result ? parseInt(result) : 1;
  },
  getCellRowSpan: function (cellElement) {
   var result = _aspxGetAttribute(cellElement, "rowSpan");
   return result ? parseInt(result) : 1;
  },
  getGroupCellCaptionElement: function(groupCellElement) {
   var itemElements = _aspxGetChildNodes(groupCellElement, function(child) {
    return child.className.indexOf(ASPxClientFormLayoutConsts.ITEM_SYSTEM_CLASS_NAME) != -1;
   });
   if (itemElements.length > 0) {
    var captionCellElements = _aspxGetDescendantNodesByClassName(itemElements[0], ASPxClientFormLayoutConsts.CAPTION_CELL_SYSTEM_CLASS_NAME);
    if (captionCellElements.length > 0)
     return captionCellElements[0];
   }
   return null;
  },
  getGroupCellCaptionElementWindth: function (groupCellElement) {
   if (groupCellElement) {
    var captionCellElement = this.getGroupCellCaptionElement(groupCellElement);
    if (captionCellElement) {
     var result = 0;
     for (var i = 0; i < captionCellElement.childNodes.length; i++)
      result += captionCellElement.childNodes[i].offsetWidth;
     if (result)
      return result;
    }
   }
   return null;
  },
  getGroupElements: function (parent) {
   var result = _aspxGetDescendantNodesByClassName(parent, ASPxClientFormLayoutConsts.ALIGNED_GROUP_SYSTEM_CLASS_NAME);
   if(__aspxIE && __aspxBrowserVersion < 8) {
    for(var i = 0; i < result.length; i++)
     result[i] = result[i].childNodes[0]; 
   }
   return  result;
  },
  getGroupBoxElements: function (parent) {
   return _aspxGetDescendantNodesByClassName(parent, ASPxClientFormLayoutConsts.HEADING_LINE_GROUP_BOX_SYSTEM_CLASS_NAME);
  },
  getRowCells: function (rowElement) {
   return _aspxGetChildNodesByTagName(rowElement, "TD");
  },
  getRows: function (tableElement) {
   var tbody = _aspxGetChildNodesByTagName(tableElement, "TBODY")[0];
   return _aspxGetChildNodesByTagName(tbody, "TR");
  },
  setGroupCellCaptionElementWidth: function (groupCellElement, width) {
   if (groupCellElement) {
    var captionCellElement = this.getGroupCellCaptionElement(groupCellElement);
    if (captionCellElement)
     this.setCaptionCellWidth(captionCellElement, width);
   }
  },
  setCaptionCellWidth: function (captionCellElement, width) {
   var captionCellPaddings = _aspxGetLeftRightBordersAndPaddingsSummaryValue(captionCellElement);
   _aspxSetOffsetWidth(captionCellElement, width + captionCellPaddings);
  }
 });
})();

MVCxClientBeginCallbackEventArgs = _aspxCreateClass(ASPxClientBeginCallbackEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this, command);
  this.customArgs = {};
 }
});
MVCx = {};
MVCx.CallbackHtmlContentPrefix = "/*DXHTML*/";
MVCx.CallbackHtmlContentPlaceholder = "<%html%>";
MVCx.EditorsValuesKey = "DXMVCEditorsValues";
MVCx.PerformControlCallback = function(name, url, arg, params, customParams) {
 if(aspxGetPostHandler().cancelPostProcessing)
  return;
 var data = {};
 data.DXCallbackName = name;
 data.DXCallbackArgument = arg;
 MVCx.MergeHashTables(data, params);
 MVCx.MergeHashTables(data, customParams);
 $.ajax({
  type: 'POST',
  url: url,
  dataType: 'html',
  data: data,
  error: function(response) {
   var ctrl = aspxGetControlCollection().Get(data.DXCallbackName);
   if (ctrl != null) {
    if(typeof(response.responseText) == "string" && response.responseText != "")
     ctrl.DoCallbackError(response.responseText);
    else if(typeof(response) == "string" && response != "")
     ctrl.DoCallbackError(response);
   }
  },
  success: function(response) {
   var ctrl = aspxGetControlCollection().Get(data.DXCallbackName);
   if (ctrl != null) ctrl.DoCallback(response);
  }
 });
}
MVCx.IsCustomCallback = function(command){
 return command.toUpperCase() == "CUSTOMCALLBACK";
}
MVCx.IsCustomDataCallback = function(command) {
 var commandInUpperCase = command.toUpperCase();
 return commandInUpperCase == "CUSTOMDATACALLBACK" || commandInUpperCase == "CUSTOMVALUES";
}
MVCx.GetCustomActionCallBackMethod = function(control){
 return control.customActionCallBack || control.callBack;
}
MVCx.MergeHashTables = function(target, object){
 if(!object || typeof(object) == "string")
  return target;
 if (!target )
  target = {};
 for(var key in object)
  if(key && !target[key])
   target[key] = object[key];
 return target;
}
MVCx.SyncEditorsValues = function(){
 if(MVCx.SyncEditorsValuesLocker)
  return;
 MVCx.SyncEditorsValuesLocker = true;
 window.setTimeout(function(){
  MVCx.ForceSyncEditorsValues();
  delete MVCx.SyncEditorsValuesLocker;
 }, 100);
}
MVCx.ForceSyncEditorsValues = function(){
 aspxGetControlCollection().ForEachControl(function(control){
  if(!MVCx.IsExistingClientEdit(control))
   return;
  if(control.GetMainElement() && _aspxIsValidElement(control.GetMainElement())){
   var form = _aspxGetParentByTagName(control.GetMainElement(), "FORM");
   if(form){
    if(!form.DXEditorValues)
     form.DXEditorValues = {};
    form.DXEditorValues[control.name] = control.GetEnabled() ? MVCx.GetEditorValueByControl(control) : null;
   }
  }
 });
 for(var i = 0; i < document.forms.length; i++){
  var form = document.forms[i];
  if(!form.DXEditorValues) continue;
  if(!form.DXEditorValuesField){
   form.DXEditorValuesField = _aspxCreateHiddenField(MVCx.EditorsValuesKey, "");
   form.appendChild(form.DXEditorValuesField);
  }
  if(form.DXEditorValuesField)
   form.DXEditorValuesField.value = _aspxToJson(form.DXEditorValues);
 }
}
MVCx.IsExistingClientEdit = function(control){
 if(!ASPxIdent.IsASPxClientEdit(control))
  return false;
 var getValueInputMethod = MVCx.GetValueInputMethod(control);
 return getValueInputMethod ? _aspxIsExistsElement(getValueInputMethod.call(control)) : true;
},
MVCx.GetValueInputElement = function(control){
 var method = MVCx.GetValueInputMethod(control);
 return method ? method.call(control) : null;
},
MVCx.GetValueInputMethod = function(control){
 return control.FindStateInputElement || control.GetStateInput || control.GetInputElement;
},
MVCx.GetEditorValueByControl = function(control){
 return IsMultipleValueOwner(control) ? control.GetSelectedValues() : control.GetValue();
}
MVCx.EditorValueChanged = function(s, e){
 MVCx.SyncEditorsValues();
 if(s.context) s.context.validate("blur");
}
MVCx.GetEditorByElements = function(elements){
 for(var i = 0; i < elements.length; i++){
  var control = MVCx.GetEditorByElement(elements[i]);
  if (control)
   return control;
 }
 return null;
}
MVCx.GetEditorByElement = function(element){
 var valueInputPostfixes = [ "", "_I", "_S", "_VI", "_STATE" ];
 var control = null;
 for(var j = 0; j < valueInputPostfixes.length; j++){
  var regexp = new RegExp("(\S*)" + valueInputPostfixes[j] + "$");
  var controlName = regexp.test(element.id) ? element.id.replace(regexp, function(a,b){ return b; }) : "";
  var control = aspxGetControlCollection().Get(controlName);
  if(control && ASPxIdent.IsASPxClientEdit(control)) 
   return control;
 }
 return null;
}
MVCx.IsUnobtrusiveValidationEnabled = function(){
 return $.validator && $.validator.unobtrusive;
}
if(typeof(Sys) != "undefined" && typeof(Sys.Mvc) != "undefined") {
 MVCx.RequiredValidator = function MVCx_RequiredValidator(){
  MVCx.RequiredValidator.initializeBase(this);
 }
 MVCx.RequiredValidator.prototype = {
  editor: null,
  getEditor: function(context){
   if(!this.editor)
    this.editor = MVCx.GetEditorByElements(context.fieldContext.elements);
   return this.editor;
  },
  validate: function(value, context){
   var editor = this.getEditor(context);
   if(editor)
    return value != null && String(value).length > 0;
   return MVCx.RequiredValidator.callBaseMethod(this, 'validate', [value, context]);
  }
 }
 MVCx.RequiredValidator.registerClass('MVCx.RequiredValidator', Sys.Mvc.RequiredValidator);
 MVCx.RequiredValidator.create = function (rule) {
  return Function.createDelegate(new MVCx.RequiredValidator(), new MVCx.RequiredValidator().validate);
 }
 Sys.Mvc.ValidatorRegistry.validators["required"] = MVCx.RequiredValidator.create;
 MVCx.FieldContext = function MVCx_FieldContext(formContext){
  MVCx.FieldContext.initializeBase(this);
 }
 MVCx.FieldContext.prototype = {
  editor: null,
  getEditor: function(){
   if(!this.editor)
    this.editor = MVCx.GetEditorByElements(this.elements);
   return this.editor;
  },
  getDisabled: function() {
   var editor = this.getEditor();
   return this.elements[0].disabled || editor && !editor.GetEnabled();
  },
  enableDynamicValidation: function(){
   MVCx.FieldContext.callBaseMethod(this, 'enableDynamicValidation');
   var editor = this.getEditor(this.elements);
   if(editor) editor.context = this;
  },
  _getStringValue: function(){
   var editor = this.getEditor();
   if(editor)
    return editor.GetValueString();
   return MVCx.FieldContext.callBaseMethod(this, '_getStringValue');
  },
  $12: function(){
   var editor = this.getEditor();
   if(editor)
    return editor.GetValueString();
   return MVCx.FieldContext.callBaseMethod(this, '$12');
  },
  validate: function(eventName) {
   var errors = MVCx.FieldContext.callBaseMethod(this, 'validate', [eventName]);
   var editor = this.getEditor();
   if(editor){
    var errorMessage = errors.length == 0 ? null : errors[0];
    MVCx.SetEditorValidationParameters(editor, errorMessage);
   }
   return errors;
  }
 }
 MVCx.FieldContext.registerClass('MVCx.FieldContext', Sys.Mvc.FieldContext);
 if(Sys.Mvc.FormContext){
  if(Sys.Mvc.FormContext._parseJsonOptions)
   eval("Sys.Mvc.FormContext._parseJsonOptions = " + Sys.Mvc.FormContext._parseJsonOptions.toString().replace("Sys.Mvc.FieldContext", "MVCx.FieldContext"));
  else if(Sys.Mvc.FormContext.$12)
   eval("Sys.Mvc.FormContext.$12 = " + Sys.Mvc.FormContext.$12.toString().replace("Sys.Mvc.FieldContext", "MVCx.FieldContext"));
  if(Sys.Mvc.FormContext.prototype.validate)
   eval("Sys.Mvc.FormContext.prototype.validate = " + Sys.Mvc.FormContext.prototype.validate.toString().replace("elements[0].disabled", "getDisabled()"));
 }
 if(typeof(_aspxClearProcessingProc) != "undefined"){
  MVCx._aspxClearProcessingProc = _aspxClearProcessingProc;
  _aspxClearProcessingProc = function(edit) {
   MVCx._aspxClearProcessingProc(edit);
   if(edit.context) edit.context.clearErrors();
  }
 }
 if(typeof(Sys.Mvc.MvcHelpers) != "undefined"){
  var _asyncRequestInternal = Sys.Mvc.MvcHelpers._asyncRequest || Sys.Mvc.MvcHelpers.$2;
  Sys.Mvc.MvcHelpers._asyncRequest = Sys.Mvc.MvcHelpers.$2 = function(url, verb, body, triggerElement, ajaxOptions){
   ASPxResourceManager.SynchronizeResources(
    function(name, resource) { 
     if(body && body.length > 0 && !body.endsWith('&'))
      body += '&';
     body += (name + "=" + resource);
    }
   );
   var customMethodOnSuccess = ajaxOptions.onSuccess;
   ajaxOptions.onSuccess = function(ajaxContext){
    if(customMethodOnSuccess)
     customMethodOnSuccess(ajaxContext);
    _aspxProcessScriptsAndLinks('', true);
   }
   _asyncRequestInternal(url, verb, body, triggerElement, ajaxOptions);
  }
 }
}
if (typeof(jQuery) != "undefined") {
 if (typeof(jQuery.validator) != "undefined"){
  function getValueOfEditor(element){
   var control = MVCx.GetEditorByElement(element);
   return control ? control.GetValueString() : element.value.replace(/\r/g, "");
  }
  function getMainElement(element){
   var control = MVCx.GetEditorByElement(element);
   if (!control)
    return element;
   return control.GetExternalTable() || control.GetMainElement();
  }
  function getMethodParams(method) {
   return method.toString()
    .replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg, '')
    .match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1];
  }
  function patchMethod(method, args){
   var isMethodPatched = false;
   var methodBody = method.toString().match(/\{([\s\S]*)\}/m)[1];
   var methodParams = getMethodParams(method);
   for(var i = 0; i < args.length; i++){
    if(ASPxIdent.IsArray(args[i])) {
     var pattern = args[i][0];
     var replacement = args[i][1];
     if(methodBody.indexOf(pattern) > -1) {
      methodBody = methodBody.replace(pattern, replacement);
      isMethodPatched = true;
     }
    }
    else if(args[i]){
     methodParams = [methodParams, args[i]].join();
     isMethodPatched = true;
    }
   }
   if(isMethodPatched)
    method = new Function(methodParams, methodBody);
   return method;
  }
  var optionalMethodParameter = getMethodParams($.validator.prototype.optional).split(",")[0];
  var optionalMethodReplacement = "getValueOfEditor(" + optionalMethodParameter + ")";
  var optionalInternal = patchMethod($.validator.prototype.optional,
   [[optionalMethodParameter + ".value", optionalMethodReplacement], 
    ["this.elementValue(" + optionalMethodParameter + ")", optionalMethodReplacement]]
  );
  var elementsInternal = $.validator.prototype.elements;
  $.validator.prototype.elements = function(){
   var $elements = elementsInternal.call(this);
   var $dxElements = $();
   ASPxClientControl.GetControlCollection().ProcessControlsInContainer(this.currentForm, function(control){
    if(!MVCx.IsExistingClientEdit(control))
     return;
    var input = MVCx.GetValueInputElement(control);
    if(input && $.inArray(input, $elements) == -1)
     $dxElements = $dxElements.add(input);
   });
   return $.merge($elements, $dxElements);
  };
  var checkMethodElementParam = getMethodParams($.validator.prototype.check);
  var checkMethodReplacement = "getValueOfEditor(" + checkMethodElementParam + ")";
  var checkInternal = patchMethod($.validator.prototype.check,
   [[checkMethodElementParam + ".value.replace(/\\r/g,\"\")", checkMethodReplacement],
    [checkMethodElementParam + ".value.replace(/\\r/g, \"\")", checkMethodReplacement],
    ["this.elementValue(" + checkMethodElementParam + ")", checkMethodReplacement],
    $.trim($.validator.toString().match(/[^;,]\w*.validator/)[0].split(".")[0].replace("$",""))]
  );
  $.validator.prototype.check = function(element){
   var control = MVCx.GetEditorByElement(element);
   if(!control || control.GetEnabled() && (MVCx.validateInvisibleEditors || control.IsVisible()))
    checkInternal.call(this, element, $);
   if(control)
    MVCx.SetEditorValidationParameters(control, this.errorMap[control.name]);
  };
  var elementValueBase = $.validator.prototype.elementValue;
  $.validator.prototype.elementValue = function(element){
   var dxControl = MVCx.GetEditorByElement(element)
   return dxControl ? dxControl.GetValue() : elementValueBase.call(this, element);
  }
  var showLabelInternal = $.validator.prototype.showLabel;
  $.validator.prototype.showLabel = function(element, message){
   var control = MVCx.GetEditorByElement(element);
   if(control && control.GetErrorCell()){
    MVCx.SetEditorValidationParameters(control, message);
    return;
   }
   if(control && !MVCx.IsUnobtrusiveValidationEnabled())
    element = control.GetMainElement();
   showLabelInternal.call(this, element, message);
  }
  var dateInternal = $.validator.methods.date;
  $.validator.methods.date = function(value, element) {
   var editor = MVCx.GetEditorByElement(element);
   if(editor)
    value = editor.GetValue();
   return dateInternal.call(this, value, element);
  };
  var equalToInternal = $.validator.methods.equalTo;
  $.validator.methods.equalTo = function(value, element, param){
   var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
    $(element).valid();
   });
   var dxEditor;
   if(target.length > 0)
    dxEditor = MVCx.GetEditorByElement(target[0]);
   return dxEditor ? value == dxEditor.GetValue() : equalToInternal.call(this, value, element, param);
  }
  var remoteInternal = $.validator.methods.remote;
  $.validator.methods.remote = function(value, element, param){
   var editor = MVCx.GetEditorByElement(element);
   if(editor && param && param.data)
    param.data[editor.name] = editor.GetValueString();
   return remoteInternal.call(this, value, element, param);
  };
 }
 if(typeof(jQuery.validator) != "undefined" && typeof(jQuery.validator.unobtrusive) != "undefined"){
  jQuery.validator.unobtrusive.prototype = {
   parse: jQuery.validator.unobtrusive.parse
  };
  jQuery.validator.unobtrusive.parse = function(selector){
   jQuery.validator.unobtrusive.prototype.parse.call(this, selector);
   var editors = ASPxClientControl.GetControlCollection().elements;
   if(editors) {
    var elementParameter = jQuery.trim(getMethodParams(jQuery.validator.unobtrusive.parseElement).split(",")[0]);
    var parseElementMethodBody = jQuery.validator.unobtrusive.parseElement.toString();
    var formVariable = jQuery.trim(parseElementMethodBody.match(/\w*\s*=\s*\W*\w*.parents\(\"form"\)/)[0].split("=")[0]);
    var jQueryParameter = jQuery.trim(parseElementMethodBody.match(/[^;,]\w*.each\(/)[0].split(".")[0]);
    var valInfoPattern = jQuery.trim(parseElementMethodBody.match(new RegExp("\\w*\\s*=\\s*\\W*\\w*\\(" + formVariable + "\\)"))[0].split("=")[1]);
    var valInfoReplacement = jQueryParameter + "(" + formVariable + ").data(\"unobtrusiveValidation\")";
    var messagePattern = jQuery.trim(parseElementMethodBody.match(/\w*\s*=\s*\W*\w*.attr\(\w*\)/)[0].split("=")[1]);
    var prefixVariable = messagePattern.substring(messagePattern.indexOf("(") + 1, messagePattern.indexOf(")"));
    var messageReplacement = "MVCx.GetEditorByElement(" + elementParameter + ").unobtrusiveValidationAttributes[" + prefixVariable + "]";
    var paramsValuePattern = jQuery.trim(parseElementMethodBody.match(new RegExp("\\s*" + (jQueryParameter === "$" ? "\\" : "") + 
     messagePattern.split("(")[0] + "\\(" + prefixVariable + "\\s*\\+\\s*this\\)"))[0]);
    var paramsValueReplacement = "MVCx.GetEditorByElement(" + elementParameter + ").unobtrusiveValidationAttributes[" + prefixVariable + "+this]";
    jQuery.validator.unobtrusive.parseDXElement = patchMethod(jQuery.validator.unobtrusive.parseElement,
     [[valInfoPattern, valInfoReplacement],
      [messagePattern, messageReplacement],
      [paramsValuePattern, paramsValueReplacement],
      jQueryParameter.replace("$","")]
    );
    var instance = this;
    $.each(editors, function () {
     if (!_aspxIsValidElement(this.GetMainElement()))
      return;
     var dxEditorElement = MVCx.GetValueInputElement(this);
     if (!this.unobtrusiveValidationAttributes || !dxEditorElement)
      return;
     instance.parseDXElement(dxEditorElement, true, jQuery);
    });
   }
   $("form").each(function () {
    var info = $(this).data("unobtrusiveValidation");
    if (!info)
     return;
    $(this).removeData("validator");
    info.attachValidation();
   });
  };
 }
 jQuery.prototype.ajax = jQuery.ajax;
 jQuery.ajax = function(url, settings){
  if(typeof url === "object"){
   settings = url;
   url = undefined;
  }
  var baseBeforeSendMethod = settings.beforeSend;
  settings.beforeSend = function(jqXHR, options){
   var result;
   if(baseBeforeSendMethod)
    result = baseBeforeSendMethod(jqXHR, options);
   ASPxResourceManager.SynchronizeResources(
    function(name, resource) { 
     jqXHR.setRequestHeader(name, resource); 
    }
   );
   return result;
  };
  var baseCompleteMethod = settings.complete;
  settings.complete = function(jqXHR, status) {
   $("[data-ajax=true]")
   .filter(function() { return (this.action || this.href) === settings.url; })
   .each(function() {
    var insertionMode = ($(this).attr("data-ajax-mode") || "").toUpperCase();
    if(insertionMode && insertionMode != "REPLACE" && MVCx.isDXScriptInitializedOnLoad)
     _aspxRunStartupScripts();
   });
   var result;
   if(baseCompleteMethod)
    result = baseCompleteMethod(jqXHR, status);
   return result;
  }
  var params = [ ];
  if(url)
   params.push(url);
  params.push(settings);
  return jQuery.prototype.ajax.apply(this, params);
 };
 jQuery.prototype.clean = jQuery.clean;
 jQuery.clean = function(elems, context, fragment, scripts){
  var result = jQuery.prototype.clean.call(this, elems, context, fragment, scripts);
  for(var i=0; scripts && i < scripts.length; i++){
   var script = scripts[i];
   if(isDXScriptElement(script)){
    fragment.appendChild(script);
    scripts.splice(i--, 1);
   }
  }
  return result;
 };
 var mapBase = jQuery.map;
 jQuery.map = function (elems, callback, arg){
  function calbackInternal(element, index, arg){
   if(isDXScriptElement(element))
    return;
   return callback(element, index, arg);
  }
  return mapBase.call(this, elems, calbackInternal, arg);
 }
 jQuery.fn.prototype = {
  domManip: jQuery.fn.domManip
 }
 jQuery.fn.domManip = function(args, table, callback){
  var result = arguments.length > 3
   ? jQuery.fn.prototype.domManip.call(this, args, table, callback, arguments[3])
   : jQuery.fn.prototype.domManip.call(this, args, table, callback);
  if(MVCx.isDXScriptInitializedOnLoad && isDXScriptExecuted())
   _aspxRunStartupScripts();
  return result;
 };
 function isDXScriptElement(element){
  return element && element.id && element.id.indexOf(__aspxStartupScriptPrefix) == 0;
 }
 function isDXScriptExecuted(){
  var scripts = _aspxGetStartupScripts();
  for(var i = 0; i < scripts.length; i++)
   if(scripts[i].executed) return true;
  return false;
 }
}
MVCx.isDXScriptInitializedOnLoad = false;
MVCx.validateInvisibleEditors = false;
MVCx.EditorSetValue = function(value){
 if(this.oldSetValue)
  this.oldSetValue(value);
 MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
}
MVCx.SetEditorValidationParameters = function(control, errorText){
 if(errorText)
  control.SetErrorText(errorText);
 var summaryCollection;
 if(typeof(ASPxClientValidationSummary) != "undefined"){
  summaryCollection = aspxGetClientValidationSummaryCollection();
  aspxGetClientValidationSummaryCollection().AllowNewErrorsAccepting();
 }
 control.SetIsValid(!errorText);
 if(summaryCollection)
  summaryCollection.ForbidNewErrorsAccepting();
}
MVCx.MultipleEditorSelectValues = function(values){
 if(this.oldSelectValues)
  this.oldSelectValues(values);
 MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
}
MVCx.MultipleEditorSelectAll = function(){
 if(this.oldSelectAll)
  this.oldSelectAll();
 MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
}
MVCx.MultipleEditorUnselectAll = function(){
 if(this.oldUnselectAll)
  this.oldUnselectAll();
 MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
}
function aspxMVCControlsInitialized(s, e){
 aspxGetControlCollection().ForEachControl(function(control){
  if(!MVCx.IsExistingClientEdit(control) || control.AreSyncHandlersAdded || !control.ValueChanged)
   return;
  if(typeof(ASPxClientTokenBox) != "undefined" && control instanceof ASPxClientTokenBox)
   control.TokensChanged.AddHandler(MVCx.EditorValueChanged);
  else
   control.ValueChanged.AddHandler(MVCx.EditorValueChanged);
  control.EnabledChanged.AddHandler(MVCx.EditorValueChanged);
  control.LostFocus.AddHandler(function(){ MVCx.ForceSyncEditorsValues(); });
  if (IsMultipleValueOwner(control))
   control.SelectedIndexChanged.AddHandler(MVCx.EditorValueChanged);
  if(!control.oldSetValue){
   control.oldSetValue = control.SetValue;
   control.SetValue = MVCx.EditorSetValue;
  }
  if(IsMultipleValueOwner(control) && !control.oldSelectValues){
   control.oldSelectValues = control.SelectValues;
   control.SelectValues = MVCx.MultipleEditorSelectValues;
  }
  if(IsMultipleValueOwner(control) && !control.oldSelectAll){
   control.oldSelectAll = control.SelectAll;
   control.SelectAll = MVCx.MultipleEditorSelectAll;
  }
  if(IsMultipleValueOwner(control) && !control.oldUnselectAll){
   control.oldUnselectAll = control.UnselectAll;
   control.UnselectAll = MVCx.MultipleEditorUnselectAll;
  }
  if(typeof(ASPxClientSpinEdit) != "undefined" && control instanceof ASPxClientSpinEdit && jQuery.validator){  
   control.ValueChanged.AddHandler(function(s, e){
    var form  = s.GetParentForm();
    if(form){
     var inputElement = s.GetInputElement();
     $(form).validate().element(inputElement);
    }
   });
  }
  control.AreSyncHandlersAdded = true;
 });
 $("form").submit(function(){ MVCx.ForceSyncEditorsValues(); });
 MVCx.SyncEditorsValues();
 MVCxClientGlobalEvents.OnControlsInitialized(e);
}
function IsMultipleValueOwner(control) {
 if(!control) return false;
 return typeof(ASPxClientListBox) != "undefined" && control instanceof ASPxClientListBox ||
     typeof(ASPxClientCheckBoxList) != "undefined" && control instanceof ASPxClientCheckBoxList;
}
aspxGetControlCollection().ControlsInitialized.AddHandler(aspxMVCControlsInitialized);
_aspxAttachEventToElement(window, "load", function (evt) { MVCx.isDXScriptInitializedOnLoad = true; });
MVCxClientUtils = {};
MVCxClientUtils.FinalizeCallback = function(){
 _aspxProcessScriptsAndLinks('', true);
}
MVCxClientGlobalEvents = {
 ControlsInitialized: new ASPxClientEvent(),
 BeginCallback: new ASPxClientEvent(),
 EndCallback: new ASPxClientEvent(),
 CallbackError: new ASPxClientEvent(),
 AddControlsInitializedEventHandler: function(handler) {
  this.ControlsInitialized.AddHandler(handler);
 },
 AddBeginCallbackEventHandler: function(handler) {
  this.BeginCallback.AddHandler(handler);
 },
 AddEndCallbackEventHandler: function(handler) {
  this.EndCallback.AddHandler(handler);
 },
 AddCallbackErrorHandler: function(handler) {
  this.CallbackError.AddHandler(handler);
 },
 OnControlsInitialized: function(args) {
  if(!this.ControlsInitialized.IsEmpty())
   this.ControlsInitialized.FireEvent(this, args);
 },
 OnBeginCallback: function(args) {
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
 },
 OnEndCallback: function() {
  if(!this.EndCallback.IsEmpty()) {
   var args = new ASPxClientEndCallbackEventArgs();
   this.EndCallback.FireEvent(this, args);
  }
 },
 OnCallbackError: function(args) {
  if(!this.CallbackError.IsEmpty())
   this.CallbackError.FireEvent(this, args);
 }
};
MVCxClientFormLayout = _aspxCreateClass(ASPxClientFormLayout, {
});
ASPxClientButton = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientButton = true;
  this.allowFocus = true;
  this.autoPostBackFunction = null;
  this.causesValidation = true;
  this.checked = false;
  this.clickLocked = false;
  this.groupName = "";
  this.focusElementSelected = false;
  this.pressed = false;
  this.useSubmitBehavior = true;
  this.validationGroup = "";
  this.validationContainerID = null;
  this.validateInvisibleEditors = false;
  this.originalWidth = null;
  this.originalHeight = null;
  this.needUpdateBounds = true;
  this.buttonCell = null;
  this.contentDiv = null;
  this.checkedInput = null;
  this.buttonImage = null;
  this.internalButton = null;
  this.textElement = null; 
  this.textControl = null;
  this.textContainer = null;
  this.isTextEmpty = false;
  this.CheckedChanged = new ASPxClientEvent();
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Click = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  var mainElement = this.GetMainElement();
  this.originalWidth = mainElement.style.width;
  this.originalHeight = mainElement.style.height;
  this.needUpdateBounds = __aspxIE && __aspxBrowserVersion < 8 || _aspxGetCurrentStyle(mainElement).display.indexOf("table") === -1;
  if(this.needUpdateBounds)
   mainElement.className = mainElement.className.replace("dxbTSys", "");
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeElementIDs();
  this.InitializeEvents();
  this.InitializeEnabled();
  this.InitializeChecked();
  if(this.IsLink())
   this.InitializeLink();
  this.PreventButtonImageDragging();
 },
 InitializeElementIDs: function(){
  var mainElement = this.GetMainElement();
  var contentElement = _aspxGetChildByTagName(mainElement, "DIV", 0);
  if(contentElement) contentElement.id = this.name + "_CD";
  var imageElement = _aspxGetChildByTagName(mainElement, "IMG", 0);
  if(imageElement) imageElement.id = this.name + "Img";
 },
 InitializeEnabled: function(){
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 InitializeChecked: function(){
  this.SetCheckedInternal(this.checked, true);
 },
 InitializeLink: function(){
  var mainElement = this.GetMainElement();
  if(this.enabled)
   mainElement.href = "javascript:;";
  if(!this.allowFocus)
   mainElement.style.outline = 0;
  if(!this.GetTextContainer())
   mainElement.style.fontSize = "0pt";
 },
 InitializeEvents: function(){
  if (!this.isNative && !this.IsLink()) {
   var element = this.GetInternalButton();
   if(element)
    element.onfocus = null;
   var textControl = this.GetTextControl();
   if (textControl) {
    if (__aspxIE)
     _aspxAttachEventToElement(textControl, "mouseup", _aspxClearSelection);
    _aspxPreventElementDragAndSelect(textControl, false);
   }    
  }
  var name = this.name;
  this.onClick = function() {
   var processOnServer = aspxBClick(name);
   if (!processOnServer) {
    var evt = _aspxGetEvent(arguments[0]);
    if (evt)
     _aspxPreventEvent(evt);
   }
   return processOnServer;
  };
  this.onImageMoseDown = function() { var el = _aspxGetFocusedElement(); if(el) el.blur(); };
  this.onGotFocus = function() { aspxBGotFocus(name); };
  this.onLostFocus = function() { aspxBLostFocus(name); };
  this.onKeyUp = function(evt) { aspxBKeyUp(evt, name); };
  this.onKeyDown = function(evt) { aspxBKeyDown(evt, name); }; 
  if(!this.isNative && !this.IsLink()) {
   this.AttachNativeHandlerToMainElement("focus", "SetFocus");
   this.AttachNativeHandlerToMainElement("click", "DoClick");
  }
 },
 AdjustControlCore: function () {
  if(this.isNative || this.IsLink()) return;
  var buttonImage = this.GetButtonImage();  
  if(buttonImage && buttonImage.offsetHeight === 0 && buttonImage.offsetWidth === 0)
   buttonImage.onload = function() { this.UpdateSize(); }.aspxBind(this);
  else
   this.UpdateSize();
 },
 UpdateSize: function(){
  if(this.needUpdateBounds){
   this.UpdateWidth();
   this.UpdateHeight();
  }
  else
   this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 UpdateHeight: function(){
  if(this.isNative || this.IsLink() || this.originalHeight === null || _aspxIsPercentageSize(this.originalHeight)) return;
  var height;
  var mainElement = this.GetMainElement();
  var borderAndPadding = _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  if(!this.originalHeight) {
   mainElement.style.height = "";
   height = mainElement.offsetHeight - borderAndPadding;
  }
  else
   height = (_aspxPxToInt(this.originalHeight) - borderAndPadding);
  if(height){
   mainElement.style.height = height + "px";
   var contentDiv = this.GetContentDiv();
   if(contentDiv && contentDiv.offsetHeight > 0){
    var contentDivCurrentStyle = _aspxGetCurrentStyle(contentDiv);
    var paddingTop = parseInt(contentDivCurrentStyle.paddingTop);
    if(!paddingTop) paddingTop = 0;
    var paddingBottom = parseInt(contentDivCurrentStyle.paddingBottom);
    if(!paddingBottom) paddingBottom = 0;
    var clientHeightDiff = height - contentDiv.offsetHeight;
    var verticalAlign = _aspxGetCurrentStyle(mainElement).verticalAlign;
    if(verticalAlign == "top")
     paddingBottom = paddingBottom + clientHeightDiff;
    else if(verticalAlign == "bottom")
     paddingTop = paddingTop + clientHeightDiff;
    else{
     var halfClientHeightDiff = Math.floor(clientHeightDiff / 2);
     paddingTop = paddingTop + halfClientHeightDiff;
     paddingBottom = paddingBottom + (clientHeightDiff - halfClientHeightDiff);
    }
    contentDiv.style.paddingTop = (paddingTop > 0 ? paddingTop : 0) + "px";
    contentDiv.style.paddingBottom = (paddingBottom > 0 ? paddingBottom : 0) + "px";
   }
  }
 },
 UpdateWidth: function(){
  if(this.isNative || this.IsLink() || this.originalWidth === null) return;
  if(!_aspxIsPercentageSize(this.originalWidth)) {
   var mainElement = this.GetMainElement();
   var borderAndPadding = _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
   if(__aspxIE && __aspxBrowserVersion < 8){
    mainElement.style.display = "inline";
    mainElement.style.width = "";
    if(mainElement.offsetWidth > 0)
     mainElement.style.width = (mainElement.offsetWidth + borderAndPadding) + "px";
    mainElement.style.display = "";
   }
   else {
    if(this.originalWidth && _aspxIsTextWrapped(this.GetTextContainer()))
     mainElement.style.width = (_aspxPxToInt(this.originalWidth) - borderAndPadding) + "px";
    else
     mainElement.style.width = "";
   }
   var width = mainElement.offsetWidth - borderAndPadding;
   if(this.originalWidth && width < _aspxPxToInt(this.originalWidth) - borderAndPadding) 
    width = _aspxPxToInt(this.originalWidth) - borderAndPadding;
   if(width)
    mainElement.style.width = (width > 0 ? width : 0)  + "px";
  }
  this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 GetAdjustedSizes: function() {
  var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
  var image = this.GetButtonImage();
  if(image) {
   sizes.imageWidth = image.offsetWidth;
   sizes.imageHeight = image.offsetHeight;
  }
  return sizes;
 },
 PreventButtonImageDragging: function() {
  _aspxPreventImageDragging(this.GetButtonImage());
 },
 AttachNativeHandlerToMainElement: function(handlerName, correspondingMethodName) {
  var mainElement = this.GetMainElement();
  if (!_aspxIsExistsElement(mainElement))
   return;
  mainElement[handlerName] = Function("_aspxBCallButtonMethod('" + this.name + "', '" + correspondingMethodName + "')");
 },
 GetContentDiv: function(){
  if(!_aspxIsExistsElement(this.contentDiv))
   this.contentDiv = this.GetChild("_CD");
  return this.contentDiv;
 },       
 GetButtonCheckedInput: function(){
  if(!_aspxIsExistsElement(this.checkedInput))
   this.checkedInput = _aspxGetElementById(this.name + "_CH");
  return this.checkedInput;
 },  
 GetButtonImage: function(){
  if(!_aspxIsExistsElement(this.buttonImage))
   this.buttonImage = _aspxGetChildByTagName(this.GetMainElement(), "IMG", 0);
  return this.buttonImage;
 },
 GetInternalButton: function() {
  if(!_aspxIsExistsElement(this.internalButton))
   this.internalButton = this.isNative || this.IsLink() ? this.GetMainElement() : _aspxGetChildByTagName(this.GetMainElement(), "INPUT", 0);
  return this.internalButton;
 },
 GetTextContainer: function() {
  if (!this.textContainer) {
   if(this.isNative)
    this.textContainer = this.GetMainElement();
   else{
    var textElement = this.IsLink() ? this.GetMainElement() : this.GetContentDiv();
    this.textContainer = _aspxGetChildByTagName(textElement, "SPAN", 0);
   }
  }
  return this.textContainer;
 },
 GetTextControl: function(){
  if(!_aspxIsExistsElement(this.textControl))
   this.textControl = _aspxGetParentByTagName(this.GetContentDiv(), "DIV");
  if (!_aspxIsExistsElement(this.textControl) || (this.textControl.id == this.name))
   this.textControl = this.GetContentDiv();
  return this.textControl;
 },
 IsLink: function(){
  return this.GetMainElement().tagName === "A";
 },   
 IsHovered: function(){
  var hoverElement = this.GetMainElement();
  return aspxGetStateController().currentHoverItemName == hoverElement.id;
 },   
 SetEnabledInternal: function(enabled, initialization) {
  if(!this.enabled)
   return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetInternalButton();
  if(element) {
   element.disabled = !enabled;
   if(this.IsLink()){
    var method = _aspxChangeAttributesMethod(enabled);
    method(this.GetMainElement(), "href");
   }
  }
  this.ChangeEnabledEventsAttributes(_aspxChangeEventsMethod(enabled));
 },
 ChangeEnabledEventsAttributes: function(method) {
  var element = this.GetMainElement();
  method(element, "click", this.onClick);
  if (this.allowFocus){
   if (!this.isNative && !this.IsLink()) 
    element = this.GetInternalButton();
   if(element) {
    method(element, "focus", this.onGotFocus);
    method(element, "blur", this.onLostFocus);
    if (!this.isNative && !this.IsLink()){
     method(element, "keyup", this.onKeyUp);
     method(element, "blur", this.onKeyUp);
     method(element, "keydown", this.onKeyDown);
    }
   }
   if(__aspxFirefox){
    var image = this.GetButtonImage();
    if(image)
     method(image, "mousedown", this.onImageMoseDown); 
   }
  }
 },
 ChangeEnabledStateItems: function(enabled){
  if(this.isNative) return;
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  this.UpdateFocusedStyle();
 },
 RequiredPreventDoublePostback: function(){
  return __aspxFirefox && !this.isNative; 
 },
 OnFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = true;
  if(this.isInitialized)
   this.RaiseFocus();
  this.UpdateFocusedStyle();
 },  
 OnLostFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = false;
  if(this.isInitialized)
   this.RaiseLostFocus();
  this.UpdateFocusedStyle();
 },
 CauseValidation: function() {
  if (this.causesValidation && typeof(ASPxClientEdit) != "undefined")
   return this.validationContainerID != null ?
    ASPxClientEdit.ValidateEditorsInContainerById(this.validationContainerID, this.validationGroup, this.validateInvisibleEditors) :
    ASPxClientEdit.ValidateGroup(this.validationGroup, this.validateInvisibleEditors);
  else
   return true;
 },
 OnClick: function() {
  if(this.clickLocked) return true;
  if(this.checked && this.groupName != "" && this.GetCheckedGroupList().length > 1) return;
  this.SetFocus();
  var isValid = this.CauseValidation();
  var processOnServer = this.autoPostBack;
  if (this.groupName != "") {
   if(this.GetCheckedGroupList().length == 1)
    this.SetCheckedInternal(!this.checked, false);
   else {
    this.SetCheckedInternal(true, false);
    this.ClearButtonGroupChecked(true);
   }
   processOnServer = this.RaiseCheckedChanged();
   if (processOnServer && isValid)
    this.SendPostBack("CheckedChanged");
  }
  processOnServer = this.RaiseClick();
  if (processOnServer && isValid){
   var requiredPreventDoublePostback = this.RequiredPreventDoublePostback();
   var postponePostback = __aspxAndroidMobilePlatform; 
   if(requiredPreventDoublePostback || postponePostback)
    _aspxSetTimeout("_aspxBCallButtonMethod(\"" + this.name + "\", \"SendPostBack\", \"Click\" );", 0); 
   else
    this.SendPostBack("Click");
   return !requiredPreventDoublePostback;
  }
  return false;
 },
 OnKeyUp: function(evt) {
    if(this.pressed)
   this.SetUnpressed();
 },
 OnKeyDown: function(evt) {
    if(evt.keyCode == ASPxKey.Enter || evt.keyCode == ASPxKey.Space)
     this.SetPressed();
 },  
 GetChecked: function(){
  return this.groupName != "" ? this.GetButtonCheckedInput().value == "1" : false;
 },  
 GetCheckedGroupList: function(){
  var result = [ ];
  aspxGetControlCollection().ForEachControl(function(control) {
   if (ASPxIdent.IsASPxClientButton(control) && (control.groupName == this.groupName) && control.RenderExistsOnPage())
    result.push(control);
  }, this);
  return result;
 },
 ClearButtonGroupChecked: function(raiseCheckedChanged){
  var list = this.GetCheckedGroupList();
  for(var i = 0; i < list.length; i ++){
   if(list[i] != this && list[i].checked) {
    list[i].SetCheckedInternal(false, false);
    if(raiseCheckedChanged)
     list[i].RaiseCheckedChanged();
   }
  }
 },
 ApplyCheckedStyle: function(){
  var stateController = aspxGetStateController();
  if(this.IsHovered()) 
   stateController.SetCurrentHoverElement(null);  
  stateController.SelectElementBySrcElement(this.GetMainElement());
 }, 
 ApplyUncheckedStyle: function(){
  var stateController = aspxGetStateController();
  if(this.IsHovered()) 
   stateController.SetCurrentHoverElement(null);
  stateController.DeselectElementBySrcElement(this.GetMainElement());
 },  
 SetCheckedInternal: function(checked, initialization){
  if(initialization && checked || (this.checked != checked)){
   this.checked = checked;
   var inputElement = this.GetButtonCheckedInput();
   if(inputElement) 
    inputElement.value = checked ? "1" : "0";         
   if(checked)
    this.ApplyCheckedStyle();
   else
    this.ApplyUncheckedStyle();
  }
 },
 ApplyPressedStyle: function(){
  aspxGetStateController().OnMouseDownOnElement(this.GetMainElement());
 },
 ApplyUnpressedStyle: function(){ 
  aspxGetStateController().OnMouseUpOnElement(this.GetMainElement());
 },
 SetPressed: function(){
  this.pressed = true;
  this.ApplyPressedStyle();
 }, 
 SetUnpressed: function(){
  this.pressed = false;
  this.ApplyUnpressedStyle();
 },
 SetFocus: function(){
  if(!this.allowFocus || this.focused)
   return;
  var element = this.GetInternalButton();
  if(element) {
   var hiddenInternalButtonRequiresVisibilityToGetFocused = __aspxWebKitFamily  && !this.isNative  && !this.IsLink();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.MakeHiddenElementFocusable(element);
   if(_aspxIsFocusable(element) && _aspxGetActiveElement() != element)
    element.focus();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.RestoreHiddenElementAppearance(element);
  }
 },
 ApplyFocusedStyle: function(){
  if(this.focusElementSelected) return;
  if(typeof(aspxGetStateController) != "undefined")
   aspxGetStateController().SelectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = true;
 },
 ApplyUnfocusedStyle: function(){ 
  if(!this.focusElementSelected) return;
  if(typeof(aspxGetStateController) != "undefined")
   aspxGetStateController().DeselectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = false;
 },
 UpdateFocusedStyle: function(){
  if(this.isNative || this.IsLink()) return;
  if(this.enabled && this.clientEnabled && this.allowFocus && this.focused)
   this.ApplyFocusedStyle();
  else
   this.ApplyUnfocusedStyle();
 },
 SendPostBack: function(postBackArg){
  if(!this.enabled || !this.clientEnabled)
   return;
  var arg = postBackArg || "";
  if(this.autoPostBackFunction)
   this.autoPostBackFunction(arg);
  else if(!this.useSubmitBehavior || this.IsLink())
   ASPxClientControl.prototype.SendPostBack.call(this, arg);
  if(this.useSubmitBehavior && !this.isNative)
   this.ClickInternalButton();
 },
 ClickInternalButton: function(){
  var element = this.GetInternalButton();
  if(element) {
   this.clickLocked = true;
   if (__aspxNetscapeFamily)
    this.CreateUniqueIDCarrier(); 
   _aspxDoElementClick(element);
   if (__aspxNetscapeFamily)
    this.RemoveUniqueIDCarrier(); 
   this.clickLocked = false;
  }
 },
 CreateUniqueIDCarrier: function() {
  var name = this.uniqueID;
  var id = this.GetUniqueIDCarrierID();
  var field = _aspxCreateHiddenField(name, id);
  var form = this.GetParentForm();
  if(form) form.appendChild(field);
 },
 RemoveUniqueIDCarrier: function() {
  var field = document.getElementById(this.GetUniqueIDCarrierID());
  if (field)
   field.parentNode.removeChild(field);
 },
 GetUniqueIDCarrierID: function() {
  return this.uniqueID + "_UIDC";
 },
 DoClick: function(){
  if(!this.enabled || !this.clientEnabled)
   return;
  var button = (this.isNative || this.IsLink()) ? this.GetMainElement() : this.GetInternalButton();
  if(button)
   _aspxDoElementClick(button);
  else 
   this.OnClick();   
 },
 GetChecked: function(){
  return this.checked;
 },
 SetChecked: function(checked){
  this.SetCheckedInternal(checked, false);
  this.ClearButtonGroupChecked(false);
 },
 GetText: function(){
  if(!this.isTextEmpty)
   return this.isNative ? this.GetTextContainer().value : this.GetTextContainer().innerHTML;
  return "";
 },
 SetText: function(text){
  this.isTextEmpty = (text == null || text == "");
  var textContainer = this.GetTextContainer();
  if(textContainer){
   if(this.isNative)
    textContainer.value = (text != null) ? text : "";
   else {
      textContainer.innerHTML = this.isTextEmpty ? "&nbsp;" : text;
    if (this.clientVisible && __aspxIE && __aspxBrowserVersion >= 9) 
     _aspxSetElementDisplay(this.GetMainElement(), true);
   }
   this.UpdateSize();
  }
 },
 GetImageUrl: function(){
  var img = this.GetButtonImage();
  return img ?  img.src : "";
 },
 SetImageUrl: function(url){
  var img = this.GetButtonImage();
  if (img) {
   img.src = url;
   this.UpdateSize();
  }
 },
 SetEnabled: function(enabled){
  if (this.clientEnabled != enabled) {
   if (!enabled && this.focused)
    this.OnLostFocus();
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
  }
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 Focus: function(){
  this.SetFocus();
 },
 RaiseCheckedChanged: function(){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("CheckedChanged");
  if(!this.CheckedChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseClick: function(){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("Click");
  if(!this.Click.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.Click.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 }
});
ASPxClientButton.Cast = ASPxClientControl.Cast;
ASPxClientButton.MakeHiddenElementFocusable = function(element) {
  element.__dxHiddenElementState = {
   parentDisplay: element.parentNode.style.display,
   height: element.style.height,
   width: element.style.width
  };
  element.parentNode.style.display = "block";
  element.style.height = "1px";
  element.style.width = "1px";
};
ASPxClientButton.RestoreHiddenElementAppearance = function(element) {
 var state = element.__dxHiddenElementState;
 element.parentNode.style.display = state.parentDisplay;
 element.style.height = state.height;
 element.style.width = state.width;
 delete element.__dxHiddenElementState;
};
ASPxIdent.IsASPxClientButton = function(obj) {
 return !!obj.isASPxClientButton;
};
function _aspxBCallButtonMethod(name, methodName, arg) {
 var button = aspxGetControlCollection().Get(name); 
 if (button != null)
  button[methodName](arg);
}
function aspxBGotFocus(name){
 var button = aspxGetControlCollection().Get(name); 
 if(button != null)
  return button.OnFocus();
}
function aspxBLostFocus(name){
 var button = aspxGetControlCollection().Get(name);
 if(button != null) 
  return button.OnLostFocus();
}
function aspxBClick(name){
 var button = aspxGetControlCollection().Get(name); 
 if(button != null)
  return button.OnClick();
}
function aspxBKeyDown(evt,name){
 var button = aspxGetControlCollection().Get(name); 
 if(button != null)
  button.OnKeyDown(evt);
}
function aspxBKeyUp(evt,name){
 var button = aspxGetControlCollection().Get(name); 
 if(button != null)
  button.OnKeyUp(evt);
}

MVCxClientButton = _aspxCreateClass(ASPxClientButton, {
 InlineInitialize: function() {
  ASPxClientButton.prototype.InlineInitialize.apply(this, arguments);
  this.autoPostBack = this.autoPostBack || !!this.submitUrl;
  MVCx.validateInvisibleEditors = this.validateInvisibleEditors;
 },
 SendPostBack: function(postBackArg) {
  if(!!this.submitUrl) {
   if(this.useSubmitBehavior) {
    var form = _aspxGetParentByTagName(this.GetMainElement(), "form");
    if(form) {
     form.action = this.submitUrl;
     form.submit();
    }
   }
   else {
    location.href = this.submitUrl;
   }
  }
  else
   ASPxClientButton.prototype.SendPostBack.apply(this, arguments);
 }
});
var __aspxClientValidationStateNameSuffix = "$CVS";
ASPxClientEditBase = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.EnabledChanged = new ASPxClientEvent();
 },
 InlineInitialize: function(){
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeEnabled(); 
 },
 InitializeEnabled: function() {
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 GetValue: function() {
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   return element.innerHTML;
  return "";
 },
 GetValueString: function(){
  var value = this.GetValue();
  return (value == null) ? null : value.toString();
 },
 SetValue: function(value) {
  if(value == null)
   value = "";
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   element.innerHTML = value;
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(enabled){
  if(this.clientEnabled != enabled) {
   var errorFrameRequiresUpdate = this.GetIsValid && !this.GetIsValid();
   if(errorFrameRequiresUpdate && !enabled)
    this.UpdateErrorFrameAndFocus(false , null , true );
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
   if(errorFrameRequiresUpdate && enabled)
    this.UpdateErrorFrameAndFocus(false );
   this.RaiseEnabledChangedEvent();
  }
 },
 SetEnabledInternal: function(enabled, initialization){
  if(!this.enabled) return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
  if(__aspxChrome) {   
   var mainElement = this.GetMainElement();
   if(mainElement)
    mainElement.className = mainElement.className;
  } 
 },
 ChangeEnabledAttributes: function(enabled){
 },
 ChangeEnabledStateItems: function(enabled){
 },
 RaiseEnabledChangedEvent: function(){
  if(!this.EnabledChanged.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EnabledChanged.FireEvent(this, args);
  }
 },
 GetDecodeValue: function (value) { 
  if (typeof (value) == "string" && value.length > 1)
   value = this.SimpleDecodeHtml(value);
  return value;
 },
 SimpleDecodeHtml: function (html) {
  return _aspxApplyReplacement(html, [
   [/&lt;/g, '<'],
   [/&amp;/g, '&'],
   [/&quot;/g, '"'],
   [/&#39;/g, '\'']
  ]);
 }
});
ASPxValidationPattern = _aspxCreateClass(null, {
 constructor: function(errorText) {
  this.errorText = errorText;
 }
});
ASPxRequiredFieldValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
 constructor: function(errorText) {
  this.constructor.prototype.constructor.call(this, errorText);
 },
 EvaluateIsValid: function(value) {
  return value != null && (value.constructor == Array || _aspxTrim(value.toString()) != "");
 }
});
ASPxRegularExpressionValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
 constructor: function(errorText, pattern) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.pattern = pattern;
 },
 EvaluateIsValid: function(value) {
  if (value == null) 
   return true;
  var strValue = value.toString();
  if (_aspxTrim(strValue).length == 0)
   return true;
  var regEx = new RegExp(this.pattern);
  var matches = regEx.exec(strValue);
  return matches != null && strValue == matches[0];
 }
});
function _aspxIsEditorFocusable(inputElement) {
 return _aspxIsFocusableCore(inputElement, function(container) {
  return container.getAttribute("errorFrame") == "errorFrame";
 });
}
var __aspxInvalidEditorToBeFocused = null;
ASPxValidationType = {
 PersonalOnValueChanged: "ValueChanged",
 PersonalViaScript: "CalledViaScript",
 MassValidation: "MassValidation"
};
ASPxErrorFrameDisplay = {
 None: "None",
 Static: "Static",
 Dynamic: "Dynamic"
};
ASPxEditElementSuffix = {
 ExternalTable: "_ET",
 ControlCell: "_CC",
 ErrorCell: "_EC",
 ErrorTextCell: "_ETC",
 ErrorImage: "_EI",
 CaptionCell: "_CapC"
};
ASPxEditExternalTableClassNames = {
 ValidStaticTableClassName: "dxeValidStEditorTable",
 ValidDynamicTableClassName: "dxeValidDynEditorTable",
 TableWithSeparateBordersClassName: "tableWithSeparateBorders"
};
ASPxClientEdit = _aspxCreateClass(ASPxClientEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientEdit = true;
  this.inputElement = null;
  this.elementCache = { };
  this.convertEmptyStringToNull = true;
  this.readOnly = false;
  this.focused = false;
  this.focusEventsLocked = false;
  this.receiveGlobalMouseWheel = true;
  this.styleDecoration = null;
  this.widthCorrectionRequired = false;
  this.heightCorrectionRequired = false;
  this.customValidationEnabled = false;
  this.display = ASPxErrorFrameDisplay.Static;
  this.initialErrorText = "";
  this.causesValidation = false;
  this.validateOnLeave = true;
  this.validationGroup = "";
  this.sendPostBackWithValidation = null;
  this.validationPatterns = [];
  this.setFocusOnError = false;
  this.errorDisplayMode = "it";
  this.errorText = "";
  this.isValid = true;
  this.errorImageIsAssigned = false;
  this.clientValidationStateElement = null;
  this.notifyValidationSummariesToAcceptNewError = false;
  this.enterProcessed = false;
  this.keyDownHandlers = {};
  this.keyPressHandlers = {};
  this.keyUpHandlers = {};
  this.specialKeyboardHandlingUsed = false;
  this.onKeyDownHandler = null;
  this.onKeyPressHandler = null;
  this.onKeyUpHandler = null;
  this.onGotFocusHandler = null;
  this.onLostFocusHandler = null;
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Validation = new ASPxClientEvent();
  this.ValueChanged = new ASPxClientEvent();
  this.KeyDown = new ASPxClientEvent();
  this.KeyPress = new ASPxClientEvent();
  this.KeyUp = new ASPxClientEvent();
 },
 Initialize: function() {
  this.initialErrorText = this.errorText;
  ASPxClientEditBase.prototype.Initialize.call(this);
  this.InitializeKeyHandlers();
  this.UpdateClientValidationState();
  this.UpdateValidationSummaries(null , true );
 },
 InlineInitialize: function() {
  ASPxClientEditBase.prototype.InlineInitialize.call(this);
  if(this.styleDecoration)
   this.styleDecoration.Update();
 }, 
 InitSpecialKeyboardHandling: function(){
  this.onKeyDownHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyDown", this.name, true);
  this.onKeyPressHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyPress", this.name, true);
  this.onKeyUpHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyUp", this.name, true);
  this.onGotFocusHandler = _aspxCreateEventHandlerFunction("aspxESGotFocus", this.name, false);
  this.onLostFocusHandler = _aspxCreateEventHandlerFunction("aspxESLostFocus", this.name, false);
  this.specialKeyboardHandlingUsed = true;
  this.InitializeDelayedSpecialFocus();
 },
 InitializeKeyHandlers: function() {
 },
 AddKeyDownHandler: function(key, handler) {
  this.keyDownHandlers[key] = handler;
 },
 AddKeyPressHandler: function(key, handler) {
  this.keyPressHandlers[key] = handler;
 },
 ChangeSpecialInputEnabledAttributes: function(element, method, doNotChangeAutoComplete){
  if(!doNotChangeAutoComplete) 
   element.autocomplete = "off";
  if(this.onKeyDownHandler != null)
   method(element, "keydown", this.onKeyDownHandler);
  if(this.onKeyPressHandler != null)
   method(element, "keypress", this.onKeyPressHandler);
  if(this.onKeyUpHandler != null)
   method(element, "keyup", this.onKeyUpHandler);
  if(this.onGotFocusHandler != null)
   method(element, "focus", this.onGotFocusHandler);
  if(this.onLostFocusHandler != null)
   method(element, "blur", this.onLostFocusHandler);
 },
 UpdateClientValidationState: function() {
  if(!this.customValidationEnabled)
   return;
  var mainElement = this.GetMainElement();
  if (mainElement) {
   var hiddenField = this.GetClientValidationStateHiddenField();
   if(hiddenField)
    hiddenField.value = _aspxEncodeHtml(!this.GetIsValid() ? ("-" + this.GetErrorText()) : "");
  }
 },
 UpdateValidationSummaries: function(validationType, initializing) {
  if(typeof(ASPxClientValidationSummary) != "undefined") {
   var summaryCollection = aspxGetClientValidationSummaryCollection();
   summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
  }
 },
 GetCachedElementByIdSuffix: function(idSuffix) {
  var element = this.elementCache[idSuffix];
  if(!_aspxIsExistsElement(element)) {
   element = _aspxGetElementById(this.name + idSuffix);
   this.elementCache[idSuffix] = element;
  }
  return element;
 },
 FindInputElement: function(){
  return null;
 },
 GetInputElement: function(){
  if(!_aspxIsExistsElement(this.inputElement))
   this.inputElement = this.FindInputElement();
  return this.inputElement;
 },
 GetFocusableInputElement: function() {
  return this.GetInputElement();
 },
 GetErrorImage: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ErrorImage);
 },
 GetExternalTable: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ExternalTable);
 },
 GetControlCell: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ControlCell);
 },
 GetErrorCell: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ErrorCell);
 },
 GetCaptionCell: function () {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.CaptionCell);
 },
 GetErrorTextCell: function() {
  return this.GetCachedElementByIdSuffix(this.errorImageIsAssigned ?
   ASPxEditElementSuffix.ErrorTextCell : ASPxEditElementSuffix.ErrorCell);
 },
 GetClientValidationStateHiddenField: function() {
  if(!this.clientValidationStateElement)
   this.clientValidationStateElement = this.CreateClientValidationStateHiddenField();
  return this.clientValidationStateElement;
 },
 CreateClientValidationStateHiddenField: function() {
  var mainElement = this.GetMainElement();
  var hiddenField = _aspxCreateHiddenField(this.uniqueID + __aspxClientValidationStateNameSuffix);
  mainElement.parentNode.appendChild(hiddenField);
  return hiddenField;
 },
 SetVisible: function (isVisible) {
  if (this.clientVisible == isVisible)
   return;
  var externalTable = this.GetExternalTable();
  if (externalTable) {
   _aspxSetElementDisplay(externalTable, isVisible);
   if (this.customValidationEnabled) {
    var isValid = !isVisible ? true : void (0);
    this.UpdateErrorFrameAndFocus(false , true , isValid );
   }
  }
  ASPxClientControl.prototype.SetVisible.call(this, isVisible);
 },
 GetValueInputToValidate: function() {
  return this.GetInputElement();
 },
 IsVisible: function() {
  if (!this.clientVisible)
   return false;
  var element = this.GetMainElement();
  if(!element) 
   return false;
  while(element && element.tagName != "BODY") {
   if (element.getAttribute("errorFrame") != "errorFrame" && (!_aspxGetElementVisibility(element) || !_aspxGetElementDisplay(element)))
    return false;
   element = element.parentNode;
  }
  return true;
 },
 AdjustControlCore: function() {
  this.CollapseControl();
  if (this.WidthCorrectionRequired())
   this.CorrectEditorWidth();
  else
   this.UnstretchInputElement();
  if (this.heightCorrectionRequired)
   this.CorrectEditorHeight();
 },
 CollapseControl: function() {
 },
 WidthCorrectionRequired: function() {
  var mainElement = this.GetMainElement();
  if(_aspxIsExistsElement(mainElement)) {
   var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
   return this.widthCorrectionRequired && mainElementCurStyle.width != "" && mainElementCurStyle.width != "auto";
  }
  return false;
 },
 CorrectEditorWidth: function() {
 },
 CorrectEditorHeight: function() {
 },
 UnstretchInputElement: function() {
 },
 UseDelayedSpecialFocus: function() {
  return false;
 },
 GetDelayedSpecialFocusTriggers: function() {
  return [ this.GetMainElement() ];
 },
 InitializeDelayedSpecialFocus: function() {
  if(!this.UseDelayedSpecialFocus())
   return;
  this.specialFocusTimer = -1;    
  var handler = function(evt) { this.OnDelayedSpecialFocusMouseDown(evt); }.aspxBind(this);
  var triggers = this.GetDelayedSpecialFocusTriggers();
  for(var i = 0; i < triggers.length; i++)
   _aspxAttachEventToElement(triggers[i], "mousedown", handler);
 },
 OnDelayedSpecialFocusMouseDown: function(evt) {
  window.setTimeout(function() { this.SetFocus(); }.aspxBind(this), 0);
 },
 IsFocusEventsLocked: function() {
  return this.focusEventsLocked;
 },
 LockFocusEvents: function() {
  if(!this.focused) return;
  this.focusEventsLocked = true;
 },
 UnlockFocusEvents: function() {
  this.focusEventsLocked = false;
 },
 ForceRefocusEditor: function() {
  this.LockFocusEvents();
  var inputElement = this.GetFocusableInputElement();
  if(inputElement && inputElement.blur)
   inputElement.blur();
  window.setTimeout("aspxGetControlCollection().Get('" + this.name + "').SetFocus();", 0);
 },
 IsEditorElement: function(element) {
  return this.GetMainElement() == element || _aspxGetIsParent(this.GetMainElement(), element);
 },
 IsElementBelongToInputElement: function(element) {
  return this.GetInputElement() == element;
 },
 OnFocusCore: function() {
  if(this.UseDelayedSpecialFocus())
   window.clearTimeout(this.specialFocusTimer);
  if (!this.IsFocusEventsLocked()){
   this.focused = true;
   ASPxClientEdit.SetFocusedEditor(this);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   if(this.isInitialized)
    this.RaiseFocus();
  }
  else
   this.UnlockFocusEvents();
 },
 OnLostFocusCore: function() {
  if (!this.IsFocusEventsLocked()){
   this.focused = false;
   ASPxClientEdit.SetFocusedEditor(null);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   this.RaiseLostFocus();
  }
 },
 OnFocus: function() {
  if (!this.specialKeyboardHandlingUsed)
   this.OnFocusCore();
 },
 OnLostFocus: function() {
  if (this.isInitialized && !this.specialKeyboardHandlingUsed)
   this.OnLostFocusCore();
 },
 OnSpecialFocus: function() {
  if (this.isInitialized)
   this.OnFocusCore();
 },
 OnSpecialLostFocus: function() {
  if (this.isInitialized)
   this.OnLostFocusCore();
 },
 OnMouseWheel: function(evt){
 },
 OnValidation: function(validationType) {
  if(this.customValidationEnabled && this.isInitialized && _aspxIsExistsElement(this.GetMainElement()) &&
   (this.display == ASPxErrorFrameDisplay.None || this.GetExternalTable())) {
   this.BeginErrorFrameUpdate();
   try {
    this.SetIsValid(true, true );
    this.SetErrorText(this.initialErrorText, true );
    if(this.validateOnLeave || validationType != ASPxValidationType.PersonalOnValueChanged) {
     this.ValidateWithPatterns();
     this.RaiseValidation();
    }
    this.UpdateErrorFrameAndFocus(validationType == ASPxValidationType.PersonalOnValueChanged && this.validateOnLeave && !this.GetIsValid());
   } finally {
    this.EndErrorFrameUpdate();
   }
   this.UpdateValidationSummaries(validationType);
  }
 },
 OnValueChanged: function() {
  var processOnServer = this.RaiseValidationInternal();
  processOnServer = this.RaiseValueChangedEvent() && processOnServer;
  if (processOnServer)
   this.SendPostBackInternal("");
 },
 ParseValue: function() {
 },
 RaisePersonalStandardValidation: function() {
  if (_aspxIsFunction(window.ValidatorOnChange)) {
   var inputElement = this.GetValueInputToValidate();
   if(inputElement && inputElement.Validators)
    window.ValidatorOnChange({ srcElement: inputElement });
  }
 },
 RaiseValidationInternal: function() {
  if (this.isPostBackAllowed() && this.causesValidation && this.validateOnLeave)
   return ASPxClientEdit.ValidateGroup(this.validationGroup);
  else {
   this.OnValidation(ASPxValidationType.PersonalOnValueChanged);
   return this.GetIsValid();
  }
 },
 RaiseValueChangedEvent: function(){
  return this.RaiseValueChanged();
 },
 SendPostBackInternal: function(postBackArg) {
  if (_aspxIsFunction(this.sendPostBackWithValidation))
   this.sendPostBackWithValidation(postBackArg);
  else
   this.SendPostBack(postBackArg);
 },
 SetElementToBeFocused: function() {
  if (this.IsVisible())
   __aspxInvalidEditorToBeFocused = this;
 },
 GetFocusSelectAction: function() {
  return null;
 },
 SetFocus: function() {
  var inputElement = this.GetFocusableInputElement();
  if (!inputElement) return; 
  var isIE9 = __aspxIE && __aspxBrowserVersion >= 9;
  if ((_aspxGetActiveElement() != inputElement || isIE9) && _aspxIsEditorFocusable(inputElement)) {
   _aspxSetFocus(inputElement, this.GetFocusSelectAction());
   if (_aspxGetActiveElement() == inputElement && isIE9)
    window.setTimeout(function() { _aspxClearInputSelection(inputElement); }, 100);
  }
 },
 SetFocusOnError: function() {
  if (__aspxInvalidEditorToBeFocused == this) {
   this.SetFocus();
   __aspxInvalidEditorToBeFocused = null;
  }
 },
 BeginErrorFrameUpdate: function() {
  if(!this.errorFrameUpdateLocked)
   this.errorFrameUpdateLocked = true;
 },
 EndErrorFrameUpdate: function() {
  this.errorFrameUpdateLocked = false;
  var args = this.updateErrorFrameAndFocusLastCallArgs;
  if(args) {
   this.UpdateErrorFrameAndFocus(args[0], args[1]);
   delete this.updateErrorFrameAndFocusLastCallArgs;
  }
 },
 UpdateErrorFrameAndFocus: function(setFocusOnError, ignoreVisibilityCheck, isValid) {
  if(!this.GetEnabled() || !ignoreVisibilityCheck && !this.GetVisible())
   return;
  if(this.errorFrameUpdateLocked) {
   this.updateErrorFrameAndFocusLastCallArgs = [ setFocusOnError, ignoreVisibilityCheck ];
   return;
  }
  if(this.styleDecoration)
   this.styleDecoration.Update();
  if(typeof(isValid) == "undefined")
   isValid = this.GetIsValid();
  var externalTable = this.GetExternalTable();
  var isStaticDisplay = this.display == ASPxErrorFrameDisplay.Static;
  var isErrorFrameDisplayed = this.display != ASPxErrorFrameDisplay.None;
  if(isValid && isErrorFrameDisplayed) {
   if(isStaticDisplay) {
    this.HideErrorCell(true);
    _aspxAddClassNameToElement(externalTable, ASPxEditExternalTableClassNames.ValidStaticTableClassName);
   } else {
    this.HideErrorCell();
    this.SaveControlCellStyles();
    this.ClearControlCellStyles();
    _aspxAddClassNameToElement(externalTable, ASPxEditExternalTableClassNames.ValidDynamicTableClassName);
   }
  } else {
   var editorLocatedWithinVisibleContainer = this.IsVisible();
   if(isErrorFrameDisplayed) {
    if(this.widthCorrectionRequired) {
     if(editorLocatedWithinVisibleContainer)
      this.CollapseControl(); 
     else
      this.ResetControlAdjustment();
    }
    this.UpdateErrorCellContent();
    if(isStaticDisplay) {
     this.ShowErrorCell(true);
     _aspxRemoveClassNameFromElement(externalTable, ASPxEditExternalTableClassNames.ValidStaticTableClassName);
    } else {
     this.EnsureControlCellStylesLoaded();
     this.RestoreControlCellStyles();
     this.ShowErrorCell();
     _aspxRemoveClassNameFromElement(externalTable, ASPxEditExternalTableClassNames.ValidDynamicTableClassName);
    }
   }
   if(editorLocatedWithinVisibleContainer) {
    if(isErrorFrameDisplayed && this.widthCorrectionRequired)
     this.AdjustControl(); 
    if(setFocusOnError && this.setFocusOnError && __aspxInvalidEditorToBeFocused == null)
     this.SetElementToBeFocused();
   }
  }
 },
 ShowErrorCell: function (useVisibilityAttribute) {
  var errorCell = this.GetErrorCell();
  if (errorCell) {
   if (useVisibilityAttribute)
    _aspxSetElementVisibility(errorCell, true);
   else
    _aspxSetElementDisplay(errorCell, true);
  }
 },
 HideErrorCell: function(useVisibilityAttribute) {
  var errorCell = this.GetErrorCell();
  if (errorCell) {
   if (useVisibilityAttribute)
    _aspxSetElementVisibility(errorCell, false);
   else
    _aspxSetElementDisplay(errorCell, false);
  }
 },
 SaveControlCellStyles: function() {
  this.EnsureControlCellStylesLoaded();
 },
 EnsureControlCellStylesLoaded: function() {
  if(typeof(this.controlCellStyles) == "undefined") {
   var controlCell = this.GetControlCell();
   this.controlCellStyles = {
    cssClass: controlCell.className,
    style: this.ExtractElementStyleStringIgnoringVisibilityProps(controlCell)
   };
  }
 },
 ClearControlCellStyles: function() {
  this.ClearElementStyle(this.GetControlCell());
 },
 RestoreControlCellStyles: function() {
  var controlCell = this.GetControlCell();
  var externalTable = this.GetExternalTable();
  if (__aspxWebKitFamily)
   this.MakeBorderSeparateForTable(externalTable);
  controlCell.className = this.controlCellStyles.cssClass;
  controlCell.style.cssText = this.controlCellStyles.style;
  if (__aspxWebKitFamily)
   this.UndoBorderSeparateForTable(externalTable);
 },
 MakeBorderSeparateForTable: function(table) {
  _aspxAddClassNameToElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
 },
 UndoBorderSeparateForTable: function(table) {
  setTimeout(function () {
   _aspxRemoveClassNameFromElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
  }, 0);
 },
 ExtractElementStyleStringIgnoringVisibilityProps: function(element) {
  var savedVisibility = element.style.visibility;
  var savedDisplay = element.style.display;
  element.style.visibility = "";
  element.style.display = "";
  var styleStr = element.style.cssText;
  element.style.visibility = savedVisibility;
  element.style.display = savedDisplay;
  return styleStr;
 },
 ClearElementStyle: function(element) {
  if(!element)
   return;
  element.className = "";
  var excludedAttrNames = [
   "width", "display", "visibility",
   "position", "left", "top", "z-index",
   "margin", "margin-top", "margin-right", "margin-bottom", "margin-left",
   "float", "clear"
  ];
  var savedAttrValues = { };
  for(var i = 0; i < excludedAttrNames.length; i++) {
   var attrName = excludedAttrNames[i];
   var attrValue = element.style[attrName];
   if(attrValue)
    savedAttrValues[attrName] = attrValue;
  }
  element.style.cssText = "";
  for(var styleAttrName in savedAttrValues)
   element.style[styleAttrName] = savedAttrValues[styleAttrName];
 },
 UpdateErrorCellContent: function() {
  if (this.errorDisplayMode.indexOf("t") > -1)
   this.UpdateErrorText();
  if (this.errorDisplayMode == "i")
   this.UpdateErrorImage();
 },
 UpdateErrorImage: function() {
  var image = this.GetErrorImage();
  if (_aspxIsExistsElement(image)) {
   image.alt = this.errorText;
   image.title = this.errorText;
  } else {
   this.UpdateErrorText();
  }
 },
 UpdateErrorText: function() {
  var errorTextCell = this.GetErrorTextCell();
  if(_aspxIsExistsElement(errorTextCell))
   errorTextCell.innerHTML = this.HtmlEncode(this.errorText);
 },
 ValidateWithPatterns: function() {
  if (this.validationPatterns.length > 0) {
   var value = this.GetValue();
   for (var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if (!validator.EvaluateIsValid(value)) {
     this.SetIsValid(false, true );
     this.SetErrorText(validator.errorText, true );
     return;
    }
   }
  }
 },
 OnSpecialKeyDown: function(evt){
  this.RaiseKeyDown(evt);
  var handler = this.keyDownHandlers[evt.keyCode];
  if(handler) 
   return this[handler](evt);
  return false;
 },
 OnSpecialKeyPress: function(evt){
  this.RaiseKeyPress(evt);
  var handler = this.keyPressHandlers[evt.keyCode];
  if(handler) 
   return this[handler](evt);
  if(__aspxNetscapeFamily || __aspxOpera){
   if(evt.keyCode == ASPxKey.Enter)
    return this.enterProcessed;
  }
  return false;
 },
 OnSpecialKeyUp: function(evt){
  this.RaiseKeyUp(evt);
  var handler = this.keyUpHandlers[evt.keyCode];
  if(handler) 
   return this[handler](evt);
  return false;
 },
 OnKeyDown: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyDown(evt);
 },
 OnKeyPress: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyPress(evt);
 },
 OnKeyUp: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyUp(evt);
 },
 RaiseKeyDown: function(evt){
  if(!this.KeyDown.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyDown.FireEvent(this, args);
  }
 },
 RaiseKeyPress: function(evt){
  if(!this.KeyPress.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyPress.FireEvent(this, args);
  }
 },
 RaiseKeyUp: function(evt){
  if(!this.KeyUp.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyUp.FireEvent(this, args);
  }
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseValidation: function() {
  if(this.customValidationEnabled && !this.Validation.IsEmpty()) {
   var currentValue = this.GetValue();
   var args = new ASPxClientEditValidationEventArgs(currentValue, this.errorText, this.GetIsValid());
   this.Validation.FireEvent(this, args);
   this.SetErrorText(args.errorText, true );
   this.SetIsValid(args.isValid, true );
   if(args.value != currentValue)
    this.SetValue(args.value);
  }
 },
 RaiseValueChanged: function(){
  var processOnServer = this.isPostBackAllowed();
  if(!this.ValueChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ValueChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;  
 },
 isPostBackAllowed: function() {
  return this.autoPostBack;
 },
 RequireStyleDecoration: function() {
  this.styleDecoration = new ASPxClientEditStyleDecoration(this);
  this.PopulateStyleDecorationPostfixes();
 }, 
 PopulateStyleDecorationPostfixes: function() {
  this.styleDecoration.AddPostfix("");
 },
 Focus: function(){
  this.SetFocus();
 },
 GetIsValid: function(){
  if((ASPxIdent.IsASPxClientRadioButtonList(this) || _aspxIsExistsElement(this.GetInputElement())) &&
   (this.display == ASPxErrorFrameDisplay.None || _aspxIsExistsElement(this.GetExternalTable())  ))
   return this.isValid;
  else
   return true;
 },
 GetErrorText: function(){
  return this.errorText;
 },
 SetIsValid: function(isValid, validating){
  if (this.customValidationEnabled) {
   this.isValid = isValid;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
  }
 },
 SetErrorText: function(errorText, validating){
  if (this.customValidationEnabled) {
   this.errorText = errorText;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
  }
 },
 Validate: function(){
  this.ParseValue();
  this.OnValidation(ASPxValidationType.PersonalViaScript);
 }
});
ASPxClientEdit.focusedEditorName = "";
ASPxClientEdit.GetFocusedEditor = function(){
 var focusedEditor = aspxGetControlCollection().Get(ASPxClientEdit.focusedEditorName);
 if(focusedEditor && !focusedEditor.focused){
  ASPxClientEdit.SetFocusedEditor(null);
  focusedEditor = null;
 }
 return focusedEditor;
}
ASPxClientEdit.SetFocusedEditor = function(editor){
 ASPxClientEdit.focusedEditorName = editor ? editor.name : "";
}
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {
 __aspxInvalidEditorToBeFocused = null;
 _aspxProcessEditorsInContainer(container, _aspxClearProcessingProc, _aspxClearChoiceCondition, validationGroup, clearInvisibleEditors, true );
 ASPxClientEdit.ClearExternalControlsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {
 var container = document.getElementById(containerId);
 this.ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ClearGroup = function(validationGroup, clearInvisibleEditors) {
 return this.ClearEditorsInContainer(null, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {
 var summaryCollection;
 if(typeof(ASPxClientValidationSummary) != "undefined") {
  summaryCollection = aspxGetClientValidationSummaryCollection();
  summaryCollection.AllowNewErrorsAccepting(validationGroup);
 }
 var validationResult = _aspxProcessEditorsInContainer(container, _aspxValidateProcessingProc, _aspxValidateChoiceCondition, validationGroup, validateInvisibleEditors,
  false );
 validationResult.isValid = ASPxClientEdit.ValidateExternalControlsInContainer(container, validationGroup, validateInvisibleEditors) && validationResult.isValid;
 if(typeof(aspxGetGlobalEvents) != "undefined") {
  if(typeof(validateInvisibleEditors) == "undefined")
   validateInvisibleEditors = false;
  if(typeof(validationGroup) == "undefined")
   validationGroup = null;
  validationResult.isValid = aspxGetGlobalEvents().OnValidationCompleted(container, validationGroup,
   validateInvisibleEditors, validationResult.isValid, validationResult.firstInvalid, validationResult.firstVisibleInvalid);
 }
 if(summaryCollection)
  summaryCollection.ForbidNewErrorsAccepting(validationGroup);
 return validationResult.isValid;
}
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {
 var container = document.getElementById(containerId);
 return this.ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
}
ASPxClientEdit.ValidateGroup = function(validationGroup, validateInvisibleEditors) {
 return this.ValidateEditorsInContainer(null, validationGroup, validateInvisibleEditors);
}
ASPxClientEdit.AreEditorsValid = function(containerOrContainerId, validationGroup, checkInvisibleEditors) {
 var container = typeof(containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 var checkResult = _aspxProcessEditorsInContainer(container, _aspxEditorsValidProcessingProc, _aspxEditorsValidChoiceCondition, validationGroup,
  checkInvisibleEditors, false );
 checkResult.isValid = ASPxClientEdit.AreExternalControlsValidInContainer(containerOrContainerId, validationGroup, checkInvisibleEditors) && checkResult.isValid;
 return checkResult.isValid;
}
ASPxClientEdit.AreExternalControlsValidInContainer = function(containerId, validationGroup, validateInvisibleEditors) {
 if (typeof(ASPxClientHtmlEditor) != "undefined")
  return ASPxClientHtmlEditor.AreEditorsValidInContainer(containerId, validationGroup, validateInvisibleEditors);
 return true;
}
ASPxClientEdit.ClearExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors) {
 if (typeof(ASPxClientHtmlEditor) != "undefined")
  return ASPxClientHtmlEditor.ClearEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
 return true;
}
ASPxClientEdit.ValidateExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors) {
 if (typeof(ASPxClientHtmlEditor) != "undefined")
  return ASPxClientHtmlEditor.ValidateEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
 return true;
}
ASPxClientEditKeyEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(htmlEvent) {
  this.constructor.prototype.constructor.call(this);
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientEditValidationEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(value, errorText, isValid) {
  this.constructor.prototype.constructor.call(this);
  this.errorText = errorText;
  this.isValid = isValid;
  this.value = value;
 }
});
function aspxEGotFocus(name){
 var edit = aspxGetControlCollection().Get(name); 
 if(!edit) return;
 if(!edit.isInitialized){
  var inputElement = edit.GetFocusableInputElement();
  if(inputElement && inputElement == document.activeElement)
   document.activeElement.blur();
  return;
 }
 edit.OnFocus();
}
function aspxELostFocus(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) 
  edit.OnLostFocus();
}
function aspxESGotFocus(name){
 var edit = aspxGetControlCollection().Get(name); 
 if(edit != null)
  edit.OnSpecialFocus();
}
function aspxESLostFocus(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit == null)
  return;
 if(edit.UseDelayedSpecialFocus())
  edit.specialFocusTimer = window.setTimeout(function() { edit.OnSpecialLostFocus(); }, 30);
 else
  edit.OnSpecialLostFocus();
}
function aspxEValueChanged(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnValueChanged();
}
_aspxAttachEventToDocument("mousedown", aspxEMouseDown);
function aspxEMouseDown(evt) {
 var editor = ASPxClientEdit.GetFocusedEditor();
 if(!editor) 
  return;
 var evtSource = _aspxGetEventSource(evt);
 if(editor.OwnerDateEdit && editor.OwnerDateEdit.GetShowTimeSection()) {
  editor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
  return;
 }
 if(editor.IsEditorElement(evtSource) && !editor.IsElementBelongToInputElement(evtSource))
  editor.ForceRefocusEditor();
}
_aspxAttachEventToDocument(__aspxNetscapeFamily ? "DOMMouseScroll" : "mousewheel", aspxEMouseWheel);
function aspxEMouseWheel(evt) {
 var editor = ASPxClientEdit.GetFocusedEditor();
 if (editor != null && _aspxIsExistsElement(editor.GetMainElement()) && editor.focused && editor.receiveGlobalMouseWheel)
  editor.OnMouseWheel(evt);
}
function aspxKBSIKeyDown(name, evt){
 var control = aspxGetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyDown(evt);
  if(isProcessed)
   return _aspxPreventEventAndBubble(evt);
 }
}
function aspxKBSIKeyPress(name, evt){
 var control = aspxGetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyPress(evt);
  if(isProcessed)
   return _aspxPreventEventAndBubble(evt);
 }
}
function aspxKBSIKeyUp(name, evt){
 var control = aspxGetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyUp(evt);
  if(isProcessed)
   return _aspxPreventEventAndBubble(evt);
 }
}
function aspxEKeyDown(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnKeyDown(evt);
 if (__aspxAndroidMobilePlatform && __aspxChrome)
  aspxEKeyPress(name, evt);
}
function aspxEKeyPress(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnKeyPress(evt);
}
function aspxEKeyUp(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnKeyUp(evt);
}
ASPxValidationResult = _aspxCreateClass(null, {
 constructor: function(isValid, firstInvalid, firstVisibleInvalid) {
  this.isValid = isValid;
  this.firstInvalid = firstInvalid;
  this.firstVisibleInvalid = firstVisibleInvalid;
 }
});
function _aspxProcessEditorsInContainer(container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
 var allProcessedSuccessfull = true;
 var firstInvalid = null;
 var firstVisibleInvalid = null;
 var invalidEditorToBeFocused = null;
 aspxGetControlCollection().ForEachControl(function(control) {
  if (ASPxIdent.IsASPxClientEdit(control) && (processDisabledEditors || control.GetEnabled())) {
   var mainElement = control.GetMainElement();
   if (mainElement &&
    (container == null || _aspxGetIsParent(container, mainElement)) &&
    (processInvisibleEditors || control.IsVisible()) &&
    choiceCondition(control, validationGroup)) {
    var isSuccess = processingProc(control);
    if(!isSuccess) {
     allProcessedSuccessfull = false;
     if(firstInvalid == null)
      firstInvalid = control;
     var isVisible = control.IsVisible();
     if(isVisible && firstVisibleInvalid == null)
      firstVisibleInvalid = control;
     if (control.setFocusOnError && invalidEditorToBeFocused == null && isVisible)
      invalidEditorToBeFocused = control;
    }
   }
  }
 }, this);
 if (invalidEditorToBeFocused != null)
  invalidEditorToBeFocused.SetFocus();
 return new ASPxValidationResult(allProcessedSuccessfull, firstInvalid, firstVisibleInvalid);
}
function _aspxClearChoiceCondition(edit, validationGroup) {
 return !_aspxIsExists(validationGroup) || (edit.validationGroup == validationGroup);
}
function _aspxValidateChoiceCondition(edit, validationGroup) {
 return _aspxClearChoiceCondition(edit, validationGroup) && edit.customValidationEnabled;
}
function _aspxEditorsValidChoiceCondition(edit, validationGroup) {
 return _aspxValidateChoiceCondition(edit, validationGroup);
}
function _aspxClearProcessingProc(edit) {
 edit.SetValue(null);
 edit.SetIsValid(true);
 return true;
}
function _aspxValidateProcessingProc(edit) {
 edit.OnValidation(ASPxValidationType.MassValidation);
 return edit.GetIsValid();
}
function _aspxEditorsValidProcessingProc(edit) {
 return edit.GetIsValid();
}
ASPxCheckEditElementHelper = _aspxCreateClass(ASPxCheckableElementHelper, {
 AttachToMainElement: function(internalCheckBox) {
  ASPxCheckableElementHelper.prototype.AttachToMainElement.call(this, internalCheckBox);
  this.AttachToLabelElement(this.GetLabelElement(internalCheckBox.container), internalCheckBox);
 },
 AttachToLabelElement: function(labelElement, internalCheckBox) {
  var _this = this;
  if(labelElement) {
   _aspxAttachEventToElement(labelElement, "click", 
    function (evt) { 
     _this.InvokeClick(internalCheckBox, evt);
    }
   );
   _aspxAttachEventToElement(labelElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
  }
 },
 GetLabelElement: function(container) {
  return _aspxGetChildByTagName(container, "LABEL", 0);
 }
});
ASPxCheckEditElementHelper.Instance = new ASPxCheckEditElementHelper();

var __aspxTEInputSuffix = "_I";
var __aspxTERawInputSuffix = "_Raw";
var __aspxTEPasswordInputClonedSuffix = "_CLND";
var __aspxPasteCheckInterval = 50;
ASPxEditorStretchedInputElementsManager = _aspxCreateClass(null, {
 constructor: function() {
  this.targetEditorNames = { };
 },
 Initialize: function() {
  this.InitializeTargetEditorsList();
 },
 InitializeTargetEditorsList: function() {
  aspxGetControlCollection().ForEachControl(function(control) {
   if(this.targetEditorNames[control.name])
    return;
   if(ASPxIdent.IsASPxClientTextEdit(control) && control.WidthCorrectionRequired()) {
    var inputElement = control.GetInputElement();
    if(inputElement && _aspxIsPercentageSize(inputElement.style.width))
     this.targetEditorNames[control.name] = true;
   }
  }, this);
 },
 HideInputElementsExceptOf: function(exceptedEditor) {
  var collection = aspxGetControlCollection();
  for(var editorName in this.targetEditorNames) {
   if(typeof(editorName) != "string")
    continue;
   var editor = collection.Get(editorName);
   if(!ASPxIdent.IsASPxClientEdit(editor)) continue;
   if(editor && editor != exceptedEditor) {
    var input = editor.GetInputElement();
    if(input) {
     var existentSavedDisplay = input._dxSavedDisplayAttr;
     if(!_aspxIsExists(existentSavedDisplay)) {
      input._dxSavedDisplayAttr = input.style.display;
      input.style.display = "none";
     }
    }
   }   
  }
 },
 ShowInputElements: function() {
  var collection = aspxGetControlCollection();
  for(var editorName in this.targetEditorNames) {
   if(typeof(editorName) != "string")
    continue;
   var editor = collection.Get(editorName);
   if(!ASPxIdent.IsASPxClientEdit(editor)) continue;
   if(editor) {
    var input = editor.GetInputElement();
    if(input) {
     var savedDisplay = input._dxSavedDisplayAttr;
     if(_aspxIsExists(savedDisplay)) {
      input.style.display = savedDisplay;
      _aspxRemoveAttribute(input, "_dxSavedDisplayAttr");
     }
    }
   }
  }
 }
});
var __aspxEditorStretchedInputElementsManager = null;
function _aspxGetEditorStretchedInputElementsManager() {
 if(!__aspxEditorStretchedInputElementsManager)
  __aspxEditorStretchedInputElementsManager = new ASPxEditorStretchedInputElementsManager();
 return __aspxEditorStretchedInputElementsManager;
}
ASPxClientBrowserHelper = {
 SAFARI_SYSTEM_CLASS_NAME: "dxeSafariSys",
 MOBILE_SAFARI_SYSTEM_CLASS_NAME: "dxeIPadSys",
 GetBrowserSpecificSystemClassName: function() {
  if (__aspxSafari)
   return __aspxMacOSMobilePlatform ? this.MOBILE_SAFARI_SYSTEM_CLASS_NAME : this.SAFARI_SYSTEM_CLASS_NAME;
  return "";
 }
},
ASPxClientTextEdit = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);      
  this.isASPxClientTextEdit = true;
  this.nullText = "";
  this.escCount = 0;
  this.raiseValueChangedOnEnter = true;
  this.autoResizeWithContainer = false;
  this.lastChangedValue = null;
  this.passwordNullTextIntervalID = -1;
  this.nullTextInputElement = null;
  this.helpText = "";
  this.helpTextObj = null;  
  this.helpTextStyle = [];
  this.externalTableStyle = [];
  this.helpTextPosition = ASPxPosition.Right;
  this.helpTextMargins = null;
  this.helpTextHAlign = ASPxClientTextEditHelpTextHAlign.Left;
  this.helpTextVAlign = ASPxClientTextEditHelpTextVAlign.Top;
  this.enableHelpTextPopupAnimation = true;
  this.helpTextDisplayMode = ASPxClientTextEditHelpTextDisplayMode.Inline;
  this.maskInfo = null;  
  this.maskValueBeforeUserInput = "";
  this.maskPasteTimerID = -1;
  this.maskPasteLock = false;    
  this.maskPasteCounter = 0;
  this.maskTextBeforePaste = "";    
  this.maskHintHtml = "";
  this.maskHintTimerID = -1;
  this.errorCellPosition = ASPxPosition.Right;
  this.captionPosition = ASPxPosition.Left;
  this.displayFormat = null;
  this.TextChanged = new ASPxClientEvent();
 },
 Initialize: function(){
  this.SaveChangedValue();
  ASPxClientEdit.prototype.Initialize.call(this);
  this.CorrectInputMaxLength();
  this.SubscribeToIeDropEvent();
  if(__aspxWebKitFamily)  
   this.CorrectMainElementWhiteSpaceStyle();
  if(this.GetInputElement().type == "password")
   this.ToggleTextDecoration();
 },
 InlineInitialize: function(){
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(this.maskInfo != null)
   this.InitMask();
  this.ApplyBrowserSpecificClassName();
  this.helpTextInitialize();
  var postHandler = aspxGetPostHandler();
  postHandler.PostFinalization.removeHandlerByControlName(this.name);
  postHandler.PostFinalization.AddHandler(this.OnPost, this);
  if (__aspxIE && __aspxBrowserVersion >= 10 && this.nullText != "")
   this.addIEXButtonEventHandler();
 },
 AdjustControl: function() {
  ASPxClientEdit.prototype.AdjustControl.call(this);
  if(__aspxIE && __aspxBrowserVersion > 8 && !this.isNative)
   this.correctInputElementHeight();
 },
 correctInputElementHeight: function() {
  var mainElement = this.GetMainElement();
  var inputElement = this.GetInputElement();
  if (mainElement) {
   var mainElementHeight = mainElement.style.height;
   var mainElementHeightSpecified = mainElementHeight && mainElementHeight.indexOf('px') !== -1; 
   if(mainElementHeightSpecified) {
    var inputElementHeight = mainElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);    
    var inputElementContainer = inputElement.parentNode;
    inputElementHeight -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(inputElementContainer);
    var mainElementCellspacing = _aspxGetCellSpacing(mainElement);
    if(mainElementCellspacing)
     inputElementHeight -= mainElementCellspacing * 2;
    inputElementHeight -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(inputElement);
    inputElement.style.height = inputElementHeight + "px";
    if (!ASPxIdent.IsASPxClientMemo(this))
     inputElement.style.lineHeight = inputElementHeight + "px";
   }
  }
 },
 addIEXButtonEventHandler: function() {
  var inputElement = this.GetInputElement()
  if (_aspxIsExists(inputElement)) {
   this.isDeleteOrBackspaceKeyClick = false;
   _aspxAttachEventToElement(inputElement, "input", function (evt) {
    if (this.isDeleteOrBackspaceKeyClick) {
     this.isDeleteOrBackspaceKeyClick = false;
     return;
    }
    if (inputElement.value === '') {
     this.SyncRawInputValue();
    }
   }.aspxBind(this));
   _aspxAttachEventToElement(inputElement, "keydown", function (evt) {
    this.isDeleteOrBackspaceKeyClick = (evt.keyCode == ASPxKey.Delete || evt.keyCode == ASPxKey.Backspace);
   }.aspxBind(this));
  }   
 },
 helpTextInitialize: function () {
  if (this.helpText) {
   this.helpTextObj = new ASPxClientTextEditHelpText(this, this.helpTextStyle, this.helpText, this.helpTextPosition,
    this.helpTextHAlign, this.helpTextVAlign, this.helpTextMargins, this.enableHelpTextPopupAnimation, this.helpTextDisplayMode);
  }
 },
 showHelpText: function () {
  if (this.helpTextObj)
   this.helpTextObj.show();
 },
 hideHelpText: function () {
  if (this.helpTextObj)
   this.helpTextObj.hide();
 },
 ApplyBrowserSpecificClassName: function() {
  var mainElement = this.GetMainElement();
  if(_aspxIsExistsElement(mainElement)) {
   var className = ASPxClientBrowserHelper.GetBrowserSpecificSystemClassName();
   if (className)
    mainElement.className += " " + className;
  }
 },
  CorrectMainElementWhiteSpaceStyle: function() {
  var inputElement = this.GetInputElement();
  if(inputElement && inputElement.parentNode) {
   if(this.IsElementHasWhiteSpaceStyle(inputElement.parentNode))
    inputElement.parentNode.style.whiteSpace = "normal";
  }
 },
 IsElementHasWhiteSpaceStyle: function(element) {
  var currentStyle = _aspxGetCurrentStyle(element);
  return currentStyle.whiteSpace == "nowrap" || currentStyle.whiteSpace == "pre";  
 },
 FindInputElement: function(){
  return this.isNative ? this.GetMainElement() : _aspxGetElementById(this.name + __aspxTEInputSuffix);
 },
 GetRawInputElement: function() {
  return _aspxGetElementById(this.name + __aspxTERawInputSuffix);
 },
 DecodeRawInputValue: function(value) {
  return value;
 },
 SetRawInputValue: function(value){
  this.GetRawInputElement().value = value;
 },
 SyncRawInputValue: function() {
  if(this.maskInfo != null)
   this.SetRawInputValue(this.maskInfo.GetValue());
  else
   this.SetRawInputValue(this.GetInputElement().value);
 },
 HasTextDecorators: function() {
  return this.nullText != "" || this.displayFormat != null;
 },
 CanApplyTextDecorators: function(){
  return !this.focused;
 },
 GetDecoratedText: function(value) {
  var isNull = value == null || value === "";
  if (isNull && this.nullText != "") {
   if (this.CanApplyNullTextDecoration) {
    if (this.CanApplyNullTextDecoration())
     return this.nullText;
   } else {
    return this.nullText;
   }
  }
  if(this.displayFormat != null)
   return ASPxFormatter.Format(this.displayFormat, value);
  if(this.maskInfo != null)
   return this.maskInfo.GetText();
  if(value == null)
   return "";
  return value;
 },
 ToggleTextDecoration: function() {
  if (this.HasTextDecorators()) {
   if (this.focused) {
    var input = this.GetInputElement();
    var oldValue = input.value;
    var sel = _aspxGetExtSelectionInfo(input);
    this.ToggleTextDecorationCore();
    if (oldValue != input.value) {
     if (sel.startPos == 0 && sel.endPos == oldValue.length)
      sel.endPos = input.value.length;
     else
      sel.endPos = sel.startPos;
     _aspxSetInputSelection(input, sel.startPos, sel.endPos);
    }
   } else
    this.ToggleTextDecorationCore();
  }
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {   
   this.ApplyMaskInfo(false);
  } else {
   var input = this.GetInputElement();
   var rawValue = this.GetRawInputElement().value;
   var value = this.CanApplyTextDecorators() ? this.GetDecoratedText(rawValue) : rawValue;
   if(input.value != value) {
    if(input.type == "password")
     this.TogglePasswordInputTextDecoration(value);
    else
     input.value = value;
   }
  }
 },
 GetPasswordNullTextInputElement: function() {
  if(!_aspxIsExistsElement(this.nullTextInputElement)) {
   var inputElement = this.GetInputElement();
   var nullTextInputElement = document.createElement("INPUT");
   nullTextInputElement.className = inputElement.className;
   nullTextInputElement.style.cssText = inputElement.style.cssText;
   nullTextInputElement.id = inputElement.id + __aspxTEPasswordInputClonedSuffix;
   nullTextInputElement.type = "text";
   var onFocusEventHandler = function() {
    this.LockFocusEvents();
    _aspxChangeStyleAttribute(this.GetInputElement(), "display", "");
    if(this.GetInputElement().focus)
     this.GetInputElement().focus();
    else
     window.setTimeout(function() {
      aspxGetControlCollection().Get(this.name).SetFocus();
     }.aspxBind(this), 0);
    _aspxChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
    this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
   }.aspxBind(this);
   nullTextInputElement.onfocus = onFocusEventHandler;
   this.nullTextInputElement = nullTextInputElement;
  }
  return this.nullTextInputElement;
 },
 TogglePasswordNullTextTimeoutChecker: function() {
  if(this.passwordNullTextIntervalID < 0) {
   var timeoutChecker = function() {
    var inputElement = this.GetInputElement();
    if(aspxGetControlCollection().GetByName(this.name) !== this || inputElement == null) {
     window.clearTimeout(this.passwordNullTextIntervalID);
     this.passwordNullTextIntervalID = -1;
     return;
    } else {
     if(!this.focused) {
      if(inputElement.value != "") {
       if(inputElement.style.display == "none") {
        this.SetValue(inputElement.value);
        this.UnhidePasswordInput();
       }
      } else {
       if(inputElement.style.display != "none") {
        this.SetValue(null);
        this.HidePasswordInput();
       }
      }
     }
    }
   }.aspxBind(this);
   this.passwordNullTextIntervalID = window.setInterval(timeoutChecker, 100);
  }
 },
 TogglePasswordInputTextDecoration: function(value) {
  var inputElement = this.GetInputElement();
  var nullTextInputElement = this.GetPasswordNullTextInputElement();
  nullTextInputElement.value = value;
  var parentNode = inputElement.parentNode;
  if(_aspxArrayIndexOf(parentNode.childNodes, nullTextInputElement) < 0) {
   _aspxChangeStyleAttribute(nullTextInputElement, "display", "none");
   parentNode.appendChild(nullTextInputElement);
  }
  this.HidePasswordInput();
  this.TogglePasswordNullTextTimeoutChecker();
 },
 HidePasswordInput: function() {
  _aspxChangeStyleAttribute(this.GetInputElement(), "display", "none");
  _aspxChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "");
  this.ReplaceAssociatedIdInLabels(this.GetInputElement().id, this.GetPasswordNullTextInputElement().id);
 },
 UnhidePasswordInput: function() {
  _aspxChangeStyleAttribute(this.GetInputElement(), "display", "");
  _aspxChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
  this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
 },
 ReplaceAssociatedIdInLabels: function(oldId, newId) {
  var labels = document.getElementsByTagName("LABEL");
  for(var i = 0; i < labels.length; i++) {
   if(labels[i].attributes["for"] !== undefined && labels[i].attributes["for"].value == oldId)
    labels[i].attributes["for"].value = newId;
  }
 },
 GetFormattedText: function() {
  var value = this.GetValue();
  var isNull = value == null || value === "";
  if(isNull && this.nullText != "")
   return this.GetText();
  return this.GetDecoratedText(value);
 },
 PopulateStyleDecorationPostfixes: function() {
  ASPxClientEdit.prototype.PopulateStyleDecorationPostfixes.call(this);
  this.styleDecoration.AddPostfix(__aspxTEInputSuffix);
 },
 GetValue: function() {
  var value = null;
  if(this.maskInfo != null)
   value = this.maskInfo.GetValue();
  else if(this.HasTextDecorators())
   value = this.GetRawInputElement().value;
  else
   value = this.GetInputElement().value;
  return (value == "" && this.convertEmptyStringToNull) ? null : value;
 },
 SetValue: function(value) {
  if(value == null) value = "";
  if(this.maskInfo != null) {
   this.maskInfo.SetValue(value);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } 
  else if(this.HasTextDecorators()) {
   this.SetRawInputValue(value);
   this.GetInputElement().value = this.CanApplyTextDecorators() && this.GetInputElement().type != "password" ? this.GetDecoratedText(value) : value;
  }
  else
   this.GetInputElement().value = value;
  if(this.styleDecoration)
   this.styleDecoration.Update();   
  this.SaveChangedValue();   
 },
 SetVisible: function(visible) {
  ASPxClientEdit.prototype.SetVisible.call(this, visible);
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   if(visible)
    this.showHelpText();
   else
    this.hideHelpText();
  }
 },
 CollapseControl: function() {
  if(!this.IsAdjustmentRequired()) return;
  var mainElement = this.GetMainElement();
  if (!_aspxIsExistsElement(mainElement))
   return;
  if (this.WidthCorrectionRequired()) {
   this.GetInputElement().style.width = "0";
   this.ResetControlAdjustment();
  }
 },
 CorrectEditorWidth: function() {
  var inputElement = this.GetInputElement();
  var stretchedInputsManager = _aspxGetEditorStretchedInputElementsManager();
  var currentAciveElement = null;
  if (this.IsRestoreActiveElementAfterWidthCorrection()) 
   currentAciveElement = _aspxGetActiveElement();
  try {
   stretchedInputsManager.HideInputElementsExceptOf(this);
   _aspxSetOffsetWidth(inputElement, _aspxGetClearClientWidth(_aspxFindOffsetParent(inputElement)) - this.GetInputWidthCorrection());
  } finally {
   stretchedInputsManager.ShowInputElements();
  }
  if (this.IsRestoreActiveElementAfterWidthCorrection()) 
   this.RestoreActiveElement(currentAciveElement);
 },
 UnstretchInputElement: function(){
  var inputElement = this.GetInputElement();
  var mainElement = this.GetMainElement();
  var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
  if (_aspxIsExistsElement(mainElement) && _aspxIsExistsElement(inputElement) && _aspxIsExists(mainElementCurStyle) && 
   inputElement.style.width == "100%" &&
   (mainElementCurStyle.width == "" || mainElementCurStyle.width == "auto"))
   inputElement.style.width = "";
 },
 RestoreActiveElement: function(activeElement) {
  if (activeElement && activeElement.setActive && activeElement.tagName != "IFRAME")
   activeElement.setActive();
 },
 IsRestoreActiveElementAfterWidthCorrection: function() {
  return __aspxIE && __aspxBrowserVersion <= 7;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseTextChanged(processOnServer);
  return processOnServer;
 },
 GetInputWidthCorrection: function(){
  return 0;
 },
 InitMask: function() {
  var raw = String(this.GetRawInputElement().value);  
  this.SetValue(raw.length ? this.DecodeRawInputValue(raw) : this.maskInfo.GetValue());
  this.validationPatterns.unshift(new ASPxMaskValidationPattern(this.maskInfo.errorText, this.maskInfo));
 },
 SetMaskPasteTimer: function() {
  this.ClearMaskPasteTimer();
  this.maskPasteTimerID = _aspxSetInterval("aspxMaskPasteTimerProc('" + this.name + "')", __aspxPasteCheckInterval);
 },
 ClearMaskPasteTimer: function() {
  this.maskPasteTimerID = _aspxClearInterval(this.maskPasteTimerID);
 },
 SavePrevMaskValue: function() {
  this.maskValueBeforeUserInput = this.maskInfo.GetValue();
 },
 FillMaskInfo: function() {
  var input = this.GetInputElement();
  if(!input) return; 
  var sel = _aspxGetSelectionInfo(input);
  this.maskInfo.SetCaret(sel.startPos, sel.endPos - sel.startPos);  
 },
 ApplyMaskInfo: function(applyCaret) {
  this.SyncRawInputValue();
  var input = this.GetInputElement();
  var text = this.GetMaskDisplayText();
  this.maskTextBeforePaste = text;
  if(input.value != text)
   input.value = text;
  if(applyCaret)
   _aspxSetInputSelection(input, this.maskInfo.caretPos, this.maskInfo.caretPos + this.maskInfo.selectionLength);
 },
 GetMaskDisplayText: function() {
  if(!this.focused && this.HasTextDecorators())
   return this.GetDecoratedText(this.maskInfo.GetValue());
  return this.maskInfo.GetText();
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  return _aspxEventPrevented(htmlEvent);
 }, 
 HandleMaskKeyDown: function(evt) {
  var keyInfo = _aspxMaskManager.CreateKeyInfoByEvent(evt);
  _aspxMaskManager.keyCancelled = this.ShouldCancelMaskKeyProcessing(evt, keyInfo);
  if(_aspxMaskManager.keyCancelled) {
   _aspxPreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;
  this.FillMaskInfo();  
  var canHandle = _aspxMaskManager.CanHandleControlKey(keyInfo);   
  _aspxMaskManager.savedKeyDownKeyInfo = keyInfo;
  if(canHandle) {   
   _aspxMaskManager.OnKeyDown(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
   _aspxPreventEvent(evt);
  }
  _aspxMaskManager.keyDownHandled = canHandle;
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 HandleMaskKeyPress: function(evt) {
  var keyInfo = _aspxMaskManager.CreateKeyInfoByEvent(evt);
  _aspxMaskManager.keyCancelled = _aspxMaskManager.keyCancelled || this.ShouldCancelMaskKeyProcessing(evt, _aspxMaskManager.savedKeyDownKeyInfo);
  if(_aspxMaskManager.keyCancelled) {
   _aspxPreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;  
  var printable = _aspxMaskManager.savedKeyDownKeyInfo != null && _aspxMaskManager.IsPrintableKeyCode(_aspxMaskManager.savedKeyDownKeyInfo);
  if(printable) {
   _aspxMaskManager.OnKeyPress(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
  }
  if(printable || _aspxMaskManager.keyDownHandled)   
   _aspxPreventEvent(evt); 
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 MaskPasteTimerProc: function() {
  if(this.maskPasteLock) return;
  this.maskPasteCounter++;
  var inputElement = this.inputElement;
  if(!inputElement || this.maskPasteCounter > 40) {
   this.maskPasteCounter = 0;
   inputElement = this.GetInputElement();
   if(!_aspxIsExistsElement(inputElement)) {
    this.ClearMaskPasteTimer();
    return;
   }
  }
  if(this.maskTextBeforePaste != inputElement.value && this.maskInfo != null) {
   this.maskInfo.ProcessPaste(inputElement.value, _aspxGetSelectionInfo(inputElement).endPos);
   this.ApplyMaskInfo(true);
  }
  if(!this.focused)
   this.ClearMaskPasteTimer();
 },
 BeginShowMaskHint: function() {  
  if(!this.readOnly && this.maskHintTimerID == -1)
   this.maskHintTimerID = window.setInterval(aspxMaskHintTimerProc, 500);
 },
 EndShowMaskHint: function() {
  window.clearInterval(this.maskHintTimerID);
  this.maskHintTimerID = -1;
 },
 MaskHintTimerProc: function() {  
  if(this.maskInfo) {
   this.FillMaskInfo();
   this.UpdateMaskHintHtml();
  } else {
   this.EndShowMaskHint();
  }
 },
 UpdateMaskHintHtml: function() {  
  var hint =  this.GetMaskHintElement();
  if(!_aspxIsExistsElement(hint))
   return;
  var html = _aspxMaskManager.GetHintHtml(this.maskInfo);
  if(html == this.maskHintHtml)
   return;
  if(html != "") {
   var mainElement = this.GetMainElement();
   if(_aspxIsExistsElement(mainElement)) {
    hint.innerHTML = html;
    hint.style.position = "absolute";  
    hint.style.left = _aspxPrepareClientPosForElement(_aspxGetAbsoluteX(mainElement), mainElement, true) + "px";
    hint.style.top = (_aspxPrepareClientPosForElement(_aspxGetAbsoluteY(mainElement), mainElement, false) + mainElement.offsetHeight + 2) + "px";
    hint.style.display = "block";    
   }   
  } else {
   hint.style.display = "none";
  }
  this.maskHintHtml = html;
 },
 HideMaskHint: function() {
  var hint =  this.GetMaskHintElement();
  if(_aspxIsExistsElement(hint))
   hint.style.display = "none";
  this.maskHintHtml = "";
 },
 GetMaskHintElement: function() {
  return _aspxGetElementById(this.name + "_MaskHint");
 },
 OnFocus: function() {
  if(this.maskInfo != null)
   this.SetMaskPasteTimer();
  ASPxClientEdit.prototype.OnFocus.call(this);
 },
 OnMouseWheel: function(evt){
  if(this.readOnly || this.maskInfo == null) return;
  this.FillMaskInfo();
  _aspxMaskManager.OnMouseWheel(this.maskInfo, _aspxGetWheelDelta(evt) < 0 ? -1 : 1);
  this.ApplyMaskInfo(true);
  _aspxPreventEvent(evt);
  this.UpdateMaskHintHtml();
 }, 
 OnBrowserWindowResize: function(evt) {
  if(!this.autoResizeWithContainer)
   this.AdjustControl();
 },
 IsValueChanged: function() {
    return this.GetValue() != this.lastChangedValue; 
 },
 OnKeyDown: function(evt) {        
  if(__aspxIE && _aspxGetKeyCode(evt) == ASPxKey.Esc) {   
   if(++this.escCount > 1) {
    _aspxPreventEvent(evt);
    return;
   }
  } else 
   this.escCount = 0;
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
  if(!this.IsRaiseStandardOnChange(evt)) {
   if(!this.readOnly && this.maskInfo != null)
    this.HandleMaskKeyDown(evt);
  }
 },
 OnKeyPress: function(evt) {
  ASPxClientEdit.prototype.OnKeyPress.call(this, evt);
  if(!this.readOnly && this.maskInfo != null && !this.IsRaiseStandardOnChange(evt))
   this.HandleMaskKeyPress(evt);
  if(this.NeedOnKeyEventEnd(evt, true))
   this.OnKeyEventEnd(evt);
 },
 OnKeyUp: function(evt) {
  if (__aspxFirefox && !this.focused && _aspxGetKeyCode(evt) === ASPxKey.Tab)
   return;
  if(this.NeedOnKeyEventEnd(evt, false)) 
   this.OnKeyEventEnd(evt);
  ASPxClientEdit.prototype.OnKeyUp.call(this, evt);
 },
 NeedOnKeyEventEnd: function(evt, isKeyPress) { 
  var handleKeyPress = this.maskInfo != null && evt.keyCode == ASPxKey.Enter;
  return handleKeyPress == isKeyPress;
 },
 OnKeyEventEnd: function(evt){
  if(!this.readOnly) {
   if(this.IsRaiseStandardOnChange(evt))
    this.RaiseStandardOnChange();
   if(this.HasTextDecorators())
    this.SyncRawInputValue();
  }
 },
 IsRaiseStandardOnChange: function(evt){
  return !this.specialKeyboardHandlingUsed && this.raiseValueChangedOnEnter && evt.keyCode == ASPxKey.Enter;
 },
 GetFocusSelectAction: function() {
  if(this.maskInfo)
   return "start";
  return "all"; 
 },
 CorrectFocusWhenDisabled: function() {
  if(!this.GetEnabled()) {
   var inputElement = this.GetInputElement();
   if(inputElement)
    inputElement.blur();
   return true;
  }
  return false;
 },
 OnFocusCore: function() {
  if(this.CorrectFocusWhenDisabled())
   return;
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnFocusCore.call(this);
  this.CorrectInputMaxLength(true);
  if(this.maskInfo != null) {
   this.SavePrevMaskValue();
   this.BeginShowMaskHint();
  }
  if(!wasLocked)
   this.ToggleTextDecoration();
  if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.showHelpText();
 },
 OnLostFocusCore: function() {
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnLostFocusCore.call(this);
  this.CorrectInputMaxLength();
  if(this.maskInfo != null) {
   this.EndShowMaskHint();
   this.HideMaskHint();   
   if(this.maskInfo.ApplyFixes(null))
    this.ApplyMaskInfo(false);
   this.RaiseStandardOnChange();
  }
  if(!wasLocked)
   this.ToggleTextDecoration();
  this.escCount = 0;
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.hideHelpText();
 },
 InputMaxLengthCorrectionRequired: function() {
  return __aspxIE && __aspxBrowserVersion >= 10 && !this.isNative;
 },
 CorrectInputMaxLength: function (onFocus) {
  if (this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   if (!_aspxIsExists(this.inputMaxLength))
    this.inputMaxLength = input.maxLength;
   input.maxLength = onFocus ? this.inputMaxLength : -1;
  }
 },
 SubscribeToIeDropEvent: function() {
  if(this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   _aspxAttachEventToElement(input, "drop", function(e) { this.CorrectInputMaxLength(true); }.aspxBind(this));
  }
 },
 OnValueChanged: function() { 
  if(this.maskInfo != null) {
   if(this.maskInfo.GetValue() == this.maskValueBeforeUserInput) 
    return;
   this.SavePrevMaskValue();
  }
  if(this.HasTextDecorators())
   this.SyncRawInputValue();
  if(!this.IsValueChanged()) return;
  this.SaveChangedValue(); 
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 }, 
 OnTextChanged: function() {
 },
 SaveChangedValue: function() {
  this.lastChangedValue = this.GetValue();
 },
 RaiseStandardOnChange: function(){
  var element = this.GetInputElement();
  if(element && element.onchange) {
   element.onchange({ target: this.GetInputElement() });
  }
 },
 RaiseTextChanged: function(processOnServer){
  if(!this.TextChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.TextChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;  
 },
 GetText: function(){
  if(this.maskInfo != null) {
   return this.maskInfo.GetText();
  } else {
   var value = this.GetValue();
   return value != null ? value : "";
  }
 },
 SetText: function (value){
  if(this.maskInfo != null) {
   this.maskInfo.SetText(value);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } else {
   this.SetValue(value);
  }
 },
 SelectAll: function() {
  this.SetSelection(0, -1, false);
 },
 SetCaretPosition: function(pos) {
  var inputElement = this.GetInputElement();
  _aspxSetCaretPosition(inputElement, pos);
 },
 SetSelection: function(startPos, endPos, scrollToSelection) { 
  var inputElement = this.GetInputElement();
  _aspxSetSelection(inputElement, startPos, endPos, scrollToSelection);
 },
 ChangeEnabledAttributes: function(enabled){
  var inputElement = this.GetInputElement();
  if(inputElement){
   this.ChangeInputEnabledAttributes(inputElement, _aspxChangeAttributesMethod(enabled), enabled);
   if(this.specialKeyboardHandlingUsed)
    this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
   this.ChangeInputEnabled(inputElement, enabled, this.readOnly);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  if(!this.isNative) {
   var sc = aspxGetStateController();
   sc.SetElementEnabled(this.GetMainElement(), enabled);
   sc.SetElementEnabled(this.GetInputElement(), enabled);
  }
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  if(this.UseReadOnlyForDisabled())
   element.readOnly = !enabled || readOnly;
  else
   element.disabled = !enabled;
 },
 ChangeInputEnabledAttributes: function(element, method, enabled){
  if(enabled && __aspxWebKitFamily && element.tabIndex == -1)
   element.tabIndex = null;
  method(element, "tabIndex");
  if(!enabled) element.tabIndex = -1;
  method(element, "onclick");
  if(!this.NeedFocusCorrectionWhenDisabled())
   method(element, "onfocus");
  method(element, "onblur");
  method(element, "onkeydown");
  method(element, "onkeypress");
  method(element, "onkeyup");
 },
 UseReadOnlyForDisabled: function() {
  return (__aspxIE && __aspxBrowserVersion < 10) && !this.isNative;
 },
 NeedFocusCorrectionWhenDisabled: function(){
  return (__aspxIE && __aspxBrowserVersion < 10) && !this.isNative;
 },
 OnPost: function() {
  if(this.GetEnabled() || !this.UseReadOnlyForDisabled() || aspxGetPostHandler().dxCallbackHandled)
   return;
  var inputElement = this.GetInputElement();
  if(inputElement) {
   var inputName = inputElement.name;
   inputElement.name = "disabledWithReadOnly[]";
   window.setTimeout(function() {
    inputElement.name = inputName;
   }.aspxBind(this), 0);
  }
 }
});
ASPxIdent.IsASPxClientTextEdit = function(obj) {
 return !!obj.isASPxClientTextEdit;
};
ASPxMaskValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
 constructor: function(errorText, maskInfo) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.maskInfo = maskInfo;
 },
 EvaluateIsValid: function(value) {
  return this.maskInfo.IsValid();
 }
});
ASPxClientTextBoxBase = _aspxCreateClass(ASPxClientTextEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetHeight = false;
  this.sizingConfig.adjustControl = true;
 }
});
ASPxClientTextBox = _aspxCreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientTextBox = true;
 }
});
ASPxClientTextBox.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientTextBox = function(obj) {
 return !!obj.isASPxClientTextBox;
};
var __aspxMMinHeight = 34;
ASPxClientMemo = _aspxCreateClass(ASPxClientTextEdit, { 
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);        
  this.isASPxClientMemo = true;
  this.raiseValueChangedOnEnter = false;
  this.maxLength = 0;
  this.pasteTimerID = -1;
  this.pasteTimerActivatorCount = 0;
 },
 Initialize: function() {
  this.SaveChangedValue();
  this.maxLengthRestricted = this.maxLength > 0;
 },
 CutString: function() {
  var text = this.GetText();
  if(text.length > this.maxLength) {
   text = text.substring(0, this.maxLength);
   this.SetText(text);
  }
 },
 EventKeyCodeChangesTheInput: function(evt){
  if(_aspxIsPasteShortcut(evt))
   return true;
  else if(evt.ctrlKey)
   return false;
  var keyCode = _aspxGetKeyCode(evt);
  var isSystemKey = ASPxKey.Windows <= keyCode && keyCode <= ASPxKey.ContextMenu;
  var isFKey = ASPxKey.F1 <= keyCode && keyCode <= 127; 
  return ASPxKey.Delete < keyCode && !isSystemKey && !isFKey || keyCode == ASPxKey.Enter || keyCode == ASPxKey.Space;
 },
 OnTextChangingCheck: function() {
  if(this.maxLengthRestricted)  
   this.CutString(); 
 },
 StartTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   if (this.pasteTimerActivatorCount == 0) 
    this.SetTextChangingTimer();
   this.pasteTimerActivatorCount ++;
  }
 },
 EndTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   this.pasteTimerActivatorCount --;
   if(this.pasteTimerActivatorCount == 0) 
    this.ClearTextChangingTimer();
  }
 },
 CollapseControl: function() {
  if(!this.IsAdjustmentRequired()) return;
  var mainElement = this.GetMainElement();
  var inputElement = this.GetInputElement();
  if (!_aspxIsExistsElement(mainElement) || !_aspxIsExistsElement(inputElement))
   return;
  ASPxClientTextEdit.prototype.CollapseControl.call(this);
  var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
  if (this.heightCorrectionRequired && mainElement && inputElement) {
   if (mainElement.style.height == "100%" || mainElementCurStyle.height == "100%") {
    mainElement.style.height = "0";
    mainElement.wasCollapsed = true;
   }
   inputElement.style.height = "0";
  }
 },
 CorrectEditorHeight: function() {
  var mainElement = this.GetMainElement();
  if(mainElement.wasCollapsed) {
   mainElement.wasCollapsed = null;
   _aspxSetOffsetHeight(mainElement, _aspxGetClearClientHeight(_aspxFindOffsetParent(mainElement)));
  }
  if(!this.isNative) {
   var inputElement = this.GetInputElement();
   var inputClearClientHeight = _aspxGetClearClientHeight(_aspxFindOffsetParent(inputElement));
   if(__aspxIE) {
    inputClearClientHeight -= 2;
    var calculatedMainElementStyle = _aspxGetCurrentStyle(mainElement);
    inputClearClientHeight += _aspxPxToInt(calculatedMainElementStyle.borderTopWidth) + _aspxPxToInt(calculatedMainElementStyle.borderBottomWidth);
   }
   if(inputClearClientHeight < __aspxMMinHeight)
    inputClearClientHeight = __aspxMMinHeight;
   _aspxSetOffsetHeight(inputElement, inputClearClientHeight);
   mainElement.style.height = "100%";
  }
 },
 SetWidth: function(width) {
  this.constructor.prototype.SetWidth.call(this, width);
  if(__aspxIE)
   this.AdjustControl();
 },
 SetHeight: function(height) {
  this.GetInputElement().style.height = "1px";
  this.constructor.prototype.SetHeight.call(this, height);
  this.GetInputElement().style.height = this.GetMainElement().clientHeight + "px";
 },
 ClearErrorFrameElementsStyles: function() {
  var textarea = this.GetInputElement();
  if(!textarea)
   return;
  var scrollBarPosition = textarea.scrollTop;
  ASPxClientTextEdit.prototype.ClearErrorFrameElementsStyles.call(this);
  if(__aspxFirefox)
   textarea.scrollTop = scrollBarPosition;
 },
 AllowPreventingDefaultEnterBehavior: function() {
  return false; 
 },
 OnMouseOver: function() {
  this.StartTextChangingTimer();
 },  
 OnMouseOut: function() {
  this.EndTextChangingTimer();
 },   
 OnFocus: function() {  
  this.StartTextChangingTimer();
  ASPxClientEdit.prototype.OnFocus.call(this);
 },
 OnLostFocus: function() {
  this.EndTextChangingTimer();
  ASPxClientEdit.prototype.OnLostFocus.call(this);
 },
 OnKeyDown: function(evt) { 
  if(this.maxLengthRestricted){
   var selection = _aspxGetSelectionInfo(this.GetInputElement()); 
   var noCharToReplace = selection.startPos == selection.endPos;
   if(this.GetText().length >= this.maxLength && noCharToReplace && this.EventKeyCodeChangesTheInput(evt)) {
    return _aspxPreventEvent(evt);
   }
  }
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
 },
 SetTextChangingTimer: function() {
  this.pasteTimerID  = _aspxSetInterval(function () { this.OnTextChangingCheck(); }.aspxBind(this), __aspxPasteCheckInterval);
 },
 ClearTextChangingTimer: function() {
  this.pasteTimerID = _aspxClearInterval(this.pasteTimerID);
 }
});
function aspxMMMouseOut(name, evt) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOut(evt);
}
function aspxMMMouseOver(name, evt) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOver(evt);
}
ASPxClientMemo.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientMemo = function(obj) {
 return !!obj.isASPxClientMemo;
};
ASPxClientButtonEditBase = _aspxCreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);        
  this.allowUserInput = true;
  this.allowMouseWheel = true;
  this.buttonCount = 0;
  this.ButtonClick = new ASPxClientEvent();
 },
 GetInputWidthCorrection: function(){
  if(__aspxIE && __aspxBrowserVersion <= 7){
   var mainElement = this.GetMainElement();
   var cellSpacing = _aspxGetAttribute(mainElement, "cellSpacing");
   if(cellSpacing === "0")
    return 1;
  }
  return 0;
 },
 GetButton: function(number) {
  return this.GetChild("_B" + number);
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return false;
 },
 OnButtonClick: function(number){
  var processOnServer = this.RaiseButtonClick(number);
  if (!this.ProcessInternalButtonClick(number) && processOnServer)
   this.SendPostBack('BC:' + number);
 },
 OnKeyPress: function(evt) {
  if(this.allowUserInput)
   ASPxClientTextBoxBase.prototype.OnKeyPress.call(this, evt);
 },
 RaiseButtonClick: function(number){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ButtonClick");
  if(!this.ButtonClick.IsEmpty()){
   var args = new ASPxClientButtonEditClickEventArgs(processOnServer, number);
   this.ButtonClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element) 
    this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  }
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledStateItems.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element) 
    aspxGetStateController().SetElementEnabled(element, enabled);
  }
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
  method(element, "on" + ASPxClientTouchUI.touchMouseDownEventName);
  method(element, "on" + ASPxClientTouchUI.touchMouseUpEventName);
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || !this.allowUserInput);
 }
});
ASPxClientButtonEdit = _aspxCreateClass(ASPxClientButtonEditBase, {
});
ASPxClientButtonEdit.Cast = ASPxClientControl.Cast;
ASPxClientButtonEditClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, buttonIndex){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.buttonIndex = buttonIndex;
 }
});
function aspxETextChanged(name) { 
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnTextChanged(); 
}
function aspxBEClick(name,number){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnButtonClick(number);
}
function aspxMaskPasteTimerProc(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null && edit.maskInfo) 
  edit.MaskPasteTimerProc();
}
function aspxMaskHintTimerProc() {
 var focusedEditor = ASPxClientEdit.GetFocusedEditor();
 if(focusedEditor != null && _aspxIsFunction(focusedEditor.MaskHintTimerProc))
  focusedEditor.MaskHintTimerProc();
}
function _aspxSetFocusToTextEditWithDelay(name) {
 _aspxSetTimeout(function() {
  var edit = aspxGetControlCollection().Get(name);
  if(!edit)
   return;
  __aspxIE ? edit.SetCaretPosition(0) : edit.SetFocus();
 }, 500);
}
ASPxPosition = {
 Left: "Left",
 Right: "Right",
 Top: "Top",
 Bottom: "Bottom"
}
ASPxClientTextEditHelpTextHAlign = {
 Left: "Left",
 Right: "Right",
 Center: "Center"
}
ASPxClientTextEditHelpTextVAlign = {
 Top: "Top",
 Bottom: "Bottom",
 Middle: "Middle"
}
ASPxClientTextEditHelpTextDisplayMode = {
 Inline: "Inline",
 Popup: "Popup"
}
ASPxClientTextEditHelpTextConsts = {
 VERTICAL_ORIENTATION_CLASS_NAME: "dxeVHelpTextSys",
 HORIZONTAL_ORIENTATION_CLASS_NAME: "dxeHHelpTextSys"
}
ASPxClientTextEditHelpText = _aspxCreateClass(null, {
 constructor: function (editor, helpTextStyle, helpText, position, hAlign, vAlign, margins, animationEnabled, helpTextDisplayMode) {
  this.hAlign = hAlign;
  this.vAlign = vAlign;
  this.animationEnabled = animationEnabled;
  this.displayMode = helpTextDisplayMode;
  this.editor = editor;
  this.editorMainElement = editor.GetMainElement();
  this.margins = margins ? { Top: margins[0], Right: margins[1], Bottom: margins[2], Left: margins[3] } : null;
  this.defaultMargins = { Top: 10, Right: 10, Bottom: 10, Left: 10 };
  this.position = position;
  this.helpTextElement = this.createHelpTextElement();
  this.setHelpTextZIndex(true);
  this.prepareHelpTextElement(helpTextStyle, helpText);
 },
 getRows: function (table) {
  return _aspxGetChildNodesByTagName(table, "TR");
 },
 getCells: function (row) {
  return _aspxGetChildNodesByTagName(row, "TD");
 },
 getCellByIndex: function(row, cellIndex) {
  return this.getCells(row)[cellIndex];
 },
 getCellIndex: function(row, cell) {
  var cells = this.getCells(row);
  for(var i = 0; i < cells.length; i++) {
   if(cells[i] === cell)
    return i;
  }
 },
 isHorizontal: function(position) {
  return position === ASPxPosition.Left || position === ASPxPosition.Right;
 },
 isVertical: function (position) {
  return position === ASPxPosition.Top || position === ASPxPosition.Bottom;
 },
 createEmptyCell: function(assignClassName) {
  var cell = document.createElement("TD");
  if (assignClassName)
   cell.className = "dxeFakeEmptyCell";
  return cell;
 },
 addHelpTextCellToExternalTableWithTwoCells: function (captionCell, errorCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = this.isVertical(this.position) ? document.createElement("TR") : null;
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Left && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Right && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (this.position === ASPxPosition.Bottom) {
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
    errorTableBody.appendChild(helpTextRow);
   }
  }
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Right) {
   if (captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Left || captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Top
    || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Right) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell());
   }
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Bottom || captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Left) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
  }
  if (this.position === ASPxPosition.Left) {
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Right
    || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Left) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(), tableRows[0].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(errorCellPosition === ASPxPosition.Top), tableRows[0].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(errorCellPosition !== ASPxPosition.Top), tableRows[2].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Top) {
    tableRows[2].insertBefore(helpTextCell, tableRows[2].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(false), tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(false), tableRows[2].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Left || captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Bottom
    || captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Right) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(), tableRows[1].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Left && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
    var emptyCellParentRow = errorCellPosition === ASPxPosition.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if (this.position === ASPxPosition.Right) {
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(errorCellPosition === ASPxPosition.Top));
    tableRows[2].appendChild(this.createEmptyCell(errorCellPosition !== ASPxPosition.Top));
   }
   if (captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Top) {
    tableRows[2].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(false));
    tableRows[1].appendChild(this.createEmptyCell(true));
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell(true));
    tableRows[2].appendChild(this.createEmptyCell(false));
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Right) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
   if (captionPosition === ASPxPosition.Right && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell);
    var emptyCellParentRow = errorCellPosition === ASPxPosition.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Top && this.isHorizontal(errorCellPosition)) {
   if (errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Top && this.isHorizontal(errorCellPosition)) {
   if (errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Bottom && this.isHorizontal(errorCellPosition)) {
   if (errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Left) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Bottom) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Bottom) {
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Right || captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPxPosition.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPxPosition.Right));
    errorTableBody.appendChild(helpTextRow);
   }
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.appendChild(helpTextRow);
   }
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.appendChild(helpTextRow);
   }   
  }
  if (this.position === ASPxPosition.Top) {
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Right || captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPxPosition.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPxPosition.Right));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
  }
 },
 addHelpTextCellToExternalTableWithErrorCell: function (errorCell, helpTextCell, errorTableBody, tableRows) {
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = document.createElement("TR");
  if (this.position === ASPxPosition.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if (this.position === ASPxPosition.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if (this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (errorCellPosition === ASPxPosition.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if (errorCellPosition === ASPxPosition.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell(true));
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Left && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellRowIndex].insertBefore(this.createEmptyCell(true), tableRows[emptyCellRowIndex].childNodes[0]);
  }
  if (this.position === ASPxPosition.Right && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellRowIndex].appendChild(this.createEmptyCell(true));
  }
 },
 addHelpTextCellToExternalTableWithCaption: function (captionCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var helpTextRow = document.createElement("TR");
  if (captionPosition === ASPxPosition.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Left && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellParentRowIndex].insertBefore(this.createEmptyCell(), tableRows[emptyCellParentRowIndex].childNodes[0]);
  }
  if (this.position === ASPxPosition.Right && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellParentRowIndex].appendChild(this.createEmptyCell());
  }
  if(captionPosition === ASPxPosition.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   if(this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.isVertical(captionPosition) && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   if(captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
   if(captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Bottom)
    errorTableBody.appendChild(helpTextRow);
   if(captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   if(captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Bottom)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Left)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if(captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Right)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if(captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Right)
   tableRows[0].appendChild(helpTextCell);
  if(captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Left)
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
 },
 addHelpTextCellToExternalTableWithEditorOnly: function (helpTextCell, errorTableBody, tableRows) {
  if (this.isHorizontal(this.position)) {
   if (this.position === ASPxPosition.Left)
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
   else
    tableRows[0].appendChild(helpTextCell);
  }
  else {
   var helpTextRow = document.createElement("TR");
   helpTextRow.appendChild(helpTextCell);
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
 },
 addHelpTextCellToExternalTable: function (errorTable, helpTextCell) {
  var errorTableBody = _aspxGetChildByTagName(errorTable, "TBODY", 0);
  var tableRows = this.getRows(errorTableBody);
  var captionCell = this.editor.GetCaptionCell();
  var errorCell = this.editor.GetErrorCell();
  if (captionCell) {
   if (errorCell)
    this.addHelpTextCellToExternalTableWithTwoCells(captionCell, errorCell, helpTextCell, errorTableBody, tableRows);
   else
    this.addHelpTextCellToExternalTableWithCaption(captionCell, helpTextCell, errorTableBody, tableRows);
  }
  else if (errorCell)
   this.addHelpTextCellToExternalTableWithErrorCell(errorCell, helpTextCell, errorTableBody, tableRows);
  else
   this.addHelpTextCellToExternalTableWithEditorOnly(helpTextCell, errorTableBody, tableRows);
 },
 createExternalTable: function () {
  var externalTable = document.createElement("TABLE");
  externalTable.id = ASPxEditElementSuffix.ExternalTable.substring(1, ASPxEditElementSuffix.ExternalTable.length - 1);
  externalTable.cellPadding = 0;
  externalTable.cellSpacing = 0;
  this.applyExternalTableStyle(externalTable);
  var editorWidth = this.editorMainElement.style.width;
  if(_aspxIsPercentageSize(editorWidth))
   externalTable.style.width = editorWidth;
  var externalTableBody = document.createElement("TBODY");
  var externalTableRow = document.createElement("TR");
  var externalTableCell = document.createElement("TD");
  externalTable.appendChild(externalTableBody);
  externalTableBody.appendChild(externalTableRow);
  externalTableRow.appendChild(externalTableCell);
  this.editorMainElement.parentNode.appendChild(externalTable);
  _aspxChangeElementContainer(this.editorMainElement, externalTableCell, true);
  return externalTable;
 },
 applyExternalTableStyle: function (externalTable) {
  var externalTableStyle = this.editor.externalTableStyle;
  if (externalTableStyle.length > 0) {
   this.applyStyleToElement(externalTable, externalTableStyle);
  }
 },
 applyStyleToElement: function(element, style) {
  element.className = style[0];
  if (style[1]) {
   var styleSheet = _aspxGetCurrentStyleSheet();
   element.className += " " + _aspxCreateImportantStyleRule(styleSheet, style[1]);
  }
 },
 createInlineHelpTextElement: function () {
  var helpTextElement = document.createElement("TD");
  var externalTable = this.editor.GetExternalTable();
  if (!externalTable)
   externalTable = this.createExternalTable();
  this.addHelpTextCellToExternalTable(externalTable, helpTextElement);
  return helpTextElement;
 },
 createPopupHelpTextElement: function () {
  var helpTextElement = document.createElement("DIV");
  document.body.appendChild(helpTextElement);
  ASPxAnimationHelper.setOpacity(helpTextElement, 0);
  return helpTextElement;
 },
 createHelpTextElement: function () {
  return this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup ?
   this.createPopupHelpTextElement() : this.createInlineHelpTextElement();
 },
 prepareHelpTextElement: function (helpTextStyle, helpText) {
  this.applyStyleToElement(this.helpTextElement, helpTextStyle);
  _aspxSetInnerHtml(this.helpTextElement, "<LABEL>" + helpText + "</LABEL>");
  if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.updatePopupHelpTextPosition();
  else {
   var isVerticalOrientation = this.position === ASPxPosition.Top || this.position === ASPxPosition.Bottom;
   var orientationClassName = isVerticalOrientation ? ASPxClientTextEditHelpTextConsts.VERTICAL_ORIENTATION_CLASS_NAME :
    ASPxClientTextEditHelpTextConsts.HORIZONTAL_ORIENTATION_CLASS_NAME;
   this.helpTextElement.className += " " + orientationClassName;
   this.setInlineHelpTextElementAlign();
   _aspxSetElementDisplay(this.helpTextElement, this.editor.clientVisible);
  }
 },
 setInlineHelpTextElementAlign: function() {
  var hAlignValue = "", vAlignValue = "";
  switch(this.hAlign) {
   case ASPxClientTextEditHelpTextHAlign.Left: hAlignValue = "left"; break;
   case ASPxClientTextEditHelpTextHAlign.Right: hAlignValue = "right"; break;
   case ASPxClientTextEditHelpTextHAlign.Center: hAlignValue = "center"; break;
  }
  switch(this.vAlign) {
   case ASPxClientTextEditHelpTextVAlign.Top: vAlignValue = "top"; break;
   case ASPxClientTextEditHelpTextVAlign.Bottom: vAlignValue = "bottom"; break;
   case ASPxClientTextEditHelpTextVAlign.Middle: vAlignValue = "middle"; break;
  }
  this.helpTextElement.style.textAlign = hAlignValue;
  this.helpTextElement.style.verticalAlign = vAlignValue;
 },
 getHelpTextMargins: function() {
  if (this.margins)
   return this.margins;
  var result = this.defaultMargins;
  if (this.position === ASPxPosition.Top || this.position === ASPxPosition.Bottom)
   result.Left = result.Right = 0;
  else
   result.Top = result.Bottom = 0;
  return result;
 },
 updatePopupHelpTextPosition: function (editorMainElement) {
  var editorWidth = this.editorMainElement.offsetWidth;
  var editorHeight = this.editorMainElement.offsetHeight;
  var helpTextWidth = this.helpTextElement.offsetWidth;
  var helpTextHeight = this.helpTextElement.offsetHeight;
  var editorX = _aspxGetAbsoluteX(this.editorMainElement);
  var editorY = _aspxGetAbsoluteY(this.editorMainElement);
  var helpTextX = 0, helpTextY = 0;
  var margins = this.getHelpTextMargins();
  if (this.position === ASPxPosition.Top || this.position === ASPxPosition.Bottom) {
   if (this.position === ASPxPosition.Top)
    helpTextY = editorY - margins.Bottom - helpTextHeight;
   else if (this.position === ASPxPosition.Bottom)
    helpTextY = editorY + editorHeight + margins.Top;
   if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Left)
    helpTextX = editorX + margins.Left;
   else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Right)
    helpTextX = editorX + editorWidth - helpTextWidth - margins.Right;
   else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Center) {
    var editorCenterX = editorX + editorWidth / 2;
    var helpTextWidthWithMargins = helpTextWidth + margins.Left + margins.Right;
    helpTextX = editorCenterX - helpTextWidthWithMargins / 2 + margins.Left;
   }
  } else {
   if (this.position === ASPxPosition.Left)
    helpTextX = editorX - margins.Right - helpTextWidth;
   else if (this.position === ASPxPosition.Right)
    helpTextX = editorX + editorWidth + margins.Left;
   if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Top)
    helpTextY = editorY + margins.Top;
   else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Bottom)
    helpTextY = editorY + editorHeight - helpTextHeight - margins.Bottom;
   else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Middle) {
    var editorCenterY = editorY + editorHeight / 2;
    var helpTextHeightWithMargins = helpTextHeight + margins.Top + margins.Bottom;
    helpTextY = editorCenterY - helpTextHeightWithMargins / 2 + margins.Top;
   }
  }
  helpTextX = helpTextX < 0 ? 0 : helpTextX;
  helpTextY = helpTextY < 0 ? 0 : helpTextY;
  _aspxSetAbsoluteX(this.helpTextElement, helpTextX);
  _aspxSetAbsoluteY(this.helpTextElement, helpTextY);
 },
 setHelpTextZIndex: function (hide) { 
  var newZIndex = 41998 * (hide ? -1 : 1);
  if (this.helpTextElement.style.zIndex != newZIndex)
   this.helpTextElement.style.zIndex = newZIndex;
 },
 hide: function () {
  if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   _aspxSetElementDisplay(this.helpTextElement, false);
  }
  else {
   this.animationEnabled ? ASPxAnimationHelper.fadeOut(this.helpTextElement) :
    ASPxAnimationHelper.setOpacity(this.helpTextElement, 0);
   this.setHelpTextZIndex(true);
  }
 },
 show: function () {
  if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   _aspxSetElementDisplay(this.helpTextElement, true);
  }
  else {
   this.updatePopupHelpTextPosition();
   this.animationEnabled ? ASPxAnimationHelper.fadeIn(this.helpTextElement) :
    ASPxAnimationHelper.setOpacity(this.helpTextElement, 1);
   this.setHelpTextZIndex(false);
  }
 }
});

(function () {
 var ASPxClientTabControlBase = _aspxCreateClass(ASPxClientControl, {
  ActiveRowItemCssClass: "dxtc-activeRowItem",
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.activeTabIndex = 0;
   this.callbackCount = 0;
   this.cookieName = "";
   this.emptyHeight = false;
   this.emptyWidth = false;
   this.tabAlign = "Left";
   this.tabPosition = "Top";
   this.tabs = [];
   this.tabsContentRequest = [];
   this.useClientVisibility = true;
   this.enableScrolling = !!this.GetScrollVisibleArea();
   this.firstShownTabIndex = 0;
   this.scrollManager = null;
   this.scrollingFillerElementWidth = 5000;
   this.handleClickOnWholeTab = true;
   this.isFullyInitializedInline = false;
   this.isFullyInitialized = false;
   this.initializationStepPassed = false;
   this.sizingConfig.correction = true;
   this.sizingConfig.adjustControl = true;
   this.primaryDimension = "width";
   this.secondaryDimension = "height";
   this.adjustmentFlagsUpdated = false;
   this.adjustmentVars = { tabsHeight: { needCalculate: true }, indentsSizes: {}, scrolling: {}, content: {} };
   this.stripMarginsCorrected = false;
   this.elementsSavedSizes = null;
   this.isLoadTabByCallback = false;
   this.isActiveTabChanged = false;
   this.shouldRaiseActiveTabChangedEvent = false;
   this.cacheEnabled = false;
   this.cacheDataFieldName = "aspxCache_CacheData";
   this.flexStrip = { 
    available: false,
    enabled: false,
    timerID: -1,
    timeout: 500
   };
   this.contentObserving = {
    enabled: false,
    canObserve: false,
    timerID: -1,
    timeout: 500
   };
   this.minLeftIndentSizeLite = 0;
   this.minRightIndentSizeLite = 0;
   this.TabClick = new ASPxClientEvent();
   this.ActiveTabChanged = new ASPxClientEvent();
   this.ActiveTabChanging = new ASPxClientEvent();
  },
  Initialize: function () {
   this.constructor.prototype.Initialize.call(this);
   if(this.IsStateControllerEnabled())
    ASPxClientTabControlBase.PrepareStateController();
   if(this.IsControlVisible()) {
    this.InitializeTabControl();
    this.UpdateLayout();
   }
   this.initializationStepPassed = true;
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   this.PrepareControlElements();
   var tabsCell = this.GetTabsCell();
   if(tabsCell && this.IsStateControllerEnabled())
    aspxAssignAccessabilityEventsToChildrenLinks(tabsCell);
   this.UpdateAdjustmentFlags();
   this.UpdateTabsAdjustmentFlags();
   if(this.enableScrolling) {
    this.InitializeScrolling();
    this.GetScrollableArea().style.position = "relative";
    var sva = this.GetScrollVisibleArea();
    sva.style.overflow = "hidden";
    sva.style.position = "relative";
    _aspxSetElementFloat(sva, this.rtl ? "right" : "left");
   }
   if(this.IsControlVisible())
    this.InitializeTabControlInline();
  },
  InitializeTabControlInline: function () {
   _aspxRemoveClassNameFromElement(this.GetMainElement(), "dxtc-init");
   if(!this.IsDisplayTableSupported())
    _aspxRemoveClassNameFromElement(this.GetMainContainer(), "dxtc-init");
   if(this.GetTabStripContainer())
    this.StoreInitialIndentsSize();
   if(this.enableScrolling) {
    this.GetScrollVisibleArea().style.width = "1px";
    var tabStrip = this.GetTabsCell();
    var tabStripChilds = _aspxGetChildNodesByTagName(tabStrip, "LI");
    var scrollFiller = tabStripChilds[tabStripChilds.length - 1];
    scrollFiller.style.width = this.scrollingFillerElementWidth + "px";
   }
   this.InitializeEnabledAndVisible();
   this.InitializeTabControlCore();
   this.isFullyInitializedInline = true;
  },
  InitializeTabControl: function () {
   if(!this.isFullyInitializedInline)
    this.InitializeTabControlInline();
   this.CalculateSizes();
   this.AdjustPageContents();
   this.SubsribeForDomObserver();
   this.isFullyInitialized = true;
  },
  SubsribeForDomObserver: function() {
   this.contentObserving.enabled = !!this.GetContentsCell();
   if(!this.contentObserving.enabled)
    return;
   this.EnableContentObservation();
   var callbackFunc = function(element) {
    this.OnContentSizeObserving(element);
   }.aspxBind(this);
   _aspxGetDomObserver().subscribe(this.name + this.GetContentsCellID(), callbackFunc);
  },
  EnableContentObservation: function() {
   this.adjustedSizes = this.GetAdjustedSizes();
   this.contentObserving.canObserve = true;
  },
  OnContentSizeObserving: function(element) {
   if(!this.contentObserving.canObserve || this.IsPartiallyInitialized() || !this.IsAdjustmentAllowed())
    return;
   this.CollapseControl();
   if(this.IsAdjustmentRequiredCore()) {
    var activeContentElement = this.GetContentElement(this.activeTabIndex);
    if(activeContentElement) {
     aspxGetControlCollection().AdjustControlsCore(activeContentElement, true);
     this.DoSafeScrollPositionOperation(function () {
       this.AdjustControlCore();
     }.aspxBind(this));
    }
    else
     this.ExpandControl();
   }
   else
    this.ExpandControl();
  },
  IsAdjustmentRequiredCore: function() {
   var sizes = this.GetAdjustedSizes();
   for(var name in sizes){
    if(this.adjustedSizes[name] !== sizes[name]) {
     this.adjustedSizes = sizes;
     return true;
    }
   }
   return false;
  },
  SetObservationPaused: function(paused) {
   if(this.contentObserving.enabled) {
    var observer = _aspxGetDomObserver(),
     contentContainer = this.GetContentsCell();
    if(paused)
     observer.pause(contentContainer, true);
    else
     observer.resume(contentContainer, true);
   }
  },
  IsPartiallyInitialized: function () {
   return !this.isFullyInitialized;
  },
  EnsureControlInitialized: function () {
   if(this.IsPartiallyInitialized())
    this.InitializeTabControl();
  },
  BrowserWindowResizeSubscriber: function () {
   return this.AdjustOnWindowResize();
  },
  OnBrowserWindowResize: function (evt) {
   if(!this.IsAdjustmentAllowed()) return;
   if(this.FlexStripEnabled()) {
    this.flexStrip.enabled = true;
    if(this.flexStrip.timerID !== -1)
     window.clearTimeout(this.flexStrip.timerID);
    var handler = function() { this.OnFlexStripTimeout(); }.aspxBind(this);
    this.flexStrip.timerID = window.setTimeout(handler, this.flexStrip.timeout);
   }
   if(this.contentObserving.enabled) {
    if(this.contentObserving.timerID !== -1)
     window.clearTimeout(this.contentObserving.timerID);
    this.contentObserving.canObserve = false;
    var enableObservationFunc = function() { this.EnableContentObservation(); }.aspxBind(this);
    this.contentObserving.timerID = window.setTimeout(enableObservationFunc, this.contentObserving.timeout);
   }
   this.AdjustControlCore();
  },
  FlexStripEnabled: function() {
   return this.flexStrip.available && this.IsTopBottomTabPosition() && this.GetTabsCell() && 
    !(this.enableScrolling || this.tabAlign == "Justify" || __aspxOpera && __aspxBrowserMajorVersion <= 12);
  },
  OnFlexStripTimeout: function() {
   this.flexStrip.timerID = -1;
   this.flexStrip.enabled = false;
   this.RecalculateTabStripWidthLite();
  },
  CanCauseReadjustment: function() {
   return false;
  },
  IsExpandableByAdjustment: function() {
   return true;
  },
  AdjustOnWindowResize: function () {
   var mainElement = this.GetMainElement();
   return this.IsPercentageSize(mainElement, "width") || this.IsPercentageSize(mainElement, "height");
  },
  InitializeEnabledAndVisible: function () {
   for(var i = 0; i < this.tabs.length; i++) {
    this.SetTabVisible(i, this.tabs[i].GetVisible(), true);
    this.SetTabEnabled(i, this.tabs[i].clientEnabled, true);
   }
  },
  InitializeCallBackData: function () {
   var element = this.GetContentElement(this.activeTabIndex);
   if(element != null) element.loaded = true;
  },
  InitializeTabControlCore: function () {
   if(this.enableScrolling) {
    this.CalculateSizes();
    this.RecalculateTabStripWidthLite();
    this.AdjustTabScrollingCore(true, false);
   }
   else
    this.AdjustTabControlSizeLite();
   if(this.IsMultiRow())
    this.PlaceActiveTabRowToBottom(this.activeTabIndex);
  },
  StoreInitialIndentsSize: function () {
   var leftIndent = this.GetLeftIndentLite(),
    rightIndent = this.GetRightIndentLite(),
    dimension = this.IsTopBottomTabPosition() ? "width" : "height";
   if(leftIndent)
    this.minLeftIndentSizeLite = this.GetCachedElementSize(leftIndent);
   if(rightIndent)
    this.minRightIndentSizeLite = this.GetCachedElementSize(rightIndent);
   this.adjustmentVars.indentsSizes = {
    left: this.minLeftIndentSizeLite,
    right: this.minRightIndentSizeLite
   };
  },
  InitializeScrolling: function () {
   this.scrollManager = new ASPxScrollingManager(this, this.GetScrollableArea(), [1, 0], this.OnBeforeScrolling, this.OnAfterScrolling, true);
   this.scrollManager.scrollSessionInterval = 5;
   this.scrollManager.animationAcceleration = 0.5;
   this.InitializeScrollButton(this.GetScrollLeftButtonElement());
   this.InitializeScrollButton(this.GetScrollRightButtonElement());
  },
  InitializeScrollButton: function (button) {
   if(!button || !button.id) return;
   var img = _aspxGetChildByTagName(button, "IMG", 0);
   _aspxPreventElementDrag(img);
   _aspxSetElementSelectionEnabled(img, false);
   _aspxSetElementSelectionEnabled(button, false);
   var manager = this.scrollManager;
   var dir = button.id.charAt(button.id.length - 1) == "R" ? 1 : -1;
   if(this.enabled) {
    _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseDownEventName, function (e) { manager.StartScrolling(dir, 5, 5); _aspxPreventEvent(e); });
    _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseUpEventName, function (e) { manager.StopScrolling(); });
    if(__aspxIE) {
     _aspxAttachEventToElement(button, "dblclick", function (e) { manager.StartScrolling(dir, 5, 5); manager.StopScrolling(); });
    }
   }
  },
  ScrollToShowTab: function (tabIndex, doAnimation) {
   if(!this.GetVisibleTabElement(tabIndex))
    return;
   var getWidtn = function (tc, index) {
    var res = 0;
    var tab = tc.GetVisibleTabElement(index);
    var separator = tc.GetSeparatorElement(index);
    if(tab && tab.style.display !== 'none')
     res += tab.offsetWidth;
    if(separator && separator.style.display !== 'none')
     res += separator.offsetWidth;
    return res;
   };
   var startIndex = this.firstShownTabIndex;
   var endIndex = tabIndex;
   var scrollToRight = !this.rtl;
   if(tabIndex < this.firstShownTabIndex) {
    startIndex = tabIndex;
    endIndex = this.firstShownTabIndex - 1;
    scrollToRight = !scrollToRight;
   }
   var width = 0;
   var shift = 0;
   var tabCount = 0;
   var scrollVisibleAreaWidth = this.GetScrollVisibleArea().offsetWidth;
   for(var i = startIndex; i <= endIndex; i++)
    width += getWidtn(this, i);
   for(var i = startIndex; i <= endIndex; i++) {
    var diff = width - shift;
    if(__aspxIE && __aspxBrowserVersion > 8)  
     diff -= 1;
    if(diff > scrollVisibleAreaWidth || !(scrollToRight ^ this.rtl)) {
     shift += getWidtn(this, i);
     tabCount++;
    }
   }
   if(this.GetVisibleTabElement(tabIndex).offsetWidth >= scrollVisibleAreaWidth &&
      scrollToRight ^ this.rtl) {
    tabCount--;
    shift -= getWidtn(this, tabIndex);
   }
   if(shift <= 0) return;
   this.firstShownTabIndex += tabCount * (scrollToRight ^ this.rtl ? 1 : -1);
   if(doAnimation) {
    this.scrollManager.animationOffset = this.GetScrollAnimationOffset(this.firstShownTabIndex);
    this.scrollManager.PrepareForScrollAnimation();
    this.scrollManager.DoScrollSessionAnimation(scrollToRight ? -1 : 1);
   } else {
    this.scrollManager.SetScrolledAreaPosition(this.scrollManager.GetScrolledAreaPosition()
     + this.GetScrollAnimationOffset(this.firstShownTabIndex) * (scrollToRight ? -1 : 1));
   }
  },
  OnBeforeScrolling: function (manager, direction) {
   var tc = manager.owner;
   if(tc.IsFullyScrolledToLeft() && direction < 0 || tc.IsFullyScrolledToRight() && direction > 0) {
    manager.StopScrolling();
    return;
   }
   var prevFirstShownTabIndex = tc.firstShownTabIndex;
   var diff = (direction > 0 ^ tc.rtl) ? 1 : -1;
   do {
    if(tc.firstShownTabIndex <= 0 && diff < 0
    || tc.firstShownTabIndex >= tc.tabs.length - 1 && diff > 0) break;
    tc.firstShownTabIndex += diff;
   } while(!tc.IsTabVisible(tc.firstShownTabIndex));
   manager.animationOffset = tc.GetScrollAnimationOffset(tc.firstShownTabIndex);
  },
  OnAfterScrolling: function (manager, direction) {
   manager.owner.UpdateScrollButtonsEnabled();
  },
  AdjustTabScrolling: function (scrollToActiveTab, doAnimation) {
   this.CalculateSizes();
   this.AdjustTabScrollingCore(scrollToActiveTab, doAnimation);
  },
  AdjustTabScrollingCore: function (scrollToActiveTab, doAnimation) {
   if(!this.GetMainElement()) return;
   this.UpdateScrollButtonsVisible();
   if(scrollToActiveTab)
    this.ScrollToShowTab(this.activeTabIndex, doAnimation);
   if(this.enabled)
    this.UpdateScrollButtonsEnabled();
   this.AdjustPageContents();
  },
  GetScrollAnimationOffset: function (newFirstShownTabIndex) {
   var newPos = 0;
   var i = this.GetNextVisibleTabIndex(-1);
   while(i < newFirstShownTabIndex && i > -1) {
    newPos += this.GetVisibleTabElement(i).offsetWidth;
    var separator = this.GetSeparatorElement(i);
    newPos += separator && separator.offsetWidth;
    i = this.GetNextVisibleTabIndex(i);
   }
   if(this.rtl)
    newPos = -newPos;
   return Math.abs(this.scrollManager.GetScrolledAreaPosition() + newPos);
  },
  AdjustScrollVisibleAreaWidth: function () {
   var sva = this.GetScrollVisibleArea();
   var mainElement = this.GetMainElement();
   if(mainElement.style.width == "" || mainElement.style.width == "0px") {
    _aspxSetOffsetWidth(sva, this.GetScrollableAreaWidth());
    return;
   }
   _aspxSetOffsetWidth(sva, 1);
   var scrollWrapper = this.GetTabsCellWrapperElement();
   var c = _aspxGetElementNodes(scrollWrapper);
   var restWidth = 0;
   for(var i = 0; i < c.length; i++)
    restWidth += c[i].offsetWidth;
   restWidth = restWidth - sva.offsetWidth + this.GetStripContainerBordersPaddingsMarginsWidth();
   var svaWidth = this.adjustmentVars.controlSizes.primary - restWidth;
   _aspxSetOffsetWidth(sva, svaWidth);
   var scrollWrapperWidth = restWidth + svaWidth;
   _aspxSetOffsetWidth(scrollWrapper, scrollWrapperWidth);
   this.RecalculateTabStripWidthLite();
  },
  DoSafeScrollPositionOperation: function (func) {
   var lastScrollYPos = _aspxGetDocumentScrollTop();
   var parent = this.GetMainElement().parentNode;
   var scrollParentYBefore = parent.scrollTop;
   func();
   if(scrollParentYBefore != parent.scrollTop)
    parent.scrollTop = scrollParentYBefore;
   var scrollY = _aspxGetDocumentScrollTop();
   if(lastScrollYPos != scrollY)
    window.scrollTo(_aspxGetDocumentScrollLeft(), lastScrollYPos);
  },
  UpdateScrollButtonsEnabled: function () {
   if(!this.IsStateControllerEnabled()) return;
   aspxGetStateController().SetElementEnabled(this.GetScrollLeftButtonElement(), !this.IsFullyScrolledToLeft());
   aspxGetStateController().SetElementEnabled(this.GetScrollRightButtonElement(), !this.IsFullyScrolledToRight());
  },
  UpdateScrollButtonsVisible: function () {
   this.AdjustScrollVisibleAreaWidth();
   var scrollButtonsVisible = this.GetScrollVisibleArea().offsetWidth < this.GetScrollableAreaWidth();
   _aspxSetElementDisplay(this.GetScrollLeftButtonContainer(), scrollButtonsVisible);
   _aspxSetElementDisplay(this.GetScrollRightButtonContainer(), scrollButtonsVisible);
   if(!scrollButtonsVisible)
    this.ScrollToShowTab(0, true);
   this.AdjustScrollVisibleAreaWidth();
  },
  GetScrollableAreaWidth: function () {
   return this.GetScrollableArea().offsetWidth - this.scrollingFillerElementWidth;
  },
  IsFullyScrolledToLeft: function () {
   if(!this.rtl)
    return _aspxPxToInt(this.GetScrollableArea().style.left) >= 0 || this.GetPrevVisibleTabIndex(this.firstShownTabIndex) < 0;
   var visibleWidth = this.GetScrollableAreaWidth() - _aspxPxToInt(this.GetScrollableArea().style.left);
   return visibleWidth <= this.GetScrollVisibleArea().offsetWidth ||
     this.GetNextVisibleTabIndex(this.firstShownTabIndex) < 0;
  },
  IsFullyScrolledToRight: function () {
   if(this.rtl)
    return _aspxPxToInt(this.GetScrollableArea().style.left) <= 0 || this.GetPrevVisibleTabIndex(this.firstShownTabIndex) < 0;
   var visibleWidth = this.GetScrollableAreaWidth() + _aspxPxToInt(this.GetScrollableArea().style.left);
   return visibleWidth <= this.GetScrollVisibleArea().offsetWidth ||
     this.GetNextVisibleTabIndex(this.firstShownTabIndex) < 0;
  },
  CorrectTabHeightOnStateChanged: function (element) {
   if(!this.adjustmentVars.tabsHeight.enabled) return;
   var tabElement = _aspxGetParentByTagName(element, "LI");
   var height = this.adjustmentVars.tabsHeight.lastValue;
   if(this.IsMultiRow() && !this.ElementHeightIsCorrected(tabElement))
    height -= this.GetTabSpaceSizeLite();
   height -= this.GetCachedVerticalBordersPaddingsMarginsWidth(tabElement);
   tabElement.style.height = height + "px";
  },
  IsDisplayTableSupported: function () {
   return !__aspxIE || __aspxBrowserMajorVersion > 7;
  },
  GetMainContainer: function() {
   var mainElement = this.GetMainElement();
   return this.IsDisplayTableSupported() ? mainElement : mainElement.rows[0].cells[0];
  },
  PrepareControlElements: function () {
   var mainElem = this.GetMainElement();
   if(this.IsPercentageSize(mainElem, "width"))
    mainElem.style.overflow = "visible";
   this.PrepareTabStrip();
   this.PrepareContentElements();
  },
  PrepareTabStrip: function () {
   var tabStrip = null;
   var mainContainer = this.GetMainContainer();
   var elements = _aspxGetElementNodes(mainContainer);
   var elementCount = elements.length;
   for(var i = 0; i < elementCount; i++) {
    var element = elements[i];
    if(element.tagName == "UL") {
     if(element.className.indexOf("dxtc-wrapper") == -1)
      tabStrip = element;
     else {
      element.id = this.name + this.GetTabsCellWrapperID();
      var c = _aspxGetDescendantNodesByClassName(element, "dxtc-strip");
      tabStrip = c.length > 0 ? c[0] : null;
     }
     break;
    }
   }
   if(tabStrip) {
    tabStrip.id = this.name + this.GetTabsCellID();
    var indexCorrection = (_aspxGetChildNodesByClassName(tabStrip, "dxr-fileTab").length > 0) ? 1 : 0;
    this.PrepareElements(tabStrip, "dxtc-tab",
     function (index) {
      var tabIndex = this.FindTabIndexByElementIndex(index);
      return this.name + this.GetTabElementID(tabIndex, false);
     }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-activeTab",
     function (index) {
      var tabIndex = this.FindActiveTabIndexByElementIndex(index, indexCorrection);
      return this.name + this.GetTabElementID(tabIndex, true);
     }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-spacer",
     function (index) {
      var separatorIndex = this.FindSeparatorIndexByElementIndex(index);
      if(!_aspxIsExists(separatorIndex)) return;
      return this.name + this.GetSeparatorElementID(separatorIndex);
     }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-link", function (index, el) { return el.parentNode.id + "T"; }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-img", function (index, el) { return el.parentNode.parentNode.id + "Img"; }.aspxBind(this));
   }
  },
  FindTabIndexByElementIndex: function (elementIndex) {
   var tabIndex = -1;
   for(var i = 0; i < this.tabs.length; i++) {
    if(this.tabs[i].visible)
     tabIndex++;
    if(!this.useClientVisibility && this.tabs[i].clientVisible && i == this.activeTabIndex)
     tabIndex--;
    if(tabIndex == elementIndex)
     return i;
   }
  },
  FindActiveTabIndexByElementIndex: function (elementIndex, indexCorrection) {
   if(!this.useClientVisibility)
    return this.activeTabIndex;
   var tabIndex = -1;
   for(var i = indexCorrection; i < this.tabs.length; i++) {
    var tab = this.tabs[i];
    if(tab.visible && tab.enabled)
     tabIndex++;
    if(tabIndex == elementIndex)
     return i;
   }
  },
  FindSeparatorIndexByElementIndex: function (elementIndex) {
   var tabIndex = -1;
   for(var i = 0; i < this.tabs.length; i++) {
    if(this.tabs[i].visible)
     tabIndex++;
    if(tabIndex == elementIndex) {
     if(this.IsMultiRow() && i > 0) {
      var nextIndex = this.GetNextVisibleTabIndex(i, true);
      if(nextIndex > -1 && _aspxElementHasCssClass(this.GetVisibleTabElement(nextIndex), "dxtc-n"))
       return i + 1;
     }
     if(!this.enableScrolling || this.GetNextVisibleTabIndex(i, true) > -1)
      return i;
    }
   }
  },
  PrepareContentElements: function () {
   var contentContainer = this.GetContentContainerElementLite();
   if(!contentContainer) return;
   contentContainer.id = this.name + this.GetContentsCellID();
   this.PrepareElements(contentContainer, "",
    function (index) {
     var contentIndex = this.FindContentIndexByElementIndex(index);
     return this.name + this.GetContentElementID(contentIndex);
    }.aspxBind(this));
   if(!this.GetTabsCell() && contentContainer.style.cssText) 
    contentContainer.style.cssText = _aspxCreateImportantCssText(contentContainer.style.cssText);
  },
  FindContentIndexByElementIndex: function (elementIndex) {
   if(!this.useClientVisibility)
    return this.activeTabIndex;
   var tabIndex = -1;
   for(var i = 0; i < this.tabs.length; i++) {
    var tab = this.tabs[i];
    if(tab.visible && tab.enabled)
     tabIndex++;
    if(tabIndex == elementIndex)
     return i;
   }
  },
  PrepareElements: function (container, className, getId) {
   var elements = (className !== "") ? _aspxGetDescendantNodesByClassName(container, className) : _aspxGetChildNodes(container, function (el) { return !!el.tagName; });
   for(var i = 0; i < elements.length; i++) {
    if(elements[i].id === "") {
     var id = getId(i, elements[i]);
     if(id)
      elements[i].id = id;
    }
   }
  },
  UpdateTabsAdjustmentFlags: function () {
   var container = this.GetTabStripContainer();
   if(!(container && this.IsTopBottomTabPosition())) {
    this.adjustmentVars.tabsHeight.enabled = false;
    return;
   }
   var elements = _aspxGetDescendantNodes(container, function (e) {
    return e.tagName == "LI" && _aspxElementHasCssClass(e, "dxtc-(tab|activeTab)");
   });
   var elementCount = elements.length;
   for(var i = 0; i < elementCount; i++) {
    if(elements[i].style.height) {
     this.adjustmentVars.tabsHeight.enabled = false;
     return;
    }
   }
   this.adjustmentVars.tabsHeight.enabled = true;
  },
  AdjustTabContents: function() {
   this.CorrectWrappedText(this.GetTabLinkElements);
  },
  GetTabLinkElements: function () {
   var container = this.GetTabStripContainer();
   if(container)
    return _aspxGetDescendantNodesByClassName(container, "dxtc-link");
   return null;
  },
  GetTabStripElementHeight: function () {
   var tabHeight = this.GetTabElementHeight();
   var templateHeight = this.GetIndentTemplateElementHeight();
   return templateHeight > tabHeight ? templateHeight : tabHeight;
  },
  GetTabElementHeight: function () {
   var result = 0;
   for(var i = 0; i < this.tabs.length; i++) {
    if(!this.IsTabVisible(i))
     continue;
    var element = this.GetVisibleTabElement(i);
    if(element) {
     var oldHeight;
     if(this.IsTopBottomTabPosition() && this.adjustmentVars.tabsHeight.enabled && element.style.height) {
      oldHeight = element.style.height;
      element.style.height = "";
     }
     var height = this.GetCachedElementSize(element, "height");
     if(height > result)
      result = height;
     if(oldHeight)
      element.style.height = oldHeight;
    }
   }
   return result;
  },
  GetIndentTemplateElementHeight: function () {
   var result = 0;
   var templateElements = _aspxGetDescendantNodesByClassName(this.GetTabStripContainer(), "dxtc-it");
   for(var i = 0; i < templateElements.length; i++) {
    var templateHeight = this.GetCachedElementSize(templateElements[i], "height");
    if(templateHeight > result)
     result = templateHeight;
   }
   return result;
  },
  SetTabStripElementsHeight: function (height, activeRowHeight) {
   var elements = _aspxGetChildNodes(this.GetTabStripContainer(), function (e) {
    return e.tagName == "LI" && e.className != "dxtc-lineBreak";
   });
   if(this.enableScrolling) {
    var subElements = _aspxGetChildNodesByTagName(this.GetTabsCell(), "LI");
    elements.push.apply(elements, subElements);
   }
   var elementCount = elements.length;
   for(var i = 0; i < elementCount; i++) {
    var element = elements[i];
    var heightValue = this.IsMultiRow() && this.ElementHeightIsCorrected(element)
     ? activeRowHeight : height;
    this.SetCachedElementHeight(element, heightValue);
   }
  },
  ElementHeightIsCorrected: function(element) {
   return this.tabPosition == "Top" ? (element.style.marginTop != "0px") : (element.style.marginBottom != "0px");
  },
  GetContentContainerElementLite: function () {
   var c = _aspxGetChildNodesByClassName(this.GetMainContainer(), "dxtc-content");
   return c.length > 0 ? c[0] : null;
  },
  SetInnerElementsVisibility: function (parent, visible) {
   var elements = _aspxGetElementNodes(parent);
   for(var i = 0; i < elements.length; i++)
    _aspxSetElementDisplay(elements[i], visible);
  },
  SetInnerElementsVisibilityExperimental: function (parent, visible) {
   if(visible)
    this.ExpandInnerElements(parent);
   else
    this.CollapseInnerElements(parent);
  },
  CollapseInnerElements: function (parent) {
   if(!this.elementsSavedSizes)
    this.elementsSavedSizes = {};
   var elements = _aspxGetElementNodes(parent);
   for(var i = 0; i < elements.length; i++) {
    var element = elements[i];
    this.elementsSavedSizes[i] = {
     width: element.style.width,
     height: element.style.height
    };
    element.style.width = "1px";
    element.style.height = "1px";
   }
  },
  ExpandInnerElements: function (parent) {
   var elements = _aspxGetElementNodes(parent);
   for(var i = 0; i < elements.length; i++) {
    elements[i].style.width = this.elementsSavedSizes[i].width;
    elements[i].style.height = this.elementsSavedSizes[i].height;
   }
  },
  GetCachedMarginsWidth: function(element, dimension) {
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension == "width" ? cache.horizontalMarginsWidth : cache.verticalMarginsWidth;
  },
  GetCachedBordersPaddingsMarginsWidth: function(element, dimension) {
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension == "width" ? cache.horizontalBordersPaddingsMarginsWidth : cache.verticalBordersPaddingsMarginsWidth;
  },
  GetCachedBordersAndPaddingsWidth: function(element, dimension) {
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension == "width" ? cache.horizontalBordersAndPaddingsWidth : cache.verticalBordersAndPaddingsWidth;
  },
  GetCachedVerticalMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.verticalMarginsWidth;
  },
  GetCachedHorizontalMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.horizontalMarginsWidth;
  },
  GetCachedVerticalBordersPaddingsMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.verticalBordersPaddingsMarginsWidth;
  },
  GetCachedHorizontalBordersPaddingsMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.horizontalBordersPaddingsMarginsWidth;
  },
  GetCachedVerticalBordersAndPaddingsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.verticalBordersAndPaddingsWidth;
  },
  GetCachedHorizontalBordersAndPaddingsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.horizontalBordersAndPaddingsWidth;
  },
  GetCachedElementInnerSize: function(element, dimension) {
   if(!element) return 0;
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension === "width" ? cache.width : cache.height;
  },
  GetCachedElementSize: function(element, dimension) {
   if(!element) return 0;
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension === "width" ? cache.outerWidth : cache.outerHeight;
  },
  GetElementCurrentStyle: function(element) {
   var style = element.currentStyle;
   if(style)
    return window.getComputedStyle ? window.getComputedStyle(element, null) : style;
   else
    return _aspxGetCurrentStyle(element);
  },
  CacheElement: function(element) {
   var cache = { },
    style = this.GetElementCurrentStyle(element);
   var useOffsetSizes = __aspxIE && __aspxBrowserMajorVersion < 9 || style.height == "auto";
   cache.borderLeftWidth = style.borderLeftStyle != "none" ? _aspxPxToFloat(style.borderLeftWidth) : 0;
   cache.borderRightWidth = style.borderRightStyle != "none" ? _aspxPxToFloat(style.borderRightWidth) : 0;
   cache.borderTopWidth = style.borderTopStyle != "none" ? _aspxPxToFloat(style.borderTopWidth) : 0;
   cache.borderBottomWidth = style.borderBottomStyle != "none" ? _aspxPxToFloat(style.borderBottomWidth) : 0;
   cache.paddingLeft = _aspxPxToFloat(style.paddingLeft);
   cache.paddingRight = _aspxPxToFloat(style.paddingRight);
   cache.paddingTop = _aspxPxToFloat(style.paddingTop);
   cache.paddingBottom = _aspxPxToFloat(style.paddingBottom);
   cache.marginLeft = _aspxPxToFloat(style.marginLeft);
   cache.marginRight = _aspxPxToFloat(style.marginRight);
   cache.marginTop = _aspxPxToFloat(style.marginTop);
   cache.marginBottom = _aspxPxToFloat(style.marginBottom);
   cache.horizontalBorderAndPaddingsWidth = cache.borderLeftWidth + cache.borderRightWidth + cache.paddingLeft + cache.paddingRight;
   cache.verticalBorderAndPaddingsWidth = cache.borderTopWidth + cache.borderBottomWidth + cache.paddingTop + cache.paddingBottom;
   cache.horizontalMarginsWidth = cache.marginLeft + cache.marginRight;
   cache.verticalMarginsWidth = cache.marginTop + cache.marginBottom;
   cache.horizontalBordersPaddingsMarginsWidth = cache.horizontalBorderAndPaddingsWidth + cache.horizontalMarginsWidth;
   cache.verticalBordersPaddingsMarginsWidth = cache.verticalBorderAndPaddingsWidth + cache.verticalMarginsWidth;
   if(useOffsetSizes) {
    cache.width = element.offsetWidth - cache.horizontalBorderAndPaddingsWidth;
    cache.height = element.offsetHeight - cache.verticalBorderAndPaddingsWidth;
   }
   else {
    cache.width = _aspxPxToFloat(style.width);
    cache.height = _aspxPxToFloat(style.height);
   }
   cache.outerWidth = cache.width + cache.horizontalBordersPaddingsMarginsWidth;
   cache.outerHeight = cache.height + cache.verticalBordersPaddingsMarginsWidth;
   cache.needRefresh = !(__aspxDocumentLoaded && _aspxGetElementDisplay(element));
   element[this.cacheDataFieldName] = cache;
  },
  GetElementCache: function(element) {
   return element[this.cacheDataFieldName];
  },
  GetOrCreateElementCache: function(element) {
   this.EnsureElementCached(element);
   return this.GetElementCache(element);
  },
  EnsureElementCached: function(element) {
   var cache = this.GetElementCache(element);
   if(!this.cacheEnabled || this.UseProportionalTabSizes() || !cache || cache.needRefresh)
    this.CacheElement(element);
  },
  ClearElementCache: function(element) {
   if(element)
    element[this.cacheDataFieldName] = null;
  },
  ClearTabElementsCache: function(index) {
   var activeTabElement = this.GetTabElement(index, true),
    tabElement = this.GetTabElement(index, false);
   if(activeTabElement)
    this.ClearElementCache(activeTabElement);
   if(tabElement)
    this.ClearElementCache(tabElement);
   this.adjustmentVars.tabsHeight.needCalculate = true;
  },
  IsPercentageSize: function (element, dimension) {
   return _aspxIsPercentageSize(element.style[dimension]);
  },
  CollapseControl: function() {
   if(this.IsPartiallyInitialized()) return;
   this.isControlCollapsed = true;
   if(this.enableScrolling)
    this.CollapseTabScrolling();
   else
    this.CollapseControlCommon();
   if(this.adjustmentVars.content.needAdjustment) {
    var contentContainer = this.GetContentsCell();
    this.adjustmentVars.content.lastHeight = contentContainer.style.height;
    contentContainer.style.height = "";
   }
  },
  CollapseControlCommon: function() {
   var stripContainer = this.GetTabStripContainer(),
    leftIndent = this.GetLeftIndentLite(),
    rightIndent = this.GetRightIndentLite();
   if(!stripContainer) return;
   this.adjustmentVars.indentsSizes.leftLastSize = leftIndent.style[this.primaryDimension];
   this.adjustmentVars.indentsSizes.rightLastSize = rightIndent.style[this.primaryDimension];
   this.adjustmentVars.stripLastSize = stripContainer.style[this.primaryDimension];
   this.SetCachedElementSize(leftIndent, this.minLeftIndentSizeLite);
   this.SetCachedElementSize(rightIndent, this.minRightIndentSizeLite);
   this.RecalculateTabStripWidthLite(this.GetStripSizeLite(), this.minLeftIndentSizeLite, this.minRightIndentSizeLite);
  },
  CollapseTabScrolling: function() {
   var scrollWrapper = this.GetTabsCellWrapperElement(),
    sva = this.GetScrollVisibleArea();
   if(!scrollWrapper) return;
   this.adjustmentVars.scrolling.svaLastWidth = sva.style.width;
   this.adjustmentVars.scrolling.wrapperLastWidth = scrollWrapper.style.width;
   var mainElement = this.GetMainElement();
   if(mainElement.style.width == "" || mainElement.style.width == "0px") {
    _aspxSetOffsetWidth(sva, this.GetScrollableAreaWidth());
    return;
   }
   _aspxSetOffsetWidth(sva, 1);
   var c = _aspxGetElementNodes(scrollWrapper),
    scrollWrapperWidth = 0;
   for(var i = 0; i < c.length; i++)
    scrollWrapperWidth += c[i].offsetWidth;
   scrollWrapper.style.width = scrollWrapperWidth + "px";
  },
  ExpandControl: function() {
   this.isControlCollapsed = false;
   var stripContainer = this.GetTabStripContainer()
   if(!stripContainer)
    return;
   if(this.enableScrolling) {
    var sva = this.GetScrollVisibleArea(),
     scrollWrapper = this.GetTabsCellWrapperElement();
    sva.style.width = this.adjustmentVars.scrolling.svaLastWidth;
    scrollWrapper.style.width = this.adjustmentVars.scrolling.wrapperLastWidth;
   }
   else {
    var leftIndent = this.GetLeftIndentLite(),
     rightIndent = this.GetRightIndentLite();
    leftIndent.style[this.primaryDimension] = this.adjustmentVars.indentsSizes.leftLastSize;
    rightIndent.style[this.primaryDimension] = this.adjustmentVars.indentsSizes.rightLastSize;
    if(this.IsTopBottomTabPosition())
     stripContainer.style.width = this.adjustmentVars.stripLastSize;
   }
   if(this.adjustmentVars.content.needAdjustment) {
    var contentContainer = this.GetContentsCell();
    contentContainer.style.height = this.adjustmentVars.content.lastHeight;
   }
  },
  NeedCollapseControlCore: function () {
   return true;
  },
  CalculateSizes: function () {
   this.CalculateTabsHeight();
   this.AdjustTabStripElementsHeight();
   this.adjustmentVars.stripSizes = { };
   this.UpdateStripSizes(this.GetStripSizeLite(this.UseProportionalTabSizes()));
   if(!this.isControlCollapsed)
    this.CollapseControl();
   this.isControlCollapsed = false;
   this.AdjustTabStripHeight();
   this.adjustmentVars.mainElementSizes = this.GetMainElementInnerSizes();
   this.adjustmentVars.controlSizes = {};
   this.adjustmentVars.controlSizes.primary = this.GetMaxValueExtended(this.enableScrolling ? 0 : this.adjustmentVars.stripFullSize,
    this.adjustmentVars.mainElementSizes.primary);
   this.adjustmentVars.controlSizes.secondary = this.adjustmentVars.mainElementSizes.secondary;
   this.CalculateContentHeight();
  },
  CalculateTabsHeight: function() {
   this.adjustmentVars.tabsHeight.needCalculate = this.UseProportionalTabSizes() || this.adjustmentVars.tabsHeight.needCalculate || !__aspxDocumentLoaded;
   if(!(this.adjustmentVars.tabsHeight.enabled && this.adjustmentVars.tabsHeight.needCalculate))
    return;
   var height = this.GetTabStripElementHeight();
   var lastTabHeight = this.adjustmentVars.tabsHeight.lastValue;
   if(lastTabHeight && (height == lastTabHeight || Math.abs(height - lastTabHeight) < 0.1))
    return;
   this.adjustmentVars.tabsHeight.needCalculate = !this.cacheEnabled;
   this.adjustmentVars.tabsHeight.lastValue = height;
   this.adjustmentVars.tabsHeight.needUpdate = true;
  },
  AdjustTabStripHeight: function() {
   var stripContainer = this.GetTabStripContainer();
   if(stripContainer) {
    stripContainer.style.height = "";
    this.ClearElementCache(stripContainer);
    var height = this.GetCachedElementInnerSize(stripContainer, this.secondaryDimension);
    this.adjustmentVars.stripSizes.secondary = height;
    height = this.GetPreparedSizeValue(height);
    height = height > 0 ? height : 0;
    stripContainer.style.height = height + "px";
   }
  },
  AdjustTabStripElementsHeight: function() {
   if(!this.adjustmentVars.tabsHeight.needUpdate)
    return;
   var height = this.adjustmentVars.tabsHeight.lastValue,
    activeRowTabHeight = null;
   if(this.IsMultiRow()) {
    activeRowTabHeight = height;
    height -= this.GetTabSpaceSizeLite();
   }
   this.SetTabStripElementsHeight(height, activeRowTabHeight);
   this.adjustmentVars.tabsHeight.needUpdate = false;
  },
  CalculateContentHeight: function() {
   var mainElement = this.GetMainElement(),
    contentContainer = this.GetContentsCell();
   this.adjustmentVars.content.needAdjustment = contentContainer && this.IsTopBottomTabPosition() && mainElement.style.height;
   if(this.adjustmentVars.content.needAdjustment) {
    var stripContainer = this.GetTabStripContainer();
    this.adjustmentVars.content.height = this.adjustmentVars.controlSizes.secondary - this.adjustmentVars.stripSizes.secondary -
     (stripContainer ? this.GetCachedBordersPaddingsMarginsWidth(stripContainer, "height") : 0);
   }
  },
  UpdateStripSizes: function(primarySize, secondarySize) {
   this.adjustmentVars.stripSizes.primary = primarySize;
   if(_aspxIsExists(secondarySize))
    this.adjustmentVars.stripSizes.secondary = secondarySize;
   if(!this.enableScrolling)
    this.adjustmentVars.stripFullSize = this.adjustmentVars.stripSizes.primary + this.minLeftIndentSizeLite + this.minRightIndentSizeLite;
  },
  NeedCalculateSecondarySize: function() {
   return !(this.ControlHasEmptySize(this.secondaryDimension) && this.IsTopBottomTabPosition());
  },
  AdjustPageContents: function () {
   if(!(this.adjustmentVars.content.needAdjustment)) return;
   var contentContainer = this.GetContentsCell();
   this.SetCachedElementSize(contentContainer, this.adjustmentVars.content.height, this.secondaryDimension);
  },
  GetMainElementInnerSizes: function() {
   var mainElement = this.GetMainElement();
   this.ClearElementCache(mainElement);
   return {
    primary: this.GetCachedElementInnerSize(mainElement, this.primaryDimension),
    secondary: this.GetCachedElementInnerSize(mainElement, this.secondaryDimension)
   };
  },
  ControlHasEmptySize: function (dimension) {
   var mainElement = this.GetMainElement();
   var sizeValue = dimension == "width" ? mainElement.style.width : mainElement.style.height;
   return !sizeValue;
  },
  UpdateAdjustmentFlags: function () {
   var mainElement = this.GetMainElement();
   if(mainElement) {
    this.UpdatePercentSizeConfig([mainElement.style.width], [mainElement.style.height]);
    if(!this.IsTopBottomTabPosition()) {
     this.primaryDimension = "height";
     this.secondaryDimension = "width";
    }
   }
  },
  RequireContentMeasurement: function () {
   var mainElement = this.GetMainElement();
   return _aspxIsPercentageSize(mainElement.style.width) || _aspxIsPercentageSize(mainElement.style.height);
  },
  GetMaxValue: function (val1, val2) {
   return val1 > val2 ? val1 : val2;
  },
  GetMaxValueExtended: function (val1, val2, val3) {
   var ret = 0;
   for(var i = 0; i < arguments.length; i++) {
    if(arguments[i] > ret)
     ret = arguments[i];
   }
   return ret;
  },
  AdjustTabControlSizeLite: function () {
   this.CalculateSizes();
   if(!this.GetTabsCell()) {
    this.AdjustPageContents();
    return;
   }
   this.PrepareStripsForIE("none", "both");
   if(this.IsMultiRow())
    this.SetStripMarginsLite(0, false);
   this.CorrectTabsWidthLite();
   var controlSize = this.adjustmentVars.controlSizes.primary;
   var tabsSize = this.adjustmentVars.stripSizes.primary;
   var indentsSize = controlSize - tabsSize - this.GetStripContainerBordersPaddingsMarginsWidth();
   this.ClearElementCache(this.GetLeftIndentLite());
   this.ClearElementCache(this.GetRightIndentLite());
   switch(this.tabAlign) {
    case "Left":
     var leftIndentSize = this.GetCachedElementSize(this.GetLeftIndentLite());
     indentsSize = indentsSize - leftIndentSize;
     this.adjustmentVars.indentsSizes = {
      left: leftIndentSize,
      right: this.GetMaxValue(indentsSize, this.minRightIndentSizeLite)
     };
     this.SetCachedElementSize(this.GetRightIndentLite(), this.adjustmentVars.indentsSizes.right);
     break;
    case "Right":
     var rightIndentSize = this.GetCachedElementSize(this.GetRightIndentLite());
     indentsSize = indentsSize - rightIndentSize;
     this.adjustmentVars.indentsSizes = {
      left: this.GetMaxValue(indentsSize, this.minLeftIndentSizeLite),
      right: rightIndentSize
     };
     this.SetCachedElementSize(this.GetLeftIndentLite(), this.adjustmentVars.indentsSizes.left);
     break;
    case "Center":
     indentsSize = Math.floor(indentsSize / 2);
     this.adjustmentVars.indentsSizes.left = this.GetMaxValue(indentsSize, this.minLeftIndentSizeLite);
     this.SetCachedElementSize(this.GetLeftIndentLite(), this.adjustmentVars.indentsSizes.left);
     indentsSize = controlSize - (tabsSize + indentsSize) - this.GetStripContainerBordersPaddingsMarginsWidth();
     this.adjustmentVars.indentsSizes.right = this.GetMaxValue(indentsSize, this.minRightIndentSizeLite);
     this.SetCachedElementSize(this.GetRightIndentLite(), this.adjustmentVars.indentsSizes.right);
     break;
    default:
     indentsSize = this.GetCachedElementSize(this.GetLeftIndentLite()) + this.GetCachedElementSize(this.GetRightIndentLite());
     tabsSize = controlSize - indentsSize;
   }
   if(this.UseProportionalTabSizes()) {
    var stripSize = tabsSize - this.GetStripContainerBordersPaddingsMarginsWidth();
    this.SetStripSizeLite(stripSize);
    this.UpdateStripSizes(stripSize);
   }
   this.RecalculateTabStripWidthLite();
   this.AdjustPageContents();
   if(this.IsMultiRow())
    this.SetStripMarginsLite(this.GetLeftIndentLite().offsetWidth, true);
   this.PrepareStripsForIE(this.rtl ? "right" : "left", "none");
  },
  PrepareStripsForIE: function (indentClearAttribute, lineBreakClearAttribute) {
   if(__aspxIE && __aspxBrowserVersion < 8 && this.IsMultiRow()) {
    var leftIndent = this.GetLeftIndentLite();
    leftIndent.style.clear = indentClearAttribute;
    var c = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxtc-lineBreak");
    for(var i = 0; i < c.length; i++)
     c[i].style.clear = lineBreakClearAttribute;
   }
  },
  GetStripContainerBordersPaddingsMarginsWidth: function() {
   if(this.IsTopBottomTabPosition() && !this.enableScrolling)
    return this.GetCachedHorizontalBordersPaddingsMarginsWidth(this.GetTabsCell());
   if(this.enableScrolling)
    return this.GetCachedHorizontalBordersPaddingsMarginsWidth(this.GetScrollVisibleArea().parentNode);
   return this.GetCachedVerticalBordersPaddingsMarginsWidth(this.GetTabsCell());
  },
  GetStripSizeLite: function (storeTabSizes) {
   if(!this.GetTabStripContainer())
    return 0;
   if(storeTabSizes) {
    this.adjustmentVars.tabSizes = {};
    this.adjustmentVars.tabSizesSums = {};
   }
   var size = 0,
    prevSize = 0,
    tab,
    rowIndex = this.IsMultiRow() ? -1 : 0,
    needTabSizeCorrection = false;
   for(var i = 0; i < this.tabs.length; i++) {
    tab = this.GetVisibleTabElement(i);
    if(!tab)
     continue;
    if(_aspxElementHasCssClass(tab, "dxtc-n")) {
     rowIndex++;
     if(prevSize < size)
      prevSize = size;
     size = 0;
     needTabSizeCorrection = this.stripMarginsCorrected && !_aspxElementHasCssClass(tab, "dxtc-activeRowItem");
    }
    if(!this.GetTab(i).clientVisible)
     continue;
    var tabSize = this.GetCachedElementSize(tab, this.primaryDimension);
    if(needTabSizeCorrection) {
     tabSize -= this.GetLeftIndentLite().offsetWidth;
     needTabSizeCorrection = false;
    }
    if(storeTabSizes) {
     this.adjustmentVars.tabSizes[i] = tabSize;
     var tabSizesSums = this.adjustmentVars.tabSizesSums;
     if(!_aspxIsExists(tabSizesSums[rowIndex]))
      tabSizesSums[rowIndex] = 0;
     tabSizesSums[rowIndex] += tabSize;
    }
    var separator = this.GetSeparatorElement(i);
    size += tabSize + this.GetCachedElementSize(separator, this.primaryDimension);
   }
   if(prevSize > size)
    size = prevSize;
   return size;
  },
  GetTabRows: function () {
   var rows = [];
   var rowIndex = -1;
   var tabIndex = 0;
   while(tabIndex < this.tabs.length) {
    var tabElement = this.GetVisibleTabElement(tabIndex);
    if(!(tabElement && _aspxGetElementDisplay(tabElement))) {
     tabIndex++;
     continue;
    }
    if(rowIndex < 0 || _aspxElementHasCssClass(tabElement, "dxtc-n")) {
     rowIndex++;
     rows[rowIndex] = [];
    }
    rows[rowIndex].push(tabIndex);
    tabIndex++;
   }
   return rows;
  },
  SetStripSizeLite: function (size) {
   var spacerSize = this.GetTabSpaceSizeLite();
   var rows = this.GetTabRows();
   var tabIndexOffset = 0;
   for(var i = 0; i < rows.length; i++) {
    var count = rows[i].length;
    var rowSize = size - spacerSize * (count - 1);
    var newTabSizesSum = 0;
    for(var index = 0; index < count; index++) {
     var tabSize = this.adjustmentVars.tabSizes[tabIndexOffset + index];
     var newTabSize = Math.floor(rowSize * (tabSize / this.adjustmentVars.tabSizesSums[i]));
     newTabSizesSum += newTabSize;
     if(index == count - 1)
      newTabSize += rowSize - newTabSizesSum;
     var activeTabElement = this.GetTabElement(rows[i][index], true),
      tabElement = this.GetTabElement(rows[i][index], false);
     this.SetCachedElementSize(activeTabElement, newTabSize);
     this.SetCachedElementSize(tabElement, newTabSize);
     this.ClearElementCache(activeTabElement);
     this.ClearElementCache(tabElement);
    }
    tabIndexOffset += count;
   }
  },
  GetTabSpaceSizeLite: function () {
   var spacers = _aspxGetChildNodesByClassName(this.GetTabsCell(), "dxtc-spacer"),
    size = spacers.length > 0 ? this.GetCachedElementSize(spacers[0]) : 0;
   return size;
  },
  RecalculateTabStripWidthLite: function(stripSize, leftIndentSize, rightIndentSize) {
   if(this.flexStrip.enabled) {
    var tabStrip = this.GetTabsCell();
    if(tabStrip.style.width)
     tabStrip.style.width = "";
    return;
   }
   if(!this.IsTopBottomTabPosition())
    return;
   if(stripSize === undefined)
    stripSize = this.adjustmentVars.stripSizes.primary;
   if(leftIndentSize === undefined)
    leftIndentSize = this.adjustmentVars.indentsSizes.left;
   if(rightIndentSize === undefined)
    rightIndentSize = this.adjustmentVars.indentsSizes.right;
   var tabStrip = this.GetTabsCell(),
    tabStripActualWidth = stripSize + leftIndentSize + rightIndentSize;
   if(this.enableScrolling)
    tabStripActualWidth += this.scrollingFillerElementWidth;
   tabStripActualWidth = this.GetPreparedSizeValue(tabStripActualWidth);
   tabStrip.style.width = tabStripActualWidth + "px";
  },
  GetPreparedSizeValue: function(sizeValue) {
   if(!__aspxIE || __aspxBrowserMajorVersion < 9)
    return sizeValue;
   var res = Math.floor(sizeValue);
   while(res < sizeValue)
    res += 0.1;
   return res;
  },
  CorrectTabsWidthLite: function() {
   if(!(__aspxIE && __aspxBrowserVersion < 8 && !this.IsTopBottomTabPosition()))
    return;
   var tabStrip = this.GetTabsCell();
   var collection = _aspxGetElementNodes(tabStrip);
   var width = this.GetCachedElementInnerSize(tabStrip, this.secondaryDimension);
   if(this.prevTabStripWidth && this.prevTabStripWidth == width)
    return;
   for(var i = 0; i < collection.length; i++)
    this.SetCachedElementWidth(collection[i], width);
   this.prevTabStripWidth = width;
  },
  SetCachedElementSize: function(element, size, dimension) {
   if(!element) return;
   if(!dimension)
    dimension = this.primaryDimension;
   if(dimension == "width")
    this.SetCachedElementWidth(element, size);
   else
    this.SetCachedElementHeight(element, size);
  },
  SetCachedElementWidth: function(element, width) {
   var cache = this.GetOrCreateElementCache(element);
   width -= cache.horizontalBordersPaddingsMarginsWidth;
   if(width >= 0)
    element.style.width = width + "px";
  },
  SetCachedElementHeight: function(element, height) {
   var cache = this.GetOrCreateElementCache(element);
   height -= cache.verticalBordersPaddingsMarginsWidth;
   if(height >= 0)
    element.style.height = height + "px";
  },
  GetLeftIndentLite: function () {
   var container = this.GetTabStripContainer();
   return container ? _aspxGetChildrenByPartialClassName(container, "dxtc-leftIndent")[0] : null;
  },
  GetRightIndentLite: function () {
   var container = this.GetTabStripContainer();
   return container ? _aspxGetChildrenByPartialClassName(this.GetTabStripContainer(), "dxtc-rightIndent")[0] : null;
  },
  GetTabsCellID: function () {
   return "_TC";
  },
  GetTabsCell: function () {
   return this.GetChild(this.GetTabsCellID());
  },
  GetTabsCellWrapperID: function () {
   return "_WC";
  },
  GetTabsCellWrapperElement: function () {
   return this.GetChild(this.GetTabsCellWrapperID());
  },
  GetTabStripContainer: function () {
   return this.enableScrolling ? this.GetTabsCellWrapperElement() : this.GetTabsCell();
  },
  GetTabElementID: function (index, active) {
   return "_" + (active ? "A" : "") + "T" + index;
  },
  GetTabElement: function (index, active) {
   return this.GetChild(this.GetTabElementID(index, active));
  },
  GetVisibleTabElement: function (index) {
   return this.GetChild(this.GetTabElementID(index, index == this.activeTabIndex));
  },
  GetContentsCellID: function () {
   return "_CC";
  },
  GetContentsCell: function () {
   return this.GetChild(this.GetContentsCellID());
  },
  GetContentElementID: function (index) {
   return "_C" + index;
  },
  GetContentElement: function (index) {
   return this.GetChild(this.GetContentElementID(index));
  },
  GetContentHolder: function (index) {
   var contentElement = this.GetContentElement(index);
   if(!contentElement)
    return null;
   return this.IsDisplayTableSupported() ? contentElement : contentElement.rows[0].cells[0];
  },
  GetSeparatorElementID: function (index) {
   return "_T" + index + "S";
  },
  GetSeparatorElement: function (index) {
   return this.GetChild(this.GetSeparatorElementID(index));
  },
  GetScrollVisibleAreaID: function () {
   return "_SVA";
  },
  GetScrollVisibleArea: function () {
   return this.GetChild(this.GetScrollVisibleAreaID());
  },
  GetScrollableArea: function () {
   return this.GetTabsCell();
  },
  GetScrollLeftButtonID: function () {
   return "_SBL";
  },
  GetScrollLeftButtonElement: function () {
   return this.GetChild(this.GetScrollLeftButtonID());
  },
  GetScrollLeftButtonContainer: function () {
   return this.GetScrollLeftButtonElement().parentNode;
  },
  GetScrollRightButtonID: function () {
   return "_SBR";
  },
  GetScrollRightButtonElement: function () {
   return this.GetChild(this.GetScrollRightButtonID());
  },
  GetScrollRightButtonContainer: function () {
   return this.GetScrollRightButtonElement().parentNode;
  },
  GetActiveTabIndexInputElement: function (index) {
   return _aspxGetElementById(this.name + "ATI");
  },
  IsTopBottomTabPosition: function () {
   return (this.tabPosition == "Top" || this.tabPosition == "Bottom");
  },
  IsControlVisible: function () {
   return this.clientVisible && this.IsDisplayed() && !this.IsHidden();
  },
  FixControlSize: function () {
   this.FixElementSize(this.GetMainElement());
   var contentCell = this.GetContentsCell();
   if(!contentCell) return;
   var width = (__aspxIE ? contentCell.clientWidth : contentCell.offsetWidth);
   var height = (__aspxIE ? contentCell.clientHeight : contentCell.offsetHeight);
   width -= this.GetCachedHorizontalBordersAndPaddingsWidth(contentCell);
   height -= this.GetCachedVerticalBordersAndPaddingsWidth(contentCell);
   _aspxChangeStyleAttribute(contentCell, "width", width + "px");
   _aspxChangeStyleAttribute(contentCell, "height", height + "px");
  },
  UnfixControlSize: function () {
   this.UnfixElementSize(this.GetMainElement());
   this.UnfixElementSize(this.GetContentsCell());
  },
  FixElementSize: function (element) {
   if(element == null) return;
   var width = (__aspxIE ? element.clientWidth : element.offsetWidth);
   var height = (__aspxIE ? element.clientHeight : element.offsetHeight);
   _aspxChangeStyleAttribute(element, "width", width + "px");
   _aspxChangeStyleAttribute(element, "height", height + "px");
  },
  UnfixElementSize: function (element) {
   if(element == null) return;
   _aspxRestoreStyleAttribute(element, "width");
   _aspxRestoreStyleAttribute(element, "height");
  },
  AdjustSize: function () {
   this.AdjustControlCore();
  },
  AdjustControlCore: function () {
   ASPxClientControl.prototype.AdjustControlCore.call(this);
   this.EnsureControlInitialized();
   this.SetObservationPaused(true);
   this.UpdateLayout();
   this.SetObservationPaused(false);
  },
  UpdateLayout: function () {
   if(!this.enableScrolling)
    this.AdjustTabControlSizeLite();
   else
    this.AdjustTabScrolling(true, false);
   this.AdjustTabContents();
  },
  AdjustAutoHeight: function () {
   if(!this.IsAdjustmentAllowed())
    return;
   this.EnsureControlInitialized();
   this.UpdateAutoHeight();
  },
  UpdateAutoHeight: function () {
   this.AdjustPageContents();
  },
  SetWidth: function(width) {
   this.SetSizeInternal(width, "Width");
  },
  SetHeight: function(height) {
   this.SetSizeInternal(height, "Height");
  },
  SetSizeInternal: function(value, dimension) {
   var offsetSizePropName = "offset" + dimension,
    setSizeFuncName = "Set" + dimension;
   if(this.GetMainElement()[offsetSizePropName] === value)
    return;
   this.ResetControlAdjustment();
   this.constructor.prototype[setSizeFuncName].call(this, value);
  },
  CanLoadTabOnCallback: function (index) {
   return this.isLoadTabByCallback && _aspxIsFunction(this.callBack);
  },
  ChangeTabState: function (index, active) {
   var element = this.GetTabElement(index, true);
   if(element != null) _aspxSetElementDisplay(element, active);
   element = this.GetTabElement(index, false);
   if(element != null) _aspxSetElementDisplay(element, !active);
   element = this.GetContentElement(index);
   if(element != null) _aspxSetElementDisplay(element, active);
   this.adjustmentVars.tabsHeight.needCalculate = true;
  },
  ChangeActiveTab: function (index, hasLink) {
   var processingMode = this.RaiseActiveTabChanging(index);
   if(processingMode == "Client" || processingMode == "ClientWithReload") {
    var element = this.GetContentElement(index);
    if(this.CanLoadTabOnCallback(index) && element != null && (!element.loaded || processingMode == "ClientWithReload")) {
     if(this.callbackCount == 0)
      this.FixControlSize();
     this.DoChangeActiveTab(index);
     this.isActiveTabChanged = true;
     this.PerformCallbackInternal(index, element);
    }
    else {
     this.DoChangeActiveTab(index);
     if(this.GetMainElement()) {
      var activeContentElement = this.GetContentElement(this.activeTabIndex);
      if(activeContentElement) {
       var handler = function() {
        this.CollapseControl();
        aspxGetControlCollection().AdjustControlsCore(activeContentElement, true);
        this.DoSafeScrollPositionOperation(function () {
         this.AdjustControlCore();
        }.aspxBind(this));
       }.aspxBind(this);
       window.setTimeout(handler, 0);
      }
     }
     this.RaiseActiveTabChanged(index);
    }
   }
   else if(processingMode == "Server" && !hasLink)
    this.SendPostBack("ACTIVATE:" + index);
  },
  PerformCallbackInternal: function (tabIndex, tabContentElement, callbackArgument) {
   if(typeof (callbackArgument) == "undefined")
    callbackArgument = tabIndex;
   if(!tabContentElement.loading) {
    this.callbackCount++;
    tabContentElement.loading = true;
    this.tabsContentRequest.push(tabIndex);
    this.ShowLoadingPanelInTabPage(tabIndex);
    this.CreateCallback(callbackArgument);
   }
  },
  IsMultiRow: function () {
   if(!_aspxIsExists(this.isMultiRow))
    this.isMultiRow = _aspxElementHasCssClass(this.GetMainElement(), "dxtc-multiRow");
   return this.isMultiRow;
  },
  UseProportionalTabSizes: function () {
   return this.IsMultiRow() || this.tabAlign == "Justify";
  },
  PlaceActiveTabRowToBottom: function (activeTabIndex) {
   var strip = this.GetTabsCell();
   var leftIndent = this.GetLeftIndentLite();
   var rightIndent = this.GetRightIndentLite();
   strip.insertBefore(rightIndent, this.tabPosition == "Top" ? null : strip.firstChild);
   strip.insertBefore(leftIndent, rightIndent);
   var newActiveRow = this.GetTabRowByTabElementLite(this.GetVisibleTabElement(activeTabIndex));
   var currentActiveRow = this.GetActiveTabRowLite();
   this.InsertTabRowBeforeLite(currentActiveRow, newActiveRow[0]);
   this.InsertTabRowBeforeLite(newActiveRow, rightIndent);
   this.SetStripMarginsLite(0, false);
   this.SetStripMarginsLite(leftIndent.offsetWidth, true);
   this.AdjustStripSpacesLite();
   this.ReplaceCssClassLite(currentActiveRow, this.ActiveRowItemCssClass, "");
   this.ReplaceCssClassLite(newActiveRow, "", this.ActiveRowItemCssClass);
  },
  ReplaceCssClassLite: function (collection, className, newClassName) {
   for(var i = 0; i < collection.length; i++) {
    if(!collection[i]) continue;
    var c = collection[i].className.replace(className, "");
    collection[i].className = _aspxTrim(c);
    if(newClassName != "")
     collection[i].className += " " + newClassName;
   }
  },
  InsertTabRowBeforeLite: function (row, refElement) {
   var strip = this.GetTabsCell();
   for(var i = 0; i < row.length; i++)
    strip.insertBefore(row[i], refElement);
  },
  GetTabRowByTabElementLite: function (tabElement) {
   var c = _aspxGetChildNodes(this.GetTabsCell(),
    function (e) { return e.className && !_aspxElementHasCssClass(e, "dxtc-leftIndent") && !_aspxElementHasCssClass(e, "dxtc-rightIndent"); });
   var start = 0;
   var end = 0;
   var found = false;
   for(var i = 0; i < c.length; i++) {
    if(!found)
     found = c[i].id == tabElement.id;
    if(_aspxElementHasCssClass(c[i], "dxtc-lineBreak")) {
     if(found) {
      end = i;
      break;
     } else
      start = i + 1;
    }
    end = c.length;
   }
   return c.slice(start, end);
  },
  GetActiveTabRowLite: function () {
   var c = _aspxGetElementNodes(this.GetTabsCell());
   var index = 0;
   for(var i = 0; i < c.length; i++) {
    if(_aspxElementHasCssClass(c[i], "dxtc-tab") || _aspxElementHasCssClass(c[i], "dxtc-activeTab")) {
     index = i;
     if(this.tabPosition == "Bottom") break;
    }
   }
   return this.GetTabRowByTabElementLite(c[index]);
  },
  SetStripMarginsLite: function (marginSize, excludeCurrentStrip) {
   var c = _aspxGetChildNodesByClassName(this.GetTabsCell(), "dxtc-n");
   var count = c.length;
   var startIndex = 0;
   if(this.tabPosition == "Top")
    count -= excludeCurrentStrip ? (this.autoPostBack ? 1 : 2) : 0;
   else
    startIndex = excludeCurrentStrip ? (this.autoPostBack ? 1 : 2) : 0;
   for(var i = startIndex; i < count; i++) {
    if(this.rtl)
     c[i].style.marginRight = marginSize + "px";
    else
     c[i].style.marginLeft = marginSize + "px";
   }
   this.stripMarginsCorrected = excludeCurrentStrip;
  },
  AdjustStripSpacesLite: function () {
   var c = _aspxGetElementNodesByPredicate(this.GetTabsCell(),
    function (e) { return !_aspxElementHasCssClass(e, "dxtc-lineBreak"); });
   var indent = this.GetTabSpaceSizeLite();
   for(var i = 0; i < c.length; i++) {
    if(this.tabPosition == "Bottom")
     c[i].style.marginBottom = indent + "px";
    else
     c[i].style.marginTop = indent + "px";
   }
   var lastStrip = this.GetLastTabStrip();
   for(var i = 0; i < lastStrip.length; i++) {
    if(this.tabPosition == "Bottom")
     lastStrip[i].style.marginBottom = "0px";
    else
     lastStrip[i].style.marginTop = "0px";
   }
  },
  GetLastTabStrip: function () {
   var c = _aspxGetElementNodes(this.GetTabsCell());
   var index = 0;
   for(var i = 0; i < c.length; i++) {
    if(_aspxElementHasCssClass(c[i], "dxtc-tab") || _aspxElementHasCssClass(c[i], "dxtc-activeTab")) {
     index = i;
     if(this.tabPosition == "Top") break;
    }
   }
   return this.GetTabRowByTabElementLite(c[index]);
  },
  DoChangeActiveTab: function (index) {
   if(__aspxFirefox && __aspxBrowserVersion >= 3) { 
    var contentsCell = this.GetContentsCell();
    var isContentsCellExists = _aspxIsExistsElement(contentsCell);
    if(isContentsCellExists)
     _aspxSetElementVisibility(contentsCell, false);
    this.ChangeTabState(index, true);
    this.ChangeTabState(this.activeTabIndex, false);
    this.activeTabIndex = index;
    if(isContentsCellExists)
     _aspxSetElementVisibility(contentsCell, true);
   } else {
    this.ChangeTabState(this.activeTabIndex, false);
    this.activeTabIndex = index;
    this.ChangeTabState(this.activeTabIndex, true);
   }
   if(this.enableScrolling)
    this.AdjustTabScrolling(true, true);
   else
    this.AdjustTabControlSizeLite();
   if(this.IsMultiRow())
    this.PlaceActiveTabRowToBottom(index);
   this.AdjustTabContents();
   this.UpdateActiveTabIndexInputElement();
   this.UpdateActiveTabIndexCookie();
  },
  SetActiveTabIndexInternal: function (index, hasLink) {
   if(this.activeTabIndex == index) return;
   this.DoSafeScrollPositionOperation(function () {
    this.ChangeActiveTab(index, hasLink);
   }.aspxBind(this));
   this.UpdateHoverState(index);
  },
  UpdateActiveTabIndexCookie: function () {
   if(this.cookieName == "") return;
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, this.activeTabIndex);
  },
  UpdateActiveTabIndexInputElement: function () {
   var element = this.GetActiveTabIndexInputElement();
   if(element != null) element.value = this.activeTabIndex;
  },
  UpdateHoverState: function (index) {
   if(!this.IsStateControllerEnabled()) return;
   var element = this.GetTabElement(index, true);
   if(element != null) aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
  },
  OnTabClick: function (evt, index) {
   var processingMode = this.RaiseTabClick(index, evt);
   var clickedLinkElement = _aspxGetParentByTagName(_aspxGetEventSource(evt), "A");
   var isLinkClicked = (clickedLinkElement != null && !!clickedLinkElement.href && clickedLinkElement.href != __aspxAccessibilityEmptyUrl);
   var element = this.GetTabElement(index, false);
   var linkElement = (element != null) ? _aspxGetChildByTagName(element, "A", 0) : null;
   if(linkElement != null && (!linkElement.href || linkElement.href == __aspxAccessibilityEmptyUrl))
    linkElement = null;
   if(processingMode != "Handled") {
    var hasLink = isLinkClicked || linkElement != null;
    if(processingMode == "Server" && !hasLink)
     this.SendPostBack("CLICK:" + index);
    else
     this.SetActiveTabIndexInternal(index, hasLink);
    if(this.handleClickOnWholeTab && !isLinkClicked && linkElement != null)
     _aspxNavigateByLink(linkElement);
   }
  },
  OnCallback: function (result) {
   this.OnCallbackInternal(result.html, result.index, false);
  },
  OnCallbackError: function (result, data) {
   this.OnCallbackInternal(result, data, true);
  },
  OnCallbackInternal: function (html, index, isError) {
   this.SetCallbackContent(html, index, isError);
   _aspxArrayRemoveAt(this.tabsContentRequest, 0);
   if(!isError && this.isActiveTabChanged) {
    this.isActiveTabChanged = false;
    this.shouldRaiseActiveTabChangedEvent = true;
   }
   if(this.enableCallbackAnimation)
    ASPxAnimationHelper.fadeIn(this.GetContentElement(index), function () { this.OnCallbackFinish(index); }.aspxBind(this));
  },
  OnCallbackFinish: function (index) {
   this.AdjustControlCore();
   if(this.shouldRaiseActiveTabChangedEvent) {
    this.shouldRaiseActiveTabChangedEvent = false;
    if(!_aspxIsExists(index))
     index = this.GetActiveTabIndex();
    this.RaiseActiveTabChanged(index);
   }
  },
  OnCallbackFinalized: function () {
   if(!this.enableCallbackAnimation)
    this.OnCallbackFinish();
  },
  OnCallbackGeneralError: function (result) {
   var callbackTabIndex = (this.tabsContentRequest.length > 0) ? this.tabsContentRequest[0] : this.activeTabIndex;
   this.SetCallbackContent(result, callbackTabIndex, true);
   _aspxArrayRemoveAt(this.tabsContentRequest, 0);
  },
  ShowLoadingPanelInTabPage: function (index) {
   if(this.lpDelay > 0)
    _aspxSetTimeout(function () { this.ShowLoadingPanelInTabPageCore(index); }.aspxBind(this), this.lpDelay);
   else
    this.ShowLoadingPanelInTabPageCore(index);
  },
  ShowLoadingPanelInTabPageCore: function (index) {
   if(_aspxArrayIndexOf(this.tabsContentRequest, index) < 0) return;
   var element = this.GetContentElement(index);
   var hasContent = !!_aspxTrim(this.GetTabContentHTML(this.GetTab(index)));
   var loadingPanelElement = this.CreateLoadingPanelWithAbsolutePosition(element, this.GetContentsCell());
   if(!hasContent && loadingPanelElement)
    _aspxAddClassNameToElement(loadingPanelElement, "dxlp-withoutBorders");
  },
  ShouldHideExistingLoadingElements: function () {
   return false;
  },
  SetCallbackContent: function (html, index, isError) {
   var element = this.GetContentElement(index);
   if(element != null) {
    if(!isError)
     element.loaded = true;
    element.loading = false;
    _aspxSetInnerHtml(this.GetContentHolder(index), html);
    this.callbackCount--;
    if(this.callbackCount == 0)
     this.UnfixControlSize();
   }
  },
  CreateTabs: function (tabsProperties) {
   for(var i = 0; i < tabsProperties.length; i++) {
    var tabName = tabsProperties[i][0] || "";
    var tab = new ASPxClientTab(this, i, tabName);
    this.CreateTabProperties(tab, tabsProperties[i]);
    this.tabs.push(tab);
   }
  },
  CreateTabProperties: function (tab, tabProperties) {
   if(_aspxIsExists(tabProperties[1]))
    tab.enabled = tabProperties[1];
   if(_aspxIsExists(tabProperties[2]))
    tab.clientEnabled = tabProperties[2];
   if(_aspxIsExists(tabProperties[3]))
    tab.visible = tabProperties[3];
   if(_aspxIsExists(tabProperties[4]))
    tab.clientVisible = tabProperties[4];
  },
  RaiseTabClick: function (index, htmlEvent) {
   var processingMode = this.autoPostBack || this.IsServerEventAssigned("TabClick") ? "Server" : "Client";
   if(!this.TabClick.IsEmpty()) {
    var htmlElement = this.GetTabElement(index, this.activeTabIndex == index);
    var args = new ASPxClientTabControlTabClickEventArgs(processingMode == "Server", this.GetTab(index), htmlElement, htmlEvent);
    this.TabClick.FireEvent(this, args);
    if(args.cancel)
     processingMode = "Handled";
    else
     processingMode = args.processOnServer ? "Server" : "Client";
   }
   return processingMode;
  },
  RaiseActiveTabChanged: function (index) {
   if(!this.ActiveTabChanged.IsEmpty()) {
    var args = new ASPxClientTabControlTabEventArgs(this.GetTab(index));
    this.ActiveTabChanged.FireEvent(this, args);
   }
  },
  RaiseActiveTabChanging: function (index) {
   var processingMode = this.autoPostBack ? "Server" : "Client";
   if(!this.ActiveTabChanging.IsEmpty()) {
    var args = new ASPxClientTabControlTabCancelEventArgs(processingMode == "Server", this.GetTab(index));
    this.ActiveTabChanging.FireEvent(this, args);
    if(args.cancel)
     processingMode = "Handled";
    else if(args.processOnServer)
     processingMode = "Server";
    else
     processingMode = args.reloadContentOnCallback ? "ClientWithReload" : "Client";
   }
   return processingMode;
  },
  SetEnabled: function (enabled) {
   for(var i = this.GetTabCount() - 1; i >= 0; i--) {
    var tab = this.GetTab(i);
    tab.SetEnabled(enabled, true );
   }
  },
  GetActiveTab: function () {
   return (this.activeTabIndex > -1) ? this.GetTab(this.activeTabIndex) : null;
  },
  SetActiveTab: function (tab) {
   if(this.IsTabVisible(tab.index))
    this.SetActiveTabIndexInternal(tab.index, false);
  },
  GetActiveTabIndex: function () {
   return this.activeTabIndex;
  },
  SetActiveTabIndex: function (index) {
   if(index < 0 || index >= this.tabs.length) return;
   if(this.IsTabVisible(index))
    this.SetActiveTabIndexInternal(index, false);
  },
  GetTabCount: function () {
   return this.tabs.length;
  },
  GetTab: function (index) {
   return (0 <= index && index < this.tabs.length) ? this.tabs[index] : null;
  },
  GetTabByName: function (name) {
   for(var i = 0; i < this.tabs.length; i++)
    if(this.tabs[i].name == name) return this.tabs[i];
   return null;
  },
  IsTabEnabled: function (index) {
   return this.tabs[index].GetEnabled();
  },
  SetTabEnabled: function (index, enabled, initialization, doNotChangeActiveTab) {
   if(!this.tabs[index].enabled) return;
   this.ClearTabElementsCache(index);
   if(!initialization || !enabled)
    this.ChangeTabEnabledStateItems(index, enabled);
   this.ChangeTabEnabledAttributes(index, enabled, doNotChangeActiveTab);
   if(!initialization)
    this.AdjustControlCore();
  },
  ChangeTabEnabledAttributes: function (index, enabled, doNotChangeActiveTab) {
   if(enabled) {
    this.ChangeTabElementsEnabledAttributes(index, _aspxRestoreAttribute, _aspxRestoreStyleAttribute);
    var isActiveTabEnabled = this.activeTabIndex != -1 ? this.IsTabEnabled(this.activeTabIndex) : false;
    if(!doNotChangeActiveTab && !isActiveTabEnabled && this.IsTabVisible(index))
     this.SetActiveTabIndexInternal(index, false);
   }
   else {
    if(this.activeTabIndex == index && !doNotChangeActiveTab) {
     for(var i = 0; i < this.GetTabCount() ; i++) {
      if(this.IsTabVisible(i) && this.IsTabEnabled(i) && i != index) {
       this.SetActiveTabIndexInternal(i, false);
       break;
      }
     }
    }
    this.ChangeTabElementsEnabledAttributes(index, _aspxResetAttribute, _aspxResetStyleAttribute);
   }
  },
  ChangeTabElementsEnabledAttributes: function (index, method, styleMethod) {
   var element = this.GetTabElement(index, false);
   if(element) {
    method(element, "onclick");
    styleMethod(element, "cursor");
    var link = this.GetInternalHyperlinkElement(element, 0);
    if(link != null) {
     method(link, "href");
     styleMethod(link, "cursor");
    }
    link = this.GetInternalHyperlinkElement(element, 1);
    if(link != null) {
     method(link, "href");
     styleMethod(link, "cursor");
    }
   }
   var activeElement = this.GetTabElement(index, true);
   if(activeElement) {
    method(activeElement, "onclick");
    styleMethod(activeElement, "cursor");
   }
  },
  ChangeTabEnabledStateItems: function (index, enabled) {
   if(!this.IsStateControllerEnabled()) return;
   var element = this.GetTabElement(index, false);
   if(element != null) aspxGetStateController().SetElementEnabled(element, enabled);
   var activeElement = this.GetTabElement(index, true);
   if(activeElement != null) aspxGetStateController().SetElementEnabled(activeElement, enabled);
  },
  GetTabTextCell: function (index, active) {
   return this.GetChild("_" + (active ? "A" : "") + "T" + index + "T");
  },
  GetTabImageCell: function (index, active) {
   return this.GetChild("_" + (active ? "A" : "") + "T" + index + "I");
  },
  GetTabImageUrl: function (index, active) {
   var imgEl = this.GetTabInsideElement(index, active, "dxtc-img");
   return imgEl ? imgEl.src : "";
  },
  SetTabImageUrl: function (index, active, url) {
   var imgEl = this.GetTabInsideElement(index, active, "dxtc-img");
   if(imgEl) {
    imgEl.src = url;
    var tabEl = this.GetTabElement(index, active);
    this.ClearElementCache(tabEl);
    this.adjustmentVars.tabsHeight.needCalculate = true;
    this.AdjustControlCore();
   }
  },
  GetTabNavigateUrl: function (index) {
   var linkEl = this.GetTabInsideElement(index, false, "dxtc-link");
   return linkEl ? linkEl.href : "";
  },
  SetTabNavigateUrl: function (index, url) {
   var linkEl = this.GetTabInsideElement(index, false, "dxtc-link");
   if(linkEl)
    linkEl.href = url;
  },
  SetTabNavigateUrlInternal: function (index, url, parentElem) {
   if(parentElem != null) {
    var link = _aspxGetChildByTagName(parentElem, "A", 0);
    if(link != null)
     link.href = url;
   }
  },
  GetTabText: function (index) {
   var isActive = index == this.GetActiveTabIndex();
   var element = this.GetTabInsideElement(index, isActive, "dxtc-link");
   if(element) {
    var textNode = _aspxGetChildTextNode(element, 0);
    if(textNode != null)
     return textNode.nodeValue;
   }
   return "";
  },
  SetTabText: function (index, text) {
   this.SetTabTextInternal(index, false, text);
   this.SetTabTextInternal(index, true, text);
   this.ClearTabElementsCache(index);
   this.AdjustControlCore();
  },
  SetTabTextInternal: function (index, isActive, text) {
   var element = this.GetTabInsideElement(index, isActive, "dxtc-link");
   if(element != null) {
    var textNode = _aspxGetChildTextNode(element, 0);
    if(textNode != null)
     textNode.nodeValue = text;
   }
  },
  GetTabInsideElement: function (index, isActive, insideClassName) {
   var tabElement = this.GetTabElement(index, isActive);
   if(!tabElement)
    return null;
   var c = _aspxGetDescendantNodesByClassName(tabElement, insideClassName);
   return null || (c.length > 0 && c[0]);
  },
  IsTabVisible: function (index) {
   return this.tabs[index].GetVisible();
  },
  IsTabStartOutOfScrollArea: function (index) {
   var width = 0;
   for(var i = 0; i < index; i++) {
    width += this.GetVisibleTabElement(index).offsetWidth;
    var separator = this.GetSeparatorElement(index);
    if(separator)
     width += separator.offsetWidth;
   }
   return Math.abs(this.scrollManager.GetScrolledAreaPosition()) > width;
  },
  SetTabVisible: function (index, visible, initialization) {
   if(!this.tabs[index].visible) return;
   if(visible && initialization) return;
   var element = this.GetTabElement(index, false);
   var currentShiftWidth = 0,
    visibleTabElement = this.GetVisibleTabElement(index),
    separatorElement = this.GetSeparatorElement(index);
   if(visibleTabElement)
    currentShiftWidth = visibleTabElement.offsetWidth;
   if(separatorElement)
    currentShiftWidth += separatorElement.offsetWidth;
   var activeElement = this.GetTabElement(index, true);
   var contentElement = this.GetContentElement(index);
   if(!visible) {
    if(this.activeTabIndex == index) {
     for(var i = 0; i < this.GetTabCount() ; i++) {
      if(this.IsTabVisible(i) && this.IsTabEnabled(i) && i != index) {
       this.SetActiveTabIndexInternal(i, false);
       break;
      }
     }
     for(var i = 0; i < this.GetTabCount() ; i++) {
      if(this.IsTabVisible(i) && i != index) {
       this.SetActiveTabIndexInternal(i, false);
       break;
      }
     }
     if(this.activeTabIndex == index) {
      this.activeTabIndex = -1;
      _aspxSetElementDisplay(this.GetMainElement(), false);
     }
    }
    if(element != null)
     _aspxSetElementDisplay(element, false);
    if(activeElement != null)
     _aspxSetElementDisplay(activeElement, false);
    if(contentElement != null)
     _aspxSetElementDisplay(contentElement, false);
   }
   else {
    if(element != null)
     _aspxSetElementDisplay(element, this.activeTabIndex != index);
    if(activeElement != null)
     _aspxSetElementDisplay(activeElement, this.activeTabIndex == index);
    if(contentElement != null)
     _aspxSetElementDisplay(contentElement, this.activeTabIndex == index);
    if(this.activeTabIndex == -1) {
     _aspxSetElementDisplay(this.GetMainElement(), true);
     this.SetActiveTabIndexInternal(index, false);
    }
    else if(!this.IsTabEnabled(this.activeTabIndex) && this.IsTabEnabled(index))
     this.SetActiveTabIndexInternal(index, false);
   }
   if(this.GetTabsCell())
    this.CorrectTabsBorders(index, visible);
   this.SetSeparatorsVisiblility();
   this.adjustmentVars.tabsHeight.needCalculate = true;
   if(!this.enableScrolling)
    this.AdjustTabControlSizeLite();
   else {
    this.AdjustTabScrolling(false, false);
    if(this.IsTabStartOutOfScrollArea(index)) {
     currentShiftWidth = visible
      ? (this.GetVisibleTabElement(index).offsetWidth + this.GetSeparatorElement(index).offsetWidth) * (-1)
      : currentShiftWidth;
     this.CorrectScrollArea(currentShiftWidth);
    }
    if(this.firstShownTabIndex == index && !visible) {
     var newShownTabIndex = this.GetNextVisibleTabIndex(index);
     if(newShownTabIndex < 0) {
      newShownTabIndex = this.GetPrevVisibleTabIndex(index);
      if(newShownTabIndex < 0) return;
     }
     this.ScrollToShowTab(newShownTabIndex, true);
    }
   }
  },
  CorrectTabsBorders: function (index, visible) {
   var firstVisibleTabIndex = this.GetNextVisibleTabIndex(-1);
   var prevFirstVisibleTabIndex = visible
    ? this.GetNextVisibleTabIndex(firstVisibleTabIndex)
    : index < firstVisibleTabIndex
     ? index
     : firstVisibleTabIndex;
   if(this.tabs.length > 1 && index <= prevFirstVisibleTabIndex && this.IsTopBottomTabPosition() &&
    (!this.GetSeparatorElement(0) || this.GetSeparatorElement(0).style.width === "0px")) {
    var borderLeftStyle = _aspxGetCurrentStyle(this.GetTabElement(0)).borderLeftStyle;
    this.SetTabBorderStyle(firstVisibleTabIndex, false, "borderLeftStyle", borderLeftStyle);
    this.SetTabBorderStyle(firstVisibleTabIndex, true, "borderLeftStyle", borderLeftStyle);
    if(prevFirstVisibleTabIndex > 0) {
     this.SetTabBorderStyle(prevFirstVisibleTabIndex, false, "borderLeftStyle", "none");
     this.SetTabBorderStyle(prevFirstVisibleTabIndex, true, "borderLeftStyle", "none");
    }
    this.AdjustTabControlSizeLite();
   }
  },
  SetTabBorderStyle: function (index, active, stylePropName, stylePropValue) {
   var tabElement = this.GetTabElement(index, active);
   if(tabElement) {
    tabElement.style[stylePropName] = stylePropValue;
    this.ClearElementCache(tabElement);
   }
  },
  CorrectScrollArea: function (value) {
   var rtlCorrect = this.rtl ? -1 : 1;
   var newPostion = (this.scrollManager.GetScrolledAreaPosition() + value * rtlCorrect);
   this.scrollManager.SetScrolledAreaPosition((newPostion * rtlCorrect) <= 0 ? newPostion : 0);
  },
  SetSeparatorsVisiblility: function () {
   for(var i = 0; i < this.tabs.length; i++) {
    var separatorVisible = this.tabs[i].GetVisible() && this.GetNextVisibleTabIndex(i) > -1;
    var separatorElement = this.GetSeparatorElement(i);
    if(separatorElement != null)
     _aspxSetElementDisplay(separatorElement, separatorVisible);
   }
  },
  GetNextVisibleTabIndex: function (index, allowHidden) {
   for(var i = index + 1; i < this.tabs.length; i++) {
    if(allowHidden && this.tabs[i].visible || this.tabs[i].GetVisible())
     return i;
   }
   return -1;
  },
  GetPrevVisibleTabIndex: function (index) {
   for(var i = index - 1; i >= 0; i--) {
    if(this.tabs[i].GetVisible())
     return i;
   }
   return -1;
  }
 });
 ASPxClientTabControlBase.TabChildElementIDRegExp = /^A?T\d+(T|Img)?$/;
 ASPxClientTabControlBase.IsTabChildElementID = function (id) {
  return ASPxClientTabControlBase.TabChildElementIDRegExp.test(id);
 };
 ASPxClientTabControlBase.PrepareStateController = function () {
  if(ASPxClientTabControlBase.IsStateControllerPrepared) return;
  aspxAddAfterSetHoverState(aspxTabStateChanged);
  aspxAddAfterClearHoverState(aspxTabStateChanged);
  aspxAddAfterSetPressedState(aspxTabStateChanged);
  aspxAddAfterClearPressedState(aspxTabStateChanged);
  ASPxClientTabControlBase.IsStateControllerPrepared = true;
 };
 var ASPxClientTabControl = _aspxCreateClass(ASPxClientTabControlBase, {
  SetHeight: function (height) { }
 });
 ASPxClientTabControl.Cast = ASPxClientControl.Cast;
 var ASPxClientPageControl = _aspxCreateClass(ASPxClientTabControlBase, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.handleClickOnWholeTab = false;
   this.sizingConfig.supportPercentHeight = true;
   this.sizingConfig.supportAutoHeight = true;
  },
  GetTabContentHTML: function (tab) {
   var element = this.GetContentHolder(tab.index);
   return (element != null) ? element.innerHTML : "";
  },
  SetTabContentHTML: function (tab, html, useAnimation) {
   var element = this.GetContentElement(tab.index);
   if(element != null) {
    _aspxSetInnerHtml(this.GetContentHolder(tab.index), html);
    this.AdjustControlCore();
    if(useAnimation && typeof (ASPxAnimationHelper) != "undefined")
     ASPxAnimationHelper.fadeIn(element, function () { }.aspxBind(this));
   }
  },
  PerformCallback: function (parameter) {
   var index = this.GetActiveTabIndex();
   var element = this.GetContentElement(index);
   if(element != null) {
    var arg = index + "|" + parameter;
    this.PerformCallbackInternal(index, element, arg);
   }
  }
 });
 ASPxClientPageControl.Cast = ASPxClientControl.Cast;
 var ASPxClientTab = _aspxCreateClass(null, {
  constructor: function (tabControl, index, name) {
   this.tabControl = tabControl;
   this.index = index;
   this.name = name;
   this.enabled = true;
   this.clientEnabled = true;
   this.visible = true;
   this.clientVisible = true;
  },
  GetEnabled: function () {
   return this.enabled && this.clientEnabled;
  },
  SetEnabled: function (value, doNotChangeActiveTab) {
   if(this.clientEnabled != value) {
    this.clientEnabled = value;
    this.tabControl.SetTabEnabled(this.index, value, false, doNotChangeActiveTab);
   }
  },
  GetImageUrl: function (active) {
   return this.tabControl.GetTabImageUrl(this.index, active);
  },
  SetImageUrl: function (value, active) {
   this.tabControl.SetTabImageUrl(this.index, active, value);
  },
  GetActiveImageUrl: function () {
   return this.tabControl.GetTabImageUrl(this.index, true);
  },
  SetActiveImageUrl: function (value) {
   this.tabControl.SetTabImageUrl(this.index, true, value);
  },
  GetNavigateUrl: function () {
   return this.tabControl.GetTabNavigateUrl(this.index);
  },
  SetNavigateUrl: function (value) {
   this.tabControl.SetTabNavigateUrl(this.index, value);
  },
  GetText: function () {
   return this.tabControl.GetTabText(this.index);
  },
  SetText: function (value) {
   this.tabControl.SetTabText(this.index, value);
  },
  GetVisible: function () {
   return this.visible && (this.clientVisible || this.index == this.tabControl.GetActiveTabIndex());
  },
  SetVisible: function (value) {
   if(this.GetVisible() != value) {
    this.clientVisible = value;
    this.tabControl.SetTabVisible(this.index, value, false);
   }
  }
 });
 var ASPxClientTabControlTabEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function (tab, htmlElement, htmlEvent) {
   this.constructor.prototype.constructor.call(this);
   this.tab = tab;
  }
 });
 var ASPxClientTabControlTabCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
  constructor: function (processOnServer, tab) {
   this.constructor.prototype.constructor.call(this, processOnServer);
   this.tab = tab;
   this.reloadContentOnCallback = false;
  }
 });
 var ASPxClientTabControlTabClickEventArgs = _aspxCreateClass(ASPxClientTabControlTabCancelEventArgs, {
  constructor: function (processOnServer, tab, htmlElement, htmlEvent) {
   this.constructor.prototype.constructor.call(this, processOnServer, tab);
   this.htmlElement = htmlElement;
   this.htmlEvent = htmlEvent;
  }
 });
 function aspxTCTClick(evt, name, index) {
  var tc = aspxGetControlCollection().Get(name);
  if(tc != null) tc.OnTabClick(evt, index);
  if(!__aspxNetscapeFamily)
   evt.cancelBubble = true;
 }
 function aspxTabStateChanged(source, args) {
  var postfixIndex = args.item.name.lastIndexOf("_");
  var postfix = args.item.name.substring(postfixIndex + 1);
  if(!ASPxClientTabControlBase.IsTabChildElementID(postfix))
   return;
  var tcName = args.item.name.substring(0, postfixIndex);
  var tc = aspxGetControlCollection().Get(tcName);
  if(tc && tc.CorrectTabHeightOnStateChanged)
   tc.CorrectTabHeightOnStateChanged(args.element);
 }
 window.aspxTCTClick = aspxTCTClick;
 window.ASPxClientTabControlBase = ASPxClientTabControlBase;
 window.ASPxClientPageControl = ASPxClientPageControl;
 window.ASPxClientTabControl = ASPxClientTabControl;
 window.ASPxClientTab = ASPxClientTab;
 window.ASPxClientTabControlTabClickEventArgs = ASPxClientTabControlTabClickEventArgs;
 window.ASPxClientTabControlTabCancelEventArgs = ASPxClientTabControlTabCancelEventArgs;
 window.ASPxClientTabControlTabEventArgs = ASPxClientTabControlTabEventArgs;
})();
ASPxScrollingManager = _aspxCreateClass(null, {
 constructor: function(owner, scrollableArea, orientation, onBeforeScrolling, onAfterScrolling, forseEmulation) {
  this.owner = owner;
  this.scrollableArea = scrollableArea;
  this.orientation = orientation;
  this.animationDelay = 1;
  this.animationStep = 2;
  this.animationOffset = 5;
  this.animationAcceleration = 0;
  this.scrollSessionInterval = 10;
  this.stopScrolling = true;
  this.busy = false;
  this.currentAcceleration = 0;
  this.startPos;
  this.onBeforeScrolling = onBeforeScrolling;
  this.onAfterScrolling = onAfterScrolling;
  this.emulationMode = forseEmulation === true || !__aspxTouchUI; 
  this.Initialize();
 },
 Initialize: function(){
  if(__aspxMSTouchUI){
   this.scrollableArea.parentNode.style.overflow = "auto";
   this.scrollableArea.parentNode.style["-ms-overflow-style"] = "-ms-autohiding-scrollbar";
  }
  if(this.emulationMode){
   this.wrapper = new ASPxScrollingManager.scrollWrapper(this.scrollableArea);
  } else {
   this.wrapper = new ASPxScrollingManager.scrollWrapperTouchUI(this.scrollableArea, function(direction){
    if(this.onAfterScrolling)
     this.onAfterScrolling(this, direction);
   }.aspxBind(this)); 
  }
 },
 GetScrolledAreaPosition: function() {
  return this.wrapper.GetScrollLeft() * this.orientation[0]
   + this.wrapper.GetScrollTop() * this.orientation[1];
 },
 SetScrolledAreaPosition: function(pos) {
  this.wrapper.SetScrollLeft(pos * this.orientation[0]);
  this.wrapper.SetScrollTop(pos * this.orientation[1]);
 },
 PrepareForScrollAnimation: function() {
  if(!this.scrollableArea)
   return;  
  this.currentAcceleration = 0;
  this.startPos = this.GetScrolledAreaPosition();
  this.busy = false;
 },
 GetAnimationStep: function(dir) {
  var step = dir * (this.animationStep + this.currentAcceleration);
  var newPos = this.GetScrolledAreaPosition() + step;
  var requiredPos = this.startPos + dir * this.animationOffset;
  if((dir == 1 && newPos >= requiredPos) || (dir == -1 && newPos <= requiredPos)) {
   step = requiredPos - this.GetScrolledAreaPosition();
  } 
  return step;
 },
 DoScrollSessionAnimation: function(direction) {
  if(!this.scrollableArea)
   return;
  this.SetScrolledAreaPosition(this.GetScrolledAreaPosition() + this.GetAnimationStep(direction));
  var self = this;
  if(!this.ShouldStopScrollSessionAnimation()) {
   this.busy = true;
   this.currentAcceleration += this.animationAcceleration;
   _aspxSetTimeout(function() { self.DoScrollSessionAnimation(direction); }, this.animationDelay);
  } else {
   if(this.onAfterScrolling)
    this.onAfterScrolling(this, -direction);   
   this.busy = false;
   this.currentAcceleration = 0;
   _aspxSetTimeout(function() { self.DoScroll(direction); }, this.scrollSessionInterval);
  }    
 },
 ShouldStopScrollSessionAnimation: function() {
  return (Math.abs(this.GetScrolledAreaPosition() - this.startPos) >= Math.abs(this.animationOffset));
 },
 DoScroll: function(direction) {
  if(!this.scrollableArea)
   return; 
  if(!this.busy && !this.stopScrolling) {
   if(this.onBeforeScrolling)
    this.onBeforeScrolling(this, -direction);
   if(this.stopScrolling) return;
   this.PrepareForScrollAnimation();
   this.DoScrollSessionAnimation(direction);
  } 
 },
 StartScrolling: function(direction, delay, step) {
  this.stopScrolling = false;
  this.animationDelay = delay;
  this.animationStep = step;
  this.DoScroll(-direction);
 },
 StopScrolling: function() {
  this.stopScrolling = true;
 },
 IsStopped: function() {
  return this.stopScrolling;
 }
});
(function(){
 ASPxScrollingManager.scrollWrapper = function(scrollableArea){
  this.scrollableArea = scrollableArea;
  this.Initialize();
 };
 ASPxScrollingManager.scrollWrapper.prototype = {
  Initialize: function(){
   this.scrollableArea.style.position = "relative";
   this.scrollableArea.parentNode.style.position = "relative";
  },
  GetScrollLeft: function(){ return _aspxPxToInt(this.scrollableArea.style.left); },
  GetScrollTop:  function(){ return _aspxPxToInt(this.scrollableArea.style.top); },
  SetScrollLeft: function(value){ this.scrollableArea.style.left = value + "px"; },
  SetScrollTop:  function(value){ this.scrollableArea.style.top  = value + "px"; }
 };
 ASPxScrollingManager.scrollWrapperTouchUI = function(scrollableArea, onScroll){
  this.scrollableArea = scrollableArea;
  this.scrollTimerId = -1;
  this.onScroll = onScroll;
  this.Initialize(onScroll);
 };
 ASPxScrollingManager.scrollWrapperTouchUI.prototype = {
  Initialize: function(){
   var div = this.scrollableArea.parentNode;
   var timeout = __aspxMSTouchUI ? 500 : 1000;
   var nativeScrollSupported = __aspxMSTouchUI || ASPxClientTouchUI.nativeWebKitScrollingSupported();
   this.onScrollCore = function(){
     _aspxClearTimer(this.scrollTimerId);
     if(this.onScrollLocked) return;
     this.scrollTimerId = window.setTimeout(this.onScrollByTimer, timeout);
    }.aspxBind(this);
   this.onScrollByTimer = function(){
     if(this.onScrollLocked) return;
     var direction = this.lastScrollTop < div.scrollTop ? 1 : -1;
     this.lastScrollTop = div.scrollTop;
     this.onScrollLocked = true;
     this.onScroll(direction);
     this.onScrollLocked = false;
    }.aspxBind(this);
   this.lastScrollTop = div.scrollTop;
   var onscroll = nativeScrollSupported ? this.onScrollCore : this.onScrollByTimer;
   _aspxAttachEventToElement(div, "scroll", onscroll);
   if(__aspxWebKitTouchUI)
    this.scrollExtender = ASPxClientTouchUI.MakeScrollable(div, {showHorizontalScrollbar: false});
  },
  GetScrollLeft: function(){ return -this.scrollableArea.parentNode.scrollLeft; },
  GetScrollTop:  function(){ return -this.scrollableArea.parentNode.scrollTop; },
  SetScrollLeft: function(value){ 
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollLeft = -value; 
   this.onScrollLocked = false;
  },
  SetScrollTop:  function(value){ 
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollTop  = -value; 
   this.onScrollLocked = false;
  }
 };
})();
MVCxClientPageControl = _aspxCreateClass(ASPxClientPageControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientPageControl.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) }; 
  this.ActiveTabChanged.AddHandler(function(s, e){ s.SynchronizeState(); });
  ASPxClientPageControl.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientPageControl.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientPageControl.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientPageControl.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackParams: function(arg){
  var params = {};
  var activeTabIndexInputElement = this.GetActiveTabIndexInputElement();
  if (activeTabIndexInputElement)
   params[activeTabIndexInputElement.name] = activeTabIndexInputElement.value;
  return params;
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientPageControl.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.html = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientPageControl.prototype.EvalCallbackResult.call(this, resultString);
 },
 SetTabEnabled: function(index, enabled, initialization, doNotChangeActiveTab){
  ASPxClientPageControl.prototype.SetTabEnabled.call(this, index, enabled, initialization, doNotChangeActiveTab);
  this.SynchronizeState();
 },
 SetTabVisible: function(index, visible, initialization){
  ASPxClientPageControl.prototype.SetTabVisible.call(this, index, visible, initialization);
  this.SynchronizeState();
 },
 SynchronizeState: function(){
  var stateInput = this.GetStateInput();
  if(stateInput)
   stateInput.value = _aspxToJson(this.GetState());
 },
 GetStateInput: function(){
  var mainElement = this.GetMainElement();
  if(!mainElement.DXState){
   mainElement.DXState = _aspxCreateHiddenField(this.name + "_DXState");
   mainElement.appendChild(mainElement.DXState);
  }
  return mainElement.DXState;
 },
 GetState: function(){
  function SerializeNode(tab){
   var result = [];
   result.push(tab.index);
   result.push(tab.name);
   result.push(tab.GetText());
   result.push(Number(tab.GetEnabled()));
   result.push(Number(tab.GetVisible()));
   return result.join(";");
  };
  var serializedTabs = [];
  var tabCount = this.GetTabCount();
  for(var i = 0; i < tabCount; i++){
   var tab = this.GetTab(i);
   serializedTabs.push(SerializeNode(tab));
  }
  var state = {};
  state.t = serializedTabs;
  var activeTab = this.GetActiveTab();
  if(activeTab)
   state.i = activeTab.index;
  return state;
 }
});

var __aspxDragHelper = null;
ASPxClientDragHelper = _aspxCreateClass(null, {
 constructor: function(e, root, clone){
  if(__aspxDragHelper != null) __aspxDragHelper.cancelDrag();
  this.dragArea = 5;
  this.clickX = _aspxGetEventX(e);
  this.clickY = _aspxGetEventY(e);
  this.centerClone = false;
  this.cachedCloneWidth = -1;
  this.cachedCloneHeight = -1;
  this.cachedOriginalX = -1;
  this.cachedOriginalY = -1;
  this.canDrag = true; 
  if(typeof(root) == "string") 
   root = _aspxGetParentByTagName(_aspxGetEventSource(e), root);
  this.obj = root && root != null ? root : _aspxGetEventSource(e);
  this.clone = clone;
  this.dragObj = null; 
  this.additionalObj = null;
  this.onDoClick = null;
  this.onEndDrag = null;
  this.onCancelDrag = null;
  this.onDragDivCreating = null;
  this.onCloneCreating = null;
  this.onCloneCreated = null;
  this.dragDiv = null;
  __aspxDragHelper = this;
  this.clearSelectionOnce = false;
 }, 
 drag: function(e) {
  if(!this.canDrag) return;
  _aspxClearSelection();
  if(!this.isDragging()) {
   if(!this.isOutOfDragArea(e)) 
    return;
   this.startDragCore(e);
  }
  if(__aspxIE && !_aspxGetIsLeftButtonPressed(e)) {
   this.cancelDrag(e);
   return;
  }
  if(!__aspxIE)
   _aspxSetElementSelectionEnabled(document.body, false);
  this.dragCore(e);
 },
 startDragCore: function(e) {  
  this.dragObj = this.clone != true ? this.obj : this.createClone(e);
 },
 dragCore: function(e) { 
  this.updateDragDivPosition(e);
 },
 endDrag: function(e) { 
  if(!this.isDragging() && !this.isOutOfDragArea(e)) {
   if(this.onDoClick)
    this.onDoClick(this, e);
  } else {
   if(this.onEndDrag)
    this.onEndDrag(this, e);
  }
  this.cancelDrag();
 },
 cancel: function(){
  this.cancelDrag();
 },
 cancelDrag: function() {
  if(this.dragDiv != null) {
   document.body.removeChild(this.dragDiv);
   this.dragDiv = null;
  }
  if(this.onCancelDrag)
   this.onCancelDrag(this);
  __aspxDragHelper = null;
  if(!__aspxIE)
   _aspxSetElementSelectionEnabled(document.body, true);
 },
 isDragging: function() {    
  return this.dragObj != null;
 },
 updateDragDivPosition: function(e) {
  if(this.centerClone) {
   this.dragDiv.style.left = _aspxGetEventX(e) - this.cachedCloneWidth / 2 + "px";
   this.dragDiv.style.top = _aspxGetEventY(e) - this.cachedCloneHeight / 2 + "px";
  } else {
   this.dragDiv.style.left = this.cachedOriginalX + _aspxGetEventX(e) - this.clickX + "px";
   this.dragDiv.style.top = this.cachedOriginalY + _aspxGetEventY(e) - this.clickY + "px";
  }
 },
 createClone: function(e) {
  this.dragDiv = document.createElement("div");
  if(this.onDragDivCreating)
   this.onDragDivCreating(this, this.dragDiv);
  var clone = this.creatingClone();  
  this.dragDiv.appendChild(clone);
  document.body.appendChild(this.dragDiv);
  this.dragDiv.style.position = "absolute";    
  this.dragDiv.style.cursor = "move";
  this.dragDiv.style.borderStyle = "none";
  this.dragDiv.style.padding = "0";
  this.dragDiv.style.margin = "0";
  this.dragDiv.style.backgroundColor = "transparent";
  this.dragDiv.style.zIndex = 20000; 
  if(this.onCloneCreated)
   this.onCloneCreated(clone);
  this.cachedCloneWidth = clone.offsetWidth;
  this.cachedCloneHeight = clone.offsetHeight;
  if(!this.centerClone) {  
   this.cachedOriginalX = _aspxGetAbsoluteX(this.obj);
   this.cachedOriginalY = _aspxGetAbsoluteY(this.obj);
  }
  this.dragDiv.style.width = this.cachedCloneWidth + "px";
  this.dragDiv.style.height = this.cachedCloneHeight + "px";
  this.updateDragDivPosition(e);
  return this.dragDiv;
 },
 creatingClone: function() {
  var clone = this.obj.cloneNode(true);
  if(!this.onCloneCreating) return clone;
  return this.onCloneCreating(clone);
 },
 addElementToDragDiv: function(element) {
  if(this.dragDiv == null) return;
  this.additionalObj = element.cloneNode(true);
  this.additionalObj.style.visibility = "visible";
  this.additionalObj.style.display = "";
  this.additionalObj.style.top = "";
  this.dragDiv.appendChild(this.additionalObj);
 },
 removeElementFromDragDiv: function() {
  if(this.additionalObj == null || this.dragDiv == null) return;
  this.dragDiv.removeChild(this.additionalObj);
  this.additionalObj = null;
 },
 isOutOfDragArea: function(e) {
  return Math.max(
   Math.abs(_aspxGetEventX(e) - this.clickX), 
   Math.abs(_aspxGetEventY(e) - this.clickY)
  ) >= this.dragArea;
 }
});
function DragHelper_onmouseup(e) {
 if(__aspxDragHelper != null) {
  __aspxDragHelper.endDrag(e);
  return true;
 }
}
function DragHelper_cancel(e) {
 if(__aspxDragHelper != null) {
  __aspxDragHelper.cancel(e);
  return true;
 }
}
function DragHelper_onmousemove(e) {
 if(__aspxDragHelper != null && !(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)) {
  __aspxDragHelper.drag(e);
  if(ASPxClientTouchUI.isTouchEvent(e) && __aspxDragHelper.canDrag) {
   e.preventDefault();
   ASPxClientTouchUI.preventScrollOnEvent(e);
  }
  return true;
 }
}
function DragHelper_onkeydown(e) {
 if(!__aspxDragHelper) return;
 if(e.keyCode == ASPxKey.Esc)
  __aspxDragHelper.cancelDrag();
 return true;
}
function DragHelper_onkeyup(e) {
 if (!__aspxDragHelper) return;
 if(e.keyCode == ASPxKey.Esc && __aspxWebKitFamily)
  __aspxDragHelper.cancelDrag();
 return true;
}
function DragHelper_onselectstart(e) {
 var drag = __aspxDragHelper;
 if(drag && (drag.canDrag || drag.clearSelectionOnce)) {
  _aspxClearSelection();
  drag.clearSelectionOnce = false;
  return false;
 }
}
(function(){
 if(__aspxMSTouchUI)
  _aspxAttachEventToDocument("MSPointerCancel", DragHelper_cancel);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, DragHelper_onmouseup);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, DragHelper_onmousemove);
 _aspxAttachEventToDocument("keydown", DragHelper_onkeydown);
 _aspxAttachEventToDocument("keyup", DragHelper_onkeyup);
 _aspxAttachEventToDocument("selectstart", DragHelper_onselectstart);
})();
var __aspxCursorTargets = null;
ASPxClientCursorTargets = _aspxCreateClass(null, {
 constructor: function() {
  this.list = [];
  this.starttargetElement = null;
  this.starttargetTag = 0;
  this.oldtargetElement = null;
  this.oldtargetTag = 0;
  this.targetElement = null;
  this.targetTag = 0;
  this.x = 0;
  this.y = 0;
  this.removedX = 0;
  this.removedY = 0;
  this.removedWidth = 0;
  this.removedHeight = 0;
  this.onTargetCreated = null;
  this.onTargetChanging = null;
  this.onTargetChanged = null;
  this.onTargetAdding = null;
  this.onTargetAllowed = null;
  __aspxCursorTargets = this;
 },
 addElement: function(element) {
  if(!this.canAddElement(element)) return null;
  var target = new ASPxClientCursorTarget(element);
  this.onTargetCreated && this.onTargetCreated(this, target);
  this.list.push(target);
  return target;
 },
 removeElement: function(element) {
  for(var i = 0; i < this.list.length; i++) {
   if(this.list[i].element == element) {
    this.list.splice(i, 1);
    return;
   }
  }
 },
 addParentElement: function(parent, child) {
  var target = this.addElement(parent);
  if(target != null) {
   target.targetElement = child;
  }
  return target;
 },
 RegisterTargets: function(element, idPrefixArray) {
  this.addFunc = this.addElement;
  this.RegisterTargetsCore(element, idPrefixArray);
 },
 UnregisterTargets: function(element, idPrefixArray) {
  this.addFunc = this.removeElement;
  this.RegisterTargetsCore(element, idPrefixArray);
 },
 RegisterTargetsCore: function(element, idPrefixArray) {
  if(element == null) return;
  for(var i = 0; i < idPrefixArray.length; i++)
   this.RegisterTargetCore(element, idPrefixArray[i]);
 },
 RegisterTargetCore: function(element, idPrefix) {
  if(!_aspxIsExists(element.id)) return;
  if(element.id.indexOf(idPrefix) > -1)
   this.addFunc(element);
  for(var i = 0; i < element.childNodes.length; i++)
   this.RegisterTargetCore(element.childNodes[i], idPrefix);
 },
 canAddElement: function(element) {
  if(element == null || !_aspxGetElementDisplay(element))
   return false;
  for(var i = 0; i < this.list.length; i++) {
   if(this.list[i].targetElement == element) return false;
  }
  if(this.onTargetAdding != null && !this.onTargetAdding(this, element)) return false;
  return element.style.visibility != "hidden";
 },
 removeInitialTarget: function(x, y) {
  var el = this.getTarget(x + _aspxGetDocumentScrollLeft(), y + _aspxGetDocumentScrollTop());
  if(el == null) return;
  this.removedX = _aspxGetAbsoluteX(el);
  this.removedY = _aspxGetAbsoluteY(el);
  this.removedWidth = el.offsetWidth;
  this.removedHeight = el.offsetHeight;
 },
 getTarget: function(x, y) {
  for(var i = 0; i < this.list.length; i++) {
   var record = this.list[i];
   if(record.contains(x, y)) {
    if(!this.onTargetAllowed || this.onTargetAllowed(record.targetElement, x, y))
     return record.targetElement;
   }
  }
  return null;
 },
 targetChanged: function(element, tag) {
  this.targetElement = element;
  this.targetTag = tag;
  if(this.onTargetChanging)
   this.onTargetChanging(this);
  if(this.oldtargetElement != this.targetElement || this.oldtargetTag != this.targetTag) {
   if(this.onTargetChanged)
    this.onTargetChanged(this);
   this.oldtargetElement = this.targetElement;
   this.oldtargetTag = this.targetTag;
  }
 },
 cancelChanging: function() {
  this.targetElement = this.oldtargetElement;
  this.targetTag = this.oldtargetTag;
 },
 isLeftPartOfElement: function() {
  if(this.targetElement == null) return true;
  var left = this.x - this.targetElementX();
  return left < this.targetElement.offsetWidth / 2;
 },
 isTopPartOfElement: function() {
  if(this.targetElement == null) return true;
  var top = this.y - this.targetElementY();
  return top < this.targetElement.offsetHeight / 2;
 },
 targetElementX: function() {
  return this.targetElement != null ? _aspxGetAbsoluteX(this.targetElement) : 0;
 },
 targetElementY: function() {
  return this.targetElement != null ? _aspxGetAbsoluteY(this.targetElement) : 0;
 },
 onmousemove: function(e) {
  this.doTargetChanged(e);
 },
 onmouseup: function(e) {
  this.doTargetChanged(e);
  __aspxCursorTargets = null;
 },
 doTargetChanged: function(e) {
  this.x = _aspxGetEventX(e);
  this.y = _aspxGetEventY(e);
  if(this.inRemovedBounds(this.x, this.y)) return;
  this.targetChanged(this.getTarget(this.x, this.y), 0);
 },
 inRemovedBounds: function(x, y) {
  if(this.removedWidth == 0) return false;
  return x > this.removedX && x < (this.removedX + this.removedWidth) &&
   y > this.removedY && y < (this.removedY + this.removedHeight);
 }
});
ASPxClientCursorTarget = _aspxCreateClass(null, {
 constructor: function(element) {
  this.element = element;
  this.targetElement = element;
  this.UpdatePosition();
 },
 contains: function(x, y) {
  return x >= this.absoluteX && x <= this.absoluteX + this.GetElementWidth() &&
   y >= this.absoluteY && y <= this.absoluteY + this.GetElementHeight();
 },
 GetElementWidth: function() {
  return this.element.offsetWidth;
 },
 GetElementHeight: function() {
  return this.element.offsetHeight;
 },
 UpdatePosition: function() {
  this.absoluteX = _aspxGetAbsoluteX(this.element);
  this.absoluteY = _aspxGetAbsoluteY(this.element);
 }
});
function CursorTarget_onmouseup(e) {
 if(__aspxCursorTargets != null) {
  __aspxCursorTargets.onmouseup(e);
  return true;
 }
}
function CursorTarget_onmousemove(e) {
 if(__aspxCursorTargets != null) {
  __aspxCursorTargets.onmousemove(e);
  return true;
 }
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, CursorTarget_onmouseup);
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, CursorTarget_onmousemove);

ASPxClientGridViewBatchEditHelper = _aspxCreateClass(null, {
 EditType_Cell: 0,
 EditType_Row: 1,
 StartEditAction_Click: 0,
 StartEditAction_DblClick: 1,
 ValidationMode_OnEndEdit: 0,
 ValidationMode_OnSaveChanges: 1,
 InvalidRowVisibleIndex: -100000,
 NewRowInitValuesKey: "NIV",
 constructor: function(grid) {
  this.grid = grid;
  this.pageServerValues = { };
  this.editRowVisibleIndex = this.InvalidRowVisibleIndex;
  this.editedColumnIndices = [ ];
  this.invalidRowIndices = [ ];
  this.dataRowActiveElements = { };
  this.editTemplateCellActiveElements = { };
  this.insertedRowIndices = [ ];
  this.insertedValues = { };
  this.updatedValues = { };
  this.deletedRowKeys = [ ];
  this.serverCellTexts = { };
  this.lockEdit = false;
  this.focusedEditorColumnIndex = -1;
  this.focusedColumnIndex = -1;
  ASPxClientGridViewBatchEditUpdateWatcher.Instance.Add(this);
 },
 IsSingleEditMode: function() { return this.grid.batchEditClientState.editType === this.EditType_Cell; },
 IsStartEditOnDblClick: function() { return this.grid.batchEditClientState.startEditAction === this.StartEditAction_DblClick; },
 IsNewRowOnTop: function() { return !!this.grid.batchEditClientState.isNewRowOnTop; },
 RequireValidateOnEndEdit: function() { return !!this.grid.batchEditClientState.validateOnEndEdit; },
 AllowEndEditOnError: function() { return !!this.grid.batchEditClientState.allowEndEditOnError; },
 GetEditColumnIndices: function() { return this.grid.batchEditClientState.columnIndices; },
 GetUpdateInfo: function() { return this.grid.batchEditClientState.updateInfo; },
 GetValidationInfo: function() { return this.grid.batchEditClientState.validationInfo; },
 GetCheckColumnsDisplayHtml: function() { return this.grid.batchEditClientState.checkColumnsDisplayHtml; },
 GetConfirmUpdateText: function() { return this.grid.batchEditClientState.confirmUpdate; },
 GetColumnIndices: function() { return this.grid.batchEditClientState.columnIndices; },
 GetTemplateColumnIndices: function() { return this.grid.batchEditClientState.templateColumnIndices },
 IsNewRow: function(key) { return _aspxArrayIndexOf(this.insertedRowIndices, key) >= 0; },
 IsDeletedRow: function(key) { return _aspxArrayIndexOf(this.deletedRowKeys, key) >= 0; },
 IsCheckColumn: function(columnIndex) { return !!this.GetCheckColumnsDisplayHtml()[columnIndex]; },
 CanEditColumn: function(columnIndex) { return _aspxArrayIndexOf(this.GetEditColumnIndices(), columnIndex) >= 0; },
 IsEditTemplateColumn: function(columnIndex) { return _aspxArrayIndexOf(this.GetTemplateColumnIndices(), columnIndex) >= 0; },
 IsMemoEdit: function(editor) { return ASPxIdent.IsASPxClientMemo && ASPxIdent.IsASPxClientMemo(editor); },
 GetDataRow: function(visibleIndex) { return this.grid.GetDataRow(visibleIndex); },
 GetEditorContainer: function(columnIndex) { return this.grid.GetBatchEditorContainer(columnIndex); },
 GetEditor: function(columnIndex) { return this.grid.GetEditor(columnIndex); },
 LoadPageServerValues: function() {
  var serverValuesInput = this.grid.GetBatchEditPageValuesInput();
  if(serverValuesInput)
   this.pageServerValues = eval(serverValuesInput.value) || { };
 },
 LoadSavedClientValues: function() {
  var stateString = this.grid.GetBatchEditClientModifiedValuesInput().value;
  if(!stateString) return;
  var savedClientState = eval(stateString);
  if(!savedClientState) return;
  this.insertedRowIndices = savedClientState.InsertedIndices || [ ];
  this.insertedValues = savedClientState.InsertedValues || { };
  this.updatedValues = savedClientState.UpdatedValues || { };
  this.deletedRowKeys = savedClientState.DeletedKeys || [ ];
 },
 GetClientState: function() {
  return { InsertedIndices: this.insertedRowIndices, InsertedValues: this.insertedValues, UpdatedValues: this.updatedValues, DeletedKeys: this.deletedRowKeys };
 },
 GetClientValuesBag: function(visibleIndex) {
  return visibleIndex >= 0 ? this.updatedValues : this.insertedValues;
 },
 GetRowKey: function(visibleIndex) {
  return visibleIndex >= 0 ? this.grid.GetRowKey(visibleIndex) : visibleIndex;
 },
 IsDirtyCell: function(visibleIndex, columnIndex) {
  var hash = this.GetClientValuesBag(visibleIndex);
  var key = this.GetRowKey(visibleIndex); 
  var rowValues = hash[key];
  return rowValues && rowValues.hasOwnProperty(columnIndex);
 },
 GetCellValue: function(visibleIndex, columnIndex) {
  if(this.IsDirtyCell(visibleIndex, columnIndex))
   return this.GetClientValue(visibleIndex, columnIndex);
  return this.GetServerValue(visibleIndex, columnIndex);
 },
 GetClientValue: function(visibleIndex, columnIndex) {
  var hash = this.GetClientValuesBag(visibleIndex);
  var key = this.GetRowKey(visibleIndex);
  var rowValues = hash[key];
  return rowValues[columnIndex][0];
 },
 GetServerValue: function(visibleIndex, columnIndex) {
  var key = visibleIndex >= 0 ? this.GetRowKey(visibleIndex) : this.NewRowInitValuesKey;
  var rowValues = this.pageServerValues[key];
  if(rowValues && rowValues.hasOwnProperty(columnIndex))
   return rowValues[columnIndex];
  return null;
 },
 SetCellValue: function(visibleIndex, columnIndex, value, text) {
  if(this.IsEquals(this.GetServerValue(visibleIndex, columnIndex), value))
   this.ResetClientValue(visibleIndex, columnIndex);
  else
   this.SetCellValueCore(visibleIndex, columnIndex, value, text);
 },
 SetCellValueCore: function(visibleIndex, columnIndex, value, text) {
  var hash = this.GetClientValuesBag(visibleIndex);
  var key = this.GetRowKey(visibleIndex);
  var rowValues = hash[key];
  if(!rowValues)
   hash[key] = rowValues = { };
  rowValues[columnIndex] = [ value, text ];
 },
 GetCellText: function(visibleIndex, columnIndex) {
  if(this.IsDirtyCell(visibleIndex, columnIndex))
   return this.GetClientValueText(visibleIndex, columnIndex);
  return this.GetCellServerText(visibleIndex, columnIndex);
 },
 GetClientValueText: function(visibleIndex, columnIndex) {
  var hash = this.GetClientValuesBag(visibleIndex);
  var key = this.GetRowKey(visibleIndex);
  var rowValues = hash[key];
  return rowValues[columnIndex][1];
 },
 GetCellServerText: function(visibleIndex, columnIndex) {
  var key = this.GetRowKey(visibleIndex);
  var rowTexts = this.serverCellTexts[key];
  if(!rowTexts)
   this.serverCellTexts[key] = rowTexts = { };
  if(!rowTexts.hasOwnProperty(columnIndex))
   rowTexts[columnIndex] = this.GetCellServerHtml(visibleIndex, columnIndex);
  return rowTexts[columnIndex];
 },
 GetCellServerHtml: function(visibleIndex, columnIndex) {
  var row = this.GetDataRow(visibleIndex);
  var textContainer = this.GetCellTextContainer(row, columnIndex);
  if(!textContainer) return null;
  if(!_aspxIsExists(textContainer.dxgvSavedHtml))
   textContainer.dxgvSavedHtml = textContainer.innerHTML;
  return textContainer.dxgvSavedHtml;
 },
 ResetClientValue: function(visibleIndex, columnIndex) {
  this.ResetClientValueByKey(this.GetRowKey(visibleIndex), columnIndex);
 },
 ResetClientValueByKey: function(key, columnIndex) {
  this.ResetClientValueCore(key, columnIndex, this.insertedValues);
  this.ResetClientValueCore(key, columnIndex, this.updatedValues);
 },
 ResetClientValueCore: function(key, columnIndex, hash) {
  var rowValues = hash[key];
  if(rowValues)
   delete rowValues[columnIndex];
  if(this.GetObjectSize(rowValues) === 0)
   delete hash[key];
 },
 GetCellValueInfo: function(visibleIndex, columnIndex) {
  return { 
   value: this.GetCellValue(visibleIndex, columnIndex), 
   text: this.GetCellText(visibleIndex, columnIndex) 
  };
 },
 GetVisibleRowsOnPageCount: function() {
  return this.grid.pageRowCount - this.deletedRowKeys.length + this.insertedRowIndices.length;
 },
 Init: function() {
  this.LoadPageServerValues();
  this.LoadSavedClientValues();
  this.ApplyClientChanges();
  this.ProcessServerChanges(this.GetUpdateInfo());
  this.ProcessValidationErrors(this.GetValidationInfo());
  this.AttachEvents();
  this.LoadActiveElements();
 },
 OnAfterCallback: function() {
  this.LoadPageServerValues();
  this.ProcessServerChanges(this.GetUpdateInfo());
  this.ProcessValidationErrors(this.GetValidationInfo());
  this.AttachEvents();
  this.LoadActiveElements();
  this.lockEdit = false;
  this.updating = false;
  this.UpdateSyncInput();
 },
 AttachEvents: function() {
  var grid = this.grid;
  var columnIndices = this.GetEditColumnIndices();
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   grid.AttachEventToEditor(columnIndex, "GotFocus", function(s, e) { this.OnEditorGotFocus(s, e); }.aspxBind(this));
   grid.AttachEventToEditor(columnIndex, "LostFocus", function(s, e) { this.OnEditorLostFocus(s, e); }.aspxBind(this));
   grid.AttachEventToEditor(columnIndex, "KeyDown", function(s, e) { this.OnEditorKeyDown(s, e); }.aspxBind(this));
   grid.AttachEventToEditor(columnIndex, "ValueChanged", function(s, e) { this.OnEditorValueChanged(s, e); }.aspxBind(this));
  }
  _aspxAttachEventToElement(grid.GetMainTable(), "mousedown", function(e) { this.OnMainTableMouseDown(e); }.aspxBind(this));
 },
 OnEditorGotFocus: function(s, e) {
  s.dxgvSkipValueChanged = false;
  this.lockEdit = false;
  this.focusedEditorColumnIndex = s.dxgvColumnIndex;
  this.TryShowColumn(s.dxgvColumnIndex);
 },
 OnEditorLostFocus: function(s, e) {
  if(this.forceRefocusEditor || !this.lockEndEditOnLostFocus && !this.EndEdit()) {
   this.RefocusEditor(s);
   return;
  }
  this.lockEndEditOnLostFocus = false;
  this.focusedEditorColumnIndex = -1;
 },
 RefocusEditor: function(editor) {
  this.lockEdit = true;
  _aspxClearTimer(this.removeLockEditTimerID);
  this.removeLockEditTimerID = window.setTimeout(function() { this.lockEdit = false; }.aspxBind(this), 50);
  this.forceRefocusEditor = false;
  editor.Focus();
 },
 OnEditorValueChanged: function(s, e) {
  if(s.dxgvSkipValueChanged) return;
  var columnIndex = s.dxgvColumnIndex;
  if(this.IsCheckColumn(columnIndex)) {
   this.toogleCheckBoxColumnIndex = columnIndex;
   this.UpdateRow(this.editRowVisibleIndex, [ columnIndex ], true);
   this.toogleCheckBoxColumnIndex = -1;
  }
  s.Validate();
 },
 OnEditorKeyDown: function(s, e) {
  var keyCode = _aspxGetKeyCode(e.htmlEvent);
  if(keyCode === ASPxKey.Esc) {
   s.dxgvSkipValueChanged = true;
   this.lockEndEditOnLostFocus = false;
   this.BlurDefaultEditor(s.dxgvColumnIndex);
   return;
  }
  if(keyCode !== ASPxKey.Tab && keyCode !== ASPxKey.Enter)
   return;
  if(keyCode === ASPxKey.Enter && this.IsMemoEdit(s))
   return;
  if(this.MoveFocusFromEditor(s, e.htmlEvent.shiftKey))
   _aspxPreventEventAndBubble(e.htmlEvent);
 },
 OnMainTableMouseDown: function(e) { 
  this.forceRefocusEditor = false;
  this.lockEndEditOnLostFocus = false;
  this.lockUserEndEdit = false;
  var src = _aspxGetEventSource(e);
  var row = this.GetDataRow(this.editRowVisibleIndex);
  if(!row || !this.IsEditing()) 
   return;
  if(!this.IsSingleEditMode()) {
   if(!_aspxGetIsParent(row, src))
    return;
   this.lockEndEditOnLostFocus = true;
   var sourceColumnIndex = this.GetFocusedColumnIndex();
   var targetColumnIndex = this.GetColumnIndexByChild(row, src);
   if(this.CanEditColumn(sourceColumnIndex) && this.CanEditColumn(targetColumnIndex) && sourceColumnIndex !== targetColumnIndex)
    this.lockUserEndEdit = true;
   this.focusedColumnIndex = targetColumnIndex;
  }
  if(this.focusedEditorColumnIndex < 0)
   return;
  var dataCell = this.GetDataCell(row, this.focusedEditorColumnIndex);
  var editor = this.GetEditor(this.focusedEditorColumnIndex);
  if(!editor || !dataCell) return;
  if(!_aspxGetIsParent(dataCell, src))
   return;
  var editorMainElement = _aspxIsFunction(editor.GetICBMainElement) ? editor.GetICBMainElement() : editor.GetMainElement(); 
  var editorElements = [ editorMainElement ];
  if(_aspxIsFunction(editor.GetPopupControl)) 
   editorElements.push(editor.GetPopupControl().GetWindowElement(-1));
  for(var i = 0; i < editorElements.length; i++) {
   if(_aspxGetIsParent(editorElements[i], src)) {
    this.lockEndEditOnLostFocus = false;
    return;
   }
  }
  this.forceRefocusEditor = true;
 },
 LoadActiveElements: function() {
  var rowIndices = this.GetDataRowIndices();
  for(var i = 0; i < rowIndices.length; i++)
   this.LoadDataRowActiveElements(rowIndices[i]);
  var columnIndices = this.GetTemplateColumnIndices();
  for(var i = 0; i < columnIndices.length; i++)
   this.LoadEditTemplateCellActiveElements(columnIndices[i]);
 },
 LoadDataRowActiveElements: function(visibleIndex) {
  var elementsInfo = this.GetDataRowActiveElementsInfo(visibleIndex);
  var rowInfo = { };
  for(var i = 0; i < elementsInfo.length; i++) {
   var element = elementsInfo[i].element;
   var columnIndex = elementsInfo[i].columnIndex;
   var cellActiveElements = rowInfo[columnIndex];
   if(!cellActiveElements)
    rowInfo[columnIndex] = cellActiveElements = [ ];
   cellActiveElements.push(element);
   element.dxgvColumnIndex = columnIndex;
   element.dxgvRowVisibleIndex = visibleIndex;
   _aspxAttachEventToElement(element, "keydown", function(e) { this.OnActiveElementKeyDown(e); }.aspxBind(this));
  }
  this.SortDataRowActiveElements(rowInfo);
  this.dataRowActiveElements[visibleIndex] = rowInfo;
 },
 LoadEditTemplateCellActiveElements: function(columnIndex) {
  var elements = [ ];
  var editorContainer = this.GetEditorContainer(columnIndex);
  var inputs = _aspxGetElementsByTagName(editorContainer, "INPUT");
  for(var i = 0; i < inputs.length; i++) {
   var input = inputs[i];
   if(input.type !== "hidden")
    elements.push(input);
  }
  var links = _aspxGetElementsByTagName(editorContainer, "A");
  for(var i = 0; i < links.length; i++)
   elements.push(links[i]);
  this.SortEditTemplateCellActiveElements(elements);
  this.editTemplateCellActiveElements[columnIndex] = elements;
 },
 GetDataRowActiveElementsInfo: function(visibleIndex) {
  var result = [ ];
  var row = this.GetDataRow(visibleIndex);
  if(!row) return result;
  var inputs = _aspxGetElementsByTagName(row, "INPUT");
  for(var i = 0; i < inputs.length; i++) {
   var input = inputs[i];
   var columnIndex = this.GetColumnIndexByChild(row, input);
   if(input.type !== "hidden" && columnIndex >= 0 && !this.CanEditColumn(columnIndex))
    result.push({ element: input, columnIndex: columnIndex });
  }
  var links = _aspxGetElementsByTagName(row, "A");
  for(var i = 0; i < links.length; i++) {
   var link = links[i];
   var columnIndex = this.GetColumnIndexByChild(row, link);
   if(columnIndex >= 0 && !this.CanEditColumn(columnIndex))
    result.push({ element: link, columnIndex: columnIndex });
  }
  return result;
 },
 OnActiveElementKeyDown: function(e) {
  var keyCode = _aspxGetKeyCode(e);
  if(keyCode !== ASPxKey.Tab)
   return;
  var src = _aspxGetEventSource(e);
  if(this.MoveFocusFromActiveElement(src, e.shiftKey))
   _aspxPreventEventAndBubble(e);
 },
 MoveFocusFromActiveElement: function(activeElement, isLeft) {
  var visibleIndex = activeElement.dxgvRowVisibleIndex;
  var columnIndex = activeElement.dxgvColumnIndex;
  var rowInfo = this.dataRowActiveElements[visibleIndex];
  if(!rowInfo) return;
  var cellActiveElements = rowInfo[columnIndex];
  if(!cellActiveElements) return;
  if(cellActiveElements.length > 1) {
   var elementIndex = _aspxArrayIndexOf(cellActiveElements, activeElement);
   var inc = isLeft ? -1 : 1;
   var focusElementIndex = elementIndex + inc;
   if(focusElementIndex > -1 && focusElementIndex < cellActiveElements.length)
    return;
  }
  return this.MoveFocusCore(visibleIndex, columnIndex, isLeft);
 },
 MoveFocusFromEditor: function(editor, isLeft) {
  var visibleIndex = this.editRowVisibleIndex;
  var columnIndex = editor.dxgvColumnIndex;
  return this.MoveFocusCore(visibleIndex, columnIndex, isLeft, true);
 },
 MoveFocusNext: function() {
  if(!this.IsEditing()) return;
  return this.MoveFocusCore(this.editRowVisibleIndex, this.GetFocusedColumnIndex())
 },
 MoveFocusPrev: function() {
  if(!this.IsEditing()) return;
  return this.MoveFocusCore(this.editRowVisibleIndex, this.GetFocusedColumnIndex(), true);
 },
 GetFocusedColumnIndex: function() {
  if(this.focusedEditorColumnIndex >= 0)
   return this.focusedEditorColumnIndex;
  return this.focusedColumnIndex;
 },
 MoveFocusCore: function(visibleIndex, columnIndex, isLeft, fromEditor) {
  var cellInfo = this.GetNewFocusedCellInfo(visibleIndex, columnIndex, isLeft);
  if(!cellInfo) return false;
  var newVisibleIndex = cellInfo.visibleIndex;
  var newColumnIndex = cellInfo.columnIndex;
  if(cellInfo.addNewRow) return false;
  this.focusedColumnIndex = newColumnIndex;
  if(this.CanEditColumn(newColumnIndex)) {
   var requireStartEdit = this.IsSingleEditMode() || newVisibleIndex !== visibleIndex || !this.IsEditing() && this.CanEditColumn(newColumnIndex);
   if(requireStartEdit)
    window.setTimeout(function() { this.StartEdit(newVisibleIndex, newColumnIndex); }.aspxBind(this), 0);
   else
    this.MoveFocusToSiblingCell(newVisibleIndex, newColumnIndex, isLeft);
   this.TryShowColumn(newColumnIndex, true);
   return true;
  }
  if(fromEditor && !this.IsSingleEditMode() && this.editRowVisibleIndex == newVisibleIndex)
   this.lockEndEditOnLostFocus = true;
  else 
   this.lockEndEditOnLostFocus = false;
  return false;
 },
 MoveFocusToSiblingCell: function(visibleIndex, newColumnIndex, isLeft) { 
  var prevFocusedColumnIndex = this.focusedEditorColumnIndex;
  if(this.CanEditColumn(prevFocusedColumnIndex))
   this.lockEndEditOnLostFocus = true;
  this.BlurDefaultEditor(prevFocusedColumnIndex);
  this.FocusColumnEditor(newColumnIndex, isLeft);
 },
 FocusColumnEditor: function(columnIndex, isLeft) {
  if(this.IsEditTemplateColumn(columnIndex))
   this.FocusEditTemplateEditor(columnIndex, isLeft);
  else
   this.FocusDefaultEditor(columnIndex);
  this.focusedColumnIndex = columnIndex;
 },
 FocusDefaultEditor: function(columnIndex) {
  var editor = this.GetEditor(columnIndex);
  if(editor)
   editor.Focus();
 },
 FocusEditTemplateEditor: function(columnIndex, isLeft) {
  var processed = this.grid.RaiseBatchEditTemplateCellFocused(columnIndex);
  if(processed) return;
  var activeElements = this.editTemplateCellActiveElements[columnIndex];
  if(!activeElements || activeElements.length === 0)
   return;
  var element = !isLeft ? activeElements[0] : activeElements[activeElements.length - 1];
  _aspxSetFocus(element);
 },
 BlurDefaultEditor: function(columnIndex) {
  var editor = this.GetEditor(columnIndex);
  if(!editor || editor !== ASPxClientEdit.GetFocusedEditor()) 
   return;
  var input = editor.GetInputElement();
  if(input)
   input.blur();
 },
 GetNewFocusedCellInfo: function(visibleIndex, columnIndex, isLeft) {
  var inc = isLeft ? -1 : 1;
  columnIndex = this.GetNewFocusedColumnIndex(visibleIndex, columnIndex, inc);
  if(columnIndex >= 0)
   return { visibleIndex: visibleIndex, columnIndex: columnIndex };
  var addNewRow = false;
  var dataRowIndices = this.GetDataRowIndices();
  var index = _aspxArrayIndexOf(dataRowIndices, visibleIndex) + inc;
  if(index < 0 && this.IsNewRowOnTop() || index == dataRowIndices.length && !this.IsNewRowOnTop()) {
   addNewRow = true;
   columnIndex = -1;
   visibleIndex = null;
  } else if(index >= 0 && index < dataRowIndices.length) {
   visibleIndex = dataRowIndices[index];
  } else
   return null;
  columnIndex = this.GetNewFocusedColumnIndex(visibleIndex, columnIndex, inc);
  return { visibleIndex: visibleIndex, columnIndex: columnIndex, addNewRow: addNewRow };
 },
 GetNewFocusedColumnIndex: function(visibleIndex, columnIndex, inc) {
  var rowInfo = this.dataRowActiveElements[visibleIndex];
  var columnIndices = this.GetVisibleColumnIndices();
  var i = _aspxArrayIndexOf(columnIndices, columnIndex);
  if(i < 0) 
   i = inc < 0 ? columnIndices.length : - 1; 
  do {
   i = i + inc;
   columnIndex = columnIndices[i];
   if(this.CanEditColumn(columnIndex) || rowInfo && rowInfo[columnIndex])
    return columnIndex;
  } while(i >= 0 && i < columnIndices.length)
  return -1;
 },
 GetDataRowIndices: function() {
  var result = [ ];
  for(var i = this.insertedRowIndices.length - 1; i >= 0; i--)
   result.push(this.insertedRowIndices[i]);
  var startIndex = this.grid.GetTopVisibleIndex();
  var endIndex = startIndex + this.grid.pageRowCount;
  for(var i = startIndex; i < endIndex; i++) {
   if(this.grid.IsDataRow(i))
    result.push(i);
  }
  return result;
 },
 GetColumnIndexByChild: function(row, element) {
  while(element.parentNode !== row)
   element = element.parentNode;
  return this.GetColumnIndex(element);
 },
 SortDataRowActiveElements: function(rowInfo) { },
 SortEditTemplateCellActiveElements: function(elements) { },
 TryShowColumn: function(columnIndex, showFullRect) {
  var fixedColumnHelper = this.grid.GetFixedColumnsHelper();
  if(fixedColumnHelper)
   fixedColumnHelper.TryShowColumn(columnIndex, showFullRect);
 },
 CanUpdate: function() {
  if(this.IsEditing() && !this.EndEdit())
   return false;
  if(!this.RequireValidateOnEndEdit()) {
   var pageValidationInfo = this.ValidateRows();
   if(pageValidationInfo.isValid)
    return true;
   for(var visibleIndex in pageValidationInfo.dict)
    this.ShowRowClientValidationErrors(visibleIndex, pageValidationInfo.dict[visibleIndex]);
  }
  return this.invalidRowIndices.length === 0;
 },
 CancelEdit: function() {
  if(this.EndEdit(true)) {
   this.ResetAllChanges();
   this.RemoveErrorRows();
  }
 },
 ResetAllChanges: function() {
  var indices = this.insertedRowIndices.slice();
  for(var i = 0; i < indices.length; i++)
   this.ResetChanges(indices[i]);
  var keys = this.deletedRowKeys.slice();
  for(var i = 0; i < keys.length; i++)
   this.ResetChangesByKey(keys[i]);
  keys = _aspxGetObjectKeys(this.updatedValues);
  for(var i = 0; i < keys.length; i++)
   this.ResetChangesByKey(keys[i]);
 },
 ResetChanges: function(visibleIndex, columnIndex) {
  this.ResetChangesCore(this.GetRowKey(visibleIndex), visibleIndex, columnIndex);
 },
 ResetChangesByKey: function(key, columnIndex) {
  this.ResetChangesCore(key, null, columnIndex);
 },
 ResetChangesCore: function(key, visibleIndex, columnIndex) {
  if(!_aspxIsExists(visibleIndex))
   visibleIndex = this.FindRowVisibleIndexByKey(key);
  var columnIndices = !_aspxIsExists(columnIndex) ? this.GetEditColumnIndices() : [ columnIndex ];
  var entire = !_aspxIsExists(columnIndex);
  for(var i = 0; i < columnIndices.length; i++)
   this.ResetClientValueByKey(key, columnIndices[i]);
  if(entire && this.serverCellTexts.hasOwnProperty(key))
   delete this.serverCellTexts[key];
  var isNew = this.IsNewRow(key);
  var isDeleted = !isNew && this.IsDeletedRow(key);
  var isUpdated = !isNew && !isDeleted;
  var row = this.GetDataRow(visibleIndex);
  if(isNew && entire) {
   _aspxArrayRemove(this.insertedRowIndices, key);
   this.DeleteHtmlRow(row);
  }
  if(isDeleted && entire) {
   _aspxArrayRemove(this.deletedRowKeys, key);
   _aspxSetElementDisplay(row, true);
  }
  if(isUpdated)
   this.UpdateRow(visibleIndex, columnIndices, false, true);
  this.CheckEmptyDataRowVisibility();
  this.RemoveErrorRow(visibleIndex);
  this.UpdateSyncInput();
 },
 RequireShowEmptyDataRow: function() {
  var indices = this.GetDataRowIndices();
  for(var i = 0; i < indices.length; i++) {
   var row = this.grid.GetDataRow(indices[i]);
   if(row && _aspxGetElementDisplay(row))
    return false;
  }
  return true;
 },
 CheckEmptyDataRowVisibility: function() {
  var row = this.grid.GetEmptyDataRow();
  if(!row) return;
  var show = !this.IsEditing() && this.RequireShowEmptyDataRow();
  _aspxSetElementDisplay(row, show);
 },
 OnUpdate: function() {
  this.updating = true;
  this.UpdateSyncInput();
 },
 UpdateSyncInput: function() {
  var input = this.grid.GetBatchEditClientModifiedValuesInput();
  input.value = _aspxToJson({
   ClientState: this.GetClientState(),
   EditState: this.GetEditState()
  });
 },
 GetEditState: function() {
  var modifiedValues = { };
  var insertedRowValues = { };
  var editColumnIndices = this.GetEditColumnIndices();
  for(var rowKey in this.updatedValues) {
   var visibleIndex = this.FindRowVisibleIndexByKey(rowKey);
   modifiedValues[rowKey] = this.CreateRowEditState(visibleIndex, editColumnIndices);
  }
  for(var i = 0; i < this.insertedRowIndices.length; i++) {
   var visibleIndex = this.insertedRowIndices[i];
   insertedRowValues[visibleIndex] = this.CreateRowEditState(visibleIndex, editColumnIndices);
  }
  return {
   "insertedRowValues" : insertedRowValues,
   "modifiedRowValues" : modifiedValues,
   "deletedRowKeys" : this.deletedRowKeys
  };
 },
 CreateRowEditState: function(visibleIndex, columnIndices) {
  var grid = this.grid;
  var result = { };
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   var fieldName = grid.GetColumn(columnIndex).fieldName;
   var value = this.GetCellValue(visibleIndex, columnIndex);
   result[fieldName] = this.GetValueString(value);
  }
  return result;
 },
 GetValueString: function(value) {
  if(value == null)
   return null;
  if(ASPxIdent.IsDate(value))
   return _aspxGetInvariantDateTimeString(value);
  return value.toString();
 },
 FindRowVisibleIndexByKey: function(key) {
  var grid = this.grid;
  for(var i = 0; i < grid.pageRowCount; i++) {
   var visibleIndex = grid.GetTopVisibleIndex() + i;
   if(grid.GetRowKey(visibleIndex) === key)
    return visibleIndex;
  }
  return null;
 },
 AddNewRow: function() {
  var visibleIndex = this.CalcNewRowVisibleIndex();
  this.AddNewRowCore(visibleIndex);
  this.insertedRowIndices.push(visibleIndex);
  var columnIndex = this.GetFirstVisibleColumnIndex(this.GetEditColumnIndices());
  this.StartEdit(visibleIndex, columnIndex);
  this.CheckEmptyDataRowVisibility();
 },
 CalcNewRowVisibleIndex: function() {
  var indices = this.insertedRowIndices;
  var lastIndex = indices.length > 0 ? indices[indices.length - 1] : 0;
  return lastIndex - 1;
 },
 AddNewRowCore: function(visibleIndex) {
  if(this.GetDataRow(visibleIndex)) 
   return;
  var etalonRow = this.GetEtalonNewRow();
  var newRow = etalonRow.cloneNode(true);
  newRow.id = this.GetDataRowID(visibleIndex);
  _aspxSetElementDisplay(newRow, true);
  var refRow;
  for(var i = this.insertedRowIndices.length - 1; i >= 0; i--) {
   refRow = this.GetDataRow(this.insertedRowIndices[i]);
   if(refRow) break;
  }
  if(!refRow)
   refRow = etalonRow;
  if(this.IsNewRowOnTop())
   refRow.parentNode.insertBefore(newRow, refRow);
  else
   _aspxInsertElementAfter(newRow, refRow);
  this.LoadDataRowActiveElements(visibleIndex);
  return newRow;
 },
 GetEtalonNewRow: function() {
  return this.grid.GetChildElementById(this.grid.DataRowID + "new");
 },
 DeleteRow: function(visibleIndex) {
  var key = visibleIndex >= 0 ? this.GetRowKey(visibleIndex) : visibleIndex;
  this.DeleteRowByKey(key);
 },
 DeleteRowByKey: function(key) {
  var row = this.GetDataRowByKey(key);
  if(!row) return;
  var visibleIndex = this.GetDataRowIndex(row);
  if(this.grid.GetFocusedRowIndex() == visibleIndex)
   this.UpdateFocusedRowIndex(visibleIndex);
  if(visibleIndex >= 0) {
   _aspxSetElementDisplay(row, false);
   this.deletedRowKeys.push(key);
  } else {
   this.ResetChanges(visibleIndex);
  }
  this.CheckEmptyDataRowVisibility();
  this.RemoveErrorRow(visibleIndex);
  this.UpdateSyncInput();
 },
 DeleteHtmlRow: function(row) {
  var editColumnIndices = this.GetEditColumnIndices();
  var editorsContainer = this.GetEditorsContainer();
  for(var i = 0; i < editColumnIndices.length; i++) {
   var columnIndex = editColumnIndices[i];
   var editorContainer = this.GetEditorContainer(columnIndex);
   if(_aspxGetIsParent(row, editorContainer))
    editorsContainer.appendChild(editorContainer);
  }
  _aspxRemoveElement(row);
 },
 GetEditorsContainer: function() {
  return this.GetCellErrorTable().parentNode; 
 },
 UpdateFocusedRowIndex: function(oldVisibleIndex) {
  var index = this.FindNewFocusedRowIndex(oldVisibleIndex, true);
  if(index === null)
   index = this.FindNewFocusedRowIndex(oldVisibleIndex, false);
  if(index === null)
   index = -1;
  this.grid.SetFocusedRowIndex(index);
 },
 FindNewFocusedRowIndex: function(oldVisibleIndex, direction) {
  var inc = direction ? 1 : -1;
  var visibleIndices = this.GetDataRowIndices();
  var index = _aspxArrayIndexOf(visibleIndices, oldVisibleIndex);
  index += inc;
  var bounds = {
   left: direction ? index : visibleIndices[0],
   right: direction ? visibleIndices[visibleIndices.length - 1] : index
  };
  while(index >= bounds.left && index <= bounds.right) {
   var row = this.GetDataRow(index);
   if(row && _aspxGetElementDisplay(row))
    return index;
   index += inc;
  }
  return null;
 },
 ProcessTableClick: function(row, evt, isDblClick) {
  var src = _aspxGetEventSource(evt);
  if(src.tagName === "INPUT" || src.tagName === "A" || src.tagName === "TEXTAREA")
   return;
  if(this.IsStartEditOnDblClick() && !isDblClick)
   return;
  if(!this.IsStartEditOnDblClick() && isDblClick)
   return;
  if(!this.IsDataRow(row)) return;
  var visibleIndex = this.GetDataRowIndex(row);
  var cell = this.GetDataCellByEvent(row, evt);
  if(!cell) return;
  var columnIndex = this.GetColumnIndex(cell);
  if(this.IsSingleEditMode() && !this.CanEditColumn(columnIndex))
   return;
  var toogleCheckBox = !this.IsEditing() && this.IsCheckBoxDisplayControlClicked(columnIndex, src);
  this.StartEdit(visibleIndex, columnIndex);
  if(this.IsEditing() && toogleCheckBox) {
   var editor = this.GetEditor(columnIndex);
   editor && editor.ToogleCheckState()
  }
 },
 IsHiddenColumn: function(columnIndex) {
  return _aspxArrayIndexOf(this.GetHiddenColumns(), columnIndex) >= 0;
 },
 GetHiddenColumns: function() {
  var helper = this.grid.GetFixedColumnsHelper();
  return helper ? helper.GetHiddenColumns() : [ ];
 },
 ValidateRows: function() {
  var pageValidationInfo = { };
  var isValid = true;
  var visibleIndices = this.GetDataRowIndices();
  for(var i = 0; i < visibleIndices.length; i++) {
   var visibleIndex = visibleIndices[i];
   var rowInfo = this.ValidateRow(visibleIndex);
   pageValidationInfo[visibleIndex] = rowInfo;
   isValid &= rowInfo.isValid;
  }
  return { isValid: isValid, dict: pageValidationInfo };
 },
 ValidateRow: function(visibleIndex, rowValues) {
  var isValid = true;
  var validationInfo = this.GetRowValidationInfo(visibleIndex, rowValues);
  if(validationInfo) {
   for(var columnIndex in validationInfo) {
    if(!this.CanEditColumn(columnIndex))
     continue;
    isValid &= validationInfo[columnIndex].isValid;
   }
  }
  _aspxArrayRemove(this.invalidRowIndices, visibleIndex);
  if(!isValid)
   this.invalidRowIndices.push(visibleIndex);
  return { isValid: isValid, dict: validationInfo };
 },
 GetRowValidationInfo: function(visibleIndex, rowValues) {
  if(!this.HasChanges(visibleIndex) && !this.IsEditingRow(visibleIndex)) 
   return;
  var result = { };
  var columnIndices = this.GetEditColumnIndices();
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   var value = this.GetCellValue(visibleIndex, columnIndex);
   if(rowValues && rowValues.hasOwnProperty(columnIndex))
    value = rowValues[columnIndex].value;
   result[columnIndex] = this.GetCellValidationInfo(visibleIndex, columnIndex, value);
  }
  result = this.grid.RaiseBatchEditRowValidating(visibleIndex, result);
  return result;
 },
 GetCellValidationInfo: function(visibleIndex, columnIndex, value) {
  var isValid = true;
  var errorText = "";
  var editor = this.GetEditor(columnIndex);
  if(editor) {
   if(this.IsEditingCell(visibleIndex, columnIndex))
    value = editor.GetValue();
   else
    editor.SetValue(value);
   this.ValidateEditor(editor);
   isValid = editor.GetIsValid();
   errorText = editor.GetErrorText();
  }
  return { value: value, isValid: isValid, errorText: errorText };
 },
 ValidateEditor: function(editor) {
  editor.Validate();
 },
 ShowRowClientValidationErrors: function(visibleIndex, validationInfo) {
  var row = this.GetDataRow(visibleIndex);
  if(!row || !validationInfo || !validationInfo.dict || validationInfo.isValid) 
   return;
  for(var columnIndex in validationInfo.dict) {
   if(!this.CanEditColumn(columnIndex)) continue;
   var cellInfo = validationInfo.dict[columnIndex];
   if(!cellInfo.isValid)
    this.ShowCellValidationError(row, columnIndex, cellInfo.errorText);
  }
 },
 CreateTextContainer: function(dataCell) {
  var container = document.createElement("DIV");
  for(var i = dataCell.childNodes.length - 1; i >= 0; i--) {
   var child = dataCell.childNodes[i];
   if(container.childNodes.length > 0)
    container.insertBefore(child, container.childNodes[0]);
   else
    container.appendChild(child);
  }
  dataCell.appendChild(container);
  return container;
 },
 GetColumnIndex: function(dataCell) {
  if(!dataCell) return -1;
  var cellIndex = dataCell.cellIndex - this.grid.indentColumnCount;
  var columnIndices = this.GetVisibleColumnIndices();
  if(cellIndex < 0 || cellIndex >= columnIndices.length) 
   return -1;
  return columnIndices[cellIndex];
 },
 GetColumn: function(columnIndex) {
  return this.grid._getColumn(columnIndex);
 },
 GetDataCell: function(row, columnIndex) {
  if(!row || columnIndex < 0) 
   return null;
  var cellIndex = _aspxArrayIndexOf(this.GetVisibleColumnIndices(), columnIndex) + this.grid.indentColumnCount;
  if(row.cells.length <= cellIndex) 
   return null;
  return row.cells[cellIndex];
 },
 GetDataCellByEvent: function(row, evt) {
  var element = _aspxGetEventSource(evt);
  while(element && element.tagName !== "BODY") {
   var parent = element.parentNode;
   if(parent === row)
    return element;
   element = parent;
  }
  return null;
 },
 GetCellTextContainer: function(row, columnIndex) {
  var dataCell = this.GetDataCell(row, columnIndex);
  if(!dataCell) return;
  if(!dataCell.dxGVTextContainer)
   dataCell.dxGVTextContainer = this.CreateTextContainer(dataCell);
  return dataCell.dxGVTextContainer;
 },
 IsDataRow: function(row) {
  if(!row || !row.id) return false;
  var grid = this.grid;
  var indexInfo = grid.tryGetNumberFromEndOfString(row.id);
  if(!indexInfo.success) return false;
  return row.id === this.GetDataRowID(indexInfo.value);
 },
 GetDataRowIndex: function(row) {
  return this.grid.tryGetNumberFromEndOfString(row.id).value;
 },
 GetDataRowID: function(index) {
  var grid = this.grid;
  return grid.name + "_" + grid.DataRowID + index.toString();
 },
 ProcessValidationErrors: function(validationInfo) {
  if(!validationInfo) return;
  for(var rowKey in validationInfo) {
   var rowValidationInfo = validationInfo[rowKey];
   var row = this.GetDataRowByKey(rowKey);
   if(!row) continue;
   if(rowValidationInfo.row)
    this.ShowValidationErrorRow(row, rowValidationInfo.row);
   var editorErrors = rowValidationInfo.editors;
   for(var columnIndex in editorErrors)
    this.ShowCellValidationError(row, columnIndex, editorErrors[columnIndex]);
  }
 },
 ShowCellValidationError: function(row, columnIndex, errorText) {
  var dataCell = this.GetDataCell(row, columnIndex);
  var textContainer = this.GetCellTextContainer(row, columnIndex);
  if(!dataCell || !textContainer || textContainer.dxgvHasError) 
   return;
  var html = textContainer.innerHTML;
  if(!_aspxTrim(html))
   html = "&nbsp;";
  textContainer.innerHTML = "";
  var errorTable = this.GetCellErrorTable().cloneNode(true);
  var textCell = errorTable.rows[0].cells[0];
  var imageCell = errorTable.rows[0].cells[1];
  textCell.innerHTML = html;
  var cellAlign = _aspxGetAttribute(dataCell, "align");
  if(cellAlign)
   _aspxSetAttribute(textCell, "align", cellAlign);
  else
   this.LoadCellAlign(textCell, columnIndex);
  var img = _aspxGetChildByTagName(imageCell, "IMG", 0);
  errorText = _aspxIsExists(errorText) ? errorText : "";
  _aspxSetAttribute(img, "alt", errorText);
  _aspxSetAttribute(img, "title", errorText);
  textContainer.appendChild(errorTable);
  textContainer.dxgvHasError = true;
 },
 GetCellErrorTable: function() {
  return this.grid.GetBatchEditCellErrorTable();
 },
 GetDataRowByKey: function(key) {
  var visibleIndex = this.FindRowVisibleIndexByKey(key);
  if(visibleIndex === null) {
   visibleIndex = parseInt(key, 10);
   if(isNaN(visibleIndex))
    return null;
  }
  return this.GetDataRow(visibleIndex);
 },
 ProcessServerChanges: function(updateInfo) {
  if(!updateInfo) return;
  this.ProcessServerInsertedRows(updateInfo.inserted);
  this.ProcessServerUpdatedRows(updateInfo.updated);
  this.ProcessServerDeletedRows(updateInfo.deleted);
  this.ApplyClientChanges();
 },
 ProcessServerInsertedRows: function(visibleIndices) {
  visibleIndices = visibleIndices || [ ];
  for(var i = 0; i < visibleIndices.length; i++)
   this.ResetChanges(visibleIndices[i]);
 },
 ProcessServerUpdatedRows: function(keys) {
  keys = keys || [ ];
  for(var i = 0; i < keys.length; i++)
   this.ResetChangesByKey(keys[i]);
 },
 ProcessServerDeletedRows: function(deletedKeys) {
  deletedKeys = deletedKeys || [ ];
  var keys = this.deletedRowKeys.slice();
  for(var i = 0; i < keys.length; i++) {
   var key = keys[i];
   this.ResetChangesByKey(key);
   if(_aspxArrayIndexOf(deletedKeys, key) >= 0) {
    var visibleIndex = this.FindRowVisibleIndexByKey(key);
    _aspxRemoveElement(this.GetDataRow(visibleIndex));
   }
  }
 },
 ApplyClientChanges: function() {
  this.ApplyClientInsertChanges();
  this.ApplyClientUpdateChanges();
  this.ApplyClientDeleteChanges();
  this.UpdateSyncInput();
 },
 ApplyClientInsertChanges: function() {
  var editColumnIndices = this.GetEditColumnIndices();
  var indices = this.insertedRowIndices.slice();
  for(var i = 0; i < indices.length; i++) {
   var visibleIndex = indices[i];
   this.AddNewRowCore(visibleIndex);
   this.UpdateRow(visibleIndex, editColumnIndices);
  }
 },
 ApplyClientUpdateChanges: function() {
  var editColumnIndices = this.GetEditColumnIndices();
  for(var key in this.updatedValues) { 
   var visibleIndex = this.FindRowVisibleIndexByKey(key);
   this.UpdateRow(visibleIndex, editColumnIndices);
  }
 },
 ApplyClientDeleteChanges: function() {
  var keys = this.deletedRowKeys;
  this.deletedRowKeys = [ ];
  for(var i = 0; i < keys.length; i++)
   this.DeleteRowByKey(keys[i]);
 },
 ShowValidationErrorRow: function(dataRow, errorText) {
  if(!dataRow) return false;
  var visibleIndex = this.GetDataRowIndex(dataRow);
  var errorRow = this.GetErrorRow(visibleIndex);
  if(!errorRow)
   errorRow = this.CreateErrorRow(visibleIndex);
  errorRow.cells[errorRow.cells.length - 1].innerHTML = errorText;
  _aspxInsertElementAfter(errorRow, dataRow);
  return true;
 },
 ShowError: function(errorText, errorData) { 
  if(!errorData) return;
  this.ProcessServerChanges(errorData.updateInfo);
  this.ProcessValidationErrors(errorData.validationInfo);
  this.grid.batchEditClientState.updateInfo = { };
  this.RemoveErrorRows();
  var row = this.GetDataRowByKey(errorData.rowKey);
  return this.ShowValidationErrorRow(row, errorText);
 },
 RemoveErrorRows: function() {
  var visibleIndices = this.GetDataRowIndices();
  for(var i = 0; i < visibleIndices.length; i++)
   this.RemoveErrorRow(visibleIndices[i]);
 },
 RemoveErrorRow: function(visibleIndex) {
  var errorRow = this.GetErrorRow(visibleIndex);
  if(errorRow)
   _aspxRemoveElement(errorRow);
 },
 CreateErrorRow: function(visibleIndex) {
  var row = this.grid.CreateEditingErrorRow(); 
  row.id = this.grid.name + "_DXEditingErrorRow" + visibleIndex; 
  return row;
 },
 GetErrorRow: function(visibleIndex) {
  return _aspxGetElementById(this.grid.name + "_DXEditingErrorRow" + visibleIndex);
 },
 GetStyleKey: function(visibleIndex, columnIndex, showEditor, reset) {
  if(reset) return 3;
  if(this.HasModifiedStyle(visibleIndex, columnIndex))
   return showEditor ? 2 : 1;
  return showEditor ? 0 : 3;
 },
 HasModifiedStyle: function(visibleIndex, columnIndex) {
  if(this.toogleCheckBoxColumnIndex === columnIndex)
   return !this.IsEquals(this.GetEditor(columnIndex).GetValue(), this.GetServerValue(visibleIndex, columnIndex));
  return this.IsDirtyCell(visibleIndex, columnIndex);
 },
 ChangeCellStyle: function(visibleIndex, columnIndex, styleIndex) {
  if(styleIndex < 0 || styleIndex > 3) 
   return;
  var row = this.GetDataRow(visibleIndex);
  if(!row) return;
  var cell = this.GetDataCell(row, columnIndex);
  if(!cell) return;
  if(styleIndex === 3) {
   if(_aspxIsExists(cell.dxgvSavedClassName))
    cell.className = cell.dxgvSavedClassName;
   if(_aspxIsExists(cell.dxgvSavedCssText))
    cell.style.cssText = cell.dxgvSavedCssText;
   return;
  }
  if(!_aspxIsExists(cell.dxgvSavedClassName))
   cell.dxgvSavedClassName = cell.className;
  if(!_aspxIsExists(cell.dxgvSavedCssText))
   cell.dxgvSavedCssText = cell.style.cssText;
  var styleRow = this.grid._getStyleRow(-1, 3);
  var styleCell = styleRow.cells[styleIndex];
  cell.className = styleCell.className;
  cell.style.cssText = styleCell.style.cssText;
  this.LoadCellAlign(cell, columnIndex);
 },
 LoadCellAlign: function(target, columnIndex) {
  var sourceCell = this.GetDataCell(this.GetEtalonNewRow(), columnIndex);
  if(!sourceCell) return;
  if(sourceCell.className.indexOf("dx-al") > -1)
   target.className += " dx-al";
  else if(sourceCell.className.indexOf("dx-ar") > -1)
   target.className += " dx-ar";
  else if(sourceCell.className.indexOf("dx-ac") > -1)
   target.className += " dx-ac";
 },
 HasChanges: function(visibleIndex, columnIndex) {
  if(!_aspxIsExists(visibleIndex))
   return this.insertedRowIndices.length > 0 || this.deletedRowKeys.length > 0 || this.GetObjectSize(this.updatedValues) > 0;
  var columnIndices = !_aspxIsExists(columnIndex) ? this.GetEditColumnIndices() : [ columnIndex ];
  for(var i = 0; i < columnIndices.length; i++) {
   if(this.IsDirtyCell(visibleIndex, columnIndices[i]))
    return true;
  }
  return false;
 },
 IsUpdating: function() { return this.updating; },
 GetVisibleColumnIndices: function() {
  var matrix = this.grid.GetHeaderMatrix();
  if(matrix.GetRowCount() > 0)
   return matrix.GetLeafIndices();
  return this.GetColumnIndices() || [ ];
 },
 GetObjectSize: function(obj) {
  if(!obj) return 0;
  if(Object.keys) 
   return Object.keys(obj).length;
  var count = 0;
  for(var key in obj) {
   if(obj.hasOwnProperty(key))
    count++;
  }
  return count;
 },
 IsEditing: function() {
  return this.editRowVisibleIndex !== this.InvalidRowVisibleIndex && this.editedColumnIndices.length > 0;
 },
 IsEditingRow: function(visibleIndex) { 
  return this.IsEditing() && this.editRowVisibleIndex === visibleIndex; 
 },
 IsEditingCell: function(visibleIndex, columnIndex) { 
  return this.IsEditingRow(visibleIndex) && _aspxArrayIndexOf(this.editedColumnIndices, columnIndex) >= 0;
 },
 IsColumnEdited: function(column) {
  return this.IsEditingCell(this.editRowVisibleIndex, column.index);
 },
 GetEditingColumns: function() {
  if(!this.IsEditing())
   return [ ];
  var result = [ ];
  for(var i = 0; i < this.editedColumnIndices.length; i++)
   result.push(this.GetColumn(this.editedColumnIndices[i]));
  return result;
 },
 StartEditRow: function(visibleIndex) {
  var columnIndex = this.GetFirstVisibleColumnIndex(this.GetEditColumnIndices());
  this.StartEdit(visibleIndex, columnIndex);
 },
 StartEditRowByKey: function(key) {
  var columnIndex = this.GetFirstVisibleColumnIndex(this.GetEditColumnIndices());
  var visibleIndex = this.FindRowVisibleIndexByKey(key);
  this.StartEdit(visibleIndex, columnIndex);
 },
 StartEdit: function(visibleIndex, columnIndex) { 
  if(this.lockEdit) return;
  if(this.IsSingleEditMode() && this.IsEditingCell(visibleIndex, columnIndex))
   return;
  if(!this.IsSingleEditMode() && this.IsEditingRow(visibleIndex) && this.CanEditColumn(columnIndex)) {
   this.FocusColumnEditor(columnIndex);
   return;
  }
  if(this.IsEditing() && !this.EndEdit())
   return;
  var indices = this.IsSingleEditMode() ? [ columnIndex ] : this.GetEditColumnIndices();
  this.StartEditCore(visibleIndex, indices, columnIndex);
 },
 StartEditCore: function(visibleIndex, columnIndices, focusedColumnIndex) {
  var row = this.GetDataRow(visibleIndex);
  if(!row || !columnIndices || columnIndices.length === 0) 
   return;
  columnIndices = this.IntersectColumnIndices(this.GetEditColumnIndices(), columnIndices);
  if(columnIndices.length === 0)
   return;
  if(!_aspxIsExists(focusedColumnIndex) || !this.CanEditColumn(focusedColumnIndex))
   focusedColumnIndex = this.GetFirstVisibleColumnIndex(columnIndices);
  var startEditArgs = this.grid.RaiseBatchEditStartEditing(visibleIndex, this.GetColumn(focusedColumnIndex), this.GetRowValues(visibleIndex));
  if(!startEditArgs || startEditArgs.cancel || this.GetObjectSize(startEditArgs.rowValues) === 0) 
   return;
  var rowValues = startEditArgs.rowValues;
  columnIndices = this.IntersectColumnIndices(_aspxGetObjectKeys(rowValues), columnIndices);
  if(columnIndices.length === 0)
   return;
  _aspxClearSelection(); 
  this.MoveEditors(visibleIndex, columnIndices);
  this.SetEditorValues(rowValues, columnIndices);
  this.UpdateRow(visibleIndex, columnIndices, true);
  if(startEditArgs.focusedColumn)
   this.FocusColumnEditor(startEditArgs.focusedColumn.index);
  this.editRowVisibleIndex = visibleIndex;
  this.editedColumnIndices = columnIndices;
  this.lockEndEditOnLostFocus = true;
  window.setTimeout(function() { this.lockEndEditOnLostFocus = false; }.aspxBind(this), 0);
 },
 SetEditorValues: function(rowValues, columnIndices) {
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   var editor = this.GetEditor(columnIndex);
   if(editor && rowValues.hasOwnProperty(columnIndex)) {
    editor.SetIsValid(true);
    editor.SetValue(rowValues[columnIndex].value);
   }
  }
 },
 MoveEditors: function(visibleIndex, columnIndices) {
  var row = this.GetDataRow(visibleIndex);
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   var editorContainer = this.GetEditorContainer(columnIndex);
   var textContainer = this.GetCellTextContainer(row, columnIndex);
   if(!editorContainer || !textContainer)
    continue;
   _aspxSetElementDisplay(editorContainer, false);
   _aspxSetElementDisplay(textContainer, true);
   var dataCell = textContainer.parentNode;
   if(editorContainer.parentNode !== dataCell)
    dataCell.appendChild(editorContainer);
  }
 },
 EndEdit: function(skipValidation) {
  var row = this.GetDataRow(this.editRowVisibleIndex);
  if(!this.IsEditing() || !row) 
   return true;
  var rowValues = this.GetRowValues(this.editRowVisibleIndex);
  this.LoadEditorValues(rowValues, this.editRowVisibleIndex, this.editedColumnIndices);
  var endEditArgs = this.grid.RaiseBatchEditEndEditing(this.editRowVisibleIndex, rowValues);
  if(!endEditArgs || endEditArgs.cancel) 
   return false;
  var validationInfo = null;
  if(!skipValidation && this.RequireValidateOnEndEdit()) {
   validationInfo = this.ValidateRow(this.editRowVisibleIndex, endEditArgs.rowValues);
   if(!validationInfo.isValid && !this.AllowEndEditOnError()) 
    return false;
  }
  rowValues = this.FilterRowValues(endEditArgs.rowValues, this.editedColumnIndices);
  this.ApplyChanges(this.editRowVisibleIndex, rowValues);
  this.UpdateRow(this.editRowVisibleIndex, this.editedColumnIndices);
  this.ShowRowClientValidationErrors(this.editRowVisibleIndex, validationInfo);
  this.UpdateSyncInput();
  this.editRowVisibleIndex = this.InvalidRowVisibleIndex;
  this.editedColumnIndices = [ ];
  this.BlurDefaultEditor(this.focusedEditorColumnIndex);
  return true;
 },
 GetRowValues: function(visibleIndex) {
  var result = { };
  var columnIndices = this.GetEditColumnIndices();
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   result[columnIndex] = this.GetCellValueInfo(visibleIndex, columnIndex);
  }
  return result;
 },
 LoadEditorValues: function(rowValues, visibleIndex, columnIndices) {
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   var editor = this.GetEditor(columnIndex);
   if(!editor) continue;
   var value = editor.GetValue();
   var text = this.GetEditorDisplayText(editor, columnIndex);
   rowValues[columnIndex] = { value: value, text: text };
  }
 },
 ApplyChanges: function(visibleIndex, rowValues) {
  for(var columnIndex in rowValues) {
   var info = rowValues[columnIndex];
   this.SetCellValue(visibleIndex, columnIndex, info.value, info.text);
  }
 },
 IsEquals: function(val1, val2) { 
  if(val1 === val2)
   return true;
  if(_aspxIsExists(val1) && _aspxIsExists(val2) && val1.toString() === val2.toString())
   return true;
  return false;
 },
 UpdateRow: function(visibleIndex, columnIndices, showEditors, reset) {
  var row = this.GetDataRow(visibleIndex);
  if(!row) return;
  var cellSizes = showEditors ? this.GetCellSizes(row, columnIndices) : null;
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   var cellSize = cellSizes ? { width: cellSizes.widths[columnIndex], height: cellSizes.height } : null;
   this.UpdateCell(visibleIndex, columnIndex, showEditors, reset, cellSize);
  }
 },
 UpdateCell: function(visibleIndex, columnIndex, showEditor, reset, cellSize) {
  if(reset) showEditor = false;
  var row = this.GetDataRow(visibleIndex);
  var dataCell = this.GetDataCell(row, columnIndex);
  var editorContainer = this.GetEditorContainer(columnIndex);
  var textContainer = this.GetCellTextContainer(row, columnIndex);
  if(!dataCell || !editorContainer || !textContainer) 
   return;
  _aspxSetElementDisplay(textContainer, !showEditor);
  if(!showEditor)
   _aspxSetInnerHtml(textContainer, this.GetCellText(visibleIndex, columnIndex));
  var styleKey = this.GetStyleKey(visibleIndex, columnIndex, showEditor, reset);
  this.ChangeCellStyle(visibleIndex, columnIndex, styleKey);
  if(showEditor && cellSize) {
   var width = showEditor ? cellSize.width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(dataCell) : "";
   var height = showEditor ? cellSize.height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(dataCell) : "";
   _aspxSetStyles(dataCell, { width: width, height: height });
  }
  var display = showEditor ? "" : "none";
  if(showEditor && this.IsCheckColumn(columnIndex))
   display = "inline-block";
  _aspxSetStyles(editorContainer, { display: display });
  if(__aspxFirefox) {
   var editor = this.GetEditor(columnIndex);
   var input = editor && editor.GetInputElement();
   try {
    if(input)
     input.setSelectionRange(0, 0, "backward");
   } catch(e) { }
  }
  if(this.IsHiddenColumn(columnIndex))
   _aspxSetElementDisplay(dataCell, false);
  textContainer.dxgvHasError = false;
 },
 GetCellSizes: function(row, columnIndices) {
  var height = row.cells[0].offsetHeight;
  var widths = { };
  for(var i = 0; i < columnIndices.length; i++) { 
   var columnIndex = columnIndices[i];
   var dataCell = this.GetDataCell(row, columnIndex);
   if(dataCell)
    widths[columnIndex] = dataCell.offsetWidth;
  }
  return { widths: widths, height: height };
 },
 GetEditorDisplayText: function(editor, columnIndex) {
  if(this.IsCheckColumn(columnIndex))
   return this.GetCheckBoxDisplayText(editor, columnIndex);
  if(_aspxIsFunction(editor.GetFormattedText))
   return editor.GetFormattedText();
  return editor.GetText();
 },
 GetCheckBoxDisplayText: function(editor, columnIndex) {
  return this.GetCheckColumnDisplayText(editor.GetValue(), columnIndex);
 },
 GetCheckColumnDisplayText: function(value, columnIndex) {
  var columnDisplayHtml = this.GetCheckColumnsDisplayHtml();
  var state = columnDisplayHtml[columnIndex];
  for(var i = 0; i < state.length; i++) {
   var item = state[i];
   if(item && item.length === 2 && item[0] === value) 
    return item[1].toString();
  }
  return _aspxIsExists(value) ? value.toString() : "";
 },
 IsCheckBoxDisplayControlClicked: function(columnIndex, element) {
  if(!this.IsCheckColumn(columnIndex)) return false;
  var className = element.className;
  if(!className) return false;
  var state = this.GetCheckColumnsDisplayHtml()[columnIndex];
  for(var i = 0; i < state.length; i++) {
   var item = state[i];
   if(!item || item.length !== 2) continue;
   var displayControlHtml = item[1];
   if(displayControlHtml.indexOf(className) >= 0)
    return true;
  }
  return false;
 },
 FilterRowValues: function(rowValues, columnIndices) {
  var result = { };
  if(!rowValues || columnIndices.length === 0)
   return result;
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   if(rowValues[columnIndex])
    result[columnIndex] = rowValues[columnIndex];
  }
  return result;
 },
 IntersectColumnIndices: function(indices1, indices2) {
  var hash = { };
  for(var i = 0; i < indices1.length; i++)
   hash[indices1[i]] = true;
  var result = [ ];
  for(var i = 0; i < indices2.length; i++) {
   var index = indices2[i];
   if(hash[index])
    result.push(index);
  }
  return result;
 },
 GetFirstVisibleColumnIndex: function(columnIndices) {
  if(columnIndices.length === 1)
   return columnIndices[0];
  var visibleColumnIndices = this.GetVisibleColumnIndices();
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = visibleColumnIndices[i];
   if(_aspxArrayIndexOf(columnIndices, columnIndex) >= 0)
    return columnIndex;
  }
  return -1;
 }
});
ASPxClientGridViewBatchEditUpdateWatcher = _aspxCreateClass(null, {
 GridFuncCallbackWaitingTimeout: 15,
 constructor: function() {
  this.helpers = { };
  this.clearLockerTimerID = -1;
  this.clearLockerTimerDelay = 15;
  this.init();
 },
 init: function() {
  var postHandler = aspxGetPostHandler();
  postHandler.Post.AddHandler(this.OnPost, this);
 },
 Add: function(batchEditHelper) {
  if(!batchEditHelper || !batchEditHelper.grid.GetMainElement())
   return;
  this.helpers[batchEditHelper.grid.name] = batchEditHelper;
 },
 OnPost: function(s, e) {
  this.LockConfirmOnBeforeWindowUnload();
  var modifiedHelpersInfo = this.GetModifedHelpersInfo(e);
  if(!modifiedHelpersInfo) return;
  if(modifiedHelpersInfo.toConfirm.length === 0) {
   this.ResetClientChanges(modifiedHelpersInfo.toReset);
   return;
  }
  var helper = modifiedHelpersInfo.toConfirm[0];
  if(!confirm(helper.GetConfirmUpdateText()))
   e.cancel = true;
  var dxCallbackOwner = this.GetDXCallbackOwner(e);
  if(e.cancel && dxCallbackOwner) { 
   dxCallbackOwner.requestCount--; 
   dxCallbackOwner.HideLoadingElements();
  }
  if(!e.cancel)
   this.ResetClientChanges(modifiedHelpersInfo.toReset);
 },
 GetModifedHelpersInfo: function(e) {
  var modifiedHelpers = this.GetModifiedHelpers();
  if(modifiedHelpers.length === 0) return;
  var dxCallbackOwner = this.GetDXCallbackOwner(e);
  if(dxCallbackOwner) {
   var filteredList = [ ];
   for(var i = 0; i < modifiedHelpers.length; i++) {
    var helper = modifiedHelpers[i];
    var updateOnCallback = _aspxGetIsParent(dxCallbackOwner.GetMainElement(), helper.grid.GetMainElement());
    if(updateOnCallback && !this.IsGridFuncCallback(helper, dxCallbackOwner))
     filteredList.push(helper);
   }
   if(filteredList.length === 0) return;
   modifiedHelpers = filteredList;
  }
  var resetList = [ ];
  var confirmList = [ ];
  for(var i = 0; i < modifiedHelpers.length; i++) {
   var helper = modifiedHelpers[i];
   if(!helper.GetConfirmUpdateText()) { 
    resetList.push(helper);
    continue;
   }
   if(this.CanShowConfirm(helper, e && e.ownerID)) { 
    resetList.push(helper);
    confirmList.push(helper);
   }
  }
  return { toConfirm: confirmList, toReset: resetList };
 },
 GetModifiedHelpers: function() {
  var result = [ ];
  for(var key in this.helpers) { 
   var helper = this.helpers[key];
   if(helper.HasChanges() && helper.grid.GetMainElement() && !helper.IsUpdating())
    result.push(helper);
  }
  return result;
 },
 GetDXCallbackOwner: function(e) {
  return e && e.isDXCallback && aspxGetControlCollection().Get(e.ownerID);
 },
 CanShowConfirm: function(helper, requestOwnerID) {
  return !helper.grid.RaiseBatchEditConfirmShowing(requestOwnerID);
 },
 IsGridFuncCallback: function(helper, dxCallbackOwner) {
  var grid = helper.grid;
  if(dxCallbackOwner !== grid)
   return false;
  var date = new Date();
  for(var i = 0; i < grid.funcCallbacks.length; i++) {
   var callbackItem = grid.funcCallbacks[i];
   if(callbackItem && (date - callbackItem.date) < this.GridFuncCallbackWaitingTimeout)
    return true;
  }
  return false;
 },
 ResetClientChanges: function(modifiedHelpers) {
  for(var i = 0; i < modifiedHelpers.length; i++)
   modifiedHelpers[i].CancelEdit();
 },
 GetConfirmUpdateMessage: function() {
  if(this.confirmOnWindowUnloadLocked) return;
  var modifiedHelpersInfo = this.GetModifedHelpersInfo();
  if(!modifiedHelpersInfo || modifiedHelpersInfo.toConfirm.length === 0) 
   return;
  var helper = modifiedHelpersInfo.toConfirm[0];
  return helper.GetConfirmUpdateText();
 },
 LockConfirmOnBeforeWindowUnload: function() {
  this.confirmOnWindowUnloadLocked = true;
  this.clearLockerTimerID = _aspxClearTimer(this.clearLockerTimerID);
  this.clearLockerTimerID = window.setTimeout(function() {
   this.confirmOnWindowUnloadLocked = false; 
  }.aspxBind(this), this.clearLockerTimerDelay);
 },
 OnWindowUnload: function(e) {
  if(this.confirmOnWindowUnloadLocked) return;
  var modifiedHelpersInfo = this.GetModifedHelpersInfo();
  if(!modifiedHelpersInfo) return;
  this.ResetClientChanges(modifiedHelpersInfo.toReset);
 },
 OnMouseDown: function(e) {
  if(__aspxIE)
   this.PreventBeforeUnloadOnLinkClick(e);
 },
 OnFocusIn: function(e) {
  if(__aspxIE)
   this.PreventBeforeUnloadOnLinkClick(e);
 },
 PreventBeforeUnloadOnLinkClick: function(e) {
  var link = _aspxGetParentByTagName(_aspxGetEventSource(e), "A");
  if(!link || link.dxgvLinkClickHanlderAssigned)
   return;
  var url = _aspxGetAttribute(link, "href");
  if(!url || url.indexOf("javascript:") < 0)
   return;
  _aspxAttachEventToElement(link, "click", function(ev) { return _aspxPreventEvent(ev); });
  link.dxgvLinkClickHanlderAssigned = true;
 }
});
ASPxClientGridViewBatchEditUpdateWatcher.Instance = new ASPxClientGridViewBatchEditUpdateWatcher();
_aspxAttachEventToElement(window, "beforeunload", function(e) {
 var confirmMessage = ASPxClientGridViewBatchEditUpdateWatcher.Instance.GetConfirmUpdateMessage();
 if(confirmMessage)
  e.returnValue = confirmMessage;
 return confirmMessage;
});
_aspxAttachEventToElement(window, "unload", function(e) {
 ASPxClientGridViewBatchEditUpdateWatcher.Instance.OnWindowUnload(e);
});
_aspxAttachEventToDocument("mousedown", function(e) {
 ASPxClientGridViewBatchEditUpdateWatcher.Instance.OnMouseDown(e);
});
_aspxAttachEventToDocument("focusin", function(e) {
 ASPxClientGridViewBatchEditUpdateWatcher.Instance.OnFocusIn(e);
});
ASPxClientGridView = _aspxCreateClass(ASPxClientControl, {
 MainTableID: "DXMainTable",
 HeaderTableID: "DXHeaderTable", 
 FooterTableID: "DXFooterTable",
 FilterRowID: "DXFilterRow",
 DataRowID: "DXDataRow",
 DetailRowID: "DXDRow",
 PreviewRowID: "DXPRow",
 GroupRowID: "DXGroupRow",
 EmptyDataRowID: "DXEmptyRow",
 FooterRowID: "DXFooterRow",
 FixedColumnsDivID: "DXFixedColumnsDiv",
 FixedColumnsContentDivID: "DXFixedColumnsContentDiv",
 CustomizationWindowSuffix: "_custwindow",
 EmptyHeaderSuffix: "_emptyheader", 
 HeaderRowID: "_DXHeadersRow",
 PagerBottomID: "DXPagerBottom",
 PagerTopID: "DXPagerTop",
 HeaderFilterButtonClassName: "dxgv__hfb",
 CommandColumnItemClassName: "dxgv__cci",
 CommandId: {
  NextPage: "NEXTPAGE",
  PreviousPage: "PREVPAGE",
  GotoPage: "GOTOPAGE",
  SelectRows: "SELECTROWS",
  SelectRowsKey: "SELECTROWSKEY",
  Group: "GROUP",
  UnGroup: "UNGROUP",
  Sort: "SORT",
  ColumnMove: "COLUMNMOVE",
  CollapseAll: "COLLAPSEALL",
  ExpandAll: "EXPANDALL",
  ExpandRow: "EXPANDROW",
  CollapseRow: "COLLAPSEROW",
  HideAllDetail: "HIDEALLDETAIL",
  ShowAllDetail: "SHOWALLDETAIL",
  ShowDetailRow: "SHOWDETAILROW",
  HideDetailRow: "HIDEDETAILROW",
  PagerOnClick: "PAGERONCLICK",
  ApplyFilter: "APPLYFILTER",
  ApplyColumnFilter: "APPLYCOLUMNFILTER",
  ApplyMultiColumnFilter: "APPLYMULTICOLUMNFILTER",
  ApplyHeaderColumnFilter: "APPLYHEADERCOLUMNFILTER",
  FilterRowMenu: "FILTERROWMENU",
  StartEdit: "STARTEDIT",
  CancelEdit: "CANCELEDIT",
  UpdateEdit: "UPDATEEDIT",
  AddNewRow: "ADDNEWROW",
  DeleteRow: "DELETEROW",
  CustomButton: "CUSTOMBUTTON",
  CustomCallback: "CUSTOMCALLBACK",
  ShowFilterControl: "SHOWFILTERCONTROL",
  CloseFilterControl: "CLOSEFILTERCONTROL",
  SetFilterEnabled: "SETFILTERENABLED",
  Refresh: "REFRESH",
  SelFieldValues: "SELFIELDVALUES",
  RowValues: "ROWVALUES",
  PageRowValues: "PAGEROWVALUES",
  FilterPopup: "FILTERPOPUP",
  ContextMenu: "CONTEXTMENU",
  CustomValues: "CUSTOMVALUES"
 },
 ContextMenuItems: {
  FullExpand: "FullExpand",
  FullCollapse: "FullCollapse",
  SortAscending: "SortAscending",
  SortDescending: "SortDescending",
  ClearSorting: "ClearSorting",
  ShowFilterBuilder: "ShowFilterEditor",
  ShowFilterRow: "ShowFilterRow",
  ClearFilter: "ClearFilter",
  ShowFilterRowMenu: "ShowFilterRowMenu",
  GroupByColumn: "GroupByColumn",
  UngroupColumn: "UngroupColumn",
  ClearGrouping: "ClearGrouping",
  ShowGroupPanel: "ShowGroupPanel",
  ShowColumn: "ShowColumn",
  HideColumn: "HideColumn",
  ShowCustomizationWindow: "ShowCustomizationWindow",
  ShowFooter: "ShowFooter",
  ExpandRow: "ExpandRow",
  CollapseRow: "CollapseRow",
  ExpandDetailRow: "ExpandDetailRow",
  CollapseDetailRow: "CollapseDetailRow",
  NewRow: "NewRow",
  EditRow: "EditRow",
  DeleteRow: "DeleteRow",
  Refresh: "Refresh",
  SummarySum: "SummarySum",
  SummaryMin: "SummaryMin",
  SummaryMax: "SummaryMax",
  SummaryAverage: "SummaryAverage",
  SummaryCount: "SummaryCount",
  CustomItem: "CustomItem"
 },
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.callBacksEnabled = true;
  this.custwindowLeft = null;
  this.custwindowTop = null;
  this.custwindowVisible = null;
  this.activeElement = null;
  this.filterKeyPressInputValue = "";
  this.userChangedSelection = false;
  this.lockFilter = false;
  this.confirmDelete = "";
  this.filterKeyPressTimerId = -1;
  this.filterRowMenuColumnIndex = -1;
  this.editorIDList = [ ];
  this.keys = [ ];
  this.lastMultiSelectIndex = -1;
  this.hasFooterRowTemplate = false;
  this.mainTableClickData = {
   processing: false,
   focusChanged: false,
   selectionChanged: false
  };
  this.afterCallbackRequired = false;
  this.headerFilterPopupDimensions = { };
  this.enableHeaderFilterCaching = true;
  this.postbackRequestCount = 0;
  this.supportGestures = true;
  this.checkBoxImageProperties = null;
  this.internalCheckBoxCollection = null;
  this.sizingConfig.adjustControl = true;
  this.lookupBehavior = false;
  this.clickedMenuItem = null;
  this.EmptyElementIndex = -1;
  this.batchEditApi = new ASPxClientGridViewBatchEditApi(this);
  this.SelectionChanged = new ASPxClientEvent();
  this.FocusedRowChanged = new ASPxClientEvent();
  this.ColumnSorting = new ASPxClientEvent();
  this.ColumnGrouping = new ASPxClientEvent();
  this.ColumnMoving = new ASPxClientEvent();
  this.ColumnStartDragging  = new ASPxClientEvent();
  this.ColumnResizing  = new ASPxClientEvent();
  this.ColumnResized  = new ASPxClientEvent();
  this.RowExpanding  = new ASPxClientEvent();
  this.RowCollapsing  = new ASPxClientEvent();
  this.DetailRowExpanding  = new ASPxClientEvent();
  this.DetailRowCollapsing  = new ASPxClientEvent();
  this.RowClick  = new ASPxClientEvent();
  this.RowDblClick  = new ASPxClientEvent();
  this.ContextMenu = new ASPxClientEvent();
  this.ContextMenuItemClick = new ASPxClientEvent();
  this.CustomizationWindowCloseUp = new ASPxClientEvent();
  this.CustomButtonClick = new ASPxClientEvent();
  this.BatchEditConfirmShowing = new ASPxClientEvent();
  this.BatchEditStartEditing = new ASPxClientEvent();
  this.BatchEditEndEditing = new ASPxClientEvent();
  this.BatchEditRowValidating = new ASPxClientEvent();
  this.BatchEditTemplateCellFocused = new ASPxClientEvent();
  this.InternalCheckBoxClick = new ASPxClientEvent();
  this.funcCallbacks = [ ];
  this.pendingCommands = [ ];
  this.pageRowCount = 0;
  this.pageRowSize = 0;
  this.pageIndex = 0;
  this.pageCount = 1;
  this.allowFocusedRow = false;
  this.allowSelectByRowClick = false;
  this.allowSelectSingleRowOnly = false;
  this.allowMultiColumnAutoFilter = false,
  this.focusedRowIndex = -1;
  this.selectedWithoutPageRowCount = 0;
  this.filteredSelectedWithoutPageRowCount = 0;
  this.selectAllSettings = [ ];
  this.selectAllBtnStateWithoutPage = null;
  this.visibleStartIndex = 0;
  this.columns = [ ];
  this.columnResizeMode = ASPxColumnResizeMode.None;
  this.fixedColumnCount = 0;
  this.horzScroll = ASPxScrollBarMode.Hidden;
  this.vertScroll = ASPxScrollBarMode.Hidden;
  this.scrollToRowIndex = -1;
  this.isVirtualScrolling = false;
  this.useEndlessPaging = false;
  this.allowBatchEditing = false;
  this.batchEditClientState = { };
  this.resetScrollTop = false;
  this.callbackOnFocusedRowChanged = false;
  this.callbackOnSelectionChanged = false;
  this.autoFilterDelay = 1200;
  this.editState = 0;
  this.editMode = 2;
  this.kbdHelper = null;
  this.tableHelper = null;
  this.enableKeyboard = false;
  this.keyboardLock = false;
  this.accessKey = null;
  this.customKbdHelperName = null;
  this.dragHelper = null;
  this.endlessPagingHelper = null;
  this.batchEditHelper = null;
  this.icbFocusedStyle = null;
  this.pendingEvents = [ ];
  this.rowHotTrackStyle = null;
  this.rowHotTrackItemsBag = { };
  this.filterEditorState = [];
 },
 HasHorzScroll: function() { return this.horzScroll != ASPxScrollBarMode.Hidden; },
 HasVertScroll: function() { return this.vertScroll != ASPxScrollBarMode.Hidden; },
 HasScrolling: function() { return this.HasHorzScroll() || this.HasVertScroll(); },
 AllowResizing: function() { return this.columnResizeMode != ASPxColumnResizeMode.None; },
 _isGroupRow: function(row) { return row.id.indexOf(this.GroupRowID) > -1; },
 IsHeaderRow: function(row) { return this.IsHeaderRowID(row.id); },
 IsHeaderRowID: function(id) { return id.indexOf(this.name + this.HeaderRowID) == 0; },
 IsEmptyHeaderID: function(id) { return id.indexOf(this.EmptyHeaderSuffix) > -1 },
 GetRootTable: function() { return _aspxGetElementById(this.name); },
 GetGridTD: function() { 
  var table = this.GetRootTable();
  if(!table) return null;
  return table.rows[0].cells[0];
 },
 GetArrowDragDownImage: function() { return this.GetChildElementById("IADD"); },
 GetArrowDragUpImage: function() { return this.GetChildElementById("IADU"); },
 GetArrowDragFieldImage: function() { return this.GetChildElementById("IDHF"); },
 GetCallbackStateInput: function() { return this.GetChildElementById("CallbackState"); },
 GetSelectionInput: function() { return this.GetChildElementById("DXSelInput"); },
 GetKeyValuesInput: function() { return this.GetChildElementById("DXKVInput"); },
 GetFocusedRowInput: function() { return this.GetChildElementById("DXFocusedRowInput"); },
 GetColResizedInput: function() { return this.GetChildElementById("DXColResizedInput"); },
 GetPostBackSyncInput: function() { return this.GetChildElementById("DXSyncInput"); },
 GetEndlessPagingGroupStateInput: function() { return this.GetChildElementById("DXEPGSInput"); },
 GetEndlessPagingUpdatableContainer: function() { return this.GetChildElementById("DXEPUC"); },
 GetEndlessPagingLPContainer: function() { return this.GetChildElementById("DXEPLPC"); },
 GetBatchEditorContainer: function(columnIndex) { return this.GetChildElementById("DXBEC" + columnIndex); },
 GetBatchEditPageValuesInput: function() { return this.GetChildElementById("DXBEPVInput"); },
 GetBatchEditClientModifiedValuesInput: function() { return this.GetChildElementById("DXBECMVInput"); },
 GetBatchEditCellErrorTable: function() { return this.GetChildElementById("DXCErrorTable"); },
 GetLoadingPanelDiv: function() {  return this.GetChildElementById("LPD"); },
 GetFixedColumnsDiv: function() {  return this.GetChildElementById(this.FixedColumnsDivID); },
 GetRow: function(visibleIndex) { 
  var res = this.GetDataRow(visibleIndex);
  if(res == null) res = this.GetGroupRow(visibleIndex);
  return res;
 },
 GetDataRow: function(visibleIndex) { return this.GetChildElementById(this.DataRowID + visibleIndex); },
 GetDetailRow: function(visibleIndex) { return this.GetChildElementById(this.DetailRowID + visibleIndex); },
 GetPreviewRow: function(visibleIndex) { return this.GetChildElementById(this.PreviewRowID + visibleIndex); },
 GetGroupRow: function(visibleIndex) { 
  var element = this.GetChildElementById(this.GroupRowID + visibleIndex);
  if(!element)
   element = this.GetExpandedGroupRow(visibleIndex);
  return element; 
 },
 GetExpandedGroupRow: function(visibleIndex) { return this.GetChildElementById(this.GroupRowID + "Exp" + visibleIndex); },
 GetEmptyDataRow: function() { return this.GetChildElementById(this.EmptyDataRowID); },
 GetDataRowSelBtn: function(index) { return this.GetChildElementById("DXSelBtn" + index); },
 GetSelectAllBtn: function(index) { return this.GetChildElementById("DXSelAllBtn" + index); },
 GetMainTable: function() { return this.GetChildElementById(this.MainTableID); },
 GetStyleTable: function() { return this.GetChildElementById("DXStyleTable"); },
 GetLoadingPanelContainer: function() { return this.GetChildElementById("DXLPContainer"); },
 GetGroupPanel: function() { return this.GetChildElementById("grouppanel"); },
 GetHeader: function(columnIndex, inGroupPanel) { 
  var id = "col" + columnIndex;
  if(inGroupPanel)
   id = "group" + id;
  return this.GetChildElementById(id); 
 },
 GetHeaderRow: function(index) {
  return _aspxGetElementById(this.name + this.HeaderRowID + index);
 },
 GetEditingRow: function(obj) { return _aspxGetElementById(obj.name + "_DXEditingRow"); },
 GetEditingErrorRow: function(obj) { return _aspxGetElementById(obj.name + "_DXEditingErrorRow"); },
 GetEditFormTable: function() { return _aspxGetElementById(this.name + "_DXEFT"); },
 GetCustomizationWindow: function() { return aspxGetControlCollection().Get(this.name + this.CustomizationWindowSuffix); },
 GetParentRowsWindow: function() { return aspxGetControlCollection().Get(this.name + "_DXparentrowswindow"); },
 GetEditorPrefix: function() { return "DXEditor"; },
 GetPopupEditForm: function() { return aspxGetControlCollection().Get(this.name  + "_DXPEForm"); },
 GetFilterRowMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXFilterRowMenu"); },
 GetFilterControlPopup: function() { return aspxGetControlCollection().Get(this.name + "_DXPFCForm"); },
 GetFilterControl: function() { return aspxGetControlCollection().Get(this.name +  "_DXPFCForm_DXPFC"); }, 
 GetHeaderFilterPopup: function() { return aspxGetControlCollection().Get(this.name + "_DXHFP"); },
 GetHeaderFilterListBox: function() { return aspxGetControlCollection().Get(this.name + "_HFListBox"); },
 GetHeaderFilterSelectAllCheckBox: function() { return aspxGetControlCollection().Get(this.name + "_HFSACheckBox"); },
 GetGroupPanelContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_GroupPanel"); },
 GetColumnContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_Columns"); },
 GetRowContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_Rows"); },
 GetFooterContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_Footer"); },
 GetEditorByColumnIndex: function(colIndex) {
  var list = this._getEditors();
  for(var i = 0; i < list.length; i++) {
   if(this.tryGetNumberFromEndOfString(list[i].name).value === colIndex)
    return list[i];
  }
  return null;
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  if(this.enabled)
   this.SetHeadersClientEvents();
  this.EnsureRowKeys();
  this._setFocusedRowInputValue();
  this.AddSelectStartHandler();
  this.EnsureRowHotTrackItems();
  if(this.enableKeyboard) {
   this.kbdHelper = this.customKbdHelperName ? new window[this.customKbdHelperName](this) : new ASPxGridViewKbdHelper(this);
   this.kbdHelper.Init();
   ASPxKbdHelper.RegisterAccessKey(this);
  }
  if(this.checkBoxImageProperties){
   this.CreateInternalCheckBoxCollection();
   this.UpdateSelectAllCheckboxesState();
  }
  this.CheckPendingEvents();
  this.InitializeHeaderFilterPopup();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.ResetStretchedColumnWidth();
  this.CheckEndlessPagingLoadNextPage();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.Init();
  this.PrepareEditorsToKeyboardNavigation();
  window.setTimeout(function() { this.SaveAutoFilterColumnEditorState(); }.aspxBind(this), 0);
  window.setTimeout(function() { this.EnsureVisibleRowFromServer(); }.aspxBind(this), 0);
 },
 PrepareEditorsToKeyboardNavigation: function() {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  for(var i = 0; i < this.columns.length; i++) {
   this.AttachEventToEditor(this.columns[i].index, "GotFocus", function(s, e) { this.OnEditorGotFocus(s, e); }.aspxBind(this));
   this.AttachEventToEditor(this.columns[i].index, "KeyDown", function(s, e) { this.OnEditorKeyDown(s, e); }.aspxBind(this));
  }
 },
 RequireEditorsKeyboardNavigation: function() {
  return this.IsInlineEditMode() && this.GetFixedColumnsHelper();
 },
 OnEditorGotFocus: function(s, e) {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  var helper = this.GetFixedColumnsHelper();
  helper.TryShowColumn(s.dxgvColumnIndex);
 },
 OnEditorKeyDown: function(s, e) {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  var keyCode = _aspxGetKeyCode(e.htmlEvent);
  if(keyCode !== ASPxKey.Tab) return;
  var helper = this.GetFixedColumnsHelper();
  var matrix = this.GetHeaderMatrix();
  var neighborColumnIndex = e.htmlEvent.shiftKey ? matrix.GetLeftNeighbor(s.dxgvColumnIndex) : matrix.GetRightNeighbor(s.dxgvColumnIndex);
  var neighborEditor = this.GetEditorByColumnIndex(neighborColumnIndex);
  if(neighborEditor && helper.TryShowColumn(neighborColumnIndex, true)) {
   _aspxPreventEventAndBubble(e.htmlEvent);
   _aspxClearInputSelection(s.GetInputElement());
   neighborEditor.Focus();
  }
 },
 AttachEventToEditor: function(columnIndex, eventName, handler) {
  var editor = this.GetEditorByColumnIndex(columnIndex);
  if(!ASPxIdent.IsASPxClientEdit(editor))
   return;
  var attachKeyDownToInput = eventName === "KeyDown" && this.IsCheckEditor(editor);
  if(!editor[eventName] && !attachKeyDownToInput)
   return;
  var duplicateAttachLocker = "dxgv" + eventName + "Assigned";
  if(editor[duplicateAttachLocker]) 
   return;
  if(attachKeyDownToInput)
   _aspxAttachEventToElement(editor.GetInputElement(), "keydown", function(e) { handler(editor, { htmlEvent: e }); });
  else
   editor[eventName].AddHandler(handler);
  editor.dxgvColumnIndex = columnIndex;
  editor[duplicateAttachLocker] = true;
 },
 IsInlineEditMode: function() { return this.editMode === 0; },
 IsCheckEditor: function(editor) {
  return ASPxIdent.IsASPxClientCheckEdit && ASPxIdent.IsASPxClientCheckEdit(editor);
 },
 CheckEndlessPagingLoadNextPage: function() {
  window.setTimeout(function() {
   var scrollHelper = this.GetScrollHelper();
   if(this.useEndlessPaging && scrollHelper)
    scrollHelper.CheckEndlessPagingLoadNextPage();
  }.aspxBind(this), 0);
 },
 EnsureRowKeys: function() {
  var keyValuesInput = this.GetKeyValuesInput();
  if(keyValuesInput)
   this.keys = eval(keyValuesInput.value);
  if(!this.keys)
   this.keys = [ ];
 }, 
 InitializeHeaderFilterPopup: function() {
  var popup = this.GetHeaderFilterPopup();
  if(!popup)
   return;
  popup.PopUp.AddHandler(function() { this.OnPopUpHeaderFilterWindow(); }.aspxBind(this));
  popup.CloseUp.AddHandler(function(s) { 
   if(!this.UseHFContentCaching())
    window.setTimeout(function() { s.SetContentHtml(""); }, 0);
  }.aspxBind(this));
  popup.Resize.AddHandler(function(s) { 
   var colIndex = this.FindColumnIndexByHeaderChild(s.GetCurrentPopupElement());
   var column = this._getColumn(colIndex);
   if(!column) return;
   this.SetHeaderFilterPopupSize(colIndex, s.GetWidth(), s.GetHeight());
  }.aspxBind(this));
  var buttons = this.GetHeaderFilterButtons();
  for(var i = 0; i < buttons.length; i++)
   popup.AddPopupElement(buttons[i]);
 },
 GetHeaderFilterButtons: function() {
  var buttons = [ ];
  for(var i = 0; i < this.GetColumnsCount(); i++) {
   if(!this.GetColumn(i).visible)
    continue;
   this.PopulateHeaderFilterButtons(this.GetHeader(i, false), buttons);
   this.PopulateHeaderFilterButtons(this.GetHeader(i, true), buttons);
  }
  var custWindow = this.GetCustomizationWindow();
  if(custWindow)
   this.PopulateHeaderFilterButtons(custWindow.GetWindowClientTable(-1), buttons);
  return buttons;
 },
 PopulateHeaderFilterButtons: function(container, buttons) {
  if(!container) return;
  var images = container.getElementsByTagName("IMG");
  for(var i = 0; i < images.length; i++) {
   var image = images[i];
   if(_aspxElementCssClassContains(image, this.HeaderFilterButtonClassName))
    buttons.push(image);
  }
 },
 UseHFContentCaching: function() {
  var listBox = this.GetHeaderFilterListBox();
  if(listBox && listBox.GetMainElement())
   return this.enableHeaderFilterCaching && listBox.GetItemCount() < 1000;
  return false;
 },
 OnPopUpHeaderFilterWindow: function() {
  var popup = this.GetHeaderFilterPopup();
  var colIndex = this.FindColumnIndexByHeaderChild(popup.GetCurrentPopupElement());
  var column = this._getColumn(colIndex);
  if(!column) return;
  var shiftKey = popup.GetPopUpReasonMouseEvent().shiftKey;
  var listBox = this.GetHeaderFilterListBox();
  if(listBox && listBox.cpGVColumnIndex == colIndex && this.UseHFContentCaching() && popup.savedShiftKey === shiftKey) {
   this.RestoreHFListBoxPreviousState(listBox, column);
   return;
  }
  popup.savedShiftKey = shiftKey;
  this.gridFuncCallBack([this.CommandId.FilterPopup, this.name, colIndex, shiftKey ? "T" : ""], this.onFilterPopupCallback);
  popup.SetContentHtml("");
  var buttonPanel = document.getElementById(popup.cpButtonPanelID);
  if(buttonPanel) {
   buttonPanel.style.display = column.HFCheckedList ? "" : "none";
   this.SetHFOkButtonEnabled(false);
  }
  var size = this.GetHeaderFilterPopupSize(colIndex);
  if(size) {
   popup.SetSize(size[0], size[1]);
   if(__aspxFirefox)
    popup.Shown.AddHandler(function(s) { 
     window.setTimeout(function() { s.SetSize(size[0], size[1]); }, 0); 
    });
  }
  this.CreateLoadingPanelWithoutBordersInsideContainer(popup.GetContentContainer(-1));
 },
 RestoreHFListBoxPreviousState: function(listBox, column) {
  if(!column.HFCheckedList) 
   return;
  listBox.UnselectAll();
  listBox.SelectIndices(listBox.HFSavedSelectedIndices);
  this.UpdateHFSelectAllCheckState();
  this.SetHFOkButtonEnabled(false);
 },
 SetHFOkButtonEnabled: function(enabled) {
  var popup = this.GetHeaderFilterPopup();
  if(!popup) return;
  var button = aspxGetControlCollection().Get(popup.cpOkButtonID);
  if(!button) return;
  button.SetEnabled(enabled);
 },
 GetHeaderFilterPopupSize: function(key) {
  var size = this.headerFilterPopupDimensions[key];
  if(size) return size;
  if(!this.headerFilterPopupDimensions["Default"]) {
   var popup = this.GetHeaderFilterPopup();
   this.SetHeaderFilterPopupSize("Default", popup.GetWidth(), popup.GetHeight());
  }
  return this.headerFilterPopupDimensions["Default"];
 },
 SetHeaderFilterPopupSize: function(key, width, height) {
  this.headerFilterPopupDimensions[key] = [ width, height ];
 },
 FindColumnIndexByHeaderChild: function(element) {
  if(!element) 
   return -1;
  var level = 0;
  while(level < 6) {
   var index = this.getColumnIndex(element.id);
   if(index > -1)
    return index;
   element = element.parentNode;
   level++;
  }
  return -1;
 },
 InitializeHFListBox: function(listBox) {
  _aspxAttachEventToElement(listBox.GetListTable(), "mousedown", function() { window.setTimeout(_aspxClearSelection, 0); });
  listBox.SelectedIndexChanged.AddHandler(function(s) { this.OnHFListBoxSelectionChanged(s); }.aspxBind(this));
  listBox.HFSavedSelectedIndices = listBox.GetSelectedIndices();
 },
 OnHFListBoxSelectionChanged: function(listBox) {
  var column = this.GetColumn(listBox.cpGVColumnIndex);
  if(!column) return;
  if(!column.HFCheckedList) {
   this.ApplyHeaderFilterByColumn();
   return;
  }
  this.UpdateHFSelectAllCheckState();
  this.SetHFOkButtonEnabled(this.IsHFSelectedIndicesChanged());
 },
 UpdateHFSelectAllCheckState: function() {
  var listBox = this.GetHeaderFilterListBox();
  var selectedItemCount = listBox.GetSelectedIndices().length;
  var checkState = ASPxClientCheckBoxCheckState.Indeterminate;
  if(selectedItemCount == 0)
   checkState = ASPxClientCheckBoxCheckState.Unchecked;
  else if(selectedItemCount == listBox.GetItemCount())
   checkState = ASPxClientCheckBoxCheckState.Checked;
  this.GetHeaderFilterSelectAllCheckBox().SetCheckState(checkState);
 },
 OnHFSelectAllCheckedChanged: function(checkBox) {
  var listBox = this.GetHeaderFilterListBox();
  if(checkBox.GetChecked())
   listBox.SelectAll();
  else
   listBox.UnselectAll();
  this.SetHFOkButtonEnabled(this.IsHFSelectedIndicesChanged());
 },
 IsHFSelectedIndicesChanged: function() {
  var listBox = this.GetHeaderFilterListBox();
  if(!listBox) return;
  var indices = listBox.GetSelectedIndices();
  var savedIndices = listBox.HFSavedSelectedIndices;
  if(indices.length != savedIndices.length)
   return true;
  for(var i = 0; i < indices.length; i++) {
   if(_aspxArrayBinarySearch(savedIndices, indices[i]) < 0)
    return true;
  }
  return false;
 },
 CheckPendingEvents: function() {
  if(this.pendingEvents.length < 1)
   return;
  for(var i = 0; i < this.pendingEvents.length; i++)
   this.ScheduleRaisingEvent(this.pendingEvents[i]);
  this.pendingEvents.length = 0;
 },
 ScheduleRaisingEvent: function(eventName) {
  window.setTimeout(function() { this[eventName](); }.aspxBind(this), 0);
 },
 CreateInternalCheckBoxCollection: function() {
  if(!this.internalCheckBoxCollection)
   this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.checkBoxImageProperties, true);
  else
   this.internalCheckBoxCollection.SetImageProperties(this.checkBoxImageProperties);
  this.CompleteInternalCheckBoxCollection();
 },
 CompleteInternalCheckBoxCollection: function() {
  if(!this.IsLastCallbackProcessedAsEndless())
   this.internalCheckBoxCollection.Clear();
  for(var i = 0; i < this.selectAllSettings.length; i++){
   var selectAllSettings = this.selectAllSettings[i];
   var icbSelectAllElement = this.GetSelectAllBtn(selectAllSettings.index);
   if(_aspxIsExistsElement(icbSelectAllElement))
    this.AddInternalCheckBoxToCollection(icbSelectAllElement, -(selectAllSettings.index + 1), !this.IsCheckBoxDisabled(icbSelectAllElement));
  }
  for(var i = 0; i < this.pageRowCount; i ++) {
   var index = i + this.visibleStartIndex;
   var icbInputElement = this.GetDataRowSelBtn(index);
   if(icbInputElement) {
    var enabled = !this.IsCheckBoxDisabled(icbInputElement);
    this.AddInternalCheckBoxToCollection(icbInputElement, index, enabled);
   }
  }
 },
 IsCheckBoxDisabled: function(icbInputElement) {
   var icbMainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(icbInputElement);
   return icbMainElement.className.indexOf("dxgv_cd") != -1;
 },
 AddInternalCheckBoxToCollection: function (icbInputElement, visibleIndex, enabled) {
  var internalCheckBox = null;
  if(this.IsLastCallbackProcessedAsEndless())
   internalCheckBox = this.internalCheckBoxCollection.Get(icbInputElement.id);
  if(!internalCheckBox)
   internalCheckBox = this.internalCheckBoxCollection.Add(icbInputElement.id, icbInputElement);
  internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  internalCheckBox.SetEnabled(enabled && this.GetEnabled());
  internalCheckBox.readOnly = this.readOnly;
  internalCheckBox.autoSwitchEnabled = !this.allowSelectSingleRowOnly;
  var grid = this;
  function OnCheckedChanged(s, e){
   if(!s.autoSwitchEnabled && s.GetValue() == ASPxClientCheckBoxInputKey.Unchecked){
    var value = s.stateController.GetNextCheckBoxValue(s.GetValue(), s.allowGrayedByClick && s.allowGrayed);
    s.SetValue(value);
   }
   var rowCheckBox = grid.GetDataRowSelBtn(visibleIndex);
   if(grid.allowSelectSingleRowOnly)
    grid._selectAllSelBtn(false, rowCheckBox.id);
   if(!grid.RaiseInternalCheckBoxClick(visibleIndex)){
    grid.ScheduleCommand(function() { grid.SelectRow(visibleIndex, s.GetChecked()); }, true);
    grid.mainTableClickCore(e, true);
   }
  }
  function OnSelectAllCheckedChanged(s, e){
   grid.ScheduleCommand(function() {
    var index = grid.tryGetNumberFromEndOfString(s.inputElement.id).value;
    var columnSelectAllSettings = grid.GetColumnSelectAllSettings(index);
    if(!columnSelectAllSettings)
     return;
    switch(columnSelectAllSettings.mode){
     case 1:
      s.GetChecked() ? grid.SelectAllRowsOnPage() : grid.UnselectAllRowsOnPage();
      break;
     case 2:
      s.GetChecked() ? grid.SelectRows() : grid.UnselectFilteredRows();
      break;
    }
    grid.UpdateSelectAllCheckboxesState();
   }, true);
   grid.mainTableClickCore(e, true);
  }
  var checkedChangedHandler = visibleIndex < 0 ? OnSelectAllCheckedChanged : OnCheckedChanged;
  internalCheckBox.CheckedChanged.AddHandler(checkedChangedHandler);
 },
 GetColumnSelectAllSettings: function(index){
  for(var i = 0; i < this.selectAllSettings.length; i++){
   if(this.selectAllSettings[i].index == index)
    return this.selectAllSettings[i];
  }
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.UpdateScrollableControls();
  this.UpdateIndentCellWidths();
  this.ValidateColumnWidths();
  this.ApplyPostBackSyncData();
  this.AdjustPagerControls();
 },
 IsAdjustmentRequired: function() {
  if(ASPxClientControl.prototype.IsAdjustmentRequired.call(this))
   return true;
  var scrollHelper = this.GetScrollHelper()
  return scrollHelper ? scrollHelper.IsRestoreScrollPosition() : false;
 },
 NeedCollapseControlCore: function() {
  return this.HasScrolling();
 },
 GetChildElementById: function(childName){
  if(!this.childrenCache) 
   this.childrenCache = { };
  if(!_aspxIsExistsElement(this.childrenCache[childName])) 
   this.childrenCache[childName] = _aspxGetElementById(this.name + "_" + childName);
  return this.childrenCache[childName];
 }, 
 SerializeCallbackArgs: function(array) {
  if(!_aspxIsExists(array) || array.constructor != Array || array.length == 0)
   return "";
  var sb = [ ];
  for(var i = 0; i < array.length; i++) {
   var item = array[i].toString();
   sb.push(item.length);
   sb.push('|');
   sb.push(item);
  }
  return sb.join("");
 }, 
 gridCallBack: function (args) {
  this.OnBeforeCallbackOrPostBack();
  if(!this.callBack || !this.callBacksEnabled) {
   this.gridPostBack(args);
  } else {
   var serializedArgs = this.SerializeCallbackArgs(args); 
   var command = this.GetCorrectedCommand(args);
   this.OnBeforeCallback(command);
   var preparedArgs = this.prepareCallbackArgs(serializedArgs, this.GetGridTD());
   this.lockFilter = true;
   this.userChangedSelection = false;
   this.CreateCallback(preparedArgs, command);
  }
 },
 gridPostBack: function(args) { 
  var serializedArgs = this.SerializeCallbackArgs(args); 
  this.lockFilter = true;
  this.postbackRequestCount++;
  this.SendPostBack(serializedArgs);
 },
 GetContextMenuInfo: function() {
  if(!this.clickedMenuItem)
   return "";
  var menu = this.clickedMenuItem.menu;
  var elementInfo = menu.elementInfo;
  return menu.cpType + "," + this.clickedMenuItem.indexPath + "," + elementInfo.index;
 },
 GetCorrectedCommand: function(args) {
  if(args.length == 0)
   return "";
  var command = args[0];
  if(args.length > 1 && command == this.CommandId.ColumnMove) {
   if(args[args.length - 1])
    command = this.CommandId.UnGroup;
   if(args[args.length - 2])
    command = this.CommandId.Group;
  }
  return command;
 },
 GetFuncCallBackIndex: function(onCallBack) {
  var item = { date: new Date(), callback: onCallBack };
  for(var i = 0; i < this.funcCallbacks.length; i ++) {
   if(this.funcCallbacks[i] == null) {
    this.funcCallbacks[i] = item;
    return i;
   }
  }
  this.funcCallbacks.push(item);
  return this.funcCallbacks.length - 1;
 },
 GetFuncCallBack: function(index) {
  if(index < 0 || index >= this.funcCallbacks.length) return null;
  var result = this.funcCallbacks[index];
  this.funcCallbacks[index] = null;
  return result;
 },
 gridFuncCallBack: function(args, onCallBack) {
  var serializedArgs = this.SerializeCallbackArgs(args); 
  var callbackArgs = this.formatCallbackArg("FB", this.GetFuncCallBackIndex(onCallBack).toString()) +
   this.prepareCallbackArgs(serializedArgs, null);
  this.CreateCallback(callbackArgs, "FUNCTION");
 }, 
 prepareCallbackArgs: function(serializedArgs, rootTD) {
  var preparedArgs =
   this.formatCallbackArg("EV", this.GetEditorValues(rootTD)) +
   this.formatCallbackArg("SR", this.GetSelectedState()) +
   this.formatCallbackArg("KV", this.GetKeyValuesInput()) + 
   this.formatCallbackArg("FR", this.GetFocusedRowInput()) +
   this.formatCallbackArg("CR", this.GetColResizedInput()) +
   this.formatCallbackArg("CM", this.GetContextMenuInfo()) +
   this.formatCallbackArg("GB", serializedArgs);
  return preparedArgs;
 },
 formatCallbackArg: function(prefix, arg) {
  if(arg == null) return "";
  if(!_aspxIsExists(arg.length) && _aspxIsExists(arg.value)) {
   arg = arg.value;
  }
  if(arg == null || arg == "") return "";
  return prefix + "|" + arg.length + ';' + arg + ';';
 },
 OnCallback: function (result) {
  this.HideFilterControlPopup();
  var isFuncCallback = result.indexOf("FB|") == 0;
  this.afterCallbackRequired = !isFuncCallback; 
  if(isFuncCallback) {
   this.OnFunctionalCallback(result);
   return;
  }
  var helper = this.GetEndlessPagingHelper();
  if(result.indexOf("EP|") == 0 && helper){
   helper.OnCallback(result);
  } else{
   var rootTD = this.GetGridTD();
   if(rootTD)
    _aspxSetInnerHtml(rootTD, result);
  }
 },
 OnFunctionalCallback: function(result){
  this.PreventCallbackAnimation();
  var result = this.ParseFuncCallbackResult(result.substr(3));
  if(!result) return;
  if(this.IsHeaderFilterFuncCallback(result.callback))
   this.OnFuncCallback(result);
  else 
   window.setTimeout(function() { this.OnFuncCallback(result); }.aspxBind(this), 0);
 },
 OnCallbackFinalized: function() {
  if(this.afterCallbackRequired)
   this.OnAfterCallback();
 },
 IsHeaderFilterFuncCallback: function(callback) {
  return callback === this.onFilterPopupCallback;
 },
 ParseFuncCallbackResult: function(result) {
  var pos = result.indexOf("|");
  if(pos < 0) return;
  var index = parseInt(result.substr(0, pos), 10);
  var callbackItem = this.GetFuncCallBack(index);
  if(!callbackItem || !callbackItem.callback) return;
  result = result.substr(pos + 1);
  return { callback: callbackItem.callback, params: result };
 },
 OnFuncCallback: function(result) {
  if(result && result.callback)
   result.callback(eval(result.params));
 },
 OnCallbackError: function(result, data){
  this.showingError = result;
  this.errorData = data;
  if(this.GetGridTD())
   this.afterCallbackRequired = true;
 },
 ShowError: function(errorText, errorData) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && batchEditHelper.ShowError(errorText, errorData))
   return;
  var displayIn = this;
  var popupForm = this.GetPopupEditForm();
  if(popupForm) {
   displayIn = popupForm;
   if(!popupForm.IsVisible()) {
    popupForm.Show();
   }
  }
  var errorRow = this.GetEditingErrorRow(displayIn);
  if(!errorRow) {
   var editRow = this.GetEditingRow(displayIn);
   if(editRow) {
    errorRow = this.CreateEditingErrorRow();
    errorRow.id = editRow.id.replace("DXEditingRow", "DXEditingErrorRow");
    _aspxInsertElementAfter(errorRow, editRow);
   }
  }
  if(errorRow)
   errorRow.cells[errorRow.cells.length - 1].innerHTML = errorText;
  else
    alert(errorText);
 },
 CreateEditingErrorRow: function() {
  var row = this.GetStyleTable().rows[1].cloneNode(true);
  for(var i = 0; i < row.cells.length; i++) {
   var cell = row.cells[i];
   var colSpan = parseInt(_aspxGetAttribute(cell, "data-colSpan"));
   if(!isNaN(colSpan)) 
    cell.colSpan = colSpan;
  }
  return row;
 },
 OnBeforeCallbackOrPostBack: function() {
  this.HidePopupEditForm();
  ASPxClientGridView.SaveActiveElementSettings(this);
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.SaveControlDimensions(true);
 },
 OnBeforeCallback: function(command) {
  this.keyboardLock = true;
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper)
   endlessPagingHelper.OnBeforeCallback(command);
  this.ShowLoadingElements();
  this.SaveCallbackSettings();
  this.RemoveSelectStartHandler();
  var popup = this.GetHeaderFilterPopup();
  if(popup)
   popup.RemoveAllPopupElements();
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper && this.isVirtualScrolling)
   scrollHelper.ClearVirtualScrollTimer();
 },
 OnAfterCallback: function() {
  this.clickedMenuItem = null;
  var checkBoxCollectionReinitializeRequired = true; 
  if(this.showingError) {
   checkBoxCollectionReinitializeRequired = false;
   this.ShowError(this.showingError, this.errorData);
      this.showingError = null;
   this.errorData = null;
    }
  this.childrenCache = { };
  this.pendingCommands = [ ];
  this.lockFilter = true;
  try {
   this.EnsureRowKeys();
   this.headerMatrix && this.headerMatrix.Invalidate();
   this.SetHeadersClientEvents();
   this.RestoreCallbackSettings();
   this.AddSelectStartHandler();
   this.EnsureRowHotTrackItems();
   if(this.kbdHelper && !this.useEndlessPaging)
    this.kbdHelper.EnsureFocusedRowVisible();
  }
  finally {
   window.setTimeout(function() { this.lockFilter = false; }.aspxBind(this), 0); 
   this.keyboardLock = false;
  }
  if(this.checkBoxImageProperties && checkBoxCollectionReinitializeRequired){
   this.CreateInternalCheckBoxCollection();
   this.UpdateSelectAllCheckboxesState();
  }
  this.CheckPendingEvents();
  this.InitializeHeaderFilterPopup();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.SaveControlDimensions(true);
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper)
   endlessPagingHelper.OnAfterCallback();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.OnAfterCallback();
  this.CheckEndlessPagingLoadNextPage();
  this.PrepareEditorsToKeyboardNavigation();
  window.setTimeout(function() { this.SaveAutoFilterColumnEditorState(); }.aspxBind(this), 0);
  window.setTimeout(function() { this.EnsureVisibleRowFromServer(); }.aspxBind(this), 0);
 },
 SaveAutoFilterColumnEditorState: function() {
  for(var i = 0; i < this.columns.length; i++) {
   var columnIndex = this.columns[i].index;
   this.filterEditorState[columnIndex] = this.GetAutoFilterEditorValue(columnIndex);
  }
 },
 GetAutoFilterEditorValue: function(columnIndex) {
  var editor = this.GetAutoFilterEditor(columnIndex);
  var editorValue = "";
  if(editor && editor.GetMainElement())
   editorValue = editor.GetValueString();
  return {
   value: editorValue,
   filterCondition: this.filterRowConditions ? this.filterRowConditions[columnIndex] : ""
  };
 },
 ClearAutoFilterState: function() {
  this.filterEditorState = [];
 },
 SaveCallbackSettings: function() {
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null) {
   var custWindowElement = custWindow.GetWindowElement(-1);
   if(custWindowElement) {
    this.custwindowLeft = _aspxGetAbsoluteX(custWindowElement);
    this.custwindowTop = _aspxGetAbsoluteY(custWindowElement);
    this.custwindowVisible = custWindow.IsVisible();
   }
  } else {
   this.custwindowVisible = null;
  }
  var helper = this.GetFixedColumnsHelper();
  if(helper != null) helper.SaveCallbackSettings();  
 },
 RestoreCallbackSettings: function() {
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null && this.custwindowVisible != null) {
   if(this.custwindowVisible){
    custWindow.enableAnimation = false;
    custWindow.ShowAtPos(this.custwindowLeft, this.custwindowTop);
   }
  }
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.ResetStretchedColumnWidth();
  var fixedColumnsHelper = this.GetFixedColumnsHelper();
  if(fixedColumnsHelper != null)
   fixedColumnsHelper.RestoreCallbackSettings();
  this.UpdateScrollableControls();
  if(fixedColumnsHelper != null)
   fixedColumnsHelper.HideColumnsRelyOnScrollPosition();
  this.UpdateIndentCellWidths();
  if(resizingHelper)
   resizingHelper.ValidateColumnWidths();
  this.ApplyPostBackSyncData();
  this.ResetControlAdjustment(); 
  ASPxClientGridView.RestoreActiveElementSettings(this); 
 },
 HidePopupEditForm: function() {
  var popup = this.GetPopupEditForm();
  if(popup != null) {
   popup.Hide();
  }
 },
 OnPopupEditFormInit: function(popup) {
  if(this.HasHorzScroll() && this.GetVisibleRowsOnPage() > 0) {
   var popupHorzOffset = popup.GetPopupHorizontalOffset();
   popup.SetPopupHorizontalOffset(popupHorzOffset - this.GetPopupEditFormHorzOffsetCorrection(popup));
  }
  popup.Show();
 },
 GetPopupEditFormHorzOffsetCorrection: function(popup) {
  var scrollHelper = this.GetScrollHelper();
  if(!scrollHelper) return 0;
  var scrollDiv = scrollHelper.GetHorzScrollableControl();
  if(!scrollDiv)  return 0;
  var horzAlign = popup.GetHorizontalAlign();
  if(ASPxClientPopupUtils.IsRightSidesAlign(horzAlign) || ASPxClientPopupUtils.IsOutsideRightAlign(horzAlign))
   return scrollDiv.scrollWidth - scrollDiv.offsetWidth;
  if(ASPxClientPopupUtils.IsCenterAlign(horzAlign))
   return (scrollDiv.scrollWidth - scrollDiv.offsetWidth) / 2;
  return 0;
 },
 _isRowSelected: function(visibleIndex) {
  if(!this.GetDataRow(visibleIndex)) return false;
  var index = this._getRowIndexOnPage(visibleIndex);
  var selInput = this.GetSelectionInput();
  if(!selInput) return false;
  return this._isTrueInCheckList(selInput.value, index);
 },
 _isTrueInCheckList: function(checkList, index) {
  if(index < 0 ||  index >= checkList.length) return false;
  return checkList.charAt(index) == "T";
 },
 _getSelectedRowCount: function() {
  return this.selectedWithoutPageRowCount + this._getSelectedRowCountOnPage();
 },
 _getSelectedFilteredRowCount: function(){
  return this.filteredSelectedWithoutPageRowCount + this._getSelectedRowCountOnPage();
 },
 _getSelectedRowCountOnPage: function(){
  var selInput = this.GetSelectionInput();
  if(!selInput)
   return 0;
  var checkList = selInput.value;
  var selCount = 0;
  for(var i = 0; i < checkList.length; i++) {
   if(checkList.charAt(i) == "T") selCount ++;
  }
  return selCount;
 },
 _selectAllRowsOnPage: function(checked) {
  if(checked && this.allowSelectSingleRowOnly) {
   this.SelectRow(0, true);
   return;
  }
  var selInput = this.GetSelectionInput();
  if(!selInput) return;
  this._selectAllSelBtn(checked);
  var prevSelectedRowCount = 0;
  var isTrueInCheckList = false;
  for(var i = 0; i < this.pageRowCount; i ++) {
   isTrueInCheckList = this._isTrueInCheckList(selInput.value, i);
   if(isTrueInCheckList) prevSelectedRowCount++; 
   if(isTrueInCheckList != checked) {
    this.ChangeRowStyle(i + this.visibleStartIndex, checked ? 0 : 4);
   }
  }
  if (prevSelectedRowCount == 0 && !checked) return;
  var selValue = "";
  if(checked) {
   for(var i = 0; i < this.pageRowCount; i ++)
    selValue += this.IsDataRow(this.visibleStartIndex + i ) ? "T" : "F";
  }
  if(selValue != selInput.value) {
   this.userChangedSelection = true;
   if(selValue == "") selValue = "U";
   selInput.value = selValue;
  }
  this.DoSelectionChanged(-1, checked, true);
  this.UpdateSelectAllCheckboxesState();
 },
 DeleteGridRow: function(visibleIndex) {
  if(this.confirmDelete != "" && !confirm(this.confirmDelete)) return;
  this.DeleteRow(visibleIndex);
 },
 _selectAllSelBtn: function(checked, exceptInternalCheckBoxName) {
  if(this.checkBoxImageProperties) {
   for(var internalCheckBoxName in this.internalCheckBoxCollection.checkBoxes) {
    if(exceptInternalCheckBoxName !== internalCheckBoxName &&  this.internalCheckBoxCollection.checkBoxes[internalCheckBoxName].SetValue) 
     this.internalCheckBoxCollection.checkBoxes[internalCheckBoxName].SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
   }
  }
 },
 doRowMultiSelect: function(row, rowIndex, evt) {
  var ctrlKey = evt.ctrlKey || evt.metaKey,
   shiftKey = evt.shiftKey;
  if((ctrlKey || shiftKey) && (!__aspxIE || __aspxBrowserVersion > 8))
   _aspxClearSelection();
  if(this.allowSelectSingleRowOnly)
   shiftKey = false;
  if(!ctrlKey && !shiftKey) {
   this._selectAllRowsOnPage(false);
   this.SelectRow(rowIndex, true);
   this.lastMultiSelectIndex = rowIndex;
  } else {
   if(ctrlKey) {
    this.SelectRow(rowIndex, !this._isRowSelected(rowIndex));
    this.lastMultiSelectIndex = rowIndex;
   } else {
    var startIndex = rowIndex > this.lastMultiSelectIndex ? this.lastMultiSelectIndex + 1 : rowIndex;
    var endIndex = rowIndex > this.lastMultiSelectIndex ? rowIndex : this.lastMultiSelectIndex - 1;
    for(var i = this.visibleStartIndex; i < this.pageRowCount + this.visibleStartIndex; i ++) {
     if(i == this.lastMultiSelectIndex) 
      continue;
     this.SelectRow(i, i >= startIndex && i <= endIndex);
    }
   }
  }
  this.UpdatePostBackSyncInput();
 },
 AddSelectStartHandler: function() {   
  if(!this.allowSelectByRowClick || !__aspxIE || __aspxBrowserVersion > 8 )
   return;
  _aspxAttachEventToElement(this.GetMainTable(), "selectstart", ASPxClientGridView.SelectStartHandler);
 },
 RemoveSelectStartHandler: function() {
  if(!this.allowSelectByRowClick || !__aspxIE)
   return; 
  _aspxDetachEventFromElement(this.GetMainTable(), "selectstart", ASPxClientGridView.SelectStartHandler);
 },
 SelectRow: function(visibleIndex, checked, fromCheckBox) {
  if(!this.IsDataRow(visibleIndex) || visibleIndex < 0) return;
  if(this._isRowSelected(visibleIndex) == checked) return;
  if(_aspxIsExists(fromCheckBox)) fromCheckBox = false;
  var index = this._getRowIndexOnPage(visibleIndex);
  if(index < 0) return;
  if(checked && this.allowSelectSingleRowOnly)
   this._selectAllRowsOnPage(false);
  var selInput = this.GetSelectionInput();
  if(selInput) {
   this.userChangedSelection = true;
   var checkList = selInput.value;
   if(index >= checkList.length) {
    if(!checked) return;
    for(var i = checkList.length; i <= index; i ++)
     checkList += "F";
   }
   checkList = checkList.substr(0, index) + (checked ? "T" : "F") + checkList.substr(index + 1, checkList.length - index - 1);
   if(checkList.indexOf("T") < 0) checkList = "U";
   selInput.value = checkList;
  }
  var checkBox = this.GetDataRowSelBtn(visibleIndex);
  if(checkBox) {
   var internalCheckBox = this.internalCheckBoxCollection.Get(checkBox.id);
   internalCheckBox.SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
  }
  this.UpdateSelectAllCheckboxesState();
  this.ChangeRowStyle(visibleIndex, checked ? 0 : 4);
  this.DoSelectionChanged(visibleIndex, checked, false);
 },
 UpdateSelectAllCheckboxesState: function(){
  if(!this.selectAllSettings)
   return;
  for(var i = 0; i < this.selectAllSettings.length; i++){
   var columnSelectAllSettings = this.selectAllSettings[i];
   var selectAllButtonInput = this.GetSelectAllBtn(columnSelectAllSettings.index);
   if(selectAllButtonInput && !this.IsCheckBoxDisabled(selectAllButtonInput))
    this.UpdateSelectAllCheckboxStateCore(selectAllButtonInput, columnSelectAllSettings.mode, columnSelectAllSettings.selectText, columnSelectAllSettings.unselectText);
  }
 },
 UpdateSelectAllCheckboxStateCore: function(selectAllButtonInput, selectMode, selectTooltip, unselectTooltip){
  var value = ASPxClientCheckBoxInputKey.Indeterminate;
  var selectedRowCountOnPage = this.GetSelectedKeysOnPage().length;
  var considerSelectionOnPages = selectMode == 2 && this.selectAllBtnStateWithoutPage !== null;
  if(this.GetDataRowCountOnPage() == selectedRowCountOnPage && (!considerSelectionOnPages || this.selectAllBtnStateWithoutPage == ASPxClientCheckBoxInputKey.Checked))
   value = ASPxClientCheckBoxInputKey.Checked;
  else if(selectedRowCountOnPage == 0 && (!considerSelectionOnPages || this.selectAllBtnStateWithoutPage == ASPxClientCheckBoxInputKey.Unchecked))
   value = ASPxClientCheckBoxInputKey.Unchecked;
  var selectAllCheckBoxInst = this.internalCheckBoxCollection.Get(selectAllButtonInput.id);
  selectAllCheckBoxInst.SetValue(value);
  var selectAllMainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(selectAllButtonInput);
  selectAllMainElement.title = value === ASPxClientCheckBoxInputKey.Checked ? unselectTooltip : selectTooltip;
 },
 SetSelectAllButtonToolTip: function(tooltip){
  var selectAllBtnInput = this.GetSelectAllBtn();
  if(_aspxIsExists(selectAllBtnInput)){
   var mainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(selectAllBtnInput);
   mainElement.title = tooltip;
  }
 },
 GetDataRowCountOnPage: function(){
  var dataRowCount = 0;
  for(var i = 0; i < this.pageRowCount; i++){
   var index = i + this.visibleStartIndex;
   if(!this.IsGroupRow(index))
    dataRowCount++;
  }
  return dataRowCount;
 },
 ScheduleUserCommand: function(args, postponed, e) {
  if(!args || args.length == 0) 
   return;
  var commandName = args[0];
  var rowCommands = [ "CustomButton", "Select", "StartEdit", "Delete" ];
  if((this.useEndlessPaging || this.allowBatchEditing) && _aspxArrayIndexOf(rowCommands, commandName) > -1)
   args[args.length - 1] = this.FindParentRowVisibleIndex(_aspxGetEventSource(e), true);
  this.ScheduleCommand(args, postponed);
 },
 FindParentRowVisibleIndex: function(element, dataAndGroupOnly) {
  var regEx = this.GetRowVisibleIndexRegExp(dataAndGroupOnly);
  while(element) {
   if(element.tagName === "BODY" || element.id == this.name)
    return -1;
   var matches = regEx.exec(element.id);
   if(matches && matches.length == 3)
    return parseInt(matches[2]);
   element = element.parentNode;
  }
  return -1;
 },
 GetRowVisibleIndexRegExp: function(dataAndGroupOnly) {
  var idParts = [ this.DataRowID, this.GroupRowID + "(?:Exp)?" ];
  if(!dataAndGroupOnly) {
   idParts.push(this.PreviewRowID);
   idParts.push(this.DetailRowID);
  }
  return new RegExp("^(" + this.name + "_(?:" + idParts.join("|") + "))(-?\\d+)$");
 },
 ScheduleCommand: function(args, postponed) {
  if(postponed)
   this.pendingCommands.push(args);
  else 
   this.PerformScheduledCommand(args);
 },
 PerformScheduledCommand: function(args) {
  if(_aspxIsFunction(args)) {
   args(); 
   return;
  }
  if(args && args.length > 0) {
   var commandName = "UA_" + args[0];
   if(this[commandName])
    this[commandName].apply(this, args.slice(1));
  }
 },
 PerformPendingCommands: function() {
  var commandCount = this.pendingCommands.length;
  for(var i = 0; i < commandCount; i++)
   this.PerformScheduledCommand(this.pendingCommands.pop());
 },
 getRowByHtmlEvent: function(evt) {
  var row = this.getRowByHtmlEventCore(evt, this.DataRowID);
  if(!row)
   row = this.getRowByHtmlEventCore(evt, this.GroupRowID);
  return row;
 },
 getRowByHtmlEventCore: function(evt, partialID) {
  var row = _aspxGetParentByPartialId(_aspxGetEventSource(evt), partialID);
  if(row && row.id.indexOf(this.name) > -1)
   return row;
  return null;
 },
 NeedProcessTableClick: function(evt) {
  var headerTable = _aspxGetParentByPartialId(_aspxGetEventSource(evt), this.HeaderTableID);
  if(headerTable) {
   var headerTableID = headerTable.id;
   var gridID = headerTableID.substr(0, headerTableID.length - this.HeaderTableID.length - 1);
   return this.name == gridID;
  }
  var mainTable = _aspxGetParentByPartialId(_aspxGetEventSource(evt), this.MainTableID);
  if(mainTable) {
   var mainTableID = mainTable.id;
   var gridID = mainTableID.substr(0, mainTableID.length - this.MainTableID.length - 1);
   return this.name == gridID;
  }
  return false;
 },
 mainTableClick: function(evt) { this.mainTableClickCore(evt); },
 mainTableDblClick: function(evt) { 
  var row = this.getRowByHtmlEvent(evt);
  if(row) {
   var batchEditHelper = this.GetBatchEditHelper();
   if(batchEditHelper)
    batchEditHelper.ProcessTableClick(row, evt, true);
   this.RaiseRowDblClick(this.getRowIndex(row.id), evt); 
  }
 },
 mainTableClickCore: function(evt, fromCheckBox) {
  if(this.kbdHelper)
   this.kbdHelper.HandleClick(evt);
  var sendNotificationCallack = true;
  this.mainTableClickData.processing = true;
  try {
   this.ProcessTableClick(evt, fromCheckBox);
   var savedRequestCount = this.requestCount + this.postbackRequestCount;
   this.PerformPendingCommands();
   var currentRequestCount = this.requestCount + this.postbackRequestCount;
   sendNotificationCallack = currentRequestCount == savedRequestCount;
  } finally {
   if(sendNotificationCallack)
    if(this.mainTableClickData.focusChanged && !this.mainTableClickData.selectionChanged) {
     this.gridCallBack(["FOCUSEDROW"]);
    } else if(this.mainTableClickData.selectionChanged) {
     this.gridCallBack(["SELECTION"]);
    }
   this.mainTableClickData.processing = false;
   this.mainTableClickData.focusChanged = false;
   this.mainTableClickData.selectionChanged = false;
  }
 },
 ProcessTableClick: function(evt, fromCheckBox) {
  var source = _aspxGetEventSource(evt);
  var row = this.getRowByHtmlEvent(evt);
  if(row) {
   var rowIndex = this.getRowIndex(row.id);
   var isCommandColumnItem = this.IsCommandColumnItem(source);
   if(!isCommandColumnItem && !fromCheckBox) {
    var batchEditHelper = this.GetBatchEditHelper();
    if(batchEditHelper && batchEditHelper.ProcessTableClick(row, evt))
     return;
    if(this.RaiseRowClick(rowIndex, evt)) 
     return;
   }
   if(this.allowFocusedRow) {
    this.focusRow(row);
   }
   if(this.allowSelectByRowClick) {
    var isActionElement = source && source.tagName.match(/input|select|textarea|^a$/i);
    if(!isActionElement && !isCommandColumnItem && !fromCheckBox) {
     if(this.lookupBehavior){
      var checked = this.allowSelectSingleRowOnly || !this._isRowSelected(rowIndex);
      this.SelectRow(rowIndex, checked);
     } else
      this.doRowMultiSelect(row, rowIndex, evt);
    }
   } else {
    this.lastMultiSelectIndex = rowIndex;
   }
  }
 },
 IsCommandColumnItem: function(element) {
  if(!element)
   return false;
  if(_aspxElementHasCssClass(element, this.CommandColumnItemClassName))
   return true;
  if(element.tagName == "IMG" && element.parentNode.tagName == "A")
   return _aspxElementHasCssClass(element.parentNode, this.CommandColumnItemClassName);
  return false;
 },
 focusRow: function(row) {
  if(!row) return;
  var index = this.getRowIndex(row.id);
  this._setFocusedRowIndex(index);
 },
 _setFocusedRowIndex: function(visibleIndex) {
  if(visibleIndex < 0) 
   visibleIndex = -1;
  if(!this.allowFocusedRow || visibleIndex == this.focusedRowIndex) 
   return;
  var oldIndex = this.focusedRowIndex;
  this.focusedRowIndex = visibleIndex;
  this.ChangeFocusedRowStyle(oldIndex, false);
  this.ChangeFocusedRowStyle(this.focusedRowIndex, true);
  this._setFocusedRowInputValue();
  if(this.callbackOnFocusedRowChanged) {
   this.UpdatePostBackSyncInput(true);
   if(!this.mainTableClickData.processing) {
    this.gridCallBack(["FOCUSEDROW"]);
   } else {
    this.mainTableClickData.focusChanged = true;
   }
   return;
  }
  this.RaiseFocusedRowChanged();
 },
 ChangeFocusedRowStyle: function(visibleIndex, focused) {
  if(visibleIndex < 0) return;
  var rowStyle = -1;
  var row = this.GetRow(visibleIndex);
  if(focused && row)
   rowStyle = this._isGroupRow(row) ? 2 : 1;
  if(!focused)
   rowStyle = this._isRowSelected(visibleIndex) ? 0 : 4;
  if(rowStyle > -1)
   this.ChangeRowStyle(visibleIndex, rowStyle);
 },
 _setFocusedRowInputValue: function() {
  if(this.GetFocusedRowInput() != null) {
   this.GetFocusedRowInput().value = this.focusedRowIndex;
  }
 },
 _getFocusedRowIndex: function() {
  if(!this.allowFocusedRow) return -1;
  return this.focusedRowIndex;
 },
 getRowIndex: function(rowId) {   
  if(this.IsHeaderRowID(rowId))
   return -1;
  return this.tryGetNumberFromEndOfString(rowId).value;
 },
 tryGetNumberFromEndOfString: function(str) {
  var value = -1;
  var success = false;
  var n = str.length - 1;
  while(!isNaN(parseInt(str.substr(n), 10))) {
   value = parseInt(str.substr(n), 10);
   success = true;
   n--;
  }
  return { success: success, value: value };
 },
 GetSelectedState: function() {
  if(!this.userChangedSelection) return null;
  var input = this.GetSelectionInput();
  if(!input) return null;
  return input.value;
 },
 ChangeRowStyle: function(visibleIndex, rowStyle) {
  if(this._getFocusedRowIndex() == visibleIndex && rowStyle != 1 && rowStyle != 2) return;
  var row = this.GetRow(visibleIndex);
  if(!row) return;
  if(rowStyle == 0 && this._isGroupRow(row)) return; 
  var index = this._getRowIndexOnPage(visibleIndex);
  var styleRow = this._getStyleRow(index, rowStyle);
  if(!styleRow) return;
  row.className = styleRow.className;
  row.style.cssText = styleRow.style.cssText;
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && batchEditHelper.IsDeletedRow(this.GetRowKey(visibleIndex)))
   _aspxSetElementDisplay(row, false);
 },
 _getRowIndexOnPage: function(visibleIndex) { 
  return visibleIndex - this.visibleStartIndex; 
 },
 getColumnIndex: function(colId) {
  if(this.IsEmptyHeaderID(colId))
   return -1;
  var index = this.tryGetNumberFromEndOfString(colId).value;
  var postfix = "col" + index;
  if(colId.lastIndexOf(postfix) == colId.length - postfix.length)
   return index;
  return -1;
 },
 getColumnObject: function(colId) {
  var index = this.getColumnIndex(colId);
  return index > -1 ? this._getColumn(index) : null;
 },
 _getColumnIndexByColumnArgs: function(column) {
  column = this._getColumnObjectByArg(column);
  if(!column) return null;
  return column.index;
 },
 _getColumnObjectByArg: function(arg) {
  if(!_aspxIsExists(arg)) return null;
  if(typeof(arg) == "number") return this._getColumn(arg);
  if(_aspxIsExists(arg.index)) return arg;
  var column = this._getColumnById(arg);
  if(column) return column;
  return this._getColumnByField(arg);  
 },
 _getColumnsCount: function() { return this.columns.length; },
 _getColumn: function(index) { 
  if(index < 0 || index >= this.columns.length) return null;
  return this.columns[index];
 },
 _getColumnById: function(id) {
  if(!_aspxIsExists(id)) return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].id == id) return this.columns[i];
  }
  return null;
 },
 _getColumnByField: function(fieldName) {
  if(!_aspxIsExists(fieldName)) return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].fieldName == fieldName) return this.columns[i];
  }
  return null;
 },
 _getStyleRow: function(index, rowStyle) {
  var styleTable = this.GetStyleTable();
  if(!styleTable) return null;
  if(rowStyle < 4) return styleTable.rows[rowStyle + 2];
  return styleTable.rows[6 + index];
 },
 DoSelectionChanged: function(index, isSelected, isSelectAllOnPage){
  if(this.callbackOnSelectionChanged) {
   this.UpdatePostBackSyncInput(true);
   if(!this.mainTableClickData.processing) {
    this.gridCallBack(["SELECTION"]);
   } else {
    this.mainTableClickData.selectionChanged = true;
   }
   return;
  }
  this.RaiseSelectionChanged(index, isSelected, isSelectAllOnPage, false);
 },
 CommandCustomButton:function(id, index) {
  var processOnServer = true;
  if(!this.CustomButtonClick.IsEmpty()) {
   var e = new ASPxClientGridViewCustomButtonEventArgs(index, id);
   this.CustomButtonClick.FireEvent(this, e);
   processOnServer = e.processOnServer;
  }
  if(processOnServer)
   this.gridCallBack(["CUSTOMBUTTON", id, index]);
 },
 HeaderMouseDown: function(element, e){
  if(!_aspxGetIsLeftButtonPressed(e)) 
   return;
  var source = _aspxGetEventSource(e);
  if(_aspxElementCssClassContains(source, this.HeaderFilterButtonClassName))
   return;
  if(this.TryStartColumnResizing(e, element))
   return;
  var column = this._getColumnObjectByArg(this.getColumnIndex(element.id));
  var dragCanceled = this.RaiseColumnStartDragging(column);
  var canDrag = !dragCanceled && this.canDragColumn(element) && source.tagName != "IMG";
  if(!this.dragHelper)
   this.dragHelper = new ASPxClientGridViewDragHelper(this);
  var drag = this.dragHelper.CreateDrag(e, element, canDrag);
  if(!canDrag && (e.shiftKey || e.ctrlKey))
   drag.clearSelectionOnce = true;
  this.dragHelper.CreateTargets(drag, e);
 },
 TryStartColumnResizing: function(e, headerCell) {
  var helper = this.GetResizingHelper();
  if(!helper || !helper.CanStartResizing(e, headerCell))
   return false;
  var column = this.columns[helper.GetResizingColumnIndex(e, headerCell)];
  if(this.RaiseColumnResizing(column))
   return false;
  helper.StartResizing(column.index);
  return true;
 }, 
 OnParentRowMouseEnter: function(element) {
  if(this.GetParentRowsWindow() == null) return;
  if(this.GetParentRowsWindow().IsWindowVisible()) return;
  this.ParentRowsTimerId = _aspxSetTimeout("aspxGVParentRowsTimer(\""+this.name+"\", \"" + element.id + "\");", 500);
 },
 OnParentRowMouseLeave: function(evt) {
  _aspxClearTimer(this.ParentRowsTimerId);
  if(this.GetParentRowsWindow() == null) return;
  if(evt && evt.toElement) {
   if(_aspxGetParentByPartialId(evt.toElement, this.GetParentRowsWindow().name) != null)
     return;
  }
  this.HideParentRows();
 },
 ShowParentRows: function(element) {
  this.ParentRowsTimerId = null;
  if(this.GetParentRowsWindow() != null) {
   this.GetParentRowsWindow().ShowAtElement(element);
  }
 },
 onFilterPopupCallback: function(values) {
  var grid = aspxGetControlCollection().Get(values[0]);
  if(grid != null)
   grid.GetHeaderFilterPopup().SetContentHtml(values[1], grid.enableCallbackAnimation);
 },
 HideParentRows: function() {
  this.ParentRowsTimerId = null;
  if(this.GetParentRowsWindow() != null) {
   this.GetParentRowsWindow().Hide();
  }
 }, 
 canSortByColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowSort;
 },
 canGroupByColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowGroup;
 },
 canDragColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowDrag;  
 },
 doPagerOnClick: function(id) {
  if(!_aspxIsExists(id)) return;
  this.AssignSlideAnimationDirectionByPagerArgument(id, this.pageIndex);
  if(__aspxIE && this.kbdHelper)
   this.kbdHelper.Focus();
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.ResetScrollTop();
  this.gridCallBack([this.CommandId.PagerOnClick, id]);
 },
 CanHandleGesture: function(evt) {
  var source = _aspxGetEventSource(evt);
  var table = this.GetMainTable();
  if(!table) return false;
  if(_aspxGetIsParent(table, source))
   return !this.IsHeaderChild(source);
  if(table.parentNode.tagName == "DIV" && _aspxGetIsParent(table.parentNode, source))
   return __aspxTouchUI || evt.offsetX < table.parentNode.clientWidth;
  return false;
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && 
   (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
 },
 AllowExecuteGesture: function(value) {
  return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
 },
 ExecuteGesture: function(value, count) {
  this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function(arg) { this.doPagerOnClick(arg); }.aspxBind(this));
 },
 OnColumnFilterInputChanged: function(editor) {
  this.ApplyColumnAutoFilterCore(editor);
 },
 OnColumnFilterInputSpecKeyPress: function(editor, e) {
  if(e.htmlEvent)
   e = e.htmlEvent;
  if(e.keyCode == ASPxKey.Tab)
   return true;
  if(e.keyCode == ASPxKey.Enter) {
   _aspxPreventEventAndBubble(e);
   editor.Validate();
   if(this.allowMultiColumnAutoFilter)
    this.ApplyMultiColumnAutoFilter(editor);
   else
    this.ApplyColumnAutoFilterCore(editor);
   return true;
  }
  if(e.keyCode == ASPxKey.Delete && e.ctrlKey) {
   _aspxPreventEventAndBubble(e);
   editor.SetValue(null);
   if(!this.allowMultiColumnAutoFilter)
    this.ApplyColumnAutoFilterCore(editor);
   return true;
  }
  return false;
 },
 OnColumnFilterInputKeyPress: function(editor, e) {
  if(this.OnColumnFilterInputSpecKeyPress(editor, e))
   return;
  if(e.htmlEvent) e = e.htmlEvent;
  this.ClearAutoFilterInputTimer();
  if(editor != this.FilterKeyPressEditor)
   this.filterKeyPressInputValue = editor.GetValueString();
  this.FilterKeyPressEditor = editor;
  this.filterKeyPressTimerId = _aspxSetTimeout("aspxGVTimer(\"" + this.name + "\");", this.autoFilterDelay);
 },
 ClearAutoFilterInputTimer: function() {
  this.filterKeyPressTimerId = _aspxClearTimer(this.filterKeyPressTimerId);
 },
 GetAutoFilterEditorInputElement: function(editor) {
  if(document.activeElement) return document.activeElement;
  if(editor.GetInputElement) return editor.GetInputElement();
  return null;
 },
 OnFilterKeyPressTick: function() {
  if(this.FilterKeyPressEditor) {
   this.ApplyColumnAutoFilterCore(this.FilterKeyPressEditor);
  }
 },
 ApplyColumnAutoFilterCore: function(editor) {
  if(this.lockFilter) return;
  this.ClearAutoFilterInputTimer();
  if(this.FilterKeyPressEditor && editor == this.FilterKeyPressEditor) {
   if(this.FilterKeyPressEditor.GetValueString() == this.filterKeyPressInputValue) return;
  }
  var column = this.getColumnIndex(editor.name);
  if(column < 0) return;
  this.SaveAutoFilterActiveElement(editor);
  this.AutoFilterByColumn(column, editor.GetValueString());
 },
 ApplyMultiColumnAutoFilter: function(editor) {
  if(this.lockFilter) return;
  this.SaveAutoFilterActiveElement(editor);
  var args = [];
  var modifiedValues = this.GetModifiedAutoFilterValues();
  for(var columnIndex in modifiedValues) {
   args.push(columnIndex);
   args.push(modifiedValues[columnIndex].value);
   args.push(modifiedValues[columnIndex].filterCondition);
  }
  if(args.length > 0)
   this.gridCallBack([this.CommandId.ApplyMultiColumnFilter].concat(args));
 },
 SaveAutoFilterActiveElement: function(editor) {
  if(!editor)
   return;
  if(this.getColumnIndex(editor.name) >= 0)
   this.activeElement = this.GetAutoFilterEditorInputElement(editor);
 },
 GetModifiedAutoFilterValues: function() {
  var result = {};
  for(var i = 0; i < this.columns.length; ++i) {
   var columnIndex = this.columns[i].index;
   var editorState = this.GetAutoFilterEditorValue(columnIndex);
   var chachedEditorState = this.filterEditorState[columnIndex];
   if(chachedEditorState.value !== editorState.value || chachedEditorState.filterCondition !== editorState.filterCondition) {
    result[columnIndex] = {
     value: editorState.value != null ? editorState.value : "",
     filterCondition: editorState.filterCondition
    }
   }
  }
  return result;
 },
 FilterRowMenuButtonClick: function(columnIndex, element) {
  var menu = this.GetFilterRowMenu();
  if(!menu) return;
  var column = this._getColumn(columnIndex);
  if(!column) return;
  for(var i = menu.GetItemCount() - 1; i >= 0; i--) {
   var item = menu.GetItem(i);
   item.SetChecked(item.name.substr(0, item.name.indexOf("|")) == this.filterRowConditions[columnIndex]);
   item.SetVisible(this.GetFilterRowMenuItemVisible(item, column));
  }
  menu.ShowAtElement(element);
  this.filterRowMenuColumnIndex = columnIndex;
 },
 GetFilterRowMenuItemVisible: function(item, column) {
  if(column.filterRowTypeKind) {
   var visible = item.name.indexOf(column.filterRowTypeKind) > -1;
   if(!visible && column.showFilterMenuLikeItem)
    return item.name.indexOf("L") > -1;
   return visible;
  }
  return false;
 },
 FilterRowMenuItemClick: function(item) {
  var itemName = item.name.substr(0, item.name.indexOf("|"));
  if(this.allowMultiColumnAutoFilter) {
   this.filterRowConditions[this.filterRowMenuColumnIndex] = parseInt(itemName);
  } else {
   var args = [this.filterRowMenuColumnIndex, itemName];
   this.gridCallBack(["FILTERROWMENU"].concat(args));
  }
 },
 ShowLoadingPanel: function() {
  var gridMainCell = this.GetGridTD();
  if(!gridMainCell)
   return;
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom()) {
   var container = this.GetEndlessPagingLPContainer();
   _aspxSetElementDisplay(container, true);
   this.CreateLoadingPanelWithoutBordersInsideContainer(container);
   return;
  }
  var lpContainer = this.GetLoadingPanelContainer();
  if(lpContainer)
   this.CreateLoadingPanelInline(lpContainer);
  else
   this.CreateLoadingPanelWithAbsolutePosition(gridMainCell, this.GetLoadingPanelOffsetElement(gridMainCell));
 },
 ShowLoadingDiv: function () {
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom())
   return;
  this.CreateLoadingDiv(this.GetGridTD());
 },
 GetCallbackAnimationElement: function() {
  var table = this.GetMainTable();
  if(table && table.parentNode && table.parentNode.tagName == "DIV")
   return table.parentNode;
  return table;
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return this.IsHeaderChild(element);
 },
 IsHeaderChild: function(source) {
  var mainElement = this.GetMainElement();
  if(!mainElement) 
   return false;
  if(!_aspxGetIsParent(mainElement, source))
   return false;
  var headerRowCount = this.GetHeaderMatrix().GetRowCount();
  for(var i = 0; i < headerRowCount; i++) {
   if(_aspxGetIsParent(this.GetHeaderRow(i), source))
    return true;
  }
  return false;
 },
 _updateEdit: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && !batchEditHelper.CanUpdate())
   return;
  if(!batchEditHelper && !this._validateEditors())
   return;
  if(batchEditHelper)
   batchEditHelper.OnUpdate();
  this.gridCallBack(["UPDATEEDIT"]);
 },
 _validateEditors: function() {
  var editors = this._getEditors();
  var isValid = true;
  if(editors.length > 0)
   isValid &= this._validate(editors);
  if(window.ASPxClientEdit)
   isValid &= ASPxClientEdit.ValidateEditorsInContainer(this.GetEditFormTable(), this.name);
  return isValid;
 },
 _validate: function(list) {
  var isValid = true;
  var firstInvalid = null;
  var edit;
  for(var i = 0; i < list.length; i ++) {
   edit = list[i];
   edit.Validate();
   isValid = edit.GetIsValid() && isValid;
   if(firstInvalid == null && edit.setFocusOnError && !edit.GetIsValid())
    firstInvalid = edit;
  }
  if (firstInvalid != null)
   firstInvalid.Focus();
  return isValid;
 },
 _getEditors: function() {
  var list = [ ];
  for(var i = 0; i < this.editorIDList.length; i++) {
   var editor = aspxGetControlCollection().Get(this.editorIDList[i]);
   if(editor && editor.enabled && editor.GetMainElement && _aspxIsExistsElement(editor.GetMainElement())) {
    if(!editor.Validate) continue; 
    list.push(editor);
   }
  }
  return list;
 },
 GetEditorValues: function() {
  if(this.allowBatchEditing) return null;
  var list = this._getEditors();
  if(list.length == 0) return null;
  var res = list.length + ";";
  for(var i = 0; i < list.length; i ++) {
   res += this.GetEditorValue(list[i]);
  }
  return res;
 },
 GetEditorValue: function(editor) {
  var value = editor.GetValueString();
  var valueLength = -1;
  if(!_aspxIsExists(value)) {
   value = "";
  } else {
   value = value.toString();
   valueLength = value.length;
  }
  return this.GetEditorIndex(editor.name) + "," + valueLength + "," + value + ";";
 },
 GetEditorIndex: function(editorId) {
  var i = editorId.lastIndexOf(this.GetEditorPrefix());
  if(i < 0) return -1;
  var result = editorId.substr(i + this.GetEditorPrefix().length);
  i = result.indexOf('_'); 
  return i > 0
   ? result.substr(0, i)
   : result;
 },
 GetBatchEditHelper: function() {
  if(!this.allowBatchEditing) return null;
  if(!this.batchEditHelper)
   this.batchEditHelper = this.CreateBatchEditHelper();
  return this.batchEditHelper;
 },
 CreateBatchEditHelper: function(){
  return new ASPxClientGridViewBatchEditHelper(this);
 },
 GetTableHelper: function() {
  if(!this.tableHelper && typeof(ASPxClientGridViewTableHelper) != "undefined")
   this.tableHelper = new ASPxClientGridViewTableHelper(this, this.MainTableID, this.HeaderTableID, this.FooterTableID, this.horzScroll, this.vertScroll);
  return this.tableHelper;
 },
 GetScrollHelper: function() {
  if(!this.HasScrolling()) return null;
  if(!this.scrollableHelper)
   this.scrollableHelper = new ASPxClientGridViewTableScrollHelper(this.GetTableHelper());
  return this.scrollableHelper;
 },
 GetFixedColumnsHelper: function() {
  if(!this.GetFixedColumnsDiv()) return null;
  if(!this.fixedColumnsHelper)
   this.fixedColumnsHelper = new ASPxClientTableFixedColumnsHelper(this.GetTableHelper(), this.FixedColumnsDivID, this.FixedColumnsContentDivID, this.fixedColumnCount);
  return this.fixedColumnsHelper;
 },
 GetResizingHelper: function() {
  if(!this.AllowResizing()) return null;
  if(!this.resizingHelper)
   this.resizingHelper = new ASPxClientGridViewTableResizingHelper(this.GetTableHelper());
  return this.resizingHelper;
 },
 GetEndlessPagingHelper: function() {
  if(!this.useEndlessPaging) return null;
  if(!this.endlessPagingHelper)
   this.endlessPagingHelper = new ASPxClientGridViewEndlessPagingHelper(this);
  return this.endlessPagingHelper;
 },
 IsLastCallbackProcessedAsEndless: function() {
  var helper = this.GetEndlessPagingHelper();
  return helper && helper.endlessCallbackComplete;
 },
 GetHeaderMatrix: function() {
  if(!this.headerMatrix)
   this.headerMatrix = new ASPxClientGridViewHeaderMatrix(this);
  return this.headerMatrix;
 },
 UpdateScrollableControls: function() {
  var helper = this.GetScrollHelper();
  if(helper)
   helper.Update();
 },
 ValidateColumnWidths: function() {
  var helper = this.GetResizingHelper();
  if(helper)
   helper.ValidateColumnWidths();
 },
 SetHeadersClientEvents: function() {
  if(!this.AllowResizing())
   return;
  var helper = this.GetResizingHelper();
  var attachMouseMove = function(headerCell) { 
   _aspxAttachEventToElement(headerCell, "mousemove", function(e) { helper.UpdateCursor(e, headerCell); });
  };
  for(var i = 0; i < this.columns.length; i++) {
   var header = this.GetHeader(this.columns[i].index);
   if(header) 
    attachMouseMove(header);
  }
 },
 OnBrowserWindowResize: function(e) {
  if(this.AllowResizing() && !this.HasScrolling())
   this.GetResizingHelper().ValidateColumnWidths();
  this.AdjustControl();
 },
 UpdatePostBackSyncInput: function(isChangedNotification) {
  var input = this.GetPostBackSyncInput();
  if(!input) return;
  var selectedIndex = isChangedNotification ? -1 : this.lastMultiSelectIndex; 
  ASPxSimpleHiddenField.Set("SI", selectedIndex, input);
 },
 ApplyPostBackSyncData: function() {
  var savedState = ASPxSimpleHiddenField.Get("SI", this.GetPostBackSyncInput());
  if(savedState && savedState.length > 0)
   this.lastMultiSelectIndex = Number(savedState);
 },
 EnsureVisibleRowFromServer: function() {
  if(this.scrollToRowIndex < 0) return;
  this.MakeRowVisible(this.scrollToRowIndex);
  this.scrollToRowIndex = -1;
 },
 EnsureRowHotTrackItems: function() {
  if(this.rowHotTrackStyle == null) return;
  var list = [ ];
  for(var i = 0; i < this.pageRowCount; i++) {
   var index = i + this.visibleStartIndex;
   if(this.rowHotTrackItemsBag[index]) continue;
   list.push(this.DataRowID + index);
   this.rowHotTrackItemsBag[index] = true;
  }
  if(list.length > 0) {
   aspxAddHoverItems(this.name, [
    [ 
     [this.rowHotTrackStyle[0]], 
     [this.rowHotTrackStyle[1]], 
     list
    ]
   ]);
  }
 },
 UpdateIndentCellWidths: function() {
  if(this.indentColumnCount <= 0) 
   return;
  if(this.HasScrolling() || this.AllowResizing()) 
   this.GetTableHelper().UpdateIndentCellWidths();
 },
 OnContextMenuClick: function(e) {
  var args = this.GetContextMenuArgs(e);
  if(!_aspxIsExists(args) && !this.HasAnyContextMenu())
   return true;
  var menu = this.GetPreparedContextMenu(args);
  var showBrowserMenu = this.RaiseContextMenu(args.objectType, args.index, e, menu);
  if(menu && !showBrowserMenu) {
   menu.ShowInternal(e);
   return false;
  }
  return showBrowserMenu;
 },
 HasAnyContextMenu: function() {
  return this.GetGroupPanelContextMenu() || this.GetColumnContextMenu() || this.GetRowContextMenu() || this.GetFooterContextMenu();
 },
 GetPreparedContextMenu: function(args) { 
  var menuName = this.name + "_DXContextMenu_";
  var menu = null;
  switch(args.objectType) {
   case "grouppanel":
    menu = this.GetGroupPanelContextMenu();
    break;
   case "header":
   case "emptyheader":
    menu = this.GetColumnContextMenu();
    break;
   case "row":
   case "grouprow":
   case "emptyrow":
    menu = this.GetRowContextMenu();
    break;
   case "footer":
    menu = this.GetFooterContextMenu();
    break;
  }
  if(menu)
   this.ActivateContextMenuItems(menu, args);
  return menu;
 },
 GetContextMenuArgs: function(e) {
  var objectTypes = { };
  objectTypes[this.name + "_" + "grouppanel"]        = "grouppanel";
  objectTypes[this.name + this.HeaderRowID]          = "emptyheader";
  objectTypes[this.name + "_" + "col"]         = "header";
  objectTypes[this.name + this.CustomizationWindowSuffix + "_" + "col"]   = "header";
  objectTypes[this.name + "_" + "groupcol"]          = "header";
  objectTypes[this.name + "_" + this.DataRowID]         = "row";
  objectTypes[this.name + "_" + this.DetailRowID]       = "row";
  objectTypes[this.name + "_" + this.EmptyDataRowID]       = "emptyrow";
  objectTypes[this.name + "_" + this.GroupRowID]        = "grouprow";
  objectTypes[this.name + "_" + this.GroupRowID + "Exp"]      = "grouprow";
  objectTypes[this.name + "_" + this.FooterRowID]       = "footer";
  objectTypes[this.name + "_" + this.FilterRowID]       = "filterrow";
  var src = _aspxGetEventSource(e);
  var element = src;
  while(element && element.tagName !== "BODY") {
   var id = element.id;
   element = element.parentNode;
   if(!id) continue;
   var indexInfo = this.tryGetNumberFromEndOfString(id);
   var index = indexInfo.success ? indexInfo.value : "";
   for(var partialID in objectTypes) {
    if(id == partialID + index) {
     var type = objectTypes[partialID];
     if(type == "footer") {
      index = this.GetFooterCellIndex(src);
      if(!_aspxIsExists(index))
       return;
     } else if(type == "emptyheader" || type == "grouppanel" || type == "emptyrow") {
      index = this.EmptyElementIndex;
     }
     return { objectType: type, index: index };
    }
   }
  }
 },
 GetFooterCellIndex: function(element) {
  var footerRowName = this.name + "_" + this.FooterRowID;
  while(element.parentNode.id !== footerRowName) {
   if(element.tagName == "BODY")
    return -1;
   element = element.parentElement;
  }
  var matrix = this.GetHeaderMatrix();
  var hasIndent = this.indentColumnCount > 0 ? 1 : 0;
  var leafIndex = element.cellIndex - hasIndent; 
  return matrix.GetLeafIndices()[leafIndex];
 },
 ActivateContextMenuItems: function(menu, args) {
  menu.elementInfo = args;
  this.SyncMenuItemsInfoSettings(menu, args.index, menu.cpItemsInfo);
 },
 SyncMenuItemsInfoSettings: function(menu, groupElementIndex, itemsInfo) {
  for(var i = 0; i < menu.GetItemCount() ; ++i) {
   var item = menu.GetItem(i);
   var itemInfo = itemsInfo[item.indexPath];
   var visible = false, enabled = false, checked = false;
   visible = this.GetItemServerState(itemInfo[0], groupElementIndex);
   enabled = this.GetItemServerState(itemInfo[1], groupElementIndex);
   checked = this.GetItemServerState(itemInfo[2], groupElementIndex);
   if(item.name === this.ContextMenuItems.ShowCustomizationWindow)
    checked = this.IsCustomizationWindowVisible();
   item.SetVisible(visible);
   item.SetEnabled(enabled);
   item.SetChecked(checked);
   if(visible && enabled && !checked)
    this.SyncMenuItemsInfoSettings(item, groupElementIndex, itemsInfo);
  }
 },
 GetContextMenuItemChecked: function(item) {
  var itemInfo = item.menu.cpItemsInfo[item.indexPath];
  var elementIndex = item.menu.elementInfo.index;
  return this.GetItemServerState(itemInfo[2], elementIndex);
 },
 GetItemServerState: function(itemInfo,
  groupElementIndex) {
  var saveVisible = !!itemInfo[0];
  var indices = itemInfo.length === 1 ? [ ] : itemInfo[1];
  return _aspxArrayIndexOf(indices, groupElementIndex) > -1 ? saveVisible : !saveVisible;
 },
 OnContextMenuItemClick: function(e) {
  var elementInfo = e.item.menu.elementInfo;
  var itemsInfo = e.item.menu.cpItemsInfo;
  this.clickedMenuItem = e.item;
  if(this.RaiseContextMenuItemClick(e, elementInfo))
   return true;
  switch(e.item.name) {
   case this.ContextMenuItems.FullExpand:
    this.ExpandAll();
    break;
   case this.ContextMenuItems.FullCollapse:
    this.CollapseAll();
    break;
   case this.ContextMenuItems.SortAscending:
    this.SortBy(elementInfo.index, "ASC", false);
    break;
   case this.ContextMenuItems.SortDescending:
    this.SortBy(elementInfo.index, "DSC", false);
    break;
   case this.ContextMenuItems.ClearSorting:
    this.SortBy(elementInfo.index, "NONE", false);
    break;
   case this.ContextMenuItems.ClearGrouping:
    this.ContextMenuClearGrouping();
    break;
   case this.ContextMenuItems.ShowFilterBuilder:
    this.ShowFilterControl();
    break;
   case this.ContextMenuItems.ShowFilterRow:
    this.ContextMenuShowFilterRow(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.ClearFilter:
    this.AutoFilterByColumn(this.GetColumn(elementInfo.index));
    break;
   case this.ContextMenuItems.ShowFilterRowMenu:
    this.ContextMenuShowFilterRowMenu(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.GroupByColumn:
    this.GroupBy(elementInfo.index);
    break;
   case this.ContextMenuItems.UngroupColumn:
    this.UnGroup(elementInfo.index);
    break;
   case this.ContextMenuItems.ShowGroupPanel:
    this.ContextMenuShowGroupPanel(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.ShowCustomizationWindow:
    if(!this.IsCustomizationWindowVisible())
     this.ShowCustomizationWindow();
    else
     this.HideCustomizationWindow();
    break;
   case this.ContextMenuItems.ShowFooter:
    this.ContextMenuShowFooter(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.ExpandRow:
    this.ExpandRow(elementInfo.index);
    break;
   case this.ContextMenuItems.CollapseRow:
    this.CollapseRow(elementInfo.index);
    break;
   case this.ContextMenuItems.ExpandDetailRow:
    this.ExpandDetailRow(elementInfo.index);
    break;
   case this.ContextMenuItems.CollapseDetailRow:
    this.CollapseDetailRow(elementInfo.index);
    break;
   case this.ContextMenuItems.NewRow:
    this.AddNewRow();
    break;
   case this.ContextMenuItems.EditRow:
    this.StartEditRow(elementInfo.index);
    break;
   case this.ContextMenuItems.DeleteRow:
    this.DeleteGridRow(elementInfo.index);
    break;
   case this.ContextMenuItems.Refresh:
    this.Refresh();
    break;
   case this.ContextMenuItems.HideColumn:
    var groupped = _aspxIsExists(this.GetHeader(elementInfo.index, true));
    this.MoveColumn(elementInfo.index, -1, false, false, groupped);
    break;
   case this.ContextMenuItems.ShowColumn:
    this.MoveColumn(elementInfo.index, elementInfo.index);
    break;
   case this.ContextMenuItems.SummarySum:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 0);
    break;
   case this.ContextMenuItems.SummaryMin:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 1);
    break;
   case this.ContextMenuItems.SummaryMax:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 2);
    break;
   case this.ContextMenuItems.SummaryCount:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 3);
    break;
   case this.ContextMenuItems.SummaryAverage:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 4);
    break;
  }
 },
 RaiseContextMenuItemClick: function(e, itemInfo) {
  if(this.ContextMenuItemClick.IsEmpty())
   return false;
  var args = new ASPxClientGridViewContextMenuItemClickEventArgs(e.item, itemInfo.objectType, itemInfo.index);
  this.ContextMenuItemClick.FireEvent(this, args);
  if(!args.handled && args.processOnServer) {
   this.ProcessCustomContextMenuItemClick(e.item, args.usePostBack);
   return true;
  }
  return args.handled;
 },
 GetContextMenuTypeString: function(menu) {
  switch(menu.cpType) {
   case 0:
    return "GroupPanel";
   case 1:
    return "Column";
   case 2:
    return "Row";
   case 3:
    return "Footer";
  }
  return "";
 },
 ProcessCustomContextMenuItemClick: function(item, usePostBack) {
  if(usePostBack) {
   this.clickedMenuItem = null;
   var menu = item.menu;
   this.gridPostBack([this.CommandId.ContextMenu, "ItemClick", menu.cpType, item.indexPath, menu.elementInfo.index]);
  } else {
   this.gridCallBack("");
  }
 },
 ContextMenuShowGroupPanel: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowGroupPanel", show ? 1 : 0]);
 },
 ContextMenuShowFilterRow: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowFilterRow", show ? 1 : 0]);
 },
 ContextMenuShowFilterRowMenu: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowFilterRowMenu", show ? 1 : 0]);
 },
 ContextMenuShowFooter: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowFooter", show ? 1 : 0]);
 },
 ContextMenuClearGrouping: function() {
  this.gridCallBack([this.CommandId.ContextMenu, "ClearGrouping"]);
 },
 ContextMenuSetSummary: function(item, index, typeSummary) {
  var clearSummary = this.GetContextMenuItemChecked(item) ? 1 : 0;
  this.gridCallBack([this.CommandId.ContextMenu, "SetSummary", index, typeSummary, clearSummary]);
 }, 
 ContextMenuClearSummary: function(index, typeSummary) {
  this.gridCallBack([this.CommandId.ContextMenu, "ClearSummary", index]);
 },
 Focus: function() {
  if(this.kbdHelper)
   this.kbdHelper.Focus();
 },
 PerformCallback: function(args){
  if(!_aspxIsExists(args)) args = "";
  this.gridCallBack([this.CommandId.CustomCallback, args]);
 },
 GetValuesOnCustomCallback: function(args, onCallBack) {
  this.gridFuncCallBack([this.CommandId.CustomValues, args], onCallBack);
 },
 GotoPage: function(pageIndex){
  if(this.useEndlessPaging)
   return;
  this.gridCallBack([this.CommandId.GotoPage, pageIndex]);
 },
 GetPageIndex: function(){
  return this.pageIndex;
 },
 GetPageCount: function(){
  return this.pageCount;
 },
 NextPage: function(){
  this.gridCallBack([this.CommandId.NextPage]);
 },
 PrevPage: function(focusBottomRow){
  if(this.useEndlessPaging)
   return;
  this.gridCallBack([this.CommandId.PreviousPage, focusBottomRow ? "T" : "F"]);
 },
 UnGroup: function(column){
  column = this._getColumnIndexByColumnArgs(column);
  this.GroupBy(column, -1);
 },
 ExpandAll: function(){
  this.gridCallBack([this.CommandId.ExpandAll]);
 },
 CollapseAll: function(){
  this.gridCallBack([this.CommandId.CollapseAll]);
 },
 ExpandAllDetailRows: function(){
  this.gridCallBack([this.CommandId.ShowAllDetail]);
 },
 CollapseAllDetailRows: function(){
  this.gridCallBack([this.CommandId.HideAllDetail]);
 },
 ExpandRow: function(visibleIndex, recursive){
  if(this.RaiseRowExpanding(visibleIndex)) return;
  recursive = !!recursive;
  this.gridCallBack([this.CommandId.ExpandRow, visibleIndex, recursive]);
 },
 CollapseRow: function(visibleIndex, recursive){
  if(this.RaiseRowCollapsing(visibleIndex)) return;
  recursive = !!recursive;
  this.gridCallBack([this.CommandId.CollapseRow, visibleIndex, recursive]);
 },
 MakeRowVisible: function(visibleIndex) {
  if(!this.HasVertScroll()) return;
  var row = this.GetRow(visibleIndex);
  if(row == null && visibleIndex >= this.visibleStartIndex 
   && visibleIndex < this.visibleStartIndex + this.pageRowCount) {
   row = this.GetEditingRow(this);
  }
  if(row == null) return;
  this.GetScrollHelper().MakeRowVisible(row);
 },
 ExpandDetailRow: function(visibleIndex){
  var key = this.GetRowKey(visibleIndex);
  if(key == null) return;
  if(this.RaiseDetailRowExpanding(visibleIndex)) return;
  this.gridCallBack([this.CommandId.ShowDetailRow, key]);
 },
 CollapseDetailRow: function(visibleIndex){
  var key = this.GetRowKey(visibleIndex);
  if(key == null) return;
  if(this.RaiseDetailRowCollapsing(visibleIndex)) return;
  this.gridCallBack([this.CommandId.HideDetailRow, key]);
 },
 GetRowKey: function(visibleIndex) {
  var arrayIndex = visibleIndex - this.visibleStartIndex;
  if(arrayIndex < 0 || arrayIndex > this.keys.length - 1) 
   return null;
  var key = this.keys[arrayIndex];
  if(key == "/^DXN")
   key = null;
  return key;
 },   
 StartEditRow: function(visibleIndex) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.StartEditRow(visibleIndex);
   return;
  }
  var key = this.GetRowKey(visibleIndex);
  if(key != null)
   this.StartEditRowByKey(key);
 },
 StartEditRowByKey: function(key) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.StartEditRowByKey(key); 
   return;
  }
  this.gridCallBack([this.CommandId.StartEdit, key]);
 },
 IsEditing: function() {
  return this.editState > 0;
 },
 IsNewRowEditing: function() {
  return this.editState > 1;
 },
 IsNewRowAtBottom: function() {
  return this.editState == 3;
 },
 UpdateEdit: function(){
  this._updateEdit();
 },
 CancelEdit: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.CancelEdit();
   return;
  }
  this.gridCallBack([this.CommandId.CancelEdit]);
 },
 AddNewRow: function(){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.AddNewRow();
   return;
  }
  this.gridCallBack([this.CommandId.AddNewRow]);
 },
 DeleteRow: function(visibleIndex){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.DeleteRow(visibleIndex);
   return;
  }
  var key = this.GetRowKey(visibleIndex);
  if(key != null)
   this.DeleteRowByKey(key);
 },
 DeleteRowByKey: function(key) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.DeleteRowByKey(key);
   return;
  }
  this.gridCallBack([this.CommandId.DeleteRow, key]);
 },
 Refresh: function(){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.CancelEdit();
  this.gridCallBack([this.CommandId.Refresh]);
 },
 ApplyFilter: function(expression){
  expression = expression || "";
  this.gridCallBack([this.CommandId.ApplyFilter, expression]);
 },
 ClearFilter: function () {
  this.ClearAutoFilterState();
  this.ApplyFilter();
 },
 GetAutoFilterEditor: function(column) { 
  var index = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(index)) return null;
  return aspxGetControlCollection().Get(this.name + "_DXFREditorcol" + index);
 },
 AutoFilterByColumn: function(column, val){
  var index = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(index)) return;
  if(!_aspxIsExists(val)) val = "";  
  this.gridCallBack([this.CommandId.ApplyColumnFilter, index, val]);
 },
 ApplyHeaderFilterByColumn: function(){
  this.GetHeaderFilterPopup().Hide();
  var listBox = this.GetHeaderFilterListBox();
  var column = this.GetColumn(listBox.cpGVColumnIndex);
  if(!column) return;
  var values = listBox.GetSelectedValues();
  this.gridCallBack([this.CommandId.ApplyHeaderColumnFilter, column.index, _aspxToJson(values)]);
 },
 GroupBy: function(column, groupIndex, sortOrder){
  if(this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
  column = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(groupIndex)) groupIndex = "";
  if(!_aspxIsExists(sortOrder)) sortOrder = "ASC";
  this.gridCallBack([this.CommandId.Group, column, groupIndex, sortOrder]);
 },
 SortBy: function(column, sortOrder, reset, sortIndex){
  if(this.RaiseColumnSorting(this._getColumnObjectByArg(column))) return;
  column = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(sortIndex)) sortIndex = "";
  if(!_aspxIsExists(sortOrder)) sortOrder = "";
  if(!_aspxIsExists(reset)) reset = true;
  this.gridCallBack([this.CommandId.Sort, column, sortIndex, sortOrder, reset]);
 },
 MoveColumn: function(column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup){
  if(!_aspxIsExists(column)) return;
  if(!_aspxIsExists(columnMoveTo)) columnMoveTo = -1;
  if(!_aspxIsExists(moveBefore)) moveBefore = true;
  if(!_aspxIsExists(moveToGroup)) moveToGroup = false;
  if(!_aspxIsExists(moveFromGroup)) moveFromGroup = false;
  if(moveToGroup) {
   if(this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
  }
  column = this._getColumnIndexByColumnArgs(column);
  this.gridCallBack([this.CommandId.ColumnMove, column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup]);
 },
 GetFocusedRowIndex: function() {
  return this._getFocusedRowIndex();
 },
 SetFocusedRowIndex: function(visibleIndex) {
  return this._setFocusedRowIndex(visibleIndex);
 },
 IsCustomizationWindowVisible: function(){
  var custWindow = this.GetCustomizationWindow();
  return custWindow != null && custWindow.IsVisible();
 },
 ShowCustomizationWindow: function(showAtElement){
  var custWindow = this.GetCustomizationWindow();
  if(!showAtElement) showAtElement = this.GetMainElement();
  custWindow.ShowAtElement(showAtElement);
 },
 HideCustomizationWindow: function(){
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null) custWindow.Hide();
 },
 SelectRows: function(visibleIndices, selected){
  if(!_aspxIsExists(selected)) selected = true;
  if(!_aspxIsExists(visibleIndices)) {
   selected = selected ? "all" : "unall";
   visibleIndices = [ ];
  } else {
   if(visibleIndices.constructor != Array)
    visibleIndices = [visibleIndices];
  }
  this.gridCallBack([this.CommandId.SelectRows, selected].concat(visibleIndices));
 },
 SelectRowsByKey: function(keys, selected){
  if(!_aspxIsExists(selected)) selected = true;
  if(!_aspxIsExists(keys)) return;
  if(keys.constructor != Array)
   keys = [keys];
  this.gridCallBack([this.CommandId.SelectRowsKey, selected].concat(keys));
 },
 UnselectRowsByKey: function(keys){
  this.SelectRowsByKey(keys, false);
 },
 UnselectRows: function(visibleIndices){
  this.SelectRows(visibleIndices, false);
 },
 UnselectFilteredRows: function() {
  this.gridCallBack([this.CommandId.SelectRows, "unallf"]);
 },
 SelectRowOnPage: function(visibleIndex, selected){
  if(!_aspxIsExists(selected)) selected = true;
  this.SelectRow(visibleIndex, selected);
 },
 UnselectRowOnPage: function(visibleIndex){
  this.SelectRowOnPage(visibleIndex, false);
 },
 SelectAllRowsOnPage: function(selected){
  if(!_aspxIsExists(selected)) selected = true;
  this._selectAllRowsOnPage(selected);
 },
 UnselectAllRowsOnPage: function(){
  this._selectAllRowsOnPage(false);
 },
 GetSelectedRowCount: function() {
  return this._getSelectedRowCount();
 },
 GetSelectedFilteredRowCount: function(){
  return this._getSelectedFilteredRowCount();
 },
 GetSelectedFieldValues: function(fieldNames, onCallBack) {
  this.gridFuncCallBack([this.CommandId.SelFieldValues, fieldNames], onCallBack);
 },
 GetSelectedKeysOnPage: function() {
  var keys = [];
  for(var i = 0; i < this.pageRowCount; i++) {
   if(this._isRowSelected(this.visibleStartIndex + i))
    keys.push(this.keys[i]);
  }
  return keys; 
 },
 IsRowSelectedOnPage: function(visibleIndex) {
  return this._isRowSelected(visibleIndex);
 },
 GetRowValues: function(visibleIndex, fieldNames, onCallBack) {
  this.gridFuncCallBack([this.CommandId.RowValues, visibleIndex, fieldNames], onCallBack);
 },
 GetPageRowValues: function(fieldNames, onCallBack) {
  this.gridFuncCallBack([this.CommandId.PageRowValues, fieldNames], onCallBack);
 },
 GetVisibleRowsOnPage: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   return batchEditHelper.GetVisibleRowsOnPageCount();
  return this.pageRowCount;
 },
 GetTopVisibleIndex: function() {
  return this.visibleStartIndex;
 },
 IsGroupRow: function(visibleIndex) {
  return this.GetGroupRow(visibleIndex) != null;
 },
 IsDataRow: function(visibleIndex) {
  return this.GetDataRow(visibleIndex) != null;
 },
 IsGroupRowExpanded: function(visibleIndex) { 
  return this.GetExpandedGroupRow(visibleIndex) != null;
 },
 GetColumnsCount: function() {
  return this._getColumnsCount();
 },
 GetColumn: function(index) {
  return this._getColumn(index);
 },
 GetColumnById: function(id) {
  return this._getColumnById(id);
 },
 GetColumnByField: function(fieldName) {
  return this._getColumnByField(fieldName);
 },
 GetEditor: function(column) {
  var columnObject = this._getColumnObjectByArg(column);
  return columnObject != null ? this.GetEditorByColumnIndex(columnObject.index) : null;
 },
 FocusEditor: function(column) {
  var editor = this.GetEditor(column);
  if(editor && editor.SetFocus) {
   editor.SetFocus();  
  }
 },
 GetEditValue: function(column) {
  var editor = this.GetEditor(column);
  return editor != null && editor.enabled ? editor.GetValue() : null;
 },
 SetEditValue: function(column, value) {
  var editor = this.GetEditor(column);
  if(editor != null && editor.enabled) {
   editor.SetValue(value);
  }
 },
 ShowFilterControl: function() {
  this.PreventCallbackAnimation();
  this.gridCallBack([this.CommandId.ShowFilterControl]);
 },
 CloseFilterControl: function() {
  this.PreventCallbackAnimation();
  this.HideFilterControlPopup();
  this.gridCallBack([this.CommandId.CloseFilterControl]);
 },
 HideFilterControlPopup: function() {
  var popup = this.GetFilterControlPopup();
  if(popup) popup.Hide();
 },
 ApplyFilterControl: function() {
  this.PreventCallbackAnimation();
  var fc = this.GetFilterControl();
  if(fc == null) return;
  if(!this.callBacksEnabled)
   this.HideFilterControlPopup();
  if(!fc.isApplied)
   fc.Apply(this);
 },
 SetFilterEnabled: function(isFilterEnabled) {
  this.gridCallBack([this.CommandId.SetFilterEnabled, isFilterEnabled]);
 },
 SetWidth: function(width) {
  if(this.GetMainElement().offsetWidth === width)
   return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.OnSetWidth(width);
  this.ResetControlAdjustment();
  this.constructor.prototype.SetWidth.call(this, width);
 },
 SetHeight: function(height) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHeight(height);
 },
 GetVertScrollPos: function() {
  return this.GetVerticalScrollPosition();
 },
 GetVerticalScrollPosition: function() {
  if(this.isVirtualScrolling) 
   return 0;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetVertScrollPosition();
  return 0;
 },
 GetHorzScrollPos: function() {
  return this.GetHorizontalScrollPosition();
 },
 GetHorizontalScrollPosition: function() {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetHorzScrollPosition();
  return 0;
 },
 SetVertScrollPos: function(value) {
  this.SetVerticalScrollPosition(value);
 },
 SetVerticalScrollPosition: function(value) {
  if(this.isVirtualScrolling) 
   return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetVertScrollPosition(value);
 },
 SetHorzScrollPos: function(value) {
  this.SetHorizontalScrollPosition(value);
 },
 SetHorizontalScrollPosition: function(value) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHorzScrollPosition(value);
 },
 RaiseSelectionChangedOutOfServer: function() {
  this.RaiseSelectionChanged(-1, false, false, true);
 },
 RaiseSelectionChanged: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer) {
  if(!this.SelectionChanged.IsEmpty()){
   var args = new ASPxClientGridViewSelectionEventArgs(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer);
   this.SelectionChanged.FireEvent(this, args);
   if(args.processOnServer) {
    this.gridCallBack(["SELECTION"]);
   }
  }
  return false; 
 },
 RaiseFocusedRowChanged: function() {
  if(!this.FocusedRowChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(false);
   this.FocusedRowChanged.FireEvent(this, args);
   if(args.processOnServer) {
    this.gridCallBack(["FOCUSEDROW"]);
   }
  }
  return false; 
 },
 RaiseColumnSorting: function(column) {
  if(!this.ColumnSorting.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnSorting.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnGrouping: function(column) {
  if(!this.ColumnGrouping.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnGrouping.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnStartDragging: function(column) {
  if(!this.ColumnStartDragging.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnStartDragging.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnResizing: function(column) {
  if(!this.ColumnResizing.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnResizing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnResized: function(column) {
  if(!this.ColumnResized.IsEmpty()){
   var args = new ASPxClientGridViewColumnProcessingModeEventArgs(column);
   this.ColumnResized.FireEvent(this, args);
   if(args.processOnServer)
    this.Refresh();
  }
 },
 RaiseRowExpanding: function(visibleIndex) {
  if(!this.RowExpanding.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.RowExpanding.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseRowCollapsing: function(visibleIndex) {
  if(!this.RowCollapsing.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.RowCollapsing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseDetailRowExpanding: function(visibleIndex) {
  if(!this.DetailRowExpanding.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.DetailRowExpanding.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseDetailRowCollapsing: function(visibleIndex) {
  if(!this.DetailRowCollapsing.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.DetailRowCollapsing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseRowClick: function(visibleIndex, htmlEvent) {
  if(!this.RowClick.IsEmpty()){
   var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
   this.RowClick.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseRowDblClick: function(visibleIndex, htmlEvent) {
  if(!this.RowDblClick.IsEmpty()){
   _aspxClearSelection(); 
   var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
   this.RowDblClick.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseContextMenu: function(objectType, index, htmlEvent, menu, showBrowserMenu) {
  var args = new ASPxClientGridViewContextMenuEventArgs(objectType, index, htmlEvent, menu, showBrowserMenu);
  if(!this.ContextMenu.IsEmpty())
   this.ContextMenu.FireEvent(this, args);
  return !!args.showBrowserMenu;
 },
 RaiseCustomizationWindowCloseUp: function() {
  if(!this.CustomizationWindowCloseUp.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CustomizationWindowCloseUp.FireEvent(this, args);
  }
  return false; 
 },
 RaiseColumnMoving: function(targets) {
  if(this.ColumnMoving.IsEmpty()) return;
  var srcColumn = this.getColumnObject(targets.obj.id);
  var destColumn = this.getColumnObject(targets.targetElement.id);
  var isLeft = targets.isLeftPartOfElement();
  var isGroupPanel = targets.targetElement == targets.grid.GetGroupPanel();
  var args = new ASPxClientGridViewColumnMovingEventArgs(srcColumn, destColumn, isLeft, isGroupPanel);
  this.ColumnMoving.FireEvent(this, args);
  if(!args.allow) {
   targets.targetElement = null;
  }
 },
 RaiseBatchEditConfirmShowing: function(requestTriggerID) {
  if(!this.BatchEditConfirmShowing.IsEmpty()) {
   var args = new ASPxClientGridViewBatchEditConfirmShowingEventArgs(requestTriggerID);
   this.BatchEditConfirmShowing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseBatchEditStartEditing: function(visibleIndex, column, rowValues) {
  var args = new ASPxClientGridViewBatchEditStartEditingEventArgs(visibleIndex, column, rowValues);
  if(!this.BatchEditStartEditing.IsEmpty())
   this.BatchEditStartEditing.FireEvent(this, args);
  return args;
 },
 RaiseBatchEditEndEditing: function(visibleIndex, rowValues) {
  var args = new ASPxClientGridViewBatchEditEndEditingEventArgs(visibleIndex, rowValues);
  if(!this.BatchEditEndEditing.IsEmpty())
   this.BatchEditEndEditing.FireEvent(this, args);
  return args;
 },
 RaiseBatchEditRowValidating: function(visibleIndex, validationInfo) {
  var args = new ASPxClientGridViewBatchEditRowValidatingEventArgs(visibleIndex, validationInfo);
  if(!this.BatchEditRowValidating.IsEmpty())
   this.BatchEditRowValidating.FireEvent(this, args);
  return args.validationInfo;
 },
 RaiseBatchEditTemplateCellFocused: function(columnIndex) {
  var column = this._getColumn(columnIndex);
  if(!column) return false;
  var args = new ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs(column);
  if(!this.BatchEditTemplateCellFocused.IsEmpty())
   this.BatchEditTemplateCellFocused.FireEvent(this, args);
  return args.handled;
 },
 RaiseInternalCheckBoxClick: function(visibleIndex) {
  if(!this.InternalCheckBoxClick.IsEmpty()){
   var args = {"visibleIndex": visibleIndex, cancel: false};
   this.InternalCheckBoxClick.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 UA_AddNew: function() {
  this.AddNewRow();
 },
 UA_StartEdit: function(visibleIndex) {
  this.StartEditRow(visibleIndex);
 },
 UA_Delete: function(visibleIndex) {
  this.DeleteGridRow(visibleIndex);
 },
 UA_UpdateEdit: function() {
  this.UpdateEdit();
 },
 UA_CancelEdit: function() {
  this.CancelEdit();
 },
 UA_CustomButton: function(id, visibleIndex) {
  this.CommandCustomButton(id, visibleIndex);
 },
 UA_Select: function(visibleIndex) {
  if(!this.lookupBehavior || this.allowSelectByRowClick)
   this.SelectRow(visibleIndex, !this._isRowSelected(visibleIndex));
 },
 UA_ClearFilter: function() {
  this.ClearFilter();
 },
 UA_ApplyMultiColumnAutoFilter: function() {
  this.ApplyMultiColumnAutoFilter();
 }
});
ASPxClientGridView.Cast = ASPxClientControl.Cast;
ASPxClientGridViewColumn = _aspxCreateClass(null, {
 constructor: function(name, index, parentIndex, fieldName, visible, filterRowTypeKind, showFilterMenuLikeItem,
  allowGroup, allowSort, allowDrag, HFCheckedList, inCustWindow, minWidth) {
  this.name = name;
  this.id = name;
  this.index = index;
  this.parentIndex = parentIndex;
  this.fieldName = fieldName;
  this.visible = !!visible;
  this.filterRowTypeKind = filterRowTypeKind;
  this.showFilterMenuLikeItem = !!showFilterMenuLikeItem;
  this.allowGroup = !!allowGroup;
  this.allowSort = !!allowSort;
  this.allowDrag = !!allowDrag;
  this.HFCheckedList = !!HFCheckedList;
  this.inCustWindow = !!inCustWindow;
  this.minWidth = minWidth;
 }
});
ASPxClientGridViewColumnCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this);
  this.column = column;
 }
});
ASPxClientGridViewColumnProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this, false);
  this.column = column;
 }
});
ASPxClientGridViewRowCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex){
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
 }
});
ASPxClientGridViewSelectionEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer){
  this.constructor.prototype.constructor.call(this, false);
  this.visibleIndex = visibleIndex;
  this.isSelected = isSelected;
  this.isAllRecordsOnPage = isAllRecordsOnPage;
  this.isChangedOnServer = isChangedOnServer;
 }
});
ASPxClientGridViewRowClickEventArgs = _aspxCreateClass(ASPxClientGridViewRowCancelEventArgs, {
 constructor: function(visibleIndex, htmlEvent){
  this.constructor.prototype.constructor.call(this, visibleIndex);
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientGridViewContextMenuEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(objectType, index, htmlEvent, menu, showBrowserMenu) {
  this.constructor.prototype.constructor.call(this);
  this.objectType = objectType;
  this.index = index;
  this.htmlEvent = htmlEvent;
  this.menu = menu;
  this.showBrowserMenu = showBrowserMenu;
 }
});
ASPxClientGridViewContextMenuItemClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(item, objectType, elementIndex, processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.objectType = objectType;
  this.elementIndex = elementIndex;
  this.usePostBack = false;
  this.handled = false;
  this.processOnServer = processOnServer;
 }
});
ASPxClientGridViewCustomButtonEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(visibleIndex, buttonID) {
  this.constructor.prototype.constructor.call(this, false);
  this.visibleIndex = visibleIndex;
  this.buttonID = buttonID;
 } 
});
ASPxClientGridViewColumnMovingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(sourceColumn, destinationColumn, isDropBefore, isGroupPanel) {
  this.constructor.prototype.constructor.call(this);
  this.allow = true;
  this.sourceColumn = sourceColumn;
  this.destinationColumn = destinationColumn;
  this.isDropBefore = isDropBefore;
  this.isGroupPanel = isGroupPanel;
 }
});
ASPxClientGridViewBatchEditConfirmShowingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(requestTriggerID) {
  this.constructor.prototype.constructor.call(this);
  this.requestTriggerID = requestTriggerID;
 }
});
ASPxClientGridViewBatchEditStartEditingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, focusedColumn, rowValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.focusedColumn = focusedColumn;
  this.rowValues = _aspxCloneObject(rowValues);
 }
});
ASPxClientGridViewBatchEditEndEditingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, rowValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.rowValues = _aspxCloneObject(rowValues);
 }
});
ASPxClientGridViewBatchEditRowValidatingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(visibleIndex, validationInfo) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.validationInfo = _aspxCloneObject(validationInfo);
 }
});
ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(column) {
  this.constructor.prototype.constructor.call(this);
  this.column = column;
  this.handled = false;
 }
});
ASPxGridViewKbdHelper = _aspxCreateClass(ASPxKbdHelper, {
 HandleKeyDown: function(e) {  
  var grid = this.control;
  var index = grid.GetFocusedRowIndex();
  var busy = grid.keyboardLock;
  var key = _aspxGetKeyCode(e);
  if(grid.rtl) {
   if(key == ASPxKey.Left)
    key = ASPxKey.Right;
   else if(key == ASPxKey.Right)
    key = ASPxKey.Left;
  }
  switch(key) {
   case ASPxKey.Down:
    if(!busy) 
     this.TryMoveFocusDown(index, e.shiftKey);
    return true;
   case ASPxKey.Up:
    if(!busy) 
     this.TryMoveFocusUp(index, e.shiftKey);
    return true;
   case ASPxKey.Right:
    if(!busy) {
     if(!this.TryExpand(index))
      this.TryMoveFocusDown(index, e.shiftKey);
    }
    return true;
   case ASPxKey.Left:
    if(!busy) {
     if(!this.TryCollapse(index))
      this.TryMoveFocusUp(index, e.shiftKey);
    }
    return true;
   case ASPxKey.PageDown:
    if(e.shiftKey) {
     if(!busy && grid.pageIndex < grid.pageCount - 1)
      grid.NextPage();
     return true; 
    }
    break;
   case ASPxKey.PageUp:
    if(e.shiftKey) {
     if(!busy && grid.pageIndex > 0)
      grid.PrevPage();
     return true; 
    }
    break;     
  }
  return false;
 },
 HandleKeyPress: function(e) {
  var grid = this.control;
  var index = grid.GetFocusedRowIndex();
  var busy = grid.keyboardLock;
  switch(_aspxGetKeyCode(e)) {
   case ASPxKey.Space:
    if(!busy && this.IsRowSelectable(index))
     grid.IsRowSelectedOnPage(index) ? grid.UnselectRowOnPage(index) : grid.SelectRowOnPage(index);
    return true;
    case 43:
    if(!busy)
     this.TryExpand(index);
    return true;
    case 45: 
    if(!busy)   
     this.TryCollapse(index);    
    return true;
  }
  return false;
 },
 EnsureFocusedRowVisible: function() {
  var grid = this.control;
  if(!grid.HasVertScroll()) return;
  var row = grid.GetRow(grid.GetFocusedRowIndex());
  grid.GetScrollHelper().MakeRowVisible(row, true);
 },
 HasDetailButton: function(expanded) {
  var grid = this.control;
  var row = grid.GetRow(grid.GetFocusedRowIndex());
  if(!row) return;
  var needle = expanded ? "aspxGVHideDetailRow" : "aspxGVShowDetailRow";
  return row.innerHTML.indexOf(needle) > -1;
 },
 IsRowSelectable: function(index) {
  if(this.control.allowSelectByRowClick)
   return true;
  var row = this.control.GetRow(index);
  if(row && row.innerHTML.indexOf("aspxGVSelectRow") > -1)
   return true;
  var check = this.control.GetDataRowSelBtn(index); 
  if(check && this.control.internalCheckBoxCollection && !!this.control.internalCheckBoxCollection.Get(check.id))
   return true;
  return false;
 },
 UpdateShiftSelection: function(start, end) {
  var grid = this.control;
  grid.UnselectAllRowsOnPage();
  if(grid.lastMultiSelectIndex > -1)   
   start = grid.lastMultiSelectIndex;
  else   
   grid.lastMultiSelectIndex = start;
  for(var i = Math.min(start, end); i <= Math.max(start, end); i++)
   grid.SelectRowOnPage(i);
 },
 TryExpand: function(index) {
  var grid = this.control;
  if(grid.IsGroupRow(index) && !grid.IsGroupRowExpanded(index)) {
   grid.ExpandRow(index);
   return true;
  }
  if(this.HasDetailButton(false)) {
   grid.ExpandDetailRow(index);
   return true;
  }
  return false;
 },
 TryCollapse: function(index) {
  var grid = this.control;
  if(grid.IsGroupRow(index) && grid.IsGroupRowExpanded(index)) {
   grid.CollapseRow(index);
   return true;
  }
  if(this.HasDetailButton(true)) {
   grid.CollapseDetailRow(index);
   return true;
  }
  return false;
 },
 TryMoveFocusDown: function(index, select) {
  var grid = this.control;
  if(index < grid.visibleStartIndex + grid.pageRowCount - 1) {
   if(index < 0) 
    grid.SetFocusedRowIndex(grid.visibleStartIndex);
    else
    grid.SetFocusedRowIndex(index + 1);
   this.EnsureFocusedRowVisible();
   if(this.IsRowSelectable(index)) {
    if(select) {
     this.UpdateShiftSelection(index, index + 1);
    } else {
     grid.lastMultiSelectIndex = -1;
    }
   }
  } else {
   if(grid.pageIndex < grid.pageCount - 1 && grid.pageIndex >= 0) {       
    grid.NextPage();
   }
  }  
 },
 TryMoveFocusUp: function(index, select) {
  var grid = this.control;
  if(index > grid.visibleStartIndex || index == -1) {
   if(index < 0) 
    grid.SetFocusedRowIndex(grid.visibleStartIndex + grid.pageRowCount - 1);
   else
    grid.SetFocusedRowIndex(index - 1);
   this.EnsureFocusedRowVisible();
   if(this.IsRowSelectable(index)) {
    if(select) {
     this.UpdateShiftSelection(index, index - 1);
    } else {
     grid.lastMultiSelectIndex = -1;
    }
   }
  } else {
   if(grid.pageIndex > 0) {
    grid.PrevPage(true);
   }
  }
 }
});
ASPxClientGridViewDragHelper = _aspxCreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 CreateDrag: function(e, element, canDrag) {
  var drag = new ASPxClientDragHelper(e, element, true);
  drag.centerClone = true;
  drag.canDrag = canDrag;  
  drag.grid = this.grid;
  drag.ctrl = e.ctrlKey;
  drag.shift = e.shiftKey;
  drag.onDragDivCreating = this.OnDragDivCreating;
  drag.onDoClick = this.OnDoClick;
  drag.onCloneCreating = this.OnCloneCreating;
  drag.onEndDrag = this.OnEndDrag;
  drag.onCancelDrag = this.OnCancelDrag;
  return drag;
 },
 PrepareTargetHeightFunc: function() {
  ASPxClientGridViewDragHelper.Target_GetElementHeight = null;
  var headerRowCount = this.grid.GetHeaderMatrix().GetRowCount();
  if(headerRowCount) {
   var row = this.grid.GetHeaderRow(headerRowCount - 1);
   var headerBottom = _aspxGetAbsoluteY(row) + row.offsetHeight;
   ASPxClientGridViewDragHelper.Target_GetElementHeight = function() {
    return headerBottom - this.absoluteY;
   };
  }
 },
 CreateTargets: function(drag, e) {
  if(!drag.canDrag) return;
  var grid = this.grid;
  this.PrepareTargetHeightFunc();
  var targets = new ASPxClientCursorTargets();
  targets.obj = drag.obj;
  targets.grid = grid;
  targets.onTargetCreated = this.OnTargetCreated;
  targets.onTargetChanging = this.OnTargetChanging;
  targets.onTargetChanged = this.OnTargetChanged;
  var scrollLeft = null, scrollRight;
  var scrollHelper = grid.GetScrollHelper();
  var scrollableControl = scrollHelper && scrollHelper.GetHorzScrollableControl();
  if(scrollableControl) {
   scrollLeft = _aspxGetAbsoluteX(scrollableControl);
   scrollRight = scrollLeft + scrollableControl.offsetWidth;
  }
  var sourceColumn = grid.getColumnObject(drag.obj.id);
  var win = grid.GetCustomizationWindow();
  if(win && !sourceColumn.inCustWindow)
   this.AddDragDropTarget(targets, win.GetWindowClientTable(-1));
  for(var i = 0; i < grid.columns.length; i++) {
   var column = grid.columns[i];
   for(var grouped = 0; grouped <= 1; grouped++) {
    var targetElement = grid.GetHeader(column.index, !!grouped);
    if(!targetElement)
     continue;
    if(scrollLeft !== null) {
     var targetX = _aspxGetAbsoluteX(targetElement);
     if(targetX < scrollLeft || targetX + targetElement.offsetWidth > scrollRight)
      continue;
    }
    if(this.IsValidColumnDragDropTarget(drag.obj, targetElement, sourceColumn, column))
     this.AddDragDropTarget(targets, targetElement);  
   }
  }
  this.AddDragDropTarget(targets, grid.GetGroupPanel());
  this.AddDragDropTarget(targets, _aspxGetElementById(grid.name + this.grid.EmptyHeaderSuffix));
 },
 IsValidColumnDragDropTarget: function(sourceElement, targetElement, sourceColumn, targetColumn) {
  if(sourceColumn == targetColumn)
   return false;
  if(sourceColumn.parentIndex == targetColumn.parentIndex)
   return true;
  if(sourceColumn.parentIndex == targetColumn.index) {
   return (sourceColumn.inCustWindow || this.IsGroupingTarget(sourceElement))
    && this.grid.GetHeaderMatrix().IsLeaf(targetColumn.index);
  }
  if(this.IsGroupingTarget(targetElement))
   return true;
  return false;
 },
 AddDragDropTarget: function(targets, element) {
  element && targets.addElement(element);
 },
 IsGroupHeaderTarget: function(element) {
  if(!element)
   return false;
  return element.id.indexOf(this.grid.name + "_groupcol") == 0;
 },
 IsGroupingTarget: function(element) { 
  return element == this.grid.GetGroupPanel() || this.IsGroupHeaderTarget(element);
 },
 IsCustWindowTarget: function(element) {
  var win = this.grid.GetCustomizationWindow();
  return win && element == win.GetWindowClientTable(-1); 
 },
 OnDragDivCreating: function(drag, dragDiv) {
  var rootTable = drag.grid.GetRootTable();
  if(!dragDiv || !rootTable) return;
  dragDiv.className = rootTable.className;
  dragDiv.style.cssText = rootTable.style.cssText;
 },
 OnDoClick: function(drag) {
  if(!drag.grid.canSortByColumn(drag.obj)) return;
  drag.grid.SortBy(drag.grid.getColumnIndex(drag.obj.id), drag.ctrl ? "NONE" : "", !drag.shift && !drag.ctrl);
 },
 OnCancelDrag: function(drag) {
  drag.grid.dragHelper.ChangeTargetImagesVisibility(false);
 },
 OnEndDrag: function(drag) {
  if(!drag.targetElement)
   return;
  var grid = drag.grid;
  var sourceElement = drag.obj;
  var targetElement = drag.targetElement;
  var isLeft = drag.targetTag;
  if(grid.rtl)
   isLeft = !isLeft;
  grid.MoveColumn(
   grid.getColumnIndex(sourceElement.id),
   grid.IsEmptyHeaderID(targetElement.id) ? 0 : grid.getColumnIndex(targetElement.id),
   isLeft,
   grid.dragHelper.IsGroupingTarget(targetElement),
   grid.dragHelper.IsGroupingTarget(sourceElement)
  );
 },
 OnCloneCreating: function(clone) {
  var table = document.createElement("table");
  table.cellSpacing = 0;
  if(this.obj.offsetWidth > 0)
   table.style.width = Math.min(200, this.obj.offsetWidth) + "px";
  if(this.obj.offsetHeight > 0)
   table.style.height = this.obj.offsetHeight + "px";
  var row = table.insertRow(-1);
  clone.style.borderLeftWidth = "";
  clone.style.borderTopWidth = "";
  clone.style.borderRightWidth = "";
  row.appendChild(clone);
  table.style.opacity = 0.80;
  table.style.filter = "alpha(opacity=80)"; 
  if(_aspxIsElementRightToLeft(this.obj))
   table.dir = "rtl";
  return table;
 },
 OnTargetCreated: function(targets, targetObj) {
  var f = ASPxClientGridViewDragHelper.Target_GetElementHeight;
  var h = targets.grid.dragHelper;
  var el = targetObj.element;
  if(f && !h.IsCustWindowTarget(el) && !h.IsGroupingTarget(el))
   targetObj.GetElementHeight = f;
 },
 OnTargetChanging: function(targets) {
  if(!targets.targetElement)
   return;
  targets.targetTag = targets.isLeftPartOfElement();
  var grid = targets.grid;
  var grouping = false;
  if(targets.targetElement == grid.GetGroupPanel()) {
   targets.targetTag = true;
   grouping = true;
  }  
  if(grid.dragHelper.IsGroupHeaderTarget(targets.targetElement)) {
   grouping = true;
  }
  if(grouping && !grid.canGroupByColumn(targets.obj))
   targets.targetElement = null;
  if(targets.targetElement) {
   grid.RaiseColumnMoving(targets);
  }
 },
 OnTargetChanged: function(targets) {
  if(__aspxDragHelper == null)
   return;
  var element = targets.targetElement;
  if(element == __aspxDragHelper.obj)
   return;
  var grid = targets.grid;
  grid.dragHelper.ChangeTargetImagesVisibility(false);
  if(!element) {
   __aspxDragHelper.targetElement = null;
   return;
  }
  __aspxDragHelper.targetElement = element;
  __aspxDragHelper.targetTag = targets.targetTag;
  var moveToGroup = grid.dragHelper.IsGroupingTarget(element);
  var moveToCustWindow = grid.dragHelper.IsCustWindowTarget(element);
  if(moveToCustWindow) {
   __aspxDragHelper.addElementToDragDiv(grid.GetArrowDragFieldImage());
   return;
  }
  var matrix =  grid.GetHeaderMatrix();
  var targetColumnIndex = grid.getColumnIndex(element.id);
  var isRightSide = !targets.targetTag;
  var left = _aspxGetAbsoluteX(element);
  var neighbor;
  if(moveToGroup) {
   var method = isRightSide ^ grid.rtl ? "nextSibling" : "previousSibling";
   neighbor = grid.dragHelper.GetGroupNodeNeighbor(element, method);
   if(neighbor && neighbor.id == __aspxDragHelper.obj.id) {
    __aspxDragHelper.targetElement = null;
    return;
   }
  } else {
   if(targetColumnIndex > -1) {
    var method = isRightSide ^ grid.rtl ? "GetRightNeighbor" : "GetLeftNeighbor";
    var neighborIndex = matrix[method](targetColumnIndex);
    var sourceColumn = grid.getColumnObject(__aspxDragHelper.obj.id);
    if(neighborIndex == sourceColumn.index && !sourceColumn.inCustWindow && !grid.dragHelper.IsGroupHeaderTarget(__aspxDragHelper.obj)) {
     __aspxDragHelper.targetElement = null;
     return;
    } 
    if(!isNaN(neighborIndex))
     neighbor = grid.GetHeader(neighborIndex)
   }
   }
  if(element == grid.GetGroupPanel()) {
   if(grid.rtl)
    left += element.offsetWidth;
  } else {
   if(isRightSide) {
    if(neighbor)
     left = _aspxGetAbsoluteX(neighbor);
    else
     left += element.offsetWidth;
   }
  }
  var bottomElement = element;
  if(!moveToGroup && targetColumnIndex > -1)
   bottomElement = grid.GetHeader(matrix.GetLeaf(targetColumnIndex, !isRightSide, false));
  grid.dragHelper.SetDragImagesPosition(left, _aspxGetAbsoluteY(element),  _aspxGetAbsoluteY(bottomElement) + bottomElement.offsetHeight);
  grid.dragHelper.ChangeTargetImagesVisibility(true);
 },
 GetGroupNodeNeighbor: function(element, method) {
  return this.GetGroupNodeNeighborCore(element, method, 2);
 },
 GetGroupNodeNeighborCore: function(element, method, distance) {
  var neighbor = element[method];
  if(neighbor && neighbor.nodeType == 1) {
   if(this.IsGroupingTarget(neighbor)) 
    return neighbor;
   if(distance > 1)
    return this.GetGroupNodeNeighborCore(neighbor, method, --distance);
  }
  return null;
 },
 ChangeTargetImagesVisibility: function(vis) {
  if(this.grid.GetArrowDragDownImage() == null) return;
  var value = vis ? "visible" : "hidden";
  this.grid.GetArrowDragDownImage().style.visibility = value;
  this.grid.GetArrowDragUpImage().style.visibility = value;
  if(__aspxDragHelper != null) {
   __aspxDragHelper.removeElementFromDragDiv();
  }
 },
 SetDragImagesPosition: function(left, top, bottom) {
  var downImage = this.grid.GetArrowDragDownImage();
  if(downImage) {
   _aspxSetAbsoluteX(downImage, left - downImage.offsetWidth / 2);
   _aspxSetAbsoluteY(downImage, top - downImage.offsetHeight);
  }
  var upImage = this.grid.GetArrowDragUpImage();
  if(upImage) {
   _aspxSetAbsoluteX(upImage, left - upImage.offsetWidth / 2);
   _aspxSetAbsoluteY(upImage, bottom);
  }
 }
});
ASPxClientGridViewDragHelper.Target_GetElementHeight = null;
ASPxClientGridViewHeaderMatrix = _aspxCreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 Invalidate: function() {
  this.matrix = null;
  this.inverseMatrix = null;
 }, 
 GetRowCount: function() {
  this.EnsureMatrix();
  return this.matrix.length;
 },
 IsLeftmostColumn: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].left == 0;
 },
 IsRightmostColumn: function(columnIndex) {
  this.EnsureMatrix();  
  return this.inverseMatrix[columnIndex].right == this.matrix[0].length - 1;
 },
 IsLeaf: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].bottom == this.matrix.length - 1;
 },
 GetLeaf: function(columnIndex, isLeft, isOuter) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  var row = this.matrix[this.matrix.length - 1];
  if(isLeft) {
   if(isOuter)
    return row[rect.left - 1];
   return row[rect.left];
  }
  if(isOuter)
   return row[rect.right + 1];
  return row[rect.right];
 },
 GetLeafIndex: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].left;
 },
 GetLeafIndices: function() {
  return this.GetRowIndices(this.GetRowCount() - 1);
 },
 GetRowIndices: function(rowIndex) {
  this.EnsureMatrix();
  return this.matrix[rowIndex] || [];
 },
 GetRowSpan: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return rect.bottom - rect.top + 1;
 },
 GetLeftNeighbor: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return this.matrix[rect.top][rect.left - 1];
 },
 GetRightNeighbor: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return this.matrix[rect.top][rect.right + 1];
 },
 GetRightNeighborLeaf: function(columnIndex) {
  return this.GetLeaf(columnIndex, false, true);
 },
 EnsureMatrix: function() {
  this.matrix || this.Fill();
 },
 Fill: function() {
  this.matrix = [ ];
  this.inverseMatrix = { };
  var rowIndex = 0;
  while(true) {
   var row = this.grid.GetHeaderRow(rowIndex);
   if(!row)
    break;
   var lastFreeIndex = 0;
   for(var cellIndex = !rowIndex ? this.grid.indentColumnCount : 0; cellIndex < row.cells.length; cellIndex++) {
    var cell = row.cells[cellIndex];
    var columnIndex = this.grid.getColumnIndex(cell.id);
    if(columnIndex < 0)
     break;
    lastFreeIndex = this.FindFreeCellIndex(rowIndex, lastFreeIndex);
    this.FillBlock(rowIndex, lastFreeIndex, cell.rowSpan, cell.colSpan, columnIndex);
    lastFreeIndex += cell.colSpan;
   }
   ++rowIndex;
  }
 },
 FindFreeCellIndex: function(rowIndex, lastFreeCell) {
  var row = this.matrix[rowIndex];
  var result = lastFreeCell;
  if(row) {
   while(!isNaN(row[result]))
    result++;
  } 
  return result;
 },
 FillBlock: function(rowIndex, cellIndex, rowSpan, colSpan, columnIndex) {
  var rect = {
   top: rowIndex,
   bottom: rowIndex + rowSpan - 1,
   left: cellIndex,
   right: cellIndex + colSpan - 1
  };
  for(var i = rect.top; i <= rect.bottom; i++) {
   while(!this.matrix[i])
    this.matrix.push([]);
   for(var j = rect.left; j <= rect.right; j++)
    this.matrix[i][j] = columnIndex;
  }
  this.inverseMatrix[columnIndex] = rect;
 }
});
ASPxClientGridViewBatchEditApi = _aspxCreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 GetHelper: function() { return this.grid.GetBatchEditHelper(); },
 GetColumnIndex: function(column) { return this.grid._getColumnIndexByColumnArgs(column); },
 SetCellValue: function(visibleIndex, column, value, displayText) { 
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) return;
  if(!_aspxIsExists(displayText)) 
   displayText = _aspxIsExists(value) ? value.toString() : "";
  if(helper.IsCheckColumn(columnIndex))
   displayText = helper.GetCheckColumnDisplayText(value, columnIndex);
  helper.SetCellValue(visibleIndex, columnIndex, value, displayText);
  helper.UpdateRow(visibleIndex, [ columnIndex ], helper.IsEditingCell(visibleIndex, columnIndex));
 },
 GetCellValue: function(visibleIndex, column) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) return;
  return helper.GetCellValue(visibleIndex, columnIndex);
 },
 HasChanges: function(visibleIndex, column) {
  var helper = this.GetHelper();
  if(!helper) return false;
  var columnIndex = this.GetColumnIndex(column);
  return helper.HasChanges(visibleIndex, columnIndex);
 },
 ResetChanges: function(visibleIndex, columnIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  helper.ResetChanges(visibleIndex, columnIndex);
 },
 StartEdit: function(visibleIndex, columnIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  helper.StartEdit(visibleIndex, columnIndex);
 },
 EndEdit: function() {
  var helper = this.GetHelper();
  if(!helper || helper.lockUserEndEdit) 
   return;
  helper.EndEdit();
 },
 MoveFocusBackward: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  return helper.MoveFocusPrev();
 },
 MoveFocusForward: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  return helper.MoveFocusNext();
 },
 ValidateRows: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  var validationInfo = helper.ValidateRows();
  if(!validationInfo.isValid) {
   for(var visibleIndex in validationInfo.dict) 
    helper.ShowRowClientValidationErrors(visibleIndex, validationInfo.dict[visibleIndex]);
  }
  return validationInfo.isValid;
 },
 ValidateRow: function(visibleIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  var validationInfo = helper.ValidateRow(visibleIndex);
  if(!validationInfo.isValid) 
   helper.ShowRowClientValidationErrors(visibleIndex, validationInfo);
  return validationInfo.isValid;
 },
 IsColumnEdited: function(column) {
  var helper = this.GetHelper();
  if(!helper || !column) return;
  return helper.IsColumnEdited(column);
 }
});
function aspxGVContextMenu(name, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  var showDefaultMenu = gv.OnContextMenuClick(e);
  return showDefaultMenu;
  }
 return true;
}
function aspxGVContextMenuItemClick(name, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.OnContextMenuItemClick(e);
}
function aspxGVExpandRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.ExpandRow(visibleIndex);
 }
}
function aspxGVCollapseRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.CollapseRow(visibleIndex);
 }
}
function aspxGVShowDetailRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.ExpandDetailRow(visibleIndex);
 }
}
function aspxGVHideDetailRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.CollapseDetailRow(visibleIndex);
 }
}
function aspxGVHeaderMouseDown(name, element, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) 
  gv.HeaderMouseDown(element, e);
}
function aspxGVPopupEditFormOnInit(name, popup) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  window.setTimeout(function() { gv.OnPopupEditFormInit(popup); }, 0);
}
function aspxGVPagerOnClick(name, value) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) 
  gv.doPagerOnClick(value);
}
function aspxGVFilterKeyPress(name, element, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) 
  gv.OnColumnFilterInputKeyPress(element, e);
}
function aspxGVFilterSpecKeyPress(name, element, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) 
  gv.OnColumnFilterInputSpecKeyPress(element, e);
}
function aspxGVFilterChanged(name, element) {
 _aspxSetTimeout("aspxGVFilterChangedDelayed(\""+name+"\", \"" + element.name + "\");", 0);
}
function aspxGVFilterChangedDelayed(name, elementName) {
 var gv = aspxGetControlCollection().Get(name);
 var element = aspxGetControlCollection().Get(elementName);
 if(gv != null && element != null) 
  gv.OnColumnFilterInputChanged(element);
}
function aspxGVTimer(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) 
  gv.OnFilterKeyPressTick();
}
function aspxGVShowParentRows(name, evt, element) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(element)
   gv.OnParentRowMouseEnter(element);  
  else 
   gv.OnParentRowMouseLeave(evt);
 }
}
function aspxGVTableClick(name, evt) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && gv.NeedProcessTableClick(evt))
  gv.mainTableClick(evt);
}
function aspxGVTableDblClick(name, evt) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && gv.NeedProcessTableClick(evt))
  gv.mainTableDblClick(evt);
}
function aspxGVParentRowsTimer(name, rowId) {
 var gv = aspxGetControlCollection().Get(name);
 var element = _aspxGetElementById(rowId);
 if(!element || !gv) return;
 gv.ShowParentRows(element);
}
function aspxGVCustWindowShown_IE(s) {
 var div = document.getElementById(s.name + "_Scroller");
 div.style.overflow = "hidden";
 var width1 = div.clientWidth;
 div.style.overflow = "auto";
 var width2 = div.clientWidth;
 if(width2 > width1) {
  div.style.width = width1 + "px";
  div.style.paddingRight = (width2 - width1) + "px";
  window.setTimeout(function() { 
   div.className = "_";
   div.className = "";
  }, 0);
 }
}
function aspxGVCustWindowCloseUp(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.RaiseCustomizationWindowCloseUp();
 }
}
function aspxGVApplyFilterPopup(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.ApplyHeaderFilterByColumn();
}
function aspxGVShowFilterControl(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.ShowFilterControl();
 }
}
function aspxGVCloseFilterControl(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.CloseFilterControl();
 }
}
function aspxGVSetFilterEnabled(name, value) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.SetFilterEnabled(value);
 }
}
function aspxGVApplyFilterControl(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.ApplyFilterControl();
}
function aspxGVFilterRowMenu(name, columnIndex, element) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.FilterRowMenuButtonClick(columnIndex, element);
}
function aspxGVFilterRowMenuClick(name, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.FilterRowMenuItemClick(e.item);
}
function aspxGVSort(name, columnIndex) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)  
  gv.SortBy(columnIndex);
}
function aspxGVScheduleCommand(name, commandArgs, postponed, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.ScheduleUserCommand(commandArgs, postponed, event);
}
function aspxGVHFListBoxInit(name, listBox) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && listBox)
  gv.InitializeHFListBox(listBox);
}
function aspxGVHFSelectAllCheckedChanged(name, checkBox) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && checkBox)
  gv.OnHFSelectAllCheckedChanged(checkBox);
}
function aspxGVHFCancelButtonClick(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.GetHeaderFilterPopup().Hide();
}
ASPxClientGridView.SelectStartHandler = function(e) {
 if(_aspxGetEventSource(e).tagName.match(/input|select|textarea/i))
  return;
 if(e.ctrlKey || e.shiftKey) {
  _aspxClearSelection();
  _aspxPreventEventAndBubble(e);
 }
};
ASPxClientGridView.SaveActiveElementSettings = function(grid) {
 var element = grid.activeElement;
 grid.activeElement = null;
 ASPxClientGridView.activeElementData = null;
 if (!element || !element.id || element.tagName != "INPUT" || element.id.indexOf(grid.name + "_") != 0)
  return;  
 ASPxClientGridView.activeElementData = [ grid.name, element.id, _aspxGetSelectionInfo(element).endPos ];
 if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
  if(!ASPxClientGridView.MsAjaxActiveElementHandlerAdded) {
   Sys.Application.add_load(function() { ASPxClientGridView.RestoreActiveElementSettings(); } );
   ASPxClientGridView.MsAjaxActiveElementHandlerAdded = true;
  }
 } 
};
ASPxClientGridView.RestoreActiveElementSettings = function(grid) {
 var data = ASPxClientGridView.activeElementData;
 if(!data || grid && data[0] != grid.name) return;
 var element = _aspxGetElementById(data[1]);
 if(element) {
  window.setTimeout(function() {
   element.focus();
   _aspxSetInputSelection(element, data[2], data[2]);
  }, 0);
 }
 ASPxClientGridView.activeElementData = null;
};
MVCxClientGridView = _aspxCreateClass(ASPxClientGridView, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.customActionUrl = "";
  this.addNewRowUrl = "";
  this.updateRowUrl = "";
  this.deleteRowUrl = "";
  this.batchUpdateUrl = "";
  this.callbackCustomArgs = {};
  this.callbackActionUrlCollection = {};
  this.customActionCallBack;
  this.addNewRowCallBack;
  this.updateRowCallBack;
  this.deleteRowCallBack;
  this.batchUpdateCallBack;
  this.callbackMethods = {};
  this.funcCallbackMethod;
  this.deleteKeyValue;
 },
 PerformCallback: function(data){
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientGridView.prototype.PerformCallback.call(this, data);
 },
 GetValuesOnCustomCallback: function(data, onCallback) {
  this.funcCallbackMethod = this.callbackMethods[this.CommandId.CustomValues];
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientGridView.prototype.GetValuesOnCustomCallback.call(this, data, onCallback);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) }; 
  if(this.addNewRowUrl != "")
   this.addNewRowCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.addNewRowUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) }; 
  if(this.updateRowUrl != "")
   this.updateRowCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.updateRowUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) }; 
  if(this.deleteRowUrl != "")
   this.deleteRowCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.deleteRowUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) }; 
  if(this.batchUpdateUrl != "")
   this.batchUpdateCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.batchUpdateUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) }; 
  for(var command in this.callbackActionUrlCollection){
   (function(command){
    this.callbackMethods[command] = function(arg){
     MVCx.PerformControlCallback(this.name, this.callbackActionUrlCollection[command], arg, this.GetCallbackParams(arg), this.callbackCustomArgs) 
    };
   }).call(this, command);
  }
  ASPxClientGridView.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command){
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientGridView.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientGridView.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 GetSortingCallbackParamsMethod: function(arg){
  var param = this.GetCallbackParams(arg);
  return param;
 },
 GetCallbackParams: function(arg) {
  var params = {};
  $(this.GetMainElement()).find("input,textarea,select").each(function(){
   if(params[this.name]) 
    return;
   switch(this.type){
    case "checkbox":
     params[this.name] = this.checked;
     break;
    case "radio":
     if(this.checked)
      params[this.name] = this.value;
     break;
    default:
     params[this.name] = this.value;
   }
  });
  var editFields = [];
  var editors = this._getEditors();
  for(var i = 0; i < editors.length; i ++) {
   var editorIndex = this.GetEditorIndex(editors[i].name);
   var column = this.columns[editorIndex];
   params[column.fieldName] = _aspxToJson(MVCx.GetEditorValueByControl(editors[i]));
   editFields.push(column.fieldName);
  }
  if(editFields.length > 0)
   params["DXMVCGridEditFields"] = _aspxToJson(editFields);
  if(this.keyName != ""){
   if(this.deleteKeyValue){
    params[this.keyName] = this.deleteKeyValue;
    this.deleteKeyValue = null;
   }
   else if(!this.IsNewRowEditing() && !params[this.keyName] && this.editingRowVisibleIndex > -1) 
    params[this.keyName] = this.GetRowKey(this.editingRowVisibleIndex);
  }
  var DXEditorValues = {};
  var DXGrid = this;
  aspxGetControlCollection().ForEachControl(function(control){
   if(!ASPxIdent.IsASPxClientEdit(control)) return;
   if(control.GetMainElement() && _aspxIsValidElement(control.GetMainElement())){
    if(_aspxGetIsParent(DXGrid.GetMainElement(), control.GetMainElement()))
     DXEditorValues[control.name] = MVCx.GetEditorValueByControl(control);
   }
  });
  params[MVCx.EditorsValuesKey] = _aspxToJson(DXEditorValues);
  if(this.allowBatchEditing) {
   params["DXMVCBatchEditingValuesRequestKey"] = this.GetBatchEditClientModifiedValuesInput().name;
   params["DXMVCBatchEditingKeyFieldName"] = this.keyName;
  }
  return params;
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientGridView.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientGridView.prototype.EvalCallbackResult.call(this, resultString);
 },
 CreateCallbackCore: function(arg, command, callbackID){
  if(this.callbackCustomArgs != {})
   window.setTimeout(function(){ this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  if(this.funcCallbackMethod)
   window.setTimeout(function() { this.funcCallbackMethod = null; }.aspxBind(this), 0);
  ASPxClientGridView.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackMethod: function(command) {
  if (command == "FUNCTION")
   return this.funcCallbackMethod || this.callBack;
  if (command == this.CommandId.DeleteRow)
   return this.deleteRowCallBack;
  if (command == this.CommandId.UpdateEdit && this.allowBatchEditing)
   return this.batchUpdateCallBack;
  if (command == this.CommandId.UpdateEdit)
   return this.IsNewRowEditing() ? this.addNewRowCallBack : this.updateRowCallBack;
  return this.callbackMethods[command] || this.callBack;
 },
 DeleteRowByKey: function(key) {
  this.deleteKeyValue = key;
  ASPxClientGridView.prototype.DeleteRowByKey.call(this, key);
 },
 gridCallBack: function(args) {
  if(args[0] === this.CommandId.Sort)
   this.callbackCustomArgs["reset"] = args[4];
  ASPxClientGridView.prototype.gridCallBack.call(this, args);
 },
 _validateEditors: function(){
  var isValid = ASPxClientGridView.prototype._validateEditors.call(this);
  var form = this.GetParentForm();
  if(isValid && form && MVCx.IsUnobtrusiveValidationEnabled()){
   this.PrepareUnobtrusiveValidationRules(form);
   var validator = $.data(form, 'validator');
   if(validator)
    isValid = validator.form();
  }
  return isValid;
 },
 PrepareUnobtrusiveValidationRules: function(form){
  if(form.dxUVExecuted)
   return;
  $(form).removeData("validator");
  $.validator.unobtrusive.parse(form);
  form.dxUVExecuted = true;
 },
 CreateBatchEditHelper: function(){
  return new MVCxClientGridViewBatchEditHelper(this);
 }
});
MVCxClientGridViewBatchEditHelper = _aspxCreateClass(ASPxClientGridViewBatchEditHelper, {
 ValidateEditor: function(editor){
  ASPxClientGridViewBatchEditHelper.prototype.ValidateEditor.call(this, editor);
  if(MVCx.IsUnobtrusiveValidationEnabled() && this.grid.GetParentForm()){
   var valueInput = MVCx.GetValueInputElement(editor);
   $(valueInput).valid();
  }
 }
});
_aspxEnableCssAnimation = true;
aspxAnimationUtils = {
 CanUseCssTransition: function () { return _aspxEnableCssAnimation && this.CurrentTransition },
 CanUseCssTransform: function () { return this.CanUseCssTransition() && this.CurrentTransform },
 CurrentTransition: (function () {
  if (__aspxIE) 
   return null;
  var transitions = [
   { property: "webkitTransition", event: "webkitTransitionEnd" },
   { property: "MozTransition", event: "transitionend" },
   { property: "OTransition", event: "oTransitionEnd" },
   { property: "transition", event: "transitionend" }
  ]
  var fakeElement = document.createElement("DIV");
  for (var i = 0; i < transitions.length; i++)
   if (transitions[i].property in fakeElement.style)
    return transitions[i];
 })(),
 CurrentTransform: (function () {
  var transforms = ["transform", "MozTransform", "-webkit-transform", "msTransform", "OTransform"];
  var fakeElement = document.createElement("DIV");
  for (var i = 0; i < transforms.length; i++)
   if (transforms[i] in fakeElement.style)
    return transforms[i];
 })(),
 SetTransformValue: function (element, position, isTop) {
  if (this.CanUseCssTransform())
   element.style[this.CurrentTransform] = this.GetTransformCssText(position, isTop);
  else
   element.style[!isTop ? "left" : "top"] = position + "px";
 },
 GetTransformValue: function (element, isTop) {
  if (this.CanUseCssTransform()) {
   var cssValue = element.style[this.CurrentTransform];
   return cssValue ? Number(cssValue.replace('matrix(1, 0, 0, 1,', '').replace(')', '').split(',')[!isTop ? 0 : 1]) : 0;
  }
  else
   return !isTop ? element.offsetLeft : element.offsetTop;
 },
 GetTransformCssText: function (position, isTop) {
  return "matrix(1, 0, 0, 1," + (!isTop ? position : 0) + ", " + (!isTop ? 0 : position) + ")";
 }
}
aspxAnimationTransitionBase = _aspxCreateClass(null, {
 constructor: function (element, options) {
  if (element) {
   aspxAnimationTransitionBase.Cancel(element);
   this.element = element;
   this.element.aspxTransition = this;
  }
  this.duration = options.duration || aspxAnimationTransitionBase.Durations.DEFAULT;
  this.transition = options.transition || aspxAnimationTransitionBase.Transitions.SINE;
  this.property = options.property;
  this.unit = options.unit || "";
  this.onComplete = options.onComplete;
  this.to = null;
  this.from = null;
 },
 Start: function (from, to) {
  if (to != undefined) {
   this.to = to;
   this.from = from;
   this.SetValue(this.from);
  }
  else
   this.to = from;
 },
 Cancel: function () {
  if (!this.element)
   return;
  try {
   delete this.element.aspxTransition;
  } catch (e) {
   this.element.aspxTransition = undefined;
  }
 },
 GetValue: function () {
  return this.getValueInternal(this.element, this.property);
 },
 SetValue: function (value) {
  this.setValueInternal(this.element, this.property, this.unit, value);
 },
 setValueInternal: function (element, property, unit, value) {
  if (property == "opacity")
   ASPxAnimationHelper.setOpacity(element, value);
  else
   element.style[property] = value + unit;
 },
 getValueInternal: function (element, property) {
  if (property == "opacity")
   return _aspxGetElementOpacity(element);
  var value = parseFloat(element.style[property]);
  return isNaN(value) ? 0 : value;
 },
 performOnComplete: function () {
  if (this.onComplete)
   this.onComplete(this.element);
 },
 getTransition: function () {
  return this.transition;
 }
});
aspxAnimationTransitionBase.Cancel = function (element) {
 if (element.aspxTransition)
  element.aspxTransition.Cancel();
};
aspxAnimationTransitionBase.Durations = {
 SHORT: 200,
 DEFAULT: 400,
 LONG: 600
};
aspxAnimationTransitionBase.Transitions = {
 LINER: {
  Css: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
  Js: function (progress) { return progress; }
 },
 SINE: {
  Css: "cubic-bezier(0.470, 0.000, 0.745, 0.715)",
  Js: function (progress) { return Math.sin(progress * 1.57); }
 },
 POW: {
  Css: "cubic-bezier(0.755, 0.050, 0.855, 0.060)",
  Js: function (progress) { return Math.pow(progress, 4); }
 },
 POW_EASE_OUT: {
  Css: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
  Js: function (progress) { return 1 - aspxAnimationTransitionBase.Transitions.POW.Js(1 - progress); }
 }
};
aspxJsAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.fps = 60;
  this.startTime = null;
 },
 Start: function (from, to) {
  aspxAnimationTransitionBase.prototype.Start.call(this, from, to);
  this.initTimer();
 },
 Cancel: function () {
  aspxAnimationTransitionBase.prototype.Cancel.call(this);
  if (this.timerId)
   clearInterval(this.timerId);
 },
 initTimer: function () {
  this.startTime = new Date();
  this.timerId = window.setInterval(function () { this.onTick(); }.aspxBind(this), 1000 / this.fps);
 },
 onTick: function () {
  var progress = (new Date() - this.startTime) / this.duration;
  if (progress >= 1)
   this.complete();
  else
   this.update(progress);
 },
 update: function (progress) {
  this.SetValue(this.gatCalculatedValue(this.from, this.to, progress));
 },
 complete: function () {
  this.Cancel();
  this.update(1);
  this.performOnComplete();
 },
 gatCalculatedValue: function (from, to, progress) {
  if (progress == 1)
   return to;
  return from + (to - from) * this.getTransition()(progress);
 },
 getTransition: function () {
  return this.transition.Js;
 }
});
aspxSimpleAnimationTransition = _aspxCreateClass(aspxJsAnimationTransition, {
 constructor: function (options) {
  this.constructor.prototype.constructor.call(this, null, options);
  this.transition = aspxAnimationTransitionBase.Transitions.POW_EASE_OUT;
  this.onUpdate = options.onUpdate;
  this.lastValue = 0;
 },
 SetValue: function (value) {
  this.onUpdate(value - this.lastValue);
  this.lastValue = value;
 },
 performOnComplete: function () {
  if (this.onComplete)
   this.onComplete();
 }
});
aspxMultipleJsAnimationTransition = _aspxCreateClass(aspxJsAnimationTransition, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.properties = {};
 },
 Start: function (properties) {
  this.initProperties(properties);
  this.initTimer();
 },
 initProperties: function (properties) {
  this.properties = properties;
  for (var propName in this.properties)
   if (properties[propName].from == undefined)
    properties[propName].from = this.getValueInternal(this.element, propName);
 },
 update: function (progress) {
  for (var propName in this.properties) {
   var property = this.properties[propName];
   if (property.from != property.to)
    this.setValueInternal(this.element, propName, property.unit, this.gatCalculatedValue(property.from, property.to, progress));
  }
 }
});
aspxCssAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.transitionPropertyName = aspxAnimationUtils.CurrentTransition.property;
  this.eventName = aspxAnimationUtils.CurrentTransition.event;
 },
 Start: function (from, to) {
  aspxAnimationTransitionBase.prototype.Start.call(this, from, to);
  _aspxSetTimeout(function () {
   var isHidden = this.element.offsetHeight == 0 && this.element.offsetWidth == 0; 
   if (!isHidden)
    this.prepareElementBeforeAnimation();
   this.SetValue(this.to);
   if (isHidden)
    this.onTransitionEnd();
  }.aspxBind(this), 0);
 },
 Cancel: function () {
  aspxAnimationTransitionBase.prototype.Cancel.call(this);
  _aspxDetachEventFromElement(this.element, this.eventName, aspxCssAnimationTransition.transitionEnd);
  this.stopAnimation();
  this.setValueInternal(this.element, this.transitionPropertyName, "", "");
 },
 prepareElementBeforeAnimation: function () {
  _aspxAttachEventToElement(this.element, this.eventName, aspxCssAnimationTransition.transitionEnd);
  var tmpH = this.element.offsetHeight; 
  this.element.style[this.transitionPropertyName] = this.getTransitionCssString();
 },
 stopAnimation: function () {
  this.SetValue(_aspxGetCurrentStyle(this.element)[this.property]);
 },
 onTransitionEnd: function () {
  this.Cancel();
  this.performOnComplete();
 },
 getTransition: function () {
  return this.transition.Css;
 },
 getTransitionCssString: function () {
  return this.getTransitionCssStringInternal(this.getCssName(this.property));
 },
 getTransitionCssStringInternal: function (cssProperty) {
  return cssProperty + " " + this.duration + "ms " + this.getTransition();
 },
 getCssName: function (property) {
  switch (property) {
   case "marginLeft":
    return "margin-left";
   case "marginTop":
    return "margin-top"
  }
  return property;
 }
});
aspxMultipleCssAnimationTransition = _aspxCreateClass(aspxCssAnimationTransition, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.properties = null;
 },
 Start: function (properties) {
  this.properties = properties;
  this.prepareElementBeforeAnimation();
  this.forEachProperties(function (property, propName) {
   this.setValueInternal(this.element, propName, property.unit, property.to);
  }.aspxBind(this));
 },
 stopAnimation: function () {
  var style = _aspxGetCurrentStyle(this.element);
  this.forEachProperties(function (property, propName) {
   this.setValueInternal(this.element, propName, "", style[propName]);
  }.aspxBind(this));
 },
 getTransitionCssString: function () {
  var str = "";
  this.forEachProperties(function (property, propName) {
   str += this.getTransitionCssStringInternal(this.getCssName(propName)) + ",";
  }.aspxBind(this));
  str = str.substring(0, str.length - 1);
  return str;
 },
 forEachProperties: function (func) {
  for (var propName in this.properties) {
   var property = this.properties[propName];
   if (property.from == undefined)
    property.from = this.getValueInternal(this.element, propName);
   if (property.from != property.to)
    func(property, propName);
  }
 }
});
aspxCssAnimationTransition.transitionEnd = function (evt) {
 var element = evt.target;
 if (element && element.aspxTransition)
  element.aspxTransition.onTransitionEnd();
}
aspxPositionAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.direction = options.direction;
  this.animationTransition = this.createAnimationTransition();
  ASPxAnimationHelper.appendWKAnimationClassNameIfRequired(this.element);
 },
 Start: function (to) {
  var from = this.GetValue();
  if (aspxAnimationUtils.CanUseCssTransform()) {
   from = this.convertPosToCssTransformPos(from);
   to = this.convertPosToCssTransformPos(to);
  }
  this.animationTransition.Start(from, to);
 },
 SetValue: function (value) {
  aspxAnimationUtils.SetTransformValue(this.element, value, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
 },
 GetValue: function () {
  return aspxAnimationUtils.GetTransformValue(this.element, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
 },
 createAnimationTransition: function () {
  var transition = aspxAnimationUtils.CanUseCssTransform() ? this.createTransformAnimationTransition() : this.createPositionAnimationTransition();
  transition.transition = aspxAnimationTransitionBase.Transitions.POW_EASE_OUT;
  return transition;
 },
 createTransformAnimationTransition: function () {
  return new aspxCssAnimationTransition(this.element, {
   property: aspxAnimationUtils.CanUseCssTransform(),
   duration: this.duration,
   onComplete: this.onComplete
  });
 },
 createPositionAnimationTransition: function () {
  return ASPxAnimationHelper.createAnimationTransition(this.element, {
   property: this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION ? "top" : "left",
   unit: "px",
   duration: this.duration,
   onComplete: this.onComplete
  });
 },
 convertPosToCssTransformPos: function (position) {
  return aspxAnimationUtils.GetTransformCssText(position, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
 }
});
var ASPxAnimationHelper = {
 SLIDE_HORIZONTAL_DIRECTION: 0,
 SLIDE_VERTICAL_DIRECTION: 1,
 SLIDE_TOP_DIRECTION: 0,
 SLIDE_RIGHT_DIRECTION: 1,
 SLIDE_BOTTOM_DIRECTION: 2,
 SLIDE_LEFT_DIRECTION: 3,
 SLIDE_CONTAINER_CLASS: "dxAC",
 MAXIMUM_DEPTH: 3,
 createAnimationTransition: function (element, options) {
  switch (options.animationEngine) {
   case "js":
    return new aspxJsAnimationTransition(element, options);
   case "css":
    return new aspxCssAnimationTransition(element, options);
   default:
    return aspxAnimationUtils.CanUseCssTransition() ? new aspxCssAnimationTransition(element, options) : new aspxJsAnimationTransition(element, options);
  }
 },
 createMultipleAnimationTransition: function (element, options) {
  return aspxAnimationUtils.CanUseCssTransition() ? new aspxMultipleCssAnimationTransition(element, options) : new aspxMultipleJsAnimationTransition(element, options);
 },
 cancelAnimation: function (element) {
  aspxAnimationTransitionBase.Cancel(element);
 },
 fadeIn: function (element, onComplete, duration) {
  ASPxAnimationHelper.fadeTo(element, {
   from: 0, to: 1,
   onComplete: onComplete,
   duration: duration || aspxAnimationTransitionBase.Durations.DEFAULT
  });
 },
 fadeOut: function (element, onComplete, duration) {
  ASPxAnimationHelper.fadeTo(element, {
   from: 1, to: 0,
   onComplete: onComplete,
   duration: duration || aspxAnimationTransitionBase.Durations.DEFAULT
  });
 },
 fadeTo: function (element, options) {
  options.property = "opacity";
  if (!options.duration)
   options.duration = aspxAnimationTransitionBase.Durations.SHORT;
  var transition = ASPxAnimationHelper.createAnimationTransition(element, options);
  if (!_aspxIsExists(options.from))
   options.from = transition.GetValue();
  transition.Start(options.from, options.to);
 },
 slideIn: function (element, direction, onComplete) {
  ASPxAnimationHelper.setOpacity(element, 1);
  var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(element, true, true);
  var pos = ASPxAnimationHelper.getSlideInStartPos(animationContainer, direction);
  var transition = ASPxAnimationHelper.createSlideTransition(animationContainer, direction,
   function (el) {
    ASPxAnimationHelper.resetSlideAnimationContainerSize(animationContainer);
    if (onComplete)
     onComplete(el);
   });
  transition.Start(pos, 0);
 },
 slideOut: function (element, direction, onComplete) {
  var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(element, true, true);
  var pos = ASPxAnimationHelper.getSlideOutFinishPos(animationContainer, direction);
  var transition = ASPxAnimationHelper.createSlideTransition(animationContainer, direction,
   function (el) {
    ASPxAnimationHelper.setOpacity(el.firstChild, 0);
    if (onComplete)
     onComplete(el);
   });
  transition.Start(pos);
 },
 slideTo: function (element, options) {
  if (!_aspxIsExists(options.direction))
   options.direction = ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
  var transition = new aspxPositionAnimationTransition(element, options);
  transition.Start(options.to);
 },
 setOpacity: function (element, value) {
  if (__aspxIE && __aspxBrowserVersion < 8)
   element.style.zoom = 1;
  _aspxSetElementOpacity(element, value);
 },
 appendWKAnimationClassNameIfRequired: function (element) {
  if (aspxAnimationUtils.CanUseCssTransform() && __aspxWebKitFamily && !_aspxElementHasCssClass(element, "dx-wbv"))
   element.className += " dx-wbv";
 },
 findSlideAnimationContainer: function (element) {
  var container = element
  for (var i = 0; i < ASPxAnimationHelper.MAXIMUM_DEPTH; i++) {
   if (container.tagName == "BODY")
    return null;
   if (_aspxElementHasCssClass(container, ASPxAnimationHelper.SLIDE_CONTAINER_CLASS))
    return container;
   container = container.parentNode;
  }
  return null;
 },
 createSlideAnimationContainer: function (element) {
  var rootContainer = document.createElement("DIV");
  _aspxSetStyles(rootContainer, {
   className: ASPxAnimationHelper.SLIDE_CONTAINER_CLASS,
   overflow: "hidden"
  });
  var elementContainer = document.createElement("DIV");
  rootContainer.appendChild(elementContainer);
  var parentNode = element.parentNode;
  parentNode.insertBefore(rootContainer, element);
  elementContainer.appendChild(element);
  return rootContainer;
 },
 getSlideAnimationContainer: function (element, create, fixSize) {
  if (!element) return;
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  var container;
  if (element.className == ASPxAnimationHelper.SLIDE_CONTAINER_CLASS)
   container = element;
  if (!container)
   container = ASPxAnimationHelper.findSlideAnimationContainer(element);
  if (!container && create)
   container = ASPxAnimationHelper.createSlideAnimationContainer(element);
  if (container && fixSize) {
   _aspxSetStyles(container, {
    width: width, height: height
   });
   _aspxSetStyles(container.firstChild, {
    width: width, height: height
   });
  }
  return container;
 },
 resetSlideAnimationContainerSize: function (container) {
  _aspxSetStyles(container, {
   width: "", height: ""
  });
  _aspxSetStyles(container.firstChild, {
   width: "", height: ""
  });
 },
 getModifyProperty: function (direction) {
  if (direction == ASPxAnimationHelper.SLIDE_TOP_DIRECTION || direction == ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION)
   return "marginTop";
  return "marginLeft";
 },
 createSlideTransition: function (animationContainer, direction, complete) {
  return ASPxAnimationHelper.createAnimationTransition(animationContainer.firstChild, {
   unit: "px",
   property: ASPxAnimationHelper.getModifyProperty(direction),
   onComplete: complete
  });
 },
 getSlideInStartPos: function (animationContainer, direction) {
  switch (direction) {
   case ASPxAnimationHelper.SLIDE_TOP_DIRECTION:
    return animationContainer.offsetHeight;
   case ASPxAnimationHelper.SLIDE_LEFT_DIRECTION:
    return animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION:
    return -animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION:
    return -animationContainer.offsetHeight;
  }
 },
 getSlideOutFinishPos: function (animationContainer, direction) {
  switch (direction) {
   case ASPxAnimationHelper.SLIDE_TOP_DIRECTION:
    return -animationContainer.offsetHeight;
   case ASPxAnimationHelper.SLIDE_LEFT_DIRECTION:
    return -animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION:
    return animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION:
    return animationContainer.offsetHeight;
  }
 }
};
var ASPxGesturesHelper = {
 handlers: {},
 activeHandler: null,
 isAttachedEvents: false,
 isExecutedGesture: false,
 AddSwipeGestureHandler: function (id, getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel) {
  this.handlers[id] = new ASPxSwipeGestureHandler(getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel);
 },
 UpdateSwipeAnimationContainer: function (id) {
  if (this.handlers[id])
   this.handlers[id].UpdateAnimationContainer();
 },
 AddSwipeSlideGestureHandler: function (id, getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
  if (updatePosition)
   this.handlers[id] = new ASPxSwipeSimpleSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition);
  else
   this.handlers[id] = new ASPxSwipeSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback);
 },
 OnDocumentMouseDown: function (evt) {
  if (!_aspxGetIsLeftButtonPressed(evt))
   return;
  ASPxGesturesHelper.activeHandler = ASPxGesturesHelper.FindHandler(evt);
  if (ASPxGesturesHelper.activeHandler)
   ASPxGesturesHelper.activeHandler.OnMouseDown(evt);
 },
 OnDocumentMouseMove: function (evt) {
  if (ASPxGesturesHelper.activeHandler) {
   ASPxGesturesHelper.isExecutedGesture = true;
   ASPxGesturesHelper.activeHandler.OnMouseMove(evt);
  }
 },
 OnDocumentMouseUp: function (evt) {
  if (ASPxGesturesHelper.activeHandler) {
   ASPxGesturesHelper.activeHandler.OnMouseUp(evt);
   ASPxGesturesHelper.activeHandler = null;
   _aspxSetTimeout(function () { ASPxGesturesHelper.isExecutedGesture = false; }, 0);
  }
 },
 AttachEvents: function () {
  if (!ASPxGesturesHelper.isAttachedEvents) {
   ASPxGesturesHelper.Attach(_aspxAttachEventToElement);
   ASPxGesturesHelper.isAttachedEvents = true;
  }
 },
 DetachEvents: function () {
  if (ASPxGesturesHelper.isAttachedEvents) {
   ASPxGesturesHelper.Attach(_aspxDetachEventFromElement);
   ASPxGesturesHelper.isAttachedEvents = false;
  }
 },
 Attach: function (changeEventsMethod) {
  changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseDownEventName, ASPxGesturesHelper.OnDocumentMouseDown);
  changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseMoveEventName, ASPxGesturesHelper.OnDocumentMouseMove);
  changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseUpEventName, ASPxGesturesHelper.OnDocumentMouseUp);
 },
 FindHandler: function (evt) {
  var handlers = [];
  for (var id in ASPxGesturesHelper.handlers) {
   var handler = ASPxGesturesHelper.handlers[id];
   if (handler.CanHandleEvent(evt))
    handlers.push(handler);
  }
  if (!handlers.length)
   return null;
  handlers.sort(function (a, b) {
   return _aspxGetIsParent(a.getAnimationElement(), b.getAnimationElement()) ? 1 : -1;
  });
  return handlers[0];
 },
 IsExecutedGesture: function () {
  return ASPxGesturesHelper.isExecutedGesture;
 }
};
ASPxGesturesHelper.AttachEvents();
ASPxGestureHandler = _aspxCreateClass(null, {
 constructor: function (getAnimationElement, canHandle, allowStart) {
  this.getAnimationElement = getAnimationElement;
  this.canHandle = canHandle;
  this.allowStart = allowStart;
  this.startMousePosX = 0;
  this.startMousePosY = 0;
  this.startTime = null;
  this.isEventsPrevented = false;
  this.savedElements = [];
 },
 OnMouseDown: function (evt) {
  if (!__aspxTouchUI && !this.IsTextElement(evt))
   _aspxPreventEvent(evt);
  this.startMousePosX = _aspxGetEventX(evt);
  this.startMousePosY = _aspxGetEventY(evt);
  this.startTime = new Date();
 },
 OnMouseMove: function (evt) {
  if (!__aspxTouchUI)
   _aspxClearSelection();
  if (Math.abs(this.GetCurrentDistanceX(evt)) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE && Math.abs(this.GetCurrentDistanceY(evt)) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE)
   ASPxGesturesHelper.isExecutedGesture = false;
 },
 OnMouseUp: function (evt) {
 },
 CanHandleEvent: function (evt) {
  return !this.canHandle || this.canHandle(evt);
 },
 IsStartAllowed: function (value) {
  return !this.allowStart || this.allowStart(value);
 },
 RollbackGesture: function () {
 },
 GetRubberPosition: function (position) {
  return position / ASPxGestureHandler.FACTOR_RUBBER;
 },
 GetCurrentDistanceX: function (evt) {
  return _aspxGetEventX(evt) - this.startMousePosX;
 },
 GetCurrentDistanceY: function (evt) {
  return _aspxGetEventY(evt) - this.startMousePosY;
 },
 GetDistanceLimit: function () {
  return (new Date() - this.startTime) < ASPxGestureHandler.MAX_TIME_SPAN ? ASPxGestureHandler.MIN_DISTANCE_LIMIT : ASPxGestureHandler.MAX_DISTANCE_LIMIT;
 },
 IsTextElement: function (evt) {
  var element = _aspxGetEventSource(evt);
  return element.tagName == "TEXTAREA" || element.tagName == "INPUT" && _aspxGetAttribute(element, "type") == "text";
 },
 GetContainerElement: function () {
 },
 AttachPreventEvents: function (evt) {
  if (!this.isEventsPrevented) {
   var element = _aspxGetEventSource(evt);
   var container = this.GetContainerElement();
   while (element && element != container) {
    _aspxAttachEventToElement(element, "mouseup", _aspxPreventEvent);
    _aspxAttachEventToElement(element, "click", _aspxPreventEvent);
    this.savedElements.push(element);
    element = element.parentNode;
   }
   this.isEventsPrevented = true;
  }
 },
 DetachPreventEvents: function () {
  if (this.isEventsPrevented) {
   _aspxSetTimeout(function () {
    while (this.savedElements.length > 0) {
     var element = this.savedElements.pop();
     _aspxDetachEventFromElement(element, "mouseup", _aspxPreventEvent);
     _aspxDetachEventFromElement(element, "click", _aspxPreventEvent);
    }
   }.aspxBind(this), 0);
   this.isEventsPrevented = false;
  }
 }
});
ASPxGestureHandler.MAX_DISTANCE_LIMIT = 70;
ASPxGestureHandler.MIN_DISTANCE_LIMIT = 10;
ASPxGestureHandler.MIN_START_DISTANCE = 0;
ASPxGestureHandler.SLIDER_MIN_START_DISTANCE = 5;
ASPxGestureHandler.MAX_TIME_SPAN = 300;
ASPxGestureHandler.FACTOR_RUBBER = 4;
ASPxGestureHandler.RETURN_ANIMATION_DURATION = 150;
ASPxSwipeSlideGestureHandler = _aspxCreateClass(ASPxGestureHandler, {
 constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, move) {
  this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle);
  this.slideElement = this.getAnimationElement();
  this.container = this.slideElement.parentNode;
  this.direction = direction;
  this.backward = backward;
  this.forward = forward;
  this.rollback = rollback;
  this.slideElementSize = 0;
  this.containerElementSize = 0;
  this.startSliderElementPosition = 0;
  this.centeredSlideElementPosition = 0;
 },
 OnMouseDown: function (evt) {
  ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
  this.slideElementSize = this.GetElementSize();
  this.startSliderElementPosition = this.GetElementPosition();
  this.containerElementSize = this.GetContainerElementSize();
  if (this.slideElementSize <= this.containerElementSize)
   this.centeredSlideElementPosition = (this.containerElementSize - this.slideElementSize) / 2;
 },
 OnMouseMove: function (evt) {
  ASPxGestureHandler.prototype.OnMouseMove.call(this, evt);
  if (!__aspxTouchUI && !_aspxGetIsParent(this.container, _aspxGetEventSource(evt))) {
   ASPxGesturesHelper.OnDocumentMouseUp(evt);
   return;
  }
  var distance = this.GetCurrentDistance(evt);
  if (Math.abs(distance) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE || ASPxClientTouchUI.isGesture)
   return;
  this.SetElementPosition(this.GetCalculatedPosition(distance));
  this.AttachPreventEvents(evt);
  _aspxPreventEvent(evt);
 },
 GetCalculatedPosition: function (distance) {
  aspxAnimationTransitionBase.Cancel(this.slideElement);
  var position = this.startSliderElementPosition + distance,
   maxPosition = -(this.slideElementSize - this.containerElementSize),
   minPosition = 0;
  if (this.centeredSlideElementPosition > 0)
   position = this.GetRubberPosition(distance) + this.centeredSlideElementPosition;
  else if (position > minPosition)
   position = this.GetRubberPosition(distance);
  else if (position < maxPosition)
   position = this.GetRubberPosition(distance) + maxPosition;
  return position;
 },
 OnMouseUp: function (evt) {
  this.DetachPreventEvents();
  if (this.GetCurrentDistance(evt) != 0)
   this.OnMouseUpCore(evt);
 },
 OnMouseUpCore: function (evt) {
  var distance = this.GetCurrentDistance(evt);
  if (this.centeredSlideElementPosition > 0 || this.CheckSlidePanelIsOutOfBounds())
   this.PerformRollback();
  else
   this.PerformAction(distance);
 },
 PerformAction: function (distance) {
  if (Math.abs(distance) < this.GetDistanceLimit())
   this.PerformRollback();
  else if (distance < 0)
   this.PerformForward();
  else
   this.PerformBackward();
 },
 PerformBackward: function () {
  this.backward();
 },
 PerformForward: function () {
  this.forward();
 },
 PerformRollback: function () {
  this.rollback();
 },
 CheckSlidePanelIsOutOfBounds: function () {
  var minOffset = -(this.slideElementSize - this.containerElementSize), maxOffset = 0;
  var position = null, slideElementPos = this.GetElementPosition();
  if (slideElementPos > maxOffset || slideElementPos < minOffset)
   return true;
  return false;
 },
 GetContainerElement: function () {
  return this.container;
 },
 GetElementSize: function () {
  return this.IsHorizontalDirection() ? this.slideElement.offsetWidth : this.slideElement.offsetHeight;
 },
 GetContainerElementSize: function () {
  return this.IsHorizontalDirection() ? _aspxGetClearClientWidth(this.container) : _aspxGetClearClientHeight(this.container);
 },
 GetCurrentDistance: function (evt) {
  return this.IsHorizontalDirection() ? this.GetCurrentDistanceX(evt) : this.GetCurrentDistanceY(evt);
 },
 GetElementPosition: function () {
  return aspxAnimationUtils.GetTransformValue(this.slideElement, !this.IsHorizontalDirection());
 },
 SetElementPosition: function (position) {
  aspxAnimationUtils.SetTransformValue(this.slideElement, position, !this.IsHorizontalDirection());
 },
 IsHorizontalDirection: function () {
  return this.direction == ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
 }
});
ASPxSwipeSimpleSlideGestureHandler = _aspxCreateClass(ASPxSwipeSlideGestureHandler, {
 constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
  this.constructor.prototype.constructor.call(this, getAnimationElement, direction, canHandle, backward, forward, rollback);
  this.container = this.slideElement;
  this.updatePosition = updatePosition;
  this.prevDistance = 0;
 },
 OnMouseDown: function (evt) {
  ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
  this.prevDistance = 0;
 },
 OnMouseUpCore: function (evt) {
  this.PerformAction(this.GetCurrentDistance(evt));
 },
 PerformAction: function (distance) {
  if (Math.abs(distance) < this.GetDistanceLimit())
   this.PerformRollback();
  else if (distance < 0)
   this.PerformForward();
  else
   this.PerformBackward();
 },
 GetCalculatedPosition: function (distance) {
  var position = distance - this.prevDistance;
  this.prevDistance = distance;
  return position;
 },
 SetElementPosition: function (position) {
  this.updatePosition(position);
 }
});
ASPxSwipeGestureHandler = _aspxCreateClass(ASPxGestureHandler, {
 constructor: function (getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel) {
  this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle, allowStart);
  this.start = start;
  this.allowComplete = allowComplete;
  this.complete = complete;
  this.cancel = cancel;
  this.animationTween = null;
  this.currentDistanceX = 0;
  this.currentDistanceY = 0;
  this.tryStartGesture = false;
  this.tryStartScrolling = false;
  this.UpdateAnimationContainer();
 },
 UpdateAnimationContainer: function () {
  this.animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, false);
 },
 CanHandleEvent: function (evt) {
  if (ASPxGestureHandler.prototype.CanHandleEvent.call(this, evt))
   return true;
  return this.animationTween && this.animationContainer && _aspxGetIsParent(this.animationContainer, _aspxGetEventSource(evt));
 },
 OnMouseDown: function (evt) {
  ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
  if (this.animationTween)
   this.animationTween.Cancel();
  this.currentDistanceX = 0;
  this.currentDistanceY = 0;
  this.tryStartGesture = false;
  this.tryStartScrolling = false;
 },
 OnMouseMove: function (evt) {
  ASPxGestureHandler.prototype.OnMouseMove.call(this, evt);
  this.currentDistanceX = this.GetCurrentDistanceX(evt);
  this.currentDistanceY = this.GetCurrentDistanceY(evt);
  if (!this.animationTween && !this.tryStartScrolling && (Math.abs(this.currentDistanceX) > ASPxGestureHandler.MIN_START_DISTANCE || Math.abs(this.currentDistanceY) > ASPxGestureHandler.MIN_START_DISTANCE)) {
   if (Math.abs(this.currentDistanceY) < Math.abs(this.currentDistanceX)) {
    this.tryStartGesture = true;
    if (this.IsStartAllowed(this.currentDistanceX)) {
     this.animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, true);
     this.animationTween = ASPxAnimationHelper.createSlideTransition(this.animationContainer, ASPxAnimationHelper.SLIDE_LEFT_DIRECTION,
      function () {
       ASPxAnimationHelper.resetSlideAnimationContainerSize(this.animationContainer);
       this.animationContainer = null;
       this.animationTween = null;
      }.aspxBind(this));
     this.PerformStart(this.currentDistanceX);
     this.AttachPreventEvents(evt);
    }
   }
   else
    this.tryStartScrolling = true;
  }
  if (this.animationTween) {
   if (this.allowComplete && !this.allowComplete(this.currentDistanceX))
    this.currentDistanceX = this.GetRubberPosition(this.currentDistanceX);
   this.animationTween.SetValue(this.currentDistanceX);
  }
  if (!this.tryStartScrolling && !ASPxClientTouchUI.isGesture && evt.touches && evt.touches.length < 2)
   _aspxPreventEvent(evt);
 },
 OnMouseUp: function (evt) {
  if (!this.animationTween) {
   if (this.tryStartGesture)
    this.PerformCancel(this.currentDistanceX);
  }
  else {
   if (Math.abs(this.currentDistanceX) < this.GetDistanceLimit())
    this.RollbackGesture();
   else {
    if (this.IsCompleteAllowed(this.currentDistanceX)) {
     this.PerformComplete(this.currentDistanceX);
     this.animationContainer = null;
     this.animationTween = null;
    }
    else
     this.RollbackGesture();
   }
  }
  this.DetachPreventEvents();
  this.tryStartGesture = false;
  this.tryStartScrolling = false;
 },
 PerformStart: function (value) {
  if (this.start)
   this.start(value);
 },
 IsCompleteAllowed: function (value) {
  return !this.allowComplete || this.allowComplete(value);
 },
 PerformComplete: function (value) {
  if (this.complete)
   this.complete(value);
 },
 PerformCancel: function (value) {
  if (this.cancel)
   this.cancel(value);
 },
 RollbackGesture: function () {
  this.animationTween.Start(this.currentDistanceX, 0);
 },
 GetContainerElement: function () {
  return this.animationContainer;
 }
});
var ASPxClientPopupUtils = {
 NotSetAlignIndicator: "NotSet",
 InnerAlignIndicator: "Sides",
 OutsideLeftAlignIndicator: "OutsideLeft",
 LeftSidesAlignIndicator: "LeftSides",
 RightSidesAlignIndicator: "RightSides",
 OutsideRightAlignIndicator: "OutsideRight",
 CenterAlignIndicator: "Center",
 IsAlignNotSet: function (align) {
  return align == ASPxClientPopupUtils.NotSetAlignIndicator;
 },
 IsInnerAlign: function (align) {
  return align.indexOf(ASPxClientPopupUtils.InnerAlignIndicator) != -1;
 },
 IsRightSidesAlign: function(align) {
  return align == ASPxClientPopupUtils.RightSidesAlignIndicator;
 },
 IsOutsideRightAlign: function(align) {
  return align == ASPxClientPopupUtils.OutsideRightAlignIndicator;
 },
 IsCenterAlign: function(align) {
  return align == ASPxClientPopupUtils.CenterAlignIndicator;
 },
 FindPopupElementById: function (id) {
  if (id == "")
   return null; 
  var popupElement = _aspxGetElementById(id);
  if (!_aspxIsExistsElement(popupElement)) {
   var idParts = id.split("_");
   var uniqueId = idParts.join("$");
   popupElement = _aspxGetElementById(uniqueId);
  }
  return popupElement;
 },
 FindEventSourceParentByTestFunc: function (evt, testFunc) {
  return _aspxFindParentByTestFunc(_aspxGetEventSource(evt), testFunc);
 },
 PreventContextMenu: function (evt) {
  if (__aspxWebKitFamily) {
   if (evt.stopPropagation)
    evt.stopPropagation();
   evt.returnValue = false;
   if (evt.preventDefault)
    evt.preventDefault();
  } else if (__aspxNetscapeFamily || (__aspxIE && __aspxBrowserVersion > 8))
   evt.preventDefault();
 },
 IsExistsParentWithSpecPosition: function (element, positions) {
  var curEl = element.offsetParent;
  while (curEl != null) {
   for (var i = 0; i < positions.length; i++) {
    if (_aspxGetCurrentStyle(curEl).position == positions[i])
     return true;
   }
   curEl = curEl.offsetParent;
  }
  return false;
 },
 GetDocumentClientWidthForPopup: function () {
  return (__aspxWebKitTouchUI ? _aspxGetDocumentWidth() : _aspxGetDocumentClientWidth()); 
 },
 AdjustPositionToClientScreen: function (element, shadowSize, pos, isX) {
  var min = isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
  var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
  var max = min + (isX ? documentClientWidth : _aspxGetDocumentClientHeight());
  max -= (isX ? element.offsetWidth + shadowSize : element.offsetHeight + shadowSize);
  if (pos > max) pos = max;
  if (pos < min) pos = min;
  return pos;
 },
 GetPopupAbsoluteX: function (element, shadowWidth, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn) {
  var width = element.offsetWidth;
  var bodyWidth = _aspxGetDocumentClientWidth();
  var elementX = _aspxGetAbsoluteX(popupElement);
  var scrollX = _aspxGetDocumentScrollLeft();
  if (hAlign == "WindowCenter") {
   var showAtPos = x != __aspxInvalidPosition && !popupElement;
   if (showAtPos)
    hAlign = "";
   else
    return new _aspxPopupPosition(Math.ceil((__aspxWebKitTouchUI ? window.innerWidth : bodyWidth) / 2 - width / 2) + scrollX + hOffset, false);
  }
  if (popupElement) {
   var leftX = elementX - width;
   var rightX = elementX + popupElement.offsetWidth;
   var innerLeftX = elementX;
   var innerRightX = elementX + popupElement.offsetWidth - width;
   var isMoreFreeSpaceLeft = bodyWidth - (rightX + width) < leftX - 2 * scrollX;
  }
  else
   hAlign = "";
  var isInverted = false;
  if (hAlign == ASPxClientPopupUtils.OutsideLeftAlignIndicator) {
   isInverted = isPopupFullCorrectionOn && (!(leftX - scrollX > 0 || isMoreFreeSpaceLeft));
   if (isInverted)
    x = rightX - hOffset;
   else
    x = leftX + hOffset;
  }
  else if (hAlign == ASPxClientPopupUtils.LeftSidesAlignIndicator) {
   x = innerLeftX + hOffset;
   if (isPopupFullCorrectionOn)
    x = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowWidth, x, true);
  }
  else if (hAlign == ASPxClientPopupUtils.CenterAlignIndicator) {
   x = elementX + Math.round((popupElement.offsetWidth - width) / 2) + hOffset;
  }
  else if (hAlign == ASPxClientPopupUtils.RightSidesAlignIndicator) {
   x = innerRightX + hOffset;
   if (isPopupFullCorrectionOn)
    x = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowWidth, x, true);
  }
  else if (hAlign == ASPxClientPopupUtils.OutsideRightAlignIndicator) {
   isInverted = isPopupFullCorrectionOn && (!(rightX + width < bodyWidth + scrollX || !isMoreFreeSpaceLeft));
   if (isInverted)
    x = leftX - hOffset;
   else
    x = rightX + hOffset;
  }
  else {
   if (rtl) {
    if (!_aspxGetIsValidPosition(x)) {
     if (popupElement)
      x = innerRightX;
     else if (hOffset)
      x = 0;
     else
      x = left;
    }
    else
     x -= width;
    isInverted = isPopupFullCorrectionOn && (x < scrollX && x - scrollX < bodyWidth / 2);
    if (isInverted)
     x = x + width + hOffset;
    else
     x = x - hOffset;
   } else {
    if (!_aspxGetIsValidPosition(x)) {
     if (popupElement)
      x = elementX;
     else if (hOffset)
      x = 0;
     else
      x = left;
    }
    isInverted = isPopupFullCorrectionOn && (x - scrollX + width > bodyWidth && x - scrollX > bodyWidth / 2);
    if (isInverted)
     x = x - width - hOffset;
    else
     x = x + hOffset;
   }
  }
  return new _aspxPopupPosition(x, isInverted);
 },
 GetPopupAbsoluteY: function (element, shadowHeight, popupElement, vAlign, vOffset, y, top, isPopupFullCorrectionOn) {
  var height = element.offsetHeight;
  var bodyHeight = _aspxGetDocumentClientHeight();
  var elementY = _aspxGetAbsoluteY(popupElement);
  var scrollY = _aspxGetDocumentScrollTop();
  if (vAlign == "WindowCenter") {
   var showAtPos = y != __aspxInvalidPosition && !popupElement;
   if (showAtPos)
    hAlign = "";
   else
    return new _aspxPopupPosition(Math.ceil((__aspxWebKitTouchUI ? window.innerHeight : bodyHeight) / 2 - height / 2) + scrollY + vOffset, false);
  }
  if (popupElement) {
   var bottomY = elementY + popupElement.offsetHeight;
   var topY = elementY - height;
   var innerBottomY = elementY + popupElement.offsetHeight - height;
   var innerTopY = elementY;
   var isMoreFreeSpaceAbove = bodyHeight - (bottomY + height) < topY - 2 * scrollY;
  }
  else
   vAlign = "";
  var isInverted = false;
  if (vAlign == "Above") {
   isInverted = isPopupFullCorrectionOn && (!(topY - scrollY > 0 || isMoreFreeSpaceAbove));
   if (isInverted)
    y = bottomY - vOffset;
   else
    y = topY + vOffset;
  }
  else if (vAlign == "TopSides") {
   y = innerTopY + vOffset;
   if (isPopupFullCorrectionOn)
    y = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowHeight, y, false);
  }
  else if (vAlign == "Middle") {
   y = elementY + Math.round((popupElement.offsetHeight - height) / 2) + vOffset;
  }
  else if (vAlign == "BottomSides") {
   y = innerBottomY + vOffset;
   if (isPopupFullCorrectionOn)
    y = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowHeight, y, false);
  }
  else if (vAlign == "Below") {
   isInverted = isPopupFullCorrectionOn && (!(bottomY + height < bodyHeight + scrollY || !isMoreFreeSpaceAbove));
   if (isInverted)
    y = topY - vOffset;
   else
    y = bottomY + vOffset;
  }
  else {
   if (!_aspxGetIsValidPosition(y)) {
    if (popupElement)
     y = _aspxGetAbsoluteY(popupElement);
    else if (vOffset)
     y = 0;
    else
     y = top;
   }
   isInverted = isPopupFullCorrectionOn && (y - _aspxGetDocumentScrollTop() + height > bodyHeight && y - _aspxGetDocumentScrollTop() > bodyHeight / 2);
   if (isInverted)
    y = y - height - vOffset;
   else
    y = y + vOffset;
  }
  return new _aspxPopupPosition(y, isInverted);
 },
 RemoveFocus: function (parent) {
  var div = document.createElement('div');
  div.tabIndex = "-1";
  ASPxClientPopupUtils.ConcealDivElement(div);
  parent.appendChild(div);
  if (_aspxIsFocusable(div))
   div.focus();
  _aspxRemoveElement(div);
 },
 ConcealDivElement: function (div) {
  div.style.position = "absolute";
  div.style.left = 0;
  div.style.top = 0;
  if (__aspxWebKitFamily) {
   div.style.opacity = 0;
   div.style.width = 1;
   div.style.height = 1;
  } else {
   div.style.border = 0;
   div.style.width = 0;
   div.style.height = 0;
  }
 },
 InitAnimationDiv: function (element, x, y, onAnimStopCallString, skipSizeInit) {
  ASPxClientPopupUtils.InitAnimationDivCore(element);
  element.popuping = true;
  element.onAnimStopCallString = onAnimStopCallString;
  if (!skipSizeInit)
   _aspxSetStyles(element, { width: element.offsetWidth, height: element.offsetHeight });
  _aspxSetStyles(element, { left: x, top: y });
 },
 InitAnimationDivCore: function (element) {
  if (__aspxIE && __aspxBrowserVersion < 8 && element.tagName == "TABLE") {
   var mainDiv = _aspxGetDescendantNodesByClassName(element, "dxpc-mainDiv")[0];
   _aspxSetStyles(mainDiv, {
    position: "relative"
   });
   var animationWrapper = _aspxGetDescendantNodesByClassName(element, "dxpc-animationWrapper")[0];
   _aspxSetStyles(animationWrapper, {
    overflow: "hidden",
    position: "relative"
   });
  }
  _aspxSetStyles(element, {
   overflow: "hidden",
   position: "absolute"
  });
 },
 StartSlideAnimation: function (animationDivElement, element, iframeElement, duration) {
  if (iframeElement) {
   var endLeft = _aspxPxToInt(iframeElement.style.left);
   var endTop = _aspxPxToInt(iframeElement.style.top);
   var startLeft = _aspxPxToInt(element.style.left) < 0 ? endLeft : animationDivElement.offsetLeft + animationDivElement.offsetWidth;
   var startTop = _aspxPxToInt(element.style.top) < 0 ? endTop : animationDivElement.offsetTop + animationDivElement.offsetHeight;
   ASPxAnimationHelper.createMultipleAnimationTransition(iframeElement, {
    duration: duration
   }).Start({
    left: { from: startLeft, to: endLeft, unit: "px" },
    top: { from: startTop, to: endTop, unit: "px" },
    width: { to: element.offsetWidth, unit: "px" },
    height: { to: element.offsetHeight, unit: "px" }
   });
  }
  ASPxAnimationHelper.createMultipleAnimationTransition(element, {
   duration: duration,
   onComplete: function () { ASPxClientPopupUtils.AnimationFinished(animationDivElement); }
  }).Start({
   left: { to: 0, unit: "px" },
   top: { to: 0, unit: "px" }
  });
 },
 AnimationFinished: function (element) {
  if (ASPxClientPopupUtils.StopAnimation(element) && _aspxIsExists(element.onAnimStopCallString) &&
   element.onAnimStopCallString !== "") {
   window.setTimeout(element.onAnimStopCallString, 0);
  }
 },
 StopAnimation: function (element) {
  if (element.popuping) {
   ASPxAnimationHelper.cancelAnimation(element);
   element.popuping = false;
   element.style.overflow = "visible";
   if (__aspxIE && __aspxBrowserVersion < 8 && element.tagName == "TABLE") {
    var mainDiv = _aspxGetDescendantNodesByClassName(element, "dxpc-mainDiv")[0];
    _aspxSetStyles(mainDiv, {
     position: "static"
    });
    var animationWrapper = _aspxGetDescendantNodesByClassName(element, "dxpc-animationWrapper")[0];
    _aspxSetStyles(animationWrapper, {
     overflow: "visible",
     position: "static"
    });
   }
   return true;
  }
  return false;
 },
 GetAnimationHorizontalDirection: function (popupPosition, horizontalAlign, verticalAlign, rtl) {
  if (ASPxClientPopupUtils.IsInnerAlign(horizontalAlign)
   && !ASPxClientPopupUtils.IsInnerAlign(verticalAlign)
   && !ASPxClientPopupUtils.IsAlignNotSet(verticalAlign))
   return 0;
  var toTheLeft = (horizontalAlign == "OutsideLeft" || horizontalAlign == "RightSides" || (horizontalAlign == "NotSet" && rtl)) ^ popupPosition.isInverted;
  return toTheLeft ? 1 : -1;
 },
 GetAnimationVerticalDirection: function (popupPosition, horizontalAlign, verticalAlign) {
  if (ASPxClientPopupUtils.IsInnerAlign(verticalAlign)
   && !ASPxClientPopupUtils.IsInnerAlign(horizontalAlign)
   && !ASPxClientPopupUtils.IsAlignNotSet(horizontalAlign))
   return 0;
  var toTheTop = (verticalAlign == "Above" || verticalAlign == "BottomSides") ^ popupPosition.isInverted;
  return toTheTop ? 1 : -1;
 },
 IsVerticalScrollExists: function () {
  return _aspxGetDocumentHeight() > _aspxGetDocumentClientHeight() || __aspxIE && __aspxBrowserVersion < 8;
 },
 WindowResizedByBodyScrollToggle: function () { 
  if (aspxGetPopupControlCollection)
   aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
  var docWidth = document.documentElement.clientWidth; 
  if (aspxGetPopupControlCollection)
   aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
 },
 CoordinatesInDocumentRect: function (x, y) {
  var docScrollLeft = _aspxGetDocumentScrollLeft();
  var docScrollTop = _aspxGetDocumentScrollTop();
  return (x > docScrollLeft && y > docScrollTop &&
   x < _aspxGetDocumentClientWidth() + docScrollLeft &&
   y < _aspxGetDocumentClientHeight() + docScrollTop);
 },
 GetElementZIndexArray: function (element) {
  var currentElement = element;
  var zIndexesArray = [0];
  while (currentElement && currentElement.tagName != "BODY") {
   if (currentElement.style) {
    if (typeof (currentElement.style.zIndex) != "undefined" && currentElement.style.zIndex != "")
     zIndexesArray.unshift(currentElement.style.zIndex);
   }
   currentElement = currentElement.parentNode;
  }
  return zIndexesArray;
 },
 IsHigher: function (higherZIndexArrat, zIndexArray) {
  if (zIndexArray == null) return true;
  var count = (higherZIndexArrat.length >= zIndexArray.length) ? higherZIndexArrat.length : zIndexArray.length;
  for (var i = 0; i < count; i++)
   if (typeof (higherZIndexArrat[i]) != "undefined" && typeof (zIndexArray[i]) != "undefined") {
    var higherZIndexArrayCurrentElement = parseInt(higherZIndexArrat[i].toString());
    var zIndexArrayCurrentElement = parseInt(zIndexArray[i].toString());
    if (higherZIndexArrayCurrentElement != zIndexArrayCurrentElement)
     return higherZIndexArrayCurrentElement > zIndexArrayCurrentElement;
   } else return typeof (zIndexArray[i]) == "undefined";
  return true;
 },
 TestIsPopupElement: function (element) {
  return !!element.DXPopupElementControl;
 }
}
ASPxClientPopupUtils.OverControl = {
 GetPopupElementByEvt: function (evt) {
  return ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, ASPxClientPopupUtils.TestIsPopupElement);
 },
 OnMouseEvent: function (evt, mouseOver) {
  var popupElement = ASPxClientPopupUtils.OverControl.GetPopupElementByEvt(evt);
  if (mouseOver)
   popupElement.DXPopupElementControl.OnPopupElementMouseOver(evt, popupElement);
  else
   popupElement.DXPopupElementControl.OnPopupElementMouseOut(evt, popupElement);
 },
 OnMouseOut: function (evt) {
  ASPxClientPopupUtils.OverControl.OnMouseEvent(evt, false);
 },
 OnMouseOver: function (evt) {
  ASPxClientPopupUtils.OverControl.OnMouseEvent(evt, true);
 }
}
ASPxClientPopupUtils.BodyScrollHelper = (function () {
 var hideBodyScrollCount = 0;
 function fixScrollsBug() {
  var scrollTop = document.body.scrollTop;
  var scrollLeft = document.body.scrollLeft;
  document.body.scrollTop++;
  document.body.scrollTop--;
  document.body.scrollLeft++;
  document.body.scrollLeft--;
  document.body.scrollLeft = scrollLeft;
  document.body.scrollTop = scrollTop;
 }
 return {
  HideBodyScroll: function () {
   hideBodyScrollCount++;
   if (hideBodyScrollCount > 1) 
    return;
   if (__aspxIE) {
    _aspxChangeAttribute(document.body, "scroll", "no");
    _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
   } else if (__aspxFirefox && __aspxBrowserVersion < 3) { 
    var scrollTop = document.documentElement.scrollTop;
    _aspxChangeStyleAttribute(document.body, "overflow", "hidden");
    document.documentElement.scrollTop = scrollTop;
   } else {
    _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
    var documentHeight = _aspxGetDocumentHeight();
    var documentWidth = _aspxGetDocumentWidth();
    if (window.pageYOffset > 0 && _aspxPxToInt(window.getComputedStyle(document.body, null)) != documentHeight)
     _aspxChangeStyleAttribute(document.body, "height", documentHeight + "px");
    if (window.pageXOffset > 0 && _aspxPxToInt(window.getComputedStyle(document.body, null)) != documentWidth)
     _aspxChangeStyleAttribute(document.body, "width", documentWidth + "px");
    if (__aspxChrome) {
     fixScrollsBug();
    }
   }
   if (ASPxClientPopupUtils.IsVerticalScrollExists())
    _aspxChangeStyleAttribute(document.body, "margin-right", _aspxGetVerticalScrollBarWidth() + "px");
   if (__aspxIE && __aspxBrowserVersion == 7)
    ASPxClientPopupUtils.WindowResizedByBodyScrollToggle();
  },
  RestoreBodyScroll: function () {
   hideBodyScrollCount--;
   if (hideBodyScrollCount > 0) 
    return;
   if (__aspxIE) {
    _aspxRestoreAttribute(document.body, "scroll");
    _aspxRestoreStyleAttribute(document.documentElement, "overflow");
   } else {
    _aspxRestoreStyleAttribute(document.documentElement, "overflow");
   }
   _aspxRestoreStyleAttribute(document.body, "margin-right");
   _aspxRestoreStyleAttribute(document.body, "height");
   _aspxRestoreStyleAttribute(document.body, "width");
   if (__aspxWebKitFamily) { 
    fixScrollsBug();
   }
   if (__aspxIE && __aspxBrowserVersion == 7)
    ASPxClientPopupUtils.WindowResizedByBodyScrollToggle();
  }
 }
})();
function _aspxPopupPosition(position, isInverted) {
 this.position = position;
 this.isInverted = isInverted;
}
function _aspxSize(width, height) {
 this.width = width;
 this.height = height;
}
var __aspxPCWIdSuffix = "_PW";
function ASPxPCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset) {
 this.horizontalDirection = horizontalDirection;
 this.verticalDirection = verticalDirection;
 this.horizontalOffset = horizontalOffset;
 this.verticalOffset = verticalOffset;
 this.course = verticalDirection + horizontalDirection;
}
ASPxClientPopupControlCssClasses = {};
ASPxClientPopupControlCssClasses.Prefix = "dxpc-";
ASPxClientPopupControlCssClasses.SizeGripLiteCssClassName = ASPxClientPopupControlCssClasses.Prefix + "sizeGrip";
ASPxClientPopupControlCssClasses.LinkCssClassName = ASPxClientPopupControlCssClasses.Prefix + "link";
ASPxClientPopupControlCssClasses.ShadowLiteCssClassName = ASPxClientPopupControlCssClasses.Prefix + "shadow";
ASPxClientPopupControlCssClasses.MainDivLiteCssClass = ASPxClientPopupControlCssClasses.Prefix + "mainDiv";
ASPxClientPopupControlCssClasses.ContentWrapperCssClassName = ASPxClientPopupControlCssClasses.Prefix + "contentWrapper";
ASPxClientPopupControlCssClasses.ContentCssClassName = ASPxClientPopupControlCssClasses.Prefix + "content";
ASPxClientPopupControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.leadingAfterInitCall = true; 
  this.adjustInnerControlsSizeOnShow = true;
  this.slideAnimationDuration = 80;
  this.fadeAnimationDuration = 400;
  this.appearAfter = 300;
  this.disappearAfter = 500;
  this.allowResize = false;
  this.popupAnimationType = "none";
  this.closeAnimationType = "none";
  this.enableAnimation = true;
  this.shadowVisible = true;
  this.allowCorrectYOffsetPosition = true; 
  this.contentUrl = "";
  this.contentUrlArray = [];
  this.contentLoadingMode = "Default"
  this.loadingPanels = [];
  this.loadingDivs = [];
  this.lpTimers = [];
  this.windowRequestCount = [];
  this.callbackAnimationProcessings = [];
  this.savedCallbackResults = [];
  this.isCallbackFinishedStates = [];
  this.savedCallbackWindowIndex = null;
  this.cookieName = "";
  this.closeAction = "OuterMouseClick";
  this.popupAction = "LeftMouseClick";
  this.closeActionArray = [];
  this.popupActionArray = [];
  this.windowsPopupElementIDList = [];
  this.windowsPopupElementList = [];
  this.windowsLastUsedPopupElementInfoList = [];
  this.windowsIsPopupedList = [];
  this.windowsPopupReasonMouseEventList = [];
  this.defaultWindowPopupElementIDList = [];
  this.defaultWindowPopupElementList = [];
  this.defaultLastUsedPopupElementInfo = {};
  this.defaultIsPopuped = false;
  this.defaultPopupReasonMouseEvent = null;
  this.showOnPageLoad = false;
  this.showOnPageLoadArray = [];
  this.popupHorizontalAlign = ASPxClientPopupUtils.NotSetAlignIndicator;
  this.popupVerticalAlign = ASPxClientPopupUtils.NotSetAlignIndicator;
  this.popupHorizontalOffset = 0;
  this.popupVerticalOffset = 0;
  this.windows = [];
  this.windowCount = 0;
  this.isDragged = false;
  this.isResized = false;
  this.zIndex = -1;
  this.left = 0;
  this.top = 0;
  this.allowLoadToHiddenIframe = __aspxIE || __aspxFirefox;
  this.iframeLoading = false;
  this.isDraggedArray = [];
  this.isResizedArray = [];
  this.zIndexArray = [];
  this.leftArray = [];
  this.topArray = [];
  this.height = 0;
  this.width = 0;
  this.minHeight = null;
  this.minWidth = null;
  this.maxHeight = null;
  this.maxWidth = null;
  this.shownArray = [];
  this.heightArray = [];
  this.widthArray = [];
  this.minHeightArray = [];
  this.minWidthArray = [];
  this.maxHeightArray = [];
  this.maxWidthArray = [];
  this.iframeLoadingArray = [];
  this.isLiveResizingMode = true;
  this.isPopupPositionCorrectionOn = true;
  this.isPopupFullCorrectionOn = true;
  this.windowElements = new Object();
  this.hideBodyScrollWhenModal = true;
  this.hideBodyScrollWhenMaximized = true;
  this.autoUpdatePosition = false;
  this.autoUpdatePositionArray = [];
  this.cachedSize = null;
  this.cachedSizeArray = [];
  this.fakeDragDiv = null;
  this.headerHeight = 0;
  this.headerHeightArray = [];
  this.footerHeight = 0;
  this.footerHeightArray = [];
  this.ResizeBorderSize = __aspxTouchUI ? 10 : 6;
  this.ResizeCornerBorderSize = 20;
  this.allowDragging = false;
  this.isWindowDragging = false;
  this.enableContentScrolling = false;
  this.contentOverflowX = "None";
  this.contentOverflowY = "None";
  this.isPinned = false;
  this.isPinnedArray = [];
  this.pinX = 0;
  this.pinXArray = [];
  this.pinY = 0;
  this.pinYArray = [];
  this.lockScroll = 0;
  this.isCollapsed = false;
  this.isCollapsedArray = [];
  this.isCollapsedInit = false;
  this.isCollapsedInitArray = [];
  this.collapseExecutingLockCount = 0;
  this.isMaximized = false;
  this.isMaximizedArray = [];
  this.isMaximizedInit = false;
  this.isMaximizedInitArray = [];
  this.maximizationExecutingLockCount = 0;
  this.restoredWindowValues = {};
  this.restoredWindowValuesArray = [];
  this.browserResizingForMaxWindowLockCount = 0;
  this.updateRestoredWindowSizeLockCount = 0;
  this.iframeAdjustingPostponedArray = [];
  this.iframeAdjustingPostponed = false;
  this.touchUIScrollers = {};
  this.prohibitClearSelectionOnMouseDown = false;
  this.CloseButtonClick = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.Closing = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.Resize = new ASPxClientEvent();
  this.Shown = new ASPxClientEvent();
  this.BeforeResizing = new ASPxClientEvent();
  this.AfterResizing = new ASPxClientEvent();
  this.PinnedChanged = new ASPxClientEvent();
  aspxGetPopupControlCollection().Add(this);
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeArrayCores();
 },
 Initialize: function() {
  aspxGetPopupControlCollection().EnsureSaveScrollState();
  this.InitializeBeforeAnyShow();
  if(this.HasDefaultWindow())
   this.InitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.InitializeWindow(i);
  this.InitializeScrollbars();
  this.constructor.prototype.Initialize.call(this);
 },
 InitializeBeforeAnyShow: function(){
  this.enableContentScrolling = this.contentOverflowX != "None" || this.contentOverflowY != "None";
 },
 InitializeScrollbars: function() {
  if(!__aspxWebKitTouchUI || !this.enableContentScrolling)
   return;
  var options = {
   showHorizontalScrollbar: this.contentOverflowX == "Auto" || this.contentOverflowX == "Scroll",
   showVerticalScrollbar: this.contentOverflowY == "Auto" || this.contentOverflowY == "Scroll"
  };
  var indicies = [];
  for(var i = 0; i < this.GetWindowCount(); i++)
   indicies.push(i);
  if(this.HasDefaultWindow());
   indicies.push(-1);
  for(var i = 0; i < indicies.length; i++) {
   var windowIndex = indicies[i];
   var scrollElement = this.GetContentContainer(windowIndex);
   if(scrollElement)
    this.touchUIScrollers[windowIndex] = ASPxClientTouchUI.MakeScrollable(scrollElement, options);
  }  
 },
 UpdateScrollbar: function(index) {
  var touchUIScroller = this.touchUIScrollers[index];
  if(!touchUIScroller)
   return;
  var scrollElement = this.GetContentContainer(index);
  if(scrollElement)
   touchUIScroller.ChangeElement(scrollElement);
 },
 AfterInitialize: function() {
  if(this.HasDefaultWindow())
   this.AfterInitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.AfterInitializeWindow(i);
  this.constructor.prototype.AfterInitialize.call(this);
 },
 InitializeArrayCores: function() {
  if(this.GetWindowCountCore() > 0) {
   this.InitializeWindowPopupElementList();
   this.InitializeWindowPopupElementIDList();
   this.InitializeWindowLastUsedPopupElementInfoList();
   this.InitializeArray(this.shownArray);
   this.InitializeArray(this.windowsPopupReasonMouseEventList, null);
   this.InitializeArray(this.windowsIsPopupedList, false);
   this.InitializeArray(this.contentUrlArray, "");
   this.InitializeArray(this.popupActionArray, this.popupAction);
   this.InitializeArray(this.closeActionArray, this.closeAction);
   this.InitializeArray(this.showOnPageLoadArray, false);
   this.InitializeArray(this.isDraggedArray, false);
   this.InitializeArray(this.isPinnedArray, false);
   this.InitializeArray(this.isCollapsedArray, false);
   this.InitializeArray(this.isCollapsedInitArray, false);
   this.InitializeArray(this.isMaximizedArray, false);
   this.InitializeArray(this.isMaximizedInitArray, false);
   this.InitializeArray(this.restoredWindowValuesArray, {});
   this.InitializeArray(this.iframeAdjustingPostponedArray, {});
   this.InitializeArray(this.isResizedArray, false);
   this.InitializeArray(this.zIndexArray, -1);
   this.InitializeArray(this.leftArray, 0);
   this.InitializeArray(this.topArray, 0);
   this.InitializeArray(this.widthArray, 0);
   this.InitializeArray(this.heightArray, 0);
   this.InitializeArray(this.pinXArray, 0);
   this.InitializeArray(this.pinYArray, 0);
   this.InitializeArray(this.minWidthArray, null);
   this.InitializeArray(this.minHeightArray, null);
   this.InitializeArray(this.maxWidthArray, null);
   this.InitializeArray(this.maxHeightArray, null);
   this.InitializeArray(this.cachedSizeArray, null);
   this.InitializeArray(this.iframeLoadingArray, false);
   this.InitializeArray(this.autoUpdatePositionArray, false);
   if(__aspxIE) {
    this.InitializeArray(this.headerHeightArray, -1);
    this.InitializeArray(this.footerHeightArray, -1);
   }
  }
 },
 InitializeArray: function(array, defaultValue) {
  if(array.length == 0) {
   for(var i = 0; i < this.GetWindowCountCore(); i++)
    array[i] = defaultValue;
  }
 },
 InitializeWindowPopupElementIDList: function() {
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   if(!this.windowsPopupElementIDList[i])
    this.windowsPopupElementIDList[i] = [];
  }
 },
 InitializeWindowPopupElementList: function() {
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   if(!this.windowsPopupElementList[i])
    this.windowsPopupElementList[i] = [];
  }
 },
 InitializeWindowLastUsedPopupElementInfoList: function() {
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   if(!this.windowsLastUsedPopupElementInfoList[i])
    this.windowsLastUsedPopupElementInfoList[i] = {};
  }
 },
 WindowElementIDAssignmentMap: [
  { cssClass: "dxpc-header", prefix: "_PWH" },
  { cssClass: "dxpc-headerText", prefix: "_PWH", postfix: "T" },
  { cssClass: "dxpc-headerImg", prefix: "_PWH", postfix: "I" },
  { cssClass: "dxpc-closeBtn", prefix: "_HCB" },
  { cssClass: "dxpc-pinBtn", prefix: "_HPB" },
  { cssClass: "dxpc-refreshBtn", prefix: "_HRB" },
  { cssClass: "dxpc-collapseBtn", prefix: "_HMNB" },
  { cssClass: "dxpc-maximizeBtn", prefix: "_HMXB" },
  { cssClass: "dxpc-content", prefix: "_PWC" },
  { cssClass: "dxpc-iFrame", prefix: "_CIF" },
  { cssClass: "dxpc-footer", prefix: "_PWF" },
  { cssClass: "dxpc-footerText", prefix: "_PWF", postfix: "T" },
  { cssClass: "dxpc-footerImg", prefix: "_PWF", postfix: "I" }
 ],
 SetMsTouchDefAction: function(index){
  var element = this.GetContentContainer(index); 
  if (element && __aspxIE && __aspxBrowserVersion>=10 && window.navigator.msPointerEnabled){
   element.style['-ms-touch-action'] = 'none';
  }
 },
 AssignElementID: function(element, index, prefix, postfix) {
  element.id = this.name + prefix + index + (postfix ? postfix : "");
 },
 AssignWindowElementsID: function(index, windowElement) {
  for(var i = 0; i < this.WindowElementIDAssignmentMap.length; i++) {
   var elementClass = this.WindowElementIDAssignmentMap[i].cssClass;
   var elements = _aspxGetDescendantNodesByClassName(windowElement, elementClass);
   for(var j = 0; j < elements.length; j++) {
    var element = elements[j];
    if(this.GetFirstParentWindow(element) === windowElement)
     this.AssignElementID(element, index, this.WindowElementIDAssignmentMap[i].prefix, this.WindowElementIDAssignmentMap[i].postfix);
   }
  }
 },
 GetFirstParentWindow: function(el) {
  while(el && el.tagName != "BODY") {
   if(el.nodeType == 1 && el.className.indexOf("dxpclW") > -1 && !isNaN(this.GetWindowIndex(el)))
    return el;
   el = el.parentNode;
  }
 },
 PreventHeaderButtonMouseDownBubbling: function(evt, hdrButton) {
  if(hdrButton) {
   var source = _aspxGetEventSource(evt);
   if(_aspxGetIsParent(hdrButton, source)) {
    aspxPWHMDown(evt);
    return true;
   }
  }
  return false;
 },
 GetWindowElementMouseDownEventHandler: function(index) {
  var instance = this,
   interactiveTagNames = ['INPUT', 'BUTTON', 'TEXTAREA', 'SELECT', 'OPTION', 'A', 'IFRAME'];
  return function(evt) {
   var content = instance.GetWindowContentElement(index),
    target = _aspxGetEventSource(evt);
   if(target && _aspxGetIsParent(content, target) && _aspxArrayIndexOf(interactiveTagNames, target.tagName) > -1)
    return true;
   if(!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) && 
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) && 
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) && 
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) && 
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
    aspxPWMDown(evt, instance.name, index, instance.isWindowDragging);
  }
 },
 GetWindowElementMouseMoveEventHandler: function(index) {
  var instance = this;
  return function(evt) { aspxPWMMove(evt, instance.name, index); };
 },
 GetWindowHeaderElementMouseDownEventHandler: function(index) {
  var instance = this;
  return function(evt) {
   if(!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
    aspxPWDGMDown(evt, instance.name, index);
  }
 },
 AssignWindowElementsEvents: function(index, element) {
  var instance = this;
  var mdEventName = ASPxClientTouchUI.touchMouseDownEventName;
  _aspxAttachEventToElement(element, mdEventName, this.GetWindowElementMouseDownEventHandler(index), true);
  if(this.allowResize) {
   var mmEventName = ASPxClientTouchUI.touchMouseMoveEventName;
   _aspxAttachEventToElement(element, mmEventName, this.GetWindowElementMouseMoveEventHandler(index));
  }
  var header = this.GetWindowHeaderElement(index);
  if(header && this.allowDragging && !this.isWindowDragging) {
   _aspxAttachEventToElement(header, mdEventName, this.GetWindowHeaderElementMouseDownEventHandler(index), true);
  }
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(sizeGrip) {
   _aspxAttachEventToElement(sizeGrip, mdEventName, function(evt) {
    aspxPWGripMDown(evt, instance.name, index);
    _aspxPreventEvent(evt);
   });
  }
  this.AttachClickToHeaderButton(index, this.GetWindowCloseButton(index), "aspxPWCBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowPinButton(index), "aspxPWPBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowRefreshButton(index), "aspxPWRBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowCollapseButton(index), "aspxPWMNBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowMaximizeButton(index), "aspxPWMXBClick");
 },
 AttachClickToHeaderButton: function(index, headerButton, eventFuncName) {
  var instance = this;
  if(headerButton) {
   _aspxAttachEventToElement(headerButton, "click", function(evt) {
    eval(eventFuncName)(evt, instance.name, index);
   });
  }
 },
 InitializeWindow: function(index) {
  var modalElement = this.GetWindowModalElement(index);
  if(modalElement)
   _aspxAttachEventToElement(modalElement, "mousedown", aspxPWMEMDown);
  this.RemoveWindowAllPopupElements(index);
  this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.AssignWindowElementsID(index, element);
   this.AssignWindowElementsEvents(index, element);
   element.DXPopupWindowElement = true;
   _aspxAttachEventToElement(element, "resize", this.CreateWindowResizeHandler(this.name, index));
   if(__aspxIE)
    this.AttachOnDragStartEventToWindowImages(index);
   if (this.contentUrl != "")
    this.SetWindowContentUrl(this.GetWindow(index), this.contentUrl);
   element.isHiding = false;
   element.isContentHeightInit = false;
   element.isPopupPositionCorrectionOn = this.isPopupPositionCorrectionOn || !this.GetShowOnPageLoad(index);
   if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) > 0) {
    this.FirstShowWindow(index, false);
    aspxGetPopupControlCollection().SetWindowElementZIndex(element, this.GetZIndex(index));
    element.isPopupPositionCorrectionOn = true;
   }
  }
  this.SetMsTouchDefAction(index);
 },
 CreateWindowResizeHandler: function(name, index) {
  return function() {
   var pc = aspxGetPopupControlCollection().Get(name);
   if(pc)
    pc.ResizeWindowIFrame(index);
  };
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(evt) {
  window.setTimeout(this.SetPopupMaximizedPositionOnBrowserResize.aspxBind(this), 0);
 },
 SetPopupMaximizedPositionOnBrowserResize: function() {
  if(this.HasDefaultWindow())
   this.SetMaximizedPositionOnBrowserResize(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.SetMaximizedPositionOnBrowserResize(i);
 },
 SetMaximizedPositionOnBrowserResize: function(index) {
  var element = this.GetWindowElement(index);
  if(element && this.GetIsMaximized(index)) {
   var left = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollLeft(), element, true);
   var top = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollTop(), element, false);
   this.SetWindowPos(index, element, left, top);
  }
 },
 InitIFrame: function(index) {
  var contentIFrameElement = this.GetWindowContentIFrameElement(index);
  if(contentIFrameElement) {
   contentIFrameElement.popupControlName = this.name;
   contentIFrameElement.pcWndIndex = index;
   _aspxAttachEventToElement(contentIFrameElement, "load", aspxPCIframeLoad);
  }
 },
 InitCollapsedWindows: function(index) {
  if ((this.isCollapsedInit && index == -1) || (index >= 0 && index < this.isCollapsedInitArray.length && this.isCollapsedInitArray[index])){
   if (this.InternalIsWindowVisible(index)){
    this.DoCollapse(index, true);
    if (index == -1)
     this.isCollapsedInit = false;
    else
     this.isCollapsedInitArray[index] = false;
   }
  }
 },
 InitMaximizedWindows: function(index) {
  if ((this.isMaximizedInit && index == -1) || (index >= 0 && index < this.isMaximizedInitArray.length && this.isMaximizedInitArray[index])){
   if (this.InternalIsWindowVisible(index)){
    this.DoMaximize(index, true);
    if (index == -1)
     this.isMaximizedInit = false;
    else
     this.isMaximizedInitArray[index] = false;
   }
  }
 },
 InitPinnedWindows: function(index) {
  if ((this.isPinned && index == -1) || (index >= 0 && index < this.isPinnedArray.length && this.isPinnedArray[index]))
   this.HoldPosition(index, true);
 },
 AfterInitializeWindow: function(index) {
  if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) < 0) {
   this.FirstShowWindow(index, true);
   var element = this.GetWindowElement(index);
   if(element != null)
    element.isPopupPositionCorrectionOn = true;
  }
  this.EnsureContent(index, true);
  this.InitPinnedWindows(index);
  this.InitMaximizedWindows(index);
  this.InitCollapsedWindows(index);
 },
 AttachOnDragStartEventToWindowImages: function(index) {
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowHeaderElement(index));
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowFooterElement(index));
 },
 AttachChildImagesPreventDragStartEvent: function(parentElem) {
  var images = parentElem == null ? null : _aspxGetElementsByTagName(parentElem, "img");
  if(images != null) {
   for(var i = 0; i < images.length; i++)
    _aspxAttachEventToElement(images[i], "dragstart", _aspxPreventDragStart);
  }
 },
 FirstShowWindow: function(index, allowChangeZIndex) {
  var isFreeWindow = this.GetIsDragged(index);
  var x = __aspxInvalidPosition;
  var y = __aspxInvalidPosition;
  if(isFreeWindow) {
   x = this.GetWindowLeft(index);
   y = this.GetWindowTop(index);
   var popupHorizontalOffsetBackup = this.popupHorizontalOffset;
   var popupVerticalOffsetBackup = this.popupVerticalOffset;
   this.popupHorizontalOffset = 0;
   this.popupVerticalOffset = 0;
  }
  var enableAnimationBackup = this.enableAnimation;
  this.enableAnimation = false;
  this.DoShowWindowAtPos(index, x, y, isFreeWindow ? -1 : 0, false, allowChangeZIndex);
  this.enableAnimation = enableAnimationBackup;
  if(isFreeWindow) {
   this.popupHorizontalOffset = popupHorizontalOffsetBackup;
   this.popupVerticalOffset = popupVerticalOffsetBackup;
  }
  this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
 },
 GetIsDragged: function(index) {
  if(0 <= index && index < this.isDraggedArray.length)
   return this.isDraggedArray[index];
  return this.isDragged;
 },
 SetIsDragged: function(index, value) {
  if(0 <= index && index < this.isDraggedArray.length)
   this.isDraggedArray[index] = value;
  else
   this.isDragged = value;
 },
 GetIsPinned: function(index) {
  if(0 <= index && index < this.isPinnedArray.length)
   return this.isPinnedArray[index];
  return this.isPinned;
 },
 SetIsPinned: function(index, value) {
  if(0 <= index && index < this.isPinnedArray.length)
   this.isPinnedArray[index] = value;
  else
   this.isPinned = value;
 },
 GetPinPosX: function(index) {
  if(0 <= index && index < this.pinXArray.length)
   return this.pinXArray[index];
  return this.pinX;
 },
 SetPinPosX: function(index, pinX) {
  if(0 <= index && index < this.pinXArray.length)
   this.pinXArray[index] = pinX;
  else
   this.pinX = pinX;
 },
 GetPinPosY: function(index) {
  if(0 <= index && index < this.pinYArray.length)
   return this.pinYArray[index];
  return this.pinY;
 },
 SetPinPosY: function(index, pinY) {
  if(0 <= index && index < this.pinYArray.length)
   this.pinYArray[index] = pinY;
  else
   this.pinY = pinY;
 },
 GetIsCollapsed: function(index) {
  if(0 <= index && index < this.isCollapsedArray.length)
   return this.isCollapsedArray[index];
  return this.isCollapsed;
 },
 SetIsCollapsed: function(index, value) {
  if(0 <= index && index < this.isCollapsedArray.length)
   this.isCollapsedArray[index] = value;
  else
   this.isCollapsed = value;
 },
 GetIsMaximized: function(index) {
  if(0 <= index && index < this.isMaximizedArray.length)
   return this.isMaximizedArray[index];
  return this.isMaximized;
 },
 SetIsMaximized: function(index, value) {
  if(0 <= index && index < this.isMaximizedArray.length)
   this.isMaximizedArray[index] = value;
  else
   this.isMaximized = value;
 },
 GetRestoredWindowData: function(index) {
  if(0 <= index && index < this.restoredWindowValuesArray.length)
   return this.restoredWindowValuesArray[index];
  return _aspxCloneObject(this.restoredWindowValues);
 },
 SetRestoredWindowData: function(index, value) {
  if(0 <= index && index < this.restoredWindowValuesArray.length)
   this.restoredWindowValuesArray[index] = value;
  else
   this.restoredWindowValues = value;
 },
 GetIsResized: function(index) {
  if(0 <= index && index < this.isResizedArray.length)
   return this.isResizedArray[index];
  return this.isResized;
 },
 SetIsResized: function(index, value) {
  if(0 <= index && index < this.isResizedArray.length)
   this.isResizedArray[index] = value;
  else
   this.isResized = value;
 },
 GetHorizontalAlign: function() {
  return this.popupHorizontalAlign;
 },
 GetVerticalAlign: function() {
  return this.popupVerticalAlign;
 },
 GetPopupHorizontalOffset: function() {
  return this.popupHorizontalOffset;
 },
 SetPopupHorizontalOffset: function(offset) {
  this.popupHorizontalOffset = offset;
 },
 SetPopupVerticalOffset: function(offset) {
  this.popupVerticalOffset = offset;
 },
 GetPopupVerticalOffset: function() {
  return this.popupVerticalOffset;
 },
 IeWithoutSupportDisplayTable: function () {
  return __aspxIE && __aspxBrowserVersion < 8;
 },
 HasDefaultWindow: function() {
  return this.GetWindowCountCore() == 0;
 },
 GetCurrentLeft: function(index) {
  return this.GetPosition(index, true);
 },
 GetCurrentTop: function(index) {
  return this.GetPosition(index, false);
 },
 GetHeaderHeight: function(index) {
  if(0 <= index && index < this.headerHeightArray.length)
   return this.headerHeightArray[index];
  return this.headerHeight;
 },
 GetFooterHeight: function(index) {
  if(0 <= index && index < this.footerHeightArray.length)
   return this.footerHeightArray[index];
  return this.footerHeight;
 },
 GetWindowFooterHeightLite: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(footer)
   return footer.offsetHeight;
  return null;
 },
 SetHeaderHeight: function(index, height) {
  if(0 <= index && index < this.headerHeightArray.length)
   this.headerHeightArray[index] = height;
  else
   this.headerHeight = height;
 },
 SetFooterHeight: function(index, height) {
  if(0 <= index && index < this.footerHeightArray.length)
   return this.footerHeightArray[index] = height;
  else
   this.footerHeight = height;
 },
 GetPosition: function(index, isLeft) {
  if(0 <= index && index < this.GetWindowCountCore())
   return isLeft ? this.leftArray[index] : this.topArray[index];
  return isLeft ? this.left : this.top;
 },
 SetPopupElementReference: function(index, popupElement, popupElementIndex, attach) {
  if(!_aspxIsExistsElement(popupElement)) return;
  var setReferenceFunction = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
  var windowPopupAction = this.GetWindowPopupAction(index);
  if(windowPopupAction == "LeftMouseClick")
   setReferenceFunction(popupElement, "mouseup", aspxPEMEvent);
  else if(windowPopupAction == "RightMouseClick")
   setReferenceFunction(popupElement, "contextmenu", aspxPEMEvent);
  else if(windowPopupAction == "MouseOver") {
   var windowElement = this.GetWindowElement(index);
   setReferenceFunction(popupElement, "mouseover", ASPxClientPopupUtils.OverControl.OnMouseOver);
   setReferenceFunction(windowElement, "mouseover", aspxPWEMOver);
   if(attach)
    this.SetMSTouchMouseOverReference(popupElement, windowElement, this.name, index, this.appearAfter);
  }
  if(windowPopupAction == "LeftMouseClick" || windowPopupAction == "RightMouseClick") {
   setReferenceFunction(popupElement, "mousedown", aspxPEMEvent);
  }
  if(attach) {
   popupElement.DXPopupElementControl = this;
   popupElement.DXPopupWindowIndex = index;
   popupElement.DXPopupElementIndex = popupElementIndex;
  } else
   popupElement.DXPopupElementControl = popupElement.DXPopupWindowIndex = popupElement.DXPopupElementIndex = undefined;
 },
 SetMSTouchMouseOverReference: function(popupElement, windowElement, popupName, index, appearAfter){
  if(!window.navigator.msPointerEnabled) return;
  popupElement.dxMsTouchGesture = popupElement.dxMsTouchGesture ||
   ASPxClientTouchUI.msTouchCreateGerturesWrapper(popupElement, function(evt){
    window.setTimeout(function(){
     aspxGetPopupControlCollection().SetAppearTimer(popupName, index, popupElement.DXPopupElementIndex, appearAfter, evt);
    }, 0);
   });
  windowElement.dxMsTouchGesture = windowElement.dxMsTouchGesture || ASPxClientTouchUI.msTouchCreateGerturesWrapper(windowElement, function(evt){
   window.setTimeout(function(){
    aspxGetPopupControlCollection().ClearDisappearTimer();
   }, 0);
  });
 },
 PopulatePopupElements: function(index) {
  var ids = this.GetPopupElementIDList(index);
  for(var i = 0; i < ids.length; i++) {
   var popupElement = ASPxClientPopupUtils.FindPopupElementById(ids[i]);
   if(popupElement)
    this.AddWindowPopupElement(index, popupElement);
  }
 },
 GetPopupElement: function(index, popupElementIndex) {
  var popupElement = this.GetPopupElementList(index)[popupElementIndex];
  return popupElement ? popupElement : null;
 },
 GetPopupElementIDList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementIDList[index];
  return this.defaultWindowPopupElementIDList;
 },
 GetPopupElementList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementList[index];
  return this.defaultWindowPopupElementList;
 },
 SetPopupElementIDs: function(index, ids) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupElementIDList[index] = ids;
  this.defaultWindowPopupElementIDList = ids;
 },
 AddPopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(!popupElements[i]) {
    popupElements[i] = element;
    return i;
   }
  }
  popupElements.push(element);
  return popupElements.length - 1;
 },
 RemovePopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(popupElements[i] == element) {
    popupElements[i] = null;
    return;
   }
  }
 },
 AddPopupElement: function(popupElement) {
  this.AddWindowPopupElement(-1, popupElement);
 },
 AddWindowPopupElement: function(index, popupElement) {
  var popupElementIndex = this.AddPopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, popupElementIndex, true);
 },
 RemovePopupElement: function(popupElement) {
  this.RemoveWindowPopupElement(-1, popupElement);
 },
 RemoveWindowPopupElement: function(index, popupElement) {
  this.RemovePopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, null, false);
 },
 RemoveAllPopupElements: function() {
  this.RemoveWindowAllPopupElements(-1);
 },
 RemoveWindowAllPopupElements: function(index) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++)
   this.RemoveWindowPopupElement(index, popupElements[i]);
 },
 GetIsPopuped: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsIsPopupedList[index];
  return this.defaultIsPopuped;
 },
 SetIsPopuped: function(index, isPopuped) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsIsPopupedList[index] = isPopuped;
  this.defaultIsPopuped = isPopuped;
 },
 GetLastShownPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return _aspxGetDefinedValue(info.shownPEIndex, 0);
 },
 SetLastShownPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.shownPEIndex = popupElementIndex;
 },
 GetLastOverPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return _aspxGetDefinedValue(info.overPEIndex, -1);
 },
 SetLastOverPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.overPEIndex = popupElementIndex;
 },
 GetLastUsedPopupElementInfo: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsLastUsedPopupElementInfoList[index];
  return this.defaultLastUsedPopupElementInfo;
 },
 SetWindowPopUpReasonMouseEvent: function(index, evt) {
  evt = _aspxCloneObject(evt);
  if(evt === undefined)
   evt = null;
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupReasonMouseEventList[index] = evt;
  this.defaultPopupReasonMouseEvent = evt;
 },
 GetPopUpReasonMouseEvent: function() {
  return this.GetWindowPopUpReasonMouseEvent(null);
 },
 GetWindowPopUpReasonMouseEvent: function(window) {
  var index = (window != null) ? window.index : -1;
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupReasonMouseEventList[index];
  return this.defaultPopupReasonMouseEvent;
 },
 GetShadowWidth: function() {
  return this.shadowVisible ? __aspxPopupShadowWidth : 0;
 },
 GetShadowHeight: function() {
  return this.shadowVisible ? __aspxPopupShadowHeight : 0;
 },
 GetShowOnPageLoad: function(index) {
  if(0 <= index && index < this.showOnPageLoadArray.length)
   return this.showOnPageLoadArray[index];
  return this.showOnPageLoad;
 },
 GetWindowCountCore: function() {
  return (this.windows.length > 0) ? this.windows.length : this.windowCount;
 },
 GetWindowIFrame: function(index) {
  var element = this.GetWindowElement(index);
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.FindWindowIFrame(index);
   element.overflowElement = iFrame;
  }
  return iFrame;
 },
 FindWindowIFrame: function(index) {
  return _aspxGetElementById(this.name + "_DXPWIF" + index);
 },
 GetWindowModalElement: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return;
  var modalElement = element.modalElement;
  if(!modalElement) {
   modalElement = this.FindWindowModalElement(index);
   element.modalElement = modalElement;
   if(modalElement) {
    modalElement.DXModalPopupControl = this;
    modalElement.DXModalPopupWindowIndex = index;
   }
  }
  return modalElement;
 },
 GetModalElementEndAnimationOpacity: function(index) {
  if(typeof(this.modalElementOpacity) == "undefined")
   this.modalElementOpacity = [];
  if(typeof(this.modalElementOpacity[index]) == "undefined")
   this.modalElementOpacity[index] = _aspxGetElementOpacity(this.GetWindowModalElement(index));
  return this.modalElementOpacity[index];
 },
 FindWindowModalElement: function(index) {
  return _aspxGetElementById(this.name + "_DXPWMB" + index);
 },
 GetWindowElementId: function(index) {
  return this.name + __aspxPCWIdSuffix + index;
 },
 WindowIsModal: function(index) {
  return !!this.GetWindowModalElement(index);
 },
 GetWindowElement: function(index) {
  if(!_aspxIsExistsElement(this.windowElements[index]))
   this.windowElements[index] = _aspxGetElementById(this.GetWindowElementId(index));
  return this.windowElements[index];
 },
 GetWindowCloseButton: function(index) {
  return _aspxGetElementById(this.name + "_HCB" + index);
 },
 GetWindowPinButton: function(index) {
  return _aspxGetElementById(this.name + "_HPB" + index);
 },
 GetWindowRefreshButton: function(index) {
  return _aspxGetElementById(this.name + "_HRB" + index);
 },
 GetWindowCollapseButton: function(index) {
  return _aspxGetElementById(this.name + "_HMNB" + index);
 },
 GetWindowMaximizeButton: function(index) {
  return _aspxGetElementById(this.name + "_HMXB" + index);
 },
 GetWindowChild: function(index, idPostfix) {
  var elem = this.GetWindowElement(index);
  if (elem)
   return _aspxGetChildById(elem, this.name + idPostfix);
  return null;  
 },
 GetWindowContentIFrameDivElementID: function(index) {
  return this.name + "_CIFD" + index;
 },
 GetWindowContentIFrameDivElement: function(index) {
  return this.GetWindowChild(index, "_CIFD" + index);
 },
 GetWindowScrollDiv: function(index) {
  return this.GetWindowChild(index, "_CSD" + index);
 },
 GetWindowContentIFrameElementId: function(index) {
  return this.name + "_CIF" + index;
 },
 GetWindowContentIFrameElement: function(index) {
  return this.GetWindowChild(index, "_CIF" + index);
 },
 GetWindowContentIFrameUrl: function(index) {
  if(0 <= index && index < this.contentUrlArray.length)
   return this.contentUrlArray[index];
  return this.contentUrl;
 },
 GetWindowPopupAction: function(index) {
  if(0 <= index && index < this.popupActionArray.length)
   return this.popupActionArray[index];
  return this.popupAction;
 },
 GetWindowCloseAction: function(index) {
  if(0 <= index && index < this.closeActionArray.length)
   return this.closeActionArray[index];
  return this.closeAction;
 },
 SetWindowContentIFrameUrl: function(index, url) {
  if(0 <= index && index < this.contentUrlArray.length)
   this.contentUrlArray[index] = url;
  else
   this.contentUrl = url;
 },
 ShowWindowContentUrl: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  this.LoadWindowContentUrl(index);
  if(contentIFrame && contentIFrame.DXReloadAfterShowRequired) {
   this.RefreshWindowContentUrl(this.GetWindow(index));
   contentIFrame.DXReloadAfterShowRequired = false;
  }
 },
 LoadWindowContentUrl: function(index) {
  var url = this.GetWindowContentIFrameUrl(index);
  this.LoadWindowContentFromUrl(index, url);
 },
 LoadWindowContentFromUrl: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  if(element && element.src != url && element.DXSrcRaw != url) {
   this.SetSrcToIframeElement(index, element, url);
   this.SetWindowContentIFrameUrl(index, element.src); 
  }
 },
 SetSrcToIframeElement: function(index, iframeElement, src) {
  this.SetIframeLoading(index, true);
  iframeElement.src = src;
  if(__aspxChrome && src.indexOf("#"))
   this.PreventScrollingAfterIframeLoaded(iframeElement)
  iframeElement.DXSrcRaw = src;
 },
 PreventScrollingAfterIframeLoaded: function(iframeElement){
  var docScrollTop = _aspxGetDocumentScrollTop();
  var onIframeLoadedHandler = function(){
   window.setTimeout(function() { 
    _aspxSetDocumentScrollTop(docScrollTop);
    _aspxDetachEventFromElement(iframeElement, "load", onIframeLoadedHandler);
   }, 0);
  };
  _aspxAttachEventToElement(iframeElement, "load", onIframeLoadedHandler);
 },
 GetWindowContentElement: function(index) {
  return this.GetWindowChild(index, "_PWC" + index);
 },
 GetWindowHeaderElement: function(index) {
  return this.GetWindowChild(index, "_PWH" + index);
 },
 GetWindowHeaders: function() {
  var elements = [];
  if(this.HasDefaultWindow())
   elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetWindowElement(-1), "dxpc-header"));
  for(var i = 0; i < this.GetWindowCount(); i++)
   elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetWindowElement(i), "dxpc-header"));
  return elements;
 },
 GetWindowSizeGripElement: function(index) {
  return this.GetWindowSizeGripLite(index);
 },
 GetWindowSizeGripLite: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(!footer)
   return null;
  var descendants = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.SizeGripLiteCssClassName);
  return descendants.length > 0 ? descendants[0] : null;
 },
 GetWindowFooterElement: function(index) {
  return this.GetWindowChild(index, "_PWF" + index);
 },
 GetContentContainer: function(index) {
  return this.GetWindowContentElement(index);
 },
 GetWindowIndex: function(element) {
  var id = element.id;
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  return parseInt(id.substr(pos + __aspxPCWIdSuffix.length));
 },
 GetWindowMainCell: function (element) {
  if (this.IeWithoutSupportDisplayTable() && this.enableAnimation)
   return _aspxGetDescendantNodesByClassName(element, ASPxClientPopupControlCssClasses.MainDivLiteCssClass)[0];
  return this.enableAnimation ? _aspxGetChildByTagName(element, "DIV", 0) : element;
 },
 GetWindowMainTable: function(element) {
  return this.GetWindowMainCell(element);
 },
 GetWindowShadowTable: function(index){
  var shadowTable = this.enableAnimation ? this.GetWindowShadowTableCore(index) : this.GetWindowElement(index);
  if (!shadowTable) return null;
  if(shadowTable.tagName != "TABLE")
   shadowTable = this.GetWindowShadowTableCore(index);
  return (shadowTable && shadowTable.tagName == "TABLE") ? shadowTable : null;
 },
 GetWindowShadowTableCore: function(index) {
  return this.GetWindowChild(index, "_PWST" + index);
 },
 GetWindowClientTable: function(index) {
  return this.GetWindowElement(index);
 },
 GetWindowIsShown: function (index) {
  if (0 <= index && index < this.shownArray.length)
   return this.shownArray[index];
  return this.shown;
 },
 SetWindowIsShown: function (index, shown) {
  if (0 <= index && index < this.shownArray.length)
   this.shownArray[index] = shown;
  else
   this.shown = shown;
 },
 GetWindowLeft: function(index) {
  if(0 <= index && index < this.leftArray.length)
   return this.leftArray[index];
  return this.left;
 },
 SetWindowLeft: function(index, left) {
  if(0 <= index && index < this.leftArray.length)
   this.leftArray[index] = left;
  else
   this.left = left;
 },
 GetWindowHeightInternal: function(index) {
  if(0 <= index && index < this.heightArray.length)
   return this.heightArray[index];
  return this.height;
 },
 GetWindowMinHeight: function(index) {
  if(0 <= index && index < this.minHeightArray.length)
   return this.minHeightArray[index];
  return this.minHeight;
 },
 GetWindowMaxHeight: function(index) {
  if(0 <= index && index < this.maxHeightArray.length)
   return this.maxHeightArray[index];
  return this.maxHeight;
 },
 SetWindowHeight: function(index, height) {
  if(0 <= index && index < this.heightArray.length)
   this.heightArray[index] = height;
  else
   this.height = height;
 },
 GetWindowWidthInternal: function(index) {
  if(0 <= index && index < this.widthArray.length)
   return this.widthArray[index];
  return this.width;
 },
 GetWindowMinWidth: function(index) {
  if(0 <= index && index < this.minWidthArray.length)
   return this.minWidthArray[index];
  return this.minWidth;
 },
 GetWindowMaxWidth: function(index) {
  if(0 <= index && index < this.maxWidthArray.length)
   return this.maxWidthArray[index];
  return this.maxWidth;
 },
 SetWindowWidth: function(index, width) {
  if(0 <= index && index < this.widthArray.length)
   this.widthArray[index] = width;
  else
   this.width = width;
 },
 GetWindowTop: function(index) {
  if(0 <= index && index < this.topArray.length)
   return this.topArray[index];
  return this.top;
 },
 SetWindowTop: function(index, top) {
  if(0 <= index && index < this.topArray.length)
   return this.topArray[index] = top;
  else
   return this.top = top;
 },
 GetWindowsStateInputElement: function() {
  return _aspxGetElementById(this.name + "WS");
 },
 GetZIndex: function(index) {
  if(0 <= index && index < this.zIndexArray.length)
   return this.zIndexArray[index];
  return this.zIndex;
 },
 GetCurrentZIndex: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(element.style.zIndex != "")
    return element.style.zIndex;
   if(0 <= index && index < this.GetWindowCountCore())
    return this.zIndexArray[index];
   return this.zIndex;
  }
 },
 GetMainWindowWidth: function(index, noCache){
  return this.GetClientWindowWidth(index, true, noCache);
 },
 GetCurrentWindowWidth: function(index) {
  return this.GetClientWindowWidth(index);
 },
 GetClientWindowWidth: function(index, outerSize, noCache) {
  if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))){
   var cachedSize = this.GetWindowCachedSize(index);
   if (cachedSize != null)
    return cachedSize.width;
  }
  var element = this.GetWindowElement(index);
  if(element != null) 
   return element.offsetWidth;
 },
 GetMainWindowHeight: function(index, noCache){
  return this.GetClientWindowHeight(index, true, noCache);
 },
 GetCurrentWindowHeight: function(index) {
  return this.GetClientWindowHeight(index);
 },
 GetClientWindowHeight: function(index, outerSize, noCache) {
  if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))){
   var cachedSize = this.GetWindowCachedSize(index);
   if (cachedSize != null)
    return cachedSize.height;
  }
  var element = this.GetWindowElement(index);
  if(element != null) 
   return element.offsetHeight;
 },
 GetIframeLoading: function(index) {
  if(0 <= index && index < this.iframeLoadingArray.length)
   return this.iframeLoadingArray[index];
  return this.iframeLoading;
 },
 SetIframeLoading: function(index, value) {
  if(0 <= index && index < this.iframeLoadingArray.length)
   this.iframeLoadingArray[index] = value;
  else
   this.iframeLoading = value;
 },
 GetAutoUpdatePosition: function(index) {
  if(0 <= index && index < this.autoUpdatePositionArray.length)
   return this.autoUpdatePositionArray[index];
  return this.autoUpdatePosition;
 },
 GetClientPopupPos: function(element, popupElement, pos, isX, isDragged) {
  var index = this.GetWindowIndex(element);
  var popupPosition = null;
  if(isDragged)
   popupPosition = new _aspxPopupPosition(pos == __aspxInvalidPosition ? this.GetPosition(index, isX) : pos, false);
  else
   popupPosition = isX ? this.GetClientPopupPosX(element, popupElement, pos) : this.GetClientPopupPosY(element, popupElement, pos);
  popupPosition.position = _aspxPrepareClientPosForElement(popupPosition.position, element, isX);
  if(__aspxFirefox && __aspxBrowserVersion < 3 && this.GetWindowModalElement(index))
   popupPosition.position -= isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
  return popupPosition;
 },
 GetClientPopupPosX: function(element, popupElement, x) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPxClientPopupUtils.GetPopupAbsoluteX(mainElement, this.GetShadowWidth(), popupElement, this.popupHorizontalAlign, this.popupHorizontalOffset,
   x, this.GetWindowLeft(this.GetWindowIndex(element)), this.rtl, this.isPopupFullCorrectionOn);
  return this.CorrectPopupPositionForClientWindow(element, popupPosition, true);
 },
 GetClientPopupPosY: function(element, popupElement, y) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPxClientPopupUtils.GetPopupAbsoluteY(mainElement, this.GetShadowHeight(), popupElement, this.popupVerticalAlign, this.popupVerticalOffset,
   y, this.GetWindowTop(this.GetWindowIndex(element)), this.isPopupFullCorrectionOn);
  return (this.allowCorrectYOffsetPosition ? this.CorrectPopupPositionForClientWindow(element, popupPosition, false) : popupPosition);
 },
 CorrectPopupPositionForClientWindow: function(element, popupPosition, isX) {
  if(element.isPopupPositionCorrectionOn && this.isPopupFullCorrectionOn) {
   popupPosition.position = ASPxClientPopupUtils.AdjustPositionToClientScreen(element,
    isX ? this.GetShadowWidth() : this.GetShadowHeight(), popupPosition.position, isX);
  }
  return popupPosition;
 },
 DoShowWindow: function(index, popupElementIndex, evt) {
  if(!this.InternalIsWindowVisible(index)) {
   var x = _aspxGetEventX(evt);
   var y = _aspxGetEventY(evt);
   this.DoShowWindowAtPos(index, x, y, popupElementIndex, true, true, evt);
  }
 },
 AdjustContentOnShow: function(index) {
  var windowElement = this.GetWindowElement(index);
  if(this.adjustInnerControlsSizeOnShow)
   aspxGetControlCollection().AdjustControls(windowElement);
 },
 DoShowWindowAtPos: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt) {
  if(!this.isInitialized)
   this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.StopCloseAnimation(index);
   if(this.adjustInnerControlsSizeOnShow) {
    var windowContent = this.GetContentContainer(index);
    var collection = aspxGetControlCollection();
    collection.CollapseControls(windowContent);
   }
   this.FFTextCurFixShow(index, true);
   if(closeOtherWindows)
    aspxGetPopupControlCollection().DoHideAllWindows(element, this.GetWindowElementId(index), false);
   var isMoving = this.InternalIsWindowVisible(index);
   _aspxSetElementDisplay(element, true);
   element.style.display = this.HasAnyScrollBars(index) || this.IeWithoutSupportDisplayTable() ? "block" : "table";
   element.style.position = "absolute";
   var scrollDiv = this.GetWindowScrollDiv(index),
    shouldResetScrollSize = scrollDiv && this.enableContentScrolling && _aspxGetDocumentMaxClientHeight() <= element.offsetHeight,
    savedScrollDivHeight = shouldResetScrollSize && scrollDiv.style.height;
   if (shouldResetScrollSize)
    scrollDiv.style.height = 0;
   var cachedSize = this.GetWindowCachedSize(index);
   if(cachedSize != null) {
    this.SetWindowSize(this.GetWindow(index), cachedSize.width, cachedSize.height);
    this.ResetWindowCachedSize(index);
   }
   if(!this.GetWindowIsShown(index)) {
    var liteWidth = Math.max(this.GetWindowWidthInternal(index), this.GetWindowMinWidth(index));
    var maxWidth = this.GetWindowMaxWidth(index);
    if(maxWidth)
     liteWidth = Math.min(liteWidth, maxWidth);
    var liteHeight = Math.max(this.GetWindowHeightInternal(index), this.GetWindowMinHeight(index));
    var maxHeight = this.GetWindowMaxHeight(index);
    if(maxHeight)
     liteHeight = Math.min(liteHeight, maxHeight);
    this.SetClientWindowSizeCoreLite(index, liteWidth, liteHeight);
    this.SetWindowIsShown(index, true);
   }
   this.RefreshRootDivElementSize(index);
   var popupElement = this.GetPopupElement(index, popupElementIndex);
   if(popupElement)
    this.SetLastShownPopupElementIndex(index, popupElementIndex);
   var isDragged = this.GetIsDragged(index);
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, isDragged);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, isDragged);
   var clientX = horizontalPopupPosition.position;
   var clientY = verticalPopupPosition.position;
   this.SetWindowPos(index, element, clientX, clientY);
   if(shouldResetScrollSize)
    scrollDiv.style.height = savedScrollDivHeight;
   if(this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
    ASPxClientPopupUtils.BodyScrollHelper.HideBodyScroll();
   this.DoShowWindowModalElement(index);
   var isAnimationNeed = this.enableAnimation && this.popupAnimationType != "none" && !isMoving;
   if(isAnimationNeed) {
    if(this.popupAnimationType === 'slide')
     this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
    else
     this.StartFadeAnimation(element, index);
   } else
    _aspxSetElementVisibility(element, true);
   this.SetWindowPopUpReasonMouseEvent(index, evt);
   if(!isAnimationNeed && __aspxNetscape && this.GetWindowModalElement(index)) {
    _aspxSetElementDisplay(element, false);
    _aspxSetElementDisplay(element, true);
   }
   this.ShowWindowContentUrl(index);
   this.AdjustContentOnShow(index);
   var scrollDiv = this.GetWindowScrollDiv(index);
   if(scrollDiv && this.enableContentScrolling) {
    var dimension = null;
    var windowMainCell = this.GetWindowMainCell(element);
    if(windowMainCell.style.width && windowMainCell.style.height)
     dimension = 'both';
    else if(windowMainCell.style.width)
     dimension = 'width';
    else if(windowMainCell.style.height)
     dimension = 'height';
    if(!dimension)
     return;
    _aspxSetElementDisplay(scrollDiv, false);
    this.SetWindowScrollDivSize(scrollDiv, index, dimension);
    _aspxSetElementDisplay(scrollDiv, true);
   }
   if(!isMoving) {
    aspxGetPopupControlCollection().RegisterVisibleWindow(element, this, index);
    this.RaisePopUp(index);
    if(!this.enableAnimation)
     this.OnWindowShown(index);
   }
   if(allowChangeZIndex) 
    aspxGetPopupControlCollection().ActivateWindowElement(element);
   this.CorrectWindowSizeGripPositionLite(index);
   this.CorrectWindowHeaderText(index);
   this.InitMaximizedWindows(index);
   this.InitCollapsedWindows(index);
   if (this.GetIsPinned(index)) window.setTimeout(function(){this.HoldPosition(index, true);}.aspxBind(this), 0);
   if (!this.GetShowOnPageLoad(index))
    this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
  }
 },
 NormalizeWindowSize: function(index, isMaximized) {
  var width = this.GetClientWindowWidth(index),
   height = this.GetClientWindowHeight(index),
   normWidth = width,
   normHeight = height,
   maxWidth = this.GetWindowMaxWidth(index),
   minWidth = this.GetWindowMinWidth(index),
   maxHeight = this.GetWindowMaxHeight(index),
   minHeight = this.GetWindowMinHeight(index);
  if(maxWidth)
   normWidth = Math.min(normWidth, maxWidth);
  if(minWidth)
   normWidth = Math.max(normWidth, minWidth);
  if(maxHeight)
   normHeight = Math.min(normHeight, maxHeight);
  if(minHeight)
   normHeight = Math.max(normHeight, minHeight);
  if(normWidth !== width || normHeight !== height)
   this.SetWindowSize(this.GetWindow(index), normWidth, normHeight);
  if(isMaximized) {
   var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
   var documentClientHeight = _aspxGetDocumentClientHeight();
   if(this.GetIsCollapsed(index)) {
    if(normWidth != documentClientWidth) {
     this.SetWindowSizeByIndexCore(index, documentClientWidth, normHeight, true);
    }
   } else {
    if(normWidth != documentClientWidth || normHeight != documentClientHeight) {
     this.SetWindowSizeByIndexCore(index, documentClientWidth, documentClientHeight, false);
    }
   }
  }
 },
 RefreshRootDivElementSize: function(index) {
  if(this.WindowRootElementIsDiv()) {
   var window = this.GetWindowElement(index);
   var windowMainTable = this.GetWindowMainTable(window);
   var height = windowMainTable.offsetHeight;
   var width = windowMainTable.offsetWidth;
   height -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(window);
   width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(window);
   _aspxSetStyles(window, { width: width, height: height });
  }
 },
 WindowRootElementIsDiv: function() {
  return this.enableAnimation;
 },
 DoShowWindowIFrame: function(index, x, y, width, height) {
  if(!this.renderIFrameForPopupElements) return;
  var element = this.GetWindowElement(index);
  var iFrame = this.GetWindowIFrame(index);
  if(element && iFrame) {
   var cell = this.GetWindowMainCell(element);
   if(width < 0)
    width = cell.offsetWidth;
   if(height < 0)
    height = cell.offsetHeight;
   _aspxSetStyles(iFrame, { width: width, height: height });
   if (x != __aspxInvalidPosition && y != __aspxInvalidPosition)
    _aspxSetStyles(iFrame, { left: x, top: y });
   if(__aspxIE || __aspxFirefox)
    this.ClearWindowIframeBodyInnerHtml(iFrame);
   _aspxSetElementDisplay(iFrame, true);
  }
 },
 GetIframeBody: function(iFrame) {
  var document = iFrame.contentDocument || iFrame.contentWindow.document;
  if(document)
   return document.getElementsByTagName('body')[0];
 },
 ClearWindowIframeBodyInnerHtml: function(iFrame) {
  var iFrameBody = this.GetIframeBody(iFrame);
  if(iFrameBody)
   iFrameBody.innerHTML = "";
 },
 DoShowWindowModalElement: function(index) {
  var modalElement = this.GetWindowModalElement(index);
  if(modalElement) {
   var bodyScrollHasJustBeingHidden = false;
   if(this.hideBodyScrollWhenModal && !this.IsWindowVisible(this.GetWindow(index))) {
    bodyScrollHasJustBeingHidden = true;
    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
    ASPxClientPopupUtils.BodyScrollHelper.HideBodyScroll();
   }
   if (__aspxIE)
    _aspxAttachEventToElement(modalElement, _aspxGetMouseWheelEventName(), function (evt) { return _aspxPreventEventAndBubble(evt); });
   _aspxSetElementDisplay(modalElement, true);
   aspxGetPopupControlCollection().AdjustModalElementBounds(modalElement);
   if (this.popupAnimationType == "fade") {
    var endOpacity = this.GetModalElementEndAnimationOpacity(index);
    if (__aspxIE && __aspxBrowserMajorVersion < 9) {
     _aspxSetElementVisibility(modalElement, true);
     ASPxAnimationHelper.setOpacity(modalElement, 0);
    } else {
     ASPxAnimationHelper.setOpacity(modalElement, 0);
     _aspxSetElementVisibility(modalElement, true);
    }
    ASPxAnimationHelper.fadeTo(modalElement, { to: endOpacity });
   } else {
    _aspxSetElementVisibility(modalElement, true);
   }
   aspxGetPopupControlCollection().RegisterVisibleModalElement(modalElement);
   if(bodyScrollHasJustBeingHidden)
    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 DoHideWindowCore: function(index) {
  this.FFTextCurFixHide(index, true);
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(this.HasCloseAnimation())
    this.PrepareElementAfterCloseAnimation(element);
   element.isHiding = true;
   this.SetIsDragged(index, false);
   this.UpdateWindowsStateInputElement();
   this.UpdateWindowsStateCookie();
   element.isHiding = false;
   this.StopShowAnimation(index);
   _aspxSetElementDisplay(element, false);
   _aspxSetElementVisibility(element, false);
   if(this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
    ASPxClientPopupUtils.BodyScrollHelper.RestoreBodyScroll();
   this.DoHideWindowModalElement(element);
   this.DoHideWindowIFrame(element);
   aspxGetPopupControlCollection().UnregisterVisibleWindow(element);
   this.HideWindowLoadingPanel(index);
  }
 },
 PrepareElementAfterCloseAnimation: function(element) {
  element.closeAnimationCompleted = true;
  if(this.closeAnimationType == "fade")
   _aspxSetStyles(element, { opacity: 1 });
  else
   _aspxSetStyles(this.GetWindowMainTable(element), {
    left: 0,
    top: 0
   });
 },
 HasCloseAnimation: function(){
  return this.closeAnimationType != "none";
 },
 StopCloseAnimation: function(index) {
  var element = this.GetWindowElement(index);
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted) {
   ASPxAnimationHelper.cancelAnimation(element);
   this.DoHideWindowCore(index);
  }
 },
 StopShowAnimation: function(index){
  if(this.popupAnimationType != "none") {
   var stopAnimation = this.popupAnimationType === 'slide' ? ASPxClientPopupUtils.StopAnimation : ASPxAnimationHelper.cancelAnimation;
   stopAnimation(this.GetWindowElement(index));
  }
 },
 DoHideWindowCoreWithAnimation: function(index) {
  this.StopShowAnimation(index);
  var element = this.GetWindowElement(index);
  element.closeAnimationCompleted = false;
  if(this.closeAnimationType == "fade") {
   ASPxAnimationHelper.fadeOut(element, function() {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index);
   }.aspxBind(this), this.fadeAnimationDuration);
  }
  else{
   this.DoHideWindowWithSlideAnimation(index);
  }
 },
 DoHideWindowWithSlideAnimation: function(index) {
  var element = this.GetWindowElement(index);
  var horizontalPopupPosition = this.GetClientPopupPos(element, null, __aspxInvalidPosition, true, true);
  var verticalPopupPosition = this.GetClientPopupPos(element, null, __aspxInvalidPosition, false, true);
  var horizontalDirection = ASPxClientPopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
  var verticalDirection = ASPxClientPopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
  ASPxClientPopupUtils.InitAnimationDivCore(element);
  ASPxAnimationHelper.createMultipleAnimationTransition(this.GetWindowMainTable(element), {
   duration: this.slideAnimationDuration,
   onComplete: function (element) {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index);
   }.aspxBind(this)
  }).Start({
   left: { to: horizontalDirection * element.offsetWidth, unit: "px" },
   top: { to: verticalDirection * element.offsetHeight, unit: "px" }
  });
 },
 DoHideWindow: function(index, dontRaiseClosing) {
  if(!this.InternalIsWindowVisible(index)) return;
  var cancel = !dontRaiseClosing && this.RaiseClosing(index);
  if(!cancel) {
   if(this.HasCloseAnimation())
    this.DoHideWindowCoreWithAnimation(index);
   else {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index);
   }
  }
  return cancel;
 },
 DoHideWindowIFrame: function(element) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   _aspxSetElementDisplay(iFrame, false);
 },
 DoHideWindowModalElement: function(element) {
  var modalElement = element.modalElement;
  if(modalElement) {
   aspxGetPopupControlCollection().UnregisterVisibleModalElement(modalElement);
   if(this.hideBodyScrollWhenModal) {
    if(__aspxWebKitFamily)
     aspxGetPopupControlCollection().LockScrollEvent();
    ASPxClientPopupUtils.BodyScrollHelper.RestoreBodyScroll();
    if(__aspxWebKitFamily)
     aspxGetPopupControlCollection().UnlockScrollEvent();
   }
   _aspxSetStyles(modalElement, { width: 1, height: 1 });
   _aspxSetElementVisibility(modalElement, false);
   _aspxSetElementDisplay(modalElement, false);
  }
 },
 SetWindowDisplay: function(index, value) {
  var pcwElement = this.GetWindowElement(index);
  this.SetFFTextCurFixShowing(index, value, false);
  _aspxSetElementDisplay(pcwElement, value);
 },
 GetTextCurFixDiv: function(index) {
  return _aspxGetElementById(this.name + "_" + "TCFix" + index);
 },
 FFTextCurFixShow: function(index, isSetVisibility) {
  this.SetFFTextCurFixShowing(index, true, isSetVisibility);
 },
 FFTextCurFixHide: function(index, isSetVisibility) {
  this.SetFFTextCurFixShowing(index, false, isSetVisibility);
 },
 IsFFTextCurFixRequired: function(index) {
  return __aspxFirefox && __aspxBrowserVersion < 3 && this.GetWindowModalElement(index);
 },
 SetFFTextCurFixShowing: function(index, value, isSetVisibility) {
  if(this.IsFFTextCurFixRequired(index)) {
   var fixDiv = this.GetTextCurFixDiv(index);
   if(fixDiv) {
    if(isSetVisibility)
     _aspxSetElementVisibility(fixDiv, value);
    _aspxSetElementDisplay(fixDiv, value);
   }
  }
 },
 SetWindowPos: function (index, element, x, y) {
  _aspxSetStyles(element, { left: x, top: y });
  this.DoShowWindowIFrame(index, x, y, __aspxInvalidDimension, __aspxInvalidDimension);
  this.SetIsDragged(index, true);
  this.SetWindowLeft(index, _aspxGetAbsoluteX(element));
  this.SetWindowTop(index, _aspxGetAbsoluteY(element));
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 OnWindowShown: function(windowIndex) {
  this.EnsureContent(windowIndex, false);
  this.EnsureIFrameHeightAdjusted(windowIndex);
  this.NormalizeWindowSize(windowIndex, this.GetIsMaximized(windowIndex));
  this.RaiseShown(windowIndex);
  var loadingElementsWillNotBeShown = !this.lpTimers[windowIndex] || this.lpTimers[windowIndex] < 0;
  if(this.InWindowCallback(windowIndex) && loadingElementsWillNotBeShown) {
   this.ShowWindowLoadingElementsInternal(windowIndex);
  }
 },
 EnsureContent: function(windowIndex, isInit) {
  var element = this.GetWindowElement(windowIndex);
  if(element && !element.loaded && !element.loading) {
   var shouldLoad = this.contentLoadingMode == "OnPageLoad" || this.contentLoadingMode == "OnFirstShow" && !isInit;
   if(shouldLoad) {
    element.loading = true;
    this.CreateWindowCallback(windowIndex, windowIndex);
   } else if(this.contentLoadingMode == "Default")
    element.loaded = true;
  }
 },
 CreateWindowCallback: function(windowIndex, argument) {
  this.IncreaseWindowRequestCount(windowIndex);
  var element = this.GetWindowElement(windowIndex);
  if(this.contentLoadingMode != "OnPageLoad" || !element.loading || this.GetShowOnPageLoad(windowIndex))
   this.ShowWindowLoadingElements(windowIndex);
  this.CreateCallback(argument);
 },
 OnCallback: function(result) {
  this.OnCallbackInternal(result.html, result.index, false);
 },
 OnCallbackError: function(result, data) {
  this.OnCallbackInternal(result, _aspxIsExists(data) ? data : -1, true);
 },
 OnCallbackErrorAfterUserHandle: function(result, data) {
  this.DecreaseWindowRequestCount(data);
 },
 RaiseCallbackError: function (message) {
  var result = ASPxClientControl.prototype.RaiseCallbackError.call(this, message);
  if (result.isHandled)
   this.HideAllLoadingPanels();
  return result;
 },
 OnCallbackInternal: function(html, windowIndex, isError) {
  var element = this.GetWindowElement(windowIndex);
  element.loaded = !isError;
  element.loading = false;
  this.DecreaseWindowRequestCount(windowIndex);
  this.HideWindowLoadingPanel(windowIndex);
  this.SetWindowContentHtmlCore(windowIndex, html)
  this.savedCallbackWindowIndex = windowIndex;
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 IncreaseWindowRequestCount: function(index) {
  !this.windowRequestCount[index] ? this.windowRequestCount[index] = 1 : this.windowRequestCount[index]++;
 },
 DecreaseWindowRequestCount: function(index) {
  this.windowRequestCount[index]--;
 },
 InWindowCallback: function(windowIndex) {
  return this.windowRequestCount[windowIndex] > 0;
 },
 ShowWindowLoadingElements: function(windowIndex) {
  if(this.lpTimers[windowIndex] && this.lpTimers[windowIndex] > -1) return;
  if(this.enableCallbackAnimation)
   this.StartWindowBeginCallbackAnimation(windowIndex);
  else
   this.ShowWindowLoadingElementsInternal(windowIndex);
 },
 ShowWindowLoadingElementsInternal: function(windowIndex) {
  if(this.lpDelay > 1 && !this.enableCallbackAnimation) {
   var _this = this;
   this.lpTimers[windowIndex] = _aspxSetTimeout(function() { _this.ShowWindowLoadingPanelOnTimer(windowIndex); }, this.lpDelay);
  }
  else 
   this.ShowWindowLoadingPanel(windowIndex);
 },
 StartWindowBeginCallbackAnimation: function (windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  this.isCallbackFinishedStates[windowIndex] = false;
  ASPxAnimationHelper.fadeOut(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowBeginCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowBeginCallbackAnimation: function (windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = false;
  if(!this.isCallbackFinishedStates[windowIndex])
   this.ShowWindowLoadingElementsInternal(windowIndex);
  else 
   this.DoCallback(this.savedCallbackResults[windowIndex]);
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  var windowIndex = this.EvalCallbackResult(callbackResult).result.index;
  if(this.enableCallbackAnimation && this.callbackAnimationProcessings[windowIndex]) {
   this.savedCallbackResults[windowIndex] = callbackResult;
   this.isCallbackFinishedStates[windowIndex] = true;
   return true;
  }
  return false;
 },
 StartWindowEndCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  ASPxAnimationHelper.fadeIn(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowEndCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowEndCallbackAnimation: function(windowIndex) {
  this.DoEndCallback();
  this.callbackAnimationProcessings[windowIndex] = false;
 },
 CheckEndCallbackAnimationNeeded: function() {
  var windowIndex = this.savedCallbackWindowIndex;
  this.savedCallbackWindowIndex = null;
  if(windowIndex !== null && !this.callbackAnimationProcessings[windowIndex]) {
   this.StartWindowEndCallbackAnimation(windowIndex);
   return true;
  }
  return false;
 },
 CreateLoadingDiv: function(parentElement, offsetElement, windowIndex) {
  if(typeof(windowIndex) != "undefined") { 
   var loadingDiv = ASPxClientControl.prototype.CreateLoadingDiv.call(this, parentElement, offsetElement);
   loadingDiv.id += windowIndex;
   return loadingDiv;
  }
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement, windowIndex) {
  if(typeof(windowIndex) != "undefined") { 
   var loadingPanel = ASPxClientControl.prototype.CreateLoadingPanelWithAbsolutePosition.call(this, parentElement, offsetElement);
   loadingPanel.id += windowIndex;
   return loadingPanel;
  }
 },
 ShowWindowLoadingPanelOnTimer: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  this.ShowWindowLoadingPanel(windowIndex);
 },
 ClearWindowLoadingPanelTimer: function(windowIndex) {
  this.lpTimers[windowIndex] = _aspxClearTimer(this.lpTimers[windowIndex]);  
 },
 ShowWindowLoadingPanel: function(windowIndex) {
  if (!this.IsExistLoadingPanel())
   return;
  if(!this.loadingPanels[windowIndex]) {
   var contentElement = this.GetWindowContentWrapperElement(windowIndex);
   this.loadingDivs[windowIndex] = this.CreateLoadingDiv(this.GetWindowElement(windowIndex).parentNode, contentElement, windowIndex);
   this.loadingPanels[windowIndex] = this.CreateLoadingPanelWithAbsolutePosition(this.GetWindowElement(windowIndex).parentNode, contentElement, windowIndex);
  }
 },
 HideAllLoadingPanels: function () {
  if (this.HasDefaultWindow())
   this.HideWindowLoadingPanel(-1);
  for (var i = 0; i < this.GetWindowCount() ; i++)
   this.HideWindowLoadingPanel(i);
 },
 HideWindowLoadingPanel: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  if(this.loadingDivs[windowIndex]) {
   _aspxRemoveElement(this.loadingDivs[windowIndex]);
   this.loadingDivs[windowIndex] = null;
  }
  if(this.loadingPanels[windowIndex]) {
   _aspxRemoveElement(this.loadingPanels[windowIndex]);
   this.loadingPanels[windowIndex] = null;
  }
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 IsLoadingContainerVisible: function() {
  return true;
 },
 IsExistLoadingPanel: function() {
  return !!this.GetLoadingDiv();
 },
 InitializeDOM: function() {
  if(this.HasDefaultWindow()) {
   var windowElement = this.GetWindowElement(-1);
   if(windowElement)
    windowElement["dxinit"] = true;
  }
  for(var i = 0; i < this.GetWindowCount(); i++) {
   var windowElement = this.GetWindowElement(i);
   if(windowElement)
    windowElement["dxinit"] = true;
  }
 },
 IsDOMInitialized: function() {
  if(this.HasDefaultWindow()) {
   var windowElement = this.GetWindowElement(-1);
   return windowElement && windowElement["dxinit"];
  }
  for(var i = 0; i < this.GetWindowCount(); i++) {
   var windowElement = this.GetWindowElement(i);
   if(!windowElement || !windowElement["dxinit"])
    return false;
  }
  return true;
 },
 PerformCallback: function(parameter) {
  this.PerformWindowCallback(null, parameter);
 },
 PerformWindowCallback: function(window, parameter) {
  parameter = _aspxIsExists(parameter) ? parameter.toString() : ""
  var index = (window != null) ? window.index : -1;
  if(!this.InWindowCallback(index)) {
   var windowCallbackArguments = index + ";" + parameter;
   this.CreateWindowCallback(index, windowCallbackArguments);
  }
 },
 RegisterInControlTree: function(tree) {
  var mainNode = tree.createNode(null, this);
  if(this.HasDefaultWindow())
   this.RegisterRelatedNodeForWindowElement(tree, -1, mainNode);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.RegisterRelatedNodeForWindowElement(tree, i, mainNode);
 },
 RegisterRelatedNodeForWindowElement: function(tree, windowElementIndex, mainNode) {
  var windowElement = this.GetWindowElement(windowElementIndex);
  if(windowElement) {
   var childNode = tree.createNode(windowElement.id, null);
   tree.addRelatedNode(mainNode, childNode);
  }
 },
 PrepareContentCellForHeigthCorrection: function(windowIndex) {
  if(__aspxIE)
   this.GetWindowContentElement(windowIndex).style.height = "0px";
 },
 CorrectContentCellHeight: function(element, isResizing) {
  if(__aspxIE)
   this.CorrectContentCellHeightIE(element, isResizing);
  if(__aspxOpera)
   this.CorrectContentCellHeightOpera(element, isResizing);
 },
 CorrectContentCellHeightOpera: function(element, isResizing) {
  var index = this.GetWindowIndex(element);
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  if(contentIFrame) {
   contentIFrame.style.height = "0px";
   var contentIFrameDiv = this.GetWindowContentIFrameDivElement(index);
   if(contentIFrameDiv)
    contentIFrameDiv.style.height = "0px";
   var contentCell = this.GetWindowContentElement(index);
   var height = contentCell.clientHeight;
   contentIFrame.style.height = height + "px";
   if(contentIFrameDiv)
    contentIFrameDiv.style.height = contentIFrame.style.height;
   var correction = contentCell.clientHeight - height;
   contentIFrame.style.height = (height - correction) + "px";
   if(contentIFrameDiv)
    contentIFrameDiv.style.height = contentIFrame.style.height;
  }
 },
 CorrectContentCellHeightIE: function(element, isResizing) {  
  var index = this.GetWindowIndex(element);
  var clientTable = this.GetWindowClientTable(index);
  var headerCell = this.GetWindowHeaderElement(index);
  var contentCell = this.GetWindowContentElement(index);
  var footerCell = this.GetWindowFooterElement(index);
  var windowMainCell = this.GetWindowMainCell(element);
  var mainCellHeight = windowMainCell.clientHeight - this.GetTwoVerticalPaddingSize(windowMainCell);
  var headerHeight = headerCell ? _aspxGetCeilOffsetHeight(headerCell) : 0;
  var footerHeight = footerCell ? footerCell.offsetHeight : 0;
  if(isResizing) {
   headerHeight = this.GetHeaderHeight(index);
   footerHeight = this.GetFooterHeight(index);
  }
  else {
   this.SetHeaderHeight(index, headerHeight);
   this.SetFooterHeight(index, footerHeight);
  }
  var correctedHeight = Math.max(0, mainCellHeight - headerHeight - footerHeight);
  contentCell.style.height = correctedHeight + "px";
  var verticalsPaddings = contentCell.offsetHeight - correctedHeight;
  contentCell.style.height = correctedHeight - verticalsPaddings + "px";
 },
 GetTwoVerticalPaddingSize: function(element) {
  var heightWithBorders = element.clientHeight;
  var paddingTopBackup = element.style.paddingTop;
  var paddingBottomBackup = element.style.paddingBottom;
  element.style.paddingTop = "0px";
  element.style.paddingBottom = "0px";
  var heightWithoutBorders = element.clientHeight;
  element.style.paddingTop = paddingTopBackup;
  element.style.paddingBottom = paddingBottomBackup;
  return (heightWithBorders - heightWithoutBorders);
 },
 InternalIsWindowVisible: function(index) {
  var element = this.GetWindowElement(index);
  if(!element)
   return false;
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted)
   return false;
  var currentStyle = _aspxGetCurrentStyle(element);
  return ((currentStyle && currentStyle.visibility != "hidden") && _aspxGetElementDisplay(element) ? true : false);
 },
 InternalIsWindowDisplayed: function(index) {
  var element = this.GetWindowElement(index);
  return (element != null) ? _aspxGetElementDisplay(element) : false;
 },
 OnActivate: function(index, evt) {
  var element = this.GetWindowElement(index);
  if(element != null)
   aspxGetPopupControlCollection().ActivateWindowElement(element, evt);
 },
 OnAnimationStop: function(index) {
  this.OnWindowShown(index);
  if(__aspxFirefox) 
   this.GetWindowElement(index).style.display = "table";
 },
 OnDragStart: function(evt, index) {
  this.SetIsDragged(index, true);
  this.ShowDragCursor(index);
  if(this.GetWindowContentIFrameElement(index))
   this.HideIframeElementBeforeDragging(index);
  this.InitDragInfo(index, evt);
 },
 InitDragInfo: function(index, evt) {
  var element = this.GetWindowElement(index);
  var gragXOffset = _aspxGetAbsoluteX(element) - _aspxGetEventX(evt);
  var gragYOffset = _aspxGetAbsoluteY(element) - _aspxGetEventY(evt);
  var xClientCorrection = _aspxGetPositionElementOffset(element, true);
  var yClientCorrection = _aspxGetPositionElementOffset(element, false);
  gragXOffset -= xClientCorrection;
  gragYOffset -= yClientCorrection;
  aspxGetPopupControlCollection().InitDragObject(this, index, gragXOffset, gragYOffset, xClientCorrection, yClientCorrection);
 },
 OnDrag: function(index, x, y, xClientCorrection, yClientCorrection) {
  var element = this.GetWindowElement(index);
  if (element != null) {
   _aspxSetStyles(element, { left: x, top: y });
   this.SetWindowLeft(index, x + xClientCorrection);
   this.SetWindowTop(index, y + yClientCorrection);
   var iFrame = element.overflowElement;
   if (iFrame)
    _aspxSetStyles(iFrame, { left: x, top: y });
   if(__aspxOpera)
    _aspxClearSelection();
  }
 },
 OnDragStop: function(index) {
  var element = this.GetWindowElement(index);
  this.HideDragCursor(index);
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
  if(this.GetWindowContentIFrameElement(index))
   this.ShowIframeElementAfterDragging(index);
 },
 OnPopupElementMouseOver: function(evt, popupElement) {
  if(popupElement != null) {
   var index = popupElement.DXPopupWindowIndex;
   var isVisible = this.InternalIsWindowVisible(index);
   var popupElementIndex = popupElement.DXPopupElementIndex;
   if(this.GetLastOverPopupElementIndex(index) != popupElementIndex) {
    if(aspxGetPopupControlCollection().IsAppearTimerActive())
     aspxGetPopupControlCollection().ClearAppearTimer();
    if(aspxGetPopupControlCollection().IsDisappearTimerActive())
     aspxGetPopupControlCollection().ClearDisappearTimer();
    if(isVisible) {
     this.DoHideWindow(index);
     isVisible = false;
    }
   }
   if(!isVisible) {
    aspxGetPopupControlCollection().SetAppearTimer(this.name, index, popupElement.DXPopupElementIndex, this.appearAfter, evt);
    aspxGetPopupControlCollection().InitOverObject(this, index, evt);
   }
   this.SetLastOverPopupElementIndex(index, popupElementIndex);
  }
 },
 OnPopupElementMouseOut: function(evt, popupElement) {
 },
 HideIframeElementBeforeDragging: function(index) {
  var iframeElement = this.GetWindowContentIFrameElement(index);
  if(__aspxIE) {
   this.CreateFakeDragDiv(iframeElement);
   _aspxSetElementDisplay(iframeElement, false);
  } else
   _aspxSetElementVisibility(iframeElement, false);
 },
 ShowIframeElementAfterDragging: function(index) {
  var iframeElement = this.GetWindowContentIFrameElement(index);
  if(this.fakeDragDiv != null) {
   this.RemoveFakeDragDiv(iframeElement);
   _aspxSetElementDisplay(iframeElement, true);
  } else
   _aspxSetElementVisibility(iframeElement, true);
 },
 CreateFakeDragDiv: function(iframe) {
  this.fakeDragDiv = document.createElement("div");
  _aspxSetStyles(this.fakeDragDiv, { width: iframe.offsetWidth, height: iframe.offsetHeight });
  iframe.parentElement.appendChild(this.fakeDragDiv);
 },
 RemoveFakeDragDiv: function(iframe) {
  iframe.parentElement.removeChild(this.fakeDragDiv);
  this.fakeDragDiv = null;
 },
 CreateResizePanel: function(index) {
  var element = this.GetWindowElement(index);
  var mainCell = this.GetWindowMainCell(element);
  var resizePanel = document.createElement("DIV");
  element.parentNode.appendChild(resizePanel);
  resizePanel.style.overflow = "hidden";
  resizePanel.style.position = "absolute";
  resizePanel.style.zIndex = __aspxPopupControlZIndex + aspxGetPopupControlCollection().visiblePopupWindowIds.length * 2 + 2;
  if(!this.isLiveResizingMode)
   resizePanel.style.border = "black 1px dotted";
  return resizePanel;
 },
 OnResizeStart: function(evt, index) {
  if(!aspxGetPopupControlCollection().IsResizeInint()) {
   this.SetIsResized(index, true);
   var cursor = this.CreateResizeCursorInfo(evt, index);
   if(cursor.course != "") {
    var resizePanel = this.CreateResizePanel(index);
    this.UpdateResizeCursor(resizePanel, cursor.verticalDirection, cursor.horizontalDirection);
    aspxGetPopupControlCollection().InitResizeObject(this, index, cursor, resizePanel);
    this.OnResize(evt, index, cursor, resizePanel);
   }
  }
  return aspxGetPopupControlCollection().IsResizeInint();
 },
 OnResize: function(evt, index, cursor, resizePanel) {
  this.OnResizePanelLite(evt, index, cursor, resizePanel);
  if(this.isLiveResizingMode)
   this.OnResizeWindow(index, cursor, resizePanel);
  _aspxClearSelection();
  if(__aspxWebKitTouchUI)
   evt.preventDefault();
  if (this.GetIsPinned(index))
   this.HoldPosition(index, true, resizePanel);
 },
 OnResizePanelLite: function(evt, index, cursor, resizePanel) {
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  var element = this.GetWindowElement(index);
  if(__aspxIE && __aspxBrowserVersion >= 10) {
   x = Math.round(x);
   y = Math.round(y);
  }
  var newLeft = _aspxGetAbsoluteX(element);
  var newTop = _aspxGetAbsoluteY(element);
  var newWidth = element.offsetWidth;
  var newHeight = element.offsetHeight;
  if(cursor.verticalDirection == "n") {
   if(!this.fixedBottom)
    this.fixedBottom = newTop + newHeight;
   newHeight = newHeight + (newTop - y) + cursor.verticalOffset;
   newTop = y - cursor.verticalOffset;
  }
  if(cursor.verticalDirection == "s") {
   newHeight = newHeight + (y - (newTop + newHeight)) + cursor.verticalOffset;
   this.fixedBottom = null;
  }
  if(cursor.horizontalDirection == "w") {
   if(!this.fixedRight)
    this.fixedRight = newLeft + newWidth;
   newWidth = newWidth + (newLeft - x) + cursor.horizontalOffset;
   newLeft = x - cursor.horizontalOffset;
  }
  if(cursor.horizontalDirection == "e") {
   newWidth = newWidth + (x - (newLeft + newWidth)) + cursor.horizontalOffset;
   this.fixedRight = null;
  }
  if(newWidth > 0 && newHeight > 0) {
   var minWidth = this.GetWindowMinWidth(index);
   var maxWidth = this.GetWindowMaxWidth(index);
   if(minWidth && newWidth < minWidth)
    newWidth = minWidth;
   if(maxWidth && newWidth > maxWidth)
    newWidth = maxWidth;
   var minHeight = this.GetWindowMinHeight(index);
   var maxHeight = this.GetWindowMaxHeight(index);
   if(minHeight && newHeight < minHeight)
    newHeight = minHeight;
   if(maxHeight && newHeight > maxHeight)
    newHeight = maxHeight;
   newLeft = _aspxPrepareClientPosForElement(newLeft, element, true);
   newTop = _aspxPrepareClientPosForElement(newTop, element, false);
   if(__aspxIE && __aspxBrowserVersion >= 10) {
    newLeft = Math.round(newLeft);
    newTop = Math.round(newTop);
    newHeight = Math.round(newHeight);
    newWidth = Math.round(newWidth);
   }
   _aspxSetStyles(resizePanel, {
    left: newLeft, top: newTop,
    width: newWidth, height: newHeight
   });
   this.SetWindowLeft(index, _aspxGetAbsoluteX(element));
   this.SetWindowTop(index, _aspxGetAbsoluteY(element));
  }
 },
 OnResizeWindow: function(index, cursor, resizePanel) {
  var windowElement = this.GetWindowElement(index);
  var left = _aspxGetAbsoluteX(resizePanel);
  var top = _aspxGetAbsoluteY(resizePanel);
  this.SetClientWindowSizeLite(index, resizePanel.offsetWidth, resizePanel.offsetHeight);
  var bottom = top + windowElement.offsetHeight;
  var right = left + windowElement.offsetWidth;
  if(this.fixedBottom && (bottom > this.fixedBottom || bottom < this.fixedBottom))
   top = this.fixedBottom - windowElement.offsetHeight;
  if(this.fixedRight && (right > this.fixedRight || right < this.fixedRight))
   left = this.fixedRight - windowElement.offsetWidth;
  this.fixedBottom = null;
  this.fixedRight = null;
  var styleLeft = _aspxPrepareClientPosForElement(left, windowElement, true);
  var styleTop = _aspxPrepareClientPosForElement(top, windowElement, false);
  if(__aspxIE && __aspxBrowserVersion >= 10) {
   styleLeft = Math.round(styleLeft);
   styleTop = Math.round(styleTop);
  }
  _aspxSetStyles(windowElement, {
   left: styleLeft,
   top: styleTop
  });
  if(this.InternalIsWindowVisible(index)) 
   this.DoShowWindowIFrame(index, left, top, __aspxInvalidDimension, __aspxInvalidDimension);
  this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
 },
 OnResizeStop: function(evt, index, cursor, resizePanel) {
  if(this.allowResize) {
   if(!this.isLiveResizingMode) {
    var windowElement = this.GetWindowElement(index);
    aspxGetControlCollection().CollapseControls(windowElement);
    this.OnResizeWindow(index, cursor, resizePanel);
   }
   this.CreateResizeCursorInfo(evt, index);
   this.UpdateWindowsStateInputElement();
   this.UpdateWindowsStateCookie();
   this.RaiseResize(index);
   if(!this.isLiveResizingMode)
    aspxGetControlCollection().AdjustControls(windowElement, true);
   this.SetWindowCachedSize(index, this.GetClientWindowWidth(index), this.GetClientWindowHeight(index));
  }
 },
 OnMouseDownModalElement: function(evt, index) {
  aspxGetPopupControlCollection().DoHideAllWindows(_aspxGetEventSource(evt), "", false);
  this.SetIsPopuped(index, true)
 },
 IsRaiseAfterResizingLocked: function(){
  return this.CollapseExecuting() || this.MaximizationExecuting();
 },
 SetClientWindowSizeLite: function(index, width, height) {
  this.RaiseBeforeResizing(index);
  this.SetClientWindowSizeCoreLite(index, width, height);
  if(!this.IsRaiseAfterResizingLocked())
   this.RaiseAfterResizing(index);
 },
 HasAnyScrollBars: function(index) {
  var contentElement = this.GetWindowContentElement(index);
  var hasBothScrollBars = contentElement.style.overflow == "scroll" || contentElement.style.overflow == "auto";
  return hasBothScrollBars || contentElement.style.overflowX == "scroll" ||
    contentElement.style.overflowY == "scroll" || contentElement.style.overflowX == "auto" ||
    contentElement.style.overflowY == "auto";
 },
 SetClientWindowSizeCoreLite: function(index, width, height) {
  var contentUrl = this.GetWindowContentIFrameUrl(index);
  var needToHideContent = !contentUrl;
  var element = this.GetWindowElement(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  var contentElement = this.GetWindowContentElement(index);
  if(__aspxIE) {
   var scrollTop = contentElement.scrollTop;
   var scrollLeft = contentElement.scrollLeft;
  }
  var contentIframeElement = this.GetWindowContentIFrameElement(index);
  var iframeHeightCorrectionOnFirstShow = height > 0;
  if(contentIframeElement && (this.GetWindowIsShown(index) || iframeHeightCorrectionOnFirstShow))
   contentIframeElement.style.height = "0px";
  contentWrapper.style.height = "";
  contentWrapper.style.width = "";
  contentElement.style.height = "";
  contentElement.style.width = "";
  if(needToHideContent) {
   if(__aspxIE && __aspxBrowserMajorVersion >= 7) {
    var contentElementChildren = contentElement.getElementsByTagName("*"),
     contentElementChildrenScroll = [];
    for(var i = 0; i < contentElementChildren.length; i++) {
     var child = contentElementChildren[i];
     if(!!child.scrollLeft || !!child.scrollTop)
      contentElementChildrenScroll.push([i, child.scrollLeft, child.scrollTop]);
    }
   }
   contentElement.style.display = "none";
  }
  var hasAnyScrollBars = this.HasAnyScrollBars(index);
  var elementsDisplayValue = (width || height) && hasAnyScrollBars || this.IeWithoutSupportDisplayTable() ? "block" : "table";
  element.style.display = elementsDisplayValue;
  if (!this.GetIsCollapsed(index))
   contentWrapper.style.display = elementsDisplayValue;
  if(typeof(width) != "undefined") {
   var actualWidth = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
   if(actualWidth < 0)
    actualWidth = 0;
   element.style.width = actualWidth + "px";
   if(element.offsetWidth != width){
    actualWidth += (width - element.offsetWidth);
    if(actualWidth < 0) actualWidth = 0;
    element.style.width = actualWidth + "px";
   }
   if(__aspxWebKitFamily && hasAnyScrollBars) {
    var mainDiv = this.GetWindowMainCell(element);
    var dxpcMainDiv = _aspxGetDescendantNodesByClassName(mainDiv, "dxpc-mainDiv")[0];
    var dxpcMainDivBordersAndPaddings = dxpcMainDiv ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(dxpcMainDiv) : 0;
    contentWrapper.style.width = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainDiv) - dxpcMainDivBordersAndPaddings + "px";
   }
  }
  if(typeof(height) != "undefined") {
   var actualHeight = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
   if(actualHeight < 0)
    actualHeight = 0;
   element.style.height = actualHeight + "px";
   if(element.offsetHeight != height){
    actualHeight += (height - element.offsetHeight);
    if(actualHeight < 0) actualHeight = 0;
    element.style.height = actualHeight + "px";
   }
  }
  this.CorrectWindowSizeGripPositionLite(index);
  this.CorrectWindowHeaderText(index);
  this.SetContentWrapperHeightLite(index);
  var correctContentElementSize = hasAnyScrollBars || contentElement.style.overflow == "hidden" || contentElement.style.overflowX == "hidden" || contentElement.style.overflowY == "hidden";
  if((correctContentElementSize || contentUrl) && height) {
   var contentHeight = _aspxGetClearClientHeight(contentWrapper) -
    _aspxGetTopBottomBordersAndPaddingsSummaryValue(contentElement);
   if(contentHeight < 0)
    contentHeight = 0;
   contentElement.style.height = contentHeight + "px";
  }
  if(correctContentElementSize && width)
   _aspxSetOffsetWidth(contentElement, _aspxGetClearClientWidth(contentWrapper));
  contentElement.style.display = "block";
  if(this.IeWithoutSupportDisplayTable() && _aspxGetClearClientHeight(contentWrapper) < contentElement.offsetHeight) { 
   contentWrapper.style.height = contentElement.offsetHeight + "px";
   contentWrapper.style.height = "";
  }
  if(_aspxIsExists(contentElementChildrenScroll) && contentElementChildrenScroll.length > 0) {
   for(var i = 0; i < contentElementChildrenScroll.length; i++) {
    var childScroll = contentElementChildrenScroll[i],
     childIndex = childScroll[0],
     childScrollLeft = childScroll[1],
     childScrollTop = childScroll[2];
    if(!!childScrollLeft)
     contentElementChildren[childIndex].scrollLeft = childScrollLeft;
    if(!!childScrollTop)
     contentElementChildren[childIndex].scrollTop = childScrollTop;
   }
  }
  if(__aspxIE) {
   contentElement.scrollTop = scrollTop;
   contentElement.scrollLeft = scrollLeft;
  }
  if(contentIframeElement)
   contentIframeElement.style.height = "100%";
  this.SetWindowWidth(index, width);
  this.SetWindowHeight(index, height);
 },
 SetContentWrapperHeightLite: function(index) {
  var windowElem = this.GetWindowElement(index);
  if(!windowElem.style.height || _aspxIsPercentageSize(windowElem.style.height))
   return;
  var borderOwner;
  if (_aspxElementHasCssClass(windowElem, ASPxClientPopupControlCssClasses.MainDivLiteCssClass))
   borderOwner = windowElem;
  else
   borderOwner = _aspxGetDescendantNodesByClassName(windowElem, ASPxClientPopupControlCssClasses.MainDivLiteCssClass)[0];
  var height = windowElem.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(borderOwner);
  if (this.IeWithoutSupportDisplayTable() && height == 1) 
   height = 0;
  var extenders = [
   this.GetWindowHeaderElement(index),
   this.GetWindowFooterElement(index)
  ];
  for(var i = 0; i < extenders.length; i++) {
   if(extenders[i])
    height -= extenders[i].offsetHeight;
  }
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  if(height > 0)
   contentWrapper.style.height = height + "px";
 },
 GetWindowContentWrapperElement: function(index) {
  var windowElem = this.GetWindowElement(index);
  return _aspxGetDescendantNodesByClassName(windowElem, ASPxClientPopupControlCssClasses.ContentWrapperCssClassName)[0];
 },
 SetWindowScrollDivSize: function(scrollDiv, index, dimension) {
  var windowClientTable = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var height = windowClientTable.offsetHeight;
  if(headerElement)
   height -= headerElement.offsetHeight;
  height -= this.GetWindowFooterHeightLite(index);
  if(dimension == 'height' || dimension == 'both')
   _aspxSetOffsetHeight(scrollDiv, height);
  if(dimension == 'width' || dimension == 'both') {
   var width = windowClientTable.offsetWidth;
   var contentElement = this.GetWindowContentElement(index);
   width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(scrollDiv) + _aspxGetHorizontalBordersWidth(contentElement);
   if(width > -1)
    scrollDiv.style.width = width + "px";
  }
  scrollDiv.style.marginRight = "0px";
 },
 CorrectWindowSizeGripPositionLite: function(index) {
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(!sizeGrip || sizeGrip.corrected) return;
  if (this.rtl)
   sizeGrip.style.marginRight = "-"  + sizeGrip.offsetWidth + "px";
  else
   sizeGrip.style.marginLeft = "-"  + sizeGrip.offsetWidth + "px";
  sizeGrip.style.marginTop = "-"  + sizeGrip.offsetHeight + "px";
  sizeGrip.corrected = true;
 },
 CorrectWindowHeaderText: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  if(!headerElement || headerElement.corrected) return;
  var leftChildrenWidth = 0, rightChildrenWidth = 0, headerContentElement;
  for(var i = 0; i < headerElement.childNodes.length; i++){
   var child = headerElement.childNodes[i];
   if(!child.offsetWidth) continue;
   if(_aspxGetElementFloat(child) === "right")
    rightChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
   else if(_aspxGetElementFloat(child) === "left")
    leftChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
   else if(!headerContentElement)
    headerContentElement = child;
  }
  if(headerContentElement && (leftChildrenWidth > 0 || rightChildrenWidth > 0)) {
   var headerContentElementStyle = _aspxGetCurrentStyle(headerContentElement);
   var originalPaddingLeft = parseInt(headerContentElementStyle.paddingLeft);
   var originalPaddingRight = parseInt(headerContentElementStyle.paddingRight);
   _aspxSetStyles(headerContentElement, {
    paddingLeft: leftChildrenWidth + originalPaddingLeft,
    paddingRight: rightChildrenWidth + originalPaddingRight
   }, true);
   if (__aspxIE && __aspxBrowserVersion < 8) 
    headerContentElement.style.zoom = 1;
  }
  headerElement.corrected = true;
 },
 GetIsSafariGreater4OrChromeGreater2: function() {
  return (__aspxSafari && __aspxBrowserVersion >= 4) || (__aspxChrome && __aspxBrowserVersion >= 2);
 },
 SetWindowCachedSize: function(index, width, height) {
  if(0 <= index && index < this.heightArray.length)
   this.cachedSizeArray[index] = new _aspxSize(width, height);
  else
   this.cachedSize = new _aspxSize(width, height);
 },
 GetWindowCachedSize: function(index) {
  if(0 <= index && index < this.heightArray.length)
   return this.cachedSizeArray[index];
  else
   return this.cachedSize;
 },
 ResetWindowCachedSize: function(index) {
  if(0 <= index && index < this.heightArray.length)
   this.cachedSizeArray[index] = null;
  else
   this.cachedSize = null;
 },
 SetWindowSizeByIndex: function(index, width, height) {
  var minWidth = this.GetWindowMinWidth(index);
  var minHeight = this.GetWindowMinHeight(index);
  var maxWidth = this.GetWindowMaxWidth(index);
  var maxHeight = this.GetWindowMaxHeight(index);
  if(minWidth)
   width = Math.max(width, minWidth);
  if(minHeight)
   height = Math.max(height, minHeight);
  if(maxWidth)
   width = Math.min(width, maxWidth);
  if(maxHeight)
   height = Math.min(height, maxHeight);
  var isWindowMaximized = this.GetIsMaximized(index);
  var isWindowCollapsed = this.GetIsCollapsed(index);
  var isWindowMaximizedAndCollapsed = (isWindowMaximized && isWindowCollapsed);
  if(this.InternalIsWindowDisplayed(index) && (!isWindowMaximizedAndCollapsed || this.ResizingForMaxWindowLocked())) {
   if (!this.CollapseExecuting() && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()){
    this.SetWindowCachedSize(index, width, height);
    this.SetIsResized(index, true);
   }
   if (isWindowCollapsed && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()){
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
    height = 0;
   }
   if (isWindowMaximized && !this.CollapseExecuting() && !this.ResizingForMaxWindowLocked()){
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
   } else {
    this.SetWindowSizeByIndexCore(index, width, height, isWindowCollapsed);
   }
  } else
   this.SetWindowCachedSize(index, width, height);
 },
 SetWindowSizeByIndexCore: function(index, width, height, isWindowCollapsed) {
  this.SetClientWindowSizeLite(index, width, height);
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame && !isWindowCollapsed) {
   var winElememnt = this.GetWindowElement(index);
   var realWidth = winElememnt.offsetWidth;
   var realHeight = winElememnt.offsetHeight;
   _aspxSetStyles(iFrame, { width: realWidth, height: realHeight });
  }
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
  if (isWindowCollapsed)
   this.ResetWindowHeight(index);
 },
 CreateResizeCursorInfo: function(evt, index) {
  var element = this.GetWindowElement(index);
  var mainCell = this.GetWindowMainCell(element);
  var clientWindow = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var left = _aspxGetAbsoluteX(mainCell);
  var top = _aspxGetAbsoluteY(mainCell);
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  var mainCellWidth = mainCell.offsetWidth;
  var mainCellHeight = mainCell.offsetHeight;
  var leftOffset = Math.abs(x - left);
  var rightOffset = Math.abs(x - left - mainCellWidth);
  var topOffset = Math.abs(y - top);
  var bottomOffset = Math.abs(y - top - mainCellHeight);
  var cursorInfo = this.CreateResizeBorderCursorInfo(index, leftOffset, rightOffset, topOffset, bottomOffset);
  var grip = this.GetWindowSizeGripElement(index);
  if(grip) {
   var gripCursorInfo = this.CreateGripCursorInfo(index, mainCell, grip, leftOffset, rightOffset, bottomOffset);
   if(gripCursorInfo)
    cursorInfo = gripCursorInfo;
  }
  this.UpdateResizeCursor(clientWindow, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  this.UpdateResizeCursor(mainCell, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  if(headerElement)
   this.UpdateResizeCursor(headerElement, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  return cursorInfo;
 },
 CreateGripCursorInfo: function(index, mainCell, grip, leftOffset, rightOffset, bottomOffset) {
  var gripWidth = this.rtl
   ? _aspxGetAbsoluteX(grip) - _aspxGetAbsoluteX(mainCell) + grip.offsetWidth
   : mainCell.offsetWidth - (_aspxGetAbsoluteX(grip) - _aspxGetAbsoluteX(mainCell));
  var gripHeight = mainCell.offsetHeight - (_aspxGetAbsoluteY(grip) - _aspxGetAbsoluteY(mainCell));
  if(gripHeight > bottomOffset) {
   if(this.rtl && gripWidth > leftOffset)
    return new ASPxPCResizeCursorInfo("w", "s", leftOffset, bottomOffset);
   if(gripWidth > rightOffset)
    return new ASPxPCResizeCursorInfo("e", "s", rightOffset, bottomOffset);
  }
  return null;
 },
 CreateResizeBorderCursorInfo: function(index, leftOffset, rightOffset, topOffset, bottomOffset) {
  var ResizeBorderSize = this.ResizeBorderSize;
  var verticalDirection = this.GetResizeVerticalCourse(ResizeBorderSize, topOffset, bottomOffset);
  ResizeBorderSize = verticalDirection != "" ? this.ResizeCornerBorderSize : this.ResizeBorderSize;
  var horizontalDirection = this.GetResizeHorizontalCourse(ResizeBorderSize, leftOffset, rightOffset);
  if(verticalDirection == "" && horizontalDirection != "")
   verticalDirection = this.GetResizeVerticalCourse(this.ResizeCornerBorderSize, topOffset, bottomOffset);
  var horizontalOffset = leftOffset < rightOffset ? leftOffset : rightOffset;
  var verticalOffset = topOffset < bottomOffset ? topOffset : bottomOffset;
  return new ASPxPCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset);
 },
 GetResizeVerticalCourse: function(ResizeBorderSize, topOffset, bottomOffset) {
  if(ResizeBorderSize > topOffset) return "n";
  if(ResizeBorderSize > bottomOffset) return "s";
  return "";
 },
 GetResizeHorizontalCourse: function(ResizeBorderSize, leftOffset, rightOffset) {
  if(ResizeBorderSize > leftOffset) return "w";
  if(ResizeBorderSize > rightOffset) return "e";
  return "";
 },
 UpdateResizeCursor: function(element, verticalDirection, horizontalDirection) {
  var cursor = verticalDirection + horizontalDirection;
  if(cursor != "") {
   cursor += "-resize";
   this.ShowTemporaryCursor(element, cursor);
  }
  else
   this.HideTemporaryCursor(element);
 },
 ShowTemporaryCursor: function(element, cursor) {
  _aspxChangeStyleAttribute(element, "cursor", cursor);
 },
 HideTemporaryCursor: function(element) {
  _aspxRestoreStyleAttribute(element, "cursor");
 },
 ResizeWindowIFrame: function(index) {
  if(!this.renderIFrameForPopupElements) return;
  if(!this.InternalIsWindowVisible(index)) return;
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame) {
   var cell = this.GetWindowMainCell(this.GetWindowElement(index));
   _aspxSetStyles(iFrame, { width: cell.offsetWidth, height: cell.offsetHeight });
  }
 },
 GetContentIFrameWindow: function() {
  var iframeElement = this.GetContentIFrame();
  return iframeElement.contentWindow;
 },
 ShowDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement)
   this.ShowTemporaryCursor(dragElement, "move");
 },
 HideDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement != null)
   this.HideTemporaryCursor(dragElement);
 },
 GetDragElement: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  var element = this.GetWindowElement(index);
  if(element != null)
   return (headerElement != null ? headerElement : this.GetWindowMainCell(element));
  return null;
 },
 OnActivateMouseDown: function(evt, index) {
  this.OnActivate(index, evt);
 },
 OnCloseButtonClick: function(index) {
  this.RaiseCloseButtonClick(index);
  if(this.GetWindowCloseAction(index) != "None")
   this.DoHideWindow(index);
 },
 OnRefreshButtonClick: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  if (contentIFrame)
   this.RefreshWindowContentUrl(this.GetWindow(index));
  else
   this.PerformWindowCallback(this.GetWindow(index));
 },
 OnPinButtonClick: function(index) {
  var value = this.GetIsPinned(index);
  this.SetPinCore(index, !value);
 },
 SetPinCore: function(index, value) {
  if (this.GetIsPinned(index) != value) {
   this.SetIsPinned(index, value);
   this.HoldPosition(index, value);
   this.UpdateWindowsStateInputElement();
   this.UpdateWindowsStateCookie();
   this.OnPinned(index, value);
  }
 },
 OnPinned: function(index, pinned) {
  this.RaisePinnedChanged(index, pinned);
 },
 HoldPosition: function(index, hold, element) {
  if (hold){
   var element = element || this.GetWindowElement(index);
   if (!element) return;
   var x = _aspxGetAbsoluteX(element);
   var y = _aspxGetAbsoluteY(element);
   scrollX = _aspxGetDocumentScrollLeft();
   scrollY = _aspxGetDocumentScrollTop();
   this.SetPinPosX(index, x - scrollX);
   this.SetPinPosY(index, y - scrollY);
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowPinButton", hold);
  this.CheckHeaderCursor(index);
 },
 GetBodyWidth: function(){
  return aspxGetPopupControlCollection().GetSavedBodyWidth();
 },
 GetBodyHeight: function(){
  return aspxGetPopupControlCollection().GetSavedBodyHeight();
 },
 GetIsOutFromViewPort: function(index){
  var element = this.GetWindowElement(index);
  if (!element) return false;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  var popupWindowWidth = this.GetClientWindowWidth(index);
  var docClientWidth = _aspxGetDocumentClientWidth();
  var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
  var popupWindowHeight = this.GetClientWindowHeight(index);
  var docClientHeight = _aspxGetDocumentClientHeight();
  var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
  return (rightOutOffset > 0 || bottomOutOffset > 0);
 },
 AdjustPinPositionWhileScroll: function(index){
  var element = this.GetWindowElement(index);
  if (!element) return;
  var x = _aspxGetAbsoluteX(element);
  var y = _aspxGetAbsoluteY(element);
  var scrollX = _aspxGetDocumentScrollLeft();
  var scrollY = _aspxGetDocumentScrollTop();
  var pinX = x - scrollX;
  var pinY = y - scrollY;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  if ((pinX != pinXTarget) || (pinY != pinYTarget)){
   this.lockScroll++;
   var xNew = pinXTarget + scrollX;
   var yNew = pinYTarget + scrollY;
   var bodyWidth = this.GetBodyWidth();
   var bodyHeight = this.GetBodyHeight();
   var popupWindowWidth = this.GetClientWindowWidth(index);
   var docClientWidth = _aspxGetDocumentClientWidth();
   var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
   var popupWindowHeight = this.GetClientWindowHeight(index);
   var docClientHeight = _aspxGetDocumentClientHeight();
   var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
   var cancelScrollX = false;
   if (xNew + (popupWindowWidth - rightOutOffset) > bodyWidth){
    xNew -= (xNew + (popupWindowWidth - rightOutOffset) - bodyWidth);
    cancelScrollX = true;
   }
   var cancelScrollY = false;
   if (yNew + (popupWindowHeight - bottomOutOffset) > bodyHeight){
    yNew -= (yNew + (popupWindowHeight - bottomOutOffset) - bodyHeight);
    cancelScrollY = true;
   }
   xNew = _aspxPrepareClientPosForElement(xNew, element, true);
   yNew = _aspxPrepareClientPosForElement(yNew, element, false);
   this.SetWindowPos(index, element, xNew, yNew);
   if (cancelScrollX){
    var scrollLeftMax = bodyWidth - _aspxGetDocumentClientWidth();
    if ((rightOutOffset > 0) && (scrollX > scrollLeftMax)){
     this.lockScroll++;
     _aspxSetDocumentScrollLeft(scrollLeftMax);
     this.lockScroll--;
    }
   }
   if (cancelScrollY){
    var scrollTopMax = bodyHeight - _aspxGetDocumentClientHeight();
    if ((bottomOutOffset > 0) && (scrollY > scrollTopMax)){
     this.lockScroll++;
     _aspxSetDocumentScrollTop(scrollTopMax);
     this.lockScroll--;
    }
   }
   this.lockScroll--;
  }
 },
 OnScroll: function(evt, index){
  if (!this.GetIsPinned(index) || (this.lockScroll > 0)) return;
  this.AdjustPinPositionWhileScroll(index);
 },
 OnCollapseButtonClick: function(index) {
  this.SetCollapsedCore(index, !this.GetIsCollapsed(index));
 },
 SetCollapsedCore: function(index, minimization) {
  if(this.GetIsCollapsed(index) == minimization) return;
  this.DoCollapse(index, minimization);
  this.OnCollapsed(index, minimization);
 },
 DoCollapse: function(index, minimization) {
  if (this.GetIsCollapsed(index) == minimization) return;
  this.StartCollapse();
  if (minimization){
   var cachedWidth = this.GetClientWindowWidth(index);
   var cachedHeight = this.GetClientWindowHeight(index);
   var shouldUpdateRestoredSize = this.ShoulUpdatedRestoredWindowSizeOnCollapse(index);
   var width = this.GetMainWindowWidth(index, !shouldUpdateRestoredSize);
   var height = this.GetMainWindowHeight(index, !shouldUpdateRestoredSize);
   this.SetWindowSizeByIndex(index, width, 0);
   this.SetWindowContentVisible(index, false);
   this.SetWindowFooterVisible(index, false);
   this.ResetWindowHeight(index);
   this.SetIsCollapsed(index, minimization);
   this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
   if(shouldUpdateRestoredSize)
    this.UpdateRestoredWindowSize(index, width, height);
  }
  else{
   if (this.MaximizationExecuting()){
    var element = this.GetWindowElement(index);
    if (element){
     element.style.left = _aspxGetDocumentScrollLeft();
     element.style.top = _aspxGetDocumentScrollTop();
    }
   }
   this.SetWindowContentVisible(index, true);
   this.SetWindowFooterVisible(index, true);
   this.SetIsCollapsed(index, minimization);
   if (this.GetIsMaximized(index)){
    var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
    var documentClientHeight = _aspxGetDocumentClientHeight();
    this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   } else {
    var restoredWindowData = this.GetRestoredWindowData(index);
    this.SetWindowSizeByIndex(index, restoredWindowData.width, restoredWindowData.height);
   }
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowCollapseButton", minimization);
  this.EndCollapse();
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 ResetWindowHeight: function(index) {
  var element = this.GetWindowElement(index);
  if (element)
   element.style.height = "";
 },
 ShoulUpdatedRestoredWindowSizeOnCollapse: function(index) {
  return !this.GetIsMaximized(index);
 },
 OnCollapsed: function(index, value){
  if (value)
   this.RaiseCollapsed(index);
  else
   this.RaiseExpanded(index);
  this.RaiseAfterResizing(index);
 },
 OnMaximizeButtonClick: function(index) {
  this.SetMaximizedCore(index, !this.GetIsMaximized(index));
 },
 SetMaximizedCore: function(index, maximization) {
  if(this.GetIsMaximized(index) == maximization) return;
  this.DoMaximize(index, maximization);
  this.OnMaximizedChanged(index, maximization);
 },
 DoMaximize: function(index, maximization) {
  if (this.GetIsMaximized(index) == maximization) return;
  var element = this.GetWindowElement(index);
  if (!element) return;
  this.StartMaximization();
  if (maximization){
   if(this.hideBodyScrollWhenMaximized)
    ASPxClientPopupUtils.BodyScrollHelper.HideBodyScroll();
   if (this.GetIsCollapsed(index))
    this.DoCollapse(index, false);
   var cachedWidth = this.GetClientWindowWidth(index);
   var cachedHeight = this.GetClientWindowHeight(index);
   var restoredWindowData = this.GetInitRestoredWindowData(index);
   var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
   var documentClientHeight = _aspxGetDocumentClientHeight();
   var currentStyle = _aspxGetCurrentStyle(element);
   var windowClientTable = this.GetWindowClientTable(index);
   var windowClientTableParent = windowClientTable.parentNode;
   childStyle = _aspxGetCurrentStyle(windowClientTableParent);
   var left = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollLeft(), element, true);
   var top = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollTop(), element, false);
   this.SetWindowPos(index, element, left, top);
   this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
   this.SetRestoredWindowData(index, restoredWindowData);
   this.SetIsMaximized(index, maximization);
  }
  else{
   var restoredWindowData = this.GetRestoredWindowData(index);
   var width = restoredWindowData.width || this.GetMainWindowWidth(index);
   var height = restoredWindowData.height || this.GetMainWindowHeight(index);
   this.SetIsMaximized(index, maximization);
   var left = _aspxPrepareClientPosForElement(restoredWindowData.left, element, true);
   var top = _aspxPrepareClientPosForElement(restoredWindowData.top, element, false);
   this.SetWindowPos(index, element, left, top);
   this.SetWindowSizeByIndex(index, width, height);
   if (this.GetIsCollapsed(index)){
    this.SetIsCollapsed(index, false);
    this.DoCollapse(index, true);
   }
   if(this.hideBodyScrollWhenMaximized)
    ASPxClientPopupUtils.BodyScrollHelper.RestoreBodyScroll();
  }
  if (this.GetIsPinned(index))
   this.HoldPosition(index, true, element);
  this.UpdateHeaderButtonSelected(index, "GetWindowMaximizeButton", maximization);
  this.EndMaximization();
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
  this.CheckHeaderCursor(index);
 },
 OnMaximizedChanged: function(index, value){
  if (value)
   this.RaiseMaximized(index);
  else
   this.RaiseRestoredAfterMaximized(index);
  this.RaiseAfterResizing(index);
 },
 GetInitRestoredWindowData: function (index) {
  var restoredWindowData = this.GetRestoredWindowData(index);
  restoredWindowData.left = this.GetCurrentLeft(index);
  restoredWindowData.top = this.GetCurrentTop(index);
  restoredWindowData.width = this.GetMainWindowWidth(index);
  restoredWindowData.height = this.GetMainWindowHeight(index);
  return restoredWindowData;
 },
 UpdateMaximizedWindowSizeOnResize: function(index){
  this.StartUpdateMaximizedWindowSizeOnResize();
  var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
  var documentClientHeight = _aspxGetDocumentClientHeight();
  if (this.GetIsCollapsed(index)) documentClientHeight = 0;
  this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
  if (this.GetIsCollapsed(index)){
   this.CorrectCollapsedSize(index);
  }
  window.setTimeout(function() { this.SetMaximizedWindowSizeAfterOnResize(index); }.aspxBind(this), 0);
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 SetMaximizedWindowSizeAfterOnResize: function(index){
  this.StartUpdateMaximizedWindowSizeOnResize();
  var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
  var documentClientHeight = _aspxGetDocumentClientHeight();
  windowWidthCurrent = this.GetMainWindowWidth(index, true);
  windowHeightCurrent = this.GetMainWindowHeight(index, true);
  if (this.GetIsCollapsed(index))
   documentClientHeight = 0;
  if (documentClientWidth != windowWidthCurrent || documentClientHeight != windowHeightCurrent){
   this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   if (this.GetIsCollapsed(index)){
    this.CorrectCollapsedSize(index);
   }
  }
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 CorrectCollapsedSize: function(index){
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  if (contentWrapper && _aspxElementIsVisible(contentWrapper))
   contentWrapper.style.display = 'none';
 },
 UpdateHeaderButtonSelected: function(index, methodGetWindowButton, flagSelected){
  if(typeof(aspxGetStateController) != "undefined"){
   button = this[methodGetWindowButton](index);
   var method = flagSelected ? "SelectElementBySrcElement" : "DeselectElementBySrcElement";
   aspxGetStateController()[method](button);
  }
 },
 CheckHeaderCursor: function(index){
  if (!this.allowDragging) return;
  var dragElement = this.GetDragElement(index);
  if (!dragElement) return;
  var styleCursor = dragElement.style.cursor;
  var isPinned = this.GetIsPinned(index);
  var isMaximized = this.GetIsMaximized(index);
  if ((isPinned || isMaximized) && styleCursor != "default")
   dragElement.style.cursor = "default";
  else if (!isPinned && !isMaximized && styleCursor != "move")
   dragElement.style.cursor = "move";
 },
 StartCollapse: function(){
  this.collapseExecutingLockCount++;
 },
 EndCollapse: function(){
  this.collapseExecutingLockCount--;
 },
 CollapseExecuting: function(){
  return this.collapseExecutingLockCount > 0;
 },
 StartMaximization: function(){
  this.maximizationExecutingLockCount++;
 },
 EndMaximization: function(){
  this.maximizationExecutingLockCount--;
 },
 MaximizationExecuting: function(){
  return this.maximizationExecutingLockCount > 0;
 },
 StartUpdateMaximizedWindowSizeOnResize: function(){
  this.browserResizingForMaxWindowLockCount++;
 },
 EndUpdateMaximizedWindowSizeOnResize: function(){
  this.browserResizingForMaxWindowLockCount--;
 },
 ResizingForMaxWindowLocked: function(){
  return this.browserResizingForMaxWindowLockCount > 0;
 },
 UpdateRestoredWindowSizeLock: function () {
  this.updateRestoredWindowSizeLockCount ++;
 },
 UpdateRestoredWindowSizeUnlock: function () {
  this.updateRestoredWindowSizeLockCount --;
 },
 UpdateRestoredWindowSizeLocked: function () {
  return this.updateRestoredWindowSizeLockCount > 0;
 },
 UpdateRestoredWindowSize: function (index, width, height) {
  if (!this.UpdateRestoredWindowSizeLocked()) {
   restoredMinWindowData = this.GetRestoredWindowData(index);
   restoredMinWindowData.width = width;
   restoredMinWindowData.height = height;
   this.SetRestoredWindowData(index, restoredMinWindowData);
  }
 },
 OnMouseDown: function(evt, index, isDraggingAllowed, pointOnScrollBar) {
  if(_aspxGetIsLeftButtonPressed(evt)) {
   if((this.allowResize || isDraggingAllowed) && !this.prohibitClearSelectionOnMouseDown) 
    _aspxClearSelection();
   var isResizing = false;
   if(this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index)) {
    var eventSourceControl = _aspxGetEventSource(evt);
    var eventFromPopupContainer = _aspxElementHasCssClass(eventSourceControl, ASPxClientPopupControlCssClasses.ContentCssClassName) || 
     !_aspxGetParentByClassName(eventSourceControl, ASPxClientPopupControlCssClasses.ContentCssClassName);
    if (eventFromPopupContainer)
     isResizing = this.OnResizeStart(evt, index);
   }
   if(isResizing && __aspxWebKitTouchUI)
    aspxGetPopupControlCollection().OverStop();
   var clickedOnScroll = pointOnScrollBar && this.enableContentScrolling;
   if(isDraggingAllowed && !isResizing && !clickedOnScroll && !this.GetIsPinned(index) && !this.GetIsMaximized(index))
    this.OnDragStart(evt, index);
  }
 },
 OnMouseMove: function(evt, index) {
  if(this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
   this.CreateResizeCursorInfo(evt, index);
 },
 SetShadowVisibility: function(visible, index) {
  var shadowTable = this.GetWindowShadowTable(index);
  if(shadowTable && shadowTable.rows.length > 1) {
   var shadowCol = shadowTable.rows[0].cells[1];
   var shadowRow = shadowTable.rows[1];
   _aspxSetElementVisibility(shadowCol, visible);
   _aspxSetElementVisibility(shadowRow, visible);
  }
 },
 StartFadeAnimation: function(element, index) {
  if(__aspxIE && __aspxBrowserMajorVersion < 9) {
   _aspxSetElementVisibility(element, true);
   ASPxAnimationHelper.setOpacity(element, 0);
   this.SetShadowVisibility(false, index); 
  } else {
   ASPxAnimationHelper.setOpacity(element, 0);
   _aspxSetElementVisibility(element, true);
  }
  var callback = function () {
   if (__aspxIE && __aspxBrowserVersion < 9 && element.style.filter) {
    if (element.style.filter)
     element.style.filter = "";
    this.SetShadowVisibility(true, index);
   }
   this.OnAnimationStop(index);
  } .aspxBind(this);
  ASPxAnimationHelper.fadeIn(element, callback, this.fadeAnimationDuration);
 },
 StartSlideAnimation: function(animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
  var element = this.GetWindowMainTable(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var args = "(\"" + this.name + "\", " + index + ")";
  var onAnimStopCallString = "aspxPCAStop" + args;
  if(__aspxFirefox) 
   animationDivElement.style.display = "block";
  ASPxClientPopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, onAnimStopCallString, true);
  var horizontalDirection = ASPxClientPopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
  var verticalDirection = ASPxClientPopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
  var xPos = horizontalDirection * animationDivElement.offsetWidth;
  var yPos = verticalDirection * animationDivElement.offsetHeight;
  _aspxSetStyles(element, { left: xPos, top: yPos });
  _aspxSetElementVisibility(animationDivElement, true);
  this.DoShowWindowIFrame(index, clientX, clientY, 0, 0);
  ASPxClientPopupUtils.StartSlideAnimation(animationDivElement, element, this.GetWindowIFrame(index), this.slideAnimationDuration);
 },
 GetWindowsState: function() {
  var state = "";
  if(this.HasDefaultWindow()) {
   state += this.GetWindowState(-1);
  }
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   state += this.GetWindowState(i);
   if(i < this.GetWindowCountCore() - 1) state += ";";
  }
  return state;
 },
 GetWindowState: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   var mainCell = this.GetWindowMainCell(element);
   var visibleFlag = (!this.InternalIsWindowVisible(index) || element.isHiding) ? "0" : "1";
   var isDraggedFlag = this.GetIsDragged(index) ? "1" : "0";
   var zIndex = this.GetCurrentZIndex(index);
   var isResized = this.GetIsResized(index);
   var isResizedFlag = isResized ? "1" : "0";
   var width = isResized ? this.GetCurrentWindowWidth(index) : __aspxInvalidDimension;
   var height = isResized ? this.GetCurrentWindowHeight(index) : __aspxInvalidDimension;
   var contentWasLoaded = element.loaded ? "1" : "0";
   var left, top;
   var isMaximized = this.GetIsMaximized(index);
   if (isMaximized && !this.MaximizationExecuting()){
    var restoredWindowData = this.GetRestoredWindowData(index);
    left = restoredWindowData.left;
    top = restoredWindowData.top;
   } else {
    left = this.GetCurrentLeft(index);
    top = this.GetCurrentTop(index);
   }
   var isPinned = this.GetIsPinned(index);
   if (isPinned){
    left -= _aspxGetDocumentScrollLeft();
    top -=  _aspxGetDocumentScrollTop();
   }
   left = Math.ceil(left);
   top = Math.ceil(top);
   var pinFlag = isPinned ? "1" : "0";
   var minFlag = this.GetIsCollapsed(index) ? "1" : "0";
   var maxFlag = isMaximized ? "1" : "0";
   return [visibleFlag, isDraggedFlag, zIndex, left, top, isResizedFlag, width, height, contentWasLoaded, pinFlag, minFlag, maxFlag].join(":");
  }
  return "";
 },
 UpdateWindowsStateCookie: function() {
  if(this.cookieName == "") return;
  _aspxDelCookie(this.cookieName);
  _aspxSetCookie(this.cookieName, this.GetWindowsState());
 },
 UpdateWindowsStateInputElement: function() {
  var element = this.GetWindowsStateInputElement();
  if(element != null) element.value = this.GetWindowsState();
 },
 OnIFrameLoad: function(index) {
  this.SetIframeLoading(index, false);
 },
 OnPWHBClickCore: function(evt, index, method){
  if (ASPxClientTouchUI.handleFastTapIfRequired(evt, 
   function(){ this[method](index); }.aspxBind(this), true)) {
    return;
  }
  if((__aspxIE && __aspxBrowserVersion < 9) || __aspxOpera)
   _aspxEmulateDocumentOnMouseDown(evt);
  this[method](index);
 },
 CreateWindows: function(windowsNames) {
  for(var i = 0; i < windowsNames.length; i++) {
   var window = new ASPxClientPopupWindow(this, i, windowsNames[i]);
   this.windows.push(window);
  }
 },
 RaiseCloseButtonClick: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.CloseButtonClick.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.CloseButtonClick.FireEvent(this, args);
  }
 },
 RaiseClosing: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  var cancel = false;
  if(!this.Closing.IsEmpty()) {
   var args = new ASPxClientPopupWindowCancelEventArgs(window);
   this.Closing.FireEvent(this, args);
   cancel = args.cancel;
  }
  return cancel;
 },
 RaiseCloseUp: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.CloseUp.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaisePopUp: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.PopUp.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.PopUp.FireEvent(this, args);
  }
 },
 RaiseResize: function(index, resizeState) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.Resize.IsEmpty()) {
   if(!resizeState)
    resizeState = ASPxClientPopupControlResizeState.Resized;
   var args = new ASPxClientPopupWindowResizeEventArgs(window, resizeState);
   this.Resize.FireEvent(this, args);
  }
 },
 RaiseBeforeResizing: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.BeforeResizing.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.BeforeResizing.FireEvent(this, args);
  }
 },
 RaiseAfterResizing: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.AfterResizing.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.AfterResizing.FireEvent(this, args);
  }
 },
 RaiseShown: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.Shown.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.Shown.FireEvent(this, args);
  }
 },
 RaisePinnedChanged: function (index, pinned) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.PinnedChanged.IsEmpty()) {
   var args = new ASPxClientPopupWindowPinnedChangedEventArgs(window, pinned);
   this.PinnedChanged.FireEvent(this, args);
  }
 },
 RaiseCollapsed: function (index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Collapsed);
 },
 RaiseExpanded: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Expanded);
 },
 RaiseMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Maximized);
 },
 RaiseRestoredAfterMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.RestoredAfterMaximized);
 },
 AdjustSize: function() {
  if(this.enableContentScrolling)
   return;
  this.SetSize(1, 1);
 },
 GetHeight: function() {
  return this.GetWindowHeight(null);
 },
 GetWidth: function() {
  return this.GetWindowWidth(null);
 },
 GetContentWidth: function() {
  return this.GetWindowContentWidth(null);
 },
 GetContentHeight: function() {
  return this.GetWindowContentHeight(null);
 },
 SetSize: function(width, height) {
  this.SetWindowSize(null, width, height);
 },
 SetWidth: function(width) {
  var height = this.GetHeight();
  this.SetSize(width, height);
 },
 SetHeight: function(height) {
  var width = this.GetWidth();
  this.SetSize(width, height);
 },
 GetWindowDimensionByIndex: function(index, isWidth, forceFromCache) {
  var cachedSize = this.GetWindowCachedSize(index);
  var dimensionValue = null;
  if (forceFromCache == undefined && !this.GetWindowElement(index)) 
   forceFromCache = true;
  if(cachedSize && forceFromCache)
   dimensionValue = isWidth ? cachedSize.width : cachedSize.height;
  if(dimensionValue)
   return dimensionValue;
  else {
   var element = this.GetWindowElement(index);
   var sizeFromDOM = 0;
   if (this.GetIsCollapsed(index)){
    var headerCell = this.GetWindowHeaderElement(index);
    sizeFromDOM = isWidth ? headerCell.offsetWidth : headerCell.offsetHeight;
   }
   else{
    var mainCell = this.GetWindowMainCell(element);
    sizeFromDOM = isWidth ? mainCell.offsetWidth : mainCell.offsetHeight;
   }
   if(sizeFromDOM === 0 && cachedSize)
    sizeFromDOM = isWidth ? cachedSize.width : cachedSize.height;
   return sizeFromDOM;
  }
 },
 GetWindowDimension: function(window, isWidth, forceFromCache) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowDimensionByIndex(index, isWidth, forceFromCache);
 },
 GetWindowContentDimension: function(window, isWidth) {
  var index = (window != null) ? window.index : -1,
   dimension = 0,
   contentElem = this.GetWindowContentElement(index),
   dimensionHolder = contentElem.parentNode,
   paddingsHolder = contentElem;
  return isWidth ?
  (dimensionHolder.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(paddingsHolder)) :
  (dimensionHolder.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(paddingsHolder));
 },
 GetWindowContentWidth: function(window) {
  return this.GetWindowContentDimension(window, true);
 },
 GetWindowContentHeight: function(window) {
  return this.GetWindowContentDimension(window, false);
 },
 GetWindowHeight: function(window) {
  return this.GetWindowDimension(window, false);
 },
 GetWindowWidth: function(window) {
  return this.GetWindowDimension(window, true);
 },
 SetWindowSize: function(window, width, height) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowSizeByIndex(index, width, height);
 },
 GetContentHTML: function() {
  return this.GetContentHtml();
 },
 SetContentHTML: function(html) {
  this.SetContentHtml(html);
 },
 GetContentHtml: function() {
  return this.GetWindowContentHtml(null);
 },
 SetContentHtml: function(html, useAnimation) {
  this.SetWindowContentHtml(null, html, useAnimation);
 },
 GetContentIFrame: function(window) {
  return this.GetWindowContentIFrame(null);
 },
 GetContentUrl: function() {
  return this.GetWindowContentUrl(null);
 },
 SetContentUrl: function(url) {
  this.SetWindowContentUrl(null, url);
 },
 RefreshContentUrl: function() {
  this.RefreshWindowContentUrl(null);
 },
 SetWindowPopupElementID: function(window, popupElementId) {
  var index = (window != null) ? window.index : -1;
  this.RemoveWindowAllPopupElements(index);
  this.SetPopupElementIDs(index, popupElementId.split(';'));
  if(aspxGetPopupControlCollection().IsDisappearTimerActive()) {
   aspxGetPopupControlCollection().ClearDisappearTimer();
   this.Hide(index);
  }
  this.PopulatePopupElements(index);
 },
 SetPopupElementID: function(popupElementId) {
  this.SetWindowPopupElementID(null, popupElementId);
 },
 GetCurrentPopupElementIndex: function() {
  return this.GetWindowCurrentPopupElementIndex(null);
 },
 GetWindowCurrentPopupElementIndex: function(window) {
  var popupElement = this.GetWindowCurrentPopupElement(window);
  return popupElement ? popupElement.DXPopupElementIndex : -1;
 },
 GetCurrentPopupElement: function() {
  return this.GetWindowCurrentPopupElement(null);
 },
 GetWindowCurrentPopupElement: function(window) {
  var index = (window != null) ? window.index : -1;
  var popupElement = this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index));
  if(popupElement && popupElement.DXPopupElementControl)
   return popupElement;
  return null;
 },
 Show: function(popupElementIndex) {
  this.ShowWindow(null, popupElementIndex);
 },
 ShowAtElement: function(htmlElement) {
  this.ShowWindowAtElement(null, htmlElement);
 },
 ShowAtElementByID: function(id) {
  var htmlElement = document.getElementById(id);
  this.ShowWindowAtElement(null, htmlElement);
 },
 ShowAtPos: function(x, y) {
  this.ShowWindowAtPos(null, Math.round(x), Math.round(y));
 },
 BringToFront: function() {
  this.BringWindowToFront(null);
 },
 Hide: function() {
  this.HideWindow(null);
 },
 IsWindowVisible: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.InternalIsWindowVisible(index);
 },
 IsVisible: function() {
  return this.InternalIsWindowVisible(-1);
 },
 GetWindow: function(index) {
  return (0 <= index && index < this.windows.length) ? this.windows[index] : null;
 },
 GetWindowByName: function(name) {
  for(var i = 0; i < this.windows.length; i++)
   if(this.windows[i].name == name) return this.windows[i];
  return null;
 },
 GetWindowCount: function() {
  return this.GetWindowCountCore();
 },
 ShowWindow: function(window, popupElementIndex) {
  var index = (window != null) ? window.index : -1;
  if(popupElementIndex === undefined)
   popupElementIndex = this.GetLastShownPopupElementIndex(index);
  this.DoShowWindowAtPos(index, __aspxInvalidPosition, __aspxInvalidPosition, popupElementIndex, false, true);
 },
 ShowWindowAtElement: function(window, htmlElement) {
  var index = (window != null) ? window.index : -1;
  var lastIndexBackup = this.GetLastShownPopupElementIndex(index);
  this.ShowWindow(window, this.AddPopupElementInternal(index, htmlElement));
  this.RemovePopupElementInternal(index, htmlElement);
  this.SetLastShownPopupElementIndex(index, lastIndexBackup);
 },
 ShowWindowAtElementByID: function(window, id) {
  var htmlElement = document.getElementById(id);
  this.ShowWindowAtElement(window, htmlElement);
 },
 ShowWindowAtPos: function(window, x, y) {
  var index = (window != null) ? window.index : -1;
  this.DoShowWindowAtPos(index, x, y, -1, false, true);
 },
 BringWindowToFront: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetWindowElement(index);
  aspxGetPopupControlCollection().ActivateWindowElement(element);
 },
 HideWindow: function(window) {
  var index = (window != null) ? window.index : -1;
  this.DoHideWindow(index);
 },
 GetWindowContentHTML: function(window) {
  return this.GetWindowContentHtml(window);
 },
 SetWindowContentHTML: function(window, html) {
  this.SetWindowContentHtml(window, html);
 },
 GetWindowContentHtml: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetContentContainer(index);
  return (element != null) ? element.innerHTML : "";
 },
 SetWindowContentHtml: function(window, html, useAnimation) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentHtmlCore(index, html, useAnimation);
 },
 SetWindowContentHtmlCore: function(index, html, useAnimation) {
  var element = this.GetContentContainer(index);
  if(element != null) {
   _aspxSetInnerHtml(element, html);
   if(this.IeWithoutSupportDisplayTable()) 
    element.style.zoom = 1;
   this.RecalculateWindowSize(index);
   if(useAnimation && typeof(ASPxAnimationHelper) != "undefined")
    ASPxAnimationHelper.fadeIn(element, function(){ this.ResizeWindowIFrame(index); }.aspxBind(this));
   else
    this.ResizeWindowIFrame(index);
   this.UpdateScrollbar(index);
  }
 },
 RecalculateWindowSize: function(index) {
  var window = this.GetWindowElement(index);
  var displayAfterSetSize = window.style.display;
  this.SetClientWindowSizeCoreLite(index, this.GetWindowWidthInternal(index), this.GetWindowHeightInternal(index));
  window.style.display = displayAfterSetSize;
 },
 GetWindowContentIFrame: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowContentIFrameElement(index);
 },
 GetWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(!this.IsWindowVisible(window))
   return this.GetWindowContentIFrameUrl(index);
  var element = this.GetWindowContentIFrameElement(index);
  return (element != null) ? element.src : "";
 },
 SetWindowContentUrl: function(window, url) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetWindowContentIFrameElement(index);
  var windowVisible = this.IsWindowVisible(window);
  if(windowVisible && element != null)
   this.ShowIframeElementAfterDragging(index);
  this.SetWindowContentIFrameUrl(index, url);
  var src = (this.allowLoadToHiddenIframe && !windowVisible) ? ASPx.SSLSecureBlankUrl : url;
  if(element == null) {
   this.CreateWindowContentIFrameElement(index, src);
   if(_aspxElementIsVisible(this.GetWindowElement(index)))
    this.SetClientWindowSizeCoreLite(index, this.GetWindowWidth(window), this.GetWindowHeight(window));
  }
  else
   this.SetSrcToIframeElement(index, element, src);
 },
 GetPinned: function() {
  return this.GetIsPinned(-1);
 },
 SetPinned: function(value) {
  this.SetPinCore(-1, value);
 },
 GetWindowPinned: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsPinned(index);
 },
 SetWindowPinned: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetPinCore(index, value);
 },
 GetMaximized: function() {
  return this.GetIsMaximized(-1);
 },
 SetMaximized: function(value) {
  this.SetMaximizedCore(-1, value);
 },
 GetWindowMaximized: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsMaximized(index);
 },
 SetWindowMaximized: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetMaximizedCore(index, value);
 },
 GetCollapsed: function() {
  return this.GetIsCollapsed(-1);
 },
 SetCollapsed: function(value) {
  this.SetCollapsedCore(-1, value);
 },
 GetWindowCollapsed: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsCollapsed(index);
 },
 SetWindowCollapsed: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetCollapsedCore(index, value);
 },
 RefreshWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(__aspxIE)
   this.RefreshWindowContentUrlIE(index, window);
  else
   this.RefreshWindowContentUrlCommon(window);
 },
 RefreshWindowContentUrlIE: function(index, window) {
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible)
   this.RefreshWindowContentUrlIECore(index, window);
  else {
   var iframe = this.GetWindowContentIFrameElement(index);
   if(iframe)
    iframe.DXReloadAfterShowRequired = true;
  }
 },
 RefreshWindowContentUrlIECore: function(index, window) {
  try {
   if(!this.GetIframeLoading(index)) {
    var iframe = this.GetWindowContentIFrameElement(index);
    if(iframe)
     iframe.contentWindow.location.reload();
   }
  } catch(e) {
   this.RefreshWindowContentUrlCommon(window);
  }
 },
 RefreshWindowContentUrlCommon: function(window) {
  this.SetWindowContentUrl(window, this.GetWindowContentUrl(window));
 },
 SetWindowContentVisible: function(index, visible){
  var contentElement = this.GetWindowContentWrapperElement(index);
  if (contentElement)
   this.SetWindowPartVisibleCore(contentElement, "DXPopupWindowContentDisplay", visible);
 },
 SetWindowFooterVisible: function(index, visible){
  var footerElement = this.GetWindowFooterElement(index);
  if (footerElement)
   this.SetWindowPartVisibleCore(footerElement, "DXPopupWindowFooterDisplay", visible);
 },
 SetWindowPartVisibleCore: function(partElement, displayCacheName, visible){
  var nothingChanged = _aspxElementIsVisible(partElement) && visible;
  if(nothingChanged) return;
  if(!(_aspxIsExists(partElement[displayCacheName])))
   partElement[displayCacheName] = partElement.style.display;
  partElement.style.display = visible ? partElement[displayCacheName] : 'none';
 },
 UpdatePosition: function() {
  this.UpdatePositionAtElement(this.GetPopupElement(-1, this.GetLastShownPopupElementIndex(-1)));
 },
 UpdatePositionAtElement: function(popupElement) {
  this.UpdateWindowPositionAtElement(null, popupElement);
 },
 UpdateWindowPosition: function(window) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionAtElement(window, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
 },
 UpdateWindowPositionAtElement: function(window, popupElement) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionInternal(index, popupElement);
 },
 UpdateWindowPositionInternal: function(index, popupElement) {
  var element = this.GetWindowElement(index);
  if(this.InternalIsWindowVisible(index) && element != null) {
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, true, false);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, false, false);
   this.SetWindowPos(index, element, horizontalPopupPosition.position, verticalPopupPosition.position);
  } else
   this.DoShowWindowAtPos(index, __aspxInvalidDimension, __aspxInvalidDimension, this.GetLastShownPopupElementIndex(index), false, false);
 },
 TryAutoUpdatePosition: function(index) {
  if(this.GetAutoUpdatePosition(index))
   this.UpdateWindowPositionInternal(index, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
  if(this.GetIsMaximized(index))
   this.UpdateMaximizedWindowSizeOnResize(index);
 },
 CreateWindowContentIFrameElement: function(index, src) {
  var content = this.GetContentContainer(index);
  var iframeParent = content;
  content.innerHTML = "";
  var iframe = this.CreateContentIFrameElement(index, src);
  this.RequireIFrameHeightAdjusting(index, iframe);
  iframeParent.appendChild(iframe);
  this.InitIFrame(index);
  return iframe;
 },
 RequireIFrameHeightAdjusting: function(index, iframe) {
  if(this.InternalIsWindowVisible(index))
   this.AdjustIFrameHeight(index, iframe);
  else
   this.PostponeIframeAdjusting(index);
 },
 EnsureIFrameHeightAdjusted: function(index) {
  if(this.GetIframeAdjustingPostponed(index)) {
   var iframe = this.GetWindowContentIFrameElement(index);
   this.AdjustIFrameHeight(index, iframe);
  }
 },
 PostponeIframeAdjusting: function(index) {
  this.SetIframeAdjustingPostponed(index, true);
 },
 SetIframeAdjustingPostponed: function(index, value) {
  if(0 <= index && index < this.iframeAdjustingPostponedArray.length)
   this.iframeAdjustingPostponedArray[index] = value;
  else
   this.iframeAdjustingPostponed = value;
 },
 GetIframeAdjustingPostponed: function(index) {
  if(0 <= index && index < this.iframeAdjustingPostponedArray.length)
   return this.iframeAdjustingPostponedArray[index];
  return this.iframeAdjustingPostponed;
 },
 AdjustIFrameHeight: function(index, iframe) {
  if(!this.InternalIsWindowVisible(index) || !iframe) return;
  this.SetIframeAdjustingPostponed(index, false);
  var content = this.GetContentContainer(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  iframe.style.verticalAlign = "text-bottom";
  var iframeHeight = contentWrapper.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(content);
  if(iframeHeight >= 0)
   iframe.style.height = iframeHeight + "px";
 },
 CreateContentIFrameElement: function(index, src) {
  var iframe = document.createElement("IFRAME");
  iframe.id = this.GetWindowContentIFrameElementId(index);
  iframe.scrolling = "auto";
  iframe.frameBorder = 0;
  iframe.style.width = "100%";
  iframe.style.height = "100%";
  iframe.style.overflow = "auto";
  this.SetSrcToIframeElement(index, iframe, src);
  return iframe;
 },
 CreateContentIFrameDivElement: function(index) {
  var iframeDiv = document.createElement("DIV");
  iframeDiv.id = this.GetWindowContentIFrameDivElementID(index);
  iframeDiv.style.width = "100%";
  iframeDiv.style.height = "100%";
  return iframeDiv;
 },
 GetWindowHeaderTextCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "T");
 },
 GetWindowHeaderImageCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "I");
 },
 GetWindowFooterTextCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "T");
 },
 GetWindowFooterImageCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "I");
 },
 GetWindowHeaderImageUrl: function(index) {
  var element = this.GetWindowHeaderImageCell(index);
  return element ? element.src : "";
 },
 SetWindowHeaderImageUrl: function(index, url) {
  var element = this.GetWindowHeaderImageCell(index);
  if(element != null)
   element.src = url;
 },
 GetWindowFooterImageUrl: function(index) {
  var element = this.GetWindowFooterImageCell(index);
  return element ? element.src : "";
 },
 SetWindowFooterImageUrl: function(index, url) {
  var element = this.GetWindowFooterImageCell(index);
  if(element != null) {
   element.src = url;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 GetWindowHeaderNavigateUrl: function(index) {
  var header = this.GetWindowHeaderElement(index);
  if(header) {
   var link = _aspxGetDescendantNodesByClassName(header, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    return link.href;
  }
  return "";
 },
 SetWindowHeaderNavigateUrl: function(index, url) {
  var header = this.GetWindowHeaderElement(index);
  if(header) {
   var link = _aspxGetDescendantNodesByClassName(header, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    link.href = url;
  }
 },
 GetWindowFooterNavigateUrl: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(footer) {
   var link = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    return link.href;
  }
  return "";
 },
 SetWindowFooterNavigateUrl: function(index, url) {
  var footer = this.GetWindowFooterElement(index);
  if(footer) {
   var link = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    link.href = url;
  }
  return;
 },
 GetWindowHeaderText: function(index) {
  var element = this.GetWindowHeaderTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.innerHTML;
   else
    return element.innerHTML;
  }
  return "";
 },
 SetWindowHeaderText: function(index, text) {
  var element = this.GetWindowHeaderTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    link.innerHTML = text;
   else
    element.innerHTML = text;
   this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
  }
 },
 GetWindowFooterText: function(index) {
  var element = this.GetWindowFooterTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.innerHTML;
   else
    return element.innerHTML;
  }
  return "";
 },
 SetWindowFooterText: function(index, text) {
  var element = this.GetWindowFooterTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    link.innerHTML = text;
   else
    element.innerHTML = text;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 RefreshPopupElementConnection: function() {
  var index = this.HasDefaultWindow() ? -1 : 0;
  for(; index < this.GetWindowCount(); index++) {
   this.RemoveWindowAllPopupElements(index);
   this.PopulatePopupElements(index);
  }
 },
 GetHeaderImageUrl: function() {
  return this.GetWindowHeaderImageUrl(-1);
 },
 SetHeaderImageUrl: function(value) {
  this.SetWindowHeaderImageUrl(-1, value);
 },
 GetFooterImageUrl: function() {
  return this.GetWindowFooterImageUrl(-1);
 },
 SetFooterImageUrl: function(value) {
  this.SetWindowFooterImageUrl(-1, value);
 },
 GetHeaderNavigateUrl: function() {
  return this.GetWindowHeaderNavigateUrl(-1);
 },
 SetHeaderNavigateUrl: function(value) {
  this.SetWindowHeaderNavigateUrl(-1, value);
 },
 GetFooterNavigateUrl: function() {
  return this.GetWindowFooterNavigateUrl(-1);
 },
 SetFooterNavigateUrl: function(value) {
  this.SetWindowFooterNavigateUrl(-1, value);
 },
 GetHeaderText: function() {
  return this.GetWindowHeaderText(-1);
 },
 SetHeaderText: function(value) {
  this.SetWindowHeaderText(-1, value);
 },
 GetFooterText: function() {
  return this.GetWindowFooterText(-1);
 },
 SetFooterText: function(value) {
  this.SetWindowFooterText(-1, value);
 },
 GetVisible: function() {
  return this.IsVisible();
 },
 SetVisible: function(visible) {
  if(visible && !this.IsVisible())
   this.Show();
  else if(!visible && this.IsVisible())
   this.Hide();
 }
});
ASPxClientPopupControl.Cast = ASPxClientControl.Cast;
ASPxClientPopupControl.GetPopupControlCollection = function () {
 return aspxGetPopupControlCollection();
}
var ASPxClientPopupControlResizeState = {
 Resized : 0,
 Collapsed : 1,
 Expanded : 2,
 Maximized : 3,
 RestoredAfterMaximized : 4
};
ASPxClientPopupControlCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function () {
  this.constructor.prototype.constructor.call(this);
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.visibleModalElements = new Array();
  this.visiblePopupWindowIds = new Array();
  this.zIndex = __aspxPopupControlZIndex;
  this.windowResizeByBodyScrollVisibilityChangingLockCount = 0;
  this.savedBodyWidth = 0;
  this.savedBodyHeight = 0;
  this.overControl = null;
  this.overWindowIndex = -1;
  this.overXPos = __aspxInvalidPosition;
  this.overYPos = __aspxInvalidPosition;
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.scrollEventLockCount = 0;
  this.currentActiveWindowElement = null;
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.resizePanel = null;
  this.selectBanned = false;
  this.pcWindowsAreRestrictedByDocumentWindow = true;
  this.searchForTabIndexInAllElements = false;
  this.docScrollLeft = -1;
  this.docScrollTop = -1;
  this.EnsureSaveScrollState();
 },
 EnsureSaveScrollState: function () {
  if (__aspxDocumentLoaded && this.docScrollLeft < 0 && this.docScrollTop < 0)
   this.SaveScrollState();
 },
 GetPopupWindowFromID: function (id) {
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  var name = id.substring(0, pos);
  var index = id.substr(pos + __aspxPCWIdSuffix.length);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  return new _aspxPopupWindow(popupControl, index);
 },
 DoHideAllWindows: function (srcElement, excptId, applyToAll) {
  for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var id = this.visiblePopupWindowIds[i];
   if (id == excptId) continue;
   if (srcElement != null && _aspxGetParentById(srcElement, id) != null) continue;
   var popupWindow = this.GetPopupWindowFromID(id);
   var windowCloseAction = popupWindow.popupControl.GetWindowCloseAction(popupWindow.windowIndex);
   if (popupWindow.popupControl != null) {
    var popupWindowZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(popupWindow.popupControl.GetWindowElement(popupWindow.windowIndex));
    var isPopupHigherSrcElement = ASPxClientPopupUtils.IsHigher(popupWindowZIndexArray, ASPxClientPopupUtils.GetElementZIndexArray(srcElement)) || !popupWindow.popupControl.HasDefaultWindow();
   }
   if (popupWindow.popupControl != null && (
    (windowCloseAction != "CloseButton" && windowCloseAction != "None") && isPopupHigherSrcElement || applyToAll)) {
    popupWindow.popupControl.DoHideWindow(parseInt(popupWindow.windowIndex));
   }
  }
 },
 DoShowAtCurrentPos: function (name, index, popupElementIndex, evtClone) {
  var pc = this.Get(name);
  if (pc != null && !pc.InternalIsWindowVisible(index))
   pc.DoShowWindowAtPos(index, this.overXPos, this.overYPos, popupElementIndex, true, true, evtClone);
 },
 ActivateWindowElement: function (element, evt) {
  var visibleWindowsCount = this.visiblePopupWindowIds.length;
  if (__aspxPopupControlZIndex <= element.style.zIndex && element.style.zIndex != visibleWindowsCount * 2 + __aspxPopupControlZIndex) {
   this.DeleteWindowFromZIndexOrder(element);
  }
  this.SetWindowElementZIndex(element, __aspxPopupControlZIndex + visibleWindowsCount * 2);
  var pcWElementEventSource = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupWindowElement);
  if (!evt || (evt && pcWElementEventSource == element)) { 
   if (this.GetCurrentActiveWindowElement() != element) {
    this.RefreshTabIndexes(false);
    this.SaveCurrentActiveWindowElement(element);
   }
  }
 },
 RefreshTabIndexes: function (forceRecalculate) {
  var topModalWindow = this.GetTopModalWindow();
  if (topModalWindow != null || forceRecalculate) {
   var topModalWindowZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(topModalWindow);
   this.CalculateTabIndexes(topModalWindowZIndexArray);
  }
 },
 ElementHasTabIndex: function (element) {
  if (__aspxIE && __aspxBrowserVersion < 8) {
   var elementHtml = element.outerHTML;
   var attributeIndex = elementHtml.indexOf('tabIndex');
   return attributeIndex != -1 && attributeIndex < elementHtml.indexOf(">");
  }
  else
   return _aspxIsExists(_aspxGetAttribute(element, "tabindex"));
 },
 IsElementCanBeActive: function (element) {
  return element.tagName === "INPUT" || element.tagName === "A" || 
   element.tagName === "BUTTON" || element.tagName === "TEXTAREA" || 
   element.tagName === "SELECT" || this.ElementHasTabIndex(element);
 },
 GetCanBeActiveElements: function () {
  var searchForTabIndexInAllElements = aspxGetPopupControlCollection().searchForTabIndexInAllElements;
  if (searchForTabIndexInAllElements) {
   var elements = document.getElementsByTagName("*");
   var canBeActiveElements = [];
   for (var i = 0; i < elements.length; i++) {
    if (this.IsElementCanBeActive(elements[i], searchForTabIndexInAllElements))
     canBeActiveElements.push(elements[i]);
   }
   return canBeActiveElements;
  } else {
   var inputs = document.getElementsByTagName("INPUT");
   var links = document.getElementsByTagName("A");
   var lists = document.getElementsByTagName("UL");
   var buttons = document.getElementsByTagName("BUTTON");
   var textareas = document.getElementsByTagName("TEXTAREA");
   var selects = document.getElementsByTagName("SELECT");
   var union = _aspxCollectionsUnionToArray(inputs, links);
   union = _aspxCollectionsUnionToArray(union, buttons);
   union = _aspxCollectionsUnionToArray(union, textareas);
   union = _aspxCollectionsUnionToArray(union, selects);
   return _aspxCollectionsUnionToArray(union, lists);
  }
 },
 CalculateTabIndexes: function (topModalWindowZIndexArray) {
  var elements = this.GetCanBeActiveElements();
  for (var i = 0; i < elements.length; i++) {
   var currentElementZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(elements[i]);
   if (ASPxClientPopupUtils.IsHigher(currentElementZIndexArray, topModalWindowZIndexArray))
    _aspxRestoreTabIndexAttribute(elements[i]);
   else
    _aspxChangeTabIndexAttribute(elements[i]);
  }
 },
 PopupWindowIsModalByVisibleIndex: function (visiblePopupWindowIndex) {
  return this.PopupWindowIsModalByID(this.visiblePopupWindowIds[visiblePopupWindowIndex]);
 },
 PopupWindowIsModalByID: function (windowElementID) {
  var popupWindow = this.GetPopupWindowFromID(windowElementID);
  return popupWindow.popupControl.WindowIsModal(popupWindow.windowIndex);
 },
 SaveCurrentActiveWindowElement: function (windowElement) {
  this.currentActiveWindowElement = windowElement;
 },
 SkipCurrentActiveWindowElement: function (element) {
  if (element == this.GetCurrentActiveWindowElement())
   this.SaveCurrentActiveWindowElement(null);
 },
 GetCurrentActiveWindowElement: function () {
  return this.currentActiveWindowElement;
 },
 GetTopModalWindow: function () {
  var topWindow = null;
  var topWindowZIndexArray = null;
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var currentWindow = _aspxGetElementById(this.visiblePopupWindowIds[i]);
   if (this.PopupWindowIsModalByVisibleIndex(i) && _aspxElementIsVisible(currentWindow)) {
    var currentWindowZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(currentWindow);
    if (topWindow == null || ASPxClientPopupUtils.IsHigher(currentWindowZIndexArray, topWindowZIndexArray)) {
     topWindow = currentWindow;
     topWindowZIndexArray = currentWindowZIndexArray;
    }
   }
  }
  return topWindow;
 },
 DeleteWindowFromZIndexOrder: function (element) {
  for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var windowElement = _aspxGetElementById(this.visiblePopupWindowIds[i]);
   if (!windowElement)
    _aspxArrayRemoveAt(this.visiblePopupWindowIds, i);
   else if (windowElement.style.zIndex > element.style.zIndex)
    this.SetWindowElementZIndex(windowElement, windowElement.style.zIndex - 2);
  }
 },
 SetWindowElementZIndex: function (element, zIndex) {
  element.style.zIndex = zIndex;
  var iFrame = element.overflowElement;
  if (iFrame)
   iFrame.style.zIndex = zIndex - 1;
  var modalElement = element.modalElement;
  if (modalElement)
   modalElement.style.zIndex = zIndex - 1;
  this.UpdateWindowsStateInputElement(element.id);
  this.UpdateWindowsStateCookie(element.id);
 },
 AdjustModalElementsBounds: function () {
  for (var i = 0; i < this.visibleModalElements.length; i++)
   this.AdjustModalElementBounds(this.visibleModalElements[i]);
 },
 AdjustModalElementBounds: function (element) {
  if (!_aspxIsExistsElement(element)) return;
  var x = _aspxPrepareClientPosForElement(0, element, true);
  var y = _aspxPrepareClientPosForElement(0, element, false);
  _aspxSetStyles(element, { left: x, top: y });
  if (__aspxNetscapeFamily && !__aspxFirefox)
   _aspxSetStyles(element, { width: 1, height: 1 });
  _aspxSetStyles(element, { width: _aspxGetDocumentWidth(), height: _aspxGetDocumentHeight() });
 },
 ClearAppearTimer: function () {
  this.appearTimerID = _aspxClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function () {
  this.disappearTimerID = _aspxClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function () {
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function () {
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function (name, index, popupElementIndex, timeout, evt) {
  var evtClone = _aspxCloneObject(evt);
  this.appearTimerID = _aspxSetTimeout(function() {
   aspxGetPopupControlCollection().DoShowAtCurrentPos(name, index, popupElementIndex, evtClone); 
  }, timeout);
 },
 SetDisappearTimer: function (name, index, timeout) {
  this.disappearTimerID = _aspxSetTimeout("aspxPWDisappearTimer(\"" + name + "\", " + index + ")", timeout);
 },
 GetDocScrollDifference: function () {
  return new _aspxScrollDifference(_aspxGetDocumentScrollLeft() - this.docScrollLeft, _aspxGetDocumentScrollTop() - this.docScrollTop);
 },
 IsDocScrolled: function (scroll) {
  return scroll.horizontal != 0 || scroll.vertical != 0;
 },
 SaveScrollState: function () {
  this.docScrollLeft = _aspxGetDocumentScrollLeft();
  this.docScrollTop = _aspxGetDocumentScrollTop();
 },
 InitDragObject: function (control, index, x, y, xClientCorrection, yClientCorrection) {
  this.draggingControl = control;
  this.draggingWindowIndex = index;
  this.gragXOffset = x;
  this.gragYOffset = y;
  this.xClientCorrection = xClientCorrection;
  this.yClientCorrection = yClientCorrection;
  this.SetDocumentSelectionBan(true);
 },
 InitOverObject: function (control, index, evt) {
  this.overControl = control;
  this.overWindowIndex = index;
  if (evt)
   this.SaveCurrentMouseOverPos(evt);
 },
 InitResizeObject: function (control, index, cursor, resizePanel) {
  this.resizeControl = control;
  this.resizeIndex = index;
  this.resizeCursor = cursor;
  this.resizePanel = resizePanel;
  this.SetDocumentSelectionBan(true);
 },
 SetDocumentSelectionBan: function (value) {
  if (this.selectBanned === value)
   return;
  this.selectBanned = value;
  if (__aspxWebKitFamily) {
   if (value) {
    if (!this.webkitUserSelectBackup && document.body.style.webkitUserSelect)
     this.webkitUserSelectBackup = document.body.style.webkitUserSelect;
    document.body.style.webkitUserSelect = "none";
   } else {
    if (this.webkitUserSelectBackup) {
     document.body.style.webkitUserSelect = this.webkitUserSelectBackup;
     delete this.webkitUserSelectBackup;
    } else
     document.body.style.webkitUserSelect = "auto";
   }
  }
 },
 IsResizeInint: function () {
  return this.resizeControl != null;
 },
 ClearDragObject: function () {
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.SetDocumentSelectionBan(this.resizeControl != null);
 },
 ClearResizeObject: function () {
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.SetDocumentSelectionBan(this.draggingControl != null);
  this.resizePanel.parentNode.removeChild(this.resizePanel);
 },
 Drag: function (evt) {
  if(window["__aspxTableColumnResizing"] || window["__aspxDragHelper"]) 
   return;
  if (!_aspxGetIsLeftButtonPressed(evt)) return;
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  if (this.pcWindowsAreRestrictedByDocumentWindow && ASPxClientPopupUtils.CoordinatesInDocumentRect(x, y)) {
   x += this.gragXOffset;
   y += this.gragYOffset;
   this.draggingControl.OnDrag(this.draggingWindowIndex, x, y, this.xClientCorrection, this.yClientCorrection, evt);
   if(__aspxWebKitTouchUI)
    evt.preventDefault();
  }
 },
 DragStop: function () {
  this.draggingControl.OnDragStop(this.draggingWindowIndex);
  this.ClearDragObject();
 },
 ResizeStop: function (evt) {
  this.resizeControl.OnResizeStop(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  aspxGetPopupControlCollection().ClearResizeObject();
 },
 OnPWMouseMove: function (evt, name, index) {
  if (this.draggingControl == null &&
   this.overControl == null &&
   this.resizeControl == null) {
   var pc = aspxGetPopupControlCollection().Get(name);
   if (pc != null) pc.OnMouseMove(evt, index);
  }
 },
 OnPWMouseOver: function (evt) {
  if (!this.overControl || this.draggingControl) return;
  if (this.IsOverPopupWindow(evt))
   this.ClearDisappearTimer();
 },
 IsOverPopupWindow: function (evt) {
  return ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement) != null;
 },
 OnDocumentMouseDown: function (evt) {
  var popupElement = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
  var excptId = popupElement == null ? "" :
   popupElement.DXPopupElementControl.GetWindowElementId(popupElement.DXPopupWindowIndex);
  this.OnMouseDownCore(evt, excptId);
 },
 OnMouseDown: function (evt) {
  this.OnMouseDownCore(evt, "");
 },
 OnMouseDownCore: function (evt, excptId) {
  var srcElement = _aspxGetEventSource(evt);
  this.DoHideAllWindows(srcElement, excptId, false);
  aspxGetPopupControlCollection().ClearAppearTimer();
 },
 OnMouseMove: function (evt) {
  if(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)
   return;
  if (this.draggingControl != null) {
   this.Drag(evt);
  }
  else if (this.overControl != null) {
   this.OnMouseOver(evt);
  }
  else if (this.resizeControl != null) {
   if (__aspxIE && !_aspxGetIsLeftButtonPressed(evt))
    this.ResizeStop(evt);
   else
    this.resizeControl.OnResize(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  }
 },
 OnMouseOver: function (evt) {
  var element = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement);
  var curPopupElementIndex = this.overControl.GetWindowCurrentPopupElementIndex(this.overWindowIndex);
  var curPopupElement = this.overControl.GetPopupElementList()[curPopupElementIndex];
  var popup = element != null ? element.DXPopupElementControl : null;
  var isPopupActionMouseOver = popup && popup.popupAction == 'MouseOver';
  var isCurPopupElement = element === curPopupElement;
  var isCurPopupWindow = element != null && element.id === this.overControl.GetWindowElementId(this.overWindowIndex);
  var isCurPopupElementOrCurPopupWindow = isCurPopupElement || isCurPopupWindow || isPopupActionMouseOver;
  if(isCurPopupElementOrCurPopupWindow) {
   var clearTimer = true;
   var popup = element.DXPopupElementControl;
   if(popup && popup.GetLastShownPopupElementIndex(element.DXPopupWindowIndex) != element.DXPopupElementIndex)
    clearTimer = false;
   if(clearTimer)
    this.ClearDisappearTimer();
   this.SaveCurrentMouseOverPos(evt);
   if (__aspxTouchUI && !ASPxClientTouchUI.IsNativeScrolling())
    return;
   return _aspxCancelBubble(evt);
  }
  this.OnMouseOut();
 },
 OnMouseOut: function (evt) {
  if (!this.overControl || this.draggingControl) return;
  this.ClearAppearTimer();
  var windowCloseAction = this.overControl.GetWindowCloseAction(this.overWindowIndex);
  if (windowCloseAction == "MouseOut" && this.overControl.InternalIsWindowVisible(this.overWindowIndex)) {
   if (!this.IsDisappearTimerActive() && this.IsDisappearAllowedByMouseOut(evt))
    this.SetDisappearTimer(this.overControl.name, this.overWindowIndex, this.overControl.disappearAfter);
  }
  else
   this.OverStop();
 },
 IsDisappearAllowedByMouseOut: function (evt) {
  return __aspxFirefox ? !this.IsOverPopupWindow(evt) : true;  
 },
 OnMouseUp: function (evt) {
  if (this.draggingControl != null)
   this.DragStop();
  if (this.resizeControl != null)
   this.ResizeStop(evt);
 },
 OnResize: function (evt) {
  this.AutoUpdateElementsPosition();
  this.AdjustModalElementsBounds();
 },
 OnScroll: function (evt) {
  if (this.scrollEventLockCount > 0)
   return;
  var scroll = this.GetDocScrollDifference();
  if (this.IsDocScrolled(scroll)) { 
   this.CorrectPositionAtScroll(scroll);
   this.AdjustModalElementsBounds();
   this.SaveScrollState();
  }
  if (__aspxIE && __aspxBrowserVersion <= 8){
   this.CalculateDocumentDimensionsWithoutPinnedWindowsOldIE(function(){
    this.FireScrollEventToWindowsOldIE(evt);
   }.aspxBind(this), evt);
  }
  else {
   this.CalculateDocumentDimensionsWithoutPinnedWindows(evt);
   this.FireScrollEventToWindows(evt);
  }
 },
 GetSavedBodyWidth: function(){
  if (this.savedBodyWidth == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyWidth;
 },
 GetSavedBodyHeight: function(){
  if (this.savedBodyHeight == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyHeight;
 },
 HidePinnedPopupsThatOutFromViewPort: function(){
  var popupsToRestoreVisible = [];
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (!(popupControl.GetIsPinned(popupWindow.windowIndex) && popupControl.GetIsOutFromViewPort(popupWindow.windowIndex)))
    continue;
   var element = popupControl.GetWindowElement(popupWindow.windowIndex);
   if (!element) continue;
   var restoreData = {};
   restoreData.element = element;
   restoreData.display = element.style.display;
   element.style.display = "none";
   popupsToRestoreVisible.push(restoreData);
  }
  return popupsToRestoreVisible;
 },
 RestorePinnedPopupsThatOutFromViewPort: function(popupsToRestoreVisible){
  if (popupsToRestoreVisible.length > 0){
   for (var i = 0; i < popupsToRestoreVisible.length; i++) {
    var restoreData = popupsToRestoreVisible[i];
    restoreData.element.style.display = restoreData.display;
   }
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindows: function (evt) { 
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && _aspxGetEventSource(evt) == document;
  if (needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.savedBodyWidth = _aspxGetDocumentWidth();
  this.savedBodyHeight = _aspxGetDocumentHeight();
  if (needToHideRestorePopupsThatOutFromViewPort)
   this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
 },
 FireScrollEventToWindows: function(evt) {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   popupControl.OnScroll(evt, popupWindow.windowIndex);
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindowsOldIE: function (onCalculateFinished, evt) {  
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && _aspxGetEventSource(evt) == document;
  if (needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.scrollEventLockCount++;
  window.setTimeout(function(){
   this.savedBodyWidth = _aspxGetDocumentWidth();
   this.savedBodyHeight = _aspxGetDocumentHeight();
   if (needToHideRestorePopupsThatOutFromViewPort)
    this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
   if(onCalculateFinished)
    window.setTimeout(function(){onCalculateFinished(); }.aspxBind(this), 0);
   this.scrollEventLockCount--;
  }.aspxBind(this), 0);
 },
 FireScrollEventToWindowsOldIE: function(evt) {
  this.scrollEventLockCount++;
  this.FireScrollEventToWindows(evt);
  this.scrollEventLockCount--;
 },
 LockScrollEvent: function () {
  this.scrollEventLockCount++;
 },
 UnlockScrollEvent: function () {
  this.scrollEventLockCount--;
 },
 CorrectPositionAtScroll: function (scroll) {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex)) {
    if (popupControl.GetAutoUpdatePosition(popupWindow.windowIndex))
     popupWindow.popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
   }
  }
 },
 FFScrollEmulation: function (scroll, popupWindow) {
  var windowElement = popupWindow.popupControl.GetWindowElement(popupWindow.windowIndex);
  windowElement.style.left = (windowElement.offsetLeft - scroll.horizontal) + "px";
  windowElement.style.top = (windowElement.offsetTop - scroll.vertical) + "px";
 },
 OnSelectStart: function () {
  return !this.selectBanned;
 },
 OverStop: function () {
  this.overControl = null;
  this.overWindowIndex = -1;
 },
 OnPWDisappearTimer: function (name, index) {
  var pc = this.Get(name);
  if (pc != null) {
   if (!pc.DoHideWindow(index))
    this.OverStop();
   this.ClearDisappearTimer();
  }
 },
 SaveCurrentMouseOverPos: function (evt) {
  this.overXPos = _aspxGetEventX(evt);
  this.overYPos = _aspxGetEventY(evt);
 },
 RegisterVisibleModalElement: function (element) {
  if (_aspxArrayIndexOf(this.visibleModalElements, element) == -1)
   this.visibleModalElements.push(element);
 },
 UnregisterVisibleModalElement: function (element) {
  _aspxArrayRemove(this.visibleModalElements, element);
 },
 RegisterVisibleWindow: function (element, popupControl, index) {
  if (_aspxArrayIndexOf(this.visiblePopupWindowIds, element.id) == -1) {
   this.visiblePopupWindowIds.push(element.id);
   if (popupControl && popupControl.GetWindowCloseAction(index) == "MouseOut")
    aspxGetPopupControlCollection().InitOverObject(popupControl, index, null);
   this.OnRegisteredVisibleWindow(element);
  }
 },
 OnRegisteredVisibleWindow: function (element) {
  var elementIndex = _aspxArrayIndexOf(this.visiblePopupWindowIds, element.id);
  if (this.PopupWindowIsModalByVisibleIndex(elementIndex))
   ASPxClientPopupUtils.RemoveFocus(element);
 },
 UnregisterVisibleWindow: function (element) {
  this.DeleteWindowFromZIndexOrder(element);
  _aspxArrayRemove(this.visiblePopupWindowIds, element.id);
  var forceRecalculate = this.PopupWindowIsModalByID(element.id);
  this.RefreshTabIndexes(forceRecalculate);
  this.SkipCurrentActiveWindowElement(element);
 },
 UpdateWindowsStateCookie: function (id) {
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  var name = id.substring(0, pos);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  if (popupControl != null)
   popupControl.UpdateWindowsStateCookie(false);
 },
 UpdateWindowsStateInputElement: function (id) {
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  var name = id.substring(0, pos);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  if (popupControl != null)
   popupControl.UpdateWindowsStateInputElement(false);
 },
 AutoUpdateElementsPosition: function () {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex))
    popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
  }
 },
 IsDocumentIsCoveredByModalElement: function () {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (popupControl && popupControl.GetWindowModalElement(popupWindow.windowIndex))
    return true;
  }
  return false;
 },
 LockWindowResizeByBodyScrollVisibilityChanging: function () {
  this.windowResizeByBodyScrollVisibilityChangingLockCount++;
 },
 UnlockWindowResizeByBodyScrollVisibilityChanging: function () {
  this.windowResizeByBodyScrollVisibilityChangingLockCount--;
 },
 WindowResizeByBodyScrollVisibilityChangingLocked: function () {
  return this.windowResizeByBodyScrollVisibilityChangingLockCount > 0;
 },
 HideAllWindows: function () {
  this.DoHideAllWindows(null, "", true);
 }
});
var __aspxPopupControlCollection = null;
function aspxGetPopupControlCollection() {
 if (__aspxPopupControlCollection == null)
  __aspxPopupControlCollection = new ASPxClientPopupControlCollection();
 return __aspxPopupControlCollection;
}
ASPxClientPopupWindow = _aspxCreateClass(null, {
 constructor: function (popupControl, index, name) {
  this.popupControl = popupControl;
  this.index = index;
  this.name = name;
 },
 GetHeaderImageUrl: function () {
  return this.popupControl.GetWindowHeaderImageUrl(this.index);
 },
 SetHeaderImageUrl: function (value) {
  this.popupControl.SetWindowHeaderImageUrl(this.index, value);
 },
 GetFooterImageUrl: function () {
  return this.popupControl.GetWindowFooterImageUrl(this.index);
 },
 SetFooterImageUrl: function (value) {
  this.popupControl.SetWindowFooterImageUrl(this.index, value);
 },
 GetHeaderNavigateUrl: function () {
  return this.popupControl.GetWindowHeaderNavigateUrl(this.index);
 },
 SetHeaderNavigateUrl: function (value) {
  this.popupControl.SetWindowHeaderNavigateUrl(this.index, value);
 },
 GetFooterNavigateUrl: function () {
  return this.popupControl.GetWindowFooterNavigateUrl(this.index);
 },
 SetFooterNavigateUrl: function (value) {
  this.popupControl.SetWindowFooterNavigateUrl(this.index, value);
 },
 GetHeaderText: function () {
  return this.popupControl.GetWindowHeaderText(this.index);
 },
 SetHeaderText: function (value) {
  this.popupControl.SetWindowHeaderText(this.index, value);
 },
 GetFooterText: function () {
  return this.popupControl.GetWindowFooterText(this.index);
 },
 SetFooterText: function (value) {
  this.popupControl.SetWindowFooterText(this.index, value);
 }
});
ASPxClientPopupWindowEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function (window) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
 }
});
ASPxClientPopupWindowCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function (window) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
 }
});
ASPxClientPopupWindowResizeEventArgs = _aspxCreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function (window, resizeState) {
  this.constructor.prototype.constructor.call(this, window);
  this.resizeState = resizeState;
 }
});
ASPxClientPopupWindowPinnedChangedEventArgs = _aspxCreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function (window, pinned) {
  this.constructor.prototype.constructor.call(this, window);
  this.pinned = pinned;
 }
});
function _aspxPopupWindow(popupControl, windowIndex) {
 this.popupControl = popupControl;
 this.windowIndex = windowIndex;
}
function _aspxScrollDifference(horizontal, vertical) {
 this.horizontal = horizontal;
 this.vertical = vertical;
}
function aspxPWDisappearTimer(name, index) {
 aspxGetPopupControlCollection().OnPWDisappearTimer(name, index);
}
function aspxPWHMDown(evt) {
 return _aspxCancelBubble(evt);
}
function aspxPWCBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCloseButtonClick");
}
function aspxPWPBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnPinButtonClick");
}
function aspxPWRBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnRefreshButtonClick");
}
function aspxPWMNBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCollapseButtonClick");
}
function aspxPWMXBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnMaximizeButtonClick");
}
function aspxPWEMOver(evt) {
 aspxGetPopupControlCollection().OnPWMouseOver(evt);
}
function aspxPWMEMDown(evt) {
 var internalScrollableModalDiv = __aspxAndroidDefaultBrowser ? _aspxGetEventSource(evt) : null;
 var modalDiv = internalScrollableModalDiv ? internalScrollableModalDiv.parentNode : _aspxGetEventSource(evt);
 if (modalDiv != null) 
  modalDiv.DXModalPopupControl.OnMouseDownModalElement(evt, modalDiv.DXModalPopupWindowIndex);
}
function aspxPEMEvent(evt) {
 var element = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
 if(element != null) {
  var popupControl = element.DXPopupElementControl;
  var index = element.DXPopupWindowIndex;
  if(evt.type == "mousedown") {
   popupControl.SetIsPopuped(index, popupControl.InternalIsWindowVisible(index));
   aspxGetPopupControlCollection().OnMouseDown(evt);
  }
  else {
   var windowPopupAction = popupControl.GetWindowPopupAction(element.DXPopupWindowIndex);
   var leftMouseButtonAction = windowPopupAction == "LeftMouseClick" && _aspxGetIsLeftButtonPressed(evt);
   var rightMouseButtonAction = windowPopupAction == "RightMouseClick" && !_aspxGetIsLeftButtonPressed(evt);
   if (leftMouseButtonAction || rightMouseButtonAction) {
    if (rightMouseButtonAction)
     ASPxClientPopupUtils.PreventContextMenu(evt);
    var windowCloseAction = popupControl.GetWindowCloseAction(index);
    var isPopuped = popupControl.GetIsPopuped(index);
    var isNewPopupElement = popupControl.GetLastShownPopupElementIndex(index) != element.DXPopupElementIndex;
    if(isPopuped && isNewPopupElement) {
     popupControl.DoHideWindow(index);
     aspxGetPopupControlCollection().ClearDisappearTimer();
     isPopuped = false;
    }
    if(!(isPopuped && windowCloseAction == "OuterMouseClick")) {
     popupControl.DoShowWindow(index, element.DXPopupElementIndex, evt);
    }
    if(windowCloseAction == "MouseOut")
     aspxGetPopupControlCollection().InitOverObject(popupControl, element.DXPopupWindowIndex, evt);
    return false;
   }
  }
 }
}
function aspxPWDGMDown(evt, name, index) {
 return aspxPWMDown(evt, name, index, true);
}
function aspxPWGripMDown(evt, name, index) {
 aspxPWMDownCore(evt, name, index, false);
 return aspxPWHMDown(evt);
}
function aspxPointOnElementScrollBar(element, x, y, rtl) {
 var scrollWidth = _aspxGetVerticalScrollBarWidth(); 
 var hasHorizontalScroll = element.scrollWidth > element.clientWidth;
 var hasVerticalScroll = element.scrollHeight > element.clientHeight;
 var ceilX = rtl ? _aspxGetAbsoluteX(element) + scrollWidth : 
  _aspxGetAbsoluteX(element) + (element.offsetWidth - _aspxGetHorizontalBordersWidth(element));
 var ceilY = _aspxGetAbsoluteY(element) + (element.offsetHeight - _aspxGetVerticalBordersWidth(element));
 return (hasVerticalScroll && x >= ceilX - scrollWidth && x <= ceilX) ||
     (hasHorizontalScroll && y >= ceilY - scrollWidth && y <= ceilY);
}
function aspxPWMDown(evt, name, index, isWindowContentDraggingAllowed) {
 var pointOnScrollBar = false;
 var pc = aspxGetPopupControlCollection().Get(name); 
 if(pc && pc.enableContentScrolling) {
  var rtl = pc.rtl && (__aspxIE || __aspxFirefox || __aspxOpera);
  pointOnScrollBar = aspxPointOnElementScrollBar(pc.GetContentContainer(index), evt.clientX, evt.clientY, rtl);
 }
 aspxPWMDownCore(evt, name, index, isWindowContentDraggingAllowed, pointOnScrollBar);
 if (isWindowContentDraggingAllowed) { 
  aspxGetPopupControlCollection().OnDocumentMouseDown(evt); 
  if (typeof (aspxGetDropDownCollection) == "function")
   aspxGetDropDownCollection().OnDocumentMouseDown(evt); 
  if(!pointOnScrollBar) {
   if(!__aspxWebKitTouchUI && _aspxGetEventSource(evt).tagName == "IMG") 
    _aspxPreventEvent(evt);
  }
 }
}
function aspxPWMDownCore(evt, name, index, isDraggingAllowed, pointOnScrollBar) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) {
  pc.OnActivateMouseDown(evt, index);
  pc.OnMouseDown(evt, index, isDraggingAllowed, pointOnScrollBar);
 }
}
function aspxPWMMove(evt, name, index) {
 aspxGetPopupControlCollection().OnPWMouseMove(evt, name, index);
}
function aspxPCAStop(name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnAnimationStop(index);
}
function aspxPCIframeLoad(evt) {
 var srcElement = _aspxGetEventSource(evt);
 if (srcElement) {
  var pcName = srcElement.popupControlName;
  var pcWndIndex = srcElement.pcWndIndex;
  if (pcName) {
   var pc = aspxGetPopupControlCollection().Get(pcName);
   pc.OnIFrameLoad(pcWndIndex);
  }
 }
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxPopupControlDocumentMouseDown);
function aspxPopupControlDocumentMouseDown(evt) {
 aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, aspxPopupControlDocumentMouseUp);
function aspxPopupControlDocumentMouseUp(evt) {
 return aspxGetPopupControlCollection().OnMouseUp(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, aspxPopupControlDocumentMouseMove);
function aspxPopupControlDocumentMouseMove(evt) {
 if (typeof (aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseMove(evt);
}
_aspxAttachEventToDocument("mouseout", aspxPopupControlDocumentMouseOut);
function aspxPopupControlDocumentMouseOut(evt) {
 if (typeof (aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseOut(evt);
}
_aspxAttachEventToElement(window, "resize", aspxPopupControlWindowResize);
function aspxPopupControlWindowResize(evt) {
 aspxGetPopupControlCollection().OnResize(evt);
}
_aspxAttachEventToElement(window, "scroll", aspxPopupControlWindowScroll);
function aspxPopupControlWindowScroll(evt) {
 aspxGetPopupControlCollection().OnScroll(evt);
}
_aspxAttachEventToDocument("selectstart", aspxPopupControlDocumentSelectStart);
function aspxPopupControlDocumentSelectStart(evt) {
 var ret = aspxGetPopupControlCollection().OnSelectStart(evt);
 if (!ret) return false; 
}
function aspxTestPopupWindowElement(element) {
 return !!element.DXPopupWindowElement;
}
function aspxTestPopupControlElement(element) {
 return element.DXPopupElementControl && _aspxIsExists(element.DXPopupWindowIndex);
}
function aspxTestPopupControlOverElement(element) {
 var collection = aspxGetPopupControlCollection();
 var popupControl = collection.overControl;
 var index = collection.overWindowIndex;
 var windowId = popupControl.GetWindowElementId(index);
 if(element.id == windowId)
  return true;
 var popupElements = popupControl.GetPopupElementList(index);
 for(var i = 0; i < popupElements.length; i++)
  if(popupElements[i] == element)
   return true;
 return false;
}
MVCxClientPopupControl = _aspxCreateClass(ASPxClientPopupControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data){
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientPopupControl.prototype.PerformCallback.call(this, data);
 },
 PerformWindowCallback: function(window, data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  this.callbackCustomArgs["windowIndex"] = window ? window.index : -1;
  ASPxClientPopupControl.prototype.PerformWindowCallback.call(this, window, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) }; 
  ASPxClientPopupControl.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command){
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientPopupControl.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientPopupControl.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
   if(result.isHandled)
    this.HideAllLoadingPanels();
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID){
  if(this.callbackCustomArgs != {})
   window.setTimeout(function(){ this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientPopupControl.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientPopupControl.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.html = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientPopupControl.prototype.EvalCallbackResult.call(this, resultString);
 }
});
ASPxClientLoadingPanel = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.containerElementID = "";
  this.containerElement = null;
  this.horizontalOffset = 0;
  this.verticalOffset = 0;
  this.isTextEmpty = false;
  this.showImage = true;
  this.shown = false;
  this.currentoffsetElement = null;
  this.currentX = null;
  this.currentY = null;
 },
 Initialize: function(){
  if(this.containerElementID != "")
   this.containerElement = _aspxGetElementById(this.containerElementID);
  this.constructor.prototype.Initialize.call(this);
 },
 SetCurrentShowArguments: function(offsetElement, x, y){
  if(offsetElement == null) 
   offsetElement = this.containerElement;
  if(offsetElement && !_aspxIsValidElement(offsetElement))
   offsetElement = _aspxGetElementById(offsetElement.id);
  if(offsetElement == null) 
   offsetElement = document.body;
  this.currentoffsetElement = offsetElement;
  this.currentX = x;
  this.currentY = y;
 },
 ResetCurrentShowArguments: function(){
  this.currentoffsetElement = null;
  this.currentX = null;
  this.currentY = null;
 },
 SetLoadingPanelPosAndSize: function(){
  var element = this.GetMainElement();
  this.SetLoadingPanelLocation( this.currentoffsetElement, element, this.currentX, this.currentY, this.horizontalOffset, this.verticalOffset);
 },
 SetLoadingDivPosAndSize: function(){
  var element = this.GetLoadingDiv();
  if(element != null){
   _aspxSetElementDisplay(element, true);
   this.SetLoadingDivBounds(this.currentoffsetElement, element);
  }
 },
 ShowInternal: function(offsetElement, x, y){
  this.SetCurrentShowArguments(offsetElement, x, y);
  var element = this.GetMainElement();
  _aspxSetElementDisplay(element, true);
  this.SetLoadingPanelPosAndSize();
  this.SetLoadingDivPosAndSize();
  this.shown = true;
 },
 Show: function(){
  this.ShowInternal(null);
 },
 ShowInElement: function(htmlElement){
  if(htmlElement)
   this.ShowInternal(htmlElement);
 },
 ShowInElementByID: function(id){
  var htmlElement = _aspxGetElementById(id);
  this.ShowInElement(htmlElement);
 },
 ShowAtPos: function(x, y){
  this.ShowInternal(null, x, y);
 },
 SetText: function(text){
  this.isTextEmpty = (text == null || text == "");
  var textLabel = this.GetTextLabel();
  if(textLabel)
   textLabel.innerHTML = this.isTextEmpty ? "&nbsp;" : text;
 },
 GetText: function() {
  return this.isTextEmpty ? "" : this.GetTextLabel().innerHTML;
 },
 Hide: function(){
  var element = this.GetMainElement();
  _aspxSetElementDisplay(element, false);
  element = this.GetLoadingDiv();
  if(element != null) {
   _aspxSetStyles(element, { width: 1, height: 1 });
   _aspxSetElementDisplay(element, false);
  }
  this.ResetCurrentShowArguments();
  this.shown = false;
 },
 GetTextLabel: function(){
  return this.GetChild("_TL");
 },
 GetVisible: function(){
  return _aspxGetElementDisplay(this.GetMainElement());
 },
 SetVisible: function(visible){
  if(visible && !this.IsVisible())
   this.Show();
  else if(!visible && this.IsVisible())
   this.Hide();
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(){
  if(this.shown){
   this.SetLoadingPanelPosAndSize();
   this.SetLoadingDivPosAndSize();
  }
 }
});
ASPxClientLoadingPanel.Cast = ASPxClientControl.Cast;
(function () {
 var ASPxSplitterHelper = _aspxCreateClass(null, {
  constructor: function (splitter) {
   this.splitter = splitter;
   this.clientStateElementId = this.splitter.name + "_CS";
  },
  GetClientStateElement: function () {
   return ASPxCacheHelper.GetCachedValue(this, this.clientStateElementId, function () {
    return _aspxGetElementById(this.clientStateElementId);
   });
  },
  GetMoveMaxDeltaSize: function (deltaSize) {
   if (deltaSize == 0)
    return 0;
   var splitter = this.splitter,
    leftPane = splitter.moveLeftPane,
    rightPane = splitter.moveRightPane;
   if (splitter.isHeavyUpdate) {
    var parent = leftPane.parent;
    var totalSize = 0, minSize = 0;
    for (var i = 0; i < parent.panes.length; i++) {
     var pane = parent.panes[i];
     if (pane.isSizePx)
      continue;
     if (pane.collapsed) {
      var collapsedSize = pane.GetSizeDiff(pane.isVertical);
      totalSize += collapsedSize;
      minSize += collapsedSize;
     }
     else {
      totalSize += pane.GetOffsetSize();
      minSize += pane.GetMinSize();
     }
    }
    var rightPanePx = rightPane.isSizePx;
    if (rightPanePx)
     deltaSize = this.GetPaneMaxDeltaSize(rightPane, -deltaSize);
    deltaSize = this.GetMaxDeltaSize(totalSize, minSize, Number.MAX_VALUE, -deltaSize);
    if (!rightPanePx)
     deltaSize = this.GetPaneMaxDeltaSize(leftPane, -deltaSize);
   }
   else {
    var parent = leftPane.parent,
     rightPaneAutoSize = rightPane.IsAutoSize(parent.isVertical),
     leftPaneAutoSize = leftPane.IsAutoSize(parent.isVertical);
    if (!rightPaneAutoSize)
     deltaSize = -this.GetPaneMaxDeltaSize(rightPane, -1 * deltaSize);
    if (!leftPaneAutoSize)
     deltaSize = this.GetPaneMaxDeltaSize(leftPane, deltaSize);
   }
   return deltaSize;
  },
  GetPaneMaxDeltaSize: function (pane, deltaSize) {
   return this.GetMaxDeltaSize(pane.GetOffsetSize(), pane.GetMinSize(), pane.maxSize, deltaSize);
  },
  GetMaxDeltaSize: function (size, min, max, deltaSize) {
   var minDeltaSize = Math.floor(min - size);
   var maxDeltaSize = Math.floor(max - size);
   if (deltaSize < minDeltaSize)
    return (size < min) ? 0 : minDeltaSize;
   else if (deltaSize > maxDeltaSize)
    return (size > max) ? 0 : maxDeltaSize;
   return deltaSize;
  },
  GetCurrentPos: function () {
   return this.splitter.moveIsVertical
    ? ASPxClientSplitter.CurrentYPos
    : ASPxClientSplitter.CurrentXPos;
  },
  SetResizingPanelVisibility: function (visible, cursor) {
   var resizingPanel = ASPxCacheHelper.GetCachedValue(this, "resizingPanel", function () {
    var resizingPanel = document.createElement("DIV");
    resizingPanel.style.overflow = "hidden";
    resizingPanel.style.position = "absolute";
    if (__aspxIE && __aspxBrowserMajorVersion < 10) {
     resizingPanel.style.backgroundColor = "White";
     resizingPanel.style.filter = "alpha(opacity=1)";
    }
    resizingPanel.isVisible = false;
    return resizingPanel;
   });
   if (resizingPanel.isVisible != visible) {
    if (visible) {
     var mainElement = this.splitter.GetMainElement();
     _aspxSetStyles(resizingPanel, {
      width: mainElement.offsetWidth,
      height: mainElement.offsetHeight
     });
     if (cursor)
      resizingPanel.style.cursor = cursor;
     mainElement.parentNode.appendChild(resizingPanel);
     _aspxSetAbsoluteX(resizingPanel, _aspxGetAbsoluteX(mainElement));
     _aspxSetAbsoluteY(resizingPanel, _aspxGetAbsoluteY(mainElement));
    }
    else
     resizingPanel.parentNode.removeChild(resizingPanel);
    resizingPanel.isVisible = visible;
   }
  }
 });
 ASPxSplitterHelper.Resize = function (pane1, pane2, deltaSize) {
  if (pane1.isSizePx || pane2.isSizePx) {
   var parent = pane1.parent;
   if (pane1.isSizePx && !pane1.IsAutoSize(parent.isVertical))
    pane1.size += deltaSize;
   if (pane2.isSizePx && !pane2.IsAutoSize(parent.isVertical))
    pane2.size -= deltaSize;
  }
  else {
   var c = (pane1.size + pane2.size) / (pane1.GetOffsetSize() + pane2.GetOffsetSize());
   pane1.size = c * (pane1.GetOffsetSize() + deltaSize);
   pane2.size = c * (pane2.GetOffsetSize() - deltaSize);
  }
 };
 ASPxSplitterHelper.IsAllowResize = function (pane1, pane2) {
  if (!pane1 || !pane2)
   return false;
  if (!pane1.splitter.enabled)
   return false;
  var bothAutoSizeOrPercent = pane1.isVertical
   ? pane1.autoHeight && pane2.autoHeight || pane1.autoHeight && !pane2.isSizePx || !pane1.isSizePx && pane2.autoHeight
   : pane1.autoWidth && pane2.autoWidth || pane1.autoWidth && !pane2.isSizePx || !pane1.isSizePx && pane2.autoWidth;
  if (bothAutoSizeOrPercent)
   return false;
  return pane1.splitter.allowResize && pane1.allowResize && pane2.allowResize;
 };
 var ASPxSplitterPaneHelper = _aspxCreateClass(null, {
  constructor: function (pane) {
   this.pane = pane;
   this.indexPath = this.GetIndexPath();
   var paneIdPostfix = this.pane.isRootPane ? "" : "_" + this.indexPath;
   var separatorIdPostfix = paneIdPostfix + "_S";
   this.postfixes = {
    pane: paneIdPostfix,
    separator: separatorIdPostfix,
    table: paneIdPostfix + "_T",
    contentContainer: paneIdPostfix + "_CC",
    collapseForwardButton: separatorIdPostfix + "_CF",
    collapseBackwardButton: separatorIdPostfix + "_CB",
    collapseButtonsSeparator: separatorIdPostfix + "_CS"
   };
   this.buttonsTableExists = !!this.GetCollapseBackwardButton();
   this.separatorImageExists = !!this.GetCollapseButtonsSeparatorImage();
   this.buttonsExists = this.buttonsTableExists || this.separatorImageExists;
  },
  GetCachedValue: function (name, func) {
   return ASPxCacheHelper.GetCachedValue(this, name, func);
  },
  DropCachedValue: function (name) {
   ASPxCacheHelper.DropCachedValue(this, name);
  },
  GetIndexPath: function () {
   if (this.pane.isRootPane)
    return "";
   var parentPane = this.pane.parent;
   if (parentPane.isRootPane)
    return "" + this.pane.index;
   return parentPane.helper.indexPath + __aspxItemIndexSeparator + this.pane.index;
  },
  GetCachedElement: function (idPostfix) {
   return this.GetCachedValue(idPostfix, function () {
    return this.pane.splitter.GetChild(idPostfix);
   });
  },
  DropCachedElement: function (idPostfix) {
   this.DropCachedValue(idPostfix);
  },
  GetPaneElement: function () {
   return this.GetCachedElement(this.postfixes.pane);
  },
  GetTableElement: function () {
   return this.GetCachedElement(this.postfixes.table);
  },
  GetContentContainerElement: function () {
   return this.GetCachedElement(this.postfixes.contentContainer);
  },
  DropContentContainerElementFromCache: function () {
   this.DropCachedElement(this.postfixes.contentContainer);
  },
  GetSeparatorElementId: function () {
   return this.pane.splitter.name + this.postfixes.separator;
  },
  GetSeparatorElement: function () {
   return this.GetCachedElement(this.postfixes.separator);
  },
  GetSeparatorDivElement: function () {
   return this.GetCachedValue("separatorDivElement", function () {
    var separatorElement = this.GetSeparatorElement();
    return separatorElement ? separatorElement.childNodes[0] : null;
   });
  },
  GetCollapseBackwardButton: function () {
   return this.GetCachedElement(this.postfixes.collapseBackwardButton);
  },
  GetCollapseForwardButton: function () {
   return this.GetCachedElement(this.postfixes.collapseForwardButton);
  },
  GetCollapseButtonsSeparator: function () {
   return this.GetCachedElement(this.postfixes.collapseButtonsSeparator);
  },
  GetCollapseButtonsTable: function () {
   return this.GetCachedValue("collapseButtonsTable", function () {
    return this.buttonsTableExists ? _aspxGetParentByTagName(this.GetCollapseForwardButton(), "TABLE") : null;
   });
  },
  GetCollapseButtonsSeparatorImage: function () {
   return this.GetCachedValue("collapseButtonsSeparatorImage", function () {
    var separator = this.GetCollapseButtonsSeparator();
    if (!separator) {
     if (!this.buttonsTableExists)
      separator = this.GetSeparatorElement();
     else
      return null;
    }
    return _aspxGetChildByTagName(separator, "IMG", 0);
   });
  },
  GetButtonUpdateElement: function (buttonElement) {
   return !this.pane.isVertical ? buttonElement.parentNode : buttonElement;
  },
  ClearElementSizeProperty: function (property) {
   var element = this.GetPaneElement(),
    isVertical = property === "width";
   this.pane.savedSizeProperty = element.style[property];
   element.style[property] = "";
   if (!this.pane.IsAutoSize(isVertical)) {
    var contentContainerElement = this.GetContentContainerElement();
    this.pane.savedContentSizeProperty = contentContainerElement.style[property];
    contentContainerElement.style[property] = (this.pane.GetMinSize() - (isVertical ? this.pane.contentContainerWidthDiff : this.pane.contentContainerHeightDiff)) + "px";
   }
  },
  RestoreElementSizeProperty: function (property) {
   if (this.pane.savedSizeProperty) {
    this.GetPaneElement().style[property] = this.pane.savedSizeProperty;
    this.pane.savedSizeProperty = null;
   }
   if (!this.pane.IsAutoSize(property === "width")) {
    this.GetContentContainerElement().style[property] = this.pane.savedContentSizeProperty;
    this.pane.savedContentSizeProperty = null;
   }
  },
  SetEmptyDivVisible: function (visible) {
   var emptyDiv = this.GetCachedValue("emptyDiv", function () {
    var emptyDiv = document.createElement("DIV");
    emptyDiv.style.cssText = "overflow: hidden; width: 0px; height: 0px";
    emptyDiv.isVisible = false;
    return emptyDiv;
   });
   if (visible != emptyDiv.isVisible) {
    if (visible)
     this.GetPaneElement().appendChild(emptyDiv);
    else
     this.GetPaneElement().removeChild(emptyDiv);
    emptyDiv.isVisible = visible;
   }
  },
  HasCollapsedParent: function () {
   var parent = this.pane.parent;
   if (parent)
    return parent.collapsed || parent.helper.HasCollapsedParent();
   return false;
  },
  HasVisibleAutoSizeChildren: function (isVertical) {
   var result = false;
   if (!_aspxIsExists(isVertical))
    isVertical = this.pane.isVertical;
   for (var i = 0; i < this.pane.panes.length; i++) {
    var pane = this.pane.panes[i];
    result = result || !pane.collapsed && pane.IsAutoSize(isVertical) && (!pane.panes.length || pane.helper.HasVisibleAutoSizeChildren(isVertical));
   }
   return result;
  }
 });
 var ASPxSplitterResizingPointer = _aspxCreateClass(null, {
  constructor: function (elementId) {
   this.elementId = elementId;
   this.element = _aspxGetElementById(this.elementId);
   this.x = 0;
   this.y = 0;
  },
  SetCursor: function (cursor) {
   this.element.style.cursor = cursor;
  },
  SetPosition: function (x, y) {
   this.x = x;
   this.y = y;
   _aspxSetAbsoluteY(this.element, this.y);
   _aspxSetAbsoluteX(this.element, this.x);
  },
  SetVisibility: function (isVisible) {
   _aspxSetElementDisplay(this.element, isVisible);
  },
  Move: function (delta, isX) {
   if (isX)
    this.x += delta;
   else
    this.y += delta;
   this.SetPosition(this.x, this.y);
  },
  AttachToElement: function (element, isShow) {
   _aspxSetStyles(this.element, {
    width: element.offsetWidth, height: element.offsetHeight
   });
   this.SetVisibility(true);
   this.SetPosition(_aspxGetAbsoluteX(element), _aspxGetAbsoluteY(element));
  }
 });
 var ASPxClientSplitter = _aspxCreateClass(ASPxClientControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.emptyUrls = [
    "javascript:false",
    "about:blank",
    "#"
   ];
   this.width = "100%";
   this.height = "200px";
   this.helper = new ASPxSplitterHelper(this);
   this.resizingPointer = new ASPxSplitterResizingPointer(this.name + "_RP");
   this.rootPane = new ASPxClientSplitterPane(this, null, 0, 0, {});
   this.liveResizing = false;
   this.allowResize = true;
   this.defaultMinSize = 5;
   this.showSeparatorImage = true;
   this.showCollapseBackwardButton = false;
   this.showCollapseForwardButton = false;
   this.fullScreen = false;
   this.prepared = false;
   this.PaneResizing = new ASPxClientEvent();
   this.PaneResized = new ASPxClientEvent();
   this.PaneCollapsing = new ASPxClientEvent();
   this.PaneCollapsed = new ASPxClientEvent();
   this.PaneExpanding = new ASPxClientEvent();
   this.PaneExpanded = new ASPxClientEvent();
   this.PaneResizeCompleted = new ASPxClientEvent();
   this.PaneContentUrlLoaded = new ASPxClientEvent();
   this.isASPxClientSplitter = true;
   this.autoHeightPanes = [];
   this.autoWidthPanes = [];
  },
  CreatePanes: function (panesInfo) {
   this.CreatePanesInternal(this.rootPane, panesInfo);
   this.rootPane.ForEach("UpdateSize");
   this.rootPane.ForEach("UpdateAutoSize");
   this.state = this.GetStateObj(panesInfo);
  },
  CreatePanesInternal: function (parent, panesInfo) {
   var prevPane = null,
    visibleIndex = 0;
   for (var i = 0; i < panesInfo.length; i++) {
    var paneInfo = panesInfo[i];
    if (!paneInfo.v) continue; 
    var pane = new ASPxClientSplitterPane(this, parent, visibleIndex++, i, paneInfo);
    updatePrevNext(pane);
    updateAutoSize(parent, pane.autoWidth, pane.autoHeight);
    parent.panes.push(pane);
    if (_aspxIsExists(paneInfo["i"]))
     this.CreatePanesInternal(pane, paneInfo["i"]);
   }
   function updatePrevNext(pane) {
    pane.prevPane = prevPane;
    if (prevPane != null)
     prevPane.nextPane = pane;
    prevPane = pane;
   }
   function updateAutoSize(pane, autoWidth, autoHeight) {
    if (pane && (autoWidth || autoHeight)) {
     if (autoWidth)
      pane.autoWidth = true;
     if (autoHeight)
      pane.autoHeight = true;
     if (!pane.splitter.hasAutoSizePane)
      pane.splitter.hasAutoSizePane = true;
     updateAutoSize(pane.parent, autoWidth, autoHeight);
    }
   }
  },
  GetStateObj: function (panesInfo) {
   var result = [];
   for (var i = 0; i < panesInfo.length; i++) {
    var paneState = {};
    if (panesInfo[i].st) {
     paneState.st = panesInfo[i].st;
     paneState.s = panesInfo[i].s;
    }
    if (panesInfo[i].c)
     paneState.c = panesInfo[i].c;
    if (panesInfo[i]["i"])
     paneState["i"] = this.GetStateObj(panesInfo[i]["i"]);
    result.push(paneState);
   }
   return result;
  },
  GetClientStateString: function () {
   return _aspxToJson(this.GetClientStateObject());
  },
  GetClientStateObject: function () {
   return this.RefreshState(this.state, this.rootPane.panes);
  },
  RefreshState: function (state, panes) {
   for (var i = 0; i < panes.length; i++) {
    var pane = panes[i];
    var paneState = state[pane._index];
    paneState.s = Math.round(pane.size * 1000) / 1000;
    paneState.st = pane.sizeType;
    paneState.c = pane.collapsed ? 1 : 0;
    if (pane.panes.length == 0) {
     paneState.spt = pane.scrollTop;
     paneState.spl = pane.scrollLeft;
    }
    if (pane.panes.length > 0)
     this.RefreshState(paneState["i"], pane.panes);
   }
   return state;
  },
  InlineInitialize: function () {
   this.EnsureFullscreenMode();
   this.rootPane.ForEach("Initialize");
   this.constructor.prototype.InlineInitialize.call(this);
  },
  EnsureFullscreenMode: function () {
   if (this.fullScreen) {
    var overflowProperty = "overflow",
     oldIEOverflowAutoProperty = null,
     autoWidth = this.rootPane.autoWidth,
     autoHeight = this.rootPane.autoHeight;
    if (autoWidth && autoHeight) {
     overflowProperty = null;
     oldIEOverflowAutoProperty = "overflow";
    }
    else if (autoWidth) {
     overflowProperty = "overflowY";
     oldIEOverflowAutoProperty = "overflowX";
    }
    else if (autoHeight) {
     overflowProperty = "overflowX";
     oldIEOverflowAutoProperty = "overflowY";
    }
    var element = this.GetMainElement().parentNode;
    while (element && element.tagName) {
     element.style.height = "100%";
     var tagName = element.tagName.toLowerCase();
     if (tagName == "form" || tagName == "body" || tagName == "html") {
      element.style.margin = "0px";
      element.style.padding = "0px";
      if (overflowProperty)
       element.style[overflowProperty] = "hidden";
      if (__aspxIE && __aspxBrowserMajorVersion < 9 && tagName == "form" && oldIEOverflowAutoProperty)
       element.style[oldIEOverflowAutoProperty] = "auto";
      if ((autoHeight != autoWidth || (__aspxIE && __aspxBrowserMajorVersion < 9)) && (tagName == "body" || tagName == "html"))
       element.style.overflow = "hidden";
     }
     if (tagName == "html")
      break;
     element = element.parentNode;
    }
   }
  },
  Initialize: function () {
   this.constructor.prototype.Initialize.call(this);
   this.rootPane.ForEach("CreateContentUrlIFrame", true);
  },
  AfterInitialize: function () {
   this.constructor.prototype.AfterInitialize.call(this);
   this.rootPane.ForEach("RaiseResizedEvent", true);
  },
  IsPrepared: function () {
   return this.prepared;
  },
  Prepare: function () {
   if (this.IsPrepared() || !this.IsDisplayed())
    return;
   this.rootPane.ForEach("Prepare", true);
   ASPxClientSplitter.Instances.Add(this);
   this.prepared = true;
  },
  UpdateAdjustmentFlags: function () {
   var mainElement = this.GetMainElement();
   if (mainElement) {
    var mainElementStyle = _aspxGetCurrentStyle(mainElement);
    this.UpdatePercentSizeConfig([mainElementStyle.width, this.width], [mainElementStyle.height, this.height]);
   }
  },
  AdjustControlCore: function () {
   this.Prepare();
   this.UpdateControlSizes();
  },
  NeedCollapseControlCore: function () {
   return true;
  },
  NeedUpdateControlSizes: function () {
   return _aspxIsPercentageSize(this.width) || _aspxIsPercentageSize(this.height) || !this.sizeUpdatedOnce;
  },
  UpdateControlSizes: function (forceUpdate) {
   if (!(forceUpdate || this.NeedUpdateControlSizes()) || !this.IsDisplayed())
    return;
   var element = this.GetMainElement(),
    autoHeightSpacer;
   if (this.rootPane.autoHeight) {
    autoHeightSpacer = _aspxCreateHtmlElementFromString("<div style='float: left; width: 0px; height: " + element.offsetHeight + "px'></div>");
    element.parentNode.insertBefore(autoHeightSpacer, element);
   }
   element.style.width = this.width;
   element.style.height = this.height;
   var focusedElement = _aspxGetFocusedElement(); 
   if (__aspxIE && __aspxBrowserVersion === 9) {  
    _aspxChangeStyleAttribute(this.GetMainElement(), "display", "none");
    this.UpdatePanesVisible(_aspxChangeStyleAttribute);
    _aspxRestoreStyleAttribute(this.GetMainElement(), "display");
   }
   else
    this.UpdatePanesVisible(_aspxChangeStyleAttribute);
   if (__aspxWebKitFamily)
    this.CreateWebkitSpecialElement();
   var newWidth = _aspxGetClearClientWidth(element);
   var newHeight = _aspxGetClearClientHeight(element);
   this.UpdatePanesVisible(_aspxRestoreStyleAttribute);
   if (autoHeightSpacer)
    element.parentNode.removeChild(autoHeightSpacer);
   if ((this.rootPane.offsetWidth != newWidth) || (this.rootPane.offsetHeight != newHeight)) {
    this.rootPane.offsetWidth = Math.max(newWidth, this.defaultMinSize);
    this.rootPane.offsetHeight = Math.max(newHeight, this.defaultMinSize);
    this.rootPane.UpdatePanes(true);
   }
   try { 
    if (focusedElement &&  
     !__aspxAndroidMobilePlatform && 
     !(__aspxMacOSMobilePlatform && __aspxBrowserVersion >= 6) && 
     _aspxGetIsParent(element, focusedElement) && 
     !(focusedElement.tagName && focusedElement.tagName == "IFRAME")) { 
     focusedElement.blur();
     if (__aspxIE && __aspxBrowserVersion < 8 && focusedElement.tagName == "TD") {
      var childInput = _aspxGetChildByTagName(focusedElement, "INPUT", 0);
      if (childInput && _aspxElementIsVisible(childInput))
       focusedElement = childInput;
     }
     focusedElement.focus(); 
    }
   }
   catch (e) { }
   this.rootPane.ForEach("ApplyScrollPosition", true);
   this.rootPane.ForEach("AdjustControls", true);
   if (this.IsPrepared())
    this.sizeUpdatedOnce = true;
   this.SynchronizeProperties();
  },
  UpdateAutoSizePanes: function (forced) {
   if (this.hasAutoSizePane) {
    var heightChanged = this.UpdateAutoHeightPanes(forced),
     widthChanged = this.UpdateAutoWidthPanes(forced);
    if (forced || heightChanged || widthChanged)
     this.rootPane.ForEach("UpdateChildrenSize");
   }
  },
  UpdateAutoHeightPanes: function (forced) {
   var changed = false;
   for (var i = 0; i < this.autoHeightPanes.length; i++)
    changed = this.autoHeightPanes[i].IsContentHeightChanged() || changed;
   if (forced || changed)
    this.UpdateAutoSizePanesSizes(false);
   return changed;
  },
  UpdateAutoWidthPanes: function (forced) {
   var changed = false;
   for (var i = 0; i < this.autoWidthPanes.length; i++)
    changed = this.autoWidthPanes[i].IsContentWidthChanged() || changed;
   if (forced || changed)
    this.UpdateAutoSizePanesSizes(true);
   return changed;
  },
  UpdateAutoSizePanesSizes: function (isVertical) {
   var autoSizePanes = isVertical
    ? this.autoWidthPanes
    : this.autoHeightPanes,
    property = isVertical ? "width" : "height",
    percentPanes = [];
   for (var i = 0; i < autoSizePanes.length; i++) {
    var pane = autoSizePanes[i];
    if (!pane.helper.HasCollapsedParent()) {
     pane.helper.ClearElementSizeProperty(property);
     for (var child = pane.panes[0]; child; child = child.nextPane)
      if (!child.isSizePx) {
       percentPanes.push(child);
       child.helper.ClearElementSizeProperty(property);
      }
    }
   }
   for (var i = 0; i < autoSizePanes.length; i++)
    autoSizePanes[i].UpdateOffsetSize(isVertical);
   for (var i = 0; i < autoSizePanes.length; i++) {
    var pane = autoSizePanes[i];
    if (!pane.helper.HasCollapsedParent())
     pane.helper.RestoreElementSizeProperty(property);
   }
   for (var i = 0; i < percentPanes.length; i++)
    percentPanes[i].helper.RestoreElementSizeProperty(property);
  },
  UpdatePanesVisible: function (func) {
   var firstTD = this.rootPane.panes[0].helper.GetPaneElement();
   func(firstTD, "width", "1px");
   func(firstTD, "height", "1px");
   if (__aspxIE && __aspxBrowserMajorVersion == 7 && this.rootPane.panes[0].collapsed)
    func(firstTD, "display", "block");
   func(this.rootPane.panes[0].helper.GetContentContainerElement(), "display", "none");
   for (var i = 1; i < this.rootPane.panes.length; i++) {
    var pane = this.rootPane.panes[i];
    func(pane.helper.GetPaneElement(), "display", "none");
    var separator = pane.helper.GetSeparatorElement();
    if (separator)
     func(separator, "display", "none");
   }
  },
  SynchronizeProperties: function () {
   var clientStateElement = this.helper.GetClientStateElement();
   if (clientStateElement) {
    var stateString = this.GetClientStateString();
    this.helper.GetClientStateElement().value = stateString;
    if (this.cookieName && this.cookieName != "") {
     _aspxDelCookie(this.cookieName);
     _aspxSetCookie(this.cookieName, stateString);
    }
   }
  },
  GetPaneByPath: function (panePath, parentPane) {
   var pane = parentPane || this.rootPane;
   for (var i = 0; i < panePath.length; i++)
    pane = pane.panes[panePath[i]];
   return pane;
  },
  GetPaneByStringPath: function (paneStringPath, paneIndexSeparator) {
   if (!paneIndexSeparator)
    paneIndexSeparator = __aspxItemIndexSeparator;
   return this.GetPaneByPath(paneStringPath.split(paneIndexSeparator));
  },
  IsDocumentWidthChanged: function () {
   var documentWidth = this.GetDocumentWidth();
   if (!_aspxIsExists(this.lastDocumentWidth) || documentWidth != this.lastDocumentWidth) {
    this.lastDocumentWidth = documentWidth;
    return true;
   }
   return false;
  },
  GetDocumentWidth: function () {
   if (this.fullScreen && (this.rootPane.autoHeight || this.rootPane.autoWidth))
    return this.GetDocumentWidthFullscreen();
   return _aspxGetDocumentWidth();
  },
  GetDocumentWidthFullscreen: function () {
   var sizeElement = ASPxCacheHelper.GetCachedValue(this, "fullscreenWidthElement", function () {
    var element = _aspxCreateHtmlElementFromString("<div style='width: 100%; height: 0px'></div>");
    this.GetMainElement().parentNode.insertBefore(element, this.GetMainElement());
    return element;
   });
   return sizeElement.offsetWidth;
  },
  CreateWebkitSpecialElement: function () {
   var webkitSpecialElement = document.createElement("DIV"),
     element = this.GetMainElement();
   element.parentNode.appendChild(webkitSpecialElement);
   var offsetHeight = element.offsetHeight;
   element.parentNode.removeChild(webkitSpecialElement);
  },
  OnWindowResize: function () {
   if (this.IsControlCollapsed())
    this.ExpandControl();
   this.UpdateControlSizes();
   this.lastDocumentWidth = this.GetDocumentWidth();
  },
  OnSeparatorMouseDown: function (moveRightPanePath) {
   var pane = this.GetPaneByStringPath(moveRightPanePath);
   var invert = this.rtl && !pane.isVertical;
   this.moveRightPane = invert ? pane.prevPane : pane;
   this.moveLeftPane = invert ? pane : pane.prevPane;
   this.moveIsVertical = pane.isVertical;
   this.moveStartPos = this.helper.GetCurrentPos();
   this.moveLastPos = this.moveStartPos;
   this.isHeavyUpdate = this.moveLeftPane.isSizePx != this.moveRightPane.isSizePx
    && !this.moveLeftPane.parent.IsAutoSize();
   if (!ASPxSplitterHelper.IsAllowResize(this.moveLeftPane, this.moveRightPane))
    return false;
   if (this.moveLeftPane.collapsed || this.moveRightPane.collapsed)
    return false;
   if (this.RaiseCancelEvent("PaneResizing", this.moveRightPane) || this.RaiseCancelEvent("PaneResizing", this.moveLeftPane))
    return false;
   var cursor = this.moveIsVertical ? "n-resize" : "w-resize";
   if (!this.liveResizing) {
    this.resizingPointer.SetCursor(cursor);
    this.resizingPointer.AttachToElement(pane.helper.GetSeparatorElement(), true);
   }
   else
    this.isInLiveResizing = true;
   this.helper.SetResizingPanelVisibility(true, cursor);
   return true;
  },
  OnSeparatorMouseUp: function () {
   this.helper.SetResizingPanelVisibility(false);
   if (!this.liveResizing || !this.isHeavyUpdate) {
    var deltaSize = this.moveLastPos - this.moveStartPos;
    if (!this.moveLeftPane.IsAutoSize(!this.moveLeftPane.isVertical)) {
     this.moveLeftPane.SetOffsetSize(this.moveLeftPane.GetOffsetSize() - deltaSize);
     this.moveLeftPane.inResizing = true;
    }
    if (!this.moveRightPane.IsAutoSize(!this.moveRightPane.isVertical)) {
     this.moveRightPane.SetOffsetSize(this.moveRightPane.GetOffsetSize() + deltaSize);
     this.moveRightPane.inResizing = true;
    }
    if (!this.liveResizing || !this.hasAutoSizePane)
     ASPxSplitterHelper.Resize(this.moveLeftPane, this.moveRightPane, deltaSize);
    this.moveLeftPane.parent.ForEach("UpdateChildrenSize");
   }
   if (!this.liveResizing)
    this.resizingPointer.SetVisibility(false);
   else
    this.isInLiveResizing = null;
   this.UpdateAutoSizePanes(true);
   this.moveLeftPane.parent.ForEach("AdjustControls");
   if (!this.liveResizing && (this.rootPane.autoHeight || this.rootPane.autoWidth) && this.IsDocumentWidthChanged())
    this.UpdateControlSizes();
   this.moveLeftPane.inResizing = null;
   this.moveRightPane.inResizing = null;
   this.SynchronizeProperties();
   this.RaiseEvent("PaneResizeCompleted", this.moveLeftPane);
   this.RaiseEvent("PaneResizeCompleted", this.moveRightPane);
  },
  OnMouseMove: function () {
   var deltaSize = this.helper.GetMoveMaxDeltaSize(this.helper.GetCurrentPos() - this.moveLastPos);
   if (deltaSize == 0) return;
   if (__aspxIE)
    _aspxClearSelection();
   if (!this.moveLeftPane.IsAutoSize(!this.moveLeftPane.isVertical) || this.liveResizing)
    this.moveLeftPane.SetOffsetSize(this.moveLeftPane.GetOffsetSize() + deltaSize);
   if (!this.moveRightPane.IsAutoSize(!this.moveRightPane.isVertical) || this.liveResizing)
    this.moveRightPane.SetOffsetSize(this.moveRightPane.GetOffsetSize() - deltaSize);
   if (this.liveResizing) {
    var changePaneSize = function (pane, deltaSize) {
     pane.SetContentVisible(false);
     if (pane.ApplyElementSize()) {
      pane.ForEach("UpdateChildrenSize");
      pane.SetContentVisible(true);
      pane.RaiseResizedEvent();
     }
    }
    if (this.isHeavyUpdate || this.moveLeftPane.parent.autoHeight || this.moveLeftPane.parent.autoWidth) {
     ASPxSplitterHelper.Resize(this.moveLeftPane, this.moveRightPane, this.moveLeftPane.isSizePx || this.moveRightPane.isSizePx ? deltaSize : 0);
     this.moveLeftPane.parent.ForEach("UpdateChildrenSize");
    }
    else {
     changePaneSize(this.moveLeftPane, deltaSize, this.helper);
     changePaneSize(this.moveRightPane, -deltaSize, this.helper);
    }
    this.UpdateAutoSizePanes(this.liveResizing);
   }
   else
    this.resizingPointer.Move(deltaSize, !this.moveIsVertical);
   this.moveLastPos += deltaSize;
  },
  OnCollapseButtonClick: function (panePath, forwardDirection) {
   var rightPane = this.GetPaneByStringPath(panePath);
   var pane1 = forwardDirection ? rightPane.prevPane : rightPane;
   var pane2 = forwardDirection ? rightPane : rightPane.prevPane;
   if (pane1.collapsed && pane1.maximizedPane == pane2) {
    if (!this.RaiseCancelEvent("PaneExpanding", pane1)) {
     pane1.Expand();
     if (this.savedSize) {
      var rootPaneChildren = this.rootPane.panes;
      for (var i = 0; i < rootPaneChildren.length; i++) {
       if (rootPaneChildren[i].IsCollapsed())
        return;
      }
      for (var sizeProperty in this.savedSize)
       this.GetMainElement().style[sizeProperty] = this.savedSize[sizeProperty];
      this.savedSize = null;
     }
    }
   }
   else {
    if (!this.RaiseCancelEvent("PaneCollapsing", pane2)) {
     if (pane2.NeedResetSplitterSizeOnCollapsing(pane1)) {
      if (!this.savedSize)
       this.savedSize = new Object();
      var sizeProperty = pane1.isVertical ? "height" : "width";
      if (!this.savedSize[sizeProperty]) {
       this.savedSize[sizeProperty] = this.GetMainElement().style[sizeProperty];
       this.GetMainElement().style[sizeProperty] = "";
      }
     }
     pane2.Collapse(pane1);
    }
   }
  },
  IsEmptyUrl: function (url) {
   for (var i = 0; i < this.emptyUrls.length; i++)
    if (url == this.emptyUrls[i])
     return true;
   return false;
  },
  RaiseEvent: function (eventName, pane) {
   if (this.isInitialized)
    this[eventName].FireEvent(this, new ASPxClientSplitterPaneEventArgs(pane));
  },
  RaiseCancelEvent: function (eventName, pane) {
   var args = new ASPxClientSplitterPaneCancelEventArgs(pane);
   this[eventName].FireEvent(this, args);
   return args.cancel;
  },
  GetPaneCount: function () {
   return this.rootPane.GetPaneCount();
  },
  GetPane: function (index) {
   return this.rootPane.GetPane(index);
  },
  GetPaneByName: function (name) {
   return this.rootPane.GetPaneByName(name);
  },
  SetAllowResize: function (allowResize) {
   if (this.allowResize == allowResize)
    return;
   this.allowResize = allowResize;
   this.rootPane.ForEach("UpdateSeparatorStyle", true);
  },
  SetWidth: function (width) {
   this.width = width + "px";
   if (this.IsPrepared())
    this.UpdateControlSizes(true);
  },
  SetHeight: function (height) {
   this.height = height + "px";
   if (this.IsPrepared())
    this.UpdateControlSizes(true);
  }
 });
 ASPxClientSplitter.Cast = ASPxClientControl.Cast;
 var ASPxClientSplitterPane = _aspxCreateClass(null, {
  constructor: function (splitter, parent, visibleIndex, index, paneInfo) {
   this.splitter = splitter;
   this.parent = parent;
   this.index = visibleIndex;
   this._index = index;
   this.name = paneInfo.n || "";
   this.isRootPane = (this.parent == null);
   this.helper = new ASPxSplitterPaneHelper(this);
   this.prevPane = null;
   this.nextPane = null;
   this.panes = [];
   this.isVertical = this.isRootPane ? false : !parent.isVertical;
   this.hasSeparator = (this.index > 0);
   this.collapsed = _aspxIsExists(paneInfo.c);
   this.size = _aspxIsExists(paneInfo.s) ? paneInfo.s : 0;
   this.sizeType = _aspxIsExists(paneInfo.st) ? paneInfo.st : null;
   this.autoWidth = _aspxIsExists(paneInfo.aw);
   this.autoHeight = _aspxIsExists(paneInfo.ah);
   this.maxSize = _aspxIsExists(paneInfo.smax) ? paneInfo.smax : Number.MAX_VALUE;
   this.minSize = _aspxIsExists(paneInfo.smin) ? paneInfo.smin : this.splitter.defaultMinSize;
   this.allowResize = !_aspxIsExists(paneInfo.nar);
   this.showCollapseBackwardButton = _aspxIsExists(paneInfo.scbb);
   this.showCollapseForwardButton = _aspxIsExists(paneInfo.scfb);
   this.iframe = {};
   if (paneInfo.iframe) {
    this.iframe = {
     src: paneInfo.iframe[0],
     scrolling: paneInfo.iframe[1]
    };
    if (paneInfo.iframe[2] != "")
     this.iframe.name = paneInfo.iframe[2];
    if (paneInfo.iframe[3] != "")
     this.iframe.title = paneInfo.iframe[3];
    this.isContentUrl = true;
   }
   this.scrollTop = paneInfo.spt || 0;
   this.scrollLeft = paneInfo.spl || 0;
   this.isSizePx = (this.sizeType == "px");
   this.maximizedPane = null;
   this.dragPrevented = false;
   this.offsetWidth = 0;
   this.offsetHeight = 0;
   this.widthDiff = 0;
   this.heightDiff = 0;
   this.minimizedWidthDiff = 0;
   this.minimizedHeightDiff = 0;
   this.contentContainerWidthDiff = 0;
   this.contentContainerHeightDiff = 0;
   this.collapsedWidthDiff = 0;
   this.collapsedHeightDiff = 0;
   this.isASPxClientSplitterPane = true;
  },
  UpdateSize: function () {
   if (!this.panes.length) return;
   var prcSum = 0,
    emptyPanesCount = 0;
   for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
    if (!pane.sizeType)
     emptyPanesCount++;
    else if (pane.sizeType == "%")
     prcSum += pane.size;
   }
   if (emptyPanesCount) {
    var emptyPaneSize = Math.max(100 - prcSum, 0) / emptyPanesCount;
    for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
     if (!pane.sizeType) {
      pane.sizeType = "%";
      pane.size = emptyPaneSize;
     }
    }
   }
   if (prcSum && (!emptyPanesCount && prcSum != 100 || prcSum > 100)) {
    for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
     if (pane.sizeType == "%")
      pane.size = 100 * pane.size / prcSum;
    }
   }
  },
  UpdateAutoSize: function () {
   if (this.panes.length) {
    var propertyAll = this.isVertical ? "autoHeight" : "autoWidth",
     propertyOne = this.isVertical ? "autoWidth" : "autoHeight";
    if (this[propertyAll]) {
     for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
      pane[propertyAll] = true;
     }
    }
    if (this[propertyOne]) {
     var selected;
     for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
      if (pane[propertyOne] || !pane.isSizePx || pane.isSizePx && !selected && !pane.nextPane)
       selected = pane;
      if (pane[propertyOne])
       break;
     }
     selected[propertyOne] = true;
    }
    for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
     if (pane.isSizePx)
      continue;
     if (pane[propertyOne]) {
      pane.size = pane.GetMinSize();
      pane.sizeType = "px";
      pane.isSizePx = true;
     }
    }
   }
   if (!this.isRootPane) {
    if (this.autoHeight)
     this.splitter.autoHeightPanes.push(this);
    if (this.autoWidth)
     this.splitter.autoWidthPanes.push(this);
   }
  },
  IsAutoSize: function (isVertical) {
   if (isVertical == null)
    isVertical = this.isVertical;
   return isVertical ? this.autoWidth : this.autoHeight;
  },
  IsContentHeightChanged: function () {
   var contentHeight = this.helper.GetContentContainerElement().offsetHeight;
   if (!_aspxIsExists(this.lastContentHeight) || contentHeight != this.lastContentHeight) {
    this.lastContentHeight = contentHeight;
    return true;
   }
   return false;
  },
  IsContentWidthChanged: function () {
   var contentWidth = this.helper.GetContentContainerElement().offsetWidth;
   if (!_aspxIsExists(this.lastContentWidth) || contentWidth != this.lastContentWidth) {
    this.lastContentWidth = contentWidth;
    return true;
   }
   return false;
  },
  UpdateOffsetSize: function (isVertical) {
   var hasPanes = !!this.panes.length,
    contentContainerSizeDiff = hasPanes
     ? 0
     : isVertical
      ? this.widthDiff
      : this.heightDiff,
     contentSize = 0;
   if (this.isContentUrl && !hasPanes) {
    var element = this.helper.GetContentContainerElement();
    element.style.display = "none";
   }
   var contentSize = this.GetContentMinSize(isVertical);
   this.SetOffsetSize(Math.max(this.GetMinSize(!isVertical), contentSize), !isVertical);
   if (this.isContentUrl && !hasPanes) {
    element.style[isVertical ? "width" : "height"] = this.isVertical || isVertical
     ? "100%"
     : this.helper.GetPaneElement().offsetHeight - contentContainerSizeDiff + "px";
    element.style.display = "";
   }
  },
  GetContentMinSize: function (isVertical) {
   if (!this.panes.length) {
    var contentContainerElement = this.helper.GetContentContainerElement(),
     contentContainerSizeDiff = isVertical
      ? this.widthDiff
      : this.heightDiff;
    return (isVertical ? contentContainerElement.offsetWidth : contentContainerElement.offsetHeight) + contentContainerSizeDiff;
   }
   var contentSize = 0;
   if (this.isVertical != isVertical)
    for (var pane = this.panes[0]; pane; pane = pane.nextPane)
     contentSize = Math.max(contentSize, pane.GetContentMinSize(isVertical));
   else {
    for (var pane = this.panes[0]; pane; pane = pane.nextPane)
     contentSize += pane.GetContentMinSize(isVertical);
    contentSize += this.GetTotalSeparatorsSize(!this.isVertical);
   }
   return contentSize;
  },
  Initialize: function () {
   this.InitializePreventDragging();
   if (this.isRootPane)
    return;
   if (this.collapsed) {
    if (this.IsFirstPane())
     this.maximizedPane = this.parent.panes[1];
    else if (this.prevPane.maximizedPane != this)
     this.maximizedPane = this.prevPane;
    else
     this.maximizedPane = this.nextPane;
    if (this.maximizedPane == null)
     this.collapsed = false;
   }
  },
  Prepare: function () {
   var EvaluateWidthDiff = function (element) {
    return element.offsetWidth - element.clientWidth;
   };
   var EvaluateHeightDiff = function (element) {
    var elementClientHeight = ((__aspxSafari && (__aspxBrowserVersion < 4)) || (__aspxChrome && (__aspxBrowserVersion < 2))) ? (element.offsetHeight - element.clientTop * 2) : element.clientHeight;
    return element.offsetHeight - elementClientHeight;
   };
   this.GetSeparatorSize();
   var element = this.helper.GetPaneElement();
   if (__aspxIE && __aspxBrowserMajorVersion == 9) { 
    var b203253_TestWidth = EvaluateWidthDiff(element);
    if (b203253_TestWidth > 10000) { 
     _aspxChangeStyleAttribute(document.body, "width", "1px");
     var b203253_BodyWidthChanged = true;
    }
   }
   this.widthDiff = EvaluateWidthDiff(element);
   this.heightDiff = EvaluateHeightDiff(element); 
   if (this.panes.length == 0) {
    var contentContainerElement = this.helper.GetContentContainerElement();
    _aspxSetScrollBarVisibility(contentContainerElement, false);
    _aspxSetStyles(contentContainerElement, { width: 1, height: 1 });
    if (__aspxIE && __aspxBrowserMajorVersion < 7) 
     contentContainerElement.style.overflow = "hidden";
    this.contentContainerWidthDiff = contentContainerElement.offsetWidth - 1;
    this.contentContainerHeightDiff = contentContainerElement.offsetHeight - 1;
    if (this.autoWidth) {
     contentContainerElement.style.width = "";
     var minWidthValue = this.splitter.defaultMinSize - this.contentContainerWidthDiff;
     if (minWidthValue > -1)
      contentContainerElement.style.minWidth = minWidthValue + "px";
    }
    if (this.autoHeight) {
     contentContainerElement.style.height = "";
     var minHeightValue = this.splitter.defaultMinSize - this.contentContainerWidthDiff;
     if (minHeightValue > -1)
      contentContainerElement.style.minHeight = minHeightValue + "px";
    }
    _aspxSetScrollBarVisibility(contentContainerElement, true);
    if (!this.scrollEventAttached) {
     var _this = this;
     _aspxAttachEventToElement(contentContainerElement, "scroll", function () {
      if (contentContainerElement.scrollTop >= 0)
       _this.scrollTop = contentContainerElement.scrollTop;
      if (contentContainerElement.scrollLeft >= 0)
       _this.scrollLeft = contentContainerElement.scrollLeft;
      _this.splitter.SynchronizeProperties();
     });
     this.scrollEventAttached = true;
    }
   }
   this.UpdateStyle(element, true);
   this.collapsedWidthDiff = EvaluateWidthDiff(element);
   this.collapsedHeightDiff = EvaluateHeightDiff(element);
   this.UpdateStyle(element, false);
   if (__aspxIE && __aspxBrowserMajorVersion == 9 && b203253_BodyWidthChanged) 
    _aspxRestoreStyleAttribute(document.body, "width");
   var separator = this.helper.GetSeparatorElement();
   if (separator) {
    _aspxSetElementDisplay(this.helper.GetSeparatorDivElement(), false);
    if (!this.isVertical)
     this.separatorSizeDiff = separator.offsetWidth - separator.clientWidth;
    else
     this.separatorSizeDiff = separator.offsetHeight - separator.clientHeight;
    _aspxSetElementDisplay(this.helper.GetSeparatorDivElement(), true);
   }
   else
    this.separatorSizeDiff = 0;
   this.PrepareSeparatorButtons();
   if (__aspxWebKitTouchUI) {
    var contentContainer = this.helper.GetContentContainerElement();
    var scrollbarVisible = contentContainer.style.overflow == "auto" || contentContainer.style.overflow == "scroll";
    var hScrollbarVisible = scrollbarVisible || contentContainer.style.overflowX == "scroll";
    var vScrollbarVisible = scrollbarVisible || contentContainer.style.overflowY == "scroll";
    if (hScrollbarVisible || vScrollbarVisible) {
     ASPxClientTouchUI.MakeScrollable(contentContainer, { showHorizontalScrollbar: hScrollbarVisible, showVerticalScrollbar: vScrollbarVisible });
    }
   }
   if (!this.isRootPane) {
    if (this.autoHeight)
     this.offsetHeight = this.GetMinSize(true);
    if (this.autoWidth)
     this.offsetWidth = this.GetMinSize(false);
   }
  },
  PrepareSeparatorButtons: function () {
   if (!(this.hasSeparator && this.helper.buttonsExists))
    return;
   var sizeProperty = this.isVertical ? "offsetWidth" : "offsetHeight";
   if (this.helper.buttonsTableExists) {
    this.collapseBackwardButtonSize = this.helper.GetButtonUpdateElement(this.helper.GetCollapseBackwardButton())[sizeProperty];
    this.collapseForwardButtonSize = this.helper.GetButtonUpdateElement(this.helper.GetCollapseForwardButton())[sizeProperty];
    this.buttonsTableDiffSize = this.helper.GetCollapseButtonsTable()[sizeProperty] - this.collapseBackwardButtonSize - this.collapseForwardButtonSize;
    if (this.helper.separatorImageExists) {
     this.collapseButtonsSeparatorSize = this.helper.GetButtonUpdateElement(this.helper.GetCollapseButtonsSeparator())[sizeProperty];
     this.buttonsTableDiffSize -= this.collapseButtonsSeparatorSize;
    }
   }
   else
    this.collapseButtonsSeparatorSize = this.helper.GetCollapseButtonsSeparatorImage()[sizeProperty];
  },
  InitializePreventDragging: function () {
   if (!this.dragPrevented && this.helper.separatorImageExists) {
    _aspxPreventElementDrag(this.helper.GetCollapseButtonsSeparatorImage());
    this.dragPrevented = true;
   }
  },
  ApplyScrollPosition: function () {
   if (this.panes.length == 0) {
    if (__aspxIE && __aspxBrowserMajorVersion < 8) {
     var _this = this;
     window.setTimeout(function () {
      _this.SetScrollTop(_this.scrollTop);
      _this.SetScrollLeft(_this.scrollLeft);
     }, 0);
    }
    else {
     this.SetScrollTop(this.scrollTop);
     this.SetScrollLeft(this.scrollLeft);
    }
   }
  },
  ForEach: function (funcName, skippSelf) {
   if (!skippSelf)
    this[funcName]();
   for (var i = 0; i < this.panes.length; i++)
    this.panes[i].ForEach(funcName);
  },
  SetContentVisible: function (visible) {
   _aspxSetElementDisplay(this.helper.GetContentContainerElement(), visible);
   if (__aspxIE)
    this.helper.SetEmptyDivVisible(!visible);
  },
  AdjustControls: function () {
   if (this.panes.length == 0 && !this.collapsed && !this.isContentUrl)
    aspxGetControlCollection().AdjustControls(this.helper.GetContentContainerElement(), true);
  },
  UpdatePanes: function (forceAutoSizeUpdate) {
   this.ForEach("UpdateVisualElements", true);
   this.ForEach("UpdateChildrenSize");
   this.splitter.UpdateAutoSizePanes(forceAutoSizeUpdate);
  },
  UpdateVisualElements: function () {
   this.UpdateButtonsVisibility();
   this.UpdateSeparatorStyle();
   this.UpdatePaneStyle();
  },
  IsBackwardButtonVisible: function () {
   return ASPxCacheHelper.GetCachedValue(this, "isBackwardButtonVisible", function () {
    if (!this.helper.buttonsTableExists)
     return false;
    if (this.collapsed && (this.maximizedPane == this.prevPane))
     return true;
    if (this.prevPane.collapsed)
     return false;
    return this.showCollapseBackwardButton;
   }, this.helper);
  },
  IsForwardButtonVisible: function () {
   return ASPxCacheHelper.GetCachedValue(this, "isForwardButtonVisible", function () {
    if (!this.helper.buttonsTableExists)
     return false;
    if (this.prevPane.collapsed && (this.prevPane.maximizedPane == this))
     return true;
    if (this.collapsed)
     return false;
    return this.showCollapseForwardButton;
   }, this.helper);
  },
  DropCachedButtonsVisible: function () {
   ASPxCacheHelper.DropCachedValue(this.helper, "isBackwardButtonVisible");
   ASPxCacheHelper.DropCachedValue(this.helper, "isForwardButtonVisible");
  },
  UpdateSeparatorStyle: function () {
   var separator = this.helper.GetSeparatorElement();
   if (!separator) return;
   var prevPane = this.prevPane,
    isCollapsed = this.collapsed || prevPane && prevPane.collapsed,
    resizingEnabled = ASPxSplitterHelper.IsAllowResize(this, prevPane);
   if (this.splitter.IsStateControllerEnabled())
    aspxGetStateController().SetMouseStateItemsEnabled(this.helper.GetSeparatorElementId(), null, !isCollapsed && resizingEnabled);
   this.UpdateStyle(separator, isCollapsed);
  },
  UpdatePaneStyle: function () {
   this.UpdateStyle(this.helper.GetPaneElement(),
    this.collapsed && !this.NeedResetSplitterSizeOnCollapsing(this.maximizedPane) && !this.NeedKeepOffsetSizeOnCollapsing()
   );
  },
  UpdateStyle: function (element, isSelect) {
   if (!this.splitter.IsStateControllerEnabled()) return;
   if (isSelect)
    aspxGetStateController().SelectElementBySrcElement(element);
   else
    aspxGetStateController().DeselectElementBySrcElement(element);
  },
  UpdateButtonsVisibility: function () {
   if (!(this.hasSeparator && this.helper.buttonsExists))
    return;
   var separatorSize = this.GetOffsetSize(!this.isVertical) - this.separatorSizeDiff;
   if (this.helper.buttonsTableExists) {
    var buttonsSize = this.buttonsTableDiffSize;
    if (this.IsBackwardButtonVisible())
     buttonsSize += this.collapseBackwardButtonSize;
    if (this.IsForwardButtonVisible())
     buttonsSize += this.collapseForwardButtonSize;
    var buttonsVisible = (buttonsSize <= separatorSize);
    var backwardButtonVisible = buttonsVisible && this.IsBackwardButtonVisible();
    var forwardButtonVisible = buttonsVisible && this.IsForwardButtonVisible();
    _aspxSetElementDisplay(this.helper.GetButtonUpdateElement(this.helper.GetCollapseBackwardButton()), backwardButtonVisible);
    _aspxSetElementDisplay(this.helper.GetButtonUpdateElement(this.helper.GetCollapseForwardButton()), forwardButtonVisible);
    if (this.helper.separatorImageExists) {
     if (!buttonsVisible)
      buttonsSize = this.buttonsTableDiffSize;
     buttonsSize += this.collapseButtonsSeparatorSize;
     var separatorImageVisible = this.splitter.showSeparatorImage && (backwardButtonVisible === forwardButtonVisible) && (buttonsSize <= separatorSize);
     _aspxSetElementDisplay(this.helper.GetButtonUpdateElement(this.helper.GetCollapseButtonsSeparator()), separatorImageVisible);
    }
   }
   else {
    var separatorImageVisible = this.splitter.showSeparatorImage && (this.collapseButtonsSeparatorSize <= separatorSize);
    _aspxSetElementDisplay(this.helper.GetCollapseButtonsSeparatorImage(), separatorImageVisible);
   }
  },
  GetSeparatorSize: function () {
   return ASPxCacheHelper.GetCachedValue(this, "SeparatorSize", function () {
    var separator = this.helper.GetSeparatorElement();
    return separator ? (this.isVertical ? separator.offsetHeight : separator.offsetWidth) : 0;
   }, this.helper);
  },
  GetTotalSeparatorsSize: function (isVertical) {
   if (!_aspxIsExists(isVertical) || (isVertical == this.isVertical))
    return 0;
   var cacheKey = (isVertical ? "v" : "h") + "TotalSeparatorsSize";
   return ASPxCacheHelper.GetCachedValue(this, cacheKey, function () {
    var result = 0;
    for (var i = 0; i < this.panes.length; i++)
     result += this.panes[i].GetSeparatorSize();
    return result;
   }, this.helper);
  },
  GetMinSize: function (isVertical) {
   if (!_aspxIsExists(isVertical))
    isVertical = this.isVertical;
   var cacheKey = (isVertical ? "v" : "h") + "ItemMinSize";
   return ASPxCacheHelper.GetCachedValue(this, cacheKey, function () {
    var result = 0;
    for (var i = 0; i < this.panes.length; i++)
     if (isVertical != this.isVertical)
      result += this.panes[i].GetMinSize(isVertical);
     else
      result = Math.max(result, this.panes[i].GetMinSize(isVertical));
    result += this.GetTotalSeparatorsSize(isVertical);
    var minSize = (isVertical == this.isVertical) ? this.minSize : this.splitter.defaultMinSize;
    result = Math.max(result, Math.max(minSize, this.GetSizeDiff(isVertical)));
    return result;
   }, this.helper);
  },
  DropCachedSizes: function () {
   ASPxCacheHelper.DropCachedValue(this.helper, "SeparatorSize");
   ASPxCacheHelper.DropCachedValue(this.helper, "vTotalSeparatorsSize");
   ASPxCacheHelper.DropCachedValue(this.helper, "hTotalSeparatorsSize");
   ASPxCacheHelper.DropCachedValue(this.helper, "ItemMinSize");
  },
  IsMaxSizeSpecified: function () {
   return this.maxSize != Number.MAX_VALUE;
  },
  GetMaxSize: function () {
   return Math.max(this.maxSize, this.GetSizeDiff(this.isVertical));
  },
  PrepareUpdateInfo: function () {
   var updateInfo = {};
   var prepareUpdateInfoPart = function () {
    return {
     panes: [],
     sum: 0,
     sumMin: 0,
     sumMax: 0,
     addPane: function () {
      this.panes.push(pane);
      if (pane.collapsed) {
       var sizeDiff = pane.GetSizeDiff(pane.isVertical);
       this.sum += sizeDiff;
       this.sumMin += sizeDiff;
      }
      else {
       this.sum += pane.size;
       this.sumMin += pane.GetMinSize();
      }
      this.sumMax += pane.GetMaxSize();
     },
     IsIgnoreMaxSize: function () {
      return this.sumMax < this.sum;
     }
    };
   };
   updateInfo.px = prepareUpdateInfoPart();
   updateInfo.prc = prepareUpdateInfoPart();
   updateInfo.collapsed = prepareUpdateInfoPart();
   updateInfo.autoSize = prepareUpdateInfoPart();
   updateInfo.onlyPxPanes = true; 
   updateInfo.hasPxPanesShown = false;
   updateInfo.hasPrcPanesShown = false;
   for (var i = 0; i < this.panes.length; i++) {
    var pane = this.panes[i];
    if (pane.collapsed)
     updateInfo.collapsed.addPane(pane);
    else if (pane.IsAutoSize(this.isVertical) && pane.GetOffsetSize()) {
     updateInfo.autoSize.addPane(pane)
    }
    else if (pane.isSizePx) {
     updateInfo.px.addPane(pane);
     updateInfo.hasPxPanesShown = true;
    }
    else {
     updateInfo.prc.addPane(pane);
     updateInfo.hasPrcPanesShown = true;
    }
    if (!pane.isSizePx)
     updateInfo.onlyPxPanes = false;
   }
   updateInfo.px.isIgnoreMaxSize = (!updateInfo.hasPrcPanesShown && (updateInfo.px.sumMax < updateInfo.px.sum));
   updateInfo.prc.isIgnoreMaxSize = (updateInfo.prc.sumMax < updateInfo.prc.sum);
   return updateInfo;
  },
  SetChildrenSecondSize: function () {
   var orientation = this.isVertical;
   var size = this.GetClientSize(orientation);
   if (this.isRootPane)
    for (var pane = this.panes[0]; pane; pane = pane.nextPane) {
     if (pane.IsAutoSize(!this.isVertical))
      size = Math.max(size, pane.GetOffsetSize(this.isVertical));
    }
   for (var i = 0; i < this.panes.length; i++)
    this.panes[i].SetOffsetSize(size, orientation);
  },
  GetChildrenTotalSize: function () {
   return this.GetClientSize(!this.isVertical) - this.GetTotalSeparatorsSize(!this.isVertical);
  },
  UpdateChildrenSize: function () {
   if (this.collapsed || (this.panes.length == 0))
    return;
   var updateInfo = this.PrepareUpdateInfo();
   var childrenTotalSize = this.GetChildrenTotalSize();
   var asTotalSize = 0;
   for (var i = 0; i < updateInfo.autoSize.panes.length; i++) {
    var pane = updateInfo.autoSize.panes[i];
    pane.size = pane.GetOffsetSize();
    asTotalSize += pane.size;
   }
   if (!updateInfo.hasPxPanesShown && !updateInfo.hasPrcPanesShown) {
    var asMaxSize = childrenTotalSize - (updateInfo.px.sumMin + updateInfo.prc.sumMin + updateInfo.collapsed.sumMin);
    asTotalSize = this.NormalizePanesSizes(updateInfo.autoSize.panes, asTotalSize, asMaxSize);
   }
   else {
    var pxMaxSize = childrenTotalSize - (updateInfo.prc.sumMin + updateInfo.collapsed.sumMin) - asTotalSize,
     isOutOfParentSize = !!(pxMaxSize < 0 && updateInfo.autoSize.panes.length);
    if (isOutOfParentSize)
     pxMaxSize = updateInfo.px.sum;
    var pxTotalSize = 0;
    if (updateInfo.hasPxPanesShown) {
     var c = !updateInfo.hasPrcPanesShown && !isOutOfParentSize && !updateInfo.autoSize.panes.length
      ? (pxMaxSize / (updateInfo.px.sum + updateInfo.autoSize.sum))
      : 1;
     for (var i = 0; i < updateInfo.px.panes.length; i++) {
      var pane = updateInfo.px.panes[i];
      var newSize = pxMaxSize > 0
       ? Math.max(Math.round(pane.size * c), pane.GetMinSize())
       : pane.GetMinSize();
      if (!updateInfo.px.isIgnoreMaxSize)
       newSize = Math.min(newSize, pane.GetMaxSize());
      pane.SetOffsetSize(newSize);
      pxTotalSize += newSize;
     }
     if (pxMaxSize > 0 && (!updateInfo.hasPrcPanesShown || (pxTotalSize > pxMaxSize))) {
      pxTotalSize = this.NormalizePanesSizes(updateInfo.autoSize.panes, pxTotalSize, pxMaxSize);
      pxTotalSize = this.NormalizePanesSizes(updateInfo.px.panes, pxTotalSize, pxMaxSize);
     }
     if (updateInfo.onlyPxPanes && !(this.IsAutoSize(this.isVertical) && !updateInfo.autoSize.panes.length)) {
      for (var i = 0; i < updateInfo.px.panes.length; i++) {
       var pane = updateInfo.px.panes[i];
       pane.size = pane.GetOffsetSize();
      }
     }
    }
    var prcMaxSize = pxMaxSize - pxTotalSize + updateInfo.prc.sumMin;
    var prcTotalSize = 0;
    if ((prcMaxSize > 0) && updateInfo.hasPrcPanesShown) {
     var c = 1 / updateInfo.prc.sum;
     for (var i = 0; i < updateInfo.prc.panes.length; i++) {
      var pane = updateInfo.prc.panes[i];
      var newSize = Math.max(Math.round(pane.size * c * (childrenTotalSize - pxTotalSize - asTotalSize)), pane.GetMinSize());
      if (!updateInfo.prc.isIgnoreMaxSize)
       newSize = Math.min(newSize, pane.GetMaxSize());
      pane.SetOffsetSize(newSize);
      prcTotalSize += newSize;
     }
     if (prcTotalSize != prcMaxSize)
      prcTotalSize = this.NormalizePanesSizes(updateInfo.prc.panes, prcTotalSize, prcMaxSize);
    }
   }
   for (var i = 0; i < updateInfo.collapsed.panes.length; i++) {
    var pane = updateInfo.collapsed.panes[i],
     collapsedSize = pane.GetSizeDiff(pane.isVertical);
    if (!(__aspxIE && pane.NeedKeepOffsetSizeOnCollapsing()))
     pane.SetOffsetSize(collapsedSize);
   }
   if (__aspxWebKitFamily && updateInfo.collapsed.panes.length && this.IsAutoSize(this.IsVertical))
    this.splitter.CreateWebkitSpecialElement();
   this.SetChildrenSecondSize();
   for (var i = 0; i < this.panes.length; i++) {
    var pane = this.panes[i];
    if (pane.collapsed)
     pane.SetContentVisible(false);
    else
     pane.SetContentVisible(true);
    if (pane.ApplyElementSize())
     pane.RaiseResizedEvent();
   }
   this.ForEach("UpdateButtonsVisibility", true);
  },
  GetPossibleUp: function () {
   if (this.inResizing)
    return -1;
   return this.GetMaxSize() - this.GetOffsetSize();
  },
  GetPossibleDown: function () {
   if (this.IsAutoSize(!this.isVertical) && !(this.panes.length && !this.helper.HasVisibleAutoSizeChildren(!this.isVertical)))
    return -1;
   if (this.inResizing)
    return -1;
   return this.GetOffsetSize() - this.GetMinSize();
  },
  NormalizePanesSizes: function (panes, size, maxSize) {
   var insufficientSize = maxSize - size;
   var changeStep = (insufficientSize > 0) ? 1 : -1;
   var possibleChangeFunction = (insufficientSize > 0) ? "GetPossibleUp" : "GetPossibleDown";
   var changed = true;
   while ((insufficientSize != 0) && changed) {
    changed = false;
    for (var i = 0; i < panes.length; i++) {
     var pane = panes[i];
     if (pane[possibleChangeFunction]() > 0) {
      pane.SetOffsetSize(pane.GetOffsetSize() + changeStep);
      insufficientSize -= changeStep;
      changed = true;
      if (insufficientSize == 0)
       break;
     }
    }
   }
   return maxSize - insufficientSize;
  },
  GetOffsetSize: function (isVertical) {
   if (!_aspxIsExists(isVertical))
    isVertical = this.isVertical;
   return isVertical ? this.offsetHeight : this.offsetWidth;
  },
  GetClientSize: function (isVertical) {
   return isVertical ? this.GetClientHeightInternal(true) : this.GetClientWidthInternal(true);
  },
  SetOffsetSize: function (value, isVertical) {
   if (!_aspxIsExists(isVertical))
    isVertical = this.isVertical;
   if (isVertical)
    this.offsetHeight = value;
   else
    this.offsetWidth = value;
  },
  GetSizeDiff: function (isVertical) {
   return isVertical ? this.GetHeightDiff(true) : this.GetWidthDiff(true);
  },
  GetWidthDiff: function (isContainer) {
   if (this.collapsed)
    return this.collapsedWidthDiff;
   return this.widthDiff + (isContainer ? this.contentContainerWidthDiff : 0);
  },
  GetHeightDiff: function (isContainer) {
   if (this.collapsed)
    return this.collapsedHeightDiff;
   return this.heightDiff + (isContainer ? this.contentContainerHeightDiff : 0);
  },
  GetClientWidthInternal: function (isContainer) {
   if (__aspxFirefox && this.autoWidth)
    return this.offsetWidth;
   return this.offsetWidth - this.GetWidthDiff(isContainer);
  },
  GetClientHeightInternal: function (isContainer) {
   if (__aspxFirefox && this.autoHeight)
    return this.offsetHeight - (isContainer ? 0 : _aspxGetVerticalBordersWidth(this.GetElement()));
   return this.offsetHeight - this.GetHeightDiff(isContainer);
  },
  ApplyElementSize: function () {
   if (this.IsSizeChanged()) {
    this.ApplyElementSizeCore();
    var contentContainerElement = this.helper.GetContentContainerElement();
    if (__aspxChrome && __aspxBrowserMajorVersion >= 3
      || __aspxSafari && __aspxBrowserMajorVersion >= 5) {
     var marginRight = _aspxPxToInt(contentContainerElement.style.marginRight);
     marginRight -= _aspxPxToInt(_aspxGetCurrentStyle(contentContainerElement).marginRight);
     contentContainerElement.style.marginRight = marginRight + "px";
    }
    if (__aspxWebKitFamily) {
     this.splitter.CreateWebkitSpecialElement(); 
     var updated = _aspxSetScrollBarVisibilityCore(contentContainerElement, "overflowY", this.GetClientWidthInternal(true) > _aspxGetVerticalScrollBarWidth());
     if (updated && this.isContentUrl)
      this.RefreshContentUrl();
    }
    return true;
   }
   return false;
  },
  ApplyElementSizeCore: function () {
   var paneWidth = this.GetClientWidthInternal(false);
   var paneHeight = this.GetClientHeightInternal(false);
   var contentContainerWidth = this.GetClientWidthInternal(true);
   var contentContainerHeight = this.GetClientHeightInternal(true);
   if (contentContainerWidth < 0) {
    paneWidth -= contentContainerWidth;
    contentContainerWidth = 0;
   }
   if (contentContainerHeight < 0) {
    paneHeight -= contentContainerHeight;
    contentContainerHeight = 0;
   }
   var paneElement = this.helper.GetPaneElement(),
    contentContainerElement = this.helper.GetContentContainerElement();
   if (!isNaN(paneWidth) && !(paneWidth === 0 && !this.collapsed))
    paneElement.style.width = paneWidth + "px";
   if (!isNaN(paneHeight) && !(paneHeight === 0 && !this.collapsed))
    paneElement.style.height = paneHeight + "px";
   if (!this.autoWidth && !isNaN(contentContainerWidth))
    contentContainerElement.style.width = contentContainerWidth + "px";
   if (!this.autoHeight && !isNaN(contentContainerHeight))
    contentContainerElement.style.height = contentContainerHeight + "px";
  },
  IsSizeChanged: function () {
   if (!_aspxIsExists(this.lastWidth) || !_aspxIsExists(this.lastHeight) ||
    (this.offsetWidth != this.lastWidth) || (this.offsetHeight != this.lastHeight)) {
    this.lastWidth = this.offsetWidth;
    this.lastHeight = this.offsetHeight;
    return true;
   }
   return false;
  },
  GetSplitter: function () {
   return this.splitter;
  },
  GetParentPane: function () {
   return this.parent;
  },
  GetPrevPane: function () {
   return this.prevPane;
  },
  GetNextPane: function () {
   return this.nextPane;
  },
  IsFirstPane: function () {
   return (this.prevPane == null);
  },
  IsLastPane: function () {
   return (this.nextPane == null);
  },
  IsVertical: function () {
   return this.isVertical;
  },
  GetPaneCount: function () {
   return this.panes.length;
  },
  GetPane: function (index) {
   return (0 <= index && index < this.panes.length) ? this.panes[index] : null;
  },
  GetPaneByName: function (name) {
   for (var i = 0; i < this.panes.length; i++)
    if (this.panes[i].name == name) return this.panes[i];
   for (var i = 0; i < this.panes.length; i++) {
    var pane = this.panes[i].GetPaneByName(name);
    if (pane != null) return pane;
   }
   return null;
  },
  GetClientWidth: function () {
   var clientWidth = this.GetClientWidthInternal(true);
   if (!this.IsContentUrlPane()) {
    var contentContainer = this.helper.GetContentContainerElement();
    if ((contentContainer.style.overflow == "auto" && contentContainer.scrollHeight > contentContainer.clientHeight)
      || contentContainer.style.overflow == "scroll"
      || contentContainer.style.overflowY == "scroll") {
     clientWidth = clientWidth - _aspxGetVerticalScrollBarWidth();
    }
   }
   return clientWidth;
  },
  GetClientHeight: function () {
   return this.GetClientHeightInternal(true);
  },
  Collapse: function (maximizedPane) {
   if (!this.splitter.IsPrepared())
    return false;
   if (this.collapsed)
    return false;
   if (!_aspxIsExists(maximizedPane) || !maximizedPane.isASPxClientSplitterPane)
    return false;
   return this.CollapseExpandCore(true, maximizedPane, "PaneCollapsed");
  },
  CollapseForward: function () {
   return this.Collapse(this.prevPane);
  },
  CollapseBackward: function () {
   return this.Collapse(this.nextPane);
  },
  Expand: function () {
   if (!this.splitter.IsPrepared())
    return false;
   if (!this.collapsed)
    return false;
   return this.CollapseExpandCore(false, null, "PaneExpanded");
  },
  CollapseExpandCore: function (collapsed, maximizedPane, eventName) {
   this.collapsed = collapsed;
   this.maximizedPane = maximizedPane;
   this.DropCachedButtonsVisible();
   if (this.nextPane != null)
    this.nextPane.DropCachedButtonsVisible();
   this.GetParentPane().UpdatePanes(!collapsed);
   this.GetParentPane().ForEach("AdjustControls");
   this.splitter.RaiseEvent(eventName, this);
   this.splitter.SynchronizeProperties();
   return true;
  },
  IsCollapsed: function () {
   return this.collapsed;
  },
  NeedResetSplitterSizeOnCollapsing: function (maximizedPane) {
   return maximizedPane.IsMaxSizeSpecified() && maximizedPane.GetParentPane().isRootPane;
  },
  NeedKeepOffsetSizeOnCollapsing: function () {
   return this.maximizedPane.IsMaxSizeSpecified() && !this.GetParentPane().isRootPane && this.GetParentPane().GetPaneCount() == 2;
  },
  IsContentUrlPane: function () {
   return this.isContentUrl;
  },
  GetContentUrl: function () {
   return this.isContentUrl
    ? this.iframeObj.GetContentUrl()
    : "";
  },
  SetContentUrl: function (url, preventBrowserCaching) {
   if (!this.isContentUrl)
    return;
   this.iframeObj.SetContentUrl(url, preventBrowserCaching);
  },
  RefreshContentUrl: function () {
   if (!this.isContentUrl)
    return;
   this.iframeObj.RefreshContentUrl();
  },
  GetContentIFrame: function () {
   return this.isContentUrl
    ? this.helper.GetContentContainerElement()
    : null;
  },
  CreateContentUrlIFrame: function () {
   if (!this.isContentUrl)
    return;
   var contentContainer = this.helper.GetContentContainerElement();
   contentContainer.parentNode.removeChild(contentContainer);
   var instance = this;
   this.iframeObj = new ASPxIFrame({
    id: contentContainer.id,
    name: this.iframe.name,
    title: this.iframe.title,
    scrolling: this.iframe.scrolling,
    src: this.iframe.src,
    onCreate: function (containerElement, element) {
     instance.helper.GetPaneElement().appendChild(containerElement);
     instance.helper.DropContentContainerElementFromCache();
     instance.ApplyElementSizeCore();
     if (instance.autoHeight && instance.isVertical)
      containerElement.style.height = "100%";
    },
    onLoad: function () {
     instance.splitter.RaiseEvent("PaneContentUrlLoaded", instance);
    }
   });
  },
  SetAllowResize: function (allowResize) {
   this.allowResize = allowResize;
   this.UpdateSeparatorStyle();
   if (!this.IsLastPane())
    this.nextPane.UpdateSeparatorStyle();
  },
  RaiseResizedEvent: function () {
   this.splitter.RaiseEvent("PaneResized", this);
  },
  GetElement: function () {
   return this.helper.GetPaneElement();
  },
  SetSize: function (size) {
   if (!this.splitter.IsPrepared())
    return;
   if (this.SetSizeCore(size)) {
    this.parent.ForEach("UpdateChildrenSize");
    this.splitter.UpdateAutoSizePanes();
    this.parent.ForEach("AdjustControls");
    this.splitter.SynchronizeProperties();
   }
  },
  GetSize: function () {
   return this.size + this.sizeType;
  },
  SetSizeCore: function (size) {
   if (!_aspxIsExists(size))
    return false;
   if (this.IsAutoSize(!this.isVertical))
    return false;
   if (typeof (size) == "string") {
    var parsedSize = parseInt(size);
    if (isNaN(parsedSize))
     return false;
    this.size = parsedSize;
    this.sizeType = _aspxIsPercentageSize(size) ? "%" : "px";
   }
   else if (typeof (size) == "number") {
    this.size = size;
    this.sizeType = "px";
   }
   else
    return false;
   this.isSizePx = this.sizeType == "px";
   return true;
  },
  GetScrollTop: function () {
   return this.scrollTop;
  },
  SetScrollTop: function (value) {
   this.helper.GetContentContainerElement().scrollTop = value;
  },
  GetScrollLeft: function () {
   return this.scrollLeft;
  },
  SetScrollLeft: function (value) {
   this.helper.GetContentContainerElement().scrollLeft = value;
  }
 });
 ASPxClientSplitter.Instances = {
  items: {},
  Add: function (instance) {
   this.items[instance.name] = instance;
   if (instance.hasAutoSizePane)
    ASPxClientSplitter.AutoSizePanesUpdater.Start();
  },
  Get: function (name) {
   var instance = this.items[name];
   if (instance) {
    if (instance.GetMainElement())
     return instance;
    delete this.items[name];
   }
   return null;
  },
  Each: function (cb) {
   var hasInstances = false;
   for (var name in this.items) {
    var instance = this.Get(name);
    if (instance) {
     hasInstances = true;
     cb.call(instance);
    }
   }
   return hasInstances;
  }
 };
 ASPxClientSplitter.AutoSizePanesUpdater = {
  timeoutId: -1,
  Start: function () {
   var updater = ASPxClientSplitter.AutoSizePanesUpdater;
   if (updater.timeoutId > -1)
    return;
   updater.timeoutId = _aspxSetTimeout(updater.OnTimeout, 300);
  },
  Stop: function () {
   var updater = ASPxClientSplitter.AutoSizePanesUpdater;
   updater.timeoutId = _aspxClearTimer(updater.timeoutId);
  },
  OnTimeout: function () {
   var updater = ASPxClientSplitter.AutoSizePanesUpdater;
   updater.Stop();
   if (ASPxClientSplitter.Instances.Each(function () {
    this.UpdateAutoSizePanes();
    if (!this.isInLiveResizing && this.hasAutoSizePane && this.IsDocumentWidthChanged())
     this.UpdateControlSizes();
   }))
    updater.Start();
  }
 };
 ASPxClientSplitter.timerInterval = 0;
 ASPxClientSplitter.GetRegEx = function (idPostfix) {
  if (!this.regExs)
   this.regExs = {};
  if (!this.regExs[idPostfix])
   this.regExs[idPostfix] = "_\\d+(" + __aspxItemIndexSeparator + "\\d+)*_" + idPostfix + "$";
  return this.regExs[idPostfix];
 };
 ASPxClientSplitter.IsActualWindowResize = function () {
  var width = _aspxGetDocumentClientWidth();
  var height = _aspxGetDocumentClientHeight();
  if (width != ASPxClientSplitter.lastWindowResizeWidth || height != ASPxClientSplitter.lastWindowResizeHeight) {
   ASPxClientSplitter.lastWindowResizeWidth = width;
   ASPxClientSplitter.lastWindowResizeHeight = height;
   return true;
  }
  return false;
 };
 ASPxClientSplitter.SuspendedWindowResizeCore = function () {
  ASPxClientSplitter.Instances.Each(function () { this.OnWindowResize(); });
 };
 ASPxClientSplitter.mainWindowResizeTimeout = -1;
 ASPxClientSplitter.additionalWindowResizeTimeout = -1;
 ASPxClientSplitter.MainSuspendedWindowResize = function () {
  ASPxClientSplitter.SuspendedWindowResizeCore();
  ASPxClientSplitter.mainWindowResizeTimeout = _aspxClearTimer(ASPxClientSplitter.mainWindowResizeTimeout);
 };
 ASPxClientSplitter.AdditionalSuspendedWindowResize = function () {
  ASPxClientSplitter.SuspendedWindowResizeCore();
  ASPxClientSplitter.additionalWindowResizeTimeout = _aspxClearTimer(ASPxClientSplitter.additionalWindowResizeTimeout);
 };
 ASPxClientSplitter.OnWindowResize = function () {
  if (!ASPxClientSplitter.IsActualWindowResize())
   return;
  if (ASPxClientSplitter.additionalWindowResizeTimeout != -1)
   ASPxClientSplitter.additionalWindowResizeTimeout = _aspxClearTimer(ASPxClientSplitter.additionalWindowResizeTimeout);
  if (ASPxClientSplitter.mainWindowResizeTimeout == -1)
   ASPxClientSplitter.mainWindowResizeTimeout = _aspxSetTimeout(ASPxClientSplitter.MainSuspendedWindowResize, ASPxClientSplitter.timerInterval);
  else
   ASPxClientSplitter.additionalWindowResizeTimeout = _aspxSetTimeout(ASPxClientSplitter.AdditionalSuspendedWindowResize, 100);
 };
 ASPxClientSplitter.SaveCurrentPos = function (evt) {
  evt = _aspxGetEvent(evt);
  ASPxClientSplitter.CurrentXPos = _aspxGetEventX(evt);
  ASPxClientSplitter.CurrentYPos = _aspxGetEventY(evt);
 };
 ASPxClientSplitter.FindParentCell = function (element) {
  if (element.tagName != "TD")
   element = _aspxGetParentByTagName(element, "TD");
  return element;
 };
 ASPxClientSplitter.FindSplitterInfo = function (evt, regex, suffixLength) {
  var element = ASPxClientSplitter.FindParentCell(_aspxGetEventSource(evt));
  if (element) {
   var matchResult = element.id.match(regex);
   if (matchResult) {
    var name = element.id.substring(0, matchResult.index);
    var splitter = ASPxClientSplitter.Instances.Get(name);
    if (splitter != null) {
     var panePath = element.id.substring(matchResult.index + 1, element.id.length - suffixLength);
     return { "splitter": splitter, "panePath": panePath };
    }
   }
  }
  return null;
 };
 ASPxClientSplitter.OnMouseClick = function (evt) {
  var info = ASPxClientSplitter.FindSplitterInfo(evt, ASPxClientSplitter.GetRegEx("S_CF"), 5);
  if (info) {
   if (info.splitter.enabled)
    info.splitter.OnCollapseButtonClick(info.panePath, true);
  }
  else {
   info = ASPxClientSplitter.FindSplitterInfo(evt, ASPxClientSplitter.GetRegEx("S_CB"), 5);
   if (info && info.splitter.enabled)
    info.splitter.OnCollapseButtonClick(info.panePath, false);
  }
 };
 ASPxClientSplitter.OnMouseDown = function (evt) {
  var info = ASPxClientSplitter.FindSplitterInfo(evt, ASPxClientSplitter.GetRegEx("S"), 2);
  if (!info)
   info = ASPxClientSplitter.FindSplitterInfo(evt, ASPxClientSplitter.GetRegEx("S_CS"), 5);
  if (info && info.splitter) {
   ASPxClientSplitter.current = info.splitter;
   ASPxClientSplitter.SaveCurrentPos(evt);
   _aspxSetElementSelectionEnabled(ASPxClientSplitter.current.GetMainElement(), false);
   ASPxClientSplitter.isInMove = info.splitter.OnSeparatorMouseDown(info.panePath);
  }
 };
 ASPxClientSplitter.OnMouseUp = function () {
  if (ASPxClientSplitter.isInMove) {
   ASPxClientSplitter.isInMove = false;
   _aspxSetElementSelectionEnabled(ASPxClientSplitter.current.GetMainElement(), true);
   ASPxClientSplitter.current.OnSeparatorMouseUp();
  }
 };
 ASPxClientSplitter.mouseMoveTimeoutId = -1;
 ASPxClientSplitter.SuspendedMouseMove = function () {
  if (ASPxClientSplitter.isInMove)
   ASPxClientSplitter.current.OnMouseMove();
  ASPxClientSplitter.mouseMoveTimeoutId = _aspxClearTimer(ASPxClientSplitter.mouseMoveTimeoutId);
 };
 ASPxClientSplitter.OnMouseMove = function (evt) {
  if (__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)
   return;
  if (!ASPxClientSplitter.isInMove)
   return;
  if (__aspxIE && !_aspxGetIsLeftButtonPressed(evt)) {
   ASPxClientSplitter.OnMouseUp(evt);
   return;
  }
  ASPxClientSplitter.SaveCurrentPos(evt);
  if (ASPxClientSplitter.mouseMoveTimeoutId == -1) {
   ASPxClientSplitter.mouseMoveTimeoutId = _aspxSetTimeout(ASPxClientSplitter.SuspendedMouseMove, ASPxClientSplitter.timerInterval);
   _aspxPreventEventAndBubble(evt);
  }
  if (__aspxWebKitTouchUI)
   evt.preventDefault();
 };
 _aspxAttachEventToElement(window, "resize", ASPxClientSplitter.OnWindowResize);
 _aspxAttachEventToDocument("click", ASPxClientSplitter.OnMouseClick);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, ASPxClientSplitter.OnMouseDown);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, ASPxClientSplitter.OnMouseUp);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, ASPxClientSplitter.OnMouseMove);
 var ASPxClientSplitterPaneEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function (pane) {
   this.constructor.prototype.constructor.call(this, pane);
   this.pane = pane;
  }
 });
 var ASPxClientSplitterPaneCancelEventArgs = _aspxCreateClass(ASPxClientSplitterPaneEventArgs, {
  constructor: function (pane) {
   this.constructor.prototype.constructor.call(this, pane);
   this.cancel = false;
  }
 });
 window.ASPxClientSplitter = ASPxClientSplitter;
 window.ASPxClientSplitterPane = ASPxClientSplitterPane;
 window.ASPxClientSplitterPaneEventArgs = ASPxClientSplitterPaneEventArgs;
 window.ASPxClientSplitterPaneCancelEventArgs = ASPxClientSplitterPaneCancelEventArgs;
})();
ASPxClientTreeView = _aspxCreateClass(ASPxClientControl, {
 DisabledCssClassName: "dxtvDisabled",
 ElbowCssClassName: "dxtv-elb",
 ElbowWithoutLineCssClassName: "dxtv-elbNoLn",
 ButtonCssClassName: "dxtv-btn",
 NodeCssClassName: "dxtv-nd",
 LineCssClassName: "dxtv-ln",
 NodeCheckboxCssClassName: "dxtv-ndChk",
 NodeImageCssClassName: "dxtv-ndImg",
 NodeTextSpanCssClassName: "dxtv-ndTxt",
 NodeTemplateCssClassName: "dxtv-ndTmpl",
 RtlCssClassName: "dxtvRtl",
 IndexPathSeparator: "_",
 NodeIDPrefix: "_N",
 NodeImageIDPostfix: "I",
 NodeLoadingPanelIDPostfix: "NLP",
 SampleExpandButtonIDPostfix: "_SEB",
 SampleCollapseButtonIDPostfix: "_SCB",
 SampleNodeLoadingPanelIDPostfix: "_SNLP",
 NodesStateHiddenInputIDPostfix: "_NSHF",
 ControlContentDivIDPostfix: "_CD",
 NodeCheckboxIDPostfix: "_CHK",
 ExpandNodeCommand: "E",
 ExpandAllNodesCommand: "EA",
 CheckNodeRecursiveCommand: "CHKNR",
 RaiseNodeClickEventCommand: "NCLK",
 RaiseExpandedChangingEventCommand: "ECHANGING",
 RaiseCheckedChangedEventCommand: "CCHNGD",
 PostRequestArgsSeparator: "|",
 NodeClickServerEventName: "NodeClick",
 ExpandedChangingServerEventName: "ExpandedChanging",
 CheckedChangedServerEventName: "CheckedChanged",
 WidthMeasurementIncrement: 1000,
 IE6WidthMeasurementDivWidth: 99999,
 AnimationDuration: 300,
 MinAnimationDuration: 200,
 HoverCorrectionDelay: 50,
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.enableAnimation = true;
  this.nodesInfo = null;
  this.nodesUrls = null;
  this.contentBoundsMode = true;
  this.checkNodesRecursive = false;
  this.allowSelectNode = false;
  this.virtualMode = false;
  this.imageProperties = null;
  this.icbFocusedStyle = [];
  this.requireWidthRecalculationOnHover = false;
  this.nodeLoadingPanelWidth = 0;
  this.nodeLoadingPanelHeight = 0;
  var instance = this;
  this.expandCollapseHandler = function (e) { instance.HandleExpandButtonClick(e); };
  this.nodeClickHandler = function (e) { instance.HandleNodeClick(e); };
  this.nodeDblClickHandler = function (e) { instance.HandleNodeDblClick(e); };
  this.rootNode = new ASPxClientTreeViewNode(this);
  this.selectedNodeContentElementID = null;
  this.requireRaiseExpandedChangedList = [];
  this.initialControlWidth = 0;
  this.NodeClick = new ASPxClientEvent();
  this.ExpandedChanged = new ASPxClientEvent();
  this.ExpandedChanging = new ASPxClientEvent();
  this.CheckedChanged = new ASPxClientEvent();
 },
 ReplaceElementWithSampleElement: function (srcElement, sampleElement, copySrcInnerHtml) {
  var newElement = sampleElement.cloneNode(true);
  newElement.id = srcElement.id;
  _aspxSetElementDisplay(newElement, true);
  if (copySrcInnerHtml && srcElement.innerHTML)
   _aspxSetInnerHtml(newElement, srcElement.innerHTML);
  srcElement.parentNode.replaceChild(newElement, srcElement);
  return newElement;
 },
 ToggleExpandButtonClickHandler: function (attach, button) {
  var method = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
  method(button, "click", this.expandCollapseHandler);
 },
 AddElementCssClass: function (element, className) {
  this.RemoveElementCssClass(element, className);
  element.className = element.className + " " + className;
 },
 RemoveElementCssClass: function (element, className) {
  var newElementClassName = element.className.replace(className, "");
  element.className = _aspxTrim(newElementClassName);
 },
 RemoveEmptyTextNodes: function (element) {
  var nonEmptyTextPattern = /\S/;
  var textNodeType = 3;
  var elementNodeType = 1;
  for (var i = 0; i < element.childNodes.length; i++) {
   if (element.childNodes[i].nodeType == textNodeType &&
    !nonEmptyTextPattern.test(element.childNodes[i].nodeValue)) {
    element.removeChild(element.childNodes[i]);
    i--;
   } else if (element.childNodes[i].nodeType == elementNodeType)
    this.RemoveEmptyTextNodes(element.childNodes[i]);
  }
 },
 GetNodeIDByContentElementID: function (contentElementID) {
  return _aspxTrim(contentElementID.replace(this.name + "_", ""));
 },
 GetNodeIndexPathByContentElementID: function (contentElementID) {
  return _aspxTrim(contentElementID.replace(this.name + this.NodeIDPrefix, ""));
 },
 CreatePostRequestArgs: function (command, arg1, arg2) {
  var args = command + this.PostRequestArgsSeparator + arg1;
  if (arg2 || arg2 === "")
   args += this.PostRequestArgsSeparator + arg2;
  return args;
 },
 MergeNodesData: function (srcData, destData) {
  for (var key in srcData)
   destData[key] = srcData[key];
 },
 GetNodeListItem: function (clientNode) {
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  return _aspxGetParentByTagName(contentElement, "LI");
 },
 SerializeBooleanValue: function (value) {
  return value ? "T" : "";
 },
 GetContentElementByNodeID: function (nodeID) {
  return _aspxGetElementById(this.name + "_" + nodeID);
 },
 GetListItems: function (list) {
  var listNodes = _aspxGetElementNodes(list);
  var listItems = [];
  if (!listNodes)
   return null;
  for (var i = 0; i < listNodes.length; i++) {
   if (listNodes[i].tagName == "LI")
    listItems.push(listNodes[i]);
  }
  return listItems;
 },
 GetNodesStateHiddenInput: function () {
  return _aspxGetElementById(this.name + this.NodesStateHiddenInputIDPostfix);
 },
 GetClickedContentElementByEventArgs: function (e) {
  var clickedElement = _aspxGetEventSource(e);
  var contentElement = _aspxGetParentByClassName(clickedElement, this.NodeCssClassName);
  if (_aspxElementCssClassContains(clickedElement, this.NodeCheckboxCssClassName)) {
   if (__aspxFirefox) {
    _aspxPreventEventAndBubble(e);
    var instance = this;
    var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
    window.setTimeout(function () {
     ASPxCheckableElementHelper.Instance.InvokeClick(internalCheckBox, e);
    });
   }
   return null;
  }
  if (!contentElement || _aspxElementCssClassContains(contentElement, this.DisabledCssClassName))
   return null;
  return contentElement;
 },
 IsRightToLeft: function () {
  return _aspxIsElementRightToLeft(this.GetMainElement());
 },
 InlineInitialize: function () {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.SetInitialControlWidth();
  if(this.imageProperties)
   this.CreateInternalCheckBoxCollection();
  this.InitializeControlElements();
 },
 Initialize: function () {
  ASPxClientControl.prototype.Initialize.call(this);
  this.InitLoadingPanelSize();
 },
 AdjustControlCore: function () {
  this.CorrectControlWidth();
 },
 CreateInternalCheckBoxCollection: function() {
    this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.imageProperties, true);
 },
 AddInternalCheckBoxToCollection: function(icbInputElement, contentElement) {
  var instance = this;
  var internalCheckBox = this.internalCheckBoxCollection.Add(contentElement.id, icbInputElement);
  internalCheckBox.SetEnabled(!this.IsNodeDisabled(contentElement));
  internalCheckBox.readOnly = this.readOnly;
  internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  internalCheckBox.CheckedChanged.AddHandler(
   function(s, e) {
    instance.UpdateCheckedInNodesState(s.inputElement);
    instance.OnNodeCheckboxClick(s.inputElement);
   }
  );
 },
 InitLoadingPanelSize: function () {
  var panel = this.GetSampleNodeLoadingPanel();
  if(panel) {
   this.nodeLoadingPanelWidth = panel.offsetWidth;
   this.nodeLoadingPanelHeight = panel.offsetHeight;
   _aspxSetElementDisplay(panel, false);
   panel.style.visibility = "";
   panel.style.position = "";
  }
 },
 InitializeControlElements: function () {
  var mainElement = this.GetMainElement();
  if (__aspxIE && __aspxBrowserVersion == 6)
   this.RemoveEmptyTextNodes(mainElement);
  if (_aspxElementCssClassContains(mainElement, this.DisabledCssClassName))
   return;
  var rootList = _aspxGetChildByTagName(mainElement, "UL", 0);
  this.InitializeNodeContainerElements(rootList, "", null);
  this.InitializeNodeSelection();
 },
 InitializeNodeSelection: function () {
  var contentElement = this.GetContentElementByNodeID(this.GetSelectedNodeIDFromState());
  if (contentElement)
   this.ApplySelectionToNode(contentElement);
 },
 GetNodeIndexPath: function (listItemIndex, parentIndexPath) {
  if (!parentIndexPath)
   return listItemIndex.toString();
  return parentIndexPath + this.IndexPathSeparator + listItemIndex.toString();
 },
 GetElementID: function (IDPrefix, indexPath) {
  return this.name + IDPrefix + indexPath;
 },
 ApplyServerProvidedClientNodeInfo: function (clientNode, indexPath) {
  if (!this.nodesInfo[indexPath])
   return;
  clientNode.clientEnabled = !!this.nodesInfo[indexPath][0];
  clientNode.clientVisible = !!this.nodesInfo[indexPath][1];
  clientNode.name = this.nodesInfo[indexPath][2];
  clientNode.navigateUrl = this.nodesInfo[indexPath][3];
  clientNode.target = this.nodesInfo[indexPath][4];
 },
 CreateClientNode: function (index, parentClientNode, indexPath) {
  if (!this.nodesInfo)
   return null;
  var clientNode = new ASPxClientTreeViewNode();
  clientNode.treeView = this;
  clientNode.parent = parentClientNode;
  clientNode.index = index;
  this.ApplyServerProvidedClientNodeInfo(clientNode, indexPath, null);
  if (parentClientNode)
   parentClientNode.nodes.push(clientNode);
  else
   this.rootNode.nodes.push(clientNode);
  return clientNode;
 },
 GetServerProvidedNodeIndex: function (listItem) {
  var nodeContentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (!nodeContentElement || !nodeContentElement.id)
   return null;
  var nodeIndexPath = this.GetNodeIndexPathByContentElementID(nodeContentElement.id);
  var nodeIndices = nodeIndexPath.split(this.IndexPathSeparator);
  return parseInt(nodeIndices[nodeIndices.length - 1]);
 },
 InitializeNodeContainerElements: function (nodeContainer, parentIndexPath, parentClientNode) {
  var listItems = this.GetListItems(nodeContainer);
  if (!listItems)
   return;
  for (var i = 0, nodeIndex = 0; i < listItems.length; i++, nodeIndex++) {
   var serverProvidedNodeIndex = this.GetServerProvidedNodeIndex(listItems[i]);
   if (serverProvidedNodeIndex)
    nodeIndex = serverProvidedNodeIndex;
   var nodeIndexPath = this.GetNodeIndexPath(nodeIndex, parentIndexPath);
   var clientNode = this.CreateClientNode(i, parentClientNode, nodeIndexPath);
   if (clientNode)
    clientNode.last = i == listItems.length - 1;
   this.InitializeNodeContent(listItems[i], nodeIndexPath, clientNode);
   this.InitializeExpandButton(listItems[i]);
   if (clientNode) {
    if (!clientNode.clientVisible)
     this.SetNodeClientVisible(clientNode, false);
    if (!clientNode.clientEnabled)
     this.SetNodeClientEnabled(clientNode, false);
   }
   var subnodesList = _aspxGetChildByTagName(listItems[i], "UL", 0);
   if (subnodesList)
    this.InitializeNodeContainerElements(subnodesList, nodeIndexPath, clientNode);
  }
 },
 InitializeExpandButton: function (listItem) {
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  if (button && !_aspxElementCssClassContains(button, this.DisabledCssClassName))
   this.ToggleExpandButtonClickHandler(true, button);
 },
 InitializeNodeContent: function (listItem, nodeIndexPath, clientNode) {
  var nodeContentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (!nodeContentElement)
   return;
  var contentElementID = this.GetElementID(this.NodeIDPrefix, nodeIndexPath);
  if (clientNode) {
   clientNode.enabled = !this.IsNodeDisabled(nodeContentElement);
   clientNode.contentElementID = contentElementID;
   var textSpan = _aspxGetChildrenByPartialClassName(nodeContentElement, this.NodeTextSpanCssClassName)[0];
   clientNode.text = textSpan ? _aspxGetInnerText(textSpan) : "";
  }
  nodeContentElement.id = contentElementID;
  if(clientNode && clientNode.last && __aspxIE && __aspxBrowserVersion > 7) {
   var listItem = _aspxGetParentByTagName(nodeContentElement, "LI");
   var clearElement = _aspxGetChildByTagName(listItem, "B", 0);
   if(clearElement && clearElement.style.display == "inline")
    clearElement.style.display = "";
  }
  aspxAssignAccessabilityEventsToLink(nodeContentElement);
  if (this.contentBoundsMode) {
   _aspxAttachEventToElement(nodeContentElement, "click", this.nodeClickHandler);
   _aspxAttachEventToElement(nodeContentElement, "dblclick", this.nodeDblClickHandler);
   var instance = this;
   _aspxAttachEventToElement(nodeContentElement, "mousemove", function(evt) {
    instance.CorrectControlWidthOnHover(evt.target);
   });
  }
  this.InitializeNodeImage(nodeContentElement, clientNode);
  var icbMainElement = _aspxGetChildrenByPartialClassName(nodeContentElement, this.NodeCheckboxCssClassName)[0];
  if (icbMainElement) {
   var icbInputElement = _aspxGetChildByTagName(icbMainElement, "input", 0);
   icbInputElement.id = this.GetElementID(this.NodeCheckboxIDPostfix, nodeIndexPath);
   if(this.imageProperties)
    this.AddInternalCheckBoxToCollection(icbInputElement, nodeContentElement);
  }
 },
 IsNodeDisabled: function(nodeContentElement) {
  return _aspxElementCssClassContains(nodeContentElement, this.DisabledCssClassName);
 },
 InitializeNodeImage: function (nodeContentElement, clientNode) {
  var nodeImage = _aspxGetChildrenByPartialClassName(nodeContentElement, this.NodeImageCssClassName)[0];
  if (!nodeImage)
   return;
  nodeImage.id = nodeContentElement.id + this.NodeImageIDPostfix;
  if(!__aspxIE) {
   var nodeImageLoaded = nodeImage.naturalWidth !== 0 && nodeImage.naturalHeight !== 0 && nodeImage.complete;
   if(!nodeImageLoaded) {
    var instance = this;
    _aspxAttachEventToElement(nodeImage, "load", function(evt) {
     instance.CorrectControlWidth();
    });
   }
  }
  if (clientNode)
   clientNode.imageUrl = nodeImage.src;
 },
 GetControlContentDiv: function () {
  return _aspxGetElementById(this.name + this.ControlContentDivIDPostfix);
 },
 SetInitialControlWidth: function () {
  var mainElement = this.GetMainElement();
  if(mainElement.style.width && !_aspxIsPercentageSize(mainElement.style.width))
   this.initialControlWidth = mainElement.offsetWidth;
 },
 CorrectControlWidthOnHover: function (nodeElement) {
  if (!this.requireWidthRecalculationOnHover)
   return;
  if (__aspxIE && __aspxBrowserVersion < 9) {
   var instance = this;
   window.setTimeout(function() {
    instance.CorrectControlWidth();
   }, 0);
   return;
  }
  if(nodeElement.lastCorrectionOnHover && (new Date().getTime() - nodeElement.lastCorrectionOnHover <= this.HoverCorrectionDelay))
   return;
  this.CorrectControlWidth();
  nodeElement.lastCorrectionOnHover = new Date().getTime();
 },
 CorrectControlWidth: function() {
  var mainElement = this.GetMainElement();
  var controlContentDiv = this.GetControlContentDiv();
  var rootNodesList = _aspxGetChildByTagName(controlContentDiv, "UL", 0);
  if (!rootNodesList)
   return;
  if (this.IsRightToLeft() && __aspxIE && __aspxBrowserVersion <= 7)
   this.RemoveElementCssClass(mainElement, this.RtlCssClassName);
  mainElement.style.overflow = "hidden";
  _aspxSetElementFloat(rootNodesList, "left");
  var prevListWidth = 0;
  if (__aspxIE && __aspxBrowserVersion == 6)
   _aspxSetOffsetWidth(controlContentDiv, this.IE6WidthMeasurementDivWidth);
  else {
   do {
    prevListWidth = rootNodesList.offsetWidth;
    _aspxSetOffsetWidth(controlContentDiv, controlContentDiv.offsetWidth + this.WidthMeasurementIncrement);
    if (__aspxOpera) {
     rootNodesList.style.width = "100%";
     var dummy = rootNodesList.offsetWidth;
     rootNodesList.style.width = "";
    }
   } while (prevListWidth != rootNodesList.offsetWidth);
  }
  if (rootNodesList.offsetWidth > this.initialControlWidth){
   var roundingCorrection = __aspxBrowserWithHardwareAcceleration ? 1 : 0; 
   mainElement.style.width = rootNodesList.offsetWidth + roundingCorrection + "px";
  }
  _aspxSetElementFloat(rootNodesList, "");
  mainElement.style.overflow = "";
  controlContentDiv.style.width = "";
  if (this.IsRightToLeft() && __aspxIE && __aspxBrowserVersion <= 7)
   this.AddElementCssClass(mainElement, this.RtlCssClassName);
 },
 GetPreviousSiblingNodeListItem: function (clientNode) {
  var previousNodeIndex = clientNode.index - 1;
  if (previousNodeIndex < 0)
   return null;
  var previousClientNode = clientNode.parent ? clientNode.parent.GetNode(previousNodeIndex) :
   this.rootNode.nodes[previousNodeIndex];
  return this.GetNodeListItem(previousClientNode);
 },
 GetListItemElbowSpan: function (listItem) {
  return _aspxGetChildrenByPartialClassName(listItem, this.ElbowCssClassName)[0] ||
      _aspxGetChildrenByPartialClassName(listItem, this.ElbowWithoutLineCssClassName)[0];
 },
 SetNodeClientVisible: function (clientNode, clientVisible) {
  if(this.IsRootNode(clientNode))
   return;
  var listItem = this.GetNodeListItem(clientNode);
  _aspxSetElementDisplay(listItem, clientVisible);
  this.CorrectControlWidth();
  if (!clientNode.last)
   return;
  var previousNodeListItem = this.GetPreviousSiblingNodeListItem(clientNode);
  if (!previousNodeListItem)
   return;
  var previousNodeElbowSpan = this.GetListItemElbowSpan(previousNodeListItem);
  if (_aspxElementCssClassContains(previousNodeElbowSpan, this.ElbowWithoutLineCssClassName))
   return;
  this.InitializeExpandButton(previousNodeListItem);
  if (clientVisible)
   this.AddElementCssClass(previousNodeListItem, this.LineCssClassName);
  else
   this.RemoveElementCssClass(previousNodeListItem, this.LineCssClassName);
 },
 SetNodeClientEnabled: function (clientNode, clientEnabled) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  aspxGetStateController().SetElementEnabled(contentElement, clientEnabled);
  if(this.internalCheckBoxCollection) {
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox)
    internalCheckBox.SetEnabled(clientEnabled);
  }
  var listItem = _aspxGetParentByTagName(contentElement, "LI");
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  if (button) {
   this.ToggleExpandButtonClickHandler(clientEnabled, button);
   button.style.cursor = clientEnabled ? "pointer" : "default";
  }
 },
 SetNodeText: function (clientNode, text) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var textSpan = _aspxGetChildrenByPartialClassName(contentElement, this.NodeTextSpanCssClassName)[0];
  if (textSpan) {
   _aspxSetInnerHtml(textSpan, text);
   this.CorrectControlWidth();
  }
 },
 SetNodeImageUrl: function (clientNode, url) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var nodeImage = _aspxGetChildrenByPartialClassName(contentElement, this.NodeImageCssClassName)[0];
  if (nodeImage)
   nodeImage.src = url;
 },
 GetNodeLinkElement: function (clientNode) {
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  if (_aspxElementCssClassContains(contentElement, this.NodeTemplateCssClassName))
   return null;
  return contentElement.tagName == "A" ? contentElement : _aspxGetChildByTagName(contentElement, "A", 0);
 },
 GetNodeNavigateUrl: function (clientNode) {
  if (this.contentBoundsMode || this.IsRootNode(clientNode))
   return clientNode.navigateUrl || "";
  var nodeLink = this.GetNodeLinkElement(clientNode);
  return nodeLink ? nodeLink.href : "";
 },
 SetNodeNavigateUrl: function (clientNode, url) {
  if(this.IsRootNode(clientNode))
   return;
  var nodeLink = this.GetNodeLinkElement(clientNode);
  if (nodeLink){
   nodeLink.href = url;
   clientNode.navigateUrl = url;
  }
 },
 UpdateCheckedInNodesState: function (checkbox) {
  var contentElement = _aspxGetParentByClassName(checkbox, this.NodeCssClassName);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  var value = internalCheckBox.GetCurrentInputKey();
  var nodesState = this.GetNodesState();
  var nodeID = this.GetNodeIDByContentElementID(contentElement.id);
  nodesState[2][nodeID] = value;
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 UpdateRecursiveCheckedNodesStateOnCallback: function (checkState, nodeIDs) {
  this.HideLoadingPanel();
  var nodesState = this.GetNodesState();
  for (var i = 0; i < nodeIDs.length; i++) {
   if(nodesState[2][nodeIDs[i]] != checkState)
    nodesState[2][nodeIDs[i]] = checkState;
  }
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 CreateRecursiveNodeCheckRequest: function (contentElement) {
  var requestArgs = this.CreatePostRequestArgs(this.CheckNodeRecursiveCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
  if (this.autoPostBack) {
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  if (this.callBack) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   this.CreateCallback(requestArgs);
  }
 },
 OnNodeCheckboxClick: function (checkbox) {
  var contentElement = _aspxGetParentByClassName(checkbox, this.NodeCssClassName);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  if (this.checkNodesRecursive) {
   var checkBoxState = internalCheckBox.GetCurrentInputKey();
   this.UpdateCheckedStateRecursive(checkbox, checkBoxState);
  }
  var processOnServer = this.RaiseCheckedChanged(contentElement);
  if (this.checkNodesRecursive && !this.virtualMode && (this.autoPostBack || this.callBack))
   this.CreateRecursiveNodeCheckRequest(contentElement);
  else if (processOnServer) {
   var requestArgs = this.CreatePostRequestArgs(this.RaiseCheckedChangedEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
  }
 },
 UpdateCheckedStateRecursive: function (checkbox, state) {
  var listItem = _aspxGetParentByTagName(checkbox, "LI");
  this.UpdateDescendantsCheckedState(listItem, state);
  this.UpdateAncestorsCheckedState(listItem);
 },
 UpdateDescendantsCheckedState: function (listItem, state) {
  var subnodesList = _aspxGetChildByTagName(listItem, "UL", 0);
  if (!subnodesList) {
   listItem.requireUpdateCheckedState = true;
   listItem.checkedState = state;
   return;
  }
  var descendantListItems = this.GetListItems(subnodesList);
  for (var i = 0; i < descendantListItems.length; i++) {
   var contentElement = _aspxGetChildrenByPartialClassName(descendantListItems[i], this.NodeCssClassName)[0];
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox) {
    internalCheckBox.SetValue(state);
    this.UpdateCheckedInNodesState(internalCheckBox.inputElement);
   }
   this.UpdateDescendantsCheckedState(descendantListItems[i], state);
  }
 },
 UpdateAncestorsCheckedState: function (listItem) {
  var parentSubnodesList = _aspxGetParentByTagName(listItem, "UL");
  var parentListItem = _aspxGetParentByTagName(parentSubnodesList, "LI");
  if (!parentListItem || !_aspxGetParentById(parentListItem, this.name))
   return;
  var parentChecked = true;
  var parentUnchecked = true;
  var siblingListItems = this.GetListItems(parentSubnodesList);
  for (var i = 0; i < siblingListItems.length; i++) {
   var contentElement = _aspxGetChildrenByPartialClassName(siblingListItems[i], this.NodeCssClassName)[0];
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox) {
    var currentCheckBoxState = internalCheckBox.GetCurrentInputKey();
    if(currentCheckBoxState != ASPxClientCheckBoxInputKey.Checked)
     parentChecked = false;
    if(currentCheckBoxState != ASPxClientCheckBoxInputKey.Unchecked)
     parentUnchecked = false;
   }
  }
  var parentCheckboxContentElement = _aspxGetChildrenByPartialClassName(parentListItem, this.NodeCssClassName)[0];
  if (parentCheckboxContentElement) {
   var parentCheckBoxState = parentChecked ? ASPxClientCheckBoxInputKey.Checked : (parentUnchecked ? ASPxClientCheckBoxInputKey.Unchecked : ASPxClientCheckBoxInputKey.Indeterminate);
   var parentInternalCheckBox = this.internalCheckBoxCollection.Get(parentCheckboxContentElement.id);
   if(parentInternalCheckBox) {
    parentInternalCheckBox.SetValue(parentCheckBoxState);
    this.UpdateCheckedInNodesState(parentInternalCheckBox.inputElement);
   }
  }
  this.UpdateAncestorsCheckedState(parentListItem);
 },
 SetNodeState: function (clientNode, state) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var checkbox = _aspxGetChildrenByPartialClassName(contentElement, this.NodeCheckboxCssClassName)[0];
  var stateKey = ASPxClientCheckBoxInputKey[state];
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  if(internalCheckBox) {
   internalCheckBox.SetValue(stateKey);
   this.UpdateCheckedInNodesState(internalCheckBox.inputElement);
  }
  if (this.checkNodesRecursive && checkbox)
   this.UpdateCheckedStateRecursive(checkbox, stateKey);
 },
 GetNodeState: function (clientNode) {
  if(!this.internalCheckBoxCollection)
   return ASPxClientCheckBoxCheckState.Unchecked;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  return internalCheckBox ? internalCheckBox.GetCurrentCheckState() : ASPxClientCheckBoxCheckState.Unchecked;
 },
 GetSelectedNodeIDFromState: function () {
  var nodesState = this.GetNodesState();
  return nodesState ? nodesState[1] : "";
 },
 SetSelectedNodeIDToState: function (nodeID) {
  var nodesState = this.GetNodesState();
  if (!nodesState || !_aspxIsExists(nodesState[1]))
   return;
  nodesState[1] = nodeID;
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 NavigateToNodeLink: function (contentElementID) {
  var navigateUrl = null;
  var target = null;
  if (this.rootNode.nodes.length > 0) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElementID);
   navigateUrl = clientNode.navigateUrl;
   target = clientNode.target;
  } else {
   var nodeIndexPath = this.GetNodeIndexPathByContentElementID(contentElementID);
   if (!this.nodesUrls[nodeIndexPath])
    return;
   navigateUrl = this.nodesUrls[nodeIndexPath][0];
   target = this.nodesUrls[nodeIndexPath][1];
  }
  if (navigateUrl)
   _aspxNavigateUrl(navigateUrl, target || "");
 },
 ApplySelectionToNode: function (contentElement) {
  var previouslySelectedContentElement = _aspxGetElementById(this.selectedNodeContentElementID);
  if (previouslySelectedContentElement)
   aspxGetStateController().DeselectElementBySrcElement(previouslySelectedContentElement);
  if (contentElement) {
   aspxGetStateController().SelectElementBySrcElement(contentElement);
   this.CorrectControlWidth();
   this.selectedNodeContentElementID = contentElement.id;
  } else
   this.selectedNodeContentElementID = null;
 },
 HandleNodeClick: function (e) {
  var contentElement = this.GetClickedContentElementByEventArgs(e);
  if (!contentElement)
   return;
  if (this.allowSelectNode && this.selectedNodeContentElementID != contentElement.id) {
   this.SetSelectedNodeIDToState(this.GetNodeIDByContentElementID(contentElement.id));
   aspxClearHoverState();
   this.ApplySelectionToNode(contentElement);
   aspxUpdateHoverState(e);
  }
  var processEventOnServer = this.RaiseNodeClick(contentElement, e);
  if (contentElement.tagName != "A")
   this.NavigateToNodeLink(contentElement.id);
  if (processEventOnServer) {
   var postbackArgs = this.CreatePostRequestArgs(this.RaiseNodeClickEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
   if (this.isInitialized)
    this.SendPostBack(postbackArgs);
  }
 },
 OnCallback: function (resultObj) {
  if (!resultObj)
   return;
  switch (resultObj[0]) {
   case this.ExpandNodeCommand:
    if(resultObj[1])
     this.ProcessNodeExpandingOnCallback(resultObj[1], resultObj[2], resultObj[3], resultObj[4]);
    else
     this.ProcessAllNodesExpandingOnCallback(resultObj[2], resultObj[3], resultObj[4]);
    break;
   case this.CheckNodeRecursiveCommand:
    this.UpdateRecursiveCheckedNodesStateOnCallback(resultObj[1], resultObj[2]);
    break;
  }
 },
 GetSampleNodeLoadingPanel: function () {
  return _aspxGetElementById(this.name + this.SampleNodeLoadingPanelIDPostfix);
 },
 GetNodeLoadingPanelID: function (nodeID) {
  return this.name + this.NodeLoadingPanelIDPostfix + nodeID;
 },
 ShowNodeLoadingPanel: function (button, nodeID) {
  var sampleLoadingPanel = this.GetSampleNodeLoadingPanel();
  if (!sampleLoadingPanel || !button) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   return;
  }
  var elbowSpan = _aspxGetParentByTagName(button, "SPAN");
  var panel = this.CloneNodeLoadingPanel(sampleLoadingPanel, nodeID, elbowSpan);
  _aspxSetElementDisplay(panel, true);
  this.SetNodeLoadingPanelPosition(panel, button, elbowSpan);
  _aspxSetElementDisplay(button, false);
 },
 HideNodeLoadingPanel: function (nodeID) {
  var panel = _aspxGetElementById(this.GetNodeLoadingPanelID(nodeID));
  if (panel)
   _aspxRemoveElement(panel);
 },
 SetNodeLoadingPanelPosition: function (panel, button, elbowSpan) {
  elbowSpan.style.position = "relative";
  var buttonStyle = _aspxGetCurrentStyle(button);
  var marginLeft = parseInt(buttonStyle.marginLeft);
  var marginTop = parseInt(buttonStyle.marginTop);
  var leftOffset = marginLeft - Math.round((this.nodeLoadingPanelWidth - button.offsetWidth) / 2);
  var topOffset = marginTop - Math.round((this.nodeLoadingPanelHeight - button.offsetHeight) / 2);
  elbowSpan.style.position = "";
  if (this.IsRightToLeft())
   panel.style.marginRight = elbowSpan.offsetWidth - this.nodeLoadingPanelWidth - leftOffset + "px";
  else
   panel.style.marginLeft = leftOffset + "px";
  panel.style.marginTop = topOffset + "px";
 },
 CloneNodeLoadingPanel: function (sampleLoadingPanel, nodeID, elbowSpan) {
  var clonedPanel = sampleLoadingPanel.cloneNode(true);
  clonedPanel.id = this.GetNodeLoadingPanelID(nodeID);
  clonedPanel.dir = "ltr";
  elbowSpan.appendChild(clonedPanel);
  return clonedPanel;
 },
 GetSampleExpandButton: function () {
  return _aspxGetElementById(this.name + this.SampleExpandButtonIDPostfix);
 },
 GetSampleCollapseButton: function () {
  return _aspxGetElementById(this.name + this.SampleCollapseButtonIDPostfix);
 },
 SetExpandedToState: function (nodeID, expanded) {
  var nodesState = this.GetNodesState();
  nodesState[0][nodeID] = this.SerializeBooleanValue(expanded);
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 GetExpandedDataFromState: function () {
  return this.GetNodesState()[0];
 },
 HandleNodeDblClick: function (e) {
  var contentElement = this.GetClickedContentElementByEventArgs(e);
  if (!contentElement)
   return;
  var listItem = _aspxGetParentByTagName(contentElement, "LI");
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  var expandedState = this.GetExpandedDataFromState();
  var nodeID = this.GetNodeIDByContentElementID(contentElement.id);
  if (!button && !_aspxIsExists(expandedState[nodeID]))
   return;
  this.ProcessUserInitiatedExpandCollapse(button, listItem);
 },
 InsertSubnodesListMarkup: function (listItem, subnodesListMarkup) {
  var fakeDiv = document.createElement("DIV");
  _aspxSetInnerHtml(fakeDiv, subnodesListMarkup);
  while (fakeDiv.childNodes.length != 0)
   listItem.appendChild(fakeDiv.childNodes[0]);
 },
 ProcessAllNodesExpandingOnCallback: function (subnodesListMarkup, nodesData, nodeNames) {
  this.HideLoadingPanel();
  var nodesState = this.GetNodesState();
  for (var i = 0; i < nodesData.length; i++) {
   nodesState[0][nodesData[i][0]] = 'T';
  }
  this.SaveNodesState(_aspxToJson(nodesState));
  this.MergeRetrievedOnCallbackNodeInfo(nodesData, nodeNames);
  var contentDiv = this.GetControlContentDiv();
  contentDiv.innerHTML = subnodesListMarkup;
  var subnodesList = _aspxGetChildByTagName(contentDiv, "UL", 0);
  this.rootNode.nodes = [];
  this.InitializeNodeContainerElements(subnodesList, "", null);
  this.InitializeNodeSelection();
  this.AdjustControl();
 },
 MergeRetrievedOnCallbackNodeInfo: function (nodesData, nodeNames) {
  if (nodesData) {
   var destData = this.nodesInfo || this.nodesUrls;
   this.MergeNodesData(nodesData, destData);
  }
  if (nodeNames) {
   var nodesState = this.GetNodesState();
   this.MergeNodesData(nodeNames, nodesState[3]);
   this.SaveNodesState(_aspxToJson(nodesState));
  }
 },
 ProcessNodeExpandingOnCallback: function (nodeID, subnodesListMarkup, nodesData, nodeNames) {
  this.MergeRetrievedOnCallbackNodeInfo(nodesData, nodeNames);
  var contentElement = this.GetContentElementByNodeID(nodeID);
  contentElement.performingExpandNodeRequest = false;
  this.HideNodeLoadingPanel(this.GetNodeIDByContentElementID(contentElement.id));
  var listItem = _aspxGetParentByTagName(contentElement, "LI");
  this.InsertSubnodesListMarkup(listItem, subnodesListMarkup);
  var subnodesList = _aspxGetChildByTagName(listItem, "UL", 0);
  var nodeIndexPath = this.GetNodeIndexPathByContentElementID(contentElement.id);
  var clientNode = null;
  if (this.rootNode.nodes.length > 0)
   clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  if (__aspxIE && __aspxBrowserVersion == 6)
   this.RemoveEmptyTextNodes(subnodesList);
  this.InitializeNodeContainerElements(subnodesList, nodeIndexPath, clientNode);
  this.InitializeNodeSelection();
  if (listItem.requireUpdateCheckedState)
   this.UpdateDescendantsCheckedState(listItem, listItem.checkedState);
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  this.PerformNodeExpand(subnodesList, button);
 },
 HandleExpandButtonClick: function (e) {
  var button = _aspxGetEventSource(e);
  var listItem = _aspxGetParentByTagName(button, "LI");
  this.ProcessUserInitiatedExpandCollapse(button, listItem);
 },
 ProcessUserInitiatedExpandCollapse: function (button, listItem) {
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (contentElement.performingExpandNodeRequest)
   return;
  var expandedChangingResults = this.RaiseExpandedChanging(listItem);
  if (expandedChangingResults.cancel)
   return;
  this.ToggleNodeExpandCollapse(listItem, button, true, expandedChangingResults.processOnServer);
 },
 ToggleNodeExpandCollapse: function (listItem, button, requireRaiseExpandedChanged, processOnServer) {
  var subnodesList = _aspxGetChildByTagName(listItem, "UL", 0);
  var expanding = !subnodesList || subnodesList.style.display == "none";
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (processOnServer) {
   var requestArgs = this.CreatePostRequestArgs(this.RaiseExpandedChangingEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id), this.SerializeBooleanValue(expanding));
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  this.SetExpandedToState(this.GetNodeIDByContentElementID(contentElement.id), expanding);
  if (requireRaiseExpandedChanged)
   this.requireRaiseExpandedChangedList.push(contentElement.id);
  if (subnodesList) {
   if (expanding)
    this.PerformNodeExpand(subnodesList, button);
   else
    this.PerformNodeCollapse(subnodesList, button);
   return;
  }
  contentElement.performingExpandNodeRequest = true;
  this.SendExpandNodePostRequest(contentElement.id, button);
 },
 SendExpandNodePostRequest: function (contentElementID, button) {
  var requestArgs = this.CreatePostRequestArgs(this.ExpandNodeCommand,
   this.GetNodeIDByContentElementID(contentElementID));
  if (this.autoPostBack || !this.callBack) {
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  this.ShowNodeLoadingPanel(button, this.GetNodeIDByContentElementID(contentElementID));
  this.CreateCallback(requestArgs);
 },
 StartExpandCollapseAnimation: function (subnodesList, expanding) {
  var height = subnodesList.offsetHeight;
  if (expanding)
   _aspxSetOffsetHeight(subnodesList, 0);
  ASPxAnimationHelper.createAnimationTransition(subnodesList, {
   animationEngine: "js", 
   property: "height", unit: "px",
   duration: height > 120 ? this.AnimationDuration : this.MinAnimationDuration,
   onComplete: function (el) {
    this.OnCompleteAnimation(el, expanding);
   }.aspxBind(this)
  }).Start(expanding ? 0 : height, expanding ? height : 0);
 },
 OnCompleteAnimation: function (element, expanding) {
  element.style.height = "";
  if (!expanding) {
   _aspxSetElementDisplay(element, false);
   this.CorrectControlWidth();
  }
  this.RaiseExpandedChanged(element);
 },
 ReplaceExpandButtonWithSampleButton: function (button, sampleButton) {
  var newButton = this.ReplaceElementWithSampleElement(button, sampleButton, false);
  var listItem = _aspxGetParentByTagName(newButton, "LI");
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (!_aspxElementCssClassContains(contentElement, this.DisabledCssClassName))
   this.ToggleExpandButtonClickHandler(true, newButton);
  else
   newButton.style.cursor = "default";
 },
 AccomplishExpandCollapse: function (expandButton, sampleButton, subnodesList) {
  if (expandButton)
   this.ReplaceExpandButtonWithSampleButton(expandButton, sampleButton);
  if (!this.enableAnimation)
   this.RaiseExpandedChanged(subnodesList);
 },
 PerformNodeExpand: function (subnodesList, expandButton) {
  _aspxSetElementDisplay(subnodesList, true);
  this.CorrectControlWidth();
  if (this.enableAnimation)
   this.StartExpandCollapseAnimation(subnodesList, true);
  this.AccomplishExpandCollapse(expandButton, this.GetSampleCollapseButton(), subnodesList);
 },
 PerformNodeCollapse: function (subnodesList, expandButton) {
  if (this.enableAnimation)
   this.StartExpandCollapseAnimation(subnodesList, false);
  else {
   _aspxSetElementDisplay(subnodesList, false);
   this.CorrectControlWidth();
  }
  this.AccomplishExpandCollapse(expandButton, this.GetSampleExpandButton(), subnodesList);
 },
 GetNodeExpanded: function (clientNode) {
  if(this.IsRootNode(clientNode))
   return true;
  var expandedState = this.GetExpandedDataFromState();
  var nodeID = this.GetNodeIDByContentElementID(clientNode.contentElementID);
  if (_aspxIsExists(expandedState[nodeID]))
   return !!expandedState[nodeID];
  return false;
 },
 SetNodeExpanded: function (clientNode) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  if(contentElement.performingExpandNodeRequest)
   return;
  var listItem = this.GetNodeListItem(clientNode);
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  var nodeID = this.GetNodeIDByContentElementID(clientNode.contentElementID);
  var expandedState = this.GetExpandedDataFromState();
  if (!button && !_aspxIsExists(expandedState[nodeID]))
   return;
  this.ToggleNodeExpandCollapse(listItem, button, false, false);
 },
 GetNodesState: function() {
  var nodesStateInput = this.GetNodesStateHiddenInput();
  return eval("(" + nodesStateInput.value + ");");
 },
 SaveNodesState: function(state) {
  var nodesStateInput = this.GetNodesStateHiddenInput();
  nodesStateInput.value = state;
  if(this.cookieName) {
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, state);
  }
 },
 AreChildNodesLoaded: function(node) {
  var listItem = this.GetNodeListItem(node);
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  return !button || !!_aspxGetChildByTagName(listItem, "UL", 0);
 },
 RaiseNodeClick: function (contentElement, htmlEvent) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.NodeClickServerEventName);
  if (!this.NodeClick.IsEmpty()) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
   var args = new ASPxClientTreeViewNodeClickEventArgs(processOnServer, clientNode,
    contentElement, htmlEvent);
   this.NodeClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseExpandedChanged: function (subnodesList) {
  if (this.ExpandedChanged.IsEmpty())
   return;
  var listItem = _aspxGetParentByTagName(subnodesList, "LI");
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  var nodeIndex = _aspxArrayIndexOf(this.requireRaiseExpandedChangedList, contentElement.id);
  if (nodeIndex < 0)
   return;
  this.requireRaiseExpandedChangedList.splice(nodeIndex, 1);
  var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  var args = new ASPxClientTreeViewNodeEventArgs(clientNode);
  this.ExpandedChanged.FireEvent(this, args);
 },
 RaiseExpandedChanging: function (listItem) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.ExpandedChangingServerEventName);
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  var args = new ASPxClientTreeViewNodeCancelEventArgs(processOnServer, clientNode);
  if (!this.ExpandedChanging.IsEmpty())
   this.ExpandedChanging.FireEvent(this, args);
  return args;
 },
 RaiseCheckedChanged: function (contentElement) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.CheckedChangedServerEventName);
  if (!this.CheckedChanged.IsEmpty()) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
   var args = new ASPxClientTreeViewNodeProcessingModeEventArgs(processOnServer, clientNode);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetNode: function (index) {
  return this.rootNode.GetNode(index);
 },
 GetNodeByName: function (name) {
  return this.rootNode.GetNodeByName(name);
 },
 GetNodeByText: function (text) {
  return this.rootNode.GetNodeByText(text);
 },
 GetNodeCount: function () {
  return this.rootNode.GetNodeCount();
 },
 GetSelectedNode: function () {
  return this.rootNode.GetNodeByContentElementID(this.selectedNodeContentElementID);
 },
 SetSelectedNode: function (node) {
  if(node && (node.treeView != this || this.IsRootNode(node)) || !this.allowSelectNode)
   return;
  var contentElement = node ? _aspxGetElementById(node.contentElementID) : null;
  var selectedNodeID = contentElement ? this.GetNodeIDByContentElementID(contentElement.id) : "";
  this.SetSelectedNodeIDToState(selectedNodeID);
  this.ApplySelectionToNode(contentElement);
 },
 GetRootNode: function () {
  return this.rootNode;
 },
 IsRootNode: function(clientNode) {
  return clientNode == this.rootNode;
 },
 ExpandCollapseNodesRecursive: function (clientNodes, expand) {
  for (var i = 0; i < clientNodes.length; i++) {
   clientNodes[i].SetExpanded(expand);
   if (clientNodes[i].nodes.length > 0)
    this.ExpandCollapseNodesRecursive(clientNodes[i].nodes, expand);
  }
 },
 CollapseAll: function () {
  if (this.rootNode.nodes.length == 0)
   return;
  this.ExpandCollapseNodesRecursive(this.rootNode.nodes, false);
 },
 ExpandAll: function () {
  if (this.rootNode.nodes.length == 0)
   return;
  var postRequestArgs = this.CreatePostRequestArgs(this.ExpandAllNodesCommand, "");
  if (this.autoPostBack) {
   if (this.isInitialized)
    this.SendPostBack(postRequestArgs);
   return;
  }
  if (this.callBack) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   this.CreateCallback(postRequestArgs);
   return;
  }
  this.ExpandCollapseNodesRecursive(this.rootNode.nodes, true);
 }
});
ASPxClientTreeView.Cast = ASPxClientControl.Cast;
ASPxClientTreeViewNode = _aspxCreateClass(null, {
 constructor: function (treeView, parent, index, name) {
  this.treeView = treeView;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.enabled = true;
  this.clientEnabled = true;
  this.clientVisible = true;
  this.navigateUrl = null;
  this.target = null;
  this.text = null;
  this.imageUrl = null;
  this.nodes = [];
  this.contentElementID = null;
  this.last = false;
 },
 GetNodeCount: function () {
  return this.nodes.length;
 },
 GetNode: function (index) {
  return (index >= 0 && index < this.nodes.length) ? this.nodes[index] : null;
 },
 GetNodeBySelector: function (selector) {
  for (var i = 0; i < this.nodes.length; i++) {
   if (selector(this.nodes[i]))
    return this.nodes[i];
   var foundNode = this.nodes[i].GetNodeBySelector(selector);
   if (foundNode)
    return foundNode;
  }
  return null;
 },
 GetNodeByContentElementID: function (contentElementID) {
  return this.GetNodeBySelector(function (node) { return node.contentElementID == contentElementID; });
 },
 SetCheckState: function (value) {
  this.treeView.SetNodeState(this, value);
 },
 GetNodeByName: function (name) {
  return this.GetNodeBySelector(function (node) { return node.name == name; });
 },
 GetNodeByText: function (text) {
  return this.GetNodeBySelector(function (node) { return node.GetText() == text });
 },
 GetExpanded: function () {
  return this.treeView.GetNodeExpanded(this);
 },
 SetExpanded: function (value) {
  if (this.GetExpanded() == value)
   return;
  this.treeView.SetNodeExpanded(this);
 },
 GetChecked: function () {
  return this.GetCheckState() == ASPxClientCheckBoxCheckState.Checked;
 },
 SetChecked: function (value) {
  this.SetCheckState(value ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
 },
 GetCheckState: function () {
  return this.treeView.GetNodeState(this);
 },
 GetEnabled: function () {
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function (value) {
  this.clientEnabled = value;
  this.treeView.SetNodeClientEnabled(this, this.clientEnabled);
 },
 GetImageUrl: function () {
  return this.imageUrl || "";
 },
 SetImageUrl: function (value) {
  this.imageUrl = value;
  this.treeView.SetNodeImageUrl(this, value);
 },
 GetNavigateUrl: function () {
  return this.treeView.GetNodeNavigateUrl(this);
 },
 SetNavigateUrl: function (value) {
  this.treeView.SetNodeNavigateUrl(this, value);
 },
 GetText: function () {
  var nbspChar = String.fromCharCode(160)
  return this.text ? this.text.replace(new RegExp(nbspChar, "g"), " ") : "";
 },
 SetText: function (value) {
  this.text = value;
  this.treeView.SetNodeText(this, value);
 },
 GetVisible: function () {
  return this.clientVisible;
 },
 SetVisible: function (value) {
  this.clientVisible = value;
  this.treeView.SetNodeClientVisible(this, this.clientVisible);
 },
 GetHtmlElement: function () {
  return _aspxGetElementById(this.contentElementID);
 }
});
ASPxClientTreeViewNodeProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function (processOnServer, node) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.node = node;
 }
});
ASPxClientTreeViewNodeClickEventArgs = _aspxCreateClass(ASPxClientTreeViewNodeProcessingModeEventArgs, {
 constructor: function (processOnServer, node, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer, node);
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientTreeViewNodeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function (node) {
  this.node = node;
 }
});
ASPxClientTreeViewNodeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function (processOnServer, node) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.node = node;
 }
});
MVCxClientTreeView = _aspxCreateClass(ASPxClientTreeView, {
 NodesInfoHiddenInputIDPostfix: "_NIHF",
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  ASPxClientTreeView.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  this.callbackCustomArgs = args.customArgs;
 },
 RaiseEndCallback: function() {
  ASPxClientTreeView.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientTreeView.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientTreeView.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result[2] = resultObj.result[2].replace(MVCx.CallbackHtmlContentPlaceholder, resultStringParts[1]);
   return resultObj;
  }
  return ASPxClientTreeView.prototype.EvalCallbackResult.call(this, resultString);
 },
 GetCallbackParams: function(){
  var params = {};
  var stateInputElements = [ this.GetNodesStateHiddenInput(), this.GetNodesInfoHiddenInput() ];
  for(var i = 0; i < stateInputElements.length; i++){
   var stateInput = stateInputElements[i];
   if (_aspxIsExistsElement(stateInput))
    params[stateInput.name] = stateInput.value;
  }
  return params;
 },
 OnCallback: function (resultObj) {
  ASPxClientTreeView.prototype.OnCallback.call(this, resultObj);
  if(resultObj && resultObj[0] == this.ExpandNodeCommand){
   var nodeInfoElement = this.GetNodesInfoHiddenInput();
   nodeInfoElement.value = resultObj[5];
  }
 },
 GetNodesInfoHiddenInput: function(){
  return _aspxGetElementById(this.name + this.NodesInfoHiddenInputIDPostfix);
 }
});

ASPxClientCallbackPanel = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.touchUIScroller = null;
  this.hideContentOnCallback = true;
  this.isLoadingPanelTextEmpty = false;
 },
 Initialize: function () {
  this.touchUIScroller = ASPxClientTouchUI.makeScrollableIfRequired(this.GetMainElement());
 },
 GetContentElement: function () {
  var element = this.GetMainElement();
  return element.tagName == "TABLE" ? element.rows[0].cells[0] : element;
 },
 OnCallback: function (result) {
  _aspxSetInnerHtml(this.GetContentElement(), result);
  if (this.touchUIScroller)
   this.touchUIScroller.ChangeElement(this.GetMainElement());
 },
 ShowLoadingPanel: function () {
  var element = this.GetContentElement();
  var mainElement = (element.tagName == "TD") ? this.GetMainElement() : element;
  if(!this.hideContentOnCallback)
   this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, mainElement);
  else
   this.CreateLoadingPanelInsideContainer(element, true, true, false);
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetContentElement());
 },
 GetCallbackAnimationElement: function() {
  return this.GetContentElement();
 },
 PerformCallback: function (parameter) {
  this.CreateCallback(parameter);
 },
 CreateCallback: function (arg, command, callbackInfo) {
  this.ShowLoadingElements();
  ASPxClientControl.prototype.CreateCallback.call(this, arg, command);
 },
 GetLoadingPanelTextLabelID: function () {
  return this.name + "_TL";
 },
 GetLoadingPanelTextLabel: function () {
  return _aspxGetElementById(this.GetLoadingPanelTextLabelID());
 },
 GetLoadingPanelText: function () {
  var textLabel = this.GetLoadingPanelTextLabel();
  if(textLabel && !this.isLoadingPanelTextEmpty)
   return textLabel.innerHTML;
  return "";
 },
 SetLoadingPanelText: function (text) {
  this.isLoadingPanelTextEmpty = text == null || text == "";
  var textLabel = this.GetLoadingPanelTextLabel();
  if(textLabel)
   textLabel.innerHTML = this.isLoadingPanelTextEmpty ? "&nbsp;" : text;
 },
 GetContentHtml: function () {
  return this.GetContentElement().innerHTML;
 },
 SetContentHtml: function (html, useAnimation) {
  this.GetContentElement().innerHTML = html;
  if(useAnimation && typeof(ASPxAnimationHelper) != "undefined")
   ASPxAnimationHelper.fadeIn(this.GetContentElement());
 }
});
ASPxClientCallbackPanel.Cast = ASPxClientControl.Cast;
MVCxClientCallbackPanel = _aspxCreateClass(ASPxClientCallbackPanel, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientCallbackPanel.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) }; 
  ASPxClientCallbackPanel.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientCallbackPanel.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientCallbackPanel.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function () { this.callbackCustomArgs = {}; } .aspxBind(this), 0);
  ASPxClientCallbackPanel.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientCallbackPanel.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientCallbackPanel.prototype.EvalCallbackResult.call(this, resultString);
 }
});

var ASPxClientDockPanelBag = _aspxCreateClass(null, {
 constructor: function () {
  this.panels = {};
 },
 RegisterPanel: function (panel) {
  this.panels[panel.panelUID] = panel;
 },
 GetPanelByUID: function (panelUID) {
  return this.panels[panelUID];
 },
 ForEachPanel: function (action) {
  for (var key in this.panels) {
   if (!this.panels.hasOwnProperty(key))
    continue;
   var panel = this.panels[key];
   if(panel.GetMainElement())
    action(this.panels[key]);
  }
 },
 GetPanelList: function () {
  var panelList = [];
  this.ForEachPanel(function (panel) {
   panelList.push(panel);
  });
  return panelList;
 }
});
ASPxClientDockPanelBag.instance = null;
ASPxClientDockPanelBag.Get = function () {
 if (!ASPxClientDockPanelBag.instance)
  ASPxClientDockPanelBag.instance = new ASPxClientDockPanelBag();
 return ASPxClientDockPanelBag.instance;
};
ASPxClientDockManager = _aspxCreateClass(ASPxClientControl, {
 BeforeDockServerEventName: "BeforeDock",
 AfterDockServerEventName: "AfterDock",
 BeforeFloatServerEventName: "BeforeFloat",
 AfterFloatServerEventName: "AfterFloat",
 RaiseBeforeDockEventCommand: "EBD",
 RaiseAfterDockEventCommand: "EAD",
 RaiseBeforeFloatEventCommand: "EBF",
 RaiseAfterFloatEventCommand: "EAF",
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  if (!ASPxClientDockManager.instance)
   ASPxClientDockManager.instance = this;
  this.inPostback = false;
  this.cookieName = '';
  this.clientLayoutState = {};
  this.BeforeDock = new ASPxClientEvent();
  this.AfterDock = new ASPxClientEvent();
  this.BeforeFloat = new ASPxClientEvent();
  this.AfterFloat = new ASPxClientEvent();
  this.StartPanelDragging = new ASPxClientEvent();
  this.EndPanelDragging = new ASPxClientEvent();
  this.PanelClosing = new ASPxClientEvent();
  this.PanelCloseUp = new ASPxClientEvent();
  this.PanelPopUp = new ASPxClientEvent();
  this.PanelShown = new ASPxClientEvent();
  this.PanelResize = new ASPxClientEvent();
 },
 PerformCallback: function (parameter) {
  if (!_aspxIsExists(parameter)) parameter = "";
  this.CreateCallback(parameter);
 },
 SendPostBack: function (params) {
  if (!this.inPostback) {
   this.inPostback = true;
   ASPxClientControl.prototype.SendPostBack.call(this, params);
  }
 },
 UpdatePanelLayoutState: function(panel) {
  this.clientLayoutState[panel.panelUID] = panel.GetLayoutStateObject();
 },
 UpdatePanelsLayoutState: function () {
  var instance = this;
  var panelBag = ASPxClientDockPanelBag.Get();
  panelBag.ForEachPanel(function(panel) {
   instance.UpdatePanelLayoutState(panel);
  });
  if (this.cookieName && this.cookieName !== '') {
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, _aspxToJson(this.clientLayoutState));
  }
 },
 GetBeforeDockPostbackArgs: function (panel, zone) {
  return [
   this.RaiseBeforeDockEventCommand,
   panel.panelUID,
   zone.zoneUID,
   zone.GetPanelAfterPlaceholderVisibleIndex() + 1
  ];
 },
 GetAfterDockPostbackArgs: function (panel, zone) {
  return [
   this.RaiseAfterDockEventCommand,
   panel.panelUID,
   zone.zoneUID
  ];
 },
 GetBeforeFloatPostbackArgs: function (panel, zone) {
  return [
   this.RaiseBeforeFloatEventCommand,
   panel.panelUID,
   zone.zoneUID
  ];
 },
 GetAfterFloatPostbackArgs: function (panel, zone) {
  return [
   this.RaiseAfterFloatEventCommand,
   panel.panelUID,
   zone.zoneUID
  ];
 },
 RaiseBeforeDock: function (panel, zone) {
  var processOnServer = this.IsServerEventAssigned(this.BeforeDockServerEventName);
  var args = new ASPxClientDockManagerProcessingModeCancelEventArgs(processOnServer, panel, zone);
  if (!this.BeforeDock.IsEmpty())
   this.BeforeDock.FireEvent(this, args);
  if (!args.cancel && args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetBeforeDockPostbackArgs(panel, zone);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
  return !args.cancel;
 },
 RaiseAfterDock: function (panel, zone) {
  var processOnServer = this.IsServerEventAssigned(this.AfterDockServerEventName);
  var args = new ASPxClientDockManagerProcessingModeEventArgs(processOnServer, panel, zone);
  if (!this.AfterDock.IsEmpty())
   this.AfterDock.FireEvent(this, args);
  if (args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetAfterDockPostbackArgs(panel, zone);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
 },
 RaiseBeforeFloat: function (panel, zone) {
  var processOnServer = this.IsServerEventAssigned(this.BeforeFloatServerEventName);
  var args = new ASPxClientDockManagerProcessingModeCancelEventArgs(processOnServer, panel, zone);
  if (!this.BeforeFloat.IsEmpty())
   this.BeforeFloat.FireEvent(this, args);
  if (!args.cancel && args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetBeforeFloatPostbackArgs(panel, zone);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
  return !args.cancel;
 },
 RaiseAfterFloat: function (panel, zone) {
  var processOnServer = this.IsServerEventAssigned(this.AfterFloatServerEventName);
  var args = new ASPxClientDockManagerProcessingModeEventArgs(processOnServer, panel, zone);
  if (!this.AfterFloat.IsEmpty())
   this.AfterFloat.FireEvent(this, args);
  if (args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetAfterFloatPostbackArgs(panel, zone);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
 },
 RaiseStartPanelDragging: function (panel) {
  if (!this.StartPanelDragging.IsEmpty())
   this.StartPanelDragging.FireEvent(this, new ASPxClientDockManagerEventArgs(panel));
 },
 RaiseEndPanelDragging: function (panel) {
  if (!this.EndPanelDragging.IsEmpty())
   this.EndPanelDragging.FireEvent(this, new ASPxClientDockManagerEventArgs(panel));
 },
 RaisePanelClosing: function (panel) {
  if (this.PanelClosing.IsEmpty())
   return false;
  var args = new ASPxClientDockManagerCancelEventArgs(panel);
  this.PanelClosing.FireEvent(this, args);
  return args.cancel;
 },
 RaisePanelCloseUp: function (panel) {
  if (!this.PanelCloseUp.IsEmpty())
   this.PanelCloseUp.FireEvent(this, new ASPxClientDockManagerEventArgs(panel));
 },
 RaisePanelPopUp: function (panel) {
  if (!this.PanelPopUp.IsEmpty())
   this.PanelPopUp.FireEvent(this, new ASPxClientDockManagerEventArgs(panel));
 },
 RaisePanelShown: function (panel) {
  if (!this.PanelShown.IsEmpty())
   this.PanelShown.FireEvent(this, new ASPxClientDockManagerEventArgs(panel));
 },
 RaisePanelResize: function (panel) {
  if (!this.PanelResize.IsEmpty())
   this.PanelResize.FireEvent(this, new ASPxClientDockManagerEventArgs(panel));
 },
 GetZoneByUID: function (zoneUID) {
  var zoneBag = ASPxClientDockZoneBag.Get();
  return zoneBag.GetZoneByUID(zoneUID);
 },
 GetPanelByUID: function (panelUID) {
  var panelBag = ASPxClientDockPanelBag.Get();
  return panelBag.GetPanelByUID(panelUID);
 },
 GetPanels: function (filterPredicate) {
  var panelBag = ASPxClientDockPanelBag.Get();
  return _aspxRetrieveByPredicate(panelBag.GetPanelList(), filterPredicate);
 },
 GetZones: function (filterPredicate) {
  var zoneBag = ASPxClientDockZoneBag.Get();
  return _aspxRetrieveByPredicate(zoneBag.GetZoneList(), filterPredicate);
 }
});
ASPxClientDockManager.instance = null;
ASPxClientDockManager.Get = function () {
 return ASPxClientDockManager.instance;
};
ASPxClientDockManager.Cast = ASPxClientControl.Cast;
ASPxClientDockManagerProcessingModeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function (processOnServer, panel, zone) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.panel = panel;
  this.zone = zone;
 }
});
ASPxClientDockManagerProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function (processOnServer, panel, zone) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.panel = panel;
  this.zone = zone;
 }
});
ASPxClientDockManagerEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function (panel) {
  this.constructor.prototype.constructor.call(this);
  this.panel = panel;
 }
});
ASPxClientDockManagerCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function (panel) {
  this.constructor.prototype.constructor.call(this);
  this.panel = panel;
 }
});
MVCxClientDockManager = _aspxCreateClass(ASPxClientDockManager, {
 constructor: function(name) {
  var dockManagerInstance = ASPxClientDockManager.Get();
  if(dockManagerInstance && dockManagerInstance.name == name)
   ASPxClientDockManager.instance = this;
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
  this.constructor.prototype.constructor.call(this, name);
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientDockManager.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function() {
  if(this.callbackUrl != "") {
   this.callBack = function(arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  }
  var panels = ASPxClientDockPanelBag.Get().GetPanelList();
  for(var i = 0; i < panels.length; i++) {
   this.needLoadLayoutState = !!this.clientLayoutState[panels[i].panelUID];
   if(!this.needLoadLayoutState)
    break;
  }
  ASPxClientDockManager.prototype.InlineInitialize.call(this);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientDockManager.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackParams: function() {
  this.UpdatePanelsLayoutState();
  var params = {};
  params["ClientLayoutState"] = _aspxToJson(this.clientLayoutState);
  return params;
 },
 UpdatePanelLayoutState: function(panel) {
  if(!panel.firstShowProcessed && this.needLoadLayoutState) {
   var panelLayoutState = this.clientLayoutState[panel.panelUID];
   if(!panel.GetVisible() || this.IsPanelLayoutStateLoaded(panel))
    return;
   panel.mode = panelLayoutState[1];
   var zoneUID = panelLayoutState[2];
   panel.SetZoneUID(zoneUID);
   var width = parseInt(panelLayoutState[3].replace('px', ''));
   var height = parseInt(panelLayoutState[4].replace('px', ''));
   if(width && panel.widthFixed)
    panel.floatingStateDimensions.width = width;
   if(height && panel.heightFixed)
    panel.floatingStateDimensions.height = height;
   var isVisible = panelLayoutState[0];
   if(!isVisible && zoneUID) {
    var index = panel.DefaultWindowIndex;
    var initRestoredWindowData = panel.GetInitRestoredWindowData(index);
    panel.restoredFloatingStateDimensions = { width: initRestoredWindowData.width, height: initRestoredWindowData.height };
    panel.SetWindowCachedSize(index, width, height);
   }
   panel.SetWindowPos(panel.DefaultWindowIndex, panel.GetMainElement(), panelLayoutState[5], panelLayoutState[6]);
   panel.SetVisibleIndex(panelLayoutState[7]);
   panel.SetVisible(isVisible);
  }
  else
   ASPxClientDockManager.prototype.UpdatePanelLayoutState.call(this, panel);
 },
 IsPanelLayoutStateLoaded: function(panel) {
  var panelLayoutState = this.clientLayoutState[panel.panelUID];
  return !this.needLoadLayoutState || panel.GetLayoutStateObject().toString() == panelLayoutState.toString().replace('px', '');
 },
 UpdatePanelsLayoutState: function() {
  var instance = this;
  var panelBag = ASPxClientDockPanelBag.Get();
  var layoutStateLoaded = true;
  panelBag.ForEachPanel(function(panel) {
   instance.UpdatePanelLayoutState(panel);
   layoutStateLoaded &= instance.IsPanelLayoutStateLoaded(panel);
  });
  this.needLoadLayoutState = !layoutStateLoaded;
  if(this.cookieName && this.cookieName !== '') {
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, _aspxToJson(this.clientLayoutState));
  }
 }
});
var ASPxClientDockZoneBag = _aspxCreateClass(null, {
 constructor: function () {
  this.zones = {};
  var instance = this;
  _aspxAttachEventToElement(window, 'resize', function () {
   if (__aspxIE && __aspxBrowserVersion > 6 && __aspxBrowserVersion < 9) {
    if (ASPxClientControl.GetControlCollection().BrowserWindowSizeChanged())
     instance.AdjustZones();
   } else
    instance.AdjustZones();
  });
 },
 ForEachZone: function (action) {
  for (var key in this.zones) {
   if (!this.zones.hasOwnProperty(key))
    continue;
   action(this.zones[key]);
  }
 },
 RegisterZone: function (zone) {
  this.zones[zone.zoneUID] = zone;
 },
 AdjustZones: function () {
  this.ForEachZone(function (zone) {
   zone.AdjustControl();
  });
 },
 GetZoneByUID: function (zoneUID) {
  return this.zones[zoneUID];
 },
 GetZoneList: function () {
  var zoneList = [];
  this.ForEachZone(function (zone) {
   if(zone.GetMainElement())
    zoneList.push(zone);
  });
  return zoneList;
 }
});
ASPxClientDockZoneBag.instance = null;
ASPxClientDockZoneBag.Get = function () {
 if (!ASPxClientDockZoneBag.instance)
  ASPxClientDockZoneBag.instance = new ASPxClientDockZoneBag();
 return ASPxClientDockZoneBag.instance;
};
ASPxClientDockZone = _aspxCreateClass(ASPxClientControl, {
 HorizontalOrientationCssClassName: 'dxdzControlHor',
 FillOrientationCssClassName: 'dxdzControlFill',
 PanelPlaceHolderCssClassName: 'dxdz-pnlPlcHolder',
 StyleSheetIDPostfix: '_SS',
 DefaultHorizontalOrientationWidth: 400,
 DefaultHorizontalOrientationHeight: 200,
 DefaultVerticalOrientationWidth: 200,
 DefaultVerticalOrientationHeight: 400,
 DefaultFillOrientationWidth: 400,
 DefaultFillOrientationHeight: 400,
 BeforeDockServerEventName: "BeforeDock",
 AfterDockServerEventName: "AfterDock",
 RaiseBeforeDockEventCommand: "EBD",
 RaiseAfterDockEventCommand: "EAD",
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.zoneUID = null;
  this.allowGrow = true;
  this.panelSpacing = 0;
  if(this.IsFillOrientation()) {
   this.initialWidth = this.DefaultFillOrientationWidth;
   this.initialHeight = this.DefaultFillOrientationHeight;
  } else {
   var isHorizontal = this.IsHorizontalOrientation();
   this.initialWidth = isHorizontal ? this.DefaultHorizontalOrientationWidth : this.DefaultVerticalOrientationWidth;
   this.initialHeight = isHorizontal ? this.DefaultHorizontalOrientationHeight : this.DefaultVerticalOrientationHeight;
  }
  this.inPostback = false;
  this.initialStyleDimensions = {
   width: '',
   height: ''
  };
  this.dockedPanels = {};
  this.zoneStyleSheet = _aspxGetCurrentStyleSheet();
  this.dockingAllowedClassName = '';
  this.dockingForbiddenClassName = '';
  this.BeforeDock = new ASPxClientEvent();
  this.AfterDock = new ASPxClientEvent();
 },
 SendPostBack: function(params) {
  if(!this.inPostback) {
   this.inPostback = true;
   ASPxClientControl.prototype.SendPostBack.call(this, params);
  }
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  var panelPlaceholder = this.GetPanelPlaceholder();
  _aspxSetElementDisplay(panelPlaceholder, false);
  var mainElement = this.GetMainElement();
  this.initialStyleDimensions.width = mainElement.style.width;
  this.initialStyleDimensions.height = mainElement.style.height;
  ASPxClientDockZoneBag.Get().RegisterZone(this);
 },
 AdjustControlCore: function() {
  var mainElement = this.GetMainElement();
  var instance = this;
  mainElement.style.overflow = 'hidden';
  if(this.IsHorizontalOrientation() || this.IsFillOrientation()) {
   if(this.IsPercentageWidth())
    this.CorrectWidthOnAdjust();
   if(this.IsPercentageHeigth()) {
    this.initialHeight = mainElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
    this.ForEachDockedPanel(function(panel) {
     panel.UpdateRestoredWindowSizeLock();
     panel.SetHeightInternal(instance.initialHeight);
     panel.UpdateRestoredWindowSizeUnlock();
    });
   }
  }
  if(!this.IsHorizontalOrientation() || this.IsFillOrientation()) {
   if(this.IsPercentageHeigth())
    this.CorrectHeightOnAdjust();
   if(this.IsPercentageWidth()) {
    this.initialWidth = mainElement.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
    this.ForEachDockedPanel(function(panel) {
     panel.UpdateRestoredWindowSizeLock();
     panel.SetWidthInternal(instance.initialWidth);
     panel.UpdateRestoredWindowSizeUnlock();
    });
   }
  }
  mainElement.style.overflow = '';
 },
 CorrectWidthOnAdjust: function() {
  var mainElement = this.GetMainElement();
  this.initialWidth = 0;
  this.CorrectWidth();
  var contentWidth = _aspxGetClearClientWidth(mainElement);
  mainElement.style.width = this.initialStyleDimensions.width;
  var percentageWidth = _aspxGetClearClientWidth(mainElement);
  if(contentWidth > percentageWidth)
   mainElement.style.width = contentWidth + 'px';
  else
   this.initialWidth = percentageWidth;
 },
 CorrectHeightOnAdjust: function() {
  var mainElement = this.GetMainElement();
  this.initialHeight = 0;
  this.CorrectHeight();
  var contentHeight = _aspxGetClearClientHeight(mainElement);
  mainElement.style.height = this.initialStyleDimensions.height;
  var percentageHeight = _aspxGetClearClientHeight(mainElement);
  if(contentHeight > percentageHeight)
   mainElement.style.height = contentHeight + 'px';
  else
   this.initialHeight = percentageHeight;
 },
 IsPercentageWidth: function() {
  return _aspxIsPercentageSize(this.initialStyleDimensions.width);
 },
 IsPercentageHeigth: function() {
  return _aspxIsPercentageSize(this.initialStyleDimensions.height);
 },
 IsCursorInsideZone: function(cursorPos) {
  var mainElement = this.GetMainElement();
  var width = mainElement.offsetWidth;
  var height = mainElement.offsetHeight;
  var x = _aspxGetAbsoluteX(mainElement);
  var y = _aspxGetAbsoluteY(mainElement);
  var bordersAndPaddingsValues = this.GetBordersAndPaddingsValues();
  var bounds = {
   left: x + bordersAndPaddingsValues.left,
   top: y + bordersAndPaddingsValues.top,
   right: x + width - bordersAndPaddingsValues.right,
   bottom: y + height - bordersAndPaddingsValues.bottom
  };
  return cursorPos.x >= bounds.left && cursorPos.x <= bounds.right &&
   cursorPos.y >= bounds.top && cursorPos.y <= bounds.bottom;
 },
 GetBordersAndPaddingsValues: function() {
  var mainElement = this.GetMainElement();
  var currentStyle = _aspxGetCurrentStyle(mainElement);
  var leftValue = _aspxPxToInt(currentStyle.paddingLeft);
  if(currentStyle.borderLeftStyle != "none")
   leftValue += _aspxPxToInt(currentStyle.borderLeftWidth);
  var topValue = _aspxPxToInt(currentStyle.paddingTop);
  if(currentStyle.borderTopStyle != "none")
   topValue += _aspxPxToInt(currentStyle.borderTopWidth);
  var rightValue = _aspxPxToInt(currentStyle.paddingRight);
  if(currentStyle.borderRightStyle != "none")
   rightValue += _aspxPxToInt(currentStyle.borderRightWidth);
  var bottomValue = _aspxPxToInt(currentStyle.paddingBottom);
  if(currentStyle.borderBottomStyle != "none")
   bottomValue += _aspxPxToInt(currentStyle.borderBottomWidth);
  return { left: leftValue, top: topValue, right: rightValue, bottom: bottomValue };
 },
 IsHorizontalOrientation: function() {
  var mainElement = this.GetMainElement();
  return _aspxElementHasCssClass(mainElement, this.HorizontalOrientationCssClassName);
 },
 IsFillOrientation: function() {
  var mainElement = this.GetMainElement();
  return _aspxElementHasCssClass(mainElement, this.FillOrientationCssClassName);
 },
 GetDockedPanelsSummaryHeight: function() {
  var dockedPanelsSummaryHeight = 0;
  this.ForEachDockedPanel(function(panel) {
   if(!panel.IsVisible())
    return;
   var panelMainElement = panel.GetMainElement();
   dockedPanelsSummaryHeight += panel.GetHeight() + _aspxPxToInt(panelMainElement.style.marginTop);
  });
  return dockedPanelsSummaryHeight;
 },
 GetDockedPanelsSummaryWidth: function() {
  var dockedPanelsSummaryWidth = 0;
  this.ForEachDockedPanel(function(panel) {
   if(!panel.IsVisible())
    return;
   var panelMainElement = panel.GetMainElement();
   dockedPanelsSummaryWidth += panel.GetWidth() + _aspxPxToInt(panelMainElement.style.marginLeft);
  });
  return dockedPanelsSummaryWidth;
 },
 CorrectHeight: function() {
  var height = this.GetDockedPanelsSummaryHeight();
  var panelPlaceholder = this.GetPanelPlaceholder();
  var mainElement = this.GetMainElement();
  if(_aspxGetElementDisplay(panelPlaceholder))
   height += panelPlaceholder.offsetHeight + _aspxPxToInt(panelPlaceholder.style.marginTop);
  height = Math.max(height, this.initialHeight);
  mainElement.style.height = height + 'px';
 },
 CorrectWidth: function() {
  var width = this.GetDockedPanelsSummaryWidth();
  var panelPlaceholder = this.GetPanelPlaceholder();
  var mainElement = this.GetMainElement();
  if(_aspxGetElementDisplay(panelPlaceholder))
   width += panelPlaceholder.offsetWidth + _aspxPxToInt(panelPlaceholder.style.marginLeft);
  width = Math.max(width, this.initialWidth);
  mainElement.style.width = width + 'px';
 },
 CorrectResizableDimension: function() {
  if(!this.allowGrow)
   return;
  this.CorrectResizableDimensionCore();
 },
 CorrectResizableDimensionCore: function() {
  if(this.IsHorizontalOrientation())
   this.CorrectWidth();
  else
   this.CorrectHeight();
 },
 GetPanelPlaceholder: function() {
  return _aspxGetChildNodesByClassName(this.GetMainElement(), this.PanelPlaceHolderCssClassName)[0];
 },
 GetPanelPlaceholderPositionForElement: function(element) {
  var placeholder = this.GetPanelPlaceholder();
  return {
   x: _aspxPrepareClientPosForElement(_aspxGetAbsoluteX(placeholder), element, true),
   y: _aspxPrepareClientPosForElement(_aspxGetAbsoluteY(placeholder), element, false)
  };
 },
 MovePanelPlaceholder: function(cursorPos) {
  var cursorOverPanelLocation = null;
  var mainElement = this.GetMainElement();
  var panelPlaceholder = this.GetPanelPlaceholder();
  var isHorizontal = this.IsHorizontalOrientation();
  for(var key in this.dockedPanels) {
   if(!this.dockedPanels.hasOwnProperty(key))
    continue;
   var panel = this.dockedPanels[key];
   cursorOverPanelLocation = panel.GetCursorOverPanelLocation(cursorPos, this.panelSpacing, isHorizontal);
   if(cursorOverPanelLocation === 'top' || cursorOverPanelLocation === 'left') {
    mainElement.insertBefore(panelPlaceholder, panel.GetMainElement());
    this.ApplyPanelSpacing();
    return;
   }
   if(cursorOverPanelLocation === 'bottom' || cursorOverPanelLocation === 'right') {
    var panelElementSibling = panel.GetMainElement().nextSibling;
    mainElement.insertBefore(panelPlaceholder, panelElementSibling);
    this.ApplyPanelSpacing();
    return;
   }
  }
  if(panelPlaceholder.style.display === 'none') {
   mainElement.appendChild(panelPlaceholder);
   this.ApplyPanelSpacing();
  }
 },
 MovePanelPlaceholderToPanel: function(panel) {
  var panelPlaceholder = this.GetPanelPlaceholder();
  var mainElement = this.GetMainElement();
  var panelMainElement = panel.GetMainElement();
  mainElement.insertBefore(panelPlaceholder, panelMainElement.nextSibling);
 },
 ShowPanelPlaceholder: function(panel) {
  var panelPlaceholder = this.GetPanelPlaceholder();
  var isHorizontal = this.IsHorizontalOrientation();
  var isFill = this.IsFillOrientation();
  var panelDockedDimensions = null;
  var canDockPanel = panel.mode != 'Float' && !panel.freezed && !panel.IsZoneForbidden(this);
  if(isFill) {
   panelDockedDimensions = { width: this.initialWidth, height: this.initialHeight };
   canDockPanel &= this.CanDockPanel();   
  } else {
   var zoneResizableDimension = isHorizontal ? this.initialHeight : this.initialWidth;
   panelDockedDimensions = panel.GetDockedDimensions(zoneResizableDimension, isHorizontal);
   canDockPanel &= this.CanDockPanel(isHorizontal ? panelDockedDimensions.width : panelDockedDimensions.height);
  }
  if(canDockPanel) {
   var panelPlaceholderWidth = panelDockedDimensions.width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(panelPlaceholder);
   var panelPlaceholderHeight = panelDockedDimensions.height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(panelPlaceholder);
   if(__aspxIE && __aspxBrowserVersion < 8 && !isHorizontal) {
    var contentElement = panel.GetWindowContentElement(panel.DefaultWindowIndex);
    var currentStyle = _aspxGetCurrentStyle(contentElement);
    panelPlaceholderHeight -= _aspxPxToInt(currentStyle.borderLeftWidth) +
     _aspxPxToInt(currentStyle.borderRightWidth);
   }
   _aspxSetStyles(panelPlaceholder, {
    width: panelPlaceholderWidth,
    height: panelPlaceholderHeight,
    display: ""
   });
   if(!isFill)
    this.ApplyPanelSpacing();
   this.CorrectResizableDimension();
   this.AdjustControlCore();
  }
 },
 HidePanelPlaceholder: function() {
  var panelPlaceholder = this.GetPanelPlaceholder();
  _aspxSetElementDisplay(panelPlaceholder, false);
  this.ApplyPanelSpacing();
  this.CorrectResizableDimension();
  this.AdjustControlCore();
 },
 ForEachDockedPanel: function(action) {
  for(var key in this.dockedPanels) {
   if(!this.dockedPanels.hasOwnProperty(key))
    continue;
   action(this.dockedPanels[key]);
  }
 },
 DockPanel: function(panel, dockedDimensions, considerVisibleIndex) {
  var isHorizontal = this.IsHorizontalOrientation();
  panel.ResizeForDock(dockedDimensions);
  this.HidePanelPlaceholder();
  this.ConsumePanelElement(panel, considerVisibleIndex);
  this.ApplyPanelSpacing();
  this.dockedPanels[panel.panelUID] = panel;
  panel.SetZoneUID(this.zoneUID);
  if(!considerVisibleIndex)
   this.UpdatePanelsVisibleIndices();
  this.CorrectResizableDimension();
 },
 ConsumePanelElement: function(panel, considerVisibleIndex) {
  var mainElement = this.GetMainElement();
  var panelMainElement = panel.GetMainElement()
  if(!considerVisibleIndex) {
   var panelPlaceholder = this.GetPanelPlaceholder();
   mainElement.insertBefore(panelMainElement, panelPlaceholder);
   return;
  }
  var nextPanel = null;
  var visibleIndex = panel.GetVisibleIndex();
  this.ForEachDockedPanel(function(dockedPanel) {
   var dockedPanelVisibleIndex = dockedPanel.GetVisibleIndex();
   if(!dockedPanel.IsVisible() && dockedPanelVisibleIndex === visibleIndex)
    return;
   if(dockedPanelVisibleIndex > visibleIndex) {
    if(nextPanel && nextPanel.GetVisibleIndex() <= dockedPanelVisibleIndex)
     return;
    nextPanel = dockedPanel;
   }
  });
  var insertBeforeNode = null;
  if(nextPanel)
   insertBeforeNode = nextPanel.GetMainElement();
  mainElement.insertBefore(panelMainElement, insertBeforeNode);
 },
 CanDockPanel: function(resizableDimension) {
  if(this.IsFillOrientation())
   return !this.HasDockedPanels();
  if(this.allowGrow)
   return true;
  var panelPlaceholder = this.GetPanelPlaceholder();
  var spacing = 0;
  if(panelPlaceholder.prevSibling && panelPlaceholder.prevSibling.nodeType === 1)
   spacing = this.panelSpacing;
  if(this.IsHorizontalOrientation())
   return this.GetDockedPanelsSummaryWidth() + resizableDimension + spacing <= this.initialWidth;
  return this.GetDockedPanelsSummaryHeight() + resizableDimension + spacing <= this.initialHeight;
 },
 UpdatePanelsVisibleIndices: function() {
  var zoneChildElements = this.GetMainElement().childNodes;
  var index = 0;
  for(var i = 0; i < zoneChildElements.length; i++) {
   if(zoneChildElements[i].panelUID) {
    var panel = this.dockedPanels[zoneChildElements[i].panelUID];
    if(!panel.IsVisible())
     continue;
    panel.SetVisibleIndexCore(index);
    index++;
   }
  }
 },
 GetDockedPanelsMaxVisibleIndex: function() {
  var maxIndex = 0;
  this.ForEachDockedPanel(function(panel) {
   maxIndex = Math.max(panel.GetVisibleIndex(), maxIndex);
  });
  return maxIndex;
 },
 GetPanelAfterPlaceholderVisibleIndex: function() {
  var placeholder = this.GetPanelPlaceholder();
  var sibling = placeholder.previousSibling;
  while(sibling) {
   if(sibling.panelUID) {
    var panel = this.dockedPanels[sibling.panelUID];
    if(panel.IsVisible())
     return panel.GetVisibleIndex();
   }
   sibling = sibling.previousSibling;
  }
  return -1;
 },
 GetOrderedPanelsList: function(startFromPanel) {
  var panels = [];
  var mainElement = this.GetMainElement();
  var element = startFromPanel ? startFromPanel.GetMainElement() : mainElement.firstChild;
  while(element) {
   if(element.panelUID) {
    var panel = this.dockedPanels[element.panelUID];
    if(panel)
     panels.push(panel);
   }
   element = element.nextSibling;
  }
  return panels;
 },
 FixatePanels: function(startFromPanel) {
  var mainElement = this.GetMainElement();
  mainElement.style.position = 'relative';
  mainElement.style.top = 0;
  mainElement.style.left = 0;
  var panels = this.GetOrderedPanelsList(startFromPanel);
  for(var i = panels.length - 1; i >= 0; i--)
   panels[i].Fixate();
 },
 RemovePanelsFixation: function() {
  var panels = this.GetOrderedPanelsList();
  for(var i = 0; i < panels.length; i++)
   panels[i].RemoveFixation();
  var mainElement = this.GetMainElement();
  mainElement.style.position = 'static';
 },
 UndockPanel: function(panel) {
  delete this.dockedPanels[panel.panelUID];
  panel.SetZoneUID(null);
  this.RemovePanelSpacing(panel.GetMainElement());
  this.UpdatePanelsVisibleIndices();
  this.ApplyPanelSpacing();
 },
 HasDockedPanels: function() {
  for(var key in this.dockedPanels) {
   if(this.dockedPanels.hasOwnProperty(key))
    return true;
  }
  return false;
 },
 ApplyPanelSpacing: function() {
  if(!this.panelSpacing)
   return;
  var mainElement = this.GetMainElement();
  var instance = this;
  var elements = _aspxGetElementNodesByPredicate(mainElement, function(element) {
   var isPlaceholder = _aspxElementHasCssClass(element, instance.PanelPlaceHolderCssClassName);
   return (element.panelUID || isPlaceholder) && _aspxGetElementDisplay(element);
  });
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   this.RemovePanelSpacing(element);
   if(i > 0) {
    if(this.IsHorizontalOrientation())
     element.style.marginLeft = this.panelSpacing + 'px';
    else
     element.style.marginTop = this.panelSpacing + 'px';
   }
  }
 },
 RemovePanelSpacing: function(panelMainElement) {
  panelMainElement.style.marginTop = '';
  panelMainElement.style.marginLeft = '';
 },
 CreateClientCssStyles: function(stylesObj) {
  this.dockingForbiddenClassName = this.CreateClientCssStyle(stylesObj.dfs);
  this.dockingAllowedClassName = this.CreateClientCssStyle(stylesObj.das);
 },
 CreateClientCssStyle: function(style) {
  if(!style)
   return '';
  var result = style.className;
  if(style.inlineStyle)
   result += " " + _aspxCreateImportantStyleRule(this.zoneStyleSheet, style.inlineStyle);
  return _aspxTrim(result);
 },
 ApplyDockingAllowedStyle: function() {
  this.ApplyZoneCssClass(this.dockingAllowedClassName);
 },
 RemoveDockingAllowedStyle: function() {
  this.RemoveZoneCssClass(this.dockingAllowedClassName);
 },
 ApplyDockingForbiddenStyle: function() {
  this.ApplyZoneCssClass(this.dockingForbiddenClassName);
 },
 RemoveDockingForbiddenStyle: function() {
  this.RemoveZoneCssClass(this.dockingForbiddenClassName);
 },
 ApplyZoneCssClass: function(cssClassName) {
  var mainElement = this.GetMainElement();
  var tempClassName = mainElement.className.replace(cssClassName, "");
  mainElement.className = _aspxTrim(tempClassName + " " + cssClassName);
 },
 RemoveZoneCssClass: function(cssClassName) {
  var mainElement = this.GetMainElement();
  mainElement.className = mainElement.className.replace(cssClassName, ""); ;
 },
 GetBeforeDockPostbackArgs: function(panel) {
  return [
   this.RaiseBeforeDockEventCommand,
   panel.panelUID,
   this.GetPanelAfterPlaceholderVisibleIndex() + 1
  ];
 },
 GetAfterDockPostbackArgs: function(panel) {
  return [
   this.RaiseAfterDockEventCommand,
   panel.panelUID
  ];
 },
 RaiseBeforeDock: function(panel) {
  var processOnServer = this.IsServerEventAssigned(this.BeforeDockServerEventName);
  var args = new ASPxClientDockZoneCancelEventArgs(processOnServer, panel);
  if(!this.BeforeDock.IsEmpty())
   this.BeforeDock.FireEvent(this, args);
  if(!args.cancel && args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetBeforeDockPostbackArgs(panel);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
  return !args.cancel;
 },
 RaiseAfterDock: function(panel) {
  var processOnServer = this.IsServerEventAssigned(this.AfterDockServerEventName);
  var args = new ASPxClientDockZoneProcessingModeEventArgs(processOnServer, panel);
  if(!this.AfterDock.IsEmpty())
   this.AfterDock.FireEvent(this, args);
  if(args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetAfterDockPostbackArgs(panel);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
 },
 SetWidth: function(width) {
  var mainElement = this.GetMainElement();
  var actualWidth = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
  this.initialWidth = actualWidth;
  mainElement.style.width = actualWidth + "px";
  if(!this.IsHorizontalOrientation())
   this.ForEachDockedPanel(function(panel) { panel.SetWidthInternal(actualWidth) });
 },
 SetHeight: function(height) {
  var mainElement = this.GetMainElement();
  var actualHeight = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  this.initialHeight = actualHeight;
  mainElement.style.height = actualHeight + "px";
  if(this.IsHorizontalOrientation())
   this.ForEachDockedPanel(function(panel) { panel.SetHeightInternal(actualHeight) });
 },
 IsVertical: function() {
  return !this.IsHorizontalOrientation();
 },
 GetAllowGrowing: function() {
  return this.allowGrow;
 },
 GetPanelCount: function() {
  return this.GetOrderedPanelsList().length;
 },
 GetPanelByUID: function(panelUID) {
  var panels = this.GetOrderedPanelsList();
  for(var i = 0; i < panels.length; i++) {
   if(panels[i].panelUID === panelUID)
    return panels[i];
  }
  return null;
 },
 GetPanelByVisibleIndex: function(visibleIndex) {
  this.UpdatePanelsVisibleIndices();
  var panels = this.GetOrderedPanelsList();
  return panels[visibleIndex];
 },
 GetPanels: function(filterPredicate) {
  var panels = this.GetOrderedPanelsList();
  return _aspxRetrieveByPredicate(panels, filterPredicate);
 }
});
ASPxClientDockZone.Cast = ASPxClientControl.Cast;
ASPxClientDockZoneCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function (processOnServer, panel) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.panel = panel;
 }
});
ASPxClientDockZoneProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function (processOnServer, panel) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.panel = panel;
 }
});

ASPxDockPanelStateObserver = _aspxCreateClass(null, {
 constructor: function (observedPanel) {
  this.panel = observedPanel;
  this.trackState = true;
  this.previousState = {
   zone: null
  };
  this.currentState = {
   zone: this.panel.zone
  };
 },
 UpdateState: function () {
  if (!this.trackState)
   return;
  this.previousState = this.currentState;
  this.currentState = {
   zone: this.panel.zone
  }
 },
 IsBeingDocked: function () {
  return this.currentState.zone && this.previousState.zone != this.currentState.zone;
 },
 IsBeingFloated: function () {
  return this.previousState.zone && !this.currentState.zone;
 }
});
ASPxClientDockPanel = _aspxCreateClass(ASPxClientPopupControl, {
 DefaultWindowIndex: -1,
 AnimationDelay: 30,
 MaxAnimationTime: 400,
 AnimationOffset: 20,
 UndockOnDoubleClickOffset: 5,
 StateHiddenInputIDPostfix: '_SHF',
 BeforeDockServerEventName: "BeforeDock",
 AfterDockServerEventName: "AfterDock",
 BeforeFloatServerEventName: "BeforeFloat",
 AfterFloatServerEventName: "AfterFloat",
 RaiseBeforeDockEventCommand: "EBD",
 RaiseAfterDockEventCommand: "EAD",
 RaiseBeforeFloatEventCommand: "EBF",
 RaiseAfterFloatEventCommand: "EAF",
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.panelUID = null;
  this.forbiddenZones = [];
  this.mode = 'All';
  this.requireFreezingLayout = false;
  this.zone = null;
  this.initialParentNode = null;
  this.trackDimensions = true;
  this.allowCorrectYOffsetPosition = false;
  this.fixated = false;
  this.initialShadowVisible = false;
  this.freezed = false;
  this.allowEnsureContent = true;
  this.firstShowProcessed = false;
  this.floatingState = true;
  this.updateDimensionsOnFloatingState = false;
  this.completeSwitchingToFloatingStateOnCallback = false;
  this.floatingStateAllowResize = false;
  this.floatingStateEnableContentScrolling = false;
  this.animationLocked = false;
  this.inUndockedState = false;
  this.contentFlexibilityEnabled = false;
  this.widthFixed = false;
  this.heightFixed = false;
  this.inPostback = false;
  this.dockRestorePanelData = null;
  this.dockedDimensionsCalculating = false;
  this.floatingStateDimensions = {
   width: 0,
   height: 0,
   minWidth: 0,
   minHeight: 0,
   maxWidth: 0,
   maxHeight: 0
  };
  this.floatingStateContentOverflow = {
   x: 'visible',
   y: 'visible',
   both: 'visible'
  };
  this.stateObserver = new ASPxDockPanelStateObserver(this);
  this.BeforeDock = new ASPxClientEvent();
  this.AfterDock = new ASPxClientEvent();
  this.BeforeFloat = new ASPxClientEvent();
  this.AfterFloat = new ASPxClientEvent();
  this.StartDragging = new ASPxClientEvent();
  this.EndDragging = new ASPxClientEvent();
 },
 SendPostBack: function(params) {
  if(!this.inPostback) {
   this.inPostback = true;
   ASPxClientControl.prototype.SendPostBack.call(this, params);
  }
 },
 GetMainElement: function() {
  return this.GetWindowElement(this.DefaultWindowIndex);
 },
 GetContentScrollbarsOwner: function() {
  return this.GetWindowContentElement(this.DefaultWindowIndex);
 },
 InlineInitialize: function() {
  ASPxClientPopupControl.prototype.InlineInitialize.call(this);
  var mainElement = this.GetMainElement();
  this.initialParentNode = mainElement.parentNode;
  mainElement.panelUID = this.panelUID;
  this.widthFixed = this.width > 0;
  this.heightFixed = this.height > 0;
  ASPxClientDockPanelBag.Get().RegisterPanel(this);
 },
 Initialize: function() {
  ASPxClientPopupControl.prototype.Initialize.call(this);
  this.AfterResizing.AddHandler(function(s, e) {
   s.StoreFloatingStateDimensions();
  });
  this.StartDragging.AddHandler(function (s, e) {
   var storedTrackDimensions = s.trackDimensions;
   s.trackDimensions = true;
   s.StoreFloatingStateDimensions();
   s.trackDimensions = storedTrackDimensions;
  });
  this.Shown.AddHandler(function(s, e) {
   s.UpdateManagerClientLayoutState();
  });
  this.CloseUp.AddHandler(function(s, e) {
   s.UpdateManagerClientLayoutState();
  });
  if(this.allowDragging)
   this.AssignDoubleClickEventHandlers();
 },
 InitializeWindow: function(index) {
  ASPxClientPopupControl.prototype.InitializeWindow.call(this, index);
  if (!this.GetShowOnPageLoad(index) && this.GetZoneUID()) {
   var savedShown = this.Shown,
    savedCloseUp = this.CloseUp,
    savedClosing = this.Closing,
    eventStub = new ASPxClientEvent();
   this.Shown = eventStub;
   this.CloseUp = eventStub;
   this.Closing = eventStub;
   this.allowEnsureContent = false;
   this.FirstShowWindow(index, false);
   this.Hide();
   this.allowEnsureContent = true;
   this.Shown = savedShown;
   this.CloseUp = savedCloseUp;
   this.Closing = savedClosing;
  }
 },
 AssignDoubleClickEventHandlers: function() {
  if(this.isWindowDragging) {
   var mainElement = this.GetMainElement();
   _aspxAttachEventToElement(mainElement, 'dblclick', this.GetDoubleClickHandler());
  } else {
   var header = this.GetWindowHeaderElement(this.DefaultWindowIndex);
   if(header)
    _aspxAttachEventToElement(header, 'dblclick', this.GetDoubleClickHandler());
  }
 },
 GetDoubleClickHandler: function() {
  var headerBtns = [
   this.GetWindowCloseButton(this.DefaultWindowIndex),
   this.GetWindowPinButton(this.DefaultWindowIndex),
   this.GetWindowRefreshButton(this.DefaultWindowIndex),
   this.GetWindowCollapseButton(this.DefaultWindowIndex),
   this.GetWindowMaximizeButton(this.DefaultWindowIndex)
  ];
  var instance = this;
  return function(evt) {
   var source = _aspxGetEventSource(evt);
   for(var i = 0; i < headerBtns.length; i++) {
    if(headerBtns[i] && _aspxGetIsParent(headerBtns[i], source))
     return;
   }
   instance.ProcessMouseDoubleClick();
  }
 },
 StoreInitialSettings: function() {
  var contentCurrentStyle = _aspxGetCurrentStyle(this.GetContentScrollbarsOwner());
  this.floatingStateContentOverflow.x = contentCurrentStyle.overflowX;
  this.floatingStateContentOverflow.y = contentCurrentStyle.overflowY;
  this.floatingStateContentOverflow.both = contentCurrentStyle.overflow;
  this.floatingStateDimensions.minWidth = this.minWidth;
  this.floatingStateDimensions.minHeight = this.minHeight;
  this.floatingStateDimensions.maxWidth = this.maxWidth;
  this.floatingStateDimensions.maxHeight = this.maxHeight;
  this.floatingStateAllowResize = this.allowResize;
  this.floatingStateEnableContentScrolling = this.enableContentScrolling;
  this.initialShadowVisible = this.shadowVisible;
 },
 SetPanelElementsVisibility: function(visible) {
  var elements = [
   this.GetWindowHeaderElement(this.DefaultWindowIndex),
   this.GetWindowContentElement(this.DefaultWindowIndex),
   this.GetWindowFooterElement(this.DefaultWindowIndex)
  ];
  for(var i = 0; i < elements.length; i++) {
   if(elements[i])
    _aspxSetElementVisibility(elements[i], visible);
  }
 },
 GetIsDragged: function() {
  return true;
 },
 FirstShowWindow: function(index, allowChangeZIndex) {
  ASPxClientPopupControl.prototype.FirstShowWindow.call(this, index, allowChangeZIndex);
  this.SetPanelElementsVisibility(false);
  var iFrame = _aspxGetChildByTagName(this.GetMainElement(), 'IFRAME', 0);
  if(iFrame) {
   var instance = this;
   aspxGetControlCollection().ControlsInitialized.AddHandler(function() {
    window.setTimeout(function() {
     instance.ProcessFirstShowWindow();
    }, 0);
   });
  }
  else
   this.ProcessFirstShowWindow();
 },
 ProcessFirstShowWindow: function() {
  if(this.firstShowProcessed)
   return;
  this.StoreInitialSettings();
  if(this.GetIsCollapsed() || this.GetIsMaximized()) {
   var restoredWindowData = this.GetRestoredWindowData();
   this.StoreFloatingStateDimensionsCore(restoredWindowData.width, restoredWindowData.height);
   this.UpdateManagerClientLayoutState();
  } else
   this.StoreFloatingStateDimensions();
  this.DockOnFirstShow();
  if(this.requireFreezingLayout) {
   this.freezed = true;
   if(this.zone)
    this.DisableDragging();
  }
  this.SetPanelElementsVisibility(true);
  this.SetLastFloatState();
  this.firstShowProcessed = true;
 },
 ProcessMouseDoubleClick: function() {
  if(this.zone && !this.floatingState && this.mode != 'DockedOnly') {
   if(!this.GetLastFloatPosition()) {
    var position = this.GetDefaultUndockPosition();
    this.SetWindowLeft(this.DefaultWindowIndex, position.x);
    this.SetWindowTop(this.DefaultWindowIndex, position.y);
    this.UpdateWindowsStateInputElement();
    this.UpdateWindowsStateCookie();
   }
   if(!this.RaiseBeforeFloat())
    return;
   this.zone.HidePanelPlaceholder();
   this.MakeFloatInternal(this.GetLastFloatPosition());
   if(this.stateObserver.IsBeingFloated())
    this.RaiseAfterFloat();
  }
  else if(this.mode != 'FloatOnly') {
   var lastDockedState = this.GetState().lastDockedState;
   var zone = ASPxClientDockZoneBag.Get().GetZoneByUID(lastDockedState.zoneUID);
   if(!zone || !this.RaiseBeforeDock(zone))
    return;
   this.StoreFloatingStateDimensions();
   this.DockToLastZone();
   if(this.stateObserver.IsBeingDocked())
    this.RaiseAfterDock();
  }
 },
 GetStateHiddenInput: function() {
  return _aspxGetElementById(this.name + this.StateHiddenInputIDPostfix);
 },
 GetState: function() {
  var stateInput = this.GetStateHiddenInput();
  var state = eval('(' + stateInput.value + ');');
  return {
   zoneUID: state[0],
   visibleIndex: state[1],
   lastDockedState: {
    zoneUID: state[2],
    visibleIndex: state[3]
   },
   lastFloatState: {
    left: state[4],
    top: state[5]
   }
  };
 },
 GetZoneUID: function() {
  return this.GetState().zoneUID;
 },
 SetZoneUID: function(zoneUID) {
  var state = this.GetState();
  var stateInput = this.GetStateHiddenInput();
  stateInput.value =
   _aspxToJson([zoneUID || '', state.visibleIndex, state.lastDockedState.zoneUID, state.lastDockedState.visibleIndex, state.lastFloatState.left, state.lastFloatState.top]);
 },
 SetLastDockedState: function(lastDockedState) {
  var state = this.GetState();
  var stateInput = this.GetStateHiddenInput();
  stateInput.value =
   _aspxToJson([state.zoneUID, state.visibleIndex, lastDockedState.zoneUID, lastDockedState.visibleIndex, state.lastFloatState.left, state.lastFloatState.top]);
 },
 SetLastFloatState: function() {
  if(!this.floatingState)
   return;
  var state = this.GetState();
  var stateInput = this.GetStateHiddenInput();
  var position = this.GetElementPosInInitialParentNode(this.GetMainElement());
  position.x = Math.round(position.x);
  position.y = Math.round(position.y);
  stateInput.value =
   _aspxToJson([state.zoneUID, state.visibleIndex, state.lastDockedState.zoneUID, state.lastDockedState.visibleIndex, position.x, position.y]);
 },
 GetLastFloatPosition: function() {
  var lastFloatState = this.GetState().lastFloatState;
  if(lastFloatState.left && lastFloatState.top) {
   return {
    x: lastFloatState.left,
    y: lastFloatState.top
   }
  }
  return null;
 },
 GetLayoutStateObject: function() {
  return [
   this.GetVisible(),
   this.mode,
   this.GetZoneUID(),
   this.widthFixed ? (this.floatingStateDimensions.width + '') : '0',
   this.heightFixed ? (this.floatingStateDimensions.height + '') : '0',
   Math.ceil(this.GetCurrentLeft(this.DefaultWindowIndex)),
   Math.ceil(this.GetCurrentTop(this.DefaultWindowIndex)),
   this.GetVisibleIndex()
  ];
 },
 UpdateManagerClientLayoutState: function() {
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.UpdatePanelsLayoutState();
 },
 GetCursorOverPanelLocation: function(cursorPos, panelSpacing, isHorizontal) {
  var mainElement = this.GetMainElement();
  var x = _aspxGetAbsoluteX(mainElement);
  var y = _aspxGetAbsoluteY(mainElement);
  var width = this.GetWidth();
  var height = this.GetHeight();
  if(isHorizontal)
   width += panelSpacing;
  else
   height += panelSpacing;
  if(cursorPos.x < x || cursorPos.x > x + width || cursorPos.y < y || cursorPos.y > y + height)
   return null;
  if(isHorizontal)
   return cursorPos.x > (x + width / 2) ? 'right' : 'left';
  return cursorPos.y > (y + height / 2) ? 'bottom' : 'top';
 },
 GetDockedDimensions: function (zoneResizableDimension, isHorizontal) {
  this.UpdateRestoredWindowSizeLock();
  var storedDimensions = this.floatingState ? this.floatingStateDimensions :
   { width: this.GetWidth(), height: this.GetHeight() };
  if(this.floatingState)
   this.EnableContentFlexibility();
  var storedContentFlexibilityEnabled = this.contentFlexibilityEnabled;
  this.SetSizeInternal(this.floatingStateDimensions.width, this.floatingStateDimensions.height);
  var dimensions;
  if(isHorizontal) {
   this.SetHeightInternal(zoneResizableDimension);
   if(this.floatingStateDimensions.height < zoneResizableDimension && !this.widthFixed) {
    if(storedContentFlexibilityEnabled)
     this.DisableContentFlexibility();
    this.SetWidthInternal(1);
    if(storedContentFlexibilityEnabled)
     this.EnableContentFlexibility();
   }
   dimensions = { width: this.GetWidth(), height: zoneResizableDimension };
  }
  else {
   this.SetWidthInternal(zoneResizableDimension);
   if(this.floatingStateDimensions.width < zoneResizableDimension && !this.heightFixed) {
    if(storedContentFlexibilityEnabled)
     this.DisableContentFlexibility();
    this.SetHeightInternal(1);
    if(storedContentFlexibilityEnabled)
     this.EnableContentFlexibility();
   }
   dimensions = { width: zoneResizableDimension, height: this.GetHeight() };
  }
  if(this.floatingState)
   this.DisableContentFlexibility();
  this.SetSizeInternal(storedDimensions.width, storedDimensions.height);
  this.UpdateRestoredWindowSizeUnlock();
  return dimensions;
 },
 StoreFloatingStateDimensions: function() {
  if(this.trackDimensions) {
   this.StoreFloatingStateDimensionsCore(this.GetWidth(), this.GetHeight());
   this.UpdateManagerClientLayoutState();
  }
 },
 StoreFloatingStateDimensionsCore: function(width, height) {
  this.floatingStateDimensions.width = width;
  this.floatingStateDimensions.height = height;
 },
 GetCurrentWindowWidth: function(index) {
  if (!this.widthFixed)
   return __aspxInvalidDimension;
  if(!this.floatingState)
   return this.floatingStateDimensions.width;
  return ASPxClientPopupControl.prototype.GetCurrentWindowWidth.call(this, index);
 },
 GetCurrentWindowHeight: function(index) {
  if (!this.heightFixed)
   return this.GetDefaultWindowHeight(index);
  if(!this.floatingState)
   return this.floatingStateDimensions.height;
  return ASPxClientPopupControl.prototype.GetCurrentWindowHeight.call(this, index);
 },
 GetDefaultWindowHeight: function (index) {
  var result = null;
  var useDockedDimensionsHeight = !this.dockedDimensionsCalculating && this.IsDocked() && this.CollapseExecuting();
  if (useDockedDimensionsHeight) {
   try {
    this.dockedDimensionsCalculating = true;
    result = this.GetDockingInfo().dimensions.height;
   }
   finally {
    this.dockedDimensionsCalculating = false;
   }
  }
  else
   result = __aspxInvalidDimension;
  return result;
 },
 ShoulUpdatedRestoredWindowSizeOnCollapse: function(index) {
  var baseValue = ASPxClientPopupControl.prototype.ShoulUpdatedRestoredWindowSizeOnCollapse.call(this, index);
  return baseValue && this.floatingState;
 },
 SetShadowVisibility: function(visible) {
  this.shadowVisible = visible;
  this.SetShadowVisibilityLite(visible);
 },
 SetShadowVisibilityLite: function(visible) {
  var mainElement = this.GetWindowMainCell(this.GetMainElement());
  var shadowClassName = ASPxClientPopupControlCssClasses.ShadowLiteCssClassName;
  if(visible) {
   if(!_aspxElementHasCssClass(mainElement, shadowClassName))
    mainElement.className = _aspxTrim(mainElement.className) + ' ' + shadowClassName;
  } else
   mainElement.className = _aspxTrim(mainElement.className.replace(shadowClassName, ''));
 },
 SetHeaderFooterOverflow: function(overflow) {
  var elements = [
   this.GetWindowHeaderElement(this.DefaultWindowIndex),
   this.GetWindowFooterElement(this.DefaultWindowIndex)
  ];
  for(var i = 0; i < elements.length; i++) {
   if(elements[i])
    elements[i].style.overflow = overflow;
  }
 },
 EnableContentFlexibility: function() {
  var contentElement = this.GetContentScrollbarsOwner();
  this.enableContentScrolling = true;
  this.contentFlexibilityEnabled = true;
  contentElement.style.overflow = 'auto';
  contentElement.style.overflowX = 'auto';
  contentElement.style.overflowY = 'auto';
  this.minWidth = null;
  this.minHeight = null;
  this.maxWidth = null;
  this.maxHeight = null;
  this.contentFlexibilityEnabled = true;
 },
 DisableContentFlexibility: function() {
  var contentElement = this.GetContentScrollbarsOwner();
  contentElement.style.overflowX = this.floatingStateContentOverflow.x;
  contentElement.style.overflowY = this.floatingStateContentOverflow.y;
  contentElement.style.overflow = this.floatingStateContentOverflow.both;
  this.enableContentScrolling = this.floatingStateEnableContentScrolling;
  this.minWidth = this.floatingStateDimensions.minWidth;
  this.minHeight = this.floatingStateDimensions.minHeight;
  this.maxWidth = this.floatingStateDimensions.maxWidth;
  this.maxHeight = this.floatingStateDimensions.maxHeight;
  this.contentFlexibilityEnabled = false;
 },
 SetAllowResize: function(allowResize) {
  this.allowResize = allowResize;
  this.SetAllowResizeLite(allowResize);
 },
 SetAllowResizeLite: function(allowResize) {
  var windowElement = this.GetWindowElement(this.DefaultWindowIndex);
  var windowMainCell = this.GetWindowMainCell(windowElement);
  var windowHeader = this.GetWindowHeaderElement(this.DefaultWindowIndex);
  var sizeGrip = this.GetWindowSizeGripLite(this.DefaultWindowIndex);
  var storedHanlder = this.GetWindowElementMouseMoveEventHandler(this.DefaultWindowIndex);
  if(allowResize) {
   _aspxRestoreStyleAttribute(windowElement, 'cursor');
   _aspxAttachEventToElement(windowElement, 'mousemove', storedHanlder);
  } else {
   _aspxChangeStyleAttribute(windowElement, 'cursor', 'default');
   _aspxRemoveStyleAttribute(windowMainCell, 'cursor');
   if(windowHeader)
    windowHeader.style.cursor = 'move';
   _aspxDetachEventFromElement(windowElement, 'mousemove', storedHanlder);
  }
  if(sizeGrip)
   _aspxSetElementDisplay(sizeGrip, allowResize);
 },
 ResizeForDock: function(dockedDimensions) {
  this.SetSizeInternal(dockedDimensions.width, dockedDimensions.height);
 },
 OnResize: function(evt, index, cursor, resizePanel) {
  ASPxClientPopupControl.prototype.OnResize.call(this, evt, index, cursor, resizePanel);
  this.widthFixed = cursor.horizontalDirection == "w" || cursor.horizontalDirection == "e";
  this.heightFixed = cursor.verticalDirection == "n" || cursor.verticalDirection == "s";
 },
 Fixate: function() {
  var mainElement = this.GetMainElement();
  var offset = {
   x: mainElement.offsetLeft,
   y: mainElement.offsetTop
  };
  mainElement.style.left = offset.x + 'px';
  mainElement.style.top = offset.y + 'px';
  mainElement.style.position = 'absolute';
  this.fixated = true;
 },
 RemoveFixation: function() {
  var mainElement = this.GetMainElement();
  mainElement.style.position = 'static';
  this.fixated = false;
 },
 EnsureContent: function(windowIndex, isInit) {
  if(this.contentLoadingMode != 'OnDock' && this.contentLoadingMode != 'OnFloating' &&
   this.contentLoadingMode != 'OnDockStateChange' && this.allowEnsureContent) {
   ASPxClientPopupControl.prototype.EnsureContent.call(this, windowIndex, isInit);
  }
 },
 OnCallbackInternal: function(html, windowIndex, isError) {
  ASPxClientPopupControl.prototype.OnCallbackInternal.call(this, html, windowIndex, isError);
  _aspxSetElementVisibility(this.GetContentContainer(windowIndex), true);
  var instance = this;
  window.setTimeout(function() {
   if(instance.completeSwitchingToFloatingStateOnCallback) {
    instance.CompleteSwitchingToFloatingState();
    instance.completeSwitchingToFloatingStateOnCallback = false;
   }
   instance.StoreFloatingStateDimensions();
  }, 0);
 },
 LoadContent: function() {
  var mainElement = this.GetMainElement();
  if(!mainElement.loading) {
   mainElement.loading = true;
   this.CreateWindowCallback(this.DefaultWindowIndex, this.DefaultWindowIndex);
  }
 },
 DisableDragging: function() {
  this.allowDragging = false;
  var elements = [
   this.GetWindowHeaderElement(this.DefaultWindowIndex),
   this.GetWindowMainCell(this.GetMainElement())
  ];
  for(var i = 0; i < elements.length; i++) {
   if(elements[i])
    elements[i].style.cursor = 'default';
  }
 },
 OnDragStart: function(evt, index) {
  if(!this.allowDragging || this.animationLocked)
   return;
  this.ApplyZonesAllowedStyle();
  this.ApplyZonesForbiddenStyle();
  var instance = this;
  var evtMock = __aspxIE ? {
   clientX: evt.clientX,
   clientY: evt.clientY
  } : evt;
  window.setTimeout(function() {
   ASPxClientPopupControl.prototype.OnDragStart.call(instance, evtMock, index);
  }, 0);
 },
 OnDrag: function(index, x, y, xClientCorrection, yClientCorrection, evt) {
  var retValue = ASPxClientPopupControl.prototype.OnDrag.call(this, index, x, y, xClientCorrection, yClientCorrection);
  if(!this.inUndockedState && !this.animationLocked) {
   this.trackDimensions = false;
   var cursorPos = {
    x: _aspxGetEventX(evt),
    y: _aspxGetEventY(evt)
   };
   if(this.zone) {
    this.UndockInternal(true);
    ASPxClientPopupControl.prototype.InitDragInfo.call(this, index, evt);
   }
   this.SearchForCurrentZone(cursorPos);
   this.RaiseStartDragging();
   this.inUndockedState = true;
  }
  var popupCollection = aspxGetPopupControlCollection();
  var cursorPos = {
   x: x - popupCollection.gragXOffset,
   y: y - popupCollection.gragYOffset
  };
  if(!evt.ctrlKey)
   this.SearchForCurrentZone(cursorPos);
  else if(this.zone) {
   this.zone.HidePanelPlaceholder();
   this.zone = null;
  }
  return retValue;
 },
 SearchForCurrentZone: function(cursorPos) {
  var newZone = null;
  var zoneList = ASPxClientDockZoneBag.Get().GetZoneList();
  for(var i = 0; i < zoneList.length; i++) {
   if(zoneList[i].IsCursorInsideZone(cursorPos)) {
    if(this.zone && this.zone.zoneUID === zoneList[i].zoneUID) {
     this.zone.MovePanelPlaceholder(cursorPos);
     return;
    }
    newZone = zoneList[i];
    break;
   }
  }
  if(this.zone) {
   this.zone.HidePanelPlaceholder();
   this.zone = null;
  }
  if(newZone) {
   this.zone = newZone;
   this.zone.MovePanelPlaceholder(cursorPos);
   this.zone.ShowPanelPlaceholder(this);
  }
 },
 OnDragStop: function(index) {
  ASPxClientPopupControl.prototype.OnDragStop.call(this, index);
  this.RemoveZonesAllowedStyle();
  this.RemoveZonesForbiddenStyle();
  if(!this.inUndockedState)
   return;
  this.inUndockedState = false;
  this.RaiseEndDragging();
  var dockingInfo = this.GetDockingInfo();
  if(dockingInfo && dockingInfo.canDock && this.RaiseBeforeDock(this.zone)) {
   this.DockInternal(dockingInfo.dimensions);
   return;
  }
  if(this.zone)
   this.zone.HidePanelPlaceholder();
  var lastDockedState = this.GetState().lastDockedState;
  if(this.mode === 'DockedOnly' && lastDockedState.zoneUID) {
   this.stateObserver.trackState = false;
   this.DockToLastZone();
   this.stateObserver.trackState = true;
   return;
  }
  if(this.stateObserver.IsBeingDocked() && !this.RaiseBeforeFloat()) {
   this.stateObserver.trackState = false;
   this.DockToLastZone();
   this.stateObserver.trackState = true;
   return;
  }
  this.SwitchToFloatingState();
  this.SetLastFloatState();
  if(this.stateObserver.IsBeingFloated())
   this.RaiseAfterFloat();
 },
 IsZoneForbidden: function(zone) {
  for(var i = 0; i < this.forbiddenZones.length; i++) {
   if(this.forbiddenZones[i] === zone.zoneUID)
    return true;
  }
  return false;
 },
 GetDockingInfo: function() {
  if(!this.zone)
   return null;
  var dockedDimensions = null;
  var canDock = this.mode != 'FloatOnly' && !this.freezed && !this.IsZoneForbidden(this.zone);
  if(canDock) {
   if(this.zone.IsFillOrientation()) {
    dockedDimensions = { width: this.zone.initialWidth, height: this.zone.initialHeight };
    canDock &= this.zone.CanDockPanel();
   } else {
    var isHorizontalZone = this.zone.IsHorizontalOrientation();
    var zoneResizableDimension = isHorizontalZone ? this.zone.initialHeight : this.zone.initialWidth;
    dockedDimensions = this.GetDockedDimensions(zoneResizableDimension, isHorizontalZone);
    canDock &= this.zone.CanDockPanel(isHorizontalZone ? dockedDimensions.width : dockedDimensions.height);
   }
  }
  return {
   canDock: canDock,
   dimensions: dockedDimensions
  };
 },
 SwitchToFloatingState: function() {
  var requireContentUpdate = !this.floatingState &&
   (this.contentLoadingMode === 'OnFloating' || this.contentLoadingMode === 'OnDockStateChange');
  this.zone = null;
  this.floatingState = true;
  if(this.floatingStateAllowResize)
   this.SetAllowResize(true);
  this.DisableContentFlexibility();
  if(requireContentUpdate) {
   this.LoadContent();
   this.updateDimensionsOnFloatingState = true;
   this.completeSwitchingToFloatingStateOnCallback = true;
  } else
   this.CompleteSwitchingToFloatingState();
 },
 CompleteSwitchingToFloatingState: function() {
  this.UpdateRestoredWindowSizeLock();
  this.stateObserver.UpdateState();
  this.SetSizeInternal(this.floatingStateDimensions.width, this.floatingStateDimensions.height);
  this.trackDimensions = true;
  if(this.updateDimensionsOnFloatingState) {
   this.StoreFloatingStateDimensions();
   this.updateDimensionsOnFloatingState = false;
  }
  if(this.IsVisible())
   this.AdjustContentOnDockStateChanged();
  this.UpdateManagerClientLayoutState();
  this.UpdateRestoredWindowSizeUnlock();
 },
 CompleteDocking: function(mainElement, dockedDimensions, onFirstShow) {
  this.zone.DockPanel(this, dockedDimensions, onFirstShow);
  this.stateObserver.UpdateState();
  mainElement.style.position = 'static';
  this.ClearShadowTablePositionForIeLess8();
  var requireRefreshContent = this.stateObserver.IsBeingDocked() &&
   (this.contentLoadingMode === 'OnDock' || this.contentLoadingMode === 'OnDockStateChange');
  if(requireRefreshContent) {
   this.LoadContent();
   this.updateDimensionsOnFloatingState = true;
  }
  if(!onFirstShow) {
   this.UpdateManagerClientLayoutState();
   this.RaiseAfterDock();
  }
  this.zone.AdjustControlCore();
  if(this.IsVisible())
   this.AdjustContentOnDockStateChanged();
  this.SetLastDockedState({ zoneUID: this.GetZoneUID(), visibleIndex: this.GetVisibleIndex() });
  var windowIFrame = this.FindWindowIFrame(this.DefaultWindowIndex);
  if(windowIFrame)
   _aspxSetElementDisplay(windowIFrame, false);
  if(this.animationLocked)
   this.animationLocked = false;
  this.UpdateRestoredWindowSizeUnlock();
  this.HideNativeScrollbarsOnAndroid();
 },
 ClearShadowTablePositionForIeLess8: function() {
  if (__aspxIE && __aspxBrowserVersion < 8 && this.enableAnimation) {
   var shadowTable = this.GetWindowShadowTableCore(this.DefaultWindowIndex);
   if(shadowTable)
    shadowTable.style.position = '';
  }
 },
 RestoreShadowTablePositionForIeLess8: function() {
  if(__aspxIE && __aspxBrowserVersion < 8 && this.enableAnimation) {
   var shadowTable = this.GetWindowShadowTableCore(this.DefaultWindowIndex);
   if(shadowTable)
    shadowTable.style.position = 'relative';
  }
 },
 HideNativeScrollbarsOnAndroid: function() {
  if (__aspxAndroidMobilePlatform) {
   var contentElement = this.GetContentScrollbarsOwner();
   contentElement.style.overflow = 'hidden';
   contentElement.style.overflowX = 'hidden';
   contentElement.style.overflowY = 'hidden';
  }
 },
 AdjustContentOnDockStateChanged: function() {
  var contentElement = this.GetContentContainer(this.DefaultWindowIndex);
  aspxGetControlCollection().AdjustControls(contentElement);
 },
 DockOnFirstShow: function() {
  var zoneUID = this.GetZoneUID();
  if(!zoneUID)
   return;
  var zoneList = ASPxClientDockZoneBag.Get().GetZoneList();
  for(var i = 0; i < zoneList.length; i++) {
   if(zoneList[i].zoneUID === zoneUID) {
    this.zone = zoneList[i];
    break;
   }
  }
  if(this.zone)
   this.zone.AdjustControl();
  this.trackDimensions = false;
  var dockingInfo = this.GetDockingInfo();
  if(dockingInfo && dockingInfo.canDock)
   this.DockInternal(dockingInfo.dimensions, true);
  else
   this.SwitchToFloatingState();
 },
 DockToLastZone: function() {
  var lastDockedState = this.GetState().lastDockedState;
  if(!lastDockedState.zoneUID)
   return;
  var zoneBag = ASPxClientDockZoneBag.Get();
  var zone = zoneBag.GetZoneByUID(lastDockedState.zoneUID);
  if(zone)
   this.Dock(zone, lastDockedState.visibleIndex);
 },
 DockInternal: function(dockedDimensions, onFirstShow) {
  this.UpdateRestoredWindowSizeLock();
  var mainElement = this.GetMainElement();
  this.floatingState = false;
  if(this.floatingStateAllowResize)
   this.SetAllowResize(false);
  if(this.initialShadowVisible)
   this.SetShadowVisibility(false);
  this.EnableContentFlexibility();
  if(this.zone.IsHorizontalOrientation())
   _aspxSetElementFloat(mainElement, 'left');
  if(this.enableAnimation && !onFirstShow)
   this.StartDockAnimation(mainElement, dockedDimensions);
  else
   this.CompleteDocking(mainElement, dockedDimensions, onFirstShow);
 },
 UndockInternal: function(showPlaceholder) {
  this.RestoreShadowTablePositionForIeLess8();
  var mainElement = this.GetMainElement();
  var position = this.GetUndockToPosition();
  if(showPlaceholder) {
   this.zone.FixatePanels(this);
   this.zone.MovePanelPlaceholderToPanel(this);
  }
  this.initialParentNode.appendChild(mainElement);
  mainElement.style.position = 'absolute';
  _aspxSetElementFloat(mainElement, 'none');
  this.SetWindowPos(this.DefaultWindowIndex, mainElement, position.x, position.y);
  if(!this.IsVisible()) {
   this.SetWindowLeft(this.DefaultWindowIndex, position.x);
   this.SetWindowTop(this.DefaultWindowIndex, position.y);
  }
  if(this.initialShadowVisible)
   this.SetShadowVisibility(true);
  this.zone.UndockPanel(this);
  if(showPlaceholder) {
   this.zone.ShowPanelPlaceholder(this);
   this.zone.RemovePanelsFixation();
  }
  var windowIFrame = this.FindWindowIFrame(this.DefaultWindowIndex);
  if(windowIFrame)
   _aspxSetElementDisplay(windowIFrame, true);
  this.zone = null;
 },
 GetUndockToPosition: function() {
  var mainElement = this.GetMainElement();
  if(this.IsVisible())
   return this.GetElementPosInInitialParentNode(mainElement)
  var storedDisplay = mainElement.style.display;
  mainElement.style.display = 'block';
  var position = this.GetElementPosInInitialParentNode(mainElement);
  mainElement.style.display = storedDisplay;
  return position;
 },
 MakeFloatInternal: function(position) {
  if(this.floatingState)
   return;
  this.UndockInternal();
  this.SwitchToFloatingState();
  if(!position)
   position = this.GetDefaultUndockPosition();
  this.SetWindowPos(this.DefaultWindowIndex, this.GetMainElement(), position.x, position.y);
  if(!this.IsVisible()) {
   this.SetWindowLeft(this.DefaultWindowIndex, position.x);
   this.SetWindowTop(this.DefaultWindowIndex, position.y);
  }
 },
 GetDefaultUndockPosition: function() {
  var undockToPos = this.GetUndockToPosition();
  return {
   x: undockToPos.x + this.UndockOnDoubleClickOffset,
   y: undockToPos.y + this.UndockOnDoubleClickOffset
  }
 },
 StartDockAnimation: function(mainElement, dockedDimensions) {
  this.animationLocked = true;
  mainElement.animationIterationCount = 0;
  mainElement.dockedDimensions = dockedDimensions;
  mainElement.destPosition = this.zone.GetPanelPlaceholderPositionForElement(mainElement);
  mainElement.isHorizontalZone = this.zone.IsHorizontalOrientation();
  this.IntializeAnimationOffsets(mainElement, dockedDimensions);
  mainElement.animationStart = new Date();
  this.HandleDockAnimation();
 },
 IntializeAnimationOffsets: function(mainElement, dockedDimensions) {
  var intialHeight = this.GetHeight();
  var initialWidth = this.GetWidth();
  var position = this.GetElementPosInInitialParentNode(mainElement);
  mainElement.moveAnimationOffset = {
   horizontal: position.x > mainElement.destPosition.x ? -this.AnimationOffset : this.AnimationOffset,
   vertical: position.y > mainElement.destPosition.y ? -this.AnimationOffset : this.AnimationOffset
  }
  mainElement.resizeAnimationOffset = {
   horizontal: initialWidth > dockedDimensions.width ? -this.AnimationOffset : this.AnimationOffset,
   vertical: intialHeight > dockedDimensions.height ? -this.AnimationOffset : this.AnimationOffset
  };
 },
 GetAnimationState: function(mainElement) {
  var moveIterationCoeff = Math.log(mainElement.animationIterationCount);
  var resizeIterationCoeff = Math.sqrt(mainElement.animationIterationCount);
  var position = this.GetElementPosInInitialParentNode(mainElement);
  var dimensions = {
   width: this.GetWidth(),
   height: this.GetHeight()
  };
  var newPosition = {
   x: position.x + moveIterationCoeff * mainElement.moveAnimationOffset.horizontal,
   y: position.y + moveIterationCoeff * mainElement.moveAnimationOffset.vertical
  };
  var newDimensions = {
   width: dimensions.width + resizeIterationCoeff * mainElement.resizeAnimationOffset.horizontal,
   height: dimensions.height + resizeIterationCoeff * mainElement.resizeAnimationOffset.vertical
  };
  var positionReached = {
   x: mainElement.moveAnimationOffset.horizontal > 0 ?
    newPosition.x >= mainElement.destPosition.x :
    newPosition.x <= mainElement.destPosition.x,
   y: mainElement.moveAnimationOffset.vertical > 0 ?
    newPosition.y >= mainElement.destPosition.y :
    newPosition.y <= mainElement.destPosition.y
  };
  var dimensionReached = {
   width: mainElement.resizeAnimationOffset.horizontal > 0 ?
    newDimensions.width >= mainElement.dockedDimensions.width :
    newDimensions.width <= mainElement.dockedDimensions.width,
   height: mainElement.resizeAnimationOffset.vertical > 0 ?
    newDimensions.height >= mainElement.dockedDimensions.height :
    newDimensions.height <= mainElement.dockedDimensions.height
  };
  return {
   newPosition: newPosition,
   newDimensions: newDimensions,
   positionReached: positionReached,
   dimensionReached: dimensionReached
  };
 },
 HandleDockAnimation: function() {
  var mainElement = this.GetMainElement();
  mainElement.animationIterationCount++;
  var state = this.GetAnimationState(mainElement);
  var finished = (state.positionReached.x && state.positionReached.y && state.dimensionReached.width &&
   state.dimensionReached.height) || (new Date() - mainElement.animationStart > this.MaxAnimationTime);
  if(finished) {
   this.CompleteDocking(mainElement, mainElement.dockedDimensions);
   return;
  }
  this.SetWindowPos(this.DefaultWindowIndex, mainElement,
   state.positionReached.x ? mainElement.destPosition.x : state.newPosition.x,
   state.positionReached.y ? mainElement.destPosition.y : state.newPosition.y);
  this.SetSizeInternal(state.dimensionReached.width ? mainElement.dockedDimensions.width : state.newDimensions.width,
   state.dimensionReached.height ? mainElement.dockedDimensions.height : state.newDimensions.height);
  var instance = this;
  window.setTimeout(function() { instance.HandleDockAnimation(); }, this.AnimationDelay);
 },
 ShowLoadingPanel: function(windowIndex) {
  _aspxSetElementVisibility(this.GetContentContainer(windowIndex), false);
  ASPxClientPopupControl.prototype.ShowLoadingPanel.call(this, windowIndex);
 },
 ApplyZonesAllowedStyle: function() {
  this.ProcessZones(this.GetAllowedZones(), function(zone) {
   zone.ApplyDockingAllowedStyle()
  });
 },
 RemoveZonesAllowedStyle: function() {
  this.ProcessZones(this.GetAllowedZones(), function(zone) {
   zone.RemoveDockingAllowedStyle()
  });
 },
 ApplyZonesForbiddenStyle: function() {
  this.ProcessZones(this.GetForbiddenZones(), function(zone) {
   zone.ApplyDockingForbiddenStyle()
  });
 },
 RemoveZonesForbiddenStyle: function() {
  this.ProcessZones(this.GetForbiddenZones(), function(zone) {
   zone.RemoveDockingForbiddenStyle()
  });
 },
 ProcessZones: function(zones, action) {
  for(var i = 0; i < zones.length; i++)
   action(zones[i]);
 },
 GetForbiddenZones: function() {
  var forbiddenZones = [];
  var zoneBag = ASPxClientDockZoneBag.Get();
  for(var i = 0; i < this.forbiddenZones.length; i++) {
   var zone = zoneBag.GetZoneByUID(this.forbiddenZones[i]);
   if(zone)
    forbiddenZones.push(zone);
  }
  return forbiddenZones;
 },
 GetAllowedZones: function() {
  var zoneCollection = ASPxClientDockZoneBag.Get().GetZoneList();
  var allowedZones = [];
  for(var i = 0; i < zoneCollection.length; i++) {
   var zone = zoneCollection[i];
   if(!this.IsZoneForbidden(zone))
    allowedZones.push(zone);
  }
  return allowedZones;
 },
 GetBeforeDockPostbackArgs: function(zone) {
  return [
   this.RaiseBeforeDockEventCommand,
   zone.zoneUID,
   zone.GetPanelAfterPlaceholderVisibleIndex() + 1
  ];
 },
 GetBeforeFloatPostbackArgs: function() {
  return [
   this.RaiseBeforeFloatEventCommand,
   this.GetState().lastDockedState.zoneUID
  ];
 },
 GetAfterFloatPostbackArgs: function() {
  return [
   this.RaiseAfterFloatEventCommand,
   this.GetState().lastDockedState.zoneUID
  ];
 },
 RaiseBeforeDock: function(zone) {
  var processOnServer = this.IsServerEventAssigned(this.BeforeDockServerEventName);
  var args = new ASPxClientDockPanelProcessingModeCancelEventArgs(processOnServer, zone);
  if(!this.BeforeDock.IsEmpty())
   this.BeforeDock.FireEvent(this, args);
  if(!args.cancel && args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetBeforeDockPostbackArgs(zone);
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
  var dockManager = ASPxClientDockManager.Get();
  return !args.cancel && zone.RaiseBeforeDock(this) &&
   (dockManager ? dockManager.RaiseBeforeDock(this, zone) : true);
 },
 RaiseAfterDock: function() {
  var processOnServer = this.IsServerEventAssigned(this.AfterDockServerEventName);
  var args = new ASPxClientProcessingModeEventArgs(processOnServer);
  if(!this.AfterDock.IsEmpty())
   this.AfterDock.FireEvent(this, args);
  if(args.processOnServer && this.isInitialized) {
   this.SendPostBack(_aspxToJson([this.RaiseAfterDockEventCommand]));
   return;
  }
  this.zone.RaiseAfterDock(this);
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaiseAfterDock(this, this.zone);
 },
 RaiseBeforeFloat: function() {
  var processOnServer = this.IsServerEventAssigned(this.BeforeFloatServerEventName);
  var zone = ASPxClientDockZoneBag.Get().GetZoneByUID(this.GetState().lastDockedState.zoneUID);
  var args = new ASPxClientDockPanelProcessingModeCancelEventArgs(processOnServer, zone);
  if(!this.BeforeFloat.IsEmpty())
   this.BeforeFloat.FireEvent(this, args);
  if(args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetBeforeFloatPostbackArgs();
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager && !args.cancel)
   return dockManager.RaiseBeforeFloat(this, zone);
  return !args.cancel;
 },
 RaiseAfterFloat: function() {
  var processOnServer = this.IsServerEventAssigned(this.AfterFloatServerEventName);
  var zone = ASPxClientDockZoneBag.Get().GetZoneByUID(this.GetState().lastDockedState.zoneUID);
  var args = new ASPxClientDockPanelProcessingModeEventArgs(processOnServer, zone);
  if(!this.AfterFloat.IsEmpty())
   this.AfterFloat.FireEvent(this, args);
  if(args.processOnServer && this.isInitialized) {
   var postbackArgs = this.GetAfterFloatPostbackArgs();
   this.SendPostBack(_aspxToJson(postbackArgs));
   return;
  }
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager) {
   dockManager.RaiseAfterFloat(this, zone);
  }
 },
 RaiseStartDragging: function() {
  if(!this.StartDragging.IsEmpty())
   this.StartDragging.FireEvent(this, new ASPxClientEventArgs());
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaiseStartPanelDragging(this);
 },
 RaiseEndDragging: function() {
  if(!this.EndDragging.IsEmpty())
   this.EndDragging.FireEvent(this, new ASPxClientEventArgs());
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaiseEndPanelDragging(this);
 },
 RaiseClosing: function(index) {
  var dockManager = ASPxClientDockManager.Get();
  var managerCancel = false;
  if(dockManager)
   managerCancel = dockManager.RaisePanelClosing(this);
  if(!this.Closing.IsEmpty())
   return ASPxClientPopupControl.prototype.RaiseClosing.call(this, index);
  return managerCancel;
 },
 RaiseCloseUp: function(index) {
  ASPxClientPopupControl.prototype.RaiseCloseUp.call(this, index);
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaisePanelCloseUp(this);
 },
 RaisePopUp: function(index) {
  ASPxClientPopupControl.prototype.RaisePopUp.call(this, index);
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaisePanelPopUp(this);
 },
 RaiseShown: function(index) {
  ASPxClientPopupControl.prototype.RaiseShown.call(this, index);
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaisePanelShown(this);
 },
 RaiseResize: function(index, resizeState) {
  ASPxClientPopupControl.prototype.RaiseResize.call(this, index, resizeState);
  var dockManager = ASPxClientDockManager.Get();
  if(dockManager)
   dockManager.RaisePanelResize(this);
 },
 DoShowWindowAtPos: function(index, x, y, ignorePopupElement, closeOtherWindows, allowChangeZIndex) {
  if(this.floatingState) {
   ASPxClientPopupControl.prototype.DoShowWindowAtPos.call(this, index, x, y, ignorePopupElement,
    false, allowChangeZIndex);
   return;
  }
  var visible = ASPxClientPopupControl.prototype.InternalIsWindowVisible.call(this, this.DefaultWindowIndex);
  if(visible)
   return;
  this.RaisePopUp(this.DefaultWindowIndex);
  var mainElement = this.GetMainElement();
  mainElement.style.display = this.storedMainElementDisplay;
  _aspxSetElementVisibility(mainElement, true);
  this.AdjustContentOnShow(index);
  this.ApplyPanelCachedSize(index);
  if(this.zone) {
   this.zone.UpdatePanelsVisibleIndices();
   this.zone.ApplyPanelSpacing();
   this.zone.CorrectResizableDimensionCore();
  }
  ASPxClientPopupControl.prototype.UpdateWindowsStateInputElement.call(this);
  ASPxClientPopupControl.prototype.UpdateWindowsStateCookie.call(this);
  ASPxClientPopupControl.prototype.OnWindowShown.call(this, this.DefaultWindowIndex);
 },
 ApplyPanelCachedSize: function() {
  var cachedSize = this.GetWindowCachedSize(this.DefaultWindowIndex);
  if(cachedSize != null) {
   this.SetWindowSizeInternal(this.GetWindow(this.DefaultWindowIndex), cachedSize.width, cachedSize.height);
   this.ResetWindowCachedSize(this.DefaultWindowIndex);
  }
 },
 DoHideWindowCore: function(index) {
  var mainElement = this.GetMainElement();
  this.storedMainElementDisplay = mainElement.style.display;
  ASPxClientPopupControl.prototype.DoHideWindowCore.call(this, index);
  if(this.zone) {
   this.zone.UpdatePanelsVisibleIndices();
   this.zone.ApplyPanelSpacing();
   this.zone.CorrectResizableDimensionCore();
  }
 },
 DoCollapse: function(index, minimization) {
  ASPxClientPopupControl.prototype.DoCollapse.call(this, index, minimization);
  if(this.zone)
   this.zone.CorrectResizableDimension();
 },
 SetWindowSize: function(window, width, height) {
  if(this.floatingState) {
   this.SetWindowSizeInternal(window, width, height);
   if(!this.IsVisible()) {
    this.StoreFloatingStateDimensionsCore(width, height);
    this.UpdateManagerClientLayoutState();
   }
   return;
  }
  this.StoreFloatingStateDimensionsCore(width, height);
  this.UpdateManagerClientLayoutState();
 },
 SetSize: function(width, height) {
  ASPxClientPopupControl.prototype.SetSize.call(this, width, height);
  this.widthFixed = true;
  this.heightFixed = true;
 },
 SetWidth: function(width) {
  ASPxClientPopupControl.prototype.SetWidth.call(this, width);
  this.widthFixed = true;
 },
 SetHeight: function(height) {
  ASPxClientPopupControl.prototype.SetHeight.call(this, height);
  this.heightFixed = true;
 },
 SetSizeInternal: function(width, height) {
  this.SetWindowSizeInternal(null, width, height);
 },
 SetHeightInternal: function(height) {
  this.SetSizeInternal(this.GetWidth(), height);
 },
 SetWidthInternal: function(width) {
  this.SetSizeInternal(width, this.GetHeight());
 },
 SetWindowSizeInternal: function(window, width, height) {
  ASPxClientPopupControl.prototype.SetWindowSize.call(this, window, width, height);
 },
 GetOwnerZone: function() {
  return this.zone;
 },
 Dock: function(zone, visibleIndex) {
  var destinationZoneExists = zone && zone.zoneUID;
  if(!destinationZoneExists || this.IsDockInSamePlace(zone, visibleIndex))
   return;
  if(this.IsDockInSameZone(zone)) {
   this.SetVisibleIndex(visibleIndex);
   return;
  }
  if(this.zone)
   this.MakeFloatInternal();
  this.zone = zone;
  this.trackDimensions = false;
  var dockingInfo = this.GetDockingInfo();
  var canDock = dockingInfo && dockingInfo.canDock;
  if(!canDock) {
   this.zone = null;
   return;
  }
  this.SetVisibleIndexCore(_aspxIsExists(visibleIndex) ?
   visibleIndex : this.zone.GetDockedPanelsMaxVisibleIndex() + 1);
  this.DockInternal(dockingInfo.dimensions, true);
  this.zone.UpdatePanelsVisibleIndices();
 },
 MakeFloat: function(x, y) {
  if(_aspxIsExists(x) && _aspxIsExists(y))
   this.MakeFloatInternal({ x: x, y: y });
  else
   this.MakeFloatInternal();
 },
 GetVisibleIndex: function() {
  return this.GetState().visibleIndex;
 },
 SetVisibleIndex: function(visibleIndex) {
  if(this.floatingState) {
   this.SetVisibleIndexCore(visibleIndex);
   return;
  }
  this.zone.GetMainElement().insertBefore(this.GetMainElement(), this.GetInsertBeforePanelNode(visibleIndex));
  this.zone.UpdatePanelsVisibleIndices();
  this.zone.ApplyPanelSpacing();
 },
 IsDocked: function() {
  return !!this.zone;
 },
 SetVisibleIndexCore: function(visibleIndex) {
  var state = this.GetState();
  var stateInput = this.GetStateHiddenInput();
  stateInput.value =
   _aspxToJson([state.zoneUID, visibleIndex, state.lastDockedState.zoneUID, state.lastDockedState.visibleIndex, state.lastFloatState.left, state.lastFloatState.top]);
 },
 IsDockInSameZone: function(destinationZone) {
  return this.zone && this.zone.zoneUID === destinationZone.zoneUID;
 },
 IsDockInSamePlace: function(destinationZone, visibleIndex) {
  if(!this.IsDockInSameZone(destinationZone))
   return false;
  var dockedPanels = this.zone.GetOrderedPanelsList();
  return _aspxIsExists(visibleIndex) ?
   this.GetVisibleIndex() === visibleIndex : dockedPanels[dockedPanels.length - 1].panelUID === this.panelUID;
 },
 GetInsertBeforePanelNode: function(visibleIndex) {
  var panels = this.zone.GetOrderedPanelsList();
  var result = [];
  for(var i = 0; i < panels.length; i++) {
   if(panels[i].panelUID !== this.panelUID && panels[i].IsVisible())
    result.push(panels[i]);
  }
  var insertBeforePanel = result[visibleIndex];
  return insertBeforePanel ? insertBeforePanel.GetMainElement() : null;
 },
 GetElementPosInInitialParentNode: function(element) {
  return {
   x: _aspxPrepareClientPosElementForOtherParent(_aspxGetAbsoluteX(element), element, this.initialParentNode, true),
   y: _aspxPrepareClientPosElementForOtherParent(_aspxGetAbsoluteY(element), element, this.initialParentNode, false)
  };
 },
 OnMaximizeButtonClick: function (index) {
  var maximizing = !this.GetIsMaximized(index);
  if (maximizing) {
   this.dockRestorePanelData = { zone: this.GetOwnerZone() };
   if(this.dockRestorePanelData.zone) {
    this.dockRestorePanelData.visibleIndex = this.GetVisibleIndex();
    this.MakeFloat();
   }
  } 
  ASPxClientPopupControl.prototype.OnMaximizeButtonClick.call(this, index);
  if(!maximizing){
   if(this.dockRestorePanelData && this.dockRestorePanelData.zone)
    this.Dock(this.dockRestorePanelData.zone, this.dockRestorePanelData.visibleIndex);
   this.dockRestorePanelData = null;
  }
 },
 GetRestoredWindowData: function(index) {
  var restoredWindowData = ASPxClientPopupControl.prototype.GetRestoredWindowData.call(this, index);
  if(this.zone) {
   restoredWindowData.width = this.UseZoneSize(true) ? _aspxGetClearClientWidth(this.zone.GetMainElement()) : this.GetCurrentWindowWidth(index);
   restoredWindowData.height = this.UseZoneSize(false) ? _aspxGetClearClientHeight(this.zone.GetMainElement()) : this.GetCurrentWindowHeight(index);
  }
  return restoredWindowData;
 },
 UseZoneSize: function(isWidth) {
  return this.zone.IsFillOrientation() || isWidth && !this.zone.IsHorizontalOrientation() || !isWidth && this.zone.IsHorizontalOrientation();
 }
});
ASPxClientDockPanel.Cast = ASPxClientControl.Cast;
ASPxClientDockPanelProcessingModeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function (processOnServer, zone) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.zone = zone;
 }
});
ASPxClientDockPanelProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function (processOnServer, zone) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.zone = zone;
 }
});
MVCxClientDockPanel = _aspxCreateClass(ASPxClientDockPanel, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientDockPanel.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function() {
  if(this.callbackUrl != "")
   this.callBack = function(arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) };
  ASPxClientDockPanel.prototype.InlineInitialize.call(this);
 },
 InitializeWindow: function(index) {
  if(!this.showOnPageLoad) {
   var loadedClientState = this.HasStateSavedInCookies() ? _aspxGetCookie(this.cookieName).split(":")
         : this.NeedLoadDockManagerLayoutState() && ASPxClientDockManager.Get().clientLayoutState[this.panelUID];
   this.showOnPageLoad = loadedClientState && loadedClientState[0] == "1";
  }
  ASPxClientDockPanel.prototype.InitializeWindow.call(this, index);
 },
 NeedLoadDockManagerLayoutState: function() {
  return ASPxClientDockManager.Get() && ASPxClientDockManager.Get().needLoadLayoutState;
 },
 HasStateSavedInCookies: function() {
  return !this.NeedLoadDockManagerLayoutState() && _aspxGetCookie(this.cookieName);
 },
 IsInZoneArea: function(zone) {
  var zoneArea = zone.GetMainElement().getBoundingClientRect();
  var panelLeft = this.GetCurrentLeft(this.DefaultWindowIndex);
  var panelTop = this.GetCurrentTop(this.DefaultWindowIndex);
  return (panelLeft == 0 || panelLeft >= zoneArea.left && panelLeft < zoneArea.right) &&
   (panelTop == 0 || panelTop >= zoneArea.top && panelTop < zoneArea.bottom);
 },
 FirstShowWindow: function(index, allowChangeZIndex) {
  if(this.HasStateSavedInCookies()) {
   var element = this.GetWindowElement(index);
   var mainCell = this.GetWindowMainCell(element);
   var loadedState = _aspxGetCookie(this.cookieName).split(":");
   _aspxSetElementVisibility(element, loadedState[0] == "1" ? loadedState[0] : null);
   this.SetIsDragged(index, parseInt(loadedState[1]));
   element.style.zIndex = loadedState[2];
   var left = parseInt(loadedState[3]);
   var top = parseInt(loadedState[4]);
   if(_aspxGetIsValidPosition(left))
   this.SetWindowLeft(index, left);
   if(_aspxGetIsValidPosition(top))
   this.SetWindowTop(index, top);
   this.SetIsResized(index, parseInt(loadedState[5]));
   if(parseInt(loadedState[6]) != __aspxInvalidDimension)
    this.SetWindowWidth(index, parseInt(loadedState[6]));
   if(parseInt(loadedState[7]) != __aspxInvalidDimension)
    this.SetWindowHeight(index, parseInt(loadedState[7]));
   element.loaded = parseInt(loadedState[8]);
  }
  ASPxClientDockPanel.prototype.FirstShowWindow.call(this, index, allowChangeZIndex);
 },
 DockOnFirstShow: function () {
  var hasInvalidDimensionInPos = this.GetCurrentLeft(this.DefaultWindowIndex) == __aspxInvalidDimension ||
            this.GetCurrentTop(this.DefaultWindowIndex) == __aspxInvalidDimension;
  if(this.HasStateSavedInCookies() && !hasInvalidDimensionInPos) {
   var zone = ASPxClientDockZoneBag.Get().GetZoneByUID(this.GetZoneUID());
   var isWindowPosRight = !zone || this.IsInZoneArea(zone);
   if(!isWindowPosRight) {
    this.SetZoneUID("");
    var instance = this;
    ASPxClientDockZoneBag.Get().ForEachZone(
     function(zone) {
      if(instance.IsInZoneArea(zone))
       instance.SetZoneUID(zone.zoneUID);
     }
    );
   }
  }
  ASPxClientDockPanel.prototype.DockOnFirstShow.call(this);
 },
 AfterInitialize: function() {
  ASPxClientDockPanel.prototype.AfterInitialize.call(this);
  if(this.restoredFloatingStateDimensions) {
   this.StoreFloatingStateDimensionsCore(this.restoredFloatingStateDimensions.width, this.restoredFloatingStateDimensions.height);
   this.restoredFloatingStateDimensions = null;
  }
 },
 DoHideWindowCore: function(index) {
  if(!this.GetWindowCachedSize(index))
   this.SetWindowCachedSize(index, this.GetWidth(), this.GetHeight());
  ASPxClientDockPanel.prototype.DoHideWindowCore.call(this, index);
 },
 GetLayoutStateObject: function() {
  var state = ASPxClientDockPanel.prototype.GetLayoutStateObject.call(this);
  if(!parseInt(state[3]))
   state[3] = this.GetStoredDimensionValue(true);
  if(!parseInt(state[4]))
   state[4] = this.GetStoredDimensionValue(false);
  return state;
 },
 GetStoredDimensionValue: function(isWidth) {
  var cachedSize = this.GetWindowCachedSize();
  var dimensionValue = cachedSize ? cachedSize[isWidth ? "width" : "height"] : this[isWidth ? "GetWidth" : "GetHeight"]();
  return dimensionValue + '';
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientDockPanel.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientDockPanel.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
   if(result.isHandled)
    this.HideAllLoadingPanels();
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID){
  if(this.callbackCustomArgs != {})
   window.setTimeout(function(){ this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientDockPanel.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 EvalCallbackResult: function(resultString) {
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2) {
   var resultObj = ASPxClientDockPanel.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.html = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientDockPanel.prototype.EvalCallbackResult.call(this, resultString);
 }
});
ASPxClientUploadControlIDSuffix = {
 FlagHiddenInput: "_dxeUpload",
 ErrorRow: "_ErrR",
 ErrorRowTemplate: "_ErrRRT",
 UploadIFrame: "_UploadIframe",
 TextBoxCell: "_TextBox",
 ClearBoxCell: "_ClearBox",
 FileInput: "_Input",
 FileFakeInput: "_FakeInput",
 AddUploadButtonsSeparator: "_AddUploadR",
 AddUploadButtonsPanelRow: "_AddUploadPanelR",
 InputCountHidden: "_IC",
 AddButtonCell: "_Add",
 UploadButtonCell: "_Upload",
 BrowseButtonCell: "_Browse",
 RemoveButtonCell: "_Remove",
 CancelButtonCell: "_Cancel",
 CommonErrorDiv: "_CErr",
 PlatformErrorTable: "_PlatformErrorPanel",
 ButtonImageIdPostfix: "Img",
 UploadInputsTable: "_UploadInputs",
 ProgressPanel: "_ProgressPanel",
 ProgressControl: "_UCProgress",
 SlUploadHelper: "_SLUploadHelper",
 SlUploadHost: "_SLUploadHost",
 FakeFocusInput: "_FFI"
};
var __aspxErrorTextResponsePrefix = "DXER:";
var __aspxBrowseButtonCellClassName = "dxBB";
var __aspxClearButtonCellClassName = "dxCB";
var __aspxRemoveButtonCellClassName = "dxRB";
var __aspxBrowseButtonFocusClassName = "dxbf";
var __aspxFITextBoxHoverDocumentClassNamePostfix = "_dxFITextBoxHover";
var __aspxFIButtonHoverDocumentClassNamePostfix = "_dxFIButtonHover";
var __aspxProgressInfoQueryParamName = "DXProgressInfo";
var __aspxUploadingCallbackQueryParamName = "DXUploadingCallback";
var __aspxHelperUploadingCallbackQueryParamName = "DXHelperUploadingCallback";
var __aspxProgressHandlerKeyQueryParamName = "DXProgressHandlerKey";
var __aspxDefaultPacketSizeValue = 200000;
var __aspxDefaultTemporaryFolderPath = "~\\App_Data\\UploadTemp\\";
var __aspxCancelUploadFakeQueryParamName = "DXFakeQueryParam";
ASPxClientUploadControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.fileInputSpacing = "";
  this.generalErrorText = "";
  this.unspecifiedErrorText = "";
  this.uploadProcessingErrorText = "";
  this.uploadWasCanceledErrorText = "";
  this.invalidWindowsPathErrorText = "";
  this.tooManyFilesErrorText = "";
  this.selectedSeveralFilesText = "";
  this.validationSettings = {};
  this.invalidFileNames = [];
  this.enableMultiSelect = false;
  this.isNative = false;
  this.isInCallback = false;
  this.isAborted = false;
  this.isCancel = false;
  this.uploadingTimerID = null;
  this.isProgressWaiting = false;
  this.isResponseWaiting = false;
  this.progressHandlerPage = "";
  this.uploadProcessingEnabled = false;
  this.advancedModeEnabled = false;
  this.autoModeEnabled = false;
  this.fileApiAvailable = null;
  this.uploadHelper = null;
  this.slUploadHelperUrl = "";
  this.packetSize = __aspxDefaultPacketSizeValue;
  this.tempFolderPath = __aspxDefaultTemporaryFolderPath;
  this.nullText = null;
  this.nullTextItem = null;
  this.templateDisabledTextBoxItem = null;
  this.templateDisabledClearBoxItem = null;
  this.templateHoveredBrowseItem = null;
  this.templatePressedBrowseItem = null;
  this.templateDisabledBrowseItem = null;
  this.templateDisabledRemoveItem = null;
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
  this.suppressTextChangedHandling = false;
  this.fileInputIsHidden = true;
  this.FileUploadComplete = new ASPxClientEvent();
  this.FilesUploadComplete = new ASPxClientEvent();
  this.FileUploadStart = new ASPxClientEvent();
  this.UploadingProgressChanged = new ASPxClientEvent();
  this.TextChanged = new ASPxClientEvent();
  this.FileInputCountChanged = new ASPxClientEvent();
 },
 InlineInitialize: function () {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeHelpers();
  this.UpdateNullTextState();
  this.SetUploadButtonEnabled(false);
  if(this.IsSlUploadHelperEnabled() && !__aspxOpera)
   this.SetAllFileInputRowsEnabled(false);
 },
 Initialize: function() {
  ASPxClientControl.prototype.Initialize.call(this);
  if(!this.GetMainElement())
   return;
  this.AdjustMainElementWidth();
  if (__aspxFirefox && this.isNative)
   this.CorrectFileInputSize();
  if (__aspxIE && __aspxBrowserVersion == 7) {
   var mainElement = this.GetMainElement();
   _aspxGetChildByTagName(mainElement, "TABLE", 0).style.borderCollapse = "separate";
   mainElement.className += " dxuc-IE7";
  }
  if (__aspxOpera && !frames[this.GetFakeIframeName()])
   this.ReinitializeIFrame(this.GetFakeIframe());
  this.GetIFrameUrl();
  this.InitializeForm();
  this.InitializeInputElements();
  this.InitializeHelpersElement();
  this.InitializeFakeFocusInputElement();
  this.InitializeTemplates();
  if(!this.isNative)
   this.InitializeFileInputStyles();
  _aspxAttachEventToElement(__aspxIE ? this.GetFakeIframeElement() : this.GetFakeIframe(), "load",
   new Function("aspxFakeUploadIframeOnLoad('" + this.name + "');"));
  for(var i = 0; i < this.GetFileInputCountInternal(); i++)
   this.ChangeEventsToFileInput(true, i);
 },
 InitializeHelpers: function() {
  if(this.IsFileApiEnabled())
   this.uploadHelper = new ASPxClientHtml5UploadHelper(this);
  else if(this.IsSlUploadHelperEnabled())
   this.uploadHelper = new ASPxClientSlUploadHelper(this);
 },
 InitializeHelpersElement: function() {
  if(this.IsSlUploadHelperEnabled()) {
   if(!__aspxIE) {
    var slHost = document.createElement("DIV");
    _aspxSetAttribute(slHost, "id", this.GetSlUploadHostElementID());
    _aspxSetAttribute(slHost.style, "position", "absolute");
    _aspxSetAttribute(slHost.style, "width", "0px");
    _aspxSetAttribute(slHost.style, "height", "0px");
    _aspxSetAttribute(slHost.style, "border-width", "0px");
    var mainCell = this.GetUploadInputsTable().parentNode;
    mainCell.appendChild(slHost);
   }
   var indexs = ["T"];
   for(var i = 0; i < this.GetFileInputCountInternal(); i++)
    indexs.push(i);
   for(var i = 0; i < indexs.length; i++) {
    var index = indexs[i];
    var slHelper = this.uploadHelper.CreateSlObject(this.slUploadHelperUrl, index);
    if(this.GetSlUploadHostElement()) {
     if(index != "T")
      this.GetSlUploadHostElement().appendChild(slHelper);
    }
    else
     this.GetTextBoxCell(index).insertBefore(slHelper, this.GetFileInputElement(index));
    this.GetTextBoxCell(index).removeChild(this.GetFileInputElement(index));
   }
  }
  else if(this.IsShowPlatformErrorElement())
   this.SetVisiblePlatformErrorElement(true);
 },
 InitializeInputElements: function() {
  var initializers = {
   filtration: {
    condition: !this.IsSlUploadHelperEnabled() && this.validationSettings.allowedFileExtensions,
    initialize: function(fileInput) {
     fileInput.accept = fileInput.accept.replace(/\/\*/g, "");
    }
   },
   multiselection: {
    condition: this.IsFileApiEnabled() && this.enableMultiSelect,
    initialize: function(fileInput) {
     fileInput.multiple = true;
    }
   },
   postBackUpload: {
    condition: this.autoModeEnabled && this.IsAdvancedModeEnabled(),
    initialize: function(fileInput) {
     fileInput.name = "";   
    }
   }
  };
  var inputCount = this.GetFileInputCountInternal();
  for(var initializerName in initializers) {
   var initializer = initializers[initializerName];
   if(initializer.condition) {
    for(var i = 0; i < inputCount; i++) {
     var fileInput = this.GetFileInputElement(i);
     initializer.initialize(fileInput);
    }
    var fileInputRowTemplate = this.GetFileInputRowTemplate();
    var fileInputTemplate = _aspxGetChildByTagName(fileInputRowTemplate, "INPUT", 0);
    initializer.initialize(fileInputTemplate);
   }
  }
 },
 InitializeFakeFocusInputElement: function() {
  if(this.IsFocusNeedReset()) {
   var mainCell = this.GetUploadInputsTable().parentNode;
   var div = _aspxCreateHtmlElementFromString("<div class='dxucFFIHolder'></div>"); 
   mainCell.appendChild(div);   
   var fakeFocusInput = _aspxCreateHtmlElementFromString("<input readonly='readonly' class='dxucFFI'></input>"); 
   fakeFocusInput.id = this.GetFakeFocusInputElementID();
   div.appendChild(fakeFocusInput);
  }
 },
 InitializeTemplates: function() {
  this.clearFileInputTempalteHtml = _aspxGetChildByTagName(this.GetFileInputRowTemplate(), "TD", 0).innerHTML;
  this.fileInputRowTemplateNode = this.GetFileInputRowTemplate().cloneNode(true);
  _aspxSetElementDisplay(this.fileInputRowTemplateNode, true);
  var errorRowTemplate = this.GetErrorRowTemplate();
  if(errorRowTemplate)
   this.errorRowTemplateNode = this.GetErrorRowTemplate().cloneNode(true);
  if(this.fileInputSpacing != "") {
   this.fileInputSeparatorTemplateNode = this.GetFileInputSeparatorRowTemplate().cloneNode(true);
   _aspxSetElementDisplay(this.fileInputSeparatorTemplateNode, true);
  }
 },
 InitializeForm: function() {
  var form = this.GetParentForm();
  if (form) form.enctype = form.encoding = "multipart/form-data";
 },
 InitializeFileInputStyles: function() {
  var styleSheet = _aspxGetCurrentStyleSheet();
  _aspxAddStyleSheetRule(styleSheet,
          " ." + this.GetFileInputOnTextBoxHoverClassName(),
          "cursor: " + _aspxGetCurrentStyle(this.GetTextBoxCell("T"))["cursor"] + ";");
  _aspxAddStyleSheetRule(styleSheet,
          " ." + this.GetFileInputOnBrowseButtonHoverClassName(),
          "cursor: " + _aspxGetCurrentStyle(this.GetBrowseButtonCell("T"))["cursor"] + ";");
 },
 ReinitializeIFrame: function(iframe) {
  var divElem = document.createElement("DIV");
  _aspxSetElementDisplay(divElem, false);
  var parentIframe = iframe.parentNode;
  parentIframe.appendChild(divElem);
  divElem.appendChild(iframe);
 },
 AttachEventForElement: function(element, eventName, func, detachOldEvent) {
  if(detachOldEvent && element["dx" + eventName])
   _aspxDetachEventFromElement(element, eventName, element["dx" + eventName]);
  element["dx" + eventName] = func;
  _aspxAttachEventToElement(element, eventName, element["dx" + eventName]);
 },
 DetachEventForElement: function(element, eventName) {
  if(element["dx" + eventName]) {
   _aspxDetachEventFromElement(element, eventName, element["dx" + eventName]);
   element["dx" + eventName] = null;
  }
 },
 ChangeEventsMethod: function(attach) {
  return attach ? this.AttachEventForElement : this.DetachEventForElement;
 },
 ChangeEventsToFileInput: function(attach, index) {
  var method = this.ChangeEventsMethod(attach);
  var fileInput = this.GetFileSelectorElement(index);
  if(!this.isNative) {
   var textBoxCell = this.GetTextBoxCell(index);
   method(textBoxCell, "mousemove", new Function("event", "aspxUTextBoxMouseMove(event, '" + this.name + "'," + index + ");"));
   method(textBoxCell, "mouseout", new Function("event", "aspxUTextBoxMouseOut(event, '" + this.name + "'," + index + ");"));
   method(textBoxCell, "click", function(event) { this.OnTextBoxClick(event, index); }.aspxBind(this));
   var browseButton = this.GetBrowseButtonCell(index);
   method(browseButton, "mousemove", new Function("event", "aspxUBrowseButtonMouseMove(event, '" + this.name + "'," + index + ");"));
   method(browseButton, "mouseout", new Function("event", "aspxUBrowseButtonMouseOut(event, '" + this.name + "'," + index + ");"));
   method(browseButton, "click", function(event) { this.OnBrowseButtonClick(event, index); }.aspxBind(this));
   method(fileInput, "mousemove", new Function("event", "aspxUFileInputMouseMove(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "mouseout", new Function("event", "aspxUFileInputMouseOut(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "mousedown", new Function("event", "aspxUFileInputMouseDown(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "focus", new Function("event", "aspxUFileInputGotFocus(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "blur", new Function("event", "aspxUFileInputLostFocus(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "keydown", new Function("event", "aspxUFileInputKeyDown(event, '" + this.name + "'," + index + ");"));
  }
  if(!this.IsSlUploadHelperEnabled())
   method(fileInput, "change", new Function("event", "aspxUTextChanged('" + this.name + "'," + index + ");"));
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.AdjustMainElementWidth();
  if (__aspxFirefox && this.isNative) {
   this.CorrectFileInputSize();
   this.InitializeTemplates();
  }
 },
 AdjustMainElementWidth: function() {
  var element = this.GetMainElement();
  if(this.IsDisplayed() && element.style.width == "") {
   if(__aspxIE)
    element.style.width = _aspxGetClearClientWidth(element);
   else
    element.style.width = _aspxGetCurrentStyle(element).width;
  }
 },
 CorrectFileInputSize: function() {
  if(!this.IsDisplayed())
   return;
  var width = this.GetInputWidth();
  var fontSize = this.GetInputFontSize();
  var size = this.FindInputSize(width, fontSize);
  this.GetFileInputElement("T").size = size;
  var fileInputCount = this.GetFileInputCountInternal();
  for (var i = 0; i < fileInputCount; i++)
   this.GetFileInputElement(i).size = size;
 },
 GetInputWidth: function() {
  var width = 0;
  if (this.GetFileInputCountInternal() > 0)
   width = this.GetFileInputElement(0).clientWidth;
  else {
   _aspxSetElementDisplay(this.GetFileInputRowTemplate(), true);
   width = this.GetFileInputElement("T").clientWidth;
   _aspxSetElementDisplay(this.GetFileInputRowTemplate(), false);
  }
  return width;
 },
 GetInputFontSize: function() {
  if (this.GetFileInputCountInternal() > 0)
   return _aspxGetCurrentStyle(this.GetFileInputElement(0)).fontSize;
  else
   return _aspxGetCurrentStyle(this.GetFileInputElement("T")).fontSize;
 },
 FindInputSize: function(width, fontSize) {
  var spanInput = document.createElement("SPAN");
  document.body.appendChild(spanInput);
  var fakeInput = document.createElement("INPUT");
  fakeInput.type = "file";
  fakeInput.size = 1;
  fakeInput.style.fontSize = fontSize;
  spanInput.appendChild(fakeInput);
  var stepSize = 1;
  while (true) {
   var previousInputWidth = spanInput.offsetWidth;
   fakeInput.size += stepSize;
   if(previousInputWidth == spanInput.offsetWidth) {
    fakeInput.size = 1;
    break;
   }
   if (spanInput.offsetWidth == width)
    break;
   else if (spanInput.offsetWidth > width) {
    if (stepSize > 1) {
     fakeInput.size -= stepSize;
     stepSize = 1;
    } else {
     fakeInput.size -= 1;
     break;
    }
   }
   else
    stepSize *= 2;
  }
  var inputSize = fakeInput.size;
  _aspxRemoveElement(fakeInput);
  _aspxRemoveElement(spanInput);
  return inputSize;
 },
 GetSelectedInputFileCount: function(isClearCache) {
  if(isClearCache)
   this.selectedInputFileCount = null;
  if (!_aspxIsExists(this.selectedInputFileCount)) {
   this.selectedInputFileCount = 0;
   var fileInputCount = this.GetFileInputCountInternal();
   for (var i = 0; i < fileInputCount; i++) {
    var files = this.GetFiles(i);
    if(files.length > 0)
     this.selectedInputFileCount += files.length;
   }
  }
  return this.selectedInputFileCount;
 },
 GetFileInputCountInternal: function() {
  var element = this.GetInputCountHiddenField();
  return parseInt(element.value, 10);
 },
 SetFileInputCountInternal: function(value) {
  this.GetInputCountHiddenField().value = value;
 },
 GetInputCountHiddenField: function() {
  if (!this.inputCountHiddenField) {
   var id = this.name + ASPxClientUploadControlIDSuffix.InputCountHidden;
   this.inputCountHiddenField = _aspxGetElementById(id);
  }
  return this.inputCountHiddenField;
 },
 GetIFrameUrl: function() {
  if (!this.iframeUrl) {
   var iframe = __aspxIE ? this.GetFakeIframeElement() : this.GetFakeIframe();
   var iframeSrc = _aspxGetAttribute(iframe, "src");
   this.iframeUrl = (iframeSrc) ? iframeSrc : "";
  }
  return this.iframeUrl;
 },
 SetIFrameUrl: function(url) {
  var iframe = __aspxIE ? this.GetFakeIframeElement() : this.GetFakeIframe();
  _aspxSetAttribute(iframe, "src", url);
 },
 GetProgressInfoKey: function() {
  return this.uploadingKey;
 },
 GetErrorRow: function(index) {
  return this.GetChild(ASPxClientUploadControlIDSuffix.ErrorRow + index);
 },
 GetErrorCell: function(index) {
  return _aspxGetElementsByTagName(this.GetErrorRow(index), "td")[0];
 },
 GetErrorRowTemplate: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.ErrorRowTemplate);
 },
 GetFakeIframe: function() {
  var name = this.GetFakeIframeName();
  return __aspxIE ? frames[name] : _aspxGetElementById(name);
 },
 GetFakeIframeName: function() {
  return this.name + ASPxClientUploadControlIDSuffix.UploadIFrame;
 },
 GetFakeIframeElement: function() {
  return this.GetFakeIframe().frameElement;
 },
 GetFakeIframeDocument: function() {
  return __aspxIE ? this.GetFakeIframe().document : this.GetFakeIframe().contentDocument;
 },
 GetFakeIframeResponseString: function() {
  var html = _aspxDecodeHtml(this.GetFakeIframeDocument().body.innerHTML);
  if(__aspxIE && __aspxBrowserVersion == 8) 
   html = this.RestoreProtectedWhitespaceSeries(html);
  return html;
 },
 GetFileInputRow: function(index) {
  return _aspxGetParentByTagName(this.GetTextBoxCell(index), "TR");
 },
 GetTextBoxCellID: function(index) {
  return this.name + ASPxClientUploadControlIDSuffix.TextBoxCell + index;
 },
 GetTextBoxCell: function(index) {
  return _aspxGetInputElementById(this.GetTextBoxCellID(index));
 },
 GetClearBoxCell: function(index) {
  return _aspxGetChildrenByPartialClassName(this.GetFileInputRow(index), __aspxClearButtonCellClassName)[0];
 },
 GetFileInputElement: function(index) {
  return _aspxGetInputElementById(this.GetTextBoxCellID(index) + ASPxClientUploadControlIDSuffix.FileInput);
 },
 GetFileInputOnTextBoxHoverClassName: function() {
  return this.name + __aspxFITextBoxHoverDocumentClassNamePostfix;
 },
 GetFileInputOnBrowseButtonHoverClassName: function() {
  return this.name + __aspxFIButtonHoverDocumentClassNamePostfix;
 },
 GetFileFakeInputElement: function(index) {
  return _aspxGetInputElementById(this.GetTextBoxCellID(index) + ASPxClientUploadControlIDSuffix.FileFakeInput);
 },
 GetFileInputRowTemplate: function() {
  if(!this.fileInputRowTemplate) {
   var inputTemplate = this.GetFileInputRow("T");
   this.fileInputRowTemplate = _aspxGetParentByTagName(inputTemplate, "TR");
  }
  return this.fileInputRowTemplate;
 },
 GetFileInputsTBody: function() {
  if (!this.tbody)
   this.tbody = _aspxGetParentByTagName(this.GetFileInputRowTemplate(), "TBODY");
  return this.tbody;
 },
 GetUploadInputsTable: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.UploadInputsTable);
 },
 GetProgressPanel: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.ProgressPanel);
 },
 GetProgressControl: function() {
  if (!this.progressControl) {
   var name = this.name + ASPxClientUploadControlIDSuffix.ProgressControl;
   this.progressControl = aspxGetControlCollection().Get(name);
  }
  return this.progressControl;
 },
 GetBrowseButtonCell: function(index) {
  return _aspxGetChildrenByPartialClassName(this.GetFileInputRow(index), __aspxBrowseButtonCellClassName)[0];
 },
 GetRemoveButtonCell: function(index) {
  return _aspxGetChildrenByPartialClassName(this.GetFileInputRow(index), __aspxRemoveButtonCellClassName)[0];
 },
 GetAddButtonCell: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.AddButtonCell);
 },
 GetUploadButtonCell: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.UploadButtonCell);
 },
 GetCancelButtonCell: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.CancelButtonCell);
 },
 GetRemoveButtonLink: function(index) {
  return _aspxGetChildByTagName(this.GetRemoveButtonCell(index), "A", 0);
 },
 GetAddButtonLink: function() {
  return _aspxGetChildByTagName(this.GetAddButtonCell(), "A", 0);
 },
 GetUploadButtonLink: function() {
  return _aspxGetChildByTagName(this.GetUploadButtonCell(), "A", 0);
 },
 GetClearButtonLink: function(index) {
  return _aspxGetChildByTagName(this.GetClearBoxCell(index), "A", 0);
 },
 GetAddUploadButtonsSeparatorRow: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.AddUploadButtonsSeparator);
 },
 GetAddUploadButtonsPanelRow: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.AddUploadButtonsPanelRow);
 },
 GetFileInputSeparatorRow: function(index) {
  if (this.fileInputSpacing == "" || this.GetFileInputCountInternal() == 1)
   return null;
  if (!_aspxIsExists(index))
   index = 0;
  var ret = null;
  var errorRow = this.GetErrorRow(index);
  var fileInput = this.GetFileInputRow(index);
  var target = errorRow ? errorRow : fileInput;
  if (target) {
   var parent = target.parentNode;
   var rowIndex = _aspxArrayIndexOf(parent.childNodes, target);
   var element = parent.childNodes[rowIndex + 1];
   if (!element.id)
    ret = parent.childNodes[rowIndex + 1];
  }
  return ret;
 },
 GetFileInputSeparatorRowTemplate: function() {
  if (this.fileInputSpacing == "")
   return null;
  var parent = this.GetFileInputRowTemplate().parentNode;
  var fileInputRowIndex = _aspxArrayIndexOf(parent.childNodes, this.GetFileInputRowTemplate());
  fileInputRowIndex += this.errorRowTemplateNode ? 2 : 1;
  return parent.childNodes[fileInputRowIndex];
 },
 GetCommonErrorDivElement: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.CommonErrorDiv);
 },
 GetPlatformErrorElement: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.PlatformErrorTable);
 },
 SetEnabledInternal: function(enabled) {
  this.SetAllFileInputRowsEnabled(enabled);
  this.SetButtonEnabled(this.GetAddButtonCell(), enabled);
  this.SetButtonEnabled(this.GetUploadButtonCell(), enabled);
 },
 SetFileInputRowEnabled: function(index, enabled) {
  this.SetTextBoxEnabled(this.GetTextBoxCell(index), enabled);
  this.SetClearBoxEnabled(this.GetClearBoxCell(index), enabled);
  this.SetButtonEnabled(this.GetBrowseButtonCell(index), enabled);
  this.SetButtonEnabled(this.GetRemoveButtonCell(index), enabled);
 },
 SetAllFileInputRowsEnabled: function(enabled) {
  var fileInputCount = this.GetFileInputCountInternal();
  for (var i = 0; i < fileInputCount; i++)
   this.SetFileInputRowEnabled(i, enabled);
 },
 SetNullTextEnabled: function(index, enabled) {
  if(this.nullText != null) {
   if(enabled)
    this.GetFileFakeInputElement(index).value = this.nullText;
   this.ChangeTextBoxNullTextState(index, this.GetTextBoxCell(index), enabled);
   this.ChangeClearBoxNullTextState(this.GetClearBoxCell(index), enabled);
  }
 },
 SetUploadButtonEnabled: function(enabled) {
  this.SetButtonEnabled(this.GetUploadButtonCell(), enabled);
 },
 SetTextBoxEnabled: function(element, enabled) {
  this.ChangeTextBoxEnabledState(element, enabled);
  this.ChangeTextBoxEnabledAttributes(element, _aspxChangeAttributesMethod(enabled), enabled);
 },
 SetClearBoxEnabled: function(element, enabled) {
  this.ChangeClearBoxEnabledState(element, enabled);
  this.ChangeClearBoxEnabledAttributes(element, _aspxChangeAttributesMethod(enabled), enabled);
 },
 SetButtonEnabled: function(element, enabled) {
  this.ChangeButtonEnabledState(element, enabled);
  this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled), enabled);
 },
 GetSlUploadHelperElementID: function(index) {
  return this.GetTextBoxCellID(index) + ASPxClientUploadControlIDSuffix.SlUploadHelper;
 },
 GetSlUploadHelperElement: function(index) {
  return _aspxGetElementById(this.GetSlUploadHelperElementID(index));
 },
 GetSlUploadHostElementID: function() {
  return this.name + ASPxClientUploadControlIDSuffix.SlUploadHost;
 },
 GetSlUploadHostElement: function() {
  if(!this.slUploadHostElement)
   this.slUploadHostElement = _aspxGetElementById(this.GetSlUploadHostElementID());
  return this.slUploadHostElement;
 },
 GetFakeFocusInputElementID: function() {
  return this.name + ASPxClientUploadControlIDSuffix.FakeFocusInput;
 },
 GetFakeFocusInputElement: function() {
  return _aspxGetInputElementById(this.GetFakeFocusInputElementID());
 },
 GetFileSelectorElement: function(index) {
  if(this.IsSlUploadHelperEnabled())
   return this.GetSlUploadHelperElement(index);
  return this.GetFileInputElement(index);
 },
 SetFileInputTooltip: function(index) {
  if(!this.isNative) {
   var files = this.GetFiles(index, true);
   var value = '';
   if((typeof files == "object") && (files instanceof Array)) {
    if((__aspxIE || __aspxWebKitFamily) && files.length > 1) {
     var i = 0;
     while(i < files.length) {
      if(i > 0)
       value += '\n';
      value += _aspxTrim(files[i++]);
     }
    }
    else
     value = files.join(', ');
   }
   var handler = (value != '') ? _aspxSetAttribute : _aspxRemoveAttribute;
   handler(this.GetTextBoxCell(index), "title", value);
  }
 },
 GetIsResponseValid: function() {
  var ret = false;
  try {
   if (eval(this.GetFakeIframeResponseString()) != null)
    ret = true;
  }
  catch (e) {
   if (__aspxIE)
    this.GetFakeIframe().window.location = this.GetIFrameUrl(); 
  }
  return ret;
 },
 GetFiles: function(index, isShortName) {
  var files = [];
  if(this.IsAdvancedModeEnabled()) {
   var fileInfos = this.uploadHelper.GetFileInfos(index);
   if(fileInfos) {
    for(var i = 0; i < fileInfos.length; i++)
     files.push(isShortName ? fileInfos[i].fileName : fileInfos[i].fullName);
   }
  }
  else {
   var fileInputElement = this.GetFileInputElement(index);
   if(fileInputElement && fileInputElement.value != '')
    files.push(isShortName ? ASPxClientUploadControl.GetFileName(fileInputElement.value) : fileInputElement.value);
  }
  return files;
 },
 GetValue: function(index, isShortName) {
  var value = this.GetFiles(index, isShortName).join(', ');
  return value != '' ? value : null;
 },
 ChangeTextBoxNullTextState: function(index, element, enabled) {
  if(element && this.nullText != null && this.nullTextItem) {
   var restore = !enabled;
   var isIE7 = __aspxIE && __aspxBrowserMajorVersion < 8
   var styleAttrName = isIE7 ? 'cssText' : 'style';
   _aspxChangeAttributesMethod(restore)(element, isIE7 ? 'className' : 'class');
   _aspxChangeAttributesMethod(restore)(isIE7 ? element.style : element, styleAttrName);
   var inputRow = null;
   if(this.nullTextItem.inputRow) {
    inputRow = this.GetFileInputRow(index);
    _aspxChangeAttributesMethod(restore)(isIE7 ? inputRow.style : inputRow, styleAttrName);
   }
   var editArea = this.GetFileFakeInputElement(index);
   if(editArea)
    _aspxChangeAttributesMethod(restore)(isIE7 ? editArea.style : editArea, styleAttrName);
   if(enabled) {
    element.className = this.nullTextItem.textBox.className;
    element.style.cssText = this.nullTextItem.textBox.cssText;
    if(editArea)
     editArea.style.cssText = this.nullTextItem.editArea.cssText;
    if(this.nullTextItem.inputRow)
     inputRow.style.cssText = this.nullTextItem.inputRow.cssText;
   }
  }
 },
 ChangeTextBoxEnabledState: function(element, enabled) {
  if (element) {
   aspxGetStateController().SetElementEnabled(element, enabled);
   var editArea = _aspxGetChildByTagName(element, "INPUT", 1);
   if (editArea)
    aspxGetStateController().SetElementEnabled(editArea, enabled);
  }
 },
 ChangeTextBoxEnabledAttributes: function(element, method, enabled) {
  if (element) {
   var inputs = _aspxGetElementsByTagName(element, "INPUT");
   for(var i = 0; i < inputs.length; i++)
    inputs[i].disabled = !enabled;
  }
 },
 ChangeClearBoxNullTextState: function(element, enabled) {
  if (element && this.nullText != null && this.nullTextItem) {
   var restore = !enabled;
   var isIE7 = __aspxIE && __aspxBrowserMajorVersion < 8;
   _aspxChangeAttributesMethod(restore)(isIE7 ? element.style : element, isIE7 ? 'cssText' : 'style');
   _aspxChangeAttributesMethod(restore)(element, isIE7 ? 'className' : 'class');
   if(enabled) {
    element.className = this.nullTextItem.clearBox.className;
    element.style.cssText = this.nullTextItem.clearBox.cssText;
   }
  }
 },
 ChangeClearBoxEnabledState: function(element, enabled) {
  if (element) {
   aspxGetStateController().SetElementEnabled(element, enabled);
  }
 },
 ChangeClearBoxEnabledAttributes: function(element, method, enabled) {
  if (element) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   this.ChangeButtonEnabledAttributes(link, method, enabled);
  }
 },
 ChangeButtonEnabledState: function(element, enabled) {
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 ChangeButtonEnabledAttributes: function(element, method, enabled) {
  if (element) {
   method(element, "onclick");
   if (!__aspxIE && enabled)
    element.onclick = new Function(_aspxGetAttribute(element, "onclick"));
   var link = _aspxGetChildByTagName(element, "A", 0);
   if (link) {
    var isBrowseButton = element.className.indexOf(__aspxBrowseButtonCellClassName) != -1;
    if(!isBrowseButton)
     _aspxSetOrRemoveAttribute(link, "tabindex", !enabled ? "-1" : "0");
    _aspxSetOrRemoveAttribute(link, "unselectable", !enabled ? "on" : null);
    if(__aspxNetscapeFamily || __aspxWebKitFamily) {
     method = this.ChangeEventsMethod(!enabled);
     method(link, "mousedown", function(e) {
      e.preventDefault();
      return false;
     }, true);
    }
   }
  }
 },
 ChangeButtonHoveredState: function(element, enabled) {
  if (element){
   element = enabled  ? aspxGetStateController().GetHoverElement(element) : null;
   aspxGetStateController().SetCurrentHoverElement(element);
  }
 },
 ChangeButtonPressedState: function(element, enabled) {
  if (element) {
   var controller = aspxGetStateController();
   var pressedElement = controller.GetPressedElement(element);
   controller.SetCurrentPressedElement(enabled ? pressedElement : null);
   controller.savedCurrentPressedElement = controller.currentPressedElement;
  }
 },
 AddFileInput: function(isUi) {
  var tBody = this.GetFileInputsTBody();
  var addUploadButtonsElement = this.GetAddUploadButtonsSeparatorRow();
  if (addUploadButtonsElement == null)
   addUploadButtonsElement = this.GetAddUploadButtonsPanelRow();
  if (this.fileInputSpacing != "" && this.GetFileInputCountInternal() != 0) {
   var separatorRow = this.fileInputSeparatorTemplateNode.cloneNode(true);
   tBody.insertBefore(separatorRow, addUploadButtonsElement);
  }
  tBody.insertBefore(this.CreateFileInputRow(this.GetFileInputCountInternal()), addUploadButtonsElement);
  var errorRow = this.CreateErrorRow(this.GetFileInputCountInternal());
  if(errorRow)
   tBody.insertBefore(errorRow, addUploadButtonsElement);
  this.ChangeEventsToFileInput(true, this.GetFileInputCountInternal());
  var newCount = this.GetFileInputCountInternal() + 1;
  this.SetFileInputCountInternal(newCount);
  this.SetNullTextEnabled(newCount - 1, true);
  var element = this.GetAddUploadButtonsSeparatorRow();
  if (element && this.GetFileInputCountInternal() > 0 && !_aspxGetElementDisplay(element))
   _aspxSetElementDisplay(element, true);
  if(isUi)
   this.RaiseFileInputCountChanged();
 },
 RemoveFileInput: function(index, isUi) {
  var count = this.GetFileInputCountInternal();
  if(!_aspxIsExists(index)) 
   index = count - 1;
  if(count == 0 || index >= count) return;
  if(__aspxIE && __aspxBrowserVersion == 8) {  
   var slElement = _aspxGetChildByTagName(this.GetTextBoxCell(index), "OBJECT", 0);
   _aspxRemoveElement(slElement);
  }
  _aspxRemoveElement(this.GetFileInputSeparatorRow((index == 0) ? index : index - 1));
  _aspxRemoveElement(this.GetFileInputRow(index));
  _aspxRemoveElement(this.GetErrorRow(index));
  if(this.IsSlUploadHelperEnabled())
   this.uploadHelper.RemoveSlObjectInHostElement(index);
  this.RedefineAttributtes(index + 1);
  this.SetFileInputCountInternal(this.GetFileInputCountInternal() - 1);
  this.UpdateUploadButtonState();
  var element = this.GetAddUploadButtonsSeparatorRow();
  if (element && this.GetFileInputCountInternal() == 0 && _aspxGetElementDisplay(element))
   _aspxSetElementDisplay(element, false);
  if(isUi)
   this.RaiseFileInputCountChanged();
  var inputsTable = this.GetUploadInputsTable();
  if(__aspxIE && __aspxBrowserVersion == 9 && inputsTable.style.borderCollapse == "collapse") { 
   inputsTable.style.borderCollapse = "separate";
   inputsTable.style.borderCollapse = "collapse";
  }
 },
 SetVisiblePlatformErrorElement: function(display) {
  if(this.IsShowPlatformErrorElement()) {
   _aspxSetElementDisplay(this.GetUploadInputsTable(), !display);
   _aspxSetElementDisplay(this.GetPlatformErrorElement(), display);
  }
 },
 RedefineAttributtes: function(startIndex) {
  var tBody = this.GetFileInputsTBody();
  for (var index = startIndex; index < this.GetFileInputCountInternal(); index++) {
   this.ChangeEventsToFileInput(false, index);
   var newIndex = index - 1;
   var textBoxCell = this.GetTextBoxCell(index);
   var clearBoxCell = this.GetClearBoxCell(index);
   var browseButton = this.GetBrowseButtonCell(index);
   var removeButton = this.GetRemoveButtonCell(index);
   var errorRow = this.GetErrorRow(index);
   this.RedefineInputAttributes(textBoxCell, newIndex);
   this.RedefineClearAttributes(clearBoxCell, newIndex);
   this.RedefineBrowseAttributes(browseButton, newIndex);
   this.RedefineRemoveAttributes(removeButton, newIndex);
   if(errorRow)
    errorRow.id = this.name + ASPxClientUploadControlIDSuffix.ErrorRow + newIndex;
   this.ChangeEventsToFileInput(true, newIndex);
  }
 },
 RedefineInputAttributes: function(textBoxCell, index, isNewElement) {
  textBoxCell.id = this.GetTextBoxCellID(index);
  if(this.IsSlUploadHelperEnabled()) {
   if(this.GetSlUploadHostElement())
    this.uploadHelper.RedefineSlObjectAttributesInHostElement(index + 1, index, isNewElement);
   else
    this.uploadHelper.RedefineSlObjectAttributes(textBoxCell, index, isNewElement);
  }
  else {
   var inputElement = _aspxGetChildByTagName(textBoxCell, "INPUT", 0);
   inputElement.id = textBoxCell.id + ASPxClientUploadControlIDSuffix.FileInput;
   if(!this.IsAdvancedModeEnabled())    
    inputElement.name = inputElement.id;
  }
  var fakeInputElement = _aspxGetChildByTagName(textBoxCell, "INPUT", this.IsSlUploadHelperEnabled() ? 0 : 1);
  if(fakeInputElement)
   fakeInputElement.id = textBoxCell.id + ASPxClientUploadControlIDSuffix.FileFakeInput;
 },
 RedefineBrowseAttributes: function(browseButton, newIndex) {
  if (browseButton) {
   var newId = this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + newIndex;
   browseButton.id = newId;
   var img = _aspxGetChildByTagName(browseButton, "IMG", 0);
   if (img)
    img.id = newId + ASPxClientUploadControlIDSuffix.ButtonImageIdPostfix;
  }
 },
 RedefineClearAttributes: function(clearButton, newIndex) {
  if (clearButton) {
   var newId = this.name + ASPxClientUploadControlIDSuffix.ClearBoxCell + newIndex;
   clearButton.id = newId;
   var link = _aspxGetChildByTagName(clearButton, "A", 0);
   var onclick = "aspxUClearFileInputClick('" + this.name + "'," + newIndex + ");";
   link.onclick = new Function(onclick);
   if(!(__aspxIE && __aspxBrowserVersion < 8))
    _aspxSetAttribute(link, "onclick", onclick);
   var img = _aspxGetChildByTagName(clearButton, "IMG", 0);
   if (img)
    img.id = newId + ASPxClientUploadControlIDSuffix.ButtonImageIdPostfix;
  }
 },
 RedefineRemoveAttributes: function(removeButton, newIndex) {
  if (removeButton) {
   var newId = this.name + ASPxClientUploadControlIDSuffix.RemoveButtonCell + newIndex;
   removeButton.id = newId;
   var onclick = "aspxURemoveFileInputClick('" + this.name + "'," + newIndex + ");";
   removeButton.onclick = new Function(onclick);
   if(!(__aspxIE && __aspxBrowserVersion < 8))
    _aspxSetAttribute(removeButton, "onclick", onclick);
   var img = _aspxGetChildByTagName(removeButton, "IMG", 0);
   if (img)
    img.id = newId + ASPxClientUploadControlIDSuffix.ButtonImageIdPostfix;
  }
 },
 SetAddButtonTextInternal: function(text) {
  var link = this.GetAddButtonLink();
  if (link)
   link.innerHTML = text;
 },
 SetUploadButtonTextInternal: function(text) {
  var link = this.GetUploadButtonLink();
  if (link)
   link.innerHTML = text;
 },
 GetAddButtonTextInternal: function() {
  var link = this.GetAddButtonLink();
  if (link)
   return link.innerHTML;
  return null;
 },
 GetUploadButtonTextInternal: function() {
  var link = this.GetUploadButtonLink();
  if (link)
   return link.innerHTML;
  return null;
 },
 CreateFileInputRow: function(index) {
  var row = this.fileInputRowTemplateNode.cloneNode(true);
  var inputCell = _aspxGetChildByTagName(row, "TD", 0);
  this.RedefineInputAttributes(inputCell, index, true);
  this.CreateTextBoxDisabledState(index);
  this.CreateClearBoxDisabledState(index);
  var clearBoxCell = _aspxGetChildrenByPartialClassName(row, __aspxClearButtonCellClassName)[0];
  this.RedefineClearAttributes(clearBoxCell, index);
  var browseButton = _aspxGetChildrenByPartialClassName(row, __aspxBrowseButtonCellClassName)[0];
  this.RedefineBrowseAttributes(browseButton, index);
  if(browseButton) {
   this.CreateBrowseHoveredState(index);
   this.CreateBrowsePressedState(index);
   this.CreateBrowseDisabledState(index);
  }
  var removeButton = _aspxGetChildrenByPartialClassName(row, __aspxRemoveButtonCellClassName)[0];
  this.RedefineRemoveAttributes(removeButton, index);
  if(removeButton)
   this.CreateRemoveDisabledState(index);
  return row;
 },
 CreateTextBoxDisabledState: function(index) {
  if (this.templateDisabledTextBoxItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.TextBoxCell + index,
    this.templateDisabledTextBoxItem.className, this.templateDisabledTextBoxItem.cssText,
    this.templateDisabledTextBoxItem.postfixes, this.templateDisabledTextBoxItem.imageUrls,
    this.templateDisabledTextBoxItem.imagePostfixes);
  }
 },
 CreateClearBoxDisabledState: function(index) {
  if (this.templateDisabledClearBoxItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.ClearBoxCell + index,
    this.templateDisabledClearBoxItem.className, this.templateDisabledClearBoxItem.cssText,
    this.templateDisabledClearBoxItem.postfixes, this.templateDisabledClearBoxItem.imageObjs,
    this.templateDisabledClearBoxItem.imagePostfixes);
  }
 },
 CreateBrowseHoveredState: function(index) {
  if (this.templateHoveredBrowseItem) {
   aspxGetStateController().AddHoverItem(this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + index,
    this.templateHoveredBrowseItem.className, this.templateHoveredBrowseItem.cssText,
    this.templateHoveredBrowseItem.postfixes, this.templateHoveredBrowseItem.imageObjs,
    this.templateHoveredBrowseItem.imagePostfixes);
  }
 },
 CreateBrowsePressedState: function(index) {
  if (this.templatePressedBrowseItem) {
   aspxGetStateController().AddPressedItem(this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + index,
    this.templatePressedBrowseItem.className, this.templatePressedBrowseItem.cssText,
    this.templatePressedBrowseItem.postfixes, this.templatePressedBrowseItem.imageObjs,
    this.templatePressedBrowseItem.imagePostfixes);
  }
 },
 CreateBrowseDisabledState: function(index) {
  if (this.templateDisabledBrowseItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + index,
    this.templateDisabledBrowseItem.className, this.templateDisabledBrowseItem.cssText,
    this.templateDisabledBrowseItem.postfixes, this.templateDisabledBrowseItem.imageObjs,
    this.templateDisabledBrowseItem.imagePostfixes);
  }
 },
 CreateRemoveDisabledState: function(index) {
  if (this.templateDisabledRemoveItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.RemoveButtonCell + index,
    this.templateDisabledRemoveItem.className, this.templateDisabledRemoveItem.cssText,
    this.templateDisabledRemoveItem.postfixes, this.templateDisabledRemoveItem.imageObjs,
    this.templateDisabledRemoveItem.imagePostfixes);
  }
 },
 CreateErrorRow: function(index) {
  var row = null;
  if(this.errorRowTemplateNode) {
   row = this.errorRowTemplateNode.cloneNode(true);
   row.id = this.name + ASPxClientUploadControlIDSuffix.ErrorRow + index;
  }
  return row;
 },
 GetUploadFormAction: function(form){
  var action = form.action;
  if(this.IsAdvancedModeEnabled())
   action = this.AddQueryParamToUrl(action, __aspxProgressHandlerKeyQueryParamName, this.GetProgressInfoKey());
  else if (this.IsUploadProcessingEnabled())
   action = this.AddQueryParamToUrl(action, __aspxProgressInfoQueryParamName, this.GetProgressInfoKey());
  if(this.IsAdvancedModeEnabled())
   action = this.AddQueryParamToUrl(action, __aspxHelperUploadingCallbackQueryParamName, this.name);
  else
   action = this.AddQueryParamToUrl(action, __aspxUploadingCallbackQueryParamName, this.name);
  return action;
 },
 AddQueryParamToUrl: function(url, paramName, paramValue) {
  var prefix = url.indexOf("?") >= 0 ? "&" : "?";
  var paramQueryString = prefix + paramName + "=" + paramValue;
  var anchorStart = url.indexOf("#");
  return anchorStart >= 0 
   ? url.substring(0, anchorStart) + paramQueryString + url.substring(anchorStart)
   : url + paramQueryString;
 },
 GetUploadFormTarget: function(form){
  return this.GetFakeIframe().name;
 },
 UploadForm: function() {
  var form = this.GetParentForm();
  if(!form) return;
  var sourceTarget = form.target;
  var soureActionString = form.action;
  var sourceMethod = form.method;
  form.action = this.GetUploadFormAction(form);
  form.target = this.GetUploadFormTarget(form);
  form.method = "post";
  var isInternalErrorOccurred = false;
  try {
   form.submit();
  }
  catch (e) {
   isInternalErrorOccurred = true;
   this.WriteResponseString(__aspxErrorTextResponsePrefix + this.generalErrorText);
   this.OnCompleteFileUpload();
  }
  form.target = sourceTarget;
  form.action = soureActionString;
  form.method = sourceMethod;
  return !isInternalErrorOccurred;
 },
 UploadFileFromUser: function() {
  if(this.GetSelectedInputFileCount(true) == 0)
   return;
  this.isAborted = false;
  this.isCancel = false;
  this.uploadProcessingErrorText = "";
  this.ClearErrorMessageCells();
  this.UpdateCommonErrorDiv("", false);
  var validateObj = {
    commonErrorText: "",
    commonCallbackData: ""
   };
  if (!this.isInCallback && !this.AreEmptyInputs()) {
   if ((this.isNative && __aspxIE && __aspxBrowserVersion != 7 && !this.ValidateWindowsFileNames())
    || !this.ValidateInputFiles(validateObj) || this.IsFileUploadCanceled(validateObj)) {
     this.RaiseFilesUploadComplete(validateObj);
     return false;
   }
   var isSuccessful = true;
   if(this.IsAdvancedModeEnabled())
    this.BeginProcessUploading();
   else {
    isSuccessful = this.UploadForm();
    if (this.IsUploadProcessingEnabled())
     this.BeginProcessUploading();
   }
   if (isSuccessful)
    this.SetEnabledInternal(false);
   return true;
  }
 },
 CancelUploading: function(isUI) {
  if (this.isInCallback) {
   if(isUI)
    this.isCancel = true;
   else
    this.isAborted = true;
   var iframeUrl = ASPx.SSLSecureBlankUrl;
   if (__aspxOpera)
    this.SetIFrameUrl(iframeUrl + "&" + __aspxCancelUploadFakeQueryParamName + "=" + (new Date()).valueOf());
   this.SetIFrameUrl(iframeUrl);
   this.EndProcessUploading();
  }
 },
 CancelUploadingFileFromHelper: function() {
  this.CancelUploading();
 },
 CancelUploadingFileFromUser: function() {
  this.CancelUploading(true);
  if(this.IsAdvancedModeEnabled())
   _aspxSetTimeout('aspxUploadAsyncCancelProcessing(\'' + this.name + '\')', 100);
 },
 IsRightToLeft: function () {
  return _aspxIsElementRightToLeft(this.GetMainElement());
 },
 IsShowProgressPanel: function() {
  return !!this.GetProgressPanel();
 },
 IsShowErrorText: function() {
  return !!this.errorRowTemplateNode;
 },
 IsUploadProcessingEnabled: function() {
  return this.uploadProcessingEnabled;
 },
 IsAdvancedModeEnabled: function() {
  return this.advancedModeEnabled && (this.IsFileApiAvailable() || this.IsSlUploadHelperAvailable());
 },
 IsFileApiEnabled: function() {
  return this.advancedModeEnabled && this.IsFileApiAvailable();
 },
 IsSlUploadHelperEnabled: function() {
  return this.advancedModeEnabled && !this.IsFileApiAvailable() && this.IsSlUploadHelperAvailable();
 },
 IsSlUploadHelperAvailable: function() {
  return ASPxClientSlUploadHelper.IsPluginAvailable();
 },
 IsFileApiAvailable: function() {
  if(this.fileApiAvailable == null) {
   var input = document.createElement("input");
   this.fileApiAvailable = "multiple" in input && "File" in window && "FormData" in window;
   this.fileApiAvailable = this.fileApiAvailable && ("slice" in window.File.prototype || 
    __aspxWebKitFamily && "webkitSlice" in window.File.prototype ||   
    __aspxNetscapeFamily && "mozSlice" in window.File.prototype);
  }
  return this.fileApiAvailable;
 },
 IsShowPlatformErrorElement: function() {
  return this.advancedModeEnabled && !this.IsFileApiAvailable() && !this.IsSlUploadHelperAvailable() && !this.autoModeEnabled;
 },
 IsHelperElementReady: function(index) {
  return this.uploadHelper.IsHelperElementReady(index);
 },
 IsFocusNeedReset: function() {
  return this.IsSlUploadHelperEnabled() ? !__aspxIE : (__aspxIE || __aspxOpera);
 },
 CreateXmlHttpRequestObject: function() {
  if(!this.xmlHttpRequest) {
   if (typeof (XMLHttpRequest) != 'undefined')
    this.xmlHttpRequest = new XMLHttpRequest();
   else if (typeof (ActiveXObject) != 'undefined')
    this.xmlHttpRequest = new ActiveXObject('Microsoft.XMLHTTP');
   this.xmlHttpRequest.onreadystatechange = new Function("aspxUploadAsyncXmlHttpResponse('" + this.name + "');");
  }
  return this.xmlHttpRequest;
 },
 BeginProcessUploading: function() {
  if (this.IsShowProgressPanel())
   window.setTimeout('aspxShowProgressInfoPanel(\'' + this.name + '\')', 600);
  this.CleanUploadingInfoPanel();
  this.uploadingTimerID = _aspxSetInterval('aspxUploadProcessing(\'' + this.name + '\')', 1000);
 },
 EndProcessUploading: function() {
  this.helperUploadingState = null;
  this.uploadingInfo = null;
  this.selectedInputFileCount = null;
  if (this.uploadingTimerID != null)
   this.uploadingTimerID = _aspxClearInterval(this.uploadingTimerID);
  if(this.IsAdvancedModeEnabled() && !this.isCancel && !this.isAborted)
   this.UploadForm();
 },
 GetHelperUploadingState: function() {
  if (!this.helperUploadingState) {
   var nextFileInfo = this.GetHelperNextFileInput(0, 0);
   this.helperUploadingState = {
    TotalFileLength: this.uploadHelper.GetTotalLength(this.GetFileInputCountInternal()),
    FileIndexesCount: this.uploadHelper.GetFileIndexesCount(this.GetFileInputCountInternal()),
    currentInputIndex: nextFileInfo.inputIndex,
    currentFileIndex: nextFileInfo.fileIndex,
    uploadedCurrentFileLength: 0,
    isNewUploading: true,
    isLastChunk: false
   };
  }
  return this.helperUploadingState;
 },
 GetHelperNextFileInput: function(startInputIndex, startFileIndex) {
  var inputIndex = null;
  var fileIndex = startFileIndex;
  var isFound = false;
  var fileInputCount = this.GetFileInputCountInternal();
  for(var i = startInputIndex; i < fileInputCount; i++) {
   currentFileInfos = this.uploadHelper.GetFileInfos(i);
   if(fileIndex < currentFileInfos.length) {
    inputIndex = i;
    isFound = true;
    break;
   }
   else
    fileIndex = 0;
  }
  return {
   inputIndex: isFound ? inputIndex : null,
   fileIndex: isFound ? fileIndex : null
  };
 },
 GetHelperRequestData: function() {
  var currentInputIndex = this.GetHelperUploadingState().currentInputIndex;
  var currentFileIndex = this.GetHelperUploadingState().currentFileIndex;
  var uploadedCurrentFileLength = this.GetHelperUploadingState().uploadedCurrentFileLength;
  var isLastChunk = false;
  var startPos = 0;
  var chunkLength = this.packetSize;
  var currentFileInfos = (currentInputIndex != null) ? this.uploadHelper.GetFileInfos(currentInputIndex) : null;
  var currentFileInfo = (currentFileIndex != null) ? currentFileInfos[currentFileIndex] : null;
  var requestData = { data: "" };
  var isEmptyFile = false;
  if(currentFileInfo) {
   if(uploadedCurrentFileLength >= currentFileInfo.fileSize) {
    isEmptyFile = uploadedCurrentFileLength == 0 && currentFileInfo.fileSize == 0;
    if(isEmptyFile) {
     chunkLength = 0;
     uploadedCurrentFileLength = 1;
    }
    else {
     uploadedCurrentFileLength = 0;
     var nextFileInfo = this.GetHelperNextFileInput(currentInputIndex, currentFileIndex + 1);
     currentInputIndex = nextFileInfo.inputIndex;
     currentFileIndex = nextFileInfo.fileIndex;
     currentFileInfos = (currentInputIndex != null) ? this.uploadHelper.GetFileInfos(currentInputIndex) : null;
     currentFileInfo = (currentFileIndex != null) ? currentFileInfos[currentFileIndex] : null;
     isEmptyFile = currentFileInfo.fileSize == 0;
     if(isEmptyFile) {
      chunkLength = 0;
      uploadedCurrentFileLength = 1;
     }
    }
   }
   if(!isEmptyFile && currentFileInfo) {
    if(uploadedCurrentFileLength < currentFileInfo.fileSize) {
     startPos = uploadedCurrentFileLength;
     uploadedCurrentFileLength += chunkLength;
     if(startPos + chunkLength > currentFileInfo.fileSize) {
      chunkLength = currentFileInfo.fileSize - startPos;
      uploadedCurrentFileLength = currentFileInfo.fileSize;
     }
    }
   }
   if(uploadedCurrentFileLength >= currentFileInfo.fileSize) {
    var nextFileInfo = this.GetHelperNextFileInput(currentInputIndex, currentFileIndex + 1);
    if(nextFileInfo.inputIndex == null)
     isLastChunk = true;
   }
   var fileData = this.uploadHelper.ReadFileData(currentInputIndex, currentFileIndex, startPos, chunkLength);
   if(fileData.errorText)
    requestData.errorText = fileData.errorText;
   else {
    requestData.data = this.uploadHelper.BuildChunkRequest(
     this.GetHelperUploadingState().isNewUploading,
     this.tempFolderPath,
     this.GetHelperUploadingState().TotalFileLength,
     this.GetHelperUploadingState().FileIndexesCount,
     currentInputIndex,
     currentFileIndex,
     currentFileInfo.fileSize,
     chunkLength,
     currentFileInfo.fileName,
     fileData.data);
   };
  }
  else
   isLastChunk = true;
  this.GetHelperUploadingState().isNewUploading = false;
  this.GetHelperUploadingState().currentInputIndex = currentInputIndex;
  this.GetHelperUploadingState().currentFileIndex = currentFileIndex;
  this.GetHelperUploadingState().uploadedCurrentFileLength = uploadedCurrentFileLength;
  this.GetHelperUploadingState().isLastChunk = isLastChunk;
  return requestData;
 },
 GetUploadingInfo: function() {
  if (!this.uploadingInfo) {
   this.uploadingInfo = {
    isUploadingStart: false,
    isComplete: false,
    currentFileName: "",
    currentFileContentLength: 0,
    currentFileUploadedContentLength: 0,
    currentFileProgress: 0,
    currentContentType: "",
    totalUploadedSize: 0,
    totalLength: 0,
    progress: 0,
    errorText: ""
   };
  }
  return this.uploadingInfo;
 },
 UpdateUploadingInfo: function(responseXML) {
  var info = this.GetUploadingInfo();
  if (responseXML == null || this.GetXmlAttribute(responseXML, 'empty') == 'true') {
   if (info.isUploadingStart) {
    info.isUploadingStart = false;
    info.isComplete = true;
    info.progress = 100;
    info.totalUploadedSize = info.totalLength;
    this.SetButtonEnabled(this.GetCancelButtonCell(), false);
   }
   return;
  }
  info.isUploadingStart = true;
  info.errorText = this.GetXmlAttribute(responseXML, 'errorText');
  info.currentFileName = this.GetXmlAttribute(responseXML, 'fileName');
  info.currentFileContentLength = this.GetXmlAttribute(responseXML, 'fileSize');
  info.currentFileUploadedContentLength = this.GetXmlAttribute(responseXML, 'fileUploadedSize');
  info.currentFileProgress = this.GetXmlAttribute(responseXML, 'fileProgress');
  info.currentContentType = this.GetXmlAttribute(responseXML, 'contentType');
  info.totalUploadedSize = parseInt(this.GetXmlAttribute(responseXML, 'totalUploadedSize'));
  info.totalLength = parseInt(this.GetXmlAttribute(responseXML, 'totalSize'));
  info.progress = parseInt(this.GetXmlAttribute(responseXML, 'progress'));
 },
 UploadProcessing: function() {
  if (this.isProgressWaiting || this.isResponseWaiting) return;
  this.isProgressWaiting = true;
  var xmlHttp = this.CreateXmlHttpRequestObject();
  if (xmlHttp == null) {
   this.isProgressWaiting = false;
   this.EndProcessUploading();
   return;
  }
  if (!this.GetUploadingInfo().isComplete) {
   var url = this.progressHandlerPage + '?' + __aspxProgressHandlerKeyQueryParamName + '=' + this.GetProgressInfoKey();
   var httpMethod = "GET";
   var requestData = { data: "" };
   if(this.IsAdvancedModeEnabled()) {
    url += "&" + __aspxHelperUploadingCallbackQueryParamName + "=" + this.name;
    httpMethod = "POST";
    requestData = this.GetHelperRequestData();
    if(requestData.errorText) {
     this.isProgressWaiting = false;
     this.uploadProcessingErrorText = requestData.errorText;
     this.CancelUploadingFileFromHelper();
     return;
    }
   }
   xmlHttp.open(httpMethod, url, true);
   xmlHttp.send(requestData.data);
   this.isResponseWaiting = true;
  }
  else
   this.EndProcessUploading();
  this.isProgressWaiting = false;
 },
 UploadAsyncXmlHttpResponse: function() {
  var xmlHttp = this.CreateXmlHttpRequestObject();
  if(xmlHttp && xmlHttp.readyState == 4) {
   var successful = false;
   if(xmlHttp.status == 200) {
    this.UpdateUploadingInfo(xmlHttp.responseXML);
    var info = this.GetUploadingInfo();
    successful = !info.errorText;
   }
   if(successful) {
    if(info.isUploadingStart || info.isComplete) {
     if(this.IsShowProgressPanel())
      this.UpdateUploadingInfoPanel(info);
     this.OnUploadingProgressChanged(this.GetSelectedInputFileCount(), info);
    }
   }
   else {
    if(this.IsAdvancedModeEnabled()) {
     var text = (info && info.errorText != "") ? info.errorText : xmlHttp.statusText;
     this.uploadProcessingErrorText = text;
     this.GetHelperUploadingState().isLastChunk = true;
     this.CancelUploadingFileFromHelper();
    }
   }
   var isEndProcessUploading = (!this.GetUploadingInfo().isUploadingStart && !this.isInCallback)
    || (this.IsAdvancedModeEnabled() && this.GetHelperUploadingState().isLastChunk)
    || this.uploadingTimerID == -1;
   if(isEndProcessUploading)
    this.EndProcessUploading();
   else if(this.IsAdvancedModeEnabled())
    _aspxSetTimeout('aspxUploadProcessing(\'' + this.name + '\')', 0);
   this.isResponseWaiting = false;
   if(__aspxIE && __aspxBrowserVersion < 8)
    this.xmlHttpRequest = null;
  }
 },
 UploadAsyncCancelProcessing: function() {
  if(this.isResponseWaiting)
   _aspxSetTimeout('aspxUploadAsyncCancelProcessing(\'' + this.name + '\')', 100);
  else {
   var xmlHttp = this.CreateXmlHttpRequestObject();
   if(xmlHttp && this.IsAdvancedModeEnabled()) {
    var url = this.progressHandlerPage + '?' + __aspxProgressHandlerKeyQueryParamName + '=' + this.GetProgressInfoKey();
    url += "&" + __aspxHelperUploadingCallbackQueryParamName + "=" + this.name;
    xmlHttp.open("POST", url, false);
    xmlHttp.send(this.uploadHelper.BuildCancelRequest());
   }
  }
 },
 ShowProgressInfoPanel: function(show) {
  var inputsTable = this.GetUploadInputsTable();
  _aspxSetStyles(this.GetProgressPanel(), {
   width: inputsTable.clientWidth,
   height: inputsTable.clientHeight
  });
  _aspxSetElementDisplay(inputsTable, !show);
  _aspxSetElementDisplay(this.GetProgressPanel(), show);
  if(!show && __aspxChrome) { 
   var _inputsTable = inputsTable;
   window.setTimeout(function() {
    _aspxSetElementVisibility(_inputsTable, true);
   }, 100);
  }
  if (show) {
   var progressControl = this.GetProgressControl();
   if (progressControl != null)
    progressControl.AdjustControl();
  }
  this.SetButtonEnabled(this.GetCancelButtonCell(), true);
 },
 CleanUploadingInfoPanel: function() {
  this.UpdateProgress(0);
 },
 UpdateUploadingInfoPanel: function(info) {
  this.UpdateProgress(info.progress);
 },
 UpdateProgress: function(percent) {
  if (!(percent > 0 && percent <= 100))
   percent = percent > 0 ? 100 : 0;
  var element = this.GetProgressControl();
  if (element != null)
   element.SetPosition(percent);
 },
 AreEmptyInputs: function() {
  for (var i = 0; i < this.GetFileInputCountInternal(); i++)
   if (_aspxTrim(this.GetText(i)) != "") return false;
  return true;
 },
 ClearAllInputText: function(isUI) {
  for (var i = 0; i < this.GetFileInputCountInternal(); i++)
   this.ClearInputText(i, isUI);
 },
 ClearInputText: function(index, isUI) {
  this.ChangeEventsToFileInput(false, index);
  var textBoxCell = this.GetTextBoxCell(index);
  if(_aspxIsExistsElement(textBoxCell)) {
   if(this.IsSlUploadHelperEnabled()) {
    this.uploadHelper.ClearFileInfos(index);
    this.GetFileFakeInputElement(index).value = "";
   }
   else {
    textBoxCell.innerHTML = this.clearFileInputTempalteHtml;
    this.RedefineInputAttributes(textBoxCell, index);
   }
  }
  this.SetFileInputTooltip(index);
  this.ShowClearButton(index, false);
  if(isUI) {
   this.ClearErrorMessageCell(index);
   this.UpdateNullTextState();
  }
  this.UpdateUploadButtonState();
  this.RaiseTextChanged(index);
  this.ChangeEventsToFileInput(true, index);
 },
 ClearInvalidFileInputText: function(index) {
  if(this.IsAdvancedModeEnabled()) {
   this.ClearErrorMessageCell(index);
   this.uploadHelper.ClearInvalidFileInfos(index);
   if(this.IsFileApiEnabled()) {
    this.suppressTextChangedHandling = true;
    this.GetFileInputElement(index).value = null;
    this.suppressTextChangedHandling = false;
   }
   this.OnTextChanged(index);
  }
 },
 ClearErrorMessageCells: function() {
  for (var index = 0; index < this.GetFileInputCountInternal(); index++)
   this.ClearErrorMessageCell(index);
 },
 ClearErrorMessageCell: function(index) {
  this.UpdateErrorMessageCell(index, "", true);
 },
 ShowClearButton: function(index, show) {
  var clearBoxCell = this.GetClearBoxCell(index);
  if(clearBoxCell) {
   var link = _aspxGetChildByTagName(clearBoxCell, "A", 0);
   var func = show ? _aspxRemoveAttribute : _aspxSetAttribute;
   func(link.style, "visibility", "hidden");
  }
 },
 ShowMultiselectionErrorText: function(errorText) {
  if(this.IsShowErrorText())
   alert(errorText);
 },
 ShowTooManyFilesError: function() {
  alert(this.tooManyFilesErrorText);
 },
 UpdateMultiselectionErrorMessageCell: function(index, errorTextArray, isValidArray) {
  if(this.GetErrorRow(index)) {
   var errorCell = this.GetErrorCell(index),
    errorTexts = [];
   for(var i = 0; i < errorTextArray.length; i++)
    if(!isValidArray[i] && errorTextArray[i] != "")
     errorTexts.push(errorTextArray[i]);
   if(errorTexts.length) {
    _aspxSetElementDisplay(this.GetErrorRow(index), true);
    errorCell.innerHTML = errorTexts.join("<br />");
   }
  }
 },
 UpdateErrorMessageCell: function(index, errorText, isValid) {
  if (this.GetErrorRow(index)) {
   var errorCell = this.GetErrorCell(index);
   _aspxSetElementDisplay(this.GetErrorRow(index), !isValid);
   if (errorText != "")
    errorCell.innerHTML = errorText;
  }
 },
 UpdateCommonErrorDiv: function(text, display) {
  var commonErrorDiv = this.GetCommonErrorDivElement();
  if (commonErrorDiv) {
   commonErrorDiv.innerHTML = text;
   _aspxSetElementDisplay(commonErrorDiv, display);
  }
 },
 UpdateNullTextState: function() {
  if(this.isNative)
   return;
  var inputCount = this.GetFileInputCountInternal();
  for(var i = 0; i < inputCount; i++) {
   var inputIsEmpty = this.GetText(i) == '';
   if(this.nullText != null)
    this.SetNullTextEnabled(i, inputIsEmpty);
   else if(inputIsEmpty)
    this.GetFileFakeInputElement(i).value = '';
  }
 },
 UpdateUploadButtonState: function() {
  var isEnabled = this.GetSelectedInputFileCount(true) > 0;
  this.SetUploadButtonEnabled(isEnabled);
 },
 GetXmlAttribute: function(xmlDoc, attrName) {
  return xmlDoc.documentElement.getAttribute(attrName);
 },
 ProcessResponse: function() {
  try {
   return eval(this.GetFakeIframeResponseString());
  }
  catch (e) { }
  return null;
 },
 ValidateWindowsFileNames: function() {
  for (var i = 0; i < this.GetFileInputCountInternal(); i++) {
   if (!ASPxClientUploadControl.IsValidWindowsFileName(_aspxTrim(this.GetText(i)))) {
    alert(this.invalidWindowsPathErrorText.replace("{0}", this.GetText(i)));
    return false;
   }
  }
  return true;
 },
 CreateFileValidators: function() {
  return {
   fileSize: {
    value: this.validationSettings.maxFileSize,
    errorText: this.validationSettings.maxFileSizeErrorText,
    isValid: function(fileInfo) {
     return fileInfo.fileSize < this.value;
    },
    getErrorText: function() {
     return this.errorText.replace("{0}", this.value);
    }
   },
   fileExtensions: {
    value: this.validationSettings.allowedFileExtensions,
    errorText: this.validationSettings.notAllowedFileExtensionErrorText,
    isValid: function(fileInfo) {
     var fileExtension = ASPxClientUploadControl.GetFileExtension(fileInfo.fileName).toLowerCase();
     return _aspxArrayIndexOf(this.value, fileExtension) != -1;
    },
    getErrorText: function() {
     return this.errorText;
    }
   }
  };
 },
 ValidateInputFileCore: function(validateObj, validators, fileInfo) {
  for(var validatorName in validators) {
   var validator = validators[validatorName];
   if(validator != null && validator.value) {
    var isValid = validator.isValid(fileInfo);
    if(!isValid) {
     validateObj.commonErrorText = validator.getErrorText();
     return false;
    }
   }
  }
  return true;
 },
 ValidateInputFiles: function(validateObj) {
  if(!this.IsAdvancedModeEnabled())
   return true;
  var result = true;
  var fileInputCount = this.GetFileInputCountInternal();
  var validators = this.CreateFileValidators();
  var multiSelectionErrorText = this.validationSettings.multiSelectionErrorText;
  this.invalidFileNames = [];
  for(var inputIndex = 0; inputIndex < fileInputCount; inputIndex++) {
   var isValid = true;
   var files = [];
   this.invalidFileNames.push(files);
   var fileInfos = this.uploadHelper.GetFileInfos(inputIndex);
   if(fileInfos) {
    var isMultiFileSelected = fileInfos.length > 1;
    for(var fileIndex = 0; fileIndex < fileInfos.length; fileIndex++) {
     var currentFileInfo = fileInfos[fileIndex];
     var success = this.ValidateInputFileCore(validateObj, validators, currentFileInfo);
     if(!success) {
      files.push(fileInfos[fileIndex].fileName);
      isValid = false;
     }
    }
    if(!isValid) {
     if(isMultiFileSelected)
      validateObj.commonErrorText = multiSelectionErrorText.replace("{0}", files.length)
       .replace("{1}", validators.fileSize.value)
       .replace("{2}", files.join(', '));
     this.ShowMultiselectionErrorText(validateObj.commonErrorText);
    }
   }
   result = result && isValid;
  }
  return result;
 },
 WriteResponseString: function(responseString) {
  try {
   this.GetFakeIframeDocument().body.innerHTML = responseString;
  }
  catch (e) { }
 },
 RestoreProtectedWhitespaceSeries: function(text) {
  return text.replace(/&nbsp;/g, ' ').replace(/&nbspx;/g, '&nbsp;');
 },
 NeedMouseClickCorrection: function() {
  return !__aspxTouchUI && this.fileInputIsHidden;
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(evt) {
  this.AdjustControl();
 },
 OnCompleteFileUpload: function() {
  var responseObj = null;
  var commonErrorText = '';
  if (this.GetIsResponseValid()) {
   responseObj = this.ProcessResponse();
   if(responseObj.customJSProperties) {
    for(var property in responseObj.customJSProperties)
     this[property] = responseObj.customJSProperties[property];
   }
   for (var i = 0; i < this.GetFileInputCountInternal(); i++) {
    var fileCount = this.GetFiles(i).length;
    if(this.enableMultiSelect && fileCount > 1) {
     this.UpdateMultiselectionErrorMessageCell(i, responseObj.errorTexts, responseObj.isValidArray);
     for(var j = 0; j < fileCount; j++)
      this.RaiseFileUploadComplete(j, responseObj);
    }
    else {
     this.UpdateErrorMessageCell(i, responseObj.errorTexts[i], responseObj.isValidArray[i]);
     if (this.GetText(i) != "")
      this.RaiseFileUploadComplete(i, responseObj);
    }
   }
   this.ClearAllInputText();
  }
  if (this.IsShowProgressPanel())
   this.UpdateProgress(100);
  if(!this.isCancel) {
   if(responseObj)
    commonErrorText = responseObj.commonErrorText;
   else if(this.uploadProcessingErrorText != '')
    commonErrorText = this.uploadProcessingErrorText;
   else
    commonErrorText = this.unspecifiedErrorText;
   this.UpdateCommonErrorDiv(commonErrorText, commonErrorText != '');
  }
  this.isInCallback = false;
  this.responseHashTable = {};
  this.SetEnabledInternal(true);
  this.UpdateNullTextState();
  this.UpdateUploadButtonState();
  if(this.IsShowProgressPanel())
   this.ShowProgressInfoPanel(false);
  if(responseObj)
   this.RaiseFilesUploadComplete(responseObj);
  else
   this.RaiseFilesUploadComplete({
    commonErrorText: commonErrorText,
    commonCallbackData: ""
   });
  if (__aspxIE) {
   try {
    this.GetFakeIframeDocument().write("");
    this.GetFakeIframeDocument().close();
   }
   catch (e) { }
  }
 },
 OnUploadingProgressChanged: function(fileCount, info) {
  this.RaiseUploadingProgressChanged(fileCount, info.currentFileName, info.currentFileContentLength,
   info.currentFileUploadedContentLength, info.currentFileProgress, info.totalLength, info.totalUploadedSize, info.progress);
 },
 OnTextChanged: function (index, isUI) {
  if(this.suppressTextChangedHandling)
   return;
  if(isUI && this.IsAdvancedModeEnabled()) {
   this.uploadHelper.UpdateFileInfos(index);
   if(__aspxWebKitTouchUI) {    
    setTimeout(function() {
     this.OnTextChanged(index);
    }.aspxBind(this), 0);
    return;
   }
  }
  if(!this.isNative) {
   this.UpdateNullTextState();
   var files = this.GetFiles(index, true);
   if(files.length) {
    var value = (files.length > 1) ? this.selectedSeveralFilesText.replace("{0}", files.length) : files[0];
    this.GetFileFakeInputElement(index).value = value;
   }
   this.SetFileInputTooltip(index);
   this.ShowClearButton(index, value && value != '');
   if(this.IsAdvancedModeEnabled()) {
    var validateObj = {
     commonErrorText: "",
     commonCallbackData: ""
    };
    if(!this.ValidateInputFiles(validateObj))
     this.ClearInvalidFileInputText(index);
   }
   if(__aspxIE)
    _aspxSetFocus(this.GetBrowseButtonCell(index));  
  }
  this.UpdateUploadButtonState();
  this.RaiseTextChanged(index);
 },
 OnPluginLoaded: function(index) {
  this.SetFileInputRowEnabled(index, true)
 },
 OnPluginError: function(index) {
  if(!this.pluginError) {
   this.pluginError = true;
   this.SetVisiblePlatformErrorElement(true);
  }
 },
 OnFileInputMouseMove: function(evt, index) {
  this.OnMouseMoveInFileInputElement(evt, index);
  this.StopEventPropagation(evt);
 },
 OnFileInputMouseOut: function(evt, index) {
  this.ResetFileInputPosition(index);
  this.StopEventPropagation(evt);
 },
 OnFileInputMouseDown: function(evt, index) {
  var isOverBrowseButton = this.IsMouseOverBrowseButton(evt, index);
  this.ChangeButtonPressedState(this.GetBrowseButtonCell(index), isOverBrowseButton);
 },
 OnTextBoxMouseMove: function(evt, index) {
  this.OnMouseMoveInFakeElement(evt, index);
 },
 OnTextBoxMouseOut: function(evt, index) {
  this.OnMouseOutInFakeElement(evt, index);
 },
 OnTextBoxClick: function(evt, index) {
  this.OnClickInFakeElement(evt, index);
 },
 OnBrowseButtonMouseMove: function(evt, index) {
  this.OnMouseMoveInFakeElement(evt, index);
 },
 OnBrowseButtonMouseOut: function(evt, index) {
  this.OnMouseOutInFakeElement(evt, index);
  this.ChangeButtonHoveredState(this.GetBrowseButtonCell(index), false);
 },
 OnBrowseButtonClick: function(evt, index) {
  this.OnClickInFakeElement(evt, index);
 },
 OnMouseMoveInFakeElement: function(evt, index) {
  if(!this.GetFileFakeInputElement(index).disabled) {
   var isOverBrowseButton = this.IsMouseOverBrowseButton(evt, index);
   this.SetFileInputPosition(index, _aspxGetEventX(evt), _aspxGetEventY(evt), isOverBrowseButton);
   this.ChangeButtonHoveredState(this.GetBrowseButtonCell(index), isOverBrowseButton);
  }
 },
 OnMouseOutInFakeElement: function(evt, index) {
  if( !(this.IsMouseOverTextBox(evt, index) || this.IsMouseOverBrowseButton(evt, index)) )
   this.ResetFileInputPosition(index);
 },
 OnClickInFakeElement: function(evt, index) {
  if(!this.NeedMouseClickCorrection()) return;
  this.OnMouseMoveInFakeElement(evt, index);
  var fileInput = this.GetFileSelectorElement(index);
  if(fileInput.click)
   fileInput.click();
 },
 OnMouseMoveInFileInputElement: function(evt, index) {
  if(!this.GetFileFakeInputElement(index).disabled) {
   var isOverBrowseButton = this.IsMouseOverBrowseButton(evt, index);
   var isOverTextBoxButton = this.IsMouseOverTextBox(evt, index);
   if(isOverTextBoxButton || isOverBrowseButton) {
    this.SetFileInputPosition(index, _aspxGetEventX(evt), _aspxGetEventY(evt), isOverBrowseButton);
    this.ChangeButtonHoveredState(this.GetBrowseButtonCell(index), isOverBrowseButton);
    var tooltipElement = isOverTextBoxButton ? this.GetTextBoxCell(index) : this.GetBrowseButtonCell(index);
    var tooltip = _aspxGetAttribute(tooltipElement, "title");
    _aspxSetAttribute(this.GetFileSelectorElement(index), "title", tooltip ? tooltip : "");
   }
   else
    this.ResetFileInputPosition(index);
  }
 },
 IsFileUploadCanceled: function(validateObj) {
  var isCancel = this.RaiseFileUploadStart();
  if (!isCancel)
   this.isInCallback = true;
  else
   validateObj.commonErrorText = this.uploadWasCanceledErrorText;
  return isCancel;
 },
 IsMouseOverElement: function(mouseEvt, element) {
  var x = _aspxGetAbsoluteX(element);
  var y = _aspxGetAbsoluteY(element);
  var w = element.offsetWidth;
  var h = element.offsetHeight;
  var eventX = _aspxGetEventX(mouseEvt);
  var eventY = _aspxGetEventY(mouseEvt);
  return (eventX > x && eventX < (x + w) && eventY > y && eventY < (y + h));
 },
 IsMouseOverTextBox: function(evt, index) {
  return this.IsMouseOverElement(evt, this.GetTextBoxCell(index));
 },
 IsMouseOverBrowseButton: function(evt, index) {
  return this.IsMouseOverElement(evt, this.GetBrowseButtonCell(index));
 },
 SetFileInputPosition: function (index, x, y, isChooseButton) {
  var fileInput = this.GetFileSelectorElement(index);
  var space = 10;
  var xPos = x;
  var yPos = y;
  var width = fileInput.offsetWidth;
  var height = fileInput.offsetHeight;
  xPos -= this.IsRightToLeft() ? space : (width - space);
  yPos -= height/2;
  _aspxSetAbsoluteY(fileInput, yPos);
  _aspxSetAbsoluteX(fileInput, xPos);
  this.SetFileInputCursor(index, isChooseButton);
  this.fileInputIsHidden = false;
 },
 SetFileInputCursor: function(index, isChooseButton) {
  var fileSelectorElement = this.GetFileSelectorElement(index);
  var className = fileSelectorElement.className;
  className = className.replace(" " + this.GetFileInputOnTextBoxHoverClassName(), "").replace(" " + this.GetFileInputOnBrowseButtonHoverClassName(), "");
  className += " " + (isChooseButton ? this.GetFileInputOnBrowseButtonHoverClassName() : this.GetFileInputOnTextBoxHoverClassName());
  fileSelectorElement.className = className;
  if(this.IsSlUploadHelperEnabled())
   this.uploadHelper.SetCursorStyle(index, _aspxGetCurrentStyle(fileSelectorElement)["cursor"]);
 },
 FileInputGotFocus: function(evt, index) {
  var button = this.GetBrowseButtonCell(index);
  var focusedClassName = " " + __aspxBrowseButtonFocusClassName;
  button.className += focusedClassName;
  if(__aspxOpera) {
   if(this._operaFocusedFlag)
    this._operaFocusedFlag = false;
   else {
    this._operaFocusedFlag = true;
    this.GetFakeFocusInputElement().focus();
    var _this = this;
    var _index = index;
    window.setTimeout(function() {
     _this.GetFileInputElement(index).focus();
    }, 100);
   }
  }
 },
 FileInputLostFocus: function(evt, index) {
  var button = this.GetBrowseButtonCell(index);
  var focusedClassName = " " + __aspxBrowseButtonFocusClassName;
  var className = button.className;
  while(className.indexOf(focusedClassName) != -1)
   className = className.replace(focusedClassName, "");
  button.className = className;
 },
 FileInputFocusNextElement: function(evt, index, isBackward) {
  if(this.IsFocusNeedReset()) {
   var count = this.GetFileInputCountInternal();
   var newInputIndex = !isBackward ? (index + 1) : (index - 1);
   var element = null;
   if(this.IsSlUploadHelperEnabled()) {
    if(newInputIndex > -1 && newInputIndex < count)
     element = this.GetFileSelectorElement(newInputIndex);
    else if(newInputIndex > count - 1)
     element = this.GetFakeFocusInputElement();
    if(element == null)
     element = this.GetUploadButtonLink();
   }
   else {
    if(isBackward) {
     if(newInputIndex > -1) {
      element = this.GetRemoveButtonLink(newInputIndex);
      if(element == null)
       element = this.GetFileSelectorElement(newInputIndex);
     }
    }
    else {
     element = this.GetClearButtonLink(index);
     if(!_aspxGetElementVisibility(element))
      element = this.GetRemoveButtonLink(index);
     if(element == null && newInputIndex < count)
      element = this.GetFileSelectorElement(newInputIndex);
     if(element == null)
      element = this.GetAddButtonLink();
     if(element == null)
      element = this.GetUploadButtonLink();
     if(element == null)
      element = this.GetFakeFocusInputElement();
    }
   }
   if(element != null) {
    element.focus();
    _aspxPreventEvent(evt);
   }
  }
 },
 ResetFileInputPosition: function(index) {
  this.GetFileSelectorElement(index).style.top = '-5000px';
  this.fileInputIsHidden = true;
 },
 StopEventPropagation: function(evt) {
  if(__aspxIE && __aspxBrowserMajorVersion <= 8)
   evt.cancelBubble = true; 
 },
 RaiseUploadingProgressChanged: function(fileCount, currentFileName, currentFileContentLength,
  currentFileUploadedContentLength, currentFileProgress, totalContentLength, uploadedContentLength, progress) {
  if (!this.UploadingProgressChanged.IsEmpty()) {
   var args = new ASPxClientUploadControlUploadingProgressChangedEventArgs(fileCount, currentFileName, currentFileContentLength,
    currentFileUploadedContentLength, currentFileProgress, totalContentLength, uploadedContentLength, progress);
   this.UploadingProgressChanged.FireEvent(this, args);
  }
 },
 RaiseTextChanged: function(index) {
  if (!this.TextChanged.IsEmpty()) {
   var args = new ASPxClientUploadControlTextChangedEventArgs(index);
   this.TextChanged.FireEvent(this, args);
  }
 },
 RaiseFileUploadComplete: function(index, responseObj) {
  if (!this.FileUploadComplete.IsEmpty()) {
   var args = new ASPxClientUploadControlFileUploadCompleteEventArgs(index, responseObj.isValidArray[index],
    responseObj.errorTexts[index], responseObj.callbackDataArray[index]);
   this.FileUploadComplete.FireEvent(this, args);
  }
 },
 RaiseFilesUploadComplete: function(responseObj) {
  var args = new ASPxClientUploadControlFilesUploadCompleteEventArgs(responseObj.commonErrorText, responseObj.commonCallbackData);
  this.FilesUploadComplete.FireEvent(this, args);
 },
 RaiseFileUploadStart: function() {
  var ret = false;
  if (!this.FileUploadStart.IsEmpty()) {
   var args = new ASPxClientUploadControlFileUploadStartEventArgs(false);
   this.FileUploadStart.FireEvent(this, args);
   ret = args.cancel;
  }
  return ret;
 },
 RaiseFileInputCountChanged: function() {
  if (!this.FileInputCountChanged.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.FileInputCountChanged.FireEvent(this, args);
  }
 },
 ClearText: function() {
  this.ClearAllInputText(true);
 },
 GetText: function(index) {
  if (!_aspxIsExists(index))
   index = 0;
  var value = this.GetValue(index);
  return value != null ? value : "";
 },
 UploadFile: function() {
  this.UploadFileFromUser();
 },
 Upload: function() {
  this.UploadFileFromUser();
 },
 Cancel: function() {
  this.CancelUploadingFileFromUser();
 },
 GetFileInputCount: function() {
  return this.GetFileInputCountInternal();
 },
 SetFileInputCount: function(count) {
  var lastCount = this.GetFileInputCountInternal();
  if(count == lastCount) return;
  if(lastCount < count) {
   for(var i = 0; i < count - lastCount; i++)
    this.AddFileInput();
  } else {
   for(var i = lastCount; i > count; i--)
    this.RemoveFileInput();
  }
 },
 SetAddButtonText: function(text) {
  this.SetAddButtonTextInternal(text);
 },
 SetUploadButtonText: function(text) {
  this.SetUploadButtonTextInternal(text);
 },
 GetAddButtonText: function() {
  return this.GetAddButtonTextInternal();
 },
 GetUploadButtonText: function() {
  return this.GetUploadButtonTextInternal();
 }
});
ASPxClientUploadControl.Cast = ASPxClientControl.Cast;
var windowsFileNameRegExpTemplate = "^([a-zA-Z]\\:|\\\\\\\\[^\\/\\\\:*?\\\"<>|]+\\\\[^\\/\\\\:*?\\\"<>|]+)(\\\\[^\\/\\\\:*?\\\"<>|]+)+(\\.[^\\/\\\\:*?\\\"<>|]+)?$";
windowsRootDirectoryNameRegExpTemplate = "[a-zA-Z]\\:";
ASPxClientUploadControl.IsValidWindowsFileName = function(fileName) {
 var windowsRootDirectoryNameRegExp = new RegExp(windowsRootDirectoryNameRegExpTemplate, "gi");
 var windowsFileNameRegExp = new RegExp(windowsFileNameRegExpTemplate, "gi");
 return (fileName == "" || windowsFileNameRegExp.test(fileName)) || (fileName.length == 3 && windowsRootDirectoryNameRegExp.test(fileName));
};
ASPxClientUploadControl.GetFileName = function(filePath) {
 if(!ASPxClientUploadControl.IsValidWindowsFileName(filePath))
  return filePath;
 var windowsFileNameRegExp = new RegExp(windowsFileNameRegExpTemplate, "gi");
 return filePath.replace(windowsFileNameRegExp, '$2').replace('\\', '');
};
ASPxClientUploadControl.GetFileExtension = function(fileName) {
 return fileName.replace(/.*?(\.[^.\\\/:*?\"<>|]+$)/, "$1");
};
ASPxClientUploadControl.OnTooManyFilesError = function(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if(uploader != null)
  uploader.ShowTooManyFilesError(); 
};
ASPxClientUploadControlFileUploadStartEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(cancel) {
  this.constructor.prototype.constructor.call(this);
  this.cancel = cancel;
 }
});
ASPxClientUploadControlFileUploadCompleteEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(inputIndex, isValid, errorText, callbackData){
  this.constructor.prototype.constructor.call(this);
  this.inputIndex = inputIndex;
  this.isValid = isValid;
  this.errorText = errorText;
  this.callbackData = callbackData;
 }
});
ASPxClientUploadControlFilesUploadCompleteEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(errorText, callbackData){
  this.constructor.prototype.constructor.call(this);
  this.errorText = errorText;
  this.callbackData = callbackData;
 }
});
ASPxClientUploadControlTextChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(inputIndex){
  this.constructor.prototype.constructor.call(this);
  this.inputIndex = inputIndex;
 }
});
ASPxClientUploadControlUploadingProgressChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(fileCount, currentFileName, currentFileContentLength,
  currentFileUploadedContentLength, currentFileProgress, totalContentLength, uploadedContentLength, progress){
  this.constructor.prototype.constructor.call(this);
  this.fileCount = fileCount;
  this.currentFileName = currentFileName;
  this.currentFileContentLength = currentFileContentLength;
  this.currentFileUploadedContentLength = currentFileUploadedContentLength;
  this.currentFileProgress = currentFileProgress;
  this.totalContentLength = totalContentLength;
  this.uploadedContentLength = uploadedContentLength;
  this.progress = progress;
 }
});
ASPxClientUploadHelper = _aspxCreateClass(null, {
 constructor: function(uploadControl) {
  this.uploadControl = uploadControl;
 },
 ClearInvalidFileInfos: function(inputIndex) {
  var fileNames = this.uploadControl.invalidFileNames[inputIndex];
  var fileInfos = this.GetFileInfos(inputIndex);
  var i = 0;
  while(i < fileInfos.length) {
   var fileInfo = fileInfos[i];
   if(_aspxArrayIndexOf(fileNames, fileInfo.fileName) != -1) {
    this.RemoveFileInfo(inputIndex, i);
    fileInfos = this.GetFileInfos(inputIndex);
   }
   else
    i++;
  }
 },
 RemoveFileInfo: function(inputIndex, fileIndex) {
 },
 GetAbsoluteFileIndex: function(inputIndex, fileIndex) {
  var index = 0;
  for(var i = 0; i < inputIndex; i++) {
   var fileInfos = this.GetFileInfos(i);
   index += fileInfos.length > 0 ? fileInfos.length : 1;
  }
  return index + fileIndex;
 },
 GetFileInfos: function(inputIndex) {
 },
 GetFileIndexesCount: function(fileInputCount) {
  var count = 0;
  for(var inputIndex = 0; inputIndex < fileInputCount; inputIndex++) {
   var fileInfos = this.GetFileInfos(inputIndex);
   count += fileInfos.length > 0 ? fileInfos.length : 1;
  }
  return count;
 },
 GetTotalLength: function(fileInputCount) {
  var totalFileLength = 0;
  for(var inputIndex = 0; inputIndex < fileInputCount; inputIndex++) {
   var fileInfos = this.GetFileInfos(inputIndex);
   for(var fileIndex = 0; fileIndex < fileInfos.length; fileIndex++)
    totalFileLength += parseInt(fileInfos[fileIndex].fileSize);
  }
  return totalFileLength;
 }
});
ASPxClientHtml5UploadHelper = _aspxCreateClass(ASPxClientUploadHelper, {
 constructor: function(uploadControl) {
  this.constructor.prototype.constructor.call(this, uploadControl); 
 },
 IsHelperElementReady: function(index) {
  return true;
 },
 GetFileInfos: function(inputIndex) {
  var fileInputElement = this.uploadControl.GetFileInputElement(inputIndex);
  var fileInfos = fileInputElement.aspxFileInfos;
  if(!fileInfos) {
   fileInfos = [];
   var fileCount = fileInputElement.files.length;
   for(var i = 0; i < fileCount; i++) {
    var file = fileInputElement.files[i];
    var fileInfo = {
     file: file,
     fileName: file.name,
     fileSize: file.size,
     fullName: "C:\\fakepath\\" + file.name
    };
    fileInfos.push(fileInfo);
   }
   fileInputElement.aspxFileInfos = fileInfos;
  }
  return fileInfos;
 },
 FileSlice: function(file, startPos, endPos) {
  if(file.slice)
   return file.slice(startPos, endPos);
  if(__aspxWebKitFamily && file.webkitSlice)
   return file.webkitSlice(startPos, endPos);
  if(__aspxNetscapeFamily && file.mozSlice)
   return file.mozSlice(startPos, endPos);
  throw "'File.slice()' method is not implemented";
 },
 ReadFileData: function(inputIndex, fileIndex, startPos, chunkLength) {
  var fileData = {};
  if(!chunkLength)
   return fileData;
  var file = this.GetFileInfos(inputIndex)[fileIndex].file;
  try {
   fileData.data = this.FileSlice(file, startPos, startPos + chunkLength);
  }
  catch(ex) {
   fileData.errorText = "" + ex;
  }
  return fileData;
 },
 RemoveFileInfo: function(inputIndex, fileIndex) {
  var fileInfos = this.GetFileInfos(inputIndex);
  _aspxArrayRemoveAt(fileInfos, fileIndex);
 },
 BuildChunkRequest: function(isNewUploading, tempFolderPath, totalSize, fileIndexesCount, inputIndex, fileIndex, fileSize, chunkSize, fileName, fileData) {
  var index = this.GetAbsoluteFileIndex(inputIndex, fileIndex);
  var formData = new FormData();
  formData.append("IsNewUploading", isNewUploading ? "true" : "false");
  formData.append("TempFolderPath", tempFolderPath);
  formData.append("TotalSize", totalSize);
  formData.append("FileIndexesCount", fileIndexesCount);
  formData.append("FileIndex", index);
  formData.append("FileSize", fileSize);
  formData.append("ChunkSize", chunkSize);
  formData.append("FileName", fileName);
  if(chunkSize)
   formData.append("Data", fileData);
  return formData;
 },
 BuildCancelRequest: function() {
  var formData = new FormData();
  formData.append("IsCancel", "true");
  return formData;
 },
 UpdateFileInfos: function(inputIndex) {
  var fileInputElement = this.uploadControl.GetFileInputElement(inputIndex);
  fileInputElement.aspxFileInfos = undefined;
 }
});
ASPxClientSlUploadHelper = _aspxCreateClass(ASPxClientUploadHelper, {
 constructor: function(uploadControl) {
  this.constructor.prototype.constructor.call(this, uploadControl);
 },
 CreateSlObject: function(source, inputIndex) {
  var slObjectId = this.uploadControl.GetSlUploadHelperElementID(inputIndex);
  var controlName = this.uploadControl.name;
  var properties = { width: '70px', height: '22px' };
  var events = {};
  events.onLoad = 'slOnLoad_' + slObjectId;
  window[events.onLoad] = new Function("aspxSLOnLoad('" + this.uploadControl.name + "', '" + inputIndex + "');");
  events.onError = 'slOnError_' + slObjectId;
  window[events.onError] = new Function("aspxSLOnError('" + this.uploadControl.name + "', '" + inputIndex + "');");
  var parentElement = document.createElement("DIV");
  parentElement.innerHTML = this.BuildHTML(source, slObjectId, controlName, inputIndex, properties, events);
  return parentElement.firstChild;
 },
 SetCursorStyle: function(inputIndex, cursorStyle) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   slElement.content.sl.SetCursorStyle(cursorStyle);
  }
 },
 ClearFileInfos: function(inputIndex) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   return slElement.content.sl.ClearFileInfos();
  }
 },
 GetErrorText: function(stringData) {
  var index = stringData.indexOf(__aspxErrorTextResponsePrefix) + __aspxErrorTextResponsePrefix.length;
  return stringData.substr(index);
 },
 GetFileInfos: function(inputIndex) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   return eval(slElement.content.sl.FileInfos);
  }
  return [];
 },
 ReadBase64StringData: function(inputIndex, fileIndex, startPos, length) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   return slElement.content.sl.ReadBase64StringData(fileIndex, startPos, length);
  }
  return null;
 },
 ReadFileData: function(inputIndex, fileIndex, startPos, chunkLength) {
  var fileData = {};
  var encodedData = this.ReadBase64StringData(inputIndex, fileIndex, startPos, chunkLength);
  if(this.IsErrorOccurred(encodedData))
   fileData.errorText = this.GetErrorText(encodedData);
  else
   fileData.data = encodedData;
  return fileData;
 },
 RemoveFileInfo: function(inputIndex, fileIndex) {
  var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
  return slElement.content.sl.RemoveFileInfo(fileIndex);
 },
 BuildChunkRequest: function(isNewUploading, tempFolderPath, totalSize, fileIndexesCount, inputIndex, fileIndex, fileSize, chunkSize, fileName, fileData) {
  var index = this.GetAbsoluteFileIndex(inputIndex, fileIndex);
  var request = "";
  request += "IsNewUploading:" + (isNewUploading ? "true" : "false") + "\r\n";
  request += "TempFolderPath:" + tempFolderPath + "\r\n";
  request += "TotalSize:" + totalSize + "\r\n";
  request += "FileIndexesCount:" + fileIndexesCount + "\r\n";
  request += "FileIndex:" + index + "\r\n";
  request += "FileSize:" + fileSize + "\r\n";
  request += "ChunkSize:" + chunkSize + "\r\n";
  request += "FileName:" + fileName + "\r\n";
  request += "EncodingData:" + fileData;
  return request;
 },
 BuildCancelRequest: function() {
  return "IsCancel:true";
 },
 BuildHTML: function(source, id, controlName, inputIndex, properties, events) {
  var sb = [];
  sb.push('<object type="application/x-silverlight-2" data="data:application/x-silverlight-2,"');
  sb.push(' id="' + id + '"');
  if(properties.width != null) sb.push(' width="' + properties.width + '"');
  if(properties.height != null) sb.push(' height="' + properties.height + '"');
  var opacityStyle = "";
  if(!__aspxIE)
   opacityStyle = "opacity: 0.01;";
  sb.push(' style="position: absolute; background-color: transparent; top: -5000px; ' + opacityStyle + '"');
  sb.push('>');
  sb.push('<param name="source" value="' + source + '" />');
  sb.push('<param name="background" value="Transparent" />');
  sb.push('<param name="windowless" value="true" />');
  sb.push('<param name="minRuntimeVersion" value="3.0.40818.0" />');
  var init = '<param name="initParams" value="';
   init += 'controlName=' + controlName + ', ';
   init += 'inputIndex=' + inputIndex + ', ';
   init += 'multiselect=' + this.uploadControl.enableMultiSelect + ', ';
   init += 'allowedMaxFileSize=' + this.uploadControl.validationSettings.maxFileSize;
   var allowedFileExtensions = this.uploadControl.validationSettings.allowedFileExtensions;
   if(allowedFileExtensions != null) {
    init += ', allowedFileExtensions=' + allowedFileExtensions.join(';') + ', ';
    var fileMasks = [];
    for(var i = 0; i < allowedFileExtensions.length; i++)
     fileMasks.push("*" + allowedFileExtensions[i]);
    init += 'filter=' + fileMasks.join(';');
   }
  init += '" />';
  sb.push(init);
  if(events.onLoad)
   sb.push('<param name="onLoad" value="' + events.onLoad + '" />');
  if(events.onError)
   sb.push('<param name="onError" value="' + events.onError + '" />');
  sb.push("</object>");
  return sb.join("");
 },
 RedefineSlObjectAttributes: function(parent, inputIndex, isNewElement) {
  var slElement = _aspxGetChildByTagName(parent, "OBJECT", 0);
  if(slElement) {
   var slObjectId = this.uploadControl.GetSlUploadHelperElementID(inputIndex);
   var controlName = this.uploadControl.name;
   slElement.id = slObjectId;
   if(isNewElement == true) {
    if(__aspxIE && __aspxBrowserVersion == 8) {
     parent.insertBefore(
      this.CreateSlObject(this.uploadControl.slUploadHelperUrl, inputIndex),
      slElement
     );
     parent.removeChild(slElement);
    }
    else {
     if(__aspxIE)
      _aspxRemoveAttribute(slElement, "data");
     var onLoad = 'slOnLoad_' + slObjectId;
     window[onLoad] = new Function("aspxSLOnLoad('" + this.uploadControl.name + "', '" + inputIndex + "');");
     var onError = 'slOnError_' + slObjectId;
     window[onError] = new Function("aspxSLOnError('" + this.uploadControl.name + "', '" + inputIndex + "');");
     var params = _aspxGetElementsByTagName(parent, "param");
     for(var i = 0; i < params.length; i++) {
      switch(_aspxGetAttribute(params[i], "name")) {
       case "initParams":
        var paramValue = _aspxGetAttribute(params[i], "value");
        paramValue = paramValue.replace("inputIndex=T", "inputIndex=" + inputIndex);
        _aspxSetAttribute(params[i], "value", paramValue);
        break;
       case "onLoad":
        _aspxSetAttribute(params[i], "value", onLoad);
        break;
       case "onError":
        _aspxSetAttribute(params[i], "value", onError);
        break;
      }
     }
    }
   }
   else if(this.IsObjectLoaded(inputIndex))
    slElement.content.sl.RedefineAttributes(controlName, inputIndex);
  }
 },
 RedefineSlObjectAttributesInHostElement: function(inputIndex, newInputIndex, isNewElement) {
  var slHost = this.uploadControl.GetSlUploadHostElement();
  if(slHost) {
   if(isNewElement)
    slHost.appendChild(this.CreateSlObject(this.uploadControl.slUploadHelperUrl, newInputIndex));
   else {
    var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
    if(slElement) {
     slElement.id = this.uploadControl.GetSlUploadHelperElementID(newInputIndex);
     if(this.IsObjectLoaded(newInputIndex))
      slElement.content.sl.RedefineAttributes(this.uploadControl.name, newInputIndex);
    }
   }
  }
 },
 RemoveSlObjectInHostElement: function(inputIndex) {
  var slHost = this.uploadControl.GetSlUploadHostElement();
  if(slHost) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   if(slElement)
    slHost.removeChild(slElement);
  }
 },
 UpdateFileInfos: function(inputIndex) {
 },
 IsHelperElementReady: function(index) {
  return this.IsObjectLoaded(index);
 },
 IsObjectLoaded: function(index) {
  var slElement = this.uploadControl.GetSlUploadHelperElement(index);
  try {
   if(slElement && slElement.content && slElement.content.sl)
    return true;
  }
  catch (e) { }
  return false;
 },
 IsErrorOccurred: function(stringData) {
  return stringData.indexOf(__aspxErrorTextResponsePrefix) != -1;
 }
});
ASPxClientSlUploadHelper.IsPluginInstalled = function() {
 if(!ASPxClientSlUploadHelper.isSilverlightInstalled) {
  try{
   if(typeof(ActiveXObject) != 'undefined') {
    var slControl = new ActiveXObject('AgControl.AgControl');
    if(slControl != null)
     ASPxClientSlUploadHelper.isSilverlightInstalled = true;
   }
   else if(navigator.plugins["Silverlight Plug-In"])
    ASPxClientSlUploadHelper.isSilverlightInstalled = true;
  } catch(e) { }
 }
 return ASPxClientSlUploadHelper.isSilverlightInstalled;
};
ASPxClientSlUploadHelper.IsPluginSupported = function() {
 return !(__aspxSafari && __aspxBrowserMajorVersion == 5);
};
ASPxClientSlUploadHelper.IsPluginAvailable = function() {
 return ASPxClientSlUploadHelper.IsPluginInstalled() && ASPxClientSlUploadHelper.IsPluginSupported();
};
function aspxUTextChanged(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextChanged(index, true);
}
function aspxUFileInputMouseMove(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnFileInputMouseMove(evt, index);
}
function aspxUFileInputMouseOut(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnFileInputMouseOut(evt, index);
}
function aspxUFileInputMouseDown(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnFileInputMouseDown(evt, index);
}
function aspxUFileInputGotFocus(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.FileInputGotFocus(evt, index);
}
function aspxUFileInputLostFocus(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.FileInputLostFocus(evt, index);
}
function aspxUFileInputKeyDown(evt, name, index) {
 if(_aspxGetKeyCode(evt) == ASPxKey.Tab) {
  var uploader = aspxGetControlCollection().Get(name);
  if (uploader != null)
   uploader.FileInputFocusNextElement(evt, index, evt.shiftKey);
 }
}
function aspxUTextBoxMouseMove(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextBoxMouseMove(evt, index);
}
function aspxUTextBoxMouseOut(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextBoxMouseOut(evt, index);
}
function aspxUBrowseButtonMouseMove(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnBrowseButtonMouseMove(evt, index);
}
function aspxUBrowseButtonMouseOut(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnBrowseButtonMouseOut(evt, index);
}
function aspxUAddFileInputClick(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.AddFileInput(true);
}
function aspxURemoveFileInputClick(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.RemoveFileInput(index, true);
}
function aspxUUploadFileClick(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.Upload();
}
function aspxUCancelFileClick(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.Cancel();
}
function aspxUClearFileInputClick(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.ClearInputText(index, true);
}
function aspxFakeUploadIframeOnLoad(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if ((uploader != null) && uploader.isInCallback)
  uploader.OnCompleteFileUpload();
}
function aspxUploadProcessing(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.UploadProcessing();
}
function aspxUploadAsyncXmlHttpResponse(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.UploadAsyncXmlHttpResponse();
}
function aspxUploadAsyncCancelProcessing(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.UploadAsyncCancelProcessing();
}
function aspxShowProgressInfoPanel(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null && uploader.isInCallback)
  uploader.ShowProgressInfoPanel(true);
}
function aspxSLOnLoad(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if(uploader != null)
  uploader.OnPluginLoaded(index);
}
function aspxSLOnError(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if(uploader != null)
  uploader.OnPluginError(index);
}
function aspxSLOnFileSelectionChanged(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextChanged(index, true);
}

ASPxClientFileManagerConsts = {};
ASPxClientFileManagerConsts.SplitterPostfix = "_Splitter";
ASPxClientFileManagerConsts.ToolbarPostfix = "_Toolbar";
ASPxClientFileManagerConsts.FoldersPostfix = "_Folders";
ASPxClientFileManagerConsts.GridPostfix = "_FilesGridView";
ASPxClientFileManagerConsts.UploadPostfix = "_Upload";
ASPxClientFileManagerConsts.UploadButtonPostfix = "_UploadButton";
ASPxClientFileManagerConsts.RenameFileInputPostfix = "_RFI";
ASPxClientFileManagerConsts.FolderBrowserPopupPostfix = "_FolderBrowserPopup";
ASPxClientFileManagerConsts.FolderBrowserFoldersContainerPostfix = "_FC";
ASPxClientFileManagerConsts.FolderBrowserFolders = "_FolderBrowserFolders";
ASPxClientFileManagerConsts.FolderBrowserDialogOkButtonPostfix = "_OkB";
ASPxClientFileManagerConsts.FolderBrowserDialogCancelButtonPostfix = "_CaB";
ASPxClientFileManagerConsts.FileClassName = "dxfm-file";
ASPxClientFileManagerConsts.FileContainerClassName = "dxfm-fileContainer";
ASPxClientFileManagerConsts.FolderContentContainerClassName = "dxtv-nd";
ASPxClientFileManagerConsts.UploadControlDisableClassName = "dxfm-uploadDisable";
ASPxClientFileManagerConsts.MultiSelectClassName = "dxfm-multiSelect";
ASPxClientFileManagerConsts.GridColumnTitleClassName = "dxfm-fileName";
ASPxClientFileManagerConsts.CallbackArgumentSeparator = "|";
ASPxClientFileManagerConsts.PathSeparator = "\\";
ASPxClientFileManagerConsts.FileNameSeparator = "::";
ASPxClientFileManagerConsts.StateField = {
 CurrentPath: "currentPath",
 FileFilter:   "file.filter",
 FileSelected: "file.selected",
 FileFocused: "file.focused",
 SplitterState: "splitter"
}
ASPxClientFileManagerConsts.ToolbarName = {
 Delete:  "Delete",
 Move:    "Move",
 Refresh: "Refresh",
 Rename:  "Rename",
 Create:  "Create",
 Download:   "Download",
 Copy:    "Copy"
}
ASPxClientFileManagerConsts.CallbackCommandId = {
 GetFileList: 0,
 Refresh:  1,
 DeleteFile:  2,
 DeleteFolder:   3,
 RenameFile:  4,
 RenameFolder:   5,
 ShowFolderBrowserDialog:   6,
 MoveFile:    7,
 MoveFolder:  8,
 CreateQuery: 9,
 Create:   10,
 FoldersTvCallback:    11,
 FolderBrowserFoldersTvCallback:   12,
 Download:    13,
 ServerProcessFileOpened:  14,
 GridView: 15,
 ChangeFolderTvCallback: 16,
 CopyFile: 17,
 CopyFolder: 18
};
ASPxClientFileManagerConsts.SelectedArea = {
 Folders: 0,
 Files:   1,
 None:    2
};
ASPxClientFileManagerConsts.Rights = {
 Default:   0,
 Allow:  1,
 Deny:   2
};
ASPxClientFileManagerConsts.ViewMode = {
 Thumbnail:  0,
 Grid:    1 
};
ASPxClientFileManagerConsts.ModifierKey = {
 None: 0,
 Shift: 1,
 Ctrl: 2
};
ASPxClientFileManagerConsts.Templates = {};
ASPxClientFileManagerConsts.Templates.File = 
 "<div id=\"{{fileId}}\" class=\"{{fileCssClass}}\" title=\"{{fileTitle}}\">" + 
  "<div class=\"{{fileContentCssClass}}\">" +
   "{{fileImage}}" +
   "{{checkBoxImage}}" +
   "<br/>" +
   "<div>{{fileName}}</div>" +
  "</div>" +
 "</div>";
ASPxClientFileManagerConsts.Templates.HighlightedText = "{{textStart}}<span class=\"{{highlightCssClass}}\">{{textMiddle}}</span>{{textEnd}}";
ASPxClientFileManager = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.styleSheet = _aspxGetCurrentStyleSheet();
  this.elements = new ASPxClientFileManager.ElementsHelper(this);
  this.isEnabled = !!this.elements.stateElement;
  this.state = new ASPxClientFileManager.StateHelper(this);
  if(this.elements.filterElement)
   this.filter = new ASPxClientFileManager.FilterHelper(this);
  this.files = {};
  this.noThumbnailImage = "";
  this.customThumbnails = [];
  this.thumbnailCheckBoxImage = "";
  this.selectedFolder = null;
  this.allowUpload = true;
  this.uploadText = "";
  this.cancelUploadText = "";
  this.allowUploadToCurrentFolder = false;
  this.uploadErrorText = "";
  this.showPath = true;
  this.showAppRelativePath = false;
  this.selectedArea = ASPxClientFileManagerConsts.SelectedArea.Folders;
  this.allowMultiSelect = false;
  this.focusedItem = null;
  this.allowRename = false;
  this.allowMove = false;
  this.allowDelete = false;
  this.allowCreate = false;
  this.renameMode = false;
  this.createMode = false;
  this.deleteConfirmText = "";
  this.downloadError = "";
  this.folderDialogCommand = null;
  this.accessibilityCompliant = false;
  this.filterDelay = 200;
  this.folderRights = {};
  this.filesRules = [];
  this.processOpenedEventOnServer = false;
  this.viewMode = ASPxClientFileManagerConsts.ViewMode.Thumbnail;
  this.SelectedFileChanged = new ASPxClientEvent();
  this.SelectedFileOpened = new ASPxClientEvent();
  this.FocusedItemChanged = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.CurrentFolderChanged = new ASPxClientEvent();
  this.FolderCreating = new ASPxClientEvent();
  this.FolderCreated = new ASPxClientEvent();
  this.ItemRenaming = new ASPxClientEvent();
  this.ItemRenamed = new ASPxClientEvent();
  this.ItemDeleting = new ASPxClientEvent();
  this.ItemDeleted = new ASPxClientEvent();
  this.ItemMoving = new ASPxClientEvent();
  this.ItemMoved = new ASPxClientEvent();
  this.ItemCopying = new ASPxClientEvent();
  this.ItemCopied = new ASPxClientEvent();
  this.ErrorOccurred = new ASPxClientEvent();
  this.ErrorAlertDisplaying = new ASPxClientEvent();
  this.FileUploading = new ASPxClientEvent();
  this.FileUploaded = new ASPxClientEvent();
  this.FileDownloading = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  this.constructor.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  this.InitializeKbdHelper();
  if(this.allowUpload && this.isEnabled)
   this.InitializeUploadControl();
  this.InitializeFoldersTreeView();
  if(this.showPath && !this.showAppRelativePath)
   this.UpdatePath();
  if(!this.foldersHidden)
   this.selectedFolder = this.GetTreeView().GetSelectedNode();
  if(this.isEnabled) {
   this.InitializeEventHandlers();
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
  }
  this.InitializeSplitterPaneSize("ToolbarPane");
  this.InitializeSplitterPaneSize("UploadPanelPane");
 },
 AfterInitialize: function() {
  this.constructor.prototype.AfterInitialize.call(this);
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid)
   this.InitializeFilesGridView();
  if(this.allowMove)
   this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Move, this.IsMoveAvailable());
  if(this.allowCopy)
   this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Copy, this.IsCopyAvailable());
  if(this.inCommandProcessing)
   this.EndCommandProcessing();
  if(this.selectedFiles) {
   this.selectFiles(this.selectedFiles);
   this.selectedFiles = null;
  }
  this.KeepCurrentPath();
  if(this.downloadError)
   this.showError(ASPxClientFileManagerCommandConsts.Download, this.downloadError.editErrorText, this.downloadError.editErrorCode.toString());
 },
 InitializeSplitterPaneSize: function(paneName, correction) {
  var pane = this.GetSplitter().GetPaneByName(paneName);
  if(pane) {
   var element = pane.helper.GetContentContainerElement();
   pane.SetSize(element.scrollHeight);
  }
 },
 InitializeFoldersTreeView: function() {
  var treeView = this.GetTreeView();
  if(treeView)
   treeView.InitFileManagerCallbacks(this, false);
  this.foldersHidden = !treeView;
 },
 InitializeFilesGridView: function() {
  var gridView = this.GetFilesGridView();
  gridView.fileManager = this;
  this.AdjustGridViewSize();
  this.ensureGridViewFiles();
  gridView.mainElement.className += " " + this.styles.rowSelectionActiveCssClass;
 },
 InitializeUploadControl: function() {
  var uc = this.GetUploadControl();
  uc.fileManager = this;
  this.UpdateUploadPanelVisibility();
  if(this.uploadErrorText)
   this.showError(ASPxClientFileManagerCommandConsts.Upload, this.uploadErrorText);
 },
 InitializeKbdHelper: function() {
  this.kbdHelper = new ASPxClientFileManager.KbdHelper(this);
  this.kbdHelper.Init();
  ASPxKbdHelper.RegisterAccessKey(this);
 },
 InitializeEventHandlers: function() {
  var _this = this;
  if(this.viewMode != ASPxClientFileManagerConsts.ViewMode.Grid)
   _aspxAttachEventToElement(this.elements.GetFilesContainer().parentNode, "mousedown", function(evt) { _this.OnFilesContainerClick(evt); });
  if(!this.foldersHidden) {
   var foldersContainer = this.elements.GetFoldersContainer();
   _aspxAttachEventToElement(foldersContainer, "mousedown", function(evt) {_this.OnFoldersContainerClick(evt); });
   _aspxAttachEventToElement(foldersContainer, "keydown", function(evt) {
    if(_aspxGetKeyCode(evt) == ASPxKey.Enter && !_this.IsEditMode())
     _this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Folders);
   });
  }
  _aspxAttachEventToDocument("click", function(evt) { _this.OnDocumentClick(evt); })
  if(this.allowRename)
   this.PrepareRenameInput();
  if(this.allowMove || this.allowCopy)
   this.PrepareFolderBrowserDialog();
  if(this.allowUpload)
   _aspxAttachEventToElement(this.elements.GetUploadButtonElement(), "click", function() { _this.GetUploadControl().OnButtonClick(); });
  if(this.accessibilityCompliant) {
   _aspxAttachEventToElement(this.elements.GetFocusInput(), "focus", function() { 
    _this.Focus();
    if(_this.getSelectedFiles().length == 0) {
     _this.forEachFile(function(file) {
      file.Select();
      return true;
     });
    }
    _this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Files); 
   });
  }
  this.InitializeGridViewEventHandlers();
 },
 InitializeGridViewEventHandlers: function() {
  if(this.viewMode != ASPxClientFileManagerConsts.ViewMode.Grid)
   return;
  var grid = this.GetFilesGridView();
  grid.FocusedRowChanged.AddHandler(function(s, e) {
   this.onFilesGridViewFocusedRowChanged(s, e);
  }.aspxBind(this));
  grid.SelectionChanged.AddHandler(function(s, e) { 
   this.onFilesGridViewSelectionChanged(s, e);
  }.aspxBind(this));
  grid.RowDblClick.AddHandler(function(s, e) { 
   this.onFilesGridViewRowDblClick(s, e);
  }.aspxBind(this));
  _aspxAttachEventToElement(grid.GetMainElement(), "click", function(evt) { 
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Files); 
  }.aspxBind(this));
 },
 PrepareRenameInput: function() {
  var _this = this;
  var input = this.elements.GetRenameInputElement();
  _aspxAttachEventToElement(input, "keydown", function(evt) { 
   _this.OnRenameInputKeyDown(evt); 
   if(_aspxGetKeyCode(evt) == ASPxKey.Enter)
    return _aspxPreventEventAndBubble(evt);
  });
  _aspxAttachEventToElement(input, "blur", function() { _this.DoRename(); });
  _aspxAttachEventToElement(input, "keypress", function(evt) { 
   if(_aspxGetKeyCode(evt) == ASPxKey.Enter)
    return _aspxPreventEventAndBubble(evt);
  });
 },
 PrepareFolderBrowserDialog: function() {
  var _this = this;
  _aspxAttachEventToElement(this.elements.GetFolderBrowserDialogOkButton(), "click", function() { _this.FolderBrowserOkButtonClick(); });
  _aspxAttachEventToElement(this.elements.GetFolderBrowserDialogCancelButton(), "click", function() { _this.FolderBrowserCancelButtonClick(); });
 },
 InitializeToolbars: function() {
  var toolbar = this.GetToolbar();
  if(!toolbar || this.toolbarsInitialized) {
   this.toolbarsInitialized = true;
   return;
  }
  var contentElement = _aspxGetChildByTagName(toolbar.GetMainElement(), "UL", 0);
  if(contentElement.offsetWidth > 0) {
   this.toolbarsInitialized = true;
   var commonWidth = 0;
   for(var i = 0; i < contentElement.childNodes.length; i++) {
    var child = contentElement.childNodes[i];
    if(child.tagName == "LI") {
     commonWidth += child.offsetWidth;
     var currentStyle = _aspxGetCurrentStyle(child);
     commonWidth += _aspxPxToInt(currentStyle.marginLeft);
     commonWidth += _aspxPxToInt(currentStyle.marginRight);
    }
   }
   if(__aspxBrowserWithHardwareAcceleration)
    commonWidth++;
   if(__aspxWebKitFamily && window.devicePixelRatio !== 1) 
    commonWidth += 2;
   _aspxSetOffsetWidth(contentElement, commonWidth);
  }
 },
 UpdateFolderRights: function(str) {
  this.folderRights = {
   allowMove:   str.indexOf("m") > -1,
   allowRename: str.indexOf("r") > -1,
   allowDelete: str.indexOf("d") > -1,
   allowCreate: str.indexOf("c") > -1,
   allowUpload: str.indexOf("u") > -1,
   allowCopy:   str.indexOf("o") > -1
  };
 },
 AdjustControlCore: function() {
  aspxGetControlCollection().AdjustControls(this.GetMainElement());
  this.UpdateUploadPanelVisibility(); 
  var instance = this;
  window.setTimeout(function() {
   instance.CorrectScroll(this.focusedItem);
   instance.InitializeToolbars();
  }, 0);
  if(this.prepareCreateNode) {
   window.setTimeout(function() { 
    instance.PrepareCreateNode();
   }, 0);
   this.prepareCreateNode = false;
  };
  setTimeout(function() {
   this.AdjustGridViewSize();
  }.aspxBind(this), 0);
 },
 AdjustGridViewSize: function() {
  if(this.viewMode != ASPxClientFileManagerConsts.ViewMode.Grid)
   return;
  var containerStyle = _aspxGetCurrentStyle(this.elements.GetFilesPaneContainer());
  this.GetFilesGridView().SetHeight(_aspxPxToInt(containerStyle.height));
 },
 UpdateFilesRules: function(rules) {
  this.filesRules = [];
  var ruleCount = rules.length;
  for(var i = 0; i < ruleCount; i++) {
   var ruleParts = rules[i];
   var rule = {
    pattern: ruleParts[0],
    edit: this.GetPermissionValue(ruleParts[1].charAt(0)),
    browse: this.GetPermissionValue(ruleParts[1].charAt(1))
   };
   this.filesRules.push(rule);
  }
 },
 GetPermissionValue: function(str) {
  return str == "-" 
   ? ASPxClientFileManagerConsts.Rights.Default
   : str == "a" ? ASPxClientFileManagerConsts.Rights.Allow : ASPxClientFileManagerConsts.Rights.Deny;
 },
 EscapeRegExp: function(str) {
  return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
 },
 IsAppliedRule: function(rule, fileName) {
  var filePath = this.GetCurrentPath(true) + ASPxClientFileManagerConsts.PathSeparator + fileName;
  var regexpPattern = "^" + this.EscapeRegExp(rule.pattern).replace(/\\\*/g, ".*").replace(/\\\?/g, ".") + "$";
  var regExp = new RegExp(regexpPattern, "i");
  return regExp.test(filePath);
 },
 CheckEditAccessByFileName: function(fileName) {
  var result = true;
  var ruleCount = this.filesRules.length;
  for(var i = 0; i < ruleCount; i++) {
   var rule = this.filesRules[i];
   if(this.IsAppliedRule(rule, fileName)) {
    if(rule.edit != ASPxClientFileManagerConsts.Rights.Default)
     result = rule.edit == ASPxClientFileManagerConsts.Rights.Allow;
    if(rule.browse != ASPxClientFileManagerConsts.Rights.Default)
     result = rule.browse == ASPxClientFileManagerConsts.Rights.Allow;
   }
  }
  return result;
 },
 SetStyles: function(styles) {
  var stylesInfo = ASPxClientFileManager.StylesHelper.GetStylesInfo(
   styles.iw,
   styles.ih,
   this.elements.GetFilesContainer() || this.elements.GetFilesPaneContainer(),
   [
    [styles.fc, styles.fs],
    [styles.fsac, styles.fsas],
    [styles.fsic, styles.fsis],
    [styles.fhc, styles.fhs],
    [styles.ffc, styles.ffs]
   ]
  );
  var contentWidth = "", contentHeight = "";
  if(stylesInfo.contentWidth > 0)
   contentWidth = "width:" + Math.max(stylesInfo.contentWidth, styles.ts) + "px;";
  if(stylesInfo.contentHeight > 0)
   contentHeight = "height:" + Math.max(stylesInfo.contentHeight, styles.ts) + "px;";
  this.styles = {};
  this.styles.thumbnailSize = styles.ts;
  this.styles.fileCssClass = this.MergeCssClassWithStyleString(styles.fc, stylesInfo.styleStrings[0]);
  this.styles.fileContentCssClass = this.MergeCssClassWithStyleString(styles.fcc, styles.fcs + contentWidth + contentHeight);
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail)
   this.styles.fileSelectionActiveCssClass = this.MergeCssClassWithStyleString(styles.fsac, stylesInfo.styleStrings[1]);
  else
   this.styles.fileSelectionActiveCssClass = styles.fsac;
  this.styles.fileSelectionInactiveCssClass = this.MergeCssClassWithStyleString(styles.fsic, stylesInfo.styleStrings[2]);
  this.styles.fileHoverCssClass = this.MergeCssClassWithStyleString(styles.fhc, stylesInfo.styleStrings[3]); 
  this.styles.folderSelectionActiveCssClass = styles.fosac;
  this.styles.folderSelectionInactiveCssClass = this.MergeCssClassWithStyleString(styles.fosic, styles.fosis);
  this.styles.highlightCssClass = this.MergeCssClassWithStyleString(styles.hc, styles.hs);
  this.styles.fileFocusCssClass = this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid ? styles.ffc : this.MergeCssClassWithStyleString(styles.ffc, stylesInfo.styleStrings[4]);
  if(this.allowMultiSelect && this.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail)
   this.UpdateThumbnailCheckStyle();
  this.styles.rowSelectionActiveCssClass = "selectActive";
  this.styles.rowSelectionInactiveCssClass = "selectInactive";
  this.fileTemplate = ASPxClientFileManager.PrepareTemplate(
   ASPxClientFileManagerConsts.Templates.File,
   {
    fileCssClass: this.styles.fileCssClass,
    fileContentCssClass: this.styles.fileContentCssClass
   }
  );
 },
 MergeCssClassWithStyleString: function(cssClass, styleString) {
  if(!styleString)
   return cssClass;
  var styleStringCssClass = _aspxCreateImportantStyleRule(this.styleSheet, styleString);
  return cssClass
   ? cssClass + " " + styleStringCssClass
   : styleStringCssClass;
 },
 SetHeight: function(height) {
  this.GetMainElement().style.height = height + "px";
  this.GetSplitter().SetHeight(height);
  this.AdjustGridViewSize();
 },
 SetWidth: function(width) {
  this.GetSplitter().SetWidth(width);
 },
 forEachFile: function(action) {
  for(var file in this.files) {
   if(this.files.hasOwnProperty(file) && action(this.files[file]))
    return;
  }
 },
 isEmptyFilesList: function() {
  for(var file in this.files) {
   if(this.files.hasOwnProperty(file))
    return false;
  }
  return true;
 },
 getSelectedFiles: function() {
  var files = [];
  this.forEachFile(function(file) {
   if(file.IsSelected())
    files.push(file);
  });
  files.sort(function(file1, file2) { return file1.index - file2.index; });
  return files;
 },
 UpdateThumbnailCheckStyle: function() {
  var checkBoxImageElement = _aspxCreateHtmlElementFromString(this.thumbnailCheckBoxImage);
  checkBoxImageElement.style.position = "absolute";
  checkBoxImageElement.style.top = "-100000px";
  document.body.appendChild(checkBoxImageElement);
  var marginBottom = "margin-bottom: " + (this.styles.thumbnailSize - parseInt(checkBoxImageElement.offsetHeight)).toString() + "px";
  var marginLeft = "margin-left: -" + checkBoxImageElement.offsetWidth + "px";
  checkBoxImageElement.style.position = "";
  checkBoxImageElement.style.top = "";
  document.body.removeChild(checkBoxImageElement);
  checkBoxImageElement.className += " " + _aspxCreateImportantStyleRule(_aspxGetCurrentStyleSheet(), marginBottom + "; " + marginLeft);
  this.thumbnailCheckBoxImage = checkBoxImageElement.outerHTML;
 },
 CreateFiles: function(filesList, skipState) {
  this.files = {};
  this.fileElementsIds = {};
  for(var i = 0; i < filesList.length; i++) {
   var file = new ASPxClientFileManagerFile(this, i, filesList[i]);
   this.files[file.name] = file;
   this.fileElementsIds[file.id] = file;
  }
  if(this.isEnabled) {
   this.PrepareFileStates();
   if(this.filter)
    this.filter.UpdateEnabled(!this.isEmptyFilesList());
   this.delayedApplyState = !this.isInitialized && this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid;
   if(!skipState && !this.delayedApplyState)
    this.ApplyControlState(false);
  }
 },
 ClearFiles: function(isNewFileList) {
  if(isNewFileList) {
   this.unselectAllFiles();
   this.state.DropField("file");
  }
  this.ClearStateControllerHoverItems();
  this.files = {};
  this.fileElementsIds = {};
  this.focusedItem = null;
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail)
   this.elements.DropFilesContainer();
 },
 GetVisibleFiles: function() {
  var files = [];
  this.forEachFile(function(file) {
   if(file.GetVisible())
    files.push(file);
  });
  files.sort(function(a, b) { return a.index - b.index });
  return files;
 },
 UpdateFileList: function(callbackCommand) {
  this.state.DropField("file");
  this.SendCallback(callbackCommand);
 },
 OpenFile: function(file) {
  this.raiseSelectedFileOpenedEvent(file);
 },
 ensureGridViewFiles: function() {
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid) {
   var grid = this.GetFilesGridView();
   this.forEachFile(function(file) {
    file.index = grid.GetRowIndexByKey(file.name);
    var row = grid.GetRow(file.index);
    if(row)
     row.title = file.tooltip;
   });
  }
  if(this.delayedApplyState) {
   this.delayedApplyState = null;
   this.ApplyControlState(false);
  }
 },
 ApplyControlState: function(skipEvents) {
  if(!this.isEnabled) return;
  var focusFile = this.state.GetField(ASPxClientFileManagerConsts.StateField.FileFocused);
  var selectFiles = this.state.GetField(ASPxClientFileManagerConsts.StateField.FileSelected);
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid) {
   this.GetFilesGridView().UnselectAllRowsOnPage();
   this.GetFilesGridView().SetFocusedRowIndex(-1);
  }
  if(selectFiles) {
   var focused = focusFile && _aspxArrayIndexOf(selectFiles, focusFile) > -1 ? this.focusFile(focusFile, skipEvents) : true;
   var selectedFiles = this.selectFiles(selectFiles, skipEvents, !focused);
   if(selectedFiles.length != selectFiles.length) {
    for(var fileName, i = 0; fileName = selectFiles[i]; i++) {
     if(_aspxArrayIndexOf(selectedFiles, fileName) < 0)
      this.raiseSelectionChanged(fileName, ASPxClientFileManager.GetItemFullName(fileName, this), false);
    }
   }
   this.saveSelectedFilesToState();
  }
  var filterValue = this.state.GetField(ASPxClientFileManagerConsts.StateField.FileFilter);
  if(filterValue && this.filter)
   this.filter.SetFilterValue(filterValue);
 },
 PrepareFileStates: function() {
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid)
   return;
  this.forEachFile(function(file) {
   var fileId = file.id;
   aspxGetStateController().AddSelectedItem(
    fileId,
    [this.styles.fileSelectionActiveCssClass],
    [""],
    null,
    null,
    null
   );
   aspxGetStateController().AddHoverItem(
    fileId,
    [this.styles.fileHoverCssClass],
    [""],
    null,
    null,
    null
   );
  }.aspxBind(this));
 },
 ClearStateControllerHoverItems: function() {
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid)
   return;
  this.forEachFile(function(file) {
   var fileId = file.id;
   aspxGetStateController().RemoveSelectedItem(fileId);
   aspxGetStateController().RemoveHoverItem(fileId);
  });
 },
 OnFolderClick: function(node) {
  this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Folders); 
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Move, this.IsMoveAvailable());
  if(this.selectedFolder == node)
   return;
  this.selectedFolder = node;
  this.needCurrentFolderChangedRaise = true;
  this.DoRename();
  this.UpdateFileList(ASPxClientFileManagerConsts.CallbackCommandId.GetFileList);
 },
 OnFileClick: function(file, modifierKey) {
  if(this.allowRename && !file.IsSelected())
   this.DoRename();
  if(this.allowMultiSelect)
   this.onFileClickInMultipleMode(file, modifierKey);
  else
   file.Select();
  this.CorrectScroll(file);
 },
 onFileClickInMultipleMode: function(file, modifierKey) {
  var visibleFiles = this.GetVisibleFiles();
  var focusFile = this.focusedItem || visibleFiles[0];
  file.focus();
  if(modifierKey == ASPxClientFileManagerConsts.ModifierKey.None) {
   file.Select();
   this.unselectAllFiles([file]);
  }
  else if(modifierKey == ASPxClientFileManagerConsts.ModifierKey.Ctrl) {
   if(!(this.getSelectedFiles().length == 1 && file.IsSelected()))
    file.invertSelection();
  }
  else if(modifierKey == ASPxClientFileManagerConsts.ModifierKey.Shift) {
   if(file == focusFile)
    return;
   var select = !(file.IsSelected() && focusFile.IsSelected());
   var direction = file.index > focusFile.index;
   for(var i = focusFile.index; direction > 0 ? i <= file.index : i >= file.index; direction > 0 ? i++ : i--) {
    var nextFile = visibleFiles[i];
    if(select)
     nextFile.Select();
    else if(nextFile != file)
     nextFile.Unselect();
   }
  }
 },
 Focus: function() {
  if(this.kbdHelper)
   this.kbdHelper.Focus();
 },
 OnFilesUploadComplete: function(evt) {
  var uc = this.GetUploadControl();
  uc.UpdateButtonValue(false);
  this.OnUploadTextChanged("");
  var result = {
   uploadErrorText: evt.errorText
  };
  if(evt.callbackData != '')
   result = eval(evt.callbackData);
  uc.ClearText();
  if(result.uploadErrorText) {
   if(result.errorCode === undefined)
    result.errorCode = "" + ASPxClientFileManagerErrorConsts.Unspecified;
   this.showError(ASPxClientFileManagerCommandConsts.Upload, result.uploadErrorText, result.errorCode);
  }
  if(result.uploadSuccess) {
   this.UpdateFileList(ASPxClientFileManagerConsts.CallbackCommandId.GetFileList);
   this.raiseFileUploaded();
  }
  this.HideLoadingElements();
 },
 OnUploadTextChanged: function(text) {
  this.GetUploadControl().SetButtonEnable(text != "");
 },
 OnToolbarItemClick: function(itemName) {
  if(this.renameMode)
   this.DoRename();
  switch(itemName) {
   case ASPxClientFileManagerConsts.ToolbarName.Refresh:
    this.Refresh();
    break;
   case ASPxClientFileManagerConsts.ToolbarName.Delete:
    this.Delete();
    break;
   case ASPxClientFileManagerConsts.ToolbarName.Rename:
    this.Rename();
    break;
   case ASPxClientFileManagerConsts.ToolbarName.Move:
    this.Move();
    break;
   case ASPxClientFileManagerConsts.ToolbarName.Create:
    this.Create();
    break;
   case ASPxClientFileManagerConsts.ToolbarName.Download:
    this.Download();
    break;
   case ASPxClientFileManagerConsts.ToolbarName.Copy:
    this.Copy();
    break;
  }
 },
 OnFolderBrowserDialogClosing: function() {
  this.folderDialogCommand = null;
  this.UpdateToolbars();
 },
 OnFolderBrowserDialogShown: function() {
  this.UpdateToolbars();
 },
 OnDocumentClick: function(evt) {
  if(!this.GetMainElement() || !this.isExists())
   return;
  var element = _aspxGetEventSource(evt);
  if(element.parentNode && !_aspxGetIsParent(this.GetMainElement(), element)) {
   if(this.createMode)
    this.DoCreate();
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
  }
 },
 OnFilesContainerClick: function(evt) {
  if(!_aspxGetIsLeftButtonPressed(evt))
   return;
  if(this.createMode)
   this.DoCreate();
  else {
   var sourceElement = _aspxGetParentByTagName(_aspxGetEventSource(evt), "DIV");
   while(!sourceElement.id)
    sourceElement = sourceElement.parentNode;
   var file = this.fileElementsIds[sourceElement.id];
   if(file)
    this.OnFileClick(file, this.getKeyModifier(evt));
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Files);
  }
 },
 onFilesGridViewRowDblClick: function(s, e) {
  if(this.createMode)
   this.DoCreate();
  else {
   var file = this.files[s.GetRowKey(e.visibleIndex)];
   this.OpenFile(file);
  }
 },
 onFilesGridViewFocusedRowChanged: function(s, e) {
  if(this.inCallback)
   return;
  var rowIndex = s.GetFocusedRowIndex();
  if(rowIndex == -1)
   return;
  var file = this.files[s.GetRowKey(rowIndex)];
  if(this.allowMultiSelect)
   file.focus();
  else {
   var selectedKeys = s.GetSelectedKeysOnPage();
   for(var selKey, i = 0; selKey = selectedKeys[i]; i++) {
    if(selKey != file.name)
     s.UnselectRowOnPage(this.files[selKey].index);
   }
   file.Select();
  }
 },
 onFilesGridViewSelectionChanged: function(s, e) {
  if(!this.allowMultiSelect || this.inCallback)
   return;
  if(this.createMode)
   this.DoCreate();
  if(e.visibleIndex == -1 && e.isAllRecordsOnPage) {
   this.forEachFile(function(file) {
    if(e.isSelected)
     file.Select();
    else
     file.Unselect();
   });
  }
  else {
   var file = this.files[s.GetRowKey(e.visibleIndex)];
   if(e.isSelected)
    file.Select();
   else
    file.Unselect();
  }
  this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Files);
 },
 OnFoldersContainerClick: function(evt) {
  this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Folders); 
 },
 OnSplitterPaneResizeCompleted: function() {
  var splitter = this.GetSplitter();
  if(this.cookieName && this.cookieName != "") {
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, splitter.GetClientStateString());
  }
 },
 OnRenameInputKeyDown: function(evt) {
  switch(_aspxGetKeyCode(evt)) {
   case ASPxKey.Enter:
    if(this.renameMode)
     this.DoRename();
     this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
    break;
   case ASPxKey.Esc:
    this.HideRenameInput();
    _aspxPreventEvent(evt);
    this.Focus();
    break;
   case ASPxKey.Tab:
    this.DoRename();
    this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
    break;
  }
 },
 getKeyModifier: function(evt) {
  if(evt.shiftKey)
   return ASPxClientFileManagerConsts.ModifierKey.Shift;
  if(evt.ctrlKey)
   return ASPxClientFileManagerConsts.ModifierKey.Ctrl;
  return ASPxClientFileManagerConsts.ModifierKey.None;
 },
 raiseEventWithArgsInternal: function(eventName, args) {
  var evt = this[eventName];
  if(!evt.IsEmpty())
   evt.FireEvent(this, args);
  return args;
 },
 raiseSelectedFileOpenedEvent: function(file) {
  var args = new ASPxClientFileManagerFileOpenedEventArgs(file);
  args.processOnServer = this.processOpenedEventOnServer;
  this.raiseEventWithArgsInternal("SelectedFileOpened", args);
  if(args.processOnServer)
   this.SendPostBack(ASPxClientFileManagerConsts.CallbackCommandId.ServerProcessFileOpened);
 },
 raiseFocusedItemChangedEvent: function(file) {
  if(!this.allowMultiSelect)
   return;
  var args = new ASPxClientFileManagerFocusedItemChangedEventArgs(file.name, file.GetFullName());
  this.raiseEventWithArgsInternal("FocusedItemChanged", args);
 },
 raiseSelectedFileChangedEvent: function(file) {
  if(!this.allowMultiSelect)
   this.raiseEventWithArgsInternal("SelectedFileChanged", new ASPxClientFileManagerFileEventArgs(file));
 },
 raiseSelectionChanged: function(name, fullName, isSelected) {
  var args = new ASPxClientFileManagerSelectionChangedEventArgs(name, fullName, isSelected);
  this.raiseEventWithArgsInternal("SelectionChanged", args);
 },
 raiseCurrentFolderChangedEvent: function() {
  var args = new ASPxClientFileManagerCurrentFolderChangedEventArgs(this.getFolderName(), this.GetCurrentPath());
  this.raiseEventWithArgsInternal("CurrentFolderChanged", args);
 },
 raiseFileEditingEvent: function(eventName, file) {
  var arg = new ASPxClientFileManagerEditingEventArgs(file.GetFullName(), file.name, false);
  arg = this.raiseEventWithArgsInternal(eventName, arg);
  return !arg.cancel;
 },
 raiseFolderEditingEvent: function(eventName) {
  var arg = new ASPxClientFileManagerEditingEventArgs(this.GetCurrentPath(), this.getFolderName(), true);
  arg = this.raiseEventWithArgsInternal(eventName, arg);
  return !arg.cancel;
 },
 raiseFileDeleting: function(file) {
  return this.raiseFileEditingEvent("ItemDeleting", file);
 },
 raiseFolderDeleting: function(file) {
  return this.raiseFolderEditingEvent("ItemDeleting");
 },
 raiseFileMoving: function(file) {
  return this.raiseFileEditingEvent("ItemMoving", file);
 },
 raiseFolderMoving: function() {
  return this.raiseFolderEditingEvent("ItemMoving");
 },
 raiseFileCopying: function(file) {
  return this.raiseFileEditingEvent("ItemCopying", file);
 },
 raiseFolderCopying: function() {
  return this.raiseFolderEditingEvent("ItemCopying");
 },
 raiseFolderCreating: function() {
  return this.raiseFolderEditingEvent("FolderCreating");
 },
 raiseFileRenaming: function(file) {
  return this.raiseFileEditingEvent("ItemRenaming", file);
 },
 raiseFolderRenaming: function(file) {
  return this.raiseFolderEditingEvent("ItemRenaming");
 },
 raiseFolderCreated: function() {
  var arg = new ASPxClientFileManagerCreateEventArgs(this.GetCurrentPath(), this.getFolderName(), true); 
  this.raiseEventWithArgsInternal("FolderCreated", arg);
 },
 raiseItemMoved: function() {
  var folderPath = this.GetCurrentPath();
  if(this.changeItemPositionOldInfo.isFolder) {
   this.raiseEventWithArgsInternal("ItemMoved", new ASPxClientFileManagerMoveEventArgs(folderPath, this.changeItemPositionOldInfo.name[0], this.changeItemPositionOldInfo.oldFolderFullName, true));
  }
  else {
   for(var fileName, i = 0; fileName = this.changeItemPositionOldInfo.name[i]; i++) {
    var fullName = folderPath + ASPxClientFileManagerConsts.PathSeparator + fileName;
    this.raiseEventWithArgsInternal("ItemMoved", new ASPxClientFileManagerMoveEventArgs(fullName, fileName, this.changeItemPositionOldInfo.oldFolderFullName, false));
   }
  }
 },
 raiseItemCopied: function() {
  var folderPath = this.GetCurrentPath();
  if(this.changeItemPositionOldInfo.isFolder) {
   this.raiseEventWithArgsInternal("ItemCopied", new ASPxClientFileManagerCopyEventArgs(folderPath, this.changeItemPositionOldInfo.name[0], this.changeItemPositionOldInfo.oldFolderFullName, true));
  }
  else {
   for(var fileName, i = 0; fileName = this.changeItemPositionOldInfo.name[i]; i++) {
    var fullName = folderPath + ASPxClientFileManagerConsts.PathSeparator + fileName;
    this.raiseEventWithArgsInternal("ItemCopied", new ASPxClientFileManagerCopyEventArgs(fullName, fileName, this.changeItemPositionOldInfo.oldFolderFullName, false));
   }
  }
 },
 raiseItemDeleted: function() {
  var doi = this.deleteOldInfo;
  for(var i = 0; i < doi.name.length; i++) {
   this.raiseEventWithArgsInternal("ItemDeleted", new ASPxClientFileManagerDeleteEventArgs(doi.fullName[i], doi.name[i], this.deleteOldInfo.isFolder));
  }
 },
 raiseFileRenamed: function(oldName, file) {
  this.raiseEventWithArgsInternal("ItemRenamed", new ASPxClientFileManagerRenameEventArgs(file.GetFullName(), file.name, oldName, false));
 },
 raiseFolderRenamed: function(oldName) {
  this.raiseEventWithArgsInternal("ItemRenamed", new ASPxClientFileManagerRenameEventArgs(this.GetCurrentPath(), this.getFolderName(), oldName, true));
 },
 raiseFileDownloading: function(file) {
  var arg = this.raiseEventWithArgsInternal("FileDownloading", new ASPxClientFileManagerDownloadingEventArgs(file));
  return !arg.cancel;
 },
 raiseErrorOccurred: function(commandName, errorText, errorCode) {
  return this.raiseEventWithArgsInternal("ErrorOccurred", new ASPxClientFileManagerErrorEventArgs(commandName, errorText, errorCode));
 },
 raiseErrorAlertDisplaying: function(commandName, errorText) {
  return this.raiseEventWithArgsInternal("ErrorAlertDisplaying", new ASPxClientFileManagerErrorAlertDisplayingEventArgs(commandName, errorText));
 },
 raiseFileUploading: function() {
  var arg = this.raiseEventWithArgsInternal("FileUploading", new ASPxClientFileManagerUploadEventArgs(this.GetCurrentPath(), this.GetUploadControl().GetFileName()));
  return !arg.cancel;
 },
 raiseFileUploaded: function() {
  var arg = new ASPxClientFileManagerUploadedEventArgs(this.GetCurrentPath(), this.GetUploadControl().lastUploadedFile);
  this.raiseEventWithArgsInternal("FileUploaded", arg);
 },
 SendCallback: function(commandId, args) {
  this.inCallback = true;
  this.callbackOwner = null;
  this.KeepCurrentPath();
  var callbackArg = this.GetArgumentsString(commandId, args);
  if(!this.autoPostBack) {
   this.ShowLoadingElements();
   if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid && this.IsCommandNeedFilesRefresh(commandId)) {
    this.savedCallbackArg = callbackArg;
    this.GetFilesGridView().Refresh();
   }
   else
    this.CreateCallback(callbackArg);
  }
  else
   this.SendPostBack(callbackArg);
 },
 IsCommandNeedFilesRefresh: function(commandId) {
  return commandId != ASPxClientFileManagerConsts.CallbackCommandId.ShowFolderBrowserDialog;
 },
 GetArgumentsString: function(commandId, args) {
  var callbackString = commandId;
  if(args) {
   var argumentsString = ASPxIdent.IsArray(args)
    ? args.join(ASPxClientFileManagerConsts.CallbackArgumentSeparator)
    : args;
   callbackString += ASPxClientFileManagerConsts.CallbackArgumentSeparator + argumentsString;
  }
  return callbackString;
 },
 SendTreeViewCallback: function(treeView, callbackString) {
  this.KeepCurrentPath();
  if(this.delayedSetCurrentFolderPath !== undefined) {
   this.CreateCallback(
    ASPxClientFileManagerConsts.CallbackCommandId.ChangeFolderTvCallback +
    ASPxClientFileManagerConsts.CallbackArgumentSeparator +
    this.delayedSetCurrentFolderPath +
    ASPxClientFileManagerConsts.CallbackArgumentSeparator +
    callbackString);
  }
  else {
   this.callbackOwner = treeView;
   var commandId = treeView.isFolderBrowserFolders
    ? ASPxClientFileManagerConsts.CallbackCommandId.FolderBrowserFoldersTvCallback
    : ASPxClientFileManagerConsts.CallbackCommandId.FoldersTvCallback;
   callbackString = commandId + ASPxClientFileManagerConsts.CallbackArgumentSeparator + callbackString;
   this.CreateCallback(callbackString);
  }
 },
 SendGridViewCallback: function(gridView, callbackString, command) {
  this.KeepCurrentPath();
  if(command == "APPLYHEADERCOLUMNFILTER" || command == "APPLYFILTER")
   this.needResetSelection = true;
  if(command == "FUNCTION")
   this.skipClearFiles = true;
  this.ShowLoadingElements();
  if(this.savedCallbackArg != null) {
   var argPrefix = this.savedCallbackArg + ASPxClientFileManagerConsts.CallbackArgumentSeparator + ASPxClientFileManagerConsts.CallbackArgumentSeparator;
   this.savedCallbackArg = null;
   this.CreateCallback(argPrefix + ASPxClientFileManagerConsts.CallbackCommandId.GridView + ASPxClientFileManagerConsts.CallbackArgumentSeparator + callbackString);
  }
  else {
   this.CreateCallback(ASPxClientFileManagerConsts.CallbackCommandId.GridView + ASPxClientFileManagerConsts.CallbackArgumentSeparator + callbackString);
  }
 },
 ClearCallbackOwner: function() {
  this.callbackOwner = null;
 },
 OnCallback: function(result) {
  if(this.callbackOwner)
   this.callbackOwner.OnCallback(result);
  else
   this.ProcessCommandResult(result);
 },
 ProcessCommandResult: function(result) {
  this.inCommandProcessing = true;
  if(result.selectedArea != undefined)
   this.SetActiveArea(result.selectedArea ? ASPxClientFileManagerConsts.SelectedArea.Files : ASPxClientFileManagerConsts.SelectedArea.Folders);
  if(result.files && !this.skipClearFiles) {
   this.needApplyState = this.getSelectedFiles().length > 0 && result.isNewFileList ? 2 : 1;
   this.ClearFiles(result.isNewFileList);
   this.needResetSelection = this.needResetSelection || result.isNewFileList;
   this.customThumbnails = result.thumbnails;
   this.CreateFiles(result.files, true);
   if(typeof(result.folderRights) == "string")
    this.UpdateFolderRights(result.folderRights);
   if(result.filesRules)
    this.UpdateFilesRules(result.filesRules);
   this.allowUploadToCurrentFolder = result.allowUpload && this.folderRights.allowUpload;
   this.UpdateUploadPanelVisibility();
   this.UpdateToolbars();
  }
  if(result.gridViewResult) {
   this.GetFilesGridView().OnCallback(result.gridViewResult)
   this.needGridViewEndCallback = true;
  }
  if(result.foldersRender)
   this.RefreshFoldersOnCallback(result.foldersRender);
  if(result.selectedFiles)
   this.needSelectFiles = result.selectedFiles;
  if(result.treeViewResult) {
   this.GetTreeView().OnCallback(result.treeViewResult);
   this.needTreeViewEndCallback = true;
  }
  this.StartCommandProcessing(result);
  if(this.showPath)
   this.UpdatePath(result.path);
  this.skipClearFiles = null;
 },
 StartCommandProcessing: function(result) {
  var commandName;
  switch(result.command) {
   case ASPxClientFileManagerConsts.CallbackCommandId.CreateQuery:
    if(result.isSuccess) {
     this.createMode = true;
     this.prepareCreateNode = true;
     this.UpdateToolbars();
    }
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.Create:
    commandName = ASPxClientFileManagerCommandConsts.Create;
    if(result.isSuccess)
     this.needFolderCreatedRaise = true;
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.Refresh:
    this.selectedArea = ASPxClientFileManagerConsts.SelectedArea.Folders;
    this.UpdateToolbars();
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.RenameFile:
    commandName = ASPxClientFileManagerCommandConsts.Rename;
    if(result.isSuccess)
     this.needFileRenamedRaise = true;
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.RenameFolder:
    commandName = ASPxClientFileManagerCommandConsts.Rename;
    if(result.isSuccess)
     this.needFolderRenamedRaise = true;
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.ShowFolderBrowserDialog:
    if(result.isSuccess) {
     this.ShowFolderBrowserPopup(result.folderBrowserFoldersRender);
     this.needInitFolderBrowserFolders = true;
    }
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.MoveFolder:
   case ASPxClientFileManagerConsts.CallbackCommandId.MoveFile:
    commandName = ASPxClientFileManagerCommandConsts.Move;
    if(result.isSuccess)
     this.needItemMovedRaise = true;
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.CopyFolder:
   case ASPxClientFileManagerConsts.CallbackCommandId.CopyFile:
    commandName = ASPxClientFileManagerCommandConsts.Copy;
    if(result.isSuccess)
     this.needItemCopiedRaise = true;
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.DeleteFile:
   case ASPxClientFileManagerConsts.CallbackCommandId.DeleteFolder:
    commandName = ASPxClientFileManagerCommandConsts.Delete;
    if(result.isSuccess)
     this.raiseItemDeleted();
    break;
   case ASPxClientFileManagerConsts.CallbackCommandId.ChangeFolderTvCallback:
    if(!result.isSuccess) {
     this.delayedSetCurrentFolderPath = undefined;
     this.delayedCallbackFunction = undefined;
    }
    else
     this.needCurrentFolderChangedRaise = true;
    break;
  }
  if(result && !result.isSuccess) {
   this.folderDialogCommand = null;
   this.showError(commandName, result.editErrorText, result.editErrorCode);
  }
 },
 DoEndCallback: function() {
  if(this.callbackOwner)
   this.callbackOwner.DoEndCallback();
  else 
   this.DoEndCallbackCore();
  this.inCallback = false;
 },
 DoEndCallbackCore: function() {
  this.constructor.prototype.DoEndCallback.call(this);   
  if(this.needGridViewEndCallback) {
   this.GetFilesGridView().DoEndCallback();
   this.needGridViewEndCallback = false;
  }
  if(this.needTreeViewEndCallback) {
   this.GetTreeView().DoEndCallback();
   this.needTreeViewEndCallback = false;
  }
  if(this.delayedSetCurrentFolderPath !== undefined) {
   var node = this.GetTreeView().GetNodeByName(this.delayedSetCurrentFolderPath);
   if(node) {
    this.GetTreeView().SetSelectedNode(node);
    this.selectedFolder = node;
    this.expandNodeRecursive(node);
   }
   this.delayedSetCurrentFolderPath = undefined;
  }
  if(this.createMode)
   this.PrepareCreateNode();
  this.EndCommandProcessing();
  if(this.showPath && !this.showAppRelativePath)
   this.UpdatePath();
  if(this.filter && this.filter.delayedFilter !== null)
   this.filter.applyDelayedFilter();
 },
 EndCommandProcessing: function() {
  if(!this.foldersHidden)
   this.selectedFolder = this.GetTreeView().GetSelectedNode();
  if(this.needInitFolderBrowserFolders) {
   this.GetFolderBrowserTreeView().InitFileManagerCallbacks(this, true);
   this.needInitFolderBrowserFolders = false;
  }
  if(this.needApplyState) {
   if(this.needApplyState == 2)
    this.raiseSelectedFileChangedEvent(null);
   this.ApplyControlState(true);
   this.needApplyState = null;
  }
  if(!this.needResetSelection && this.needSelectFiles) {
   this.selectFiles(this.needSelectFiles);
   this.needSelectFiles = null;
  }
  if(this.needResetSelection) {
   this.resetSelection(this.needSelectFiles);
   this.needResetSelection = false;
   this.needSelectFiles = null;
  }
  if(this.needInitFolders) {
   this.InitializeFoldersTreeView();
   this.needInitFolders = false;
  }
  if(this.needFileRenamedRaise) {
   var file = this.getSelectedFiles()[0];
   if(file)
    this.raiseFileRenamed(this.renameOldName, file);
   this.needFileRenamedRaise = false;
  }
  if(this.needFolderRenamedRaise) {
   this.raiseFolderRenamed(this.renameOldName);
   this.needFolderRenamedRaise = false;
  }
  if(this.needItemMovedRaise) {
   this.raiseItemMoved();
   this.needItemMovedRaise = false;
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
  }
  if(this.needItemCopiedRaise) {
   this.raiseItemCopied();
   this.needItemCopiedRaise = false;
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
  }
  if(this.needFolderCreatedRaise) {
   this.raiseFolderCreated();
   this.needFolderCreatedRaise = false;
  }
  if(this.needCurrentFolderChangedRaise) {
   this.raiseCurrentFolderChangedEvent();
   this.needCurrentFolderChangedRaise = false;
  }
  if(this.delayedCallbackFunction !== undefined) {
   this.delayedCallbackFunction.call();
   this.delayedCallbackFunction = undefined;
  }
  this.UpdateToolbars();
  this.inCommandProcessing = false;
 },
 UpdatePath: function(path) {
  var input = this.elements.GetPathInput();
  if(input) {
   input.value = this.showAppRelativePath ? path : this.GetCurrentPath();
   if(this.createMode)
    input.value += this.newFolderName;
  }
 },
 RefreshFoldersOnCallback: function(render) {
  this.elements.GetFoldersContainer().innerHTML = render;
  if(this.allowMove)
   this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Move, this.IsMoveAvailable());
  this.needInitFolders = true;
 },
 GetSplitter: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.SplitterPostfix];
  return control && control.isASPxClientControl ? control : null;
 },
 GetUploadControl: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.SplitterPostfix + ASPxClientFileManagerConsts.UploadPostfix];
  return control && control.isASPxClientControl ? control : null;
 },
 GetToolbar: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.SplitterPostfix + ASPxClientFileManagerConsts.ToolbarPostfix];
  return control && control.isASPxClientControl ? control : null;
 },
 GetTreeView: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.SplitterPostfix + ASPxClientFileManagerConsts.FoldersPostfix];
  return control && control.isASPxClientControl ? control : null;
 },
 GetFilesGridView: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.SplitterPostfix + ASPxClientFileManagerConsts.GridPostfix];
  return control && control.isASPxClientControl ? control : null;
 },
 GetFolderBrowserPopup: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.FolderBrowserPopupPostfix];
  return control && control.isASPxClientControl ? control : null; 
 },
 GetFolderBrowserTreeView: function() {
  var control = window[this.name + ASPxClientFileManagerConsts.FolderBrowserPopupPostfix + ASPxClientFileManagerConsts.FolderBrowserFolders];
  return control && control.isASPxClientControl ? control : null; 
 },
 getFolderName: function() {
  return this.selectedFolder.GetText();
 },
 GetCurrentPath: function(skipRootFolder, separator) {
  if(!separator)
   separator = ASPxClientFileManagerConsts.PathSeparator;
  if(this.foldersHidden) {
   var path = skipRootFolder ? this.currentPath : (this.rootFolderName + (this.currentPath ? ASPxClientFileManagerConsts.PathSeparator + this.currentPath : ""));
   if(separator && separator != ASPxClientFileManagerConsts.PathSeparator) {
    var regExp = new RegExp("/" + separator + "/g");
    path = path.replace(regExp, separator);
   }
   return path;
  }
  return this.foldersHidden ? this.currentPath : this.GetFoldersPath(this.GetTreeView().GetSelectedNode(), skipRootFolder, separator);
 },
 GetFoldersPath: function(currentFolder, skipRootFolder, separator) {
  var pathParts = [];
  while(currentFolder) {
   pathParts.push(currentFolder.GetText());
   currentFolder = currentFolder.parent;
  }
  pathParts = pathParts.reverse();
  if(skipRootFolder)
   pathParts = pathParts.slice(1);
  if(!separator)
   separator = ASPxClientFileManagerConsts.PathSeparator;
  return pathParts.join(separator);
 },
 KeepCurrentPath: function() {
  this.state.UpdateField(ASPxClientFileManagerConsts.StateField.CurrentPath, this.GetCurrentPath(true));
 },
 GetActiveArea: function() {
  return this.foldersHidden ? ASPxClientFileManagerConsts.SelectedArea.Files : this.selectedArea;
 },
 SetActiveArea: function(selectedArea) {
  if(this.folderDialogCommand != null)
   return;
  if(this.GetActiveArea() == selectedArea) {
   this.UpdateToolbars();
   return;
  }
  this.selectedArea = selectedArea;
  this.UpdateToolbars();
  this.DoRename();
  if(selectedArea == ASPxClientFileManagerConsts.SelectedArea.Folders) {
   this.UpdateFileSelectState(true);
   this.UpdateFolderSelectState(false);
  }
  if(selectedArea == ASPxClientFileManagerConsts.SelectedArea.Files) {
   this.UpdateFileSelectState(false);
   this.UpdateFolderSelectState(true);
  }
  if(selectedArea == ASPxClientFileManagerConsts.SelectedArea.None) {
   this.UpdateFileSelectState(true);
   this.UpdateFolderSelectState(true);
  }
 },
 UpdateFileSelectState: function(toInactive) {
  this.forEachFile(function(file) {
   file.UpdateSelectState(toInactive);
  }.aspxBind(this));
 },
 UpdateFolderSelectState: function(toInactive) {
  var selectedNode = this.selectedFolder;
  if(selectedNode) {
   var selectedNodeEl = selectedNode.GetHtmlElement();
   selectedNodeEl.className = toInactive 
   ? selectedNodeEl.className.replace(this.styles.folderSelectionActiveCssClass, this.styles.folderSelectionInactiveCssClass)
   : selectedNodeEl.className.replace(this.styles.folderSelectionInactiveCssClass, this.styles.folderSelectionActiveCssClass);
  }
 },
 ShowLoadingPanel: function(){
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement(), this.GetLoadingPanelOffsetElement(this.GetMainElement()));
 },
 ShowLoadingDiv: function() {
  this.CreateLoadingDiv(this.GetMainElement());
 },
 GetLoadingPanelCallbackAnimationOffsetElement: function () {
  return this.elements.GetFilesPaneContainer();
 },
 GetCallbackAnimationElement: function() {
  return this.elements.GetFilesContainer() || this.elements.GetFilesPaneContainer();
 },
 UpdateToolbars: function(disableAll) {
  var toolbar = this.GetToolbar();
  var activeArea = this.GetActiveArea();
  disableAll = disableAll ? disableAll : this.IsEditMode();
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Create, !disableAll && this.IsCreateAvailable());
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Move, !disableAll && this.IsMoveAvailable());
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Delete, !disableAll && this.IsDeleteAvailable());
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Rename, !disableAll && this.IsRenameAvailable());
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Download, !disableAll && this.IsDownloadButtonActive());
  this.UpdateToolbarItem(ASPxClientFileManagerConsts.ToolbarName.Copy, !disableAll && this.IsCopyAvailable());
 },
 UpdateToolbarItem: function(name, enable) {
  var toolbar = this.GetToolbar();
  if(toolbar) {
   var item = toolbar.GetItemByName(name);
   if(item)
    item.SetEnabled(!!enable);
  }
 },
 UpdateUploadPanelVisibility: function() {
  if(!this.allowUpload) return;
  if(!this.isEnabled) return;
  var pane = this.elements.GetUploadPanelPane();
  var visible = this.allowUploadToCurrentFolder;
  if(visible)
   pane.Expand();
  else
   pane.CollapseBackward();
  this.GetUploadControl().SetVisible(visible);
 },
 IsEditOperationAvailable: function(rule, multiselect) {
  switch(this.GetActiveArea()) {
   case ASPxClientFileManagerConsts.SelectedArea.Folders:
    var selectedNode = this.GetTreeView().GetSelectedNode();
    return selectedNode && selectedNode.parent && this.folderRights[rule];     
   case ASPxClientFileManagerConsts.SelectedArea.Files:
    var files = this.getSelectedFiles();
    if(files.length == 0 || (!multiselect && files.length > 1))
     return false;
    for(var file, i = 0; file = files[i]; i++) {
     if(!file.rights[rule])
      return false;
    }
    return true;
  }
  return false;
 },
 IsDeleteAvailable: function() {
  if(!this.allowDelete)
   return false;
  return this.IsEditOperationAvailable("allowDelete", true);
 },
 Delete: function() {
  this.UpdateToolbars(true);
  switch(this.GetActiveArea()) {
   case ASPxClientFileManagerConsts.SelectedArea.Files:
    var selectedFiles = this.getSelectedFiles();
    var deleteFiles = [];
    if(selectedFiles.length > 0) {
     for(var file, i = 0; file = selectedFiles[i]; i++) {
      if(this.raiseFileDeleting(file))
       deleteFiles.push(file);
     }
    }
    if(deleteFiles.length > 0) {
     if(confirm(this.deleteConfirmText.replace('{0}', this.joinFileNames(deleteFiles, ", "))))
      this.DoDelete(deleteFiles);
    }
    break;
   case ASPxClientFileManagerConsts.SelectedArea.Folders:
    var folder = this.GetCurrentPath();
    if(this.raiseFolderDeleting() && confirm(this.deleteConfirmText.replace('{0}', folder)))
     this.DoDelete();
    break;
  }
  this.UpdateToolbars();
 },
 DoDelete: function(files) {
  switch(this.GetActiveArea()) {
   case ASPxClientFileManagerConsts.SelectedArea.Files:
    this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.DeleteFile, this.joinFileNames(files));
    break;
   case ASPxClientFileManagerConsts.SelectedArea.Folders:
    this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.DeleteFolder);
    break;
  }
  var isFolder = this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Folders;
  this.deleteOldInfo = {
   name: [],
   fullName: [],
   isFolder: isFolder
  };
  if(!isFolder) {
   for(var file, i = 0; file = files[i]; i++) {
    this.deleteOldInfo.name.push(file.name);
    this.deleteOldInfo.fullName.push(file.GetFullName());
   }
  }
  else {
   this.deleteOldInfo.name.push(this.getFolderName());
   this.deleteOldInfo.fullName.push(this.GetCurrentPath());
  }
 },
 IsRenameAvailable: function() {
  if(!this.allowRename)
   return false;
  return this.IsEditOperationAvailable("allowRename", false);
 },
 Rename: function() {
  this.HideRenameInput();
  switch(this.GetActiveArea()) {
   case ASPxClientFileManagerConsts.SelectedArea.Files:
    var files = this.getSelectedFiles();
    if(files.length == 1 && this.raiseFileRenaming(files[0]))
     this.SetVisibleRenameInput(true, files[0], true);
    break;
   case ASPxClientFileManagerConsts.SelectedArea.Folders:
    var folderNode = this.GetTreeView().GetSelectedNode();
    if(folderNode && this.raiseFolderRenaming())
     this.SetVisibleRenameInput(false, folderNode, true);
   break;
  }
 },
 HideRenameInput: function() {
  if(!this.allowRename)
   return;
  var input = this.elements.GetRenameInputElement();
  this.renameMode = false;
  this.UpdateToolbars();
  switch(this.elements.GetRenameElementArea()) {
   case ASPxClientFileManagerConsts.SelectedArea.Files:
    var file = this.files[input["data-fileName"]];
    if(file)
     this.SetVisibleRenameInput(true, file, false);
    break;
   case ASPxClientFileManagerConsts.SelectedArea.Folders:
    var node = this.GetTreeView().GetRootNode().GetNodeByContentElementID(input.parentNode.id);
    if(node)
     this.SetVisibleRenameInput(false, node, false);
    break;
  }
 },
 DoRename: function() {
  if(!this.renameMode)
   return;
  this.renameMode = false;
  var newName = this.elements.GetRenameInputElement().value;
  if(newName.length > 0) {
   this.elements.GetRenameInputElement().value = "";
   switch(this.elements.GetRenameElementArea()) {
    case ASPxClientFileManagerConsts.SelectedArea.Files:
     var files = this.getSelectedFiles();
     if(files.length == 1 && files[0].name != newName) {
      this.renameOldName = files[0].name;
      this.renameNewName = newName;
      this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.RenameFile, newName);
     }
     break;
    case ASPxClientFileManagerConsts.SelectedArea.Folders:
     if(this.getFolderName() != newName) {
      this.renameOldName = this.getFolderName();
      this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.RenameFolder, newName);
     }
     break;
   }
  }
  this.HideRenameInput();
 },
 SetVisibleRenameInput: function(toFile, obj, enable) {
  if(!toFile && obj == this.GetTreeView().GetNode(0))
   return;
  var title = toFile ? this.elements.GetFileTitleElement(obj) : _aspxGetChildNodesByClassName(obj.GetHtmlElement(), "dxtv-ndTxt")[0];
  var input = enable ? this.elements.PlaceRenameInputElement(title, toFile ? null : 100) : this.elements.GetRenameInputElement();
  if(toFile)
   input["data-fileName"] = obj.name;
  aspxGetStateController().ClearElementCache(input);
  if(enable) {
   input.value = toFile ? obj.name : obj.GetText();
   _aspxSetFocus(input);
   this.renameMode = true;
   this.UpdateToolbars();
   if(!toFile)
    _aspxRemoveClassNameFromElement(title, "dx-vam");
  }
  else if(!toFile)
   _aspxAddClassNameToElement(title, "dx-vam");
  _aspxSetElementDisplay(title, !enable);
  _aspxSetElementDisplay(input, enable);
  if(!toFile)
   this.GetTreeView().AdjustControl();
 },
 IsMoveAvailable: function() {
  if(!this.allowMove)
   return false;
  return this.IsEditOperationAvailable("allowMove", true);
 },
 Move: function() {
  this.folderDialogCommand = "Move";
  this.ShowFolderBrowserDialog();
 },
 IsCopyAvailable: function() {
  if(!this.allowCopy)
   return false;
  return this.IsEditOperationAvailable("allowCopy", true);
 },
 Copy: function() {
  this.folderDialogCommand = "Copy";
  this.ShowFolderBrowserDialog();
 },
 ShowFolderBrowserDialog: function() {
  var area = this.GetActiveArea();
  var raiseEventResult = null;
  var cancel = true;
  switch(area) {
   case ASPxClientFileManagerConsts.SelectedArea.Files:
    var approvedFiles = [];
    this.forEachFile(function(file) {
     if(file.IsSelected() && this.GetFolderBrowserEventResult(file))
      approvedFiles.push(file);
    }.aspxBind(this));
    if(approvedFiles.length > 0) {
     this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.ShowFolderBrowserDialog, "");
     this.movedFiles = approvedFiles;
    }
    else
     this.folderDialogCommand = null;
    break;
   case ASPxClientFileManagerConsts.SelectedArea.Folders:
    if(this.GetFolderBrowserEventResult())
     this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.ShowFolderBrowserDialog, (this.folderDialogCommand == "Copy").toString());
    else
     this.folderDialogCommand = null;
    break;
  }
 },
 GetFolderBrowserEventResult: function(file) {
   switch(this.folderDialogCommand) {
    case "Copy":
     return !!file ? this.raiseFileCopying(file) : this.raiseFolderCopying();
    case "Move":
     return !!file ? this.raiseFileMoving(file) : this.raiseFolderMoving();
   }
 },
 ChangeItemPosition: function() {
  var node = this.GetFolderBrowserTreeView().GetSelectedNode();
  var isFolder = this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Folders;
  if(this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.None || !node.enabled || (!isFolder && this.movedFiles.length == 0))
   return;
  this.changeItemPositionOldInfo = {
   name: [],
   oldFolderFullName: this.GetCurrentPath(),
   isFolder: isFolder
  }
  if(!isFolder) {
   for(var file, i = 0; file = this.movedFiles[i]; i++) {
    this.changeItemPositionOldInfo.name.push(file.name);
   }
  }
  else
   this.changeItemPositionOldInfo.name.push(this.getFolderName());
  var targetPath = this.GetFoldersPath(node, true);
  if(isFolder)
   this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId[this.folderDialogCommand + "Folder"], targetPath);
  else
   this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId[this.folderDialogCommand + "File"], 
         targetPath + ASPxClientFileManagerConsts.FileNameSeparator + this.joinFileNames(this.movedFiles));
 },
 ShowFolderBrowserPopup: function(renderFolders) {
  var popup = this.GetFolderBrowserPopup();
  popup.ShowAtElement(this.GetMainElement());
  if(renderFolders)
   this.elements.GetFolderBrowserPopupFoldersContainer().innerHTML = renderFolders;
  popup.UpdatePosition();
 },
 HideFolderBrowserPopup: function() {
  var popup = this.GetFolderBrowserPopup();
  popup.Hide();
 },
 FolderBrowserOkButtonClick: function() {
  this.ChangeItemPosition()
  this.HideFolderBrowserPopup();
 },
 FolderBrowserCancelButtonClick: function() {
  this.HideFolderBrowserPopup();
 },
 IsCreateAvailable: function() {
  if(!this.allowCreate)
   return false;
  return this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Folders && this.folderRights.allowCreate;
 },
 Create: function() {
  if(this.raiseFolderCreating())
   this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.CreateQuery, this.GetCurrentPath(true));
 },
 HideCreateTextbox: function() {
  if(!this.createMode)
   return;
  this.createMode = false;
  this.UpdateToolbars();
  this.elements.createNodeTextBox = null;
  var createNode = this.GetTreeView().GetSelectedNode();
  this.GetTreeView().SetSelectedNode(createNode.parent);
  this.Refresh();
 },
 PrepareCreateNode: function() {
  var tb = _aspxGetChildByTagName(this.GetTreeView().GetSelectedNode().GetHtmlElement(), "INPUT", 0);
  this.elements.createNodeTextbox = tb;
  var _this = this;
  _aspxAttachEventToElement(tb, "keydown", function(evt) { 
   switch(_aspxGetKeyCode(evt)) {
    case ASPxKey.Enter:
     _aspxPreventEvent(evt);
     _this.DoCreate();
     break;
    case ASPxKey.Esc:
     _this.HideCreateTextbox();
     _aspxPreventEvent(evt);
     break;
   }
  });
  _aspxAttachEventToElement(tb, "keypress", function(evt) { 
   if(_aspxGetKeyCode(evt) == ASPxKey.Enter)
    return _aspxPreventEventAndBubble(evt);
  });
  _aspxAttachEventToElement(tb, "blur", function(evt) { 
   _this.DoCreate();
  });
  _aspxSetFocus(tb);
 },
 DoCreate: function() {
  if(!this.createMode)
   return;
  var folder = this.GetFoldersPath(this.GetTreeView().GetSelectedNode().parent, true);
  var newName = this.elements.createNodeTextbox.value;
  if(newName.length > 0) {
   this.UpdateToolbars();
   this.elements.createNodeTextbox.value = "";
   this.SendCallback(ASPxClientFileManagerConsts.CallbackCommandId.Create, newName);
  }
  else
   this.HideCreateTextbox();
  this.createMode = false;
 },
 GetDownloadFiles: function(isNeedRaiseFileDownloading) {
  var files = this.getSelectedFiles();
  var downloadFiles = [];
  for(var file, i = 0; file = files[i]; i++) {
   if(!file.rights.allowDownload)
    return [];
   if(!isNeedRaiseFileDownloading || this.raiseFileDownloading(file))
    downloadFiles.push(file);
  }
  return downloadFiles;
 },
 Download: function() {
  var downloadFiles = this.GetDownloadFiles(true);
  if(downloadFiles.length > 0)
   this.SendPostBack(this.GetArgumentsString(ASPxClientFileManagerConsts.CallbackCommandId.Download) + ASPxClientFileManagerConsts.CallbackArgumentSeparator + this.joinFileNames(downloadFiles));
 },
 IsDownloadButtonActive: function() {
  return (this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Files) && this.GetDownloadFiles(false).length > 0;
 },
 joinFileNames: function(files, separator) {
  separator = separator ? separator : ASPxClientFileManagerConsts.FileNameSeparator;
  var fileNames = "";
  for(var file, i = 0; file = files[i]; i++) {
   if(fileNames.length > 0)
    fileNames += separator;
   fileNames += file.name;
  }
  return fileNames;
 },
 IsEditMode: function() {
  return this.renameMode || this.createMode || this.folderDialogCommand != null;
 },
 showError: function(commandName, errorText, errorCode) {
  if(errorCode == undefined || errorText == undefined)
   return;
  var errorCodes = errorCode.split('|');
  var errorTexts = errorText.split('|');
  var resultErrorText = "";
  for(var i = 0; i < errorCodes.length; i++) {
   var args = this.raiseErrorOccurred(commandName, errorTexts[i], errorCodes[i]);
   if(args.showAlert) {
    if(resultErrorText.length > 0)
     resultErrorText += "\r\n";
    resultErrorText += args.errorText;
   }
  }
  if(resultErrorText.length > 0) {
   var args = this.raiseErrorAlertDisplaying(commandName, resultErrorText);
   if(args.showAlert && args.errorText)
    alert(args.errorText);
  }
 },
 CorrectScroll: function(file) {
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid || !file || !file.GetVisible())
   return;
  var scrollContainer = this.elements.GetFilesContainer().parentNode;
  var containerHeight = scrollContainer.offsetHeight;
  var fileHeight = file.getElement().offsetHeight;
  var selectFileOffsetTop = file.getElement().offsetTop;
  if(selectFileOffsetTop + fileHeight > containerHeight + scrollContainer.scrollTop)
   scrollContainer.scrollTop = selectFileOffsetTop + fileHeight - containerHeight;
  else if(selectFileOffsetTop < scrollContainer.scrollTop)
   scrollContainer.scrollTop = selectFileOffsetTop;
 },
 resetSelection: function(needSelectFileNames) {
  var selectedFiles = [];
  var visibleFiles = this.GetVisibleFiles();
  if(needSelectFileNames && needSelectFileNames.length > 0) {
   for(var fileName, i = 0; fileName = needSelectFileNames[i]; i++) {
    var file = this.files[fileName];
    if(file && file.GetVisible()) {
     if(selectedFiles.length == 0)
      file.focus();
     file.Select();
     selectedFiles.push(file);
    }
   }
  }
  this.unselectAllFiles(selectedFiles);
 },
 unselectAllFiles: function(excludes) {
  var files = this.getSelectedFiles();
  for(var file, i = 0; file = files[i]; i++) {
   if(!excludes || _aspxArrayIndexOf(excludes, file) < 0)
    file.Unselect();
  }
 },
 selectAllFiles: function() {
  if(!this.allowMultiSelect)
   return;
  var files = this.GetVisibleFiles();
  for(var file, i = 0; file = files[i]; i++) {
   if(!file.IsSelected())
    file.Select();
  }
 },
 selectFile: function(fileName) {
  this.selectFiles([fileName]);
 },
 focusFile: function(fileName, skipEvent) {
  var file = this.files[fileName];
  if(file)
   return file.focus(skipEvent);
 },
 selectFiles: function(fileNames, skipEvent, skipFocus) {
  var selected = [];
  for(var fn, i = 0; fn = fileNames[i]; i++) {
   var file = this.files[fn];
   if(file && file.Select(skipEvent, skipFocus))
    selected.push(fn);
  }
  return selected;
 },
 saveSelectedFilesToState: function() {
  var fileNames = [];
  this.forEachFile(function(file) {
   if(file.IsSelected())
    fileNames.push(file.name);
  });
  this.state.UpdateField(ASPxClientFileManagerConsts.StateField.FileSelected, fileNames);
 },
 saveFocusedFileToState: function() {
  if(!this.focusedItem)
   return;
  this.state.UpdateField(ASPxClientFileManagerConsts.StateField.FileFocused, this.focusedItem.name);
 },
 Refresh: function() {
  if(!this.isEnabled)
   return;
  this.UpdateFileList(ASPxClientFileManagerConsts.CallbackCommandId.Refresh);
 },
 GetSelectedFile: function() {
  if(!this.isEnabled)
   return null;
  var files = this.getSelectedFiles();
  if(files.length > 0)
   return files[0];
  return null;
 },
 GetSelectedItems: function() {
  return this.getSelectedFiles();
 },
 GetItems: function() {
  var files = [];
  this.forEachFile(function(file) {
   files.push(file);
  });
  return files;
 },
 GetCurrentFolderPath: function(separator, skipRootFolder) {
  if(!this.isEnabled)
   return null;
  if(this.selectedFolder || this.currentPath != null)
   return this.GetCurrentPath(skipRootFolder, separator);
 },
 SetCurrentFolderPath: function(path, onCallback) {
  this.cancelActiveActions();
  if(this.foldersHidden) return;
  this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Folders);
  var splittedPath = this.splitPath(path);
  var treeView = this.GetTreeView();
  var node = treeView.GetRootNode().GetNode(0);
  if(splittedPath.length > 0) {
   for(var i = 0, folder; folder = splittedPath[i]; i++) {
    if(treeView.AreChildNodesLoaded(node)) {
     node = this.findTreeViewNodeChild(node, folder);
     if(!node)
      return false;
    }
    else { 
     this.delayedSetCurrentFolderPath = path.replace("/", "\\");
     this.delayedCallbackFunction = onCallback;
     node.SetExpanded(true);
     return true;
    }
   }
  }
  if(this.selectedFolder != node) {
   this.GetTreeView().SetSelectedNode(node);
   this.selectedFolder = node;
   this.needCurrentFolderChangedRaise = true;
   this.delayedCallbackFunction = onCallback;
   this.expandNodeRecursive(node);
   this.UpdateFileList(ASPxClientFileManagerConsts.CallbackCommandId.GetFileList);
   return true;
  }
  return false;
 },
 expandNodeRecursive: function(node) {
  var nodeParent = node.parent;
  while(nodeParent) {
   nodeParent.SetExpanded(true);
   nodeParent = nodeParent.parent;
  }
 },
 findTreeViewNodeChild: function(parentNode, text) {
  for(var childNode, j = 0; childNode = parentNode.nodes[j]; j++) {
   if(childNode.GetText() == text)
    return childNode;
  }
 },
 splitPath: function(path) {
  if(!path) return [];
  var separator = "/";
  if(path.indexOf(separator) == -1)
   separator = "\\";
  return path.split(separator);
 },
 KeyProcessEnter: function() {
  if(this.GetActiveArea() != ASPxClientFileManagerConsts.SelectedArea.Files)
   return;
  if(!this.renameMode && !this.createMode) {
   if(this.allowMultiSelect) {
    if(this.focusedItem)
     this.OpenFile(this.focusedItem);
   }
   else {
    var selectedFiles = this.getSelectedFiles();
    if(selectedFiles.length == 1)
     this.OpenFile(selectedFiles[0]);
   }
  }
 },
 KeyProcessEsc: function() {
  this.cancelActiveActions();
 },
 KeyProcessF2: function() {
  if(this.allowRename && this.IsRenameAvailable() && !this.IsEditMode())
   this.Rename();
 },
 KeyProcessF6: function() {
  if(this.allowMove && this.IsMoveAvailable() && !this.IsEditMode())
   this.Move();
 },
 KeyProcessDelete: function() {
  if(this.allowDelete && this.IsDeleteAvailable() && !this.IsEditMode())
   this.Delete();
 },
 KeyProcessTab: function() {
  if(this.folderDialogCommand != null) {
   if(this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Files)
    this.elements.GetAccessabilityInput().focus();
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
  }
 },
 KeyProcessF7: function() {
  if(this.allowCreate && this.IsCreateAvailable() && !this.IsEditMode())
   this.Create();
 },
 KeyProcessSpace: function() {
  var focusFile = this.focusedItem;
  if(this.allowMultiSelect && focusFile) {
   if(!(this.getSelectedFiles().length == 1 && focusFile.IsSelected()))
    focusFile.invertSelection();
  }
 },
 KeyProcessCtrlA: function() {
  if(this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Files)
   this.selectAllFiles();
 },
 KeyProcessHome: function() {
  this.keyProcessNavigateToEdge(0);
 },
 KeyProcessEnd: function() {
  this.keyProcessNavigateToEdge(1);
 },
 keyProcessNavigateToEdge: function(position) {
  if(this.GetActiveArea() == ASPxClientFileManagerConsts.SelectedArea.Files) {
   var files = this.GetVisibleFiles();
   if(files.length == 0)
    return;
   var file = files[position > 0 ? files.length - 1 : 0];
   if(this.allowMultiSelect)
    file.focus();
   else
    file.Select();
  }
 },
 cancelActiveActions: function() {
  if(this.renameMode)
   this.HideRenameInput();
  else if(this.folderDialogCommand != null)
   this.HideFolderBrowserPopup();
  else if(this.createMode)
   this.HideCreateTextbox();
  else
   this.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.None);
 },
 isExists: function() {
  return aspxGetControlCollection().Get(this.name) == this;
 }
});
ASPxClientFileManager.Cast = ASPxClientControl.Cast;
ASPxClientFileManagerFile = _aspxCreateClass(null, {
 constructor: function(fileManager, index, fileInfo) {
  this.fileManager = fileManager;
  this.index = index;
  this.SetRights(fileInfo.r);
  this.name = fileInfo.n;
  this.imageSrc = fileInfo.i;
  this.imageIndex = fileInfo.ci;
  this.id = this.fileManager.elements.filesContainerId + "_" + this.index.toString();
  var tooltip = this.name + "\r\n" + fileInfo.t.replace(/\|\|/g, "\r\n");
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail) {
   this.element = this.fileManager.elements.CreateFileElement(this, tooltip);
   _aspxAttachEventToElement(this.element, "dblclick", function() { fileManager.OpenFile(this); }.aspxBind(this));
  }
  else
   this.tooltip = tooltip;
  this.visible = true;
  this.isSelected = false;
 },
 Download: function() {
  if(!this.isExists())
   return;
  this.Select();
  if(this.IsSelected())
   this.fileManager.Download();
 },
 SetRights: function(obj) {
  var checkPermission = function(literal) {
   return typeof(obj) == "undefined" || obj.indexOf(literal) > -1;
  };
  this.rights = {
   allowMove:   checkPermission("m"),
   allowRename: checkPermission("r"),
   allowDelete: checkPermission("d"),
   allowDownload:  checkPermission("l"),
   allowCopy:   checkPermission("o")
  };
 },
 SetVisible: function(visible) { 
  if(this.index < 0)
   return;
  if(!visible && this.IsSelected())
   this.Unselect();
  _aspxSetElementDisplay(this.getElement(), visible);
  this.visible = visible;
 },
 GetVisible: function() {
  return this.index > -1 && this.visible && !!this.getElement();
 },
 GetVisibleIndex: function() {
  var files = this.fileManager.GetVisibleFiles();
  for(var i = 0; i < files.length; i++) {
   if(files[i] == this)
    return i;
  }
  return -1;
 },
 focus: function(skipEvent) {
  if(!this.fileManager.allowMultiSelect)
   return;
  if(!this.GetVisible())
   return;
  if(this.isFocused())
   return;
  this.fileManager.forEachFile(function(file) {
   file.unfocus();
  });
  this.fileManager.focusedItem = this;
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail) {
   this.getElement().className += " " + this.fileManager.styles.fileFocusCssClass;
   this.fileManager.CorrectScroll(this);
  }
  else {
   var grid = this.fileManager.GetFilesGridView();
   if(grid.GetFocusedRowIndex() != this.index)
    grid.SetFocusedRowIndex(this.index);
  }
  if(!skipEvent)
   this.fileManager.raiseFocusedItemChangedEvent(this);
  var gridWithMultiSelect = this.fileManager.allowMultiSelect && this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid;
  if(this.fileManager.getSelectedFiles().length == 0 && !gridWithMultiSelect)
   this.Select(skipEvent);
  this.fileManager.saveFocusedFileToState();
  this.fileManager.UpdateToolbars();
  return true;
 },
 unfocus: function() {
  if(!this.GetVisible())
   return;
  var element = this.getElement();
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail) {
   var focusClass = this.fileManager.styles.fileFocusCssClass;
   if(element.className.indexOf(focusClass) > -1)
    element.className = _aspxTrim(element.className.replace(focusClass, ""));
  }
  if(this.fileManager.focusedItem == this)
   this.fileManager.focusedItem = null;
  this.fileManager.UpdateToolbars();
 },
 isFocused: function() {
  return this.fileManager.focusedItem == this;
 },
 SetSelected: function(selected) {
  if(selected)
   this.Select();
  else
   this.Unselect();
 },
 Select: function(skipEvent, skipFocus) {
  if(!this.isExists())
   return;
  if(!this.fileManager.allowMultiSelect)
   this.fileManager.unselectAllFiles([this]);
  if(!this.GetVisible())
   return;
  if(this.IsSelected()) {
   this.UpdateSelectState(false);
   return true;
  }
  this.isSelected = true;
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail)
   aspxGetStateController().SelectElementBySrcElement(this.getElement());
  else {
   var grid = this.fileManager.GetFilesGridView();
   if(this.fileManager.allowMultiSelect) {
    if(!grid.IsRowSelectedOnPage(this.index))
     grid.SelectRowOnPage(this.index);
   }
   else {
    if(grid.GetFocusedRowIndex() != this.index)
     grid.SetFocusedRowIndex(this.index);
   }
  }
  this.fileManager.saveSelectedFilesToState();
  if(!skipEvent) {
   this.fileManager.raiseSelectedFileChangedEvent(this);
   this.fileManager.raiseSelectionChanged(this.name, this.GetFullName(), true);
  }
  if(this.fileManager.allowMultiSelect && !this.fileManager.focusedItem && !skipFocus)
   this.focus(skipEvent);
  this.fileManager.SetActiveArea(ASPxClientFileManagerConsts.SelectedArea.Files);
  return true;
 },
 Unselect: function(skipEvent) {
  if(!this.isExists())
   return;
  if(!this.GetVisible())
   return;
  if(!this.IsSelected())
   return;
  this.UpdateSelectState(false);
  this.isSelected = false;
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail)
   aspxGetStateController().DeselectElementBySrcElement(this.getElement());
  else {
   var grid = this.fileManager.GetFilesGridView();
   if(this.fileManager.allowMultiSelect) {
    if(grid.IsRowSelectedOnPage(this.index))
     grid.UnselectRowOnPage(this.index);
   }
   else {
    if(grid.GetFocusedRowIndex() != this.index)
     grid.SetFocusedRowIndex(-1);
   }
  }
  this.fileManager.saveSelectedFilesToState();
  this.fileManager.UpdateToolbars();
  if(!skipEvent)
   this.fileManager.raiseSelectionChanged(this.name, this.GetFullName(), false);
 },
 invertSelection: function() {
  if(this.IsSelected())
   this.Unselect();
  else
   this.Select();
 },
 IsSelected: function() {
  return this.isExists() && this.isSelected;
 },
 UpdateSelectState: function(toInactive) {
  if(!this.GetVisible())
   return;
  var element = this.fileManager.elements.GetFileElement(this);
  var className = element.className;
  var styles = this.fileManager.styles;
  if(this.IsSelected()) {
   className = toInactive 
    ? className.replace(styles.fileSelectionActiveCssClass, styles.fileSelectionInactiveCssClass)
    : className.replace(styles.fileSelectionInactiveCssClass, styles.fileSelectionActiveCssClass);
   if(toInactive && className.indexOf(styles.fileSelectionInactiveCssClass) == -1)
    className += " " + styles.fileSelectionInactiveCssClass;
   else if(!toInactive && (className.indexOf("dxgvFocusedRow") > -1 && this.fileManager.allowMultiSelect))
    className = className.replace(styles.fileSelectionActiveCssClass, "");
  }
  if(this.isFocused()) {
   if(toInactive)
    className = className.replace(styles.fileFocusCssClass, "");
   else if(className.indexOf(styles.fileFocusCssClass) < 0)
    className += " " + styles.fileFocusCssClass;
  }
  element.className = _aspxTrim(className);
 },
 getElement: function () {
  if(this.element)
   return this.element;
  return this.fileManager.elements.GetFileElement(this);
 },
 GetFullName: function(separator, skipRootFolder) {
  return ASPxClientFileManager.GetItemFullName(this.name, this.fileManager, separator, skipRootFolder);
 },
 toString: function() {
  return this.name;
 },
 isExists: function() {
  return this.fileManager && this.fileManager.files[this.name] == this && this.fileManager.isExists();
 }
});
ASPxClientFileManager.GetItemFullName = function(name, fileManager, separator, skipRootFolder) {
 if(!separator)
  separator = ASPxClientFileManagerConsts.PathSeparator;
 var folderPath = fileManager.GetCurrentFolderPath(separator, skipRootFolder);
 return folderPath ? (folderPath + separator + name) : name;
};
ASPxClientFileManager.OnFoldersTreeViewNodeClick = function(s, e) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.FoldersPostfix).OnFolderClick(e.node);
};
ASPxClientFileManager.OnUploadControlFilesUploadComplete = function(s, evt) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.UploadPostfix).OnFilesUploadComplete(evt);
};
ASPxClientFileManager.OnUploadControlTextChanged = function(s, evt) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.UploadPostfix).OnUploadTextChanged(s.GetText());
};
ASPxClientFileManager.OnToolbarMenuItemClick = function(s, evt) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.ToolbarPostfix).OnToolbarItemClick(evt.item.name);
};
ASPxClientFileManager.OnFolderBrowserPopupShown = function(s, evt) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.FolderBrowserPopupPostfix, true).OnFolderBrowserDialogShown();
};
ASPxClientFileManager.OnFolderBrowserPopupClosing = function(s, evt) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.FolderBrowserPopupPostfix, true).OnFolderBrowserDialogClosing();
};
ASPxClientFileManager.OnPaneResizeCompleted = function(s, evt) {
 ASPxClientFileManager.GetFileManagerByInnerControl(s.name, ASPxClientFileManagerConsts.SplitterPostfix, true).OnSplitterPaneResizeCompleted();
};
ASPxClientFileManager.GetFileManagerByInnerControl = function(controlName, controlPostfix, ignoreSplitter) {
 var controlIdPostfix = ignoreSplitter ? controlPostfix : ASPxClientFileManagerConsts.SplitterPostfix + controlPostfix;
 var fileManagerId = controlName.substr(0, controlName.length - controlIdPostfix.length);
 return aspxGetControlCollection().Get(fileManagerId);
};
ASPxClientFileManager.PrepareTemplate = function(template, values) {
 var result = template;
 for(var key in values)
  result = result.replace("{{" + key + "}}", values[key]);
 return result;
};
ASPxClientFileManagerFileEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(file) {
  this.constructor.prototype.constructor.call(this);
  this.file = file;
 }
});
ASPxClientFileManagerFileOpenedEventArgs = _aspxCreateClass(ASPxClientFileManagerFileEventArgs, {
 constructor: function(file) {
  this.constructor.prototype.constructor.call(this, file);
  this.processOnServer = false;
 }
});
ASPxClientFileManagerActionEventArgsBase = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(fullName, name, isFolder) {
  this.constructor.prototype.constructor.call(this);
  this.fullName = fullName;
  this.name = name;
  this.isFolder = !!isFolder;
 }
});
ASPxClientFileManagerEditingEventArgs = _aspxCreateClass(ASPxClientFileManagerActionEventArgsBase, {
 constructor: function(fullName, name, isFolder) {
  this.constructor.prototype.constructor.call(this, fullName, name, isFolder);
  this.cancel = false;
 }
});
ASPxClientFileManagerRenameEventArgs = _aspxCreateClass(ASPxClientFileManagerActionEventArgsBase, {
 constructor: function(fullName, name, oldName, isFolder) {
  this.constructor.prototype.constructor.call(this, fullName, name, isFolder);
  this.oldName = oldName;
 }
});
ASPxClientFileManagerDeleteEventArgs = _aspxCreateClass(ASPxClientFileManagerActionEventArgsBase, {
 constructor: function(fullName, name, isFolder) {
  this.constructor.prototype.constructor.call(this, fullName, name, isFolder);
 }
});
ASPxClientFileManagerMoveEventArgs = _aspxCreateClass(ASPxClientFileManagerActionEventArgsBase, {
 constructor: function(fullName, name, oldFolderFullName, isFolder) {
  this.constructor.prototype.constructor.call(this, fullName, name, isFolder);
  this.oldFolderFullName = oldFolderFullName;
 }
});
ASPxClientFileManagerCopyEventArgs = _aspxCreateClass(ASPxClientFileManagerActionEventArgsBase, {
 constructor: function(fullName, name, oldFolderFullName, isFolder) {
  this.constructor.prototype.constructor.call(this, fullName, name, isFolder);
  this.oldFolderFullName = oldFolderFullName;
 }
});
ASPxClientFileManagerCreateEventArgs = _aspxCreateClass(ASPxClientFileManagerActionEventArgsBase, {
 constructor: function(fullName, name, isFolder) {
  this.constructor.prototype.constructor.call(this, fullName, name, isFolder);
 }
});
ASPxClientFileManagerErrorEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(commandName, errorText, errorCode) {
  this.constructor.prototype.constructor.call(this);
  this.commandName = commandName;
  this.errorText = errorText;
  this.showAlert = true;
  this.errorCode = errorCode;
 }
});
ASPxClientFileManagerErrorAlertDisplayingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(commandName, errorText, errorCode) {
  this.constructor.prototype.constructor.call(this);
  this.commandName = commandName;
  this.errorText = errorText;
  this.showAlert = true;
 }
});
ASPxClientFileManagerUploadEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(folder, fileName) {
  this.constructor.prototype.constructor.call(this);
  this.folder = folder;
  this.fileName = fileName;
  this.cancel = false;
 }
});
ASPxClientFileManagerUploadedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(folder, fileName) {
  this.constructor.prototype.constructor.call(this);
  this.folder = folder;
  this.fileName = fileName;
 }
});
ASPxClientFileManagerDownloadingEventArgs = _aspxCreateClass(ASPxClientFileManagerFileEventArgs, {
 constructor: function(file) {
  this.constructor.prototype.constructor.call(this, file);
  this.cancel = false;
 }
});
ASPxClientFileManagerFocusedItemChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(name, fullName) {
  this.constructor.prototype.constructor.call(this);
  this.name = name;
  this.fullName = fullName;
 }
});
ASPxClientFileManagerCurrentFolderChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(name, fullName) {
  this.constructor.prototype.constructor.call(this);
  this.name = name;
  this.fullName = fullName;
 }
});
ASPxClientFileManagerSelectionChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(name, fullName, isSelected) {
  this.constructor.prototype.constructor.call(this);
  this.name = name;
  this.fullName = fullName;
  this.isSelected = isSelected;
 }
});
ASPxClientFileManager.StylesHelper = {};
ASPxClientFileManager.StylesHelper.Styles = [ "Border", "Padding", "Margin" ];
ASPxClientFileManager.StylesHelper.Kinds = [ "Left", "Right", "Top", "Bottom" ];
ASPxClientFileManager.StylesHelper.GetStylesInfo = function(width, height, elementsContainer, elementsStyles) {
 this.elements = [];
 var currentStyles = [];
 for(var i = 0; i < elementsStyles.length; i++)
  currentStyles.push(this.GetCurrentStyle(elementsContainer, elementsStyles[i]));
 var result = this.GetStylesInfoCore(width, height, currentStyles);
 this.DropCurrentStyles(elementsContainer);
 for(var i = 0; i < elementsStyles.length; i++)
  result.styleStrings[i] += this.GetUnprocessedStylesString(elementsStyles[i][1]);
 return result;
};
ASPxClientFileManager.StylesHelper.GetCurrentStyle = function(elementsContainer, styles) {
 var element = _aspxCreateHtmlElementFromString("<div class=\"" + styles[0] + "\" style=\"visibility:hidden;" + styles[1] + "\"></div>");
 elementsContainer.appendChild(element);
 this.elements.push(element);
 return _aspxGetCurrentStyle(element);
};
ASPxClientFileManager.StylesHelper.DropCurrentStyles = function(elementsContainer) {
 for(var i = 0; i < this.elements.length; i++)
  elementsContainer.removeChild(this.elements[i]);
};
ASPxClientFileManager.StylesHelper.GetUnprocessedStylesString = function(stylesString) {
 var processingStyles = [];
 for(var i = 0; i < this.Styles.length; i++)
  processingStyles.push(this.Styles[i].toLowerCase());
 var result = [];
 var styleParts = stylesString.split(';');
 for(var i = 0; i < styleParts.length; i++) {
  var stylePart = styleParts[i];
  var skippFlag = false;
  for(var j = 0; j < this.Styles.length; j++) {
   if(stylePart.toLowerCase().indexOf(this.Styles[j].toLowerCase()) == 0) {
    skippFlag = true;
    break;
   }
  }
  if(!skippFlag)
   result.push(stylePart);
 }
 return result.join(';');
};
ASPxClientFileManager.StylesHelper.GetStylesInfoCore = function(width, height, currentStyles) {
 var stylesTables = this.GetStylesTables(currentStyles);
 var styleStrings = [];
 for(var i = 0; i < stylesTables.length; i++)
  styleStrings.push(this.StylesTableToString(stylesTables[i]));
 var itemStylesTable = stylesTables[0];
 return {
  contentWidth: width - (itemStylesTable.Border.Left + itemStylesTable.Border.Right + itemStylesTable.Padding.Left + itemStylesTable.Padding.Right),
  contentHeight: height - (itemStylesTable.Border.Top + itemStylesTable.Border.Bottom + itemStylesTable.Padding.Top + itemStylesTable.Padding.Bottom),
  styleStrings: styleStrings
 };
};
ASPxClientFileManager.StylesHelper.GetStylesTables = function(currentStyles) {
 var itemStylesTable = this.GetStylesTable(currentStyles[0]);
 var result = [ itemStylesTable ];
 for(var i = 1; i < currentStyles.length; i++) {
  result.push(this.GetStylesTable(currentStyles[i]));
  for(var j = 0; j < this.Kinds.length; j++)
   this.UpdateItemStylesTable(itemStylesTable, result[i], this.Kinds[j]);
 }
 for(var i = 1; i < result.length; i++) {
  for(var j = 0; j < this.Kinds.length; j++)
   this.UpdateStateStylesTable(itemStylesTable, result[i], this.Kinds[j]);
 }
 return result;
};
ASPxClientFileManager.StylesHelper.UpdateItemStylesTable = function(baseStylesTable, stylesTable, kind) {
 baseStylesTable.Margin[kind] += Math.max(               
  stylesTable.Border[kind] + stylesTable.Padding[kind] - baseStylesTable[kind + "Sum"],   
  0
 );
};
ASPxClientFileManager.StylesHelper.UpdateStateStylesTable = function(baseStylesTable, stylesTable, kind) {
 var borderChange = stylesTable.Border[kind] - baseStylesTable.Border[kind];
 var paddingChange = stylesTable.Padding[kind] - baseStylesTable.Padding[kind];
 if(stylesTable.Padding[kind] != 0)
  stylesTable.Margin[kind] = baseStylesTable.Margin[kind] - (paddingChange + borderChange);
 else {
  stylesTable.Padding[kind] = baseStylesTable.Padding[kind] - borderChange;
  stylesTable.Margin[kind] = baseStylesTable.Margin[kind];
  if(stylesTable.Padding[kind] < 0) {
   stylesTable.Margin[kind] += stylesTable.Padding[kind];
   stylesTable.Padding[kind] = 0;
  }
 }
};
ASPxClientFileManager.StylesHelper.GetBorder = function(currentStyle, borderKind) {
 var borderStyleName = "border" + borderKind + "Style";
 var borderWidthName = "border" + borderKind + "Width";
 if(currentStyle[borderStyleName] != "none")
  return _aspxPxToInt(currentStyle[borderWidthName]);
 return 0;
};
ASPxClientFileManager.StylesHelper.GetPadding = function(currentStyle, paddingKind) {
 return _aspxPxToInt(currentStyle["padding" + paddingKind]);
};
ASPxClientFileManager.StylesHelper.GetMargin = function(currentStyle, marginKind) {
 return _aspxPxToInt(currentStyle["margin" + marginKind]);
};
ASPxClientFileManager.StylesHelper.BorderToString = function(kind, border) {
 return "border-" + kind.toLowerCase() + "-width:" + border + "px;";
};
ASPxClientFileManager.StylesHelper.PaddingToString = function(kind, padding) {
 return "padding-" + kind.toLowerCase() + ":" + padding + "px;";
};
ASPxClientFileManager.StylesHelper.MarginToString = function(kind, margin) {
 return "margin-" + kind.toLowerCase() + ":" + margin + "px;";
};
ASPxClientFileManager.StylesHelper.GetStylesTable = function(currentStyle) {
 var result = {};
 for(var i = 0; i < this.Styles.length; i++)
  result[this.Styles[i]] = {};
 for(var i = 0; i < this.Kinds.length; i++)
  result[this.Kinds[i] + "Sum"] = 0;
 for(var i = 0; i < this.Styles.length; i++) {
  var style = this.Styles[i];
  var getStyle = this["Get" + style];
  for(var j = 0; j < this.Kinds.length; j++) {
   var kind = this.Kinds[j];
   result[style][kind] = getStyle(currentStyle, kind);
   result[kind + "Sum"] += result[style][kind];
  }
 }
 return result;
};
ASPxClientFileManager.StylesHelper.StylesTableToString = function(stylesTable) {
 var styleString = "";
 for(var i = 0; i < this.Styles.length; i++) {
  var style = this.Styles[i];
  var toStringFunc = this[style + "ToString"]
  for(var j = 0; j < this.Kinds.length; j++) {
   var kind = this.Kinds[j];
   styleString += toStringFunc(kind, stylesTable[style][kind]);
  }
 }
 return styleString;
};
ASPxClientFileManager.FilterHelper = _aspxCreateClass(null, {
 constructor: function(fileManager) {
  this.fileManager = fileManager;
  this.input = this.fileManager.elements.filterElement;
  this.lastValue = "";
  var _this = this;
  this.delayedFilter = null;
  _aspxAttachEventToElement(this.input, "keyup", function() { _this.OnInputValueChanged(); });
 },
 OnInputValueChanged: function() {
  var _this = this;
  var value = this.input.value;
  if(this.filterTimerID > -1)
   _aspxClearTimer(this.filterTimerID);
  if(this.delayedFilter !== null)
   this.delayedFilter = value;
  this.filterTimerID = _aspxSetTimeout(function() {
   _this.Filter(value);
  }, this.fileManager.filterDelay);
 },
 Filter: function(value) {
  if(this.delayedFilter !== null)
   return;
  if(this.filterTimerID)
   _aspxClearTimer(this.filterTimerID);
  if(this.lastValue != value) {
   this.lastValue = value;
   this.fileManager.state.UpdateField(ASPxClientFileManagerConsts.StateField.FileFilter, value);
   if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail) {
    this.fileManager.forEachFile(function(file) {
     var isSatisfy = file.name.toLowerCase().indexOf(value.toLowerCase()) != -1;
     file.SetVisible(isSatisfy);
     this.HighlightFile(file, value);
    }.aspxBind(this));
    this.fileManager.resetSelection();
   }
   else {
    this.delayedFilter = value;
    this.fileManager.GetFilesGridView().ApplyFilter("[Name] LIKE '%" + value + "%'");
   }
  }
 },
 applyDelayedFilter: function() {
  this.fileManager.forEachFile(function(file) {
   if(file.GetVisible())
    this.HighlightFile(file, this.lastValue);
  }.aspxBind(this));
  var delayedFilter = this.delayedFilter;
  this.delayedFilter = null;
  if(this.lastValue !== delayedFilter)
   this.Filter(delayedFilter);
 },
 HighlightFile: function(file, value) {
  var titleElement = this.fileManager.elements.GetFileTitleElement(file);
  if(value.length > 0) {
   var name = file.name;
   var startIndex = name.toLowerCase().indexOf(value.toLowerCase());
   titleElement.innerHTML = ASPxClientFileManager.PrepareTemplate(
    ASPxClientFileManagerConsts.Templates.HighlightedText,
    {
     textStart: name.substr(0, startIndex),
     textMiddle: name.substr(startIndex, value.length),
     textEnd: name.substr(startIndex + value.length),
     highlightCssClass: this.fileManager.styles.highlightCssClass
    }
   );
  }
  else
   titleElement.innerHTML = file.name;
 },
 GetCurrentValue: function() {
  return this.input.value;
 },
 UpdateEnabled: function(enabled) {
  if(this.delayedFilter === null)
   this.input.value = "";
  this.input.disabled = !enabled;
  if(enabled)
   this.Filter("");
 },
 SetFilterValue: function(value) {
  if(this.delayedFilter === null)
   this.input.value = value;
  this.Filter(value);
 }
});
ASPxClientFileManager.StateHelper = _aspxCreateClass(null, {
 constructor: function(fileManager) {
  this.fileManager = fileManager;
  this.Load();
 },
 Load: function() {
  if(!this.fileManager.isEnabled)
   return;
  var stateStr = this.fileManager.elements.stateElement.value;
  this.state = stateStr
   ? eval("(" + stateStr + ")")
   : {};
 },
 Save: function() {
  if(!this.fileManager.isEnabled)
   return;
  this.fileManager.elements.stateElement.value = _aspxToJson(this.state);
 },
 GetLastKeyPart: function(key) {
  var parts = key.split(".");
  return parts[parts.length - 1];
 },
 GetStateItem: function(key) {
  var parts = key.split(".");
  var currentItem = this.state;
  for(var i = 0; i < parts.length - 1; i++) {
   var _key = parts[i];
   if(!currentItem[_key])
    currentItem[_key] = {};
   currentItem = currentItem[_key];
  }
  return currentItem;
 },
 GetField: function(key) {
  var stateItem = this.GetStateItem(key);
  return stateItem[this.GetLastKeyPart(key)];
 },
 UpdateField: function(key, value) {
  if(!this.fileManager.isEnabled) return;
  var stateItem = this.GetStateItem(key);
  stateItem[this.GetLastKeyPart(key)] = value;
  this.Save();
 },
 DropField: function(key) {
  if(!this.fileManager.isEnabled) return;
  var stateItem = this.GetStateItem(key);
  delete stateItem[this.GetLastKeyPart(key)];
  this.Save();
 }
});
ASPxClientFileManager.ElementsHelper = _aspxCreateClass(null, {
 constructor: function(fileManager) {
  this.fileManager = fileManager;
  this.stateElementId = this.fileManager.name + "_State";
  this.stateElement = document.getElementById(this.stateElementId);
  this.filterElementId = this.fileManager.name + ASPxClientFileManagerConsts.SplitterPostfix + "_Filter";
  this.filterElement = document.getElementById(this.filterElementId);
  this.filesContainerId = this.fileManager.name + "_Files";
  this.focusId = this.fileManager.name + "_Focus";
  this._sbPane = this.fileManager.GetSplitter().GetPaneByName("UploadPanelPane");
  if(this._sbPane)
   this._sbPaneElement = this._sbPane.helper.GetContentContainerElement();
  this._filesPaneElement = this.fileManager.GetSplitter().GetPaneByName("FilesPane").helper.GetContentContainerElement();
  this._tbPane = this.fileManager.GetSplitter().GetPaneByName("ToolbarPane");
  if(this._tbPane)
   this._tbPaneElement = this._tbPane.helper.GetContentContainerElement();
  this._filesContainer = null;
  var foldersPane = this.fileManager.GetSplitter().GetPaneByName("FoldersPane");
  if(foldersPane)
   this._foldersContainer = foldersPane.helper.GetContentContainerElement();
  this._renameInput = document.getElementById(this.fileManager.name + ASPxClientFileManagerConsts.RenameFileInputPostfix);
 },
 GetFilesContainer: function() {
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid)
   return null;
  if(!_aspxIsValidElement(this._filesContainer))
   this._filesContainer = document.getElementById(this.filesContainerId);
  if(!this._filesContainer) {
   this._filesContainer = _aspxCreateHtmlElementFromString("<div id=\"" + this.filesContainerId + "\"></div>");
   this._filesContainer.className = ASPxClientFileManagerConsts.FileContainerClassName;
   if(this.fileManager.allowMultiSelect)
    this._filesContainer.className += " " + ASPxClientFileManagerConsts.MultiSelectClassName;
   this._filesPaneElement.appendChild(this._filesContainer);
  }
  return this._filesContainer;
 },
 GetFilesPaneContainer: function() {
  return this._filesPaneElement;
 },
 DropFilesContainer: function() {
  var filesContainer = this.GetFilesContainer();
  if(filesContainer)
   filesContainer.parentNode.removeChild(this._filesContainer);
  this._filesContainer = null;
 },
 GetUploadPanelContainer: function() {
  return this._sbPaneElement;
 },
 GetUploadPanelPane: function() {
  return this._sbPane;
 },
 GetToolBarContainer: function() {
  return this._tbPaneElement;
 },
 GetFoldersContainer: function() {
  return this._foldersContainer;
 },
 GetFocusInput: function() {
  if(!this._focusInput)
   this._focusInput = this.PrepareFocusInput(this.GetFilesPaneContainer(), this.focusId);
  return this._focusInput;
 },
 GetAccessabilityInput: function() {
  if(!this._accessabilityInput)
   this._accessabilityInput = this.PrepareFocusInput(this.GetFilesPaneContainer(), "");
  return this._accessabilityInput;
 },
 PrepareFocusInput: function(parent, id) {
  var input = _aspxCreateHtmlElementFromString("<input type=\"text\" id=\"" + id + "\"></div>");
  _aspxSetStyles(input, {
   left: __aspxAbsoluteLeftPosition,
   top: __aspxInvalidPosition,
   position: "absolute"
  });
  parent.appendChild(input);
  return input;
 },
 CreateFileElement: function(file, tooltip) {
  var wrap = _aspxCreateHtmlElementFromString("<div></div>");
  var fileImage = this.fileManager.noThumbnailImage;
  if(file.imageIndex > -1 && this.fileManager.customThumbnails[file.imageIndex]) {
   wrap.innerHTML = this.fileManager.customThumbnails[file.imageIndex];
   var img = _aspxGetChildByTagName(wrap, "IMG", 0);
   if(img) {
    ASPxImageUtils.SetImageSrc(img, ASPxImageUtils.GetImageSrc(img));
    ASPxImageUtils.SetSize(img, this.fileManager.styles.thumbnailSize, this.fileManager.styles.thumbnailSize);
   }
   fileImage = wrap.innerHTML;
  }
  else if(file.imageSrc) {
   var img = document.createElement("img");
   ASPxImageUtils.SetImageSrc(img, file.imageSrc);
   ASPxImageUtils.SetSize(img, this.fileManager.styles.thumbnailSize, this.fileManager.styles.thumbnailSize);
   wrap.appendChild(img);
   fileImage = wrap.innerHTML;
  }
  var checkBoxImage = this.fileManager.allowMultiSelect ? this.fileManager.thumbnailCheckBoxImage : "";
  var element = _aspxCreateHtmlElementFromString(
   ASPxClientFileManager.PrepareTemplate(
    this.fileManager.fileTemplate,
    {
     checkBoxImage: checkBoxImage,
     fileId: file.id,
     fileTitle: tooltip.replace(/&/g, "&amp;"),
     fileImage: fileImage,
     fileName: file.name.replace(/&/g, "&amp;")
    }
   )
  );
  this.GetFilesContainer().appendChild(element);
  return element;
 },
 GetFileElement: function(file) {
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail) {
   return document.getElementById(file.id);
  }
  else {
   var grid = this.fileManager.GetFilesGridView();
   var index = grid.GetRowIndexByKey(file.name);
   return grid.GetRow(index);
  }
 },
 GetFileTitleElement: function(file) {
  var fileElement = file.getElement();
  if(this.fileManager.viewMode == ASPxClientFileManagerConsts.ViewMode.Thumbnail)
   return _aspxGetChildByTagName(fileElement.childNodes[0], "DIV", 0);
  return _aspxGetDescendantNodesByClassName(fileElement, ASPxClientFileManagerConsts.GridColumnTitleClassName)[0];
 },
 PlaceRenameInputElement: function(titleElement, width) {
  var input = this.GetRenameInputElement();
  _aspxSetElementDisplay(input, true);
  _aspxInsertElementAfter(input, titleElement)
  width = width ? width : titleElement.offsetWidth;
  width = __aspxIE ? width - 4 : width;
  _aspxSetOffsetWidth(input, width);
  var height = (__aspxIE && __aspxBrowserMajorVersion <= 7) ? titleElement.offsetHeight - 2 : titleElement.offsetHeight; 
  _aspxSetOffsetHeight(input, height);
  _aspxSetElementDisplay(input, false);
  return input;
 },
 GetRenameInputElement: function() {
  return this._renameInput;
 },
 GetRenameElementArea: function() {
  var input = this.GetRenameInputElement(this);
  if(!_aspxGetElementDisplay(input) || !input.parentNode)
   return ASPxClientFileManagerConsts.SelectedArea.None;
  var parent = input.parentNode;
  if(_aspxGetParentByPartialClassName(input, ASPxClientFileManagerConsts.FileClassName))
   return ASPxClientFileManagerConsts.SelectedArea.Files;
  if(parent.className.indexOf(ASPxClientFileManagerConsts.FolderContentContainerClassName) > -1)
   return ASPxClientFileManagerConsts.SelectedArea.Folders;
 },
 GetFolderBrowserPopupFoldersContainer: function() {
  return document.getElementById(this.fileManager.name + ASPxClientFileManagerConsts.FolderBrowserPopupPostfix + ASPxClientFileManagerConsts.FolderBrowserFoldersContainerPostfix);
 },
 GetFolderBrowserDialogOkButton: function() {
  return document.getElementById(this.fileManager.name + ASPxClientFileManagerConsts.FolderBrowserPopupPostfix + ASPxClientFileManagerConsts.FolderBrowserDialogOkButtonPostfix);
 },
 GetFolderBrowserDialogCancelButton: function() {
  return document.getElementById(this.fileManager.name + ASPxClientFileManagerConsts.FolderBrowserPopupPostfix + ASPxClientFileManagerConsts.FolderBrowserDialogCancelButtonPostfix);
 },
 GetUploadButtonElement: function() {
  return document.getElementById(this.fileManager.name + ASPxClientFileManagerConsts.SplitterPostfix + ASPxClientFileManagerConsts.UploadButtonPostfix);
 },
 GetPathInput: function() {
  var toolbar = this.fileManager.GetToolbar();
  if(!toolbar)
   return null;
  var pathItem = toolbar.GetItemByName("Path");
  if(!pathItem)
   return null;
  var indexPath = toolbar.GetItemByName("Path").indexPath;
  var pathTemplateElement = toolbar.GetItemTemplateContainer(indexPath);
  if(!pathTemplateElement)
   pathTemplateElement = toolbar.GetItemTextTemplateContainer(indexPath);
  return _aspxGetChildByTagName(pathTemplateElement, "INPUT", 0);
 }
});
ASPxClientFileManager.KbdHelper = _aspxCreateClass(ASPxKbdHelper, {
 HandleKeyDown: function(e) {
  var modifier = this.control.getKeyModifier(e);
  var fm = this.control;
  var keyCode_A = 65;
  switch(_aspxGetKeyCode(e)) {
   case ASPxKey.Left:
    this.TryMoveFocusLeft(modifier);
    return true;
   case ASPxKey.Right:
    this.TryMoveFocusRight(modifier);
    return true;
   case ASPxKey.Up:
    this.TryMoveFocusUp(modifier);
    return true;
   case ASPxKey.Down:
    this.TryMoveFocusDown(modifier);
    return true;
   case ASPxKey.Enter:
    fm.KeyProcessEnter();
    return true;
   case ASPxKey.Esc:
    fm.KeyProcessEsc();
    return true;
   case ASPxKey.F2:
    fm.KeyProcessF2();
    return true;
   case ASPxKey.F6:
    fm.KeyProcessF6();
    return true;
   case ASPxKey.Delete:
    fm.KeyProcessDelete();
    return true;
   case ASPxKey.Tab:
    fm.KeyProcessTab();
    return false;
   case ASPxKey.F7:
    fm.KeyProcessF7();
    return true;
   case ASPxKey.Space:
    fm.KeyProcessSpace();
    return true;
   case ASPxKey.Home:
    fm.KeyProcessHome();
    return true;
   case ASPxKey.End:
    fm.KeyProcessEnd();
    return true;
   case keyCode_A:
    if(modifier == ASPxClientFileManagerConsts.ModifierKey.Ctrl)
     fm.KeyProcessCtrlA();
    return true;
  }
  return false;
 },
 TryMoveFocusLeft: function(modifier) {
  this.TryMoveCore(-1, this.GetLeftRightIndex, modifier);
 },
 TryMoveFocusRight: function(modifier) {
  this.TryMoveCore(1, this.GetLeftRightIndex, modifier);
 },
 TryMoveFocusUp: function(modifier) {
  this.TryMoveCore(-1, this.GetTopLeftIndex, modifier);
 },
 TryMoveFocusDown: function(modifier) {
  this.TryMoveCore(1, this.GetTopLeftIndex, modifier);
 },
 TryMoveCore: function(direction, getNewIndex, modifier) {
  var fm = this.control;
  if(fm.GetActiveArea() != ASPxClientFileManagerConsts.SelectedArea.Files || this.folderDialogCommand != null)
   return;
  if(fm.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid)
   return;
  var visibleFiles = fm.GetVisibleFiles();
  if(visibleFiles.length == 0)
   return;
  var focusFile = (this.control.allowMultiSelect ? this.control.focusedItem : this.control.GetSelectedFile()) || visibleFiles[0];
  var newIndex = this.Bound(getNewIndex.call(this, focusFile, direction), 0, visibleFiles.length - 1);
  var file = visibleFiles[newIndex];
  if(!file)
   file = direction == -1 ? visibleFiles[0] : visibleFiles[visibleFiles.length - 1];
  if(this.control.allowMultiSelect) {
   file.focus();
   if(modifier == ASPxClientFileManagerConsts.ModifierKey.Ctrl) {
    if(focusFile.IsSelected() && !file.IsSelected())
     file.Select();
    else if(!focusFile.IsSelected())
     focusFile.Select();
    else if(!(focusFile.IsSelected() && this.control.getSelectedFiles().length == 1))
     focusFile.Unselect();
   }
   else if(modifier == ASPxClientFileManagerConsts.ModifierKey.Shift) {
    if(file == focusFile)
     return;
    var select = !(file.IsSelected() && focusFile.IsSelected());
    for(var i = focusFile.index; direction > 0 ? i <= file.index : i >= file.index; direction > 0 ? i++ : i--) {
     var nextFile = visibleFiles[i];
     if(select)
      nextFile.Select();
     else if(nextFile != file)
      nextFile.Unselect();
    }
   }
  }
  else {
   file.Select();
   fm.CorrectScroll(file);
  }
 },
 GetLeftRightIndex: function(selectedFile, direction) {
  return selectedFile.GetVisibleIndex() + direction;
 },
 GetTopLeftIndex: function(selectedFile, direction) {
  var fm = this.control;
  var fileContainerWidth = fm.elements.GetFilesContainer().offsetWidth;
  var fileElement = selectedFile.getElement();
  var fileElementCurrentStyle = _aspxGetCurrentStyle(fileElement);
  var fileWidth = fileElement.offsetWidth + _aspxPxToInt(fileElementCurrentStyle.marginLeft) + _aspxPxToInt(fileElementCurrentStyle.marginRight);
  var itemsPerLine = Math.floor(fileContainerWidth / fileWidth);
  return selectedFile.GetVisibleIndex() + itemsPerLine * direction;
 },
 Bound: function(value, min, max) {
  return Math.min(Math.max(value, min), max);
 }
});
ASPxClientFileManagerGridKbdHelper = _aspxCreateClass(ASPxGridViewKbdHelper, {
 HandleKeyDown: function(e) {
  if(ASPxGridViewKbdHelper.prototype.HandleKeyDown.call(this, e))
   return true;
  var fm = this.control.fileManager;
  if(!fm)
   return false;
  var modifier = fm.getKeyModifier(e);
  var keyCode_A = 65;
  switch(_aspxGetKeyCode(e)) {
   case ASPxKey.Enter:
    fm.KeyProcessEnter();
    return true;
   case ASPxKey.Esc:
    fm.KeyProcessEsc();
    return true;
   case ASPxKey.F2:
    fm.KeyProcessF2();
    return true;
   case ASPxKey.F6:
    fm.KeyProcessF6();
    return true;
   case ASPxKey.Delete:
    fm.KeyProcessDelete();
    return true;
   case ASPxKey.Tab:
    fm.KeyProcessTab();
    return false;
   case ASPxKey.F7:
    fm.KeyProcessF7();
    return true;
   case ASPxKey.Space:
    fm.KeyProcessSpace();
    return true;
   case keyCode_A:
    if(modifier == ASPxClientFileManagerConsts.ModifierKey.Ctrl)
     fm.KeyProcessCtrlA();
    return true;
   case ASPxKey.Home:
    fm.KeyProcessHome();
    return true;
   case ASPxKey.End:
    fm.KeyProcessEnd();
    return true;
  }
  return false;
 }
});
ASPxClientFileManagerUploadControl = _aspxCreateClass(ASPxClientUploadControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.lastUploadedFile = "";
  this.fileManager = null;
  this.inProgress = false;
 },
 OnCompleteFileUpload: function() {
  this.inProgress = false;
  this.UpdateButtonValue();
  this.SetButtonEnable(true);
  this.fileManager.HideLoadingElements();
  this.fileManager.needSelectFiles = this.GetFileNameArray();
  ASPxClientUploadControl.prototype.OnCompleteFileUpload.call(this);
  this.ClearText();
 },
 SetVisible: function(visible) {
  ASPxClientUploadControl.prototype.SetVisible.call(this, visible);
  if(this.IsShowPlatformErrorElement()) {
   var pane = this.fileManager.elements.GetUploadPanelPane().helper.GetContentContainerElement();
   var uploadButton = this.fileManager.elements.GetUploadButtonElement();
   _aspxSetAttribute(pane.style, "text-align", "center");
   _aspxSetElementDisplay(uploadButton, false);
  }
 },
 CreateFileValidators: function() {
  var validators = ASPxClientUploadControl.prototype.CreateFileValidators.apply(this);
  validators.filePermissions = {
   value: this.fileManager.filesRules,
   errorText: this.validationSettings.notAllowedFileExtensionErrorText,
   isValid: function(fileInfo) {
    return this.fileManager.CheckEditAccessByFileName(fileInfo.fileName);
   }.aspxBind(this),
   getErrorText: function() {
    return this.errorText;
   }
  };
  return validators;
 },
 ShowMultiselectionErrorText: function(errorText) {
  this.fileManager.showError(ASPxClientFileManagerCommandConsts.Upload, errorText, "" + ASPxClientFileManagerErrorConsts.WrongExtension);
 },
 OnButtonClick: function() {
  this.fileManager.KeepCurrentPath();
  if(!this.GetButtonEnabled())
   return;
  if(!this.inProgress && !this.fileManager.raiseFileUploading())
   return;
  this.lastUploadedFile = this.GetFileName();
  this.inProgress = !this.inProgress;
  if(!this.inProgress) {
   this.UpdateButtonValue();
   this.Cancel();
  }
  else if(this.UploadFileFromUser()) {
   this.UpdateButtonValue();
   this.fileManager.ShowLoadingPanel();
  }
 },
 UpdateButtonValue: function(inProgress) {
  if(typeof(inProgress) != 'undefined')
   this.inProgress = inProgress;
  var button = this.fileManager.elements.GetUploadButtonElement();
  button.innerHTML = this.inProgress ? this.fileManager.cancelUploadText : this.fileManager.uploadText;
 },
 SetButtonEnable: function(enable) {
  var button = this.fileManager.elements.GetUploadButtonElement();
  if(!enable && button.className.indexOf(ASPxClientFileManagerConsts.UploadControlDisableClassName) == -1)
   button.className += " " + ASPxClientFileManagerConsts.UploadControlDisableClassName;
  else if(enable && button.className.indexOf(ASPxClientFileManagerConsts.UploadControlDisableClassName) > -1)
   button.className = button.className.replace(ASPxClientFileManagerConsts.UploadControlDisableClassName, "");
 },
 GetButtonEnabled: function() {
  var button = this.fileManager.elements.GetUploadButtonElement();
  return button.className.indexOf(ASPxClientFileManagerConsts.UploadControlDisableClassName) == -1;
 },
 GetFileNameArray: function() {
  var files = this.GetText().split(', ');
  for(var i = 0; i < files.length; i++) {
   var fn = files[i];
   files[i] = fn.substring(fn.lastIndexOf("\\") + 1);
  }
  return files;
 },
 GetFileName: function() {
  return this.GetFileNameArray().join(", ");
 }
});
ASPxClientFileManagerTreeView = _aspxCreateClass(ASPxClientTreeView, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.fileManager = null;
  this.callbackCount = 0;
  this.isFolderBrowserFolders = false;
 },
 CreateCallback: function(callbackString) {
  this.fileManager.SendTreeViewCallback(this, callbackString);
  this.callbackCount++;
 },
 OnCallback: function(resultObj) {
  if(this.callbackCount > 0)
   this.callbackCount--;
  if(this.callbackCount <= 0)
   this.fileManager.ClearCallbackOwner();
  ASPxClientTreeView.prototype.OnCallback.apply(this, arguments);
 },
 InitFileManagerCallbacks: function(fm, isFolderBrowserFolders) {
  this.fileManager = fm;
  this.isFolderBrowserFolders = isFolderBrowserFolders;
 }
});
ASPxClientFileManagerGridView = _aspxCreateClass(ASPxClientGridView, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.fileManager = null;
 },
 CreateCallback: function(callbackString, command) {
  this.fileManager.SendGridViewCallback(this, callbackString, command);
 },
 OnCallback: function(resultObj) {
  ASPxClientGridView.prototype.OnCallback.apply(this, arguments);
 },
 DoEndCallback: function() {
  this.fileManager.AdjustGridViewSize(); 
  ASPxClientGridView.prototype.DoEndCallback.apply(this);
 },
 GetRowIndexByKey: function(key) {
  for(var rkey, i = 0; rkey = this.keys[i]; i++) {
   if(rkey == key)
    return i;
  }
  return -1;
 },
 EnsureRowKeys: function() {
  ASPxClientGridView.prototype.EnsureRowKeys.apply(this);
  if(this.fileManager)
   this.fileManager.ensureGridViewFiles();
 }
});
var ASPxClientFileManagerCommandConsts = {
 Rename : "rename",
 Move : "move",
 Delete : "delete",
 Create : "create",
 Upload : "upload",
 Download : "download",
 Copy : "copy"
};
var ASPxClientFileManagerErrorConsts = {
 FileNotFound : 0,
 FolderNotFound : 1,
 AccessDenied : 2,
 UnspecifiedIO : 3,
 Unspecified : 4,
 EmptyName : 5,
 CanceledOperation : 6,
 InvalidSymbols : 7,
 WrongExtension : 8,
 UsedByAnotherProcess : 9,
 AlreadyExists : 10
};
MVCxClientFileManager = _aspxCreateClass(ASPxClientFileManager, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.downloadUrl = "";
  this.callbackCustomArgs = {};
 },
 InlineInitialize: function() {
  if(this.callbackUrl != "")
   this.callBack = function(arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  ASPxClientFileManager.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  this.callbackCustomArgs = args.customArgs;
 },
 RaiseEndCallback: function() {
  ASPxClientFileManager.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientFileManager.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 GetCallbackParams: function(arg) {
  var params = {};
  params[this.elements.stateElementId] = this.elements.stateElement.value;
  var treeView = this.GetTreeView();
  if(treeView) {
   var foldersTvStateInput = treeView.GetNodesStateHiddenInput();
   params[foldersTvStateInput.name] = foldersTvStateInput.value;
  }
  var folderBrowser = this.GetFolderBrowserTreeView();
  if(folderBrowser) {
   var folderBrowserTvStateInput = folderBrowser.GetNodesStateHiddenInput();
   params[folderBrowserTvStateInput.name] = folderBrowserTvStateInput.value;
  }
  if(this.viewMode == ASPxClientFileManagerConsts.ViewMode.Grid) {
   var filesGridViewStateInput = this.GetFilesGridView().GetCallbackStateInput();
   params[filesGridViewStateInput.name] = filesGridViewStateInput.value;
  }
  return params;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 Download: function() {
  if(!this.downloadUrl)
   return;
  ASPxClientFileManager.prototype.Download.call(this);
 },
 SendPostBack: function(postBackArg) {
  var form = _aspxGetParentByTagName(this.GetMainElement(), "form");
  if(form) {
   var sourceFormAction = form.action;
   var prefix = this.downloadUrl.indexOf("?") >= 0 ? "&" : "?";
   form.action = this.downloadUrl + prefix + "DXMVCFileManagerDownloadArgument=" + postBackArg;
   form.submit();
   form.action = sourceFormAction;
  }
 }
});
MVCxClientFileManagerUploadControl = _aspxCreateClass(ASPxClientFileManagerUploadControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
 },
 GetUploadFormAction: function(form){
  if(this.callbackUrl != "")
   form.action = this.callbackUrl;
  return ASPxClientUploadControl.prototype.GetUploadFormAction.call(this, form);
 }
});
var __aspxMIIdSuffix = "_DXI";
var __aspxMMIdSuffix = "_DXM";
var __aspxSBIdSuffix = "_DXSB";
var __aspxSBUIdEnd = "_U";
var __aspxSBDIdEnd = "_D";
ASPxClientMenuItemInfo = _aspxCreateClass(null, {
 constructor: function(menu, indexPath){
  var itemElement = menu.GetItemElement(indexPath);
  this.clientHeight = itemElement.clientHeight;
  this.clientWidth = itemElement.clientWidth;
  this.clientTop = _aspxGetClientTop(itemElement);
  this.clientLeft = _aspxGetClientLeft(itemElement);
  this.offsetHeight = itemElement.offsetHeight;
  this.offsetWidth = itemElement.offsetWidth;
  this.offsetTop = 0;
  this.offsetLeft = 0;
 }
});
ASPxClientMenuCssClasses = {};
ASPxClientMenuCssClasses.Prefix = "dxm-";
ASPxClientMenuCssClasses.Menu = "dxmLite";
ASPxClientMenuCssClasses.BorderCorrector = "dxmBrdCor";
ASPxClientMenuCssClasses.Disabled = ASPxClientMenuCssClasses.Prefix + "disabled";
ASPxClientMenuCssClasses.MainMenu = ASPxClientMenuCssClasses.Prefix + "main";
ASPxClientMenuCssClasses.PopupMenu = ASPxClientMenuCssClasses.Prefix + "popup";
ASPxClientMenuCssClasses.IE7 = ASPxClientMenuCssClasses.Prefix + "ie7";
ASPxClientMenuCssClasses.HorizontalMenu = ASPxClientMenuCssClasses.Prefix + "horizontal";
ASPxClientMenuCssClasses.VerticalMenu = ASPxClientMenuCssClasses.Prefix + "vertical";
ASPxClientMenuCssClasses.NoWrapMenu = ASPxClientMenuCssClasses.Prefix + "noWrap";
ASPxClientMenuCssClasses.AutoWidthMenu = ASPxClientMenuCssClasses.Prefix + "autoWidth";
ASPxClientMenuCssClasses.DX = "dx";
ASPxClientMenuCssClasses.Separator = ASPxClientMenuCssClasses.Prefix + "separator";
ASPxClientMenuCssClasses.Spacing = ASPxClientMenuCssClasses.Prefix + "spacing";
ASPxClientMenuCssClasses.Gutter = ASPxClientMenuCssClasses.Prefix + "gutter";
ASPxClientMenuCssClasses.WithoutImages = ASPxClientMenuCssClasses.Prefix + "noImages";
ASPxClientMenuCssClasses.Item = ASPxClientMenuCssClasses.Prefix + "item";
ASPxClientMenuCssClasses.ItemHovered = ASPxClientMenuCssClasses.Prefix + "hovered";
ASPxClientMenuCssClasses.ItemSelected = ASPxClientMenuCssClasses.Prefix + "selected";
ASPxClientMenuCssClasses.ItemChecked = ASPxClientMenuCssClasses.Prefix + "checked";
ASPxClientMenuCssClasses.ItemWithoutImage = ASPxClientMenuCssClasses.Prefix + "noImage";
ASPxClientMenuCssClasses.ItemWithSubMenu = ASPxClientMenuCssClasses.Prefix + "subMenu";
ASPxClientMenuCssClasses.ItemDropDownMode = ASPxClientMenuCssClasses.Prefix + "dropDownMode";
ASPxClientMenuCssClasses.ItemWithoutSubMenu = ASPxClientMenuCssClasses.Prefix + "noPopOut";
ASPxClientMenuCssClasses.ContentContainer = ASPxClientMenuCssClasses.Prefix + "content";
ASPxClientMenuCssClasses.Image = ASPxClientMenuCssClasses.Prefix + "image";
ASPxClientMenuCssClasses.PopOutContainer = ASPxClientMenuCssClasses.Prefix + "popOut";
ASPxClientMenuCssClasses.PopOutImage = ASPxClientMenuCssClasses.Prefix + "pImage";
ASPxClientMenuCssClasses.ImageLeft = ASPxClientMenuCssClasses.Prefix + "image-l";
ASPxClientMenuCssClasses.ImageRight = ASPxClientMenuCssClasses.Prefix + "image-r";
ASPxClientMenuCssClasses.ImageTop = ASPxClientMenuCssClasses.Prefix + "image-t";
ASPxClientMenuCssClasses.ImageBottom = ASPxClientMenuCssClasses.Prefix + "image-b";
ASPxClientMenuCssClasses.ScrollArea = ASPxClientMenuCssClasses.Prefix + "scrollArea";
ASPxClientMenuCssClasses.ScrollUpButton = ASPxClientMenuCssClasses.Prefix + "scrollUpBtn";
ASPxClientMenuCssClasses.ScrollDownButton = ASPxClientMenuCssClasses.Prefix + "scrollDownBtn";
ASPxClientMenuLiteRenderHelper = {};
ASPxClientMenuLiteRenderHelper.InlineInitializeElements = function(menu) {
 if(!menu.isPopupMenu)
  this.InlineInitializeMainMenuElements(menu, menu.GetMainElement());
 var commonContainer = menu.GetMainElement().parentNode;
 var subMenuElements = this.GetNodesByTagName(commonContainer, "DIV");
 for(var i = 0; i < subMenuElements.length; i++) {
  if(!menu.isPopupMenu && subMenuElements[i] == menu.GetMainElement())
   continue;
  this.InlineInitializeSubMenuElements(menu, subMenuElements[i]);
 }
};
ASPxClientMenuLiteRenderHelper.FindNodes = function(node, match) {
 var result = [];
 for(var i = 0; i < node.childNodes.length; i++) {
  var childNode = node.childNodes[i];
  if(!childNode.tagName)
   continue;
  if(match(childNode))
   result.push(childNode);
 }
 return result;
};
ASPxClientMenuLiteRenderHelper.GetNodesByTagName = function(node, tagName) {
 return this.FindNodes(node, function(childNode) {
  return childNode.tagName == tagName;
 });
};
ASPxClientMenuLiteRenderHelper.GetNodesByClassName = function(node, className) {
 return this.FindNodes(node, function(childNode) {
  return _aspxElementCssClassContains(childNode, className);
 });
};
ASPxClientMenuLiteRenderHelper.GetNodeByClassName = function(node, childNodeClassName) {
 var nodes = this.GetNodesByClassName(node, childNodeClassName);
 return nodes.length > 0 ? nodes[0] : null;
};
ASPxClientMenuLiteRenderHelper.InlineInitializeScrollElements = function(menu, indexPath, menuElement) {
 var scrollArea = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollArea);
 if(scrollArea) scrollArea.id = menu.GetScrollAreaId(indexPath);
 var scrollUpButton = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollUpButton);
 if(scrollUpButton) scrollUpButton.id = menu.GetScrollUpButtonId(indexPath);
 var scrollDownButton = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollDownButton);
 if(scrollDownButton) scrollDownButton.id = menu.GetScrollDownButtonId(indexPath);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeMainMenuElements = function(menu, menuElement) {
 var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
 for(var i = 0; i < itemElements.length; i++)
  this.InlineInitializeItemElement(menu, itemElements[i], "", i);
 this.InlineInitializeScrollElements(menu, "", menuElement);
};
ASPxClientMenuLiteRenderHelper.CalculateMenuElements = function(menu, menuElement) {
 var indexPath = menu.GetMenuIndexPathById(menuElement.id);
 var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
 var isVertical = menu.IsVertical(indexPath);
 ASPxClientMenuLiteRenderHelper.CalculateMinSize(isVertical, menuElement, contentElement, itemElements);
 ASPxClientMenuLiteRenderHelper.CalculateMenuItems(isVertical, menuElement, contentElement, itemElements);
 if(!isVertical)
  ASPxClientMenuLiteRenderHelper.CalculateSeparatorsAndSpacers(menuElement, contentElement);
};
ASPxClientMenuLiteRenderHelper.CalculateMenuItems = function(isVertical, menuElement, contentElement, itemElements) {
 if(menuElement.offsetWidth === 0) return;
 var menuWidth = _aspxGetCurrentStyle(menuElement).width;
 var menuRequireItemCorrection = isVertical && menuWidth;
 for(var i = 0; i < itemElements.length; i++) {
  if(!itemElements[i].style.width && !menuRequireItemCorrection) continue;
  var itemContentElement = itemElements[i].itemContentElement;
  if(!itemContentElement){
   var children = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
   itemContentElement = itemElements[i].itemContentElement = (children.length > 0) ? children[0] : null;
  }
  if(!itemContentElement || itemContentElement.offsetWidth === 0) continue;
  if(!itemElements[i].isItemCalculated) {
   if(!isVertical && __aspxIE && __aspxBrowserVersion < 8 && i == itemElements.length - 1)
    itemElements[i].style.width = "";
   _aspxSetElementFloat(itemContentElement, "none");
   var itemContentCurrentStyle = _aspxGetCurrentStyle(itemContentElement);
   if(!isVertical || itemContentCurrentStyle.textAlign != "center") {
    var originalPaddingLeft = parseInt(itemContentCurrentStyle.paddingLeft);
    var originalPaddingRight = parseInt(itemContentCurrentStyle.paddingRight);
    var leftChildrenWidth = 0, rightChildrenWidth = 0;
    for(var j = 0; j < itemElements[i].childNodes.length; j++){
     var child = itemElements[i].childNodes[j];
     if(!child.offsetWidth) continue;
     if(child !== itemContentElement){
      if(_aspxGetElementFloat(child) === "right")
       rightChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
      else if(_aspxGetElementFloat(child) === "left")
       leftChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
     }
    }
    if(leftChildrenWidth > 0 || rightChildrenWidth > 0) 
     _aspxSetStyles(itemContentElement, {
      paddingLeft: leftChildrenWidth + originalPaddingLeft,
      paddingRight: rightChildrenWidth + originalPaddingRight
     }, true);
   }
   itemElements[i].isItemCalculated = true;
  }
  _aspxAdjustWrappedTextInContainer(itemContentElement);
  var itemContentFound = false;
  for(var j = 0; j < itemElements[i].childNodes.length; j++){
   var child = itemElements[i].childNodes[j];
   if(!child.offsetWidth) continue;
   var contentHeight = itemContentElement.offsetHeight;
   if(child !== itemContentElement){
    if(itemContentFound)
     child.style.marginTop = "-" + contentHeight + "px";
    else 
     child.style.marginBottom = "-" + contentHeight + "px";
   }
   else
    itemContentFound = true;
  }
 }
};
ASPxClientMenuLiteRenderHelper.CalculateSubMenu = function(menu, parentElement, recalculate) {
 if(!parentElement) return;
 var menuElement = menu.GetMenuMainCell(parentElement); 
 var contentElement = this.GetContentElement(menuElement);
 if(__aspxIE && __aspxBrowserVersion < 8) {  
  parentElement.style.width = "";
  parentElement.style.height = "";
  if(parentElement.isSubMenuCalculated)
   menuElement.style.width = "";
  var contentWidth;
  this.ProsessRightFloatElements(contentElement, function(elements) {
   if(menu.rtl)
    ASPxClientMenuLiteRenderHelper.FreezeElementSizes(elements);   
   contentWidth = contentElement.offsetWidth;
  });
  if(contentElement.tagName == "UL") {
   contentElement.style.height = "";
   contentElement.style.height = contentElement.offsetHeight + "px";
  }
  menuElement.style.width = (contentWidth || contentElement.offsetWidth) + "px";
  if(contentElement.style.width !== "")
   contentElement.style.width = menuElement.style.width;   
  var separatorElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Separator);
  for(var i = 0; i < separatorElements.length; i++){
   _aspxChangeStyleAttribute(separatorElements[i], "width", "100%");
   _aspxRestoreStyleAttribute(separatorElements[i], "width");
  }
  parentElement.isSubMenuCalculated = true;
 }
 else {
  if(!parentElement.isSubMenuCalculated || recalculate){
   menuElement.style.width = "";
   menuElement.style.display = "table";
   menuElement.style.borderSpacing = "0px";
   parentElement.isSubMenuCalculated = true;
   if(contentElement.tagName === "UL") {
    if(contentElement.offsetWidth > 0) {
     menuElement.style.width = contentElement.offsetWidth + "px";
     menuElement.style.display = "";
     if(_aspxIsPercentageSize(contentElement.style.width))
      contentElement.style.width = menuElement.style.width;
    }
    else
     parentElement.isSubMenuCalculated = false;
   }
  }
 }
 ASPxClientMenuLiteRenderHelper.CalculateSubMenuItems(menuElement, contentElement);
};
ASPxClientMenuLiteRenderHelper.CalculateSubMenuItems = function(menuElement, contentElement) {
 var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
 ASPxClientMenuLiteRenderHelper.CalculateMenuItems(true, menuElement, contentElement, itemElements);
};
ASPxClientMenuLiteRenderHelper.CalculateMinSize = function(isVertical, menuElement, contentElement, itemElements) {
 if(menuElement.isMinSizeCalculated) return;
 if(isVertical){
  _aspxChangeStyleAttribute(contentElement, "width", "1px");
  for(var i = 0; i < itemElements.length; i++){
   var contentElements = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
   if(!contentElements || contentElements.length === 0 || itemElements[i].offsetWidth === 0) continue;
   ASPxClientMenuLiteRenderHelper.CalculateItemMinSize(itemElements[i]);
  }
  _aspxRestoreStyleAttribute(contentElement, "width");
 }
 else {
  var isAutoWidth = menuElement.className.indexOf(ASPxClientMenuCssClasses.AutoWidthMenu) > -1;
  var noWrap = menuElement.className.indexOf(ASPxClientMenuCssClasses.NoWrapMenu) > -1;
  menuElement.className = menuElement.className.replace(ASPxClientMenuCssClasses.NoWrapMenu, "");
  menuElement.className = menuElement.className.replace(ASPxClientMenuCssClasses.AutoWidthMenu, "");
  _aspxChangeStyleAttribute(menuElement, "width", "1px");
  for(var i = 0; i < itemElements.length; i++){
   var contentElements = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
   if(!contentElements || contentElements.length === 0 || itemElements[i].offsetWidth === 0) continue;
   var textContainer = _aspxGetChildByTagName(contentElements[0], "SPAN", 0);
   if(textContainer && _aspxGetCurrentStyle(textContainer).whiteSpace !== "nowrap") 
    _aspxAdjustWrappedTextInContainer(contentElements[0]);
   ASPxClientMenuLiteRenderHelper.CalculateItemMinSize(itemElements[i]);
  }
  if(isAutoWidth)
   menuElement.className += " " + ASPxClientMenuCssClasses.AutoWidthMenu;
  if(noWrap)
   menuElement.className += " " + ASPxClientMenuCssClasses.NoWrapMenu;
  if(isAutoWidth || noWrap)
   menuElement.style.minWidth = (contentElement.offsetWidth + _aspxGetLeftRightBordersAndPaddingsSummaryValue(menuElement)) + "px";
  _aspxRestoreStyleAttribute(menuElement, "width");
 }
 menuElement.isMinSizeCalculated = true;
};
ASPxClientMenuLiteRenderHelper.CalculateItemMinSize = function(itemElement) {
 var sizeCorrection = (__aspxIE && __aspxBrowserVersion > 8) ? 1 : 0;
 itemElement.style.minWidth = "";
 var childrenWidth = 0;
 for(var j = 0; j < itemElement.childNodes.length; j++){
  var child = itemElement.childNodes[j];
  if(!child.offsetWidth) continue;
  var float = _aspxGetElementFloat(child);
  if(float === "none"){
   childrenWidth = child.offsetWidth;
   break;
  }
  else
   childrenWidth += child.offsetWidth;
 }
 itemElement.style.minWidth = (childrenWidth + sizeCorrection) + "px";
};
ASPxClientMenuLiteRenderHelper.CalculateSeparatorsAndSpacers = function(menuElement, contentElement) {
 var spacerElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Spacing);
 var spacerAndSeparatorElements = spacerElements.concat(this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Separator));
 for(var i = 0; i < spacerAndSeparatorElements.length; i++)
  spacerAndSeparatorElements[i].style.height = "";
 var isAutoWidth = menuElement.className.indexOf(ASPxClientMenuCssClasses.AutoWidthMenu) > -1;
 var noWrap = menuElement.className.indexOf(ASPxClientMenuCssClasses.NoWrapMenu) > -1;
 var menuHeight = contentElement.clientHeight;
 if(!isAutoWidth && !noWrap){
  _aspxChangeStyleAttribute(contentElement, "width", "10000px");
  menuHeight = contentElement.clientHeight;
  _aspxRestoreStyleAttribute(contentElement, "width");
 }
 for(var i = 0; i < spacerAndSeparatorElements.length; i++)
  spacerAndSeparatorElements[i].style.height = (menuHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(spacerAndSeparatorElements[i]) - _aspxGetTopBottomMargins(spacerAndSeparatorElements[i])) + "px";
 for(var i = 0; i < spacerElements.length; i++)
  spacerElements[i].style.minWidth = spacerElements[i].style.width; 
};
ASPxClientMenuLiteRenderHelper.ProsessRightFloatElements = function(contentElement, action) {
 var raw = _aspxGetChildrenByPartialClassName(contentElement, ASPxClientMenuCssClasses.Prefix).concat([ contentElement ]);
 var list = [ ];
 for(var i = 0; i < raw.length; i++) {
  if(raw[i].offsetWidth < 1 || _aspxGetElementFloat(raw[i]) != "right")
   continue;
  list.push(raw[i]);
 }
 var directionChanged;
 if(contentElement.className == ASPxClientMenuCssClasses.DX && 
  contentElement.tagName.toUpperCase() == "DIV" && _aspxGetElementDirection(contentElement) == "rtl") {
  _aspxSetElementDirection(contentElement, "ltr");
  directionChanged = true;
 }
 for(var i = 0; i < list.length; i++)  
  _aspxSetElementFloat(list[i], "left");   
 action(list);
 for(var i = 0; i < list.length; i++)
  _aspxSetElementFloat(list[i], "");
 if(directionChanged)
  _aspxSetElementDirection(contentElement, "rtl");
};
ASPxClientMenuLiteRenderHelper.FreezeElementSizes = function(elements) {
 for(var i = 0; i < elements.length; i++)
  elements[i].style.width = elements[i].offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(elements[i]) + "px";
};
ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuElements = function(menu, parentElement) {
 parentElement.style.position = "absolute";
 var indexPath = menu.GetMenuIndexPathById(parentElement.id);
 var borderCorrectorElement = this.GetNodeByClassName(parentElement, ASPxClientMenuCssClasses.BorderCorrector);
 if(borderCorrectorElement != null) {
  borderCorrectorElement.id = menu.GetMenuBorderCorrectorElementId(indexPath);
  borderCorrectorElement.style.position = "absolute";
  parentElement.removeChild(borderCorrectorElement);
  parentElement.parentNode.appendChild(borderCorrectorElement);
 }
 this.InlineInitializeSubMenuMenuElement(menu, parentElement);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuMenuElement = function(menu, parentElement) {
 var menuElement = this.GetNodeByClassName(parentElement, ASPxClientMenuCssClasses.PopupMenu);
 var indexPath = menu.GetMenuIndexPathById(parentElement.id);
 menuElement.id = menu.GetMenuMainElementId(indexPath);
 var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0); 
 if(contentElement != null) {
  var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
  var parentIndexPath = parentElement == menu.GetMainElement() ? "" : indexPath;
  for(var i = 0; i < itemElements.length; i++) {
   var itemElementId = itemElements[i].id;
   if(itemElementId && aspxGetMenuCollection().GetMenu(itemElementId) != menu)
    continue;
   this.InlineInitializeItemElement(menu, itemElements[i], parentIndexPath, i);
  }
 }
 this.InlineInitializeScrollElements(menu, indexPath, menuElement);
};
ASPxClientMenuLiteRenderHelper.HasSubMenuTemplate = function(menuElement) {
 var contentElement = this.GetContentElement(menuElement);
 return contentElement && (contentElement.tagName != "UL" || !_aspxGetChildrenByPartialClassName(contentElement, ASPxClientMenuCssClasses.ContentContainer).length);
};
ASPxClientMenuLiteRenderHelper.GetContentElement = function(menuElement) {
 var contentElement = _aspxGetChildByTagName(menuElement, "DIV", 0); 
 if( contentElement &&
  contentElement.className == ASPxClientMenuCssClasses.DX &&
  contentElement.parentNode == menuElement)
  return contentElement;
 contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 if(contentElement)
  return contentElement;
 return _aspxGetChildByTagName(menuElement, "TABLE", 0);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeItemElement = function(menu, itemElement, parentIndexPath, visibleIndex) {
 function getItemIndex(visibleIndex) {
  var itemData = parentItemData[Math.max(visibleIndex, 0)];
  return itemData.constructor == Array
   ? itemData[0]
   : itemData;
 }
 var parentItemData = menu.renderData[parentIndexPath],
  prepareItemOnClick = parentItemData[visibleIndex].constructor == Array,
  indexPathPrefix = parentIndexPath + (parentIndexPath != "" ? __aspxItemIndexSeparator : ""),
  indexPath = indexPathPrefix + getItemIndex(visibleIndex),
  prevIndexPath = indexPathPrefix + getItemIndex(visibleIndex - 1);
 itemElement.id = menu.GetItemElementId(indexPath);
 aspxAssignAccessabilityEventsToChildrenLinks(itemElement);
 var separatorElement = itemElement.previousSibling;
 if(separatorElement && separatorElement.className) {
  if(_aspxElementCssClassContains(separatorElement, ASPxClientMenuCssClasses.Spacing))
   separatorElement.id = menu.GetItemIndentElementId(prevIndexPath);
  else if(_aspxElementCssClassContains(separatorElement, ASPxClientMenuCssClasses.Separator))
   separatorElement.id = menu.GetItemSeparatorElementId(indexPath);
 }
 var contentElementParent = itemElement;
 var contentElement = this.GetNodeByClassName(contentElementParent, ASPxClientMenuCssClasses.ContentContainer);
 if(contentElement != null) {
  contentElement.id = menu.GetItemContentElementId(indexPath);
  var imageElement = this.GetNodeByClassName(contentElement, ASPxClientMenuCssClasses.Image);
  if(imageElement == null) {
   var hyperLinkElement = this.GetNodeByClassName(contentElement, ASPxClientMenuCssClasses.DX);
   if(hyperLinkElement != null)
    imageElement = this.GetNodeByClassName(hyperLinkElement, ASPxClientMenuCssClasses.Image);
  }
  if(imageElement != null)
   imageElement.id = menu.GetItemImageId(indexPath);
 }
 else
  prepareItemOnClick = false;
 var popOutElement = this.GetNodeByClassName(itemElement, ASPxClientMenuCssClasses.PopOutContainer);
 if(popOutElement != null) {
  popOutElement.id = menu.GetItemPopOutElementId(indexPath);
  var popOutImageElement = this.GetNodeByClassName(popOutElement, ASPxClientMenuCssClasses.PopOutImage);
  if(popOutImageElement != null)
   popOutImageElement.id = menu.GetItemPopOutImageId(indexPath);
 }
 if(prepareItemOnClick)
  this.InlineInitializeItemOnClick(menu, itemElement, indexPath);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeItemOnClick = function(menu, itemElement, indexPath) {
 var name = menu.name;
 var onclick = this.GetItemOnClick(menu, name, itemElement, indexPath);
 if(menu.IsDropDownItem(indexPath)) {
  var contentElement = menu.GetItemContentElement(indexPath);
  var dropDownElement = menu.GetItemPopOutElement(indexPath);
  var dropDownOnclick = this.GetItemDropdownOnClick(name, itemElement, indexPath);
  _aspxAttachEventToElement(contentElement, "click", onclick);
  _aspxAttachEventToElement(dropDownElement, "click", dropDownOnclick);
 }
 else
  _aspxAttachEventToElement(itemElement, "click", onclick);
 if(itemElement.style.cursor == "")
  itemElement.style.cursor = "pointer";
};
ASPxClientMenuLiteRenderHelper.GetItemOnClick = function (menu, name, itemElement, indexPath) { 
 var sendPostBackHandler = function () {
  menu.SendPostBack("CLICK:" + indexPath);
 };
 var itemClickHandler = function(e) {
  aspxMIClick(e, name, indexPath);
 };
 var handler = menu.autoPostBack && !menu.IsClientSideEventsAssigned() && !_aspxGetChildByTagName(itemElement, "A", 0)
  ? sendPostBackHandler
  : itemClickHandler;
 return function (e) {
  if (!itemElement.clientDisabled)
   handler(e);
 };
};
ASPxClientMenuLiteRenderHelper.GetItemDropdownOnClick = function(name, itemElement, indexPath) {
 return function(e) {
  if(!itemElement.clientDisabled)
   aspxMIDDClick(e, name, indexPath);
 };
};
ASPxClientMenuLiteRenderHelper.ChangeItemEnabledAttributes = function(itemElement, enabled) {
 if(itemElement) {
  itemElement.clientDisabled = !enabled;
  _aspxChangeStyleAttributesMethod(enabled)(itemElement, "cursor");
  var hyperLink = _aspxGetChildByTagName(itemElement, "A", 0);
  if(hyperLink)
   _aspxChangeAttributesMethod(enabled)(hyperLink, "href");
 }
};
ASPxClientMenuScrollHelper = _aspxCreateClass(null, {
 constructor: function(menu, indexPath) {
  this.menu = menu;
  this.indexPath = indexPath;
  this.scrollingAreaElement = null;
  this.manager = null;
  this.initialized = false;
  this.visibleItems = [];
  this.itemsHeight = 0;
  this.scrollHeight = 0;
  this.scrollUpButtonHeight = 0;
  this.scrollDownButtonHeight = 0;
  this.scrollAreaHeight = null;
  this.scrollUpButtonVisible = false;
  this.scrollDownButtonVisible = false;
 },
 Initialize: function(){
  if(this.initialized) return;
  this.scrollingAreaElement = this.menu.GetScrollContentItemsOuterContainer(this.indexPath);
  var vector = [ 0, 1 ];
  this.manager = new ASPxScrollingManager(this, this.scrollingAreaElement, vector, 
   function(manager, direction){
    manager.owner.OnBeforeScrolling(direction);
   }, 
   function(manager, direction){
    manager.owner.OnAfterScrolling(direction);
   }
  );
  this.ShowScrollButtons();
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton){
   this.scrollUpButtonHeight = this.GetScrollButtonHeight(scrollUpButton)
   _aspxSetElementSelectionEnabled(scrollUpButton, false);
  }
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton){
   this.scrollDownButtonHeight = this.GetScrollButtonHeight(scrollDownButton);
   _aspxSetElementSelectionEnabled(scrollDownButton, false);
  }
  if(__aspxWebKitTouchUI){
   var preventDefault = function(event){event.preventDefault();};
   _aspxAttachEventToElement(scrollUpButton, "touchstart", preventDefault);
   _aspxAttachEventToElement(scrollDownButton, "touchstart", preventDefault);
  }
  this.HideScrollButtons();
  this.initialized = true;  
 },
 GetScrollButtonHeight: function(button) {
  var style = _aspxGetCurrentStyle(button);
  return button.offsetHeight + _aspxPxToInt(style.marginTop) + _aspxPxToInt(style.marginBottom);
 },
 FillVisibleItemsList: function(){
  var index = 0;
  this.visibleItems = [];
  while(true){
   var childIndexPath = (this.indexPath != "" ? this.indexPath + __aspxItemIndexSeparator : "") + index;
   var itemElement = this.menu.GetItemElement(childIndexPath);
   if(itemElement == null)
    break;
   if(_aspxGetElementDisplay(itemElement))
    this.visibleItems.push(itemElement);
   index++;
  }
 },
 CanCalculate: function(){
  return this.scrollingAreaElement && _aspxElementIsDisplayed(this.scrollingAreaElement);
 },
 Calculate: function(scrollHeight){
  if(!this.CanCalculate()) return;
  this.FillVisibleItemsList();
  this.itemsHeight = 0;
  this.scrollHeight = scrollHeight;
  var itemsContainer = this.menu.GetScrollContentItemsContainer(this.indexPath);
  if(itemsContainer) this.itemsHeight = itemsContainer.offsetHeight;
  this.SetPosition(0);
  this.CalculateScrollingElements(-1);
 },
 GetPosition: function(){
  return -this.manager.GetScrolledAreaPosition();
 },
 SetPosition: function(pos){
  this.manager.SetScrolledAreaPosition(-pos);
 },
 CalculateScrollingElements: function(direction){
  if(this.itemsHeight <= this.scrollHeight){
   this.scrollUpButtonVisible = false;
   this.scrollDownButtonVisible = false;
   this.scrollAreaHeight = null;
   this.SetPosition(0);
  }
  else{
   var scrollTop = this.GetPosition();
   this.scrollAreaHeight = this.scrollHeight;
   if(direction > 0){
    var showScrollUpButton = !this.scrollUpButtonVisible;
    this.scrollUpButtonVisible = true;
    this.scrollAreaHeight -= this.scrollUpButtonHeight;
    this.scrollDownButtonVisible = this.itemsHeight - this.scrollAreaHeight - scrollTop > this.scrollDownButtonHeight;
    if(this.scrollDownButtonVisible) {
     this.scrollAreaHeight -= this.scrollDownButtonHeight;
     if(showScrollUpButton)
      this.SetPosition(this.GetPosition() + this.scrollUpButtonHeight);
    }
    else {
     this.SetPosition(this.itemsHeight - this.scrollAreaHeight);
    }
   }
   else{
    this.scrollDownButtonVisible = true;
    this.scrollAreaHeight -= this.scrollDownButtonHeight;    
    this.scrollUpButtonVisible = scrollTop > this.scrollUpButtonHeight;
    if(this.scrollUpButtonVisible)
     this.scrollAreaHeight -= this.scrollUpButtonHeight;
    else
     this.SetPosition(0);
   }
   if(this.scrollAreaHeight < 1) this.scrollAreaHeight = 1;
  }
  this.UpdateScrollingElements();
 },
 UpdateScrollingElements: function(){
  this.UpdateScrollAreaHeight();
  this.UpdateScrollButtonsVisibility();
 },
 UpdateScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement) 
   scrollAreaElement.style.height = (this.scrollAreaHeight) ? (this.scrollAreaHeight + "px") : "";
 },
 UpdateScrollButtonsVisibility: function() {
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton) _aspxSetElementDisplay(scrollUpButton, this.scrollUpButtonVisible);
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton) _aspxSetElementDisplay(scrollDownButton, this.scrollDownButtonVisible);
 },
 ChangeScrollButtonsVisibility: function(visible) {
  this.scrollUpButtonVisible = visible;
  this.scrollDownButtonVisible = visible;
  this.UpdateScrollButtonsVisibility();
 },
 ShowScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(true);
 },
 HideScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(false);
 },
 ResetScrolling: function() {
  if(!this.initialized)
   return;
  this.HideScrollButtons();
  this.SetPosition(0);
  this.scrollAreaHeight = null;
  this.UpdateScrollAreaHeight();
 },
 GetScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   return scrollAreaElement.offsetHeight;
  return 0;
 },
 OnAfterScrolling: function(direction){
  this.CalculateScrollingElements(direction);
 },
 OnBeforeScrolling: function(direction){
  var scrollButton = (direction > 0) ? this.menu.GetScrollDownButtonElement(this.indexPath) :
   this.menu.GetScrollUpButtonElement(this.indexPath);
  if(!scrollButton || !_aspxGetElementDisplay(scrollButton))
   this.manager.StopScrolling();
 },
 StartScrolling: function(direction, delay, step) {
  this.manager.StartScrolling(direction, delay, step);
 },
 StopScrolling: function() {
  this.manager.StopScrolling();
 }
});
ASPxClientMenuScrollHelper.GetMenuByScrollButtonId = function(id){
 var menuName = aspxGetMenuCollection().GetMenuNameBySuffixes(id, [__aspxSBIdSuffix]);
 return aspxGetMenuCollection().Get(menuName);
}
ASPxClientMenuBase = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.createIFrames = false;
  this.renderData = null;
  this.allowSelectItem = false;
  this.allowCheckItems = false;
  this.allowMultipleCallbacks = false;
  this.appearAfter = 300;
  this.slideAnimationDuration = 60;
  this.disappearAfter = 500;
  this.enableAnimation = true;
  this.checkedItems = [ ];
  this.itemCheckedGroups = [ ];
  this.lockHoverEvents = false;
  this.popupToLeft = false;
  this.popupCount = 0;
  this.rootItem = null;
  this.showSubMenus = false;
  this.savedCallbackHoverItem = null;
  this.savedCallbackHoverElement = null;
  this.scrollInfo = [];
  this.scrollHelpers = {};
  this.scrollVertOffset = 1;
  this.rootSubMenuFIXOffset = 0;
  this.rootSubMenuFIYOffset = 0;
  this.rootSubMenuLIXOffset = 0;
  this.rootSubMenuLIYOffset = 0;
  this.rootSubMenuXOffset = 0;
  this.rootSubMenuYOffset = 0;
  this.subMenuFIXOffset = 0;
  this.subMenuFIYOffset = 0;
  this.subMenuLIXOffset = 0;
  this.subMenuLIYOffset = 0;
  this.subMenuXOffset = 0;
  this.subMenuYOffset = 0;
  this.maxHorizontalOverlap = -3;
  this.sizingConfig.allowSetHeight = false;
  this.ItemClick = new ASPxClientEvent();
  this.ItemMouseOver = new ASPxClientEvent();
  this.ItemMouseOut = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  aspxGetMenuCollection().Add(this);
 }, 
 Initialize: function(){
  this.constructor.prototype.Initialize.call(this);
  var main = this.GetMainElement();
  if(__aspxIE && __aspxBrowserMajorVersion < 8 && this.rtl && _aspxElementCssClassContains(main, ASPxClientMenuCssClasses.HorizontalMenu))
   ASPxClientMenuLiteRenderHelper.ProsessRightFloatElements(main, ASPxClientMenuLiteRenderHelper.FreezeElementSizes);
 },   
 InlineInitialize: function(){
  ASPxClientControl.prototype.InlineInitialize.call(this);
  ASPxClientMenuLiteRenderHelper.InlineInitializeElements(this);
  if(__aspxIE && __aspxBrowserMajorVersion == 7) {
   var mainElement = this.GetMainElement();
   var width = _aspxPxToInt(mainElement.style.width);
   if(width > 0) {
    width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
    if(width > 0)
     mainElement.style.width = width + "px";
   }
  }
  this.InitializeInternal(true);
  if(this.IsCallbacksEnabled()){
   this.showSubMenus = this.GetLoadingPanelElement() != null;
   this.CreateCallback("DXMENUCONTENT");
  }
  else 
   this.showSubMenus = true;
  this.popupToLeft = this.rtl;
 },
 InitializeInternal: function(inline) {
  this.InitializeCheckedItems();
  this.InitializeSelectedItem();
  this.InitializeEnabledAndVisible(!inline || !this.IsCallbacksEnabled());
  if(!this.IsCallbacksEnabled())
   this.InitializeScrollableMenus();
 },
 InitializeEnabledAndVisible: function(recursive){
  if(this.rootItem == null) return;
  for(var i = 0; i < this.rootItem.items.length; i++)
   this.rootItem.items[i].InitializeEnabledAndVisible(recursive);
 },
 InitializeScrollableMenus: function() {
  var info = eval(this.scrollInfo);
  this.scrollHelpers = {};
  for(var i = 0; i < info.length; i++)
   this.scrollHelpers[info[i]] = new ASPxClientMenuScrollHelper(this, info[i]);
 },
 IsClientSideEventsAssigned: function() {
  return !this.ItemClick.IsEmpty()
   || !this.ItemMouseOver.IsEmpty()
   || !this.ItemMouseOut.IsEmpty()
   || !this.PopUp.IsEmpty()
   || !this.CloseUp.IsEmpty()
   || !this.Init.IsEmpty();
 },
 IsCallbacksEnabled: function(){
  return _aspxIsFunction(this.callBack);
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 }, 
 GetMenuElementId: function(indexPath) {
  return this.name + __aspxMMIdSuffix + indexPath + "_";
 },
 GetMenuMainElementId: function(indexPath) {
  return this.name + "_DXME" + indexPath + "_";
 },
 GetMenuBorderCorrectorElementId: function(indexPath) {
  return this.name + "_DXMBC" + indexPath + "_";
 },
 GetMenuIFrameElementId: function(indexPath) {
  return this.name + "_DXMIF" + this.GetMenuLevel(indexPath);
 },
 GetScrollAreaId: function(indexPath) {
  return this.name + "_DXSA" + indexPath;
 },
 GetMenuTemplateContainerID: function(indexPath) {
  return this.name + "_MTCNT" + indexPath;
 },
 GetItemTemplateContainerID: function(indexPath) {
  return this.name + "_ITCNT" + indexPath;
 },
 GetScrollUpButtonId: function(indexPath) {
  return this.name + __aspxSBIdSuffix + indexPath + __aspxSBUIdEnd;
 },
 GetScrollDownButtonId: function(indexPath) {
  return this.name + __aspxSBIdSuffix + indexPath + __aspxSBDIdEnd;
 },
 GetItemElementId: function(indexPath) {
  return this.name + __aspxMIIdSuffix + indexPath + "_";
 },
 GetItemContentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "T";
 },
 GetItemPopOutElementId: function(indexPath){
  return this.GetItemElementId(indexPath) + "P";
 },
 GetItemImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "Img";
 },
 GetItemPopOutImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "PImg";
 },
 GetItemIndentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "II";
 },
 GetItemSeparatorElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "IS";
 },
 GetMenuElement: function(indexPath){
  return _aspxGetElementById(this.GetMenuElementId(indexPath));
 },
 GetMenuIFrameElement: function(indexPath){
  var elementId = this.GetMenuIFrameElementId(indexPath);
  var element = _aspxGetElementById(elementId);
  if(!element && this.createIFrames)
   return this.CreateIFrameElement(elementId);
  return element;
 },
 CreateIFrameElement: function(elementId) {
  var element = document.createElement("IFRAME");
  _aspxSetAttribute(element, "id", elementId);
  _aspxSetAttribute(element, "src", "javascript:false");
  _aspxSetAttribute(element, "scrolling", "no");
  _aspxSetAttribute(element, "frameborder", "0");
  element.style.position = "absolute";
  element.style.display = "none";
  element.style.zIndex = "19997";
  element.style.filter = "progid:DXImageTransform.Microsoft.Alpha(Style=0, Opacity=0)";
  _aspxInsertElementAfter(element, this.GetMainElement());
  return element;
 },
 GetMenuBorderCorrectorElement: function(indexPath){
  return _aspxGetElementById(this.GetMenuBorderCorrectorElementId(indexPath));
 },
 GetMenuMainCell: function(element){
  return this.GetMenuMainTable(element);
 },
 GetMenuMainTable: function(element){
  var indexPath = this.GetIndexPathById(element.id, true);
  var shadowTable = _aspxGetElementById(this.GetMenuMainElementId(indexPath));
  return shadowTable != null ? shadowTable : element;
 },
 GetScrollAreaElement: function(indexPath){
  return _aspxGetElementById(this.GetScrollAreaId(indexPath));
 },
 GetScrollContentItemsOuterContainer: function(indexPath){
  return _aspxGetChildByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
 },
 GetScrollContentItemsContainer: function(indexPath){
  return _aspxGetChildByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
 },
 GetScrollUpButtonElement: function(indexPath){
  return _aspxGetElementById(this.GetScrollUpButtonId(indexPath));
 },
 GetScrollDownButtonElement: function(indexPath){
  return _aspxGetElementById(this.GetScrollDownButtonId(indexPath));
 },
 GetItemElement: function(indexPath){
  return _aspxGetElementById(this.GetItemElementId(indexPath));
 },
 GetItemTemplateElement: function(indexPath){ 
  return this.GetItemTextTemplateContainer(indexPath);
 },
 GetItemTemplateContainer: function(indexPath) {
  return this.GetItemElement(indexPath);
 },
 GetItemTextTemplateContainer: function(indexPath) {
  return this.GetItemContentElement(indexPath);
 },
 GetItemContentElement: function(indexPath){
  return _aspxGetElementById(this.GetItemContentElementId(indexPath));
 },
 GetItemPopOutElement: function(indexPath){
  return _aspxGetElementById(this.GetItemPopOutElementId(indexPath));
 },
 GetSelectedItemInputElement: function(){
  return _aspxGetElementById(this.name + "SI");
 },
 GetCheckedItemsInputElement: function(){
  return _aspxGetElementById(this.name + "CI");
 },
 GetPopOutElements: function(){
  var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxm-popOut");
  for(var indexPath in this.renderData){
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement)
    elements = elements.concat(_aspxGetDescendantNodesByClassName(menuElement, "dxm-popOut"));
  }
  return elements;
 },
 GetPopOutImages: function(){
  var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxm-pImage");
  for(var indexPath in this.renderData){
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement)
    elements = elements.concat(_aspxGetDescendantNodesByClassName(menuElement, "dxm-pImage"));
  }
  return elements;
 },
 GetSubMenuXPosition: function(indexPath) {
  var pos = this.GetLiteSubMenuXPosition(indexPath);
  if(__aspxWebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   pos -= document.body.offsetLeft;
  return pos;
 },
 GetLiteSubMenuXPosition: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return _aspxGetAbsoluteX(itemElement)
   + (this.IsVertical(indexPath) ? itemElement.clientWidth + itemElement.clientLeft : 0);
 },
 GetSubMenuYPosition: function(indexPath){
  var position = 0;
  var element = this.GetItemElement(indexPath);
  if(element != null){
   if(this.IsVertical(indexPath)){
    position = _aspxGetAbsoluteY(element); 
   }
   else{
    if(__aspxNetscapeFamily || __aspxOpera && __aspxBrowserVersion >= 9 || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome || __aspxAndroidDefaultBrowser)
     position = _aspxGetAbsoluteY(element) + element.offsetHeight - _aspxGetClientTop(element);
    else if(__aspxWebKitFamily)
     position = _aspxGetAbsoluteY(element) + element.offsetHeight + element.offsetTop - _aspxGetClientTop(element);
    else
     position = _aspxGetAbsoluteY(element) + element.clientHeight + _aspxGetClientTop(element);
   }
  }
  if(__aspxWebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   position -= document.body.offsetTop;
  return position;
 },
 GetClientSubMenuXPosition: function(element, x, indexPath){
  var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
  var itemWidth = itemInfo.clientWidth;
  var itemOffsetWidth = itemInfo.offsetWidth;
  var subMenuWidth = this.GetMenuMainCell(element).offsetWidth;
  var docClientWidth = _aspxGetDocumentClientWidth();
  if(this.IsVertical(indexPath)){
   var left = x - _aspxGetDocumentScrollLeft();
   var right = left + subMenuWidth;
   var toLeftX = x - subMenuWidth - itemWidth;
   var toLeftLeft = left - subMenuWidth - itemWidth;
   var toLeftRight = right - subMenuWidth - itemWidth;
   if(this.IsCorrectionDisableMethodRequired(indexPath)){
    return this.GetCorrectionDisabledResult(x, toLeftX);
   }
   if(this.popupToLeft){
    if(toLeftLeft > this.maxHorizontalOverlap){
     return toLeftX;
    }
    if(docClientWidth - right > this.maxHorizontalOverlap || !this.rtl) {
     this.popupToLeft = false;
     return x;
    }
    return toLeftX;
   }
   else{
    if(docClientWidth - right > this.maxHorizontalOverlap){
     return x;
    }
    if(toLeftLeft > this.maxHorizontalOverlap || this.rtl){
     this.popupToLeft = true;
     return toLeftX;
    }
    return x;
   }
  }
  else{
   var left = x - _aspxGetDocumentScrollLeft();
   var right = left + subMenuWidth;
   var toLeftX = x - subMenuWidth + itemOffsetWidth;
   var toLeftLeft = left - subMenuWidth + itemOffsetWidth;
   var toLeftRight = right - subMenuWidth + itemOffsetWidth;
   if(this.popupToLeft){
    if(toLeftLeft < 0 && toLeftLeft < docClientWidth - right){
     this.popupToLeft = false;
     return x;
    }
    else
     return toLeftX;
   }
   else{
    if(docClientWidth - right < 0 && docClientWidth - right < toLeftLeft){
     this.popupToLeft = true;
     return toLeftX;
    }
    else
     return x;
   }
  }
 },
 GetClientSubMenuYPosition: function(element, y, indexPath){
  var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
  var itemHeight = itemInfo.offsetHeight;
  var itemOffsetHeight = itemInfo.offsetHeight;
  var subMenuHeight = this.GetMenuMainCell(element).offsetHeight;
  var menuItemTop = y - _aspxGetDocumentScrollTop();
  var subMenuBottom = menuItemTop + subMenuHeight;
  var docClientHeight = _aspxGetDocumentClientHeight();
  var clientSubMenuYPos = y;  
  if(this.IsVertical(indexPath)){
   var notEnoughSpaceToShowDown = subMenuBottom > docClientHeight;
   var menuItemBottom = menuItemTop + itemHeight;
   if(menuItemBottom > docClientHeight) {
    menuItemBottom = docClientHeight;
    itemHeight = menuItemBottom - menuItemTop;
   }
   var notEnoughSpaceToShowUp = menuItemBottom < subMenuHeight;
   var subMenuIsFitToDisplayFrames = docClientHeight >= subMenuHeight;  
   if (!subMenuIsFitToDisplayFrames) clientSubMenuYPos = y - menuItemTop;
   else if(notEnoughSpaceToShowDown){
    if (notEnoughSpaceToShowUp){   
     var docClientBottom = _aspxGetDocumentScrollTop() + docClientHeight;
     clientSubMenuYPos = docClientBottom - subMenuHeight; 
    } else 
     clientSubMenuYPos =  y + itemHeight - subMenuHeight;
   }   
  }
  else{
   if (this.IsHorizontalSubmenuNeedInversion(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight))
    clientSubMenuYPos = y - subMenuHeight - itemHeight;
  }
  return clientSubMenuYPos;
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight){
  return subMenuBottom > docClientHeight && menuItemTop - subMenuHeight - itemHeight > docClientHeight - subMenuBottom;
 },
 IsCorrectionDisableMethodRequired: function(indexPath){
  return false;
 },
 HasChildren: function(indexPath){
  return (this.GetMenuElement(indexPath) != null);
 },
 IsVertical: function(indexPath){
  return true;
 },
 IsRootItem: function(indexPath){
  return this.GetMenuLevel(indexPath) <= 1;
 },
 IsParentElementPositionStatic: function(indexPath){
  return this.IsRootItem(indexPath);
 },
 GetItemIndexPath: function(indexes){
  return aspxGetMenuCollection().GetItemIndexPath(indexes);
 },
 GetItemIndexes: function(indexPath){
  return aspxGetMenuCollection().GetItemIndexes(indexPath);
 },
 GetItemIndexPathById: function(id){
  return aspxGetMenuCollection().GetIndexPathById(id, __aspxMIIdSuffix);
 },
 GetMenuIndexPathById: function(id){
  return aspxGetMenuCollection().GetIndexPathById(id, __aspxMMIdSuffix);
 },
 GetScrollButtonIndexPathById: function(id){
  return aspxGetMenuCollection().GetIndexPathById(id, __aspxSBIdSuffix);
 },
 GetIndexPathById: function(id, checkMenu){
  var indexPath = this.GetItemIndexPathById(id);
  if(indexPath == "" && checkMenu) 
   indexPath = this.GetMenuIndexPathById(id);
  return indexPath;
 },
 GetMenuLevel: function(indexPath){
  return aspxGetMenuCollection().GetMenuLevel(indexPath);
 },
 GetParentIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  indexes.length --;
  return (indexes.length > 0) ? this.GetItemIndexPath(indexes) : ""; 
 },
 GetFirstChildIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  indexes[indexes.length] = 0;
  var newIndexPath = this.GetItemIndexPath(indexes); 
  return this.GetFirstSiblingIndexPath(newIndexPath);
 },
 GetFirstSiblingIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  var i = 0;
  while(true){
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes); 
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetLastSiblingIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  var parentItem = this.GetItemByIndexPath(this.GetParentIndexPath(indexPath));
  var i = parentItem ? parentItem.GetItemCount() - 1 : 0;
  while(true){  
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes); 
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 GetNextSiblingIndexPath: function(indexPath){
  if(this.IsLastItem(indexPath)) return null;
  var indexes = this.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] + 1;
  while(true){  
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes); 
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetPrevSiblingIndexPath: function(indexPath){
  if(this.IsFirstItem(indexPath)) return null;
  var indexes = this.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] - 1;
  while(true){  
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes); 
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 IsLastElement: function(element){
  return element && (!element.nextSibling || !element.nextSibling.tagName);
 },
 IsLastItem: function(indexPath){
  var itemElement = this.GetItemElement(indexPath);
  return this.IsLastElement(itemElement);
 },
 IsFirstElement: function(element){
  return element && (!element.previousSibling || !element.previousSibling.tagName);
 },
 IsFirstItem: function(indexPath){
  var itemElement = this.GetItemElement(indexPath);
  return this.IsFirstElement(itemElement);
 },
 IsItemExist: function(indexPath){
  return !!this.GetItemByIndexPath(indexPath);
 },
 IsItemEnabled: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  return item ? item.GetEnabled() : false;
 },
 IsItemVisible: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  return item ? item.GetVisible() : false;
 },
 GetClientSubMenuPos: function(element, indexPath, pos, isXPos){
  if (!_aspxGetIsValidPosition(pos)){
   pos = isXPos ? this.GetSubMenuXPosition(indexPath) : 
    this.GetSubMenuYPosition(indexPath);
  }
  var clientPos = isXPos ? this.GetClientSubMenuXPosition(element, pos, indexPath) :
   this.GetClientSubMenuYPosition(element, pos, indexPath);
  var isInverted = pos != clientPos;
  var offset = isXPos ? this.GetSubMenuXOffset(indexPath) : this.GetSubMenuYOffset(indexPath);
  clientPos += isInverted ? - offset : offset;
  clientPos -= _aspxGetPositionElementOffset(this.GetMenuElement(indexPath), isXPos);
  return new _aspxPopupPosition(clientPos, isInverted);
 },
 GetSubMenuXOffset: function(indexPath){
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)){
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIXOffset;
   else
    return this.rootSubMenuXOffset;
  }
  else{
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIXOffset;
   else
    return this.subMenuXOffset;
  }
 },
 GetSubMenuYOffset: function(indexPath){
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)){
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIYOffset;
   else
    return this.rootSubMenuYOffset;
  }
  else{
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIYOffset;
   else
    return this.subMenuYOffset;
  }
 },
 StartScrolling: function(buttonId, delay, step) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var level = this.GetMenuLevel(indexPath);
  aspxGetMenuCollection().DoHidePopupMenus(null, level, this.name, false, "");
  var direction = (buttonId.lastIndexOf(__aspxSBDIdEnd) == buttonId.length - __aspxSBDIdEnd.length) ? 1 : -1;
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) scrollHelper.StartScrolling(direction, delay, step);
 },
 StopScrolling: function(buttonId) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) scrollHelper.StopScrolling();
 },
 ClearAppearTimer: function(){
  aspxGetMenuCollection().ClearAppearTimer();
 },
 ClearDisappearTimer: function(){
  aspxGetMenuCollection().ClearDisappearTimer();
 },
 IsAppearTimerActive: function(){
  return aspxGetMenuCollection().IsAppearTimerActive();
 },
 IsDisappearTimerActive: function(){
  return aspxGetMenuCollection().IsDisappearTimerActive();
 },
 SetAppearTimer: function(indexPath){
  aspxGetMenuCollection().SetAppearTimer(this.name, indexPath, this.appearAfter);
 },
 SetDisappearTimer: function(){
  aspxGetMenuCollection().SetDisappearTimer(this.name, this.disappearAfter);
 },
 IsDropDownItem: function(indexPath){
  return _aspxElementCssClassContains(this.GetItemElement(indexPath), ASPxClientMenuCssClasses.ItemDropDownMode);
 },
 DoItemClick: function(indexPath, hasItemLink, htmlEvent){
  var processOnServer = this.RaiseItemClick(indexPath, htmlEvent);
  if(processOnServer && !hasItemLink)
   this.SendPostBack("CLICK:" + indexPath);
  else{
   this.ClearDisappearTimer();
   this.ClearAppearTimer();
   if(!this.HasChildren(indexPath) || this.IsDropDownItem(indexPath))
    aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   else if(this.IsItemEnabled(indexPath) && !this.IsDropDownItem(indexPath))
    this.ShowSubMenu(indexPath);
  }
 },
 HasContent: function(mainCell) {
  for(var i = 0; i < mainCell.childNodes.length; i++)
   if(mainCell.childNodes[i].tagName)
    return true;
  return false;
 },
 DoShowPopupMenu: function(element, x, y, indexPath){
  var parent = this.GetItemByIndexPath(indexPath);
  var menuElement = this.GetMenuMainCell(element);
  var popupMenuHasVisibleContent = menuElement && ASPxClientMenuLiteRenderHelper.HasSubMenuTemplate(menuElement) || parent && this.HasVisibleItems(parent);
  if(popupMenuHasVisibleContent === false)
   return;
  if(element && this.IsCallbacksEnabled())
   this.ShowLoadingPanelInMenu(element);
  if(_aspxGetElementVisibility(element))
   _aspxSetStyles(element, { left: __aspxInvalidPosition, top: __aspxInvalidPosition });
  _aspxSetElementDisplay(element, true);
  if(parent) {
   for(var i = 0; i < parent.GetItemCount(); i++) {
    var item = parent.GetItem(i);
    this.SetPopOutElementVisible(item.indexPath, this.HasVisibleItems(item));
   }
  }
  ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, element, false);
  if(this.popupCount == 0) this.popupToLeft = this.rtl;
  var horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, true);
  var verticalPopupPosition = this.GetClientSubMenuPos(element, indexPath, y, false);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var toTheLeft = horizontalPopupPosition.isInverted;
  var toTheTop = verticalPopupPosition.isInverted;
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
   if(yClientCorrection > 0) {
    clientY += yClientCorrection;
    verticalPopupPosition.position = clientY;
   }
  }
  var parentElement = this.GetItemContentElement(indexPath);
  var prevParentPos = _aspxGetAbsoluteX(parentElement);
  _aspxSetStyles(element, {
   left: clientX, top: clientY
  });
  if(__aspxIE && __aspxBrowserMajorVersion > 7 && _aspxIsElementRightToLeft(document.body)) {
   _aspxSetElementDisplay(element, false);   
   _aspxSetElementDisplay(element, true);   
  }
  clientX += _aspxGetAbsoluteX(parentElement) - prevParentPos;
  if (this.enableAnimation){
   this.StartAnimation(element, indexPath, horizontalPopupPosition, verticalPopupPosition);
  }
  else {
   _aspxSetStyles(element, { left: clientX, top: clientY });
   _aspxSetElementVisibility(element, true);
   this.DoShowPopupMenuIFrame(element, clientX, clientY, __aspxInvalidDimension, __aspxInvalidDimension, indexPath);
   this.DoShowPopupMenuBorderCorrector(element, clientX, clientY, indexPath, toTheLeft, toTheTop);
  }
  aspxGetMenuCollection().RegisterVisiblePopupMenu(this.name, element.id);
  this.popupCount ++;
  aspxGetControlCollection().AdjustControls(element);
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
  this.RaisePopUp(indexPath);
 },
 ShowLoadingPanelInMenu: function(element) {
  var mainCell = this.GetMenuMainCell(element);
  if(mainCell && !this.HasContent(mainCell))
   this.CreateLoadingPanelInsideContainer(mainCell);
 },
 GetScrollSubMenuYCorrection: function(element, scrollHelper, clientY) {
  var absoluteClientY = clientY + _aspxGetPositionElementOffset(element);
  var excessTop = this.GetScrollExcessTop(absoluteClientY);
  var excessBottom = this.GetScrollExcessBottom(element, absoluteClientY);
  var correction = 0;
  if(excessTop > 0)
   correction += excessTop + this.scrollVertOffset;
  if(excessBottom > 0 && (absoluteClientY + correction == _aspxGetDocumentScrollTop())) {
   excessBottom += this.scrollVertOffset;
   correction += this.scrollVertOffset;
  }
  this.PrepareScrolling(element, scrollHelper, excessTop, excessBottom);
  return correction;
 },
 GetScrollExcessTop: function(clientY) {
  return _aspxGetDocumentScrollTop() - clientY;
 },
 GetScrollExcessBottom: function(element, clientY) {
  _aspxSetElementDisplay(element, false);
  var docHeight = _aspxGetDocumentClientHeight();
  _aspxSetElementDisplay(element, true);
  return clientY + element.offsetHeight - _aspxGetDocumentScrollTop() - docHeight;  
 },
 PrepareScrolling: function(element, scrollHelper, excessTop, excessBottom) {  
  scrollHelper.Initialize();
  var corrector = element.offsetHeight - scrollHelper.GetScrollAreaHeight() + this.scrollVertOffset;
  if(excessTop > 0)
   scrollHelper.Calculate(element.offsetHeight - excessTop - corrector);
  if(excessBottom > 0)
   scrollHelper.Calculate(element.offsetHeight - excessBottom - corrector);
 },
 DoShowPopupMenuIFrame: function(element, x, y, width, height, indexPath){
  if (!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.GetMenuIFrameElement(indexPath);
   element.overflowElement = iFrame;
  }
  if(iFrame) {
   var cell = this.GetMenuMainCell(element);
   if (width < 0)
    width = cell.offsetWidth;
   if (height < 0)
    height = cell.offsetHeight;
   _aspxSetStyles(iFrame, {
    width: width, height: height,
    left: x, top: y, display: ""
   });
  }
 },
 DoShowPopupMenuBorderCorrector: function(element, x, y, indexPath, toTheLeft, toTheTop){
  var borderCorrectorElement = this.GetMenuBorderCorrectorElement(indexPath);
  if(borderCorrectorElement) {
   var params = this.GetPopupMenuBorderCorrectorPositionAndSize(element, x, y, indexPath, toTheLeft, toTheTop);
   var itemCell = this.GetItemContentElement(indexPath);
   var popOutImageCell = this.GetItemPopOutElement(indexPath);
   if(__aspxIE && __aspxBrowserMajorVersion == 9) { 
    var isVertical = this.IsVertical(indexPath);
    var itemBoundCoord = itemCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
    var itemBorderWidth = _aspxPxToInt(_aspxGetCurrentStyle(itemCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
    if(popOutImageCell != null) {
     var popOutImageBoundCoord = popOutImageCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
     if(popOutImageBoundCoord > itemBoundCoord) {
      itemBoundCoord = popOutImageBoundCoord;
      itemBorderWidth = _aspxPxToInt(_aspxGetCurrentStyle(popOutImageCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
     }
    }
    var menu = this.GetMainElement();
    itemBoundCoord -= Math.min(menu.getBoundingClientRect()[isVertical ? 'top' : 'left'], _aspxGetPositionElementOffset(menu, !isVertical));
    if(isVertical) {
     var bottomsDifference = this.GetItemElement(indexPath).getBoundingClientRect().bottom - 
      this.GetMenuElement(indexPath).getBoundingClientRect().bottom;
     itemBoundCoord -= bottomsDifference > 0 && bottomsDifference;
    }
    var borderCorrectorBoundCoord = isVertical ? params.top + params.height : params.left + params.width;
    if(itemBoundCoord - borderCorrectorBoundCoord != itemBorderWidth) {
     borderCorrectorBoundCoord = itemBoundCoord - itemBorderWidth;
     if(isVertical)
      params.height = borderCorrectorBoundCoord - params.top;
     else
      params.width = borderCorrectorBoundCoord - params.left;
    }
   }
   _aspxSetStyles(borderCorrectorElement, {
    width: params.width, height: params.height,
    left: params.left, top: params.top,
    display: "", visibility: "visible"
   });
   element.borderCorrectorElement = borderCorrectorElement;
  }
 },
 GetPopupMenuBorderCorrectorPositionAndSize: function(element, x, y, indexPath, toTheLeft, toTheTop) {
  var result = {};
  var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
  var menuXOffset = _aspxGetClientLeft(this.GetMenuMainCell(element));
  var menuYOffset = _aspxGetClientTop(this.GetMenuMainCell(element));
  var mainCell = this.GetMenuMainCell(element);
  var menuClientWidth = mainCell.clientWidth;
  var menuClientHeight = mainCell.clientHeight;
  if(this.IsVertical(indexPath)){
   var commonClientHeight = itemInfo.clientHeight < menuClientHeight
    ? itemInfo.clientHeight
    : menuClientHeight;
   result.width = menuXOffset;
   result.height = commonClientHeight + itemInfo.clientTop - menuYOffset;
   result.left = x;
   if(toTheLeft)
    result.left += menuClientWidth + menuXOffset;
   result.top = y + menuYOffset;
   if(toTheTop)
    result.top += menuClientHeight - result.height;
  }
  else{
   var itemWidth = itemInfo.clientWidth;
   if(this.IsDropDownItem(indexPath))
    itemWidth = this.GetItemContentElement(indexPath).clientWidth;
   var commonClientWidth = itemWidth < menuClientWidth
    ? itemWidth
    : menuClientWidth;
   result.width = commonClientWidth + itemInfo.clientLeft - menuXOffset;
   result.height = menuYOffset;
   result.left = x + menuXOffset;
   if(toTheLeft)
    result.left += menuClientWidth - result.width;
   result.top = y;
   if(toTheTop)
    result.top += menuClientHeight + menuYOffset;
  }
  return result;
 },
 DoHidePopupMenu: function(evt, element){
  this.DoHidePopupMenuBorderCorrector(element);
  this.DoHidePopupMenuIFrame(element);
  ASPxClientPopupUtils.StopAnimation(element);
  _aspxSetElementVisibility(element, false);
  _aspxSetElementDisplay(element, false);
  this.CancelSubMenuItemHoverItem(element);
  aspxGetMenuCollection().UnregisterVisiblePopupMenu(this.name, element.id);
  this.popupCount --;
  var indexPath = this.GetIndexPathById(element.id, true);
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   element.style.height = "";
   scrollHelper.ResetScrolling();
  }
  this.RaiseCloseUp(indexPath);
 },
 DoHidePopupMenuIFrame: function(element){
  if (!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   _aspxSetElementDisplay(iFrame, false);  
 },
 DoHidePopupMenuBorderCorrector: function(element){
  var borderCorrectorElement = element.borderCorrectorElement;
  if(borderCorrectorElement) {
   _aspxSetElementVisibility(borderCorrectorElement, false);
   _aspxSetElementDisplay(borderCorrectorElement, false);
   element.borderCorrectorElement = null;
  }
 },
 SetHoverElement: function(element){
  if(!this.IsStateControllerEnabled()) return;
  this.lockHoverEvents = true;
  aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
  this.lockHoverEvents = false;
 },
 ApplySubMenuItemHoverItem: function(element, hoverItem, hoverElement){
  if(!element.hoverItem && _aspxGetElementDisplay(element)) {
   var newHoverItem = hoverItem.Clone();
   element.hoverItem = newHoverItem;
   element.hoverElement = hoverElement;
   newHoverItem.Apply(hoverElement);
  }
 },
 CancelSubMenuItemHoverItem: function(element){
  if(element.hoverItem) {
   element.hoverItem.Cancel(element.hoverElement);
   element.hoverItem = null;
   element.hoverElement = null;
  }
 },
 ShowSubMenu: function(indexPath){
  var element = this.GetMenuElement(indexPath);
  if(element != null){
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false,  element.id);
   if (!_aspxGetElementDisplay(element))
    this.DoShowPopupMenu(element, __aspxInvalidPosition, __aspxInvalidPosition, indexPath);
  } 
  this.ClearAppearTimer();
 },
 SelectItem: function(indexPath){
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null)
   aspxGetStateController().SelectElementBySrcElement(element);
 },
 DeselectItem: function(indexPath){
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null){
   var hoverItem = null;
   var hoverElement = null;
   var menuElement = this.GetMenuElement(indexPath);
   if (menuElement && menuElement.hoverItem) {
    hoverItem = menuElement.hoverItem;
    hoverElement = menuElement.hoverElement;
    this.CancelSubMenuItemHoverItem(menuElement);
   }
   aspxGetStateController().DeselectElementBySrcElement(element);
   if(menuElement != null && hoverItem != null)
    this.ApplySubMenuItemHoverItem(menuElement, hoverItem, hoverElement);
  }
 },
 InitializeSelectedItem: function(){
  if(!this.allowSelectItem) return;
  this.SelectItem(this.GetSelectedItemIndexPath());
 },
 GetSelectedItemIndexPath: function(){
  var inputElement = this.GetSelectedItemInputElement();
  if(inputElement != null)
   return inputElement.value;
  return ""; 
 },
 SetSelectedItemInternal: function(indexPath, modifyHotTrackSelection){
  if(modifyHotTrackSelection)
   this.SetHoverElement(null);
  var inputElement = this.GetSelectedItemInputElement();
  if(inputElement != null){
   this.DeselectItem(inputElement.value);
   inputElement.value = indexPath;
   var item = this.GetItemByIndexPath(indexPath);
   if(item == null || item.GetEnabled())
    this.SelectItem(inputElement.value);
  }
  if(modifyHotTrackSelection){
   var element = this.GetItemContentElement(indexPath);
   if(element != null) 
    this.SetHoverElement(element);
  }
 },
 InitializeCheckedItems: function(){
  if(!this.allowCheckItems) return;
  var inputElement = this.GetCheckedItemsInputElement();
  if(inputElement != null){
   var indexPathes = inputElement.value.split(";");
   for(var i = 0; i < indexPathes.length; i ++){
    if(indexPathes[i] != ""){
     this.checkedItems.push(indexPathes[i]);
     this.SelectItem(indexPathes[i]);
    }
   }
  }
 },
 ChangeCheckedItem: function(indexPath){
  this.SetHoverElement(null);
  var inputElement = this.GetCheckedItemsInputElement();
  if(inputElement != null){
   var itemsGroup = this.GetItemsGroup(indexPath);
   if(itemsGroup != null){
    if(itemsGroup.length > 1){
     if(!this.IsCheckedItem(indexPath)){
      for(var i = 0; i < itemsGroup.length; i ++){
       if(itemsGroup[i] == indexPath) continue;
       if(this.IsCheckedItem(itemsGroup[i])){
        _aspxArrayRemove(this.checkedItems, itemsGroup[i]);
        this.DeselectItem(itemsGroup[i]);
       }
      }
      this.SelectItem(indexPath);
      this.checkedItems.push(indexPath);
     }
    }
    else{
     if(this.IsCheckedItem(indexPath)){
      _aspxArrayRemove(this.checkedItems, indexPath);
      this.DeselectItem(indexPath);
     }
     else{
      this.SelectItem(indexPath);
      this.checkedItems.push(indexPath);
     }
    }
    this.UpdateCheckedInputElement(inputElement);
   }
  }
  var element = this.GetItemContentElement(indexPath);
  if(element != null) 
   this.SetHoverElement(element);
 },
 GetItemsGroup: function(indexPath){
  for(var i = 0; i < this.itemCheckedGroups.length; i ++){
   if(_aspxArrayIndexOf(this.itemCheckedGroups[i], indexPath) > -1)
    return this.itemCheckedGroups[i];
  }
  return null;
 },
 IsCheckedItem: function(indexPath){
  return _aspxArrayIndexOf(this.checkedItems, indexPath) > -1;
 },
 UpdateCheckedInputElement: function(inputElement){
  var state = "";
  for(var i = 0; i < this.checkedItems.length; i ++){
   state += this.checkedItems[i];
   if(i < this.checkedItems.length - 1)
    state += ";";
  }
  inputElement.value = state;
 },
 GetAnimationVerticalDirection: function(indexPath, popupPosition){
  var verticalDirection = (this.IsRootItem(indexPath) && !this.IsVertical(indexPath)) ? -1 : 0;
  if (popupPosition.isInverted) verticalDirection *= -1;
  return verticalDirection;
 },
 GetAnimationHorizontalDirection: function(indexPath, popupPosition){
  var horizontalDirection = (this.IsRootItem(indexPath) && !this.IsVertical(indexPath)) ? 0 : -1;
  if (popupPosition.isInverted) horizontalDirection *= -1;
  return horizontalDirection;
 },
 StartAnimation: function(animationDivElement, indexPath, horizontalPopupPosition, verticalPopupPosition){
  var element = this.GetMenuMainTable(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  ASPxClientPopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY);
  var verticalDirection = this.GetAnimationVerticalDirection(indexPath, verticalPopupPosition);
  var horizontalDirection = this.GetAnimationHorizontalDirection(indexPath, horizontalPopupPosition);
  var yPos = verticalDirection * element.offsetHeight;
  var xPos = horizontalDirection * element.offsetWidth;
  _aspxSetStyles(element, { left: xPos, top: yPos });
  _aspxSetElementVisibility(animationDivElement, true);
  this.DoShowPopupMenuIFrame(animationDivElement, clientX, clientY, 0, 0, indexPath);
  this.DoShowPopupMenuBorderCorrector(animationDivElement, clientX, clientY, indexPath, 
   horizontalPopupPosition.isInverted, verticalPopupPosition.isInverted);
  ASPxClientPopupUtils.StartSlideAnimation(animationDivElement, element, this.GetMenuIFrameElement(indexPath), this.slideAnimationDuration);
 },
 OnItemClick: function(indexPath, evt){
  var sourceElement = _aspxGetEventSource(evt);
  var clickedLinkElement = _aspxGetParentByTagName(sourceElement, "A");
  var isLinkClicked = (clickedLinkElement != null && clickedLinkElement.href != __aspxAccessibilityEmptyUrl);
  var element = this.GetItemContentElement(indexPath);
  var linkElement = (element != null) ? (element.tagName === "A" ? element : _aspxGetChildByTagName(element, "A", 0)) : null;
  if(linkElement != null && linkElement.href == __aspxAccessibilityEmptyUrl)
   linkElement = null;
  if(this.allowSelectItem)
   this.SetSelectedItemInternal(indexPath, true); 
  if(this.allowCheckItems)
   this.ChangeCheckedItem(indexPath); 
  this.DoItemClick(indexPath, isLinkClicked || (linkElement != null), evt);
  if(!isLinkClicked && linkElement != null && !(__aspxWebKitTouchUI && this.HasChildren(indexPath))) 
   _aspxNavigateByLink(linkElement);
 },
 OnItemDropDownClick: function(indexPath, evt){
  if(this.IsItemEnabled(indexPath))
   this.ShowSubMenu(indexPath);
 },
 AfterItemOverAllowed: function(hoverItem) {
  return hoverItem.name != "" && !this.lockHoverEvents;
 },
 OnAfterItemOver: function(hoverItem, hoverElement){
  if(!this.AfterItemOverAllowed(hoverItem)) return;
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = hoverItem;
   this.savedCallbackHoverElement = hoverElement;
   return;
  }
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  var indexPath = this.GetMenuIndexPathById(hoverItem.name);
  if(indexPath == ""){
   indexPath = this.GetItemIndexPathById(hoverItem.name);
   var canShowSubMenu = true;
   if(this.IsDropDownItem(indexPath)){
    var popOutImageElement = this.GetItemPopOutElement(indexPath);
    if(popOutImageElement != null && popOutImageElement != hoverElement){
     hoverItem.needRefreshBetweenElements = true;
     canShowSubMenu = false;
    }
   }
   if(canShowSubMenu){
    if(hoverItem.enabled && hoverItem.kind == __aspxHoverItemKind){
     this.SetAppearTimer(indexPath);
     this.RaiseItemMouseOver(indexPath);
    }
   }
  }
 },
 OnBeforeItemOver: function(hoverItem, hoverElement){
  if (__aspxNetscapeFamily && _aspxIsExists(hoverElement.offsetParent) && 
    hoverElement.offsetParent.style.borderCollapse == "collapse") {
   hoverElement.offsetParent.style.borderCollapse = "separate";
   hoverElement.offsetParent.style.borderCollapse = "collapse";
  }
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  if(element) this.CancelSubMenuItemHoverItem(element);  
 },
 OnItemOverTimer: function(indexPath){
  var element = this.GetMenuElement(indexPath);
  if(element == null){  
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, "");
  }   
  if(this.IsAppearTimerActive()){
   this.ClearAppearTimer();
   if(this.GetItemContentElement(indexPath) != null || this.GetItemPopOutElement(indexPath) != null){
    this.ShowSubMenu(indexPath);
   }
  }
 },
 OnBeforeItemDisabled: function(disabledItem, disabledElement){
  this.ClearAppearTimer();
  var indexPath = this.GetItemIndexPathById(disabledElement.id);
  if(indexPath != ""){
   var element = this.GetMenuElement(indexPath);
   if(element != null) this.DoHidePopupMenu(null, element);
  }
 },
 OnAfterItemOut: function(hoverItem, hoverElement, newHoverElement){
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
  if(hoverItem.name == "" || this.lockHoverEvents) return;
  if(hoverItem.IsChildElement(newHoverElement)) return;
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  if(element == null || !_aspxGetIsParent(element, newHoverElement)) 
   this.SetDisappearTimer();
  if(element != null) 
   this.ApplySubMenuItemHoverItem(element, hoverItem, hoverElement);
  if(indexPath != "")
   this.RaiseItemMouseOut(indexPath);
 },
 OnItemOutTimer: function(){
  if(this.IsDisappearTimerActive()){
   this.ClearDisappearTimer();
   if(aspxGetMenuCollection().CheckFocusedElement())
    this.SetDisappearTimer();
   else
    this.OnHideByItemOut();
  }
 },
 OnHideByItemOut: function(){
  aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
 },
 OnFocusedItemKeyDown: function(evt, focusedItem, focusedElement){
  var handled = false;
  var indexPath = this.GetItemIndexPathById(focusedItem.name);
  switch(evt.keyCode){
   case ASPxKey.Tab: {
    handled = this.FocusNextTabItem(indexPath, evt.shiftKey);
    break;
   }
   case ASPxKey.Down: {
    if(this.IsVertical(indexPath)){
     this.FocusNextItem(indexPath);
    }
    else{
     this.ShowSubMenu(indexPath);
     this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
    }
    handled = true;
    break;
   }
   case ASPxKey.Up: {
    if(this.IsVertical(indexPath)){
     this.FocusPrevItem(indexPath);
    }
    else{
     this.ShowSubMenu(indexPath);
     this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
    }
    handled = true;
    break;
   }
   case ASPxKey.Left: {
    if(this.IsVertical(indexPath)){
     var parentIndexPath = this.GetParentIndexPath(indexPath);
     if(this.IsVertical(parentIndexPath)){
      this.FocusItemByIndexPath(parentIndexPath);
     }
     else{
      this.FocusPrevItem(parentIndexPath);
     }
    }
    else{
     this.FocusPrevItem(indexPath);
    }
    handled = true;
    break;
   }
   case ASPxKey.Right: {
    if(this.IsVertical(indexPath)){
     if(this.HasChildren(indexPath)){
      this.ShowSubMenu(indexPath);
      this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
     }
     else{
      while(!this.IsRootItem(indexPath))
       indexPath = this.GetParentIndexPath(indexPath);
      this.FocusNextItem(indexPath);
     }
    }
    else{
     this.FocusNextItem(indexPath);
    }
    handled = true;
    break;
   }
   case ASPxKey.Esc: {
    var parentIndexPath = this.GetParentIndexPath(indexPath);
    this.FocusItemByIndexPath(parentIndexPath);
    var element = this.GetMenuElement(parentIndexPath);
    if(element != null) {
     this.DoHidePopupMenu(null, element);
     handled = true;
    }
   }
  }
  if(handled)
   _aspxPreventEventAndBubble(evt);
 },
 FocusItemByIndexPath: function(indexPath){
  var element = this.GetItemElement(indexPath);
  var link = _aspxGetChildByTagName(element, "A", 0);
  if(link != null) _aspxSetFocus(link);
 },
 FocusNextTabItem: function(indexPath, shiftKey){
  if(this.IsRootItem(indexPath)) return false;
  while(true){
   if(this.IsRootItem(indexPath)) {
    if(!shiftKey){
     if(this.GetNextSiblingIndexPath(indexPath) != null){
      this.FocusNextItem(indexPath);
      return true;
     }
    }
    else{
     if(this.GetPrevSiblingIndexPath(indexPath) != null){
      this.FocusPrevItem(indexPath);
      return true;
     }
    }
    break;
   }
   else {
    if(!shiftKey){
     if(this.GetNextSiblingIndexPath(indexPath) == null)
      indexPath = this.GetParentIndexPath(indexPath);
     else{
      this.FocusNextItem(indexPath);
      return true;
     }
    }
    else{
     if(this.GetPrevSiblingIndexPath(indexPath) == null)
      indexPath = this.GetParentIndexPath(indexPath);
     else{
      this.FocusPrevItem(indexPath);
      return true;
     }
    }
   }
  }
  return false;
 },
 FocusNextItem: function(indexPath){
  var newIndexPath = this.GetNextSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetFirstSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   this.FocusItemByIndexPath(newIndexPath);
 },
 FocusPrevItem: function(indexPath){
  var newIndexPath = this.GetPrevSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetLastSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   this.FocusItemByIndexPath(newIndexPath);
 },
 TryFocusItem: function(itemIndex){
  var item = this.GetItem(itemIndex);
  if(item.GetVisible()) {
   this.FocusItemByIndexPath(item.GetIndexPath());
   return true;
  }
  return false;
 },
 Focus: function(){
  if(this.rootItem != null) { 
   for(var i = 0; i < this.GetItemCount(); i++) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.FocusNextItem("-1");
 },
 FocusLastItem: function(){
  if(this.rootItem != null) { 
   for(var i = this.GetItemCount() - 1; i >= 0; i--) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.FocusPrevItem(this.GetItemCount() - 1);
 },
 OnCallback: function(result){
  _aspxInitializeScripts(); 
  this.InitializeScrollableMenus();
  for(var indexPath in result){
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement) {
    if(aspxGetMenuCollection().IsSubMenuVisible(menuElement.id)) {
     this.ShowPopupSubMenuAfterCallback(menuElement, result[indexPath]);
    } else {
     this.SetSubMenuInnerHtml(menuElement, result[indexPath]);
    }
   }
  }
  this.ClearVerticalAlignedElementsCache();
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
  this.InitializeInternal(false);
  if(!this.showSubMenus){
   this.showSubMenus = true;
   if(this.savedCallbackHoverItem != null && this.savedCallbackHoverElement != null)
    this.OnAfterItemOver(this.savedCallbackHoverItem, this.savedCallbackHoverElement);
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
 },
 SetSubMenuInnerHtml: function(menuElement, html) {
  _aspxSetInnerHtml(this.GetMenuMainCell(menuElement), html);
  ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuMenuElement(this, menuElement);
  ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement, true);
 },
 ShowPopupSubMenuAfterCallback: function(element, callbackResult) {
  var indexPath = this.GetIndexPathById(element.id, true);
  var currentX = _aspxPxToInt(element.style.left);
  var currentY = _aspxPxToInt(element.style.top);
  var showedToTheTop = this.ShowedToTheTop(element, indexPath);
  var showedToTheLeft = this.ShowedToTheLeft(element, indexPath);
  _aspxSetStyles(element, {
   left: __aspxInvalidPosition, top: __aspxInvalidPosition
  });
  this.SetSubMenuInnerHtml(element, callbackResult);
  var vertPos = this.GetClientSubMenuPos(element, indexPath, __aspxInvalidPosition, false);
  var clientY = vertPos.position;
  var toTheTop = vertPos.isInverted;
  if(!this.IsVertical(indexPath) && showedToTheTop != toTheTop) {
   clientY = currentY;
   toTheTop = showedToTheTop;
  }
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
   if(yClientCorrection > 0)
    clientY += yClientCorrection;
  }
  _aspxSetStyles(element, {
   left: currentX, top: clientY
  });
  this.DoShowPopupMenuIFrame(element, currentX, clientY, __aspxInvalidDimension, __aspxInvalidDimension, indexPath);
  this.DoShowPopupMenuBorderCorrector(element, currentX, clientY, indexPath, showedToTheLeft, toTheTop);
  aspxGetControlCollection().AdjustControls(element);
 },
 ShowedToTheTop: function(element, indexPath) {
  var currentY = _aspxPxToInt(element.style.top);
  var parentBottomY = this.GetSubMenuYPosition(indexPath);
  return currentY < parentBottomY;
 },
 ShowedToTheLeft: function(element, indexPath) {
  var currentX = _aspxPxToInt(element.style.left);
  var parentX = this.GetSubMenuXPosition(indexPath);
  return currentX < parentX;
 },
 CreateItems: function(itemsProperties){
  var itemType = this.GetClientItemType();
  this.rootItem = new itemType(this, null, 0, "");
  this.rootItem.CreateItems(itemsProperties);
 },
 GetClientItemType: function(){
  return ASPxClientMenuItem;
 },
 GetItemByIndexPath: function(indexPath){
  var item = this.rootItem;
  if(indexPath != "" && item != null){
   var indexes = this.GetItemIndexes(indexPath);
   for(var i = 0; i < indexes.length; i ++)
    item = item.GetItem(indexes[i]);
  }
  return item;
 },
 SetItemChecked: function(indexPath, checked){
  var inputElement = this.GetCheckedItemsInputElement();
  if(inputElement != null){
   var itemsGroup = this.GetItemsGroup(indexPath);
   if(itemsGroup != null){
    if(!checked && this.IsCheckedItem(indexPath)){
     _aspxArrayRemove(this.checkedItems, indexPath);
     this.DeselectItem(indexPath);
    }
    else if(checked && !this.IsCheckedItem(indexPath)){
     if(itemsGroup.length > 1){
      for(var i = 0; i < itemsGroup.length; i ++){
       if(itemsGroup[i] == indexPath) continue;
       if(this.IsCheckedItem(itemsGroup[i])){
        _aspxArrayRemove(this.checkedItems, itemsGroup[i]);
        this.DeselectItem(itemsGroup[i]);
       }
      }
     }
     this.SelectItem(indexPath);
     this.checkedItems.push(indexPath);
    }
    this.UpdateCheckedInputElement(inputElement);
   }
  }
 },
 ChangeItemEnabledAttributes: function(indexPath, enabled){
  ASPxClientMenuLiteRenderHelper.ChangeItemEnabledAttributes(this.GetItemElement(indexPath), enabled);
 },
 IsItemEnabled: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  return (item != null) ? item.GetEnabled() : true;
 },
 SetItemEnabled: function(indexPath, enabled, initialization){
  if(indexPath == "" || !this.GetItemByIndexPath(indexPath).enabled) return;
  if(!enabled){
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.DeselectItem(indexPath);
  }
  if(!initialization || !enabled)
   this.ChangeItemEnabledStateItems(indexPath, enabled);
  this.ChangeItemEnabledAttributes(indexPath, enabled);
  if(enabled){
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.SelectItem(indexPath);
  }
 },
 ChangeItemEnabledStateItems: function(indexPath, enabled){
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemElement(indexPath);
  if(element)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 GetItemImageUrl: function(indexPath){
  var image = this.GetItemImage(indexPath);
  if(image)
   return image.src;
  return "";
 },
 SetItemImageUrl: function(indexPath, url){
  var image = this.GetItemImage(indexPath);
  if(image)
   image.src = url;
 },
 GetItemImage: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null){
   var img = _aspxGetChildByTagName(element, "IMG", 0);
   if(img != null)
    return img;
  }
 },
 GetItemNavigateUrl: function(indexPath){
  var element = this.GetItemContentElement(indexPath);
  if(element != null && element.tagName === "A")
   return element.href;
  if(element != null){
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.href;
  }
  return "";
 },
 SetItemNavigateUrl: function(indexPath, url){
  var element = this.GetItemContentElement(indexPath);
  if(element != null && element.tagName === "A")
   element.href = url;
  else if(element != null){
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    link.href = url;
   link = _aspxGetChildByTagName(element, "A", 1);
   if(link != null)
    link.href = url;
  }
 },
 FindTextNode: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element) {
   var link = _aspxGetChildByTagName(element, "A", 0); 
   if(link)
    return _aspxGetChildTextNode(link, 0);
   var titleSpan = _aspxGetChildByTagName(element, "SPAN", 0); 
   if(titleSpan)
    return _aspxGetChildTextNode(titleSpan, 0);
   for(var i = 0; i < element.childNodes.length; i++) { 
    var child = element.childNodes[i];
    if (child.nodeValue && (_aspxTrim(child.nodeValue) != ""))
     return child;
   }
   return _aspxGetChildTextNode(element, 0);
  }
  return null;
 },
 GetItemText: function(indexPath){
  var textNode = this.FindTextNode(indexPath);
  return textNode
   ? _aspxTrim(textNode.nodeValue) 
   : "";
 },
 SetItemText: function(indexPath, text){
  var textNode = this.FindTextNode(indexPath);
  if(textNode) {
   textNode.nodeValue = text;
   var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
   if(menuElement)
    ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement, true);
   if(this.IsRootItem(indexPath) && !this.isPopupMenu){
    var itemElement = this.GetItemElement(indexPath);
    if(itemElement)
       ASPxClientMenuLiteRenderHelper.CalculateItemMinSize(itemElement);
   }
  }
 },
 SetItemVisible: function(indexPath, visible, initialization){
  if(indexPath == "" || !this.GetItemByIndexPath(indexPath).visible) return;
  if(visible && initialization) return;
  var element = this.GetItemElement(indexPath);
  if(element != null)
   _aspxSetElementDisplay(element, visible);
  this.SetIndentsVisiblility(indexPath);
  this.SetSeparatorsVisiblility(indexPath);
  var parent = this.GetItemByIndexPath(indexPath).parent;
  var parentHasVisibleItems = this.HasVisibleItems(parent);
  if(this.IsRootItem(indexPath) && !this.isPopupMenu)
   this.SetVisible(parentHasVisibleItems);
  else
   this.SetPopOutElementVisible(parent.indexPath, parentHasVisibleItems);
  var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
  if(menuElement)
   ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement, true);
 },
 SetIndentsVisiblility: function(indexPath){
  var parent = this.GetItemByIndexPath(indexPath).parent;
  for(var i = 0; i < parent.GetItemCount(); i++){
   var item = parent.GetItem(i);
   var separatorVisible = item.GetVisible() && this.HasNextVisibleItems(parent, i);
   var element = this.GetItemIndentElement(item.GetIndexPath());
   if(element != null) _aspxSetElementDisplay(element, separatorVisible);
  }
 },
 SetSeparatorsVisiblility: function(indexPath){
  var parent = this.GetItemByIndexPath(indexPath).parent;
  for(var i = 0; i < parent.GetItemCount(); i++){
   var item = parent.GetItem(i);
   var separatorVisible = this.HasPrevVisibleItems(parent, i) && (item.GetVisible() || this.HasNextVisibleItemInGroup(parent, i));
   var element = this.GetItemSeparatorElement(item.GetIndexPath());
   if(element != null) _aspxSetElementDisplay(element, separatorVisible);
   element = this.GetItemSeparatorIndentElement(item.GetIndexPath());
   if(element != null) _aspxSetElementDisplay(element, separatorVisible);
  }
 },
 SetPopOutElementVisible: function(indexPath, visible) {
  var popOutElement = this.GetItemPopOutElement(indexPath);
  if(popOutElement)
   _aspxSetElementDisplay(popOutElement, visible);
 },
 HasNextVisibleItemInGroup: function(parent, index){
  for(var i = index + 1; i < parent.GetItemCount(); i++){
   var item = parent.GetItem(i);
   if(this.IsItemBeginsGroup(item))
    return false;
   if(item.GetVisible())
    return true;
  }
  return false;
 },
 IsItemBeginsGroup: function(item){
  var itemSeparator = this.GetItemSeparatorElement(item.GetIndexPath());
  return itemSeparator && _aspxElementCssClassContains(itemSeparator, ASPxClientMenuCssClasses.Separator);
 },
 HasVisibleItems: function(parent) {
  for(var i = 0; i < parent.GetItemCount(); i++) {
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 HasNextVisibleItems: function(parent, index){
  for(var i = index + 1; i < parent.GetItemCount(); i++){
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 HasPrevVisibleItems: function(parent, index){
  for(var i = index - 1; i >= 0; i--){
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 GetItemIndentElement: function(indexPath){
  return _aspxGetElementById(this.GetItemIndentElementId(indexPath));
 },
 GetItemSeparatorElement: function(indexPath){
  return _aspxGetElementById(this.GetItemSeparatorElementId(indexPath));
 },
 GetItemSeparatorIndentElement: function(indexPath){
  return _aspxGetElementById(this.name + __aspxMIIdSuffix + indexPath + "_ISI");
 },
 RaiseItemClick: function(indexPath, htmlEvent){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
  if(!this.ItemClick.IsEmpty()){
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = new ASPxClientMenuItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 }, 
 RaiseItemMouseOver: function(indexPath){
  if(!this.ItemMouseOver.IsEmpty()){
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOver.FireEvent(this, args);
  }
 },
 RaiseItemMouseOut: function(indexPath){
  if(!this.ItemMouseOut.IsEmpty()){
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOut.FireEvent(this, args);
  }
 },
 RaisePopUp: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.PopUp.IsEmpty()){
   var args = new ASPxClientMenuItemEventArgs(item);
   this.PopUp.FireEvent(this, args);
  }
 },
 RaiseCloseUp: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.CloseUp.IsEmpty()){
   var args = new ASPxClientMenuItemEventArgs(item);
   this.CloseUp.FireEvent(this, args);
  }
 },
 SetEnabled: function(enabled) {
  for(var i = this.GetItemCount() - 1; i >= 0; i--) {
   var item = this.GetItem(i);
   item.SetEnabled(enabled);
  }
 },
 SetVisible: function(visible) {
  if(visible && !this.HasVisibleItems(this))
   return;
  ASPxClientControl.prototype.SetVisible.call(this, visible);
 },
 GetItemCount: function(){
  return (this.rootItem != null) ? this.rootItem.GetItemCount() : 0;
 },
 GetItem: function(index){
  return (this.rootItem != null) ? this.rootItem.GetItem(index) : null;
 },
 GetItemByName: function(name){
  return (this.rootItem != null) ? this.rootItem.GetItemByName(name) : null;
 },
 GetSelectedItem: function(){
  var indexPath = this.GetSelectedItemIndexPath();
  if(indexPath != "")
   return this.GetItemByIndexPath(indexPath);
  return null;
 },
 SetSelectedItem: function(item){
  var indexPath = (item != null) ? item.GetIndexPath() : "";
  this.SetSelectedItemInternal(indexPath, false);
 },
 GetRootItem: function(){
  return this.rootItem;
 }
});
ASPxClientMenuBase.GetMenuCollection = function(){
 return aspxGetMenuCollection();
}
ASPxClientMenuCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.currentShowingPopupMenuName = null;
  this.visibleSubMenusMenuName = "";
  this.visibleSubMenuIds = [ ];
  this.overXPos = -1;
  this.overYPos = -1;
 },
 RegisterVisiblePopupMenu: function(name, id){
  this.visibleSubMenuIds.push(id);
  this.visibleSubMenusMenuName = name;
 },
 UnregisterVisiblePopupMenu: function(name, id){
  _aspxArrayRemove(this.visibleSubMenuIds, id);
  if(this.visibleSubMenuIds.length == 0)
   this.visibleSubMenusMenuName = "";
 },
 IsSubMenuVisible: function(subMenuId) {
  for(var i = 0; i < this.visibleSubMenuIds.length; i++) {
   if(this.visibleSubMenuIds[i] == subMenuId)
    return true;
  }
  return false;
 },
 GetMenu: function(id){
  return this.Get(this.GetMenuName(id));
 },
 GetMenuName: function(id){
  return this.GetMenuNameBySuffixes(id, [__aspxMMIdSuffix, __aspxMIIdSuffix]);
 },
 GetMenuNameBySuffixes: function(id, idSuffixes){
  for(var i = 0; i < idSuffixes.length; i++){
   var pos = id.lastIndexOf(idSuffixes[i]);
   if(pos > -1) 
    return id.substring(0, pos);
  }
  return id;
 },
 ClearCurrentShowingPopupMenuName: function() {
  this.SetCurrentShowingPopupMenuName(null);
 },
 SetCurrentShowingPopupMenuName: function(value) {
  this.currentShowingPopupMenuName = value;
 },
 NowPopupMenuIsShowing: function() {
  return this.currentShowingPopupMenuName != null;
 },
 GetMenuLevel: function(indexPath){
  if(indexPath == "")
   return 0;
  else{
   var indexes = this.GetItemIndexes(indexPath);
   return indexes.length;
  }
 },
 GetMenuLevelById: function(id){ 
  var indexPath = this.GetIndexPathById(id, __aspxMMIdSuffix);
  return this.GetMenuLevel(indexPath);
 },
 GetIndexPathById: function(id, idSuffix){
  var pos = id.lastIndexOf(idSuffix);
  if(pos > -1){
   id = id.substring(pos + idSuffix.length);
   pos = id.lastIndexOf("_");
   if(pos > -1) 
    return id.substring(0, pos);
  }
  return "";
 },
 GetItemIndexPath: function(indexes){
  var indexPath = "";
  for(var i = 0; i < indexes.length; i ++){
   indexPath += indexes[i];
   if(i < indexes.length - 1)
    indexPath += __aspxItemIndexSeparator;
  }
  return indexPath;
 },
 GetItemIndexes: function(indexPath){
  var indexes = indexPath.split(__aspxItemIndexSeparator);
  for(var i = 0; i < indexes.length; i ++)
   indexes[i] = parseInt(indexes[i]);
  return indexes;
 },
 ClearAppearTimer: function(){
  this.appearTimerID = _aspxClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function(){
  this.disappearTimerID = _aspxClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function(){
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function(){
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function(name, indexPath, timeout){
  this.appearTimerID = _aspxSetTimeout("aspxMIMOverTimer(\"" + name + "\", \"" + indexPath + "\")", timeout);
 },
 SetDisappearTimer: function(name, timeout){
  this.disappearTimerID = _aspxSetTimeout("aspxMIMOutTimer(\"" + name + "\")", timeout);
 },
 GetMouseDownMenuLevel: function(evt){
  var srcElement = _aspxGetEventSource(evt);
  if(this.visibleSubMenusMenuName != ""){
   var element = _aspxGetParentById(srcElement, this.visibleSubMenusMenuName);
   if(element != null) return 1;
  }
  for(var i = 0; i < this.visibleSubMenuIds.length; i ++){
   var element = _aspxGetParentById(srcElement, this.visibleSubMenuIds[i]);
   if(element != null)
    return this.GetMenuLevelById(this.visibleSubMenuIds[i]) + 1;
  }
  return -1;
 },
 CheckFocusedElement: function(){
  try {
   if(document.activeElement != null) {
    for(var i = 0; i < this.visibleSubMenuIds.length; i ++) {
     var menuElement = _aspxGetElementById(this.visibleSubMenuIds[i]);
     if(menuElement != null && _aspxGetIsParent(menuElement, document.activeElement)) {
      var tagName = document.activeElement.tagName;
      if (!__aspxIE || tagName == "INPUT" || tagName == "TEXTAREA" || tagName == "SELECT")
       return true;    
     }
    }
   }
  } catch(e) {
  }
  return false;
 },
 DoHidePopupMenus: function(evt, level, name, leavePopups, exceptId){
  for(var i = this.visibleSubMenuIds.length - 1; i >=0 ; i --){
   var menu = this.GetMenu(this.visibleSubMenuIds[i]);
   if(menu != null){
    var menuLevel = this.GetMenuLevelById(this.visibleSubMenuIds[i]);
    if((!leavePopups || menuLevel > 0) && exceptId != this.visibleSubMenuIds[i]){
     if(menuLevel > level || (menu.name != name && name != "")){
      var element = _aspxGetElementById(this.visibleSubMenuIds[i]);
      if(element != null)
       menu.DoHidePopupMenu(evt, element);
     }
    }
   }
  }
 },
 DoShowAtCurrentPos: function(name, indexPath){
  var pc = this.Get(name);
  var element = pc.GetMainElement();
  if(pc != null && !_aspxGetElementDisplay(element))
   pc.DoShowPopupMenu(element, this.overXPos, this.overYPos, indexPath);
 },
 SaveCurrentMouseOverPos: function(evt, popupElement){
  if (!this.NowPopupMenuIsShowing()) return;
  var currentShowingPopupMenu = this.Get(this.currentShowingPopupMenuName);
  if(currentShowingPopupMenu.popupElement == popupElement) 
   if(!currentShowingPopupMenu.IsMenuVisible()) {
    this.overXPos = _aspxGetEventX(evt);
    this.overYPos = _aspxGetEventY(evt);
   }
 },
 OnMouseDown: function(evt){
  var menuLevel = this.GetMouseDownMenuLevel(evt);
  this.DoHidePopupMenus(evt, menuLevel, "", false, "");
 },
 HideAll: function(){
  this.DoHidePopupMenus(null, -1, "", false, "");
 },
 IsAnyMenuVisible: function() {
  return this.visibleSubMenuIds.length != 0;
 }
});
var __aspxMCollection = null;
function aspxGetMenuCollection(){
 if(__aspxMCollection == null)
  __aspxMCollection = new ASPxClientMenuCollection();
 return __aspxMCollection;
}
ASPxClientMenuItem = _aspxCreateClass(null, {
 constructor: function(menu, parent, index, name){
  this.menu = menu;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.indexPath = "";
  if(parent) {
   this.indexPath = parent.indexPath
    ? parent.indexPath + __aspxItemIndexSeparator + this.index.toString()
    : this.index.toString();
  }
  this.enabled = true;
  this.clientEnabled = true;
  this.visible = true;
  this.clientVisible = true;
  this.items = [];
 },
 CreateItems: function(itemsProperties){
  var itemType = this.menu.GetClientItemType();
  for(var i = 0; i < itemsProperties.length; i ++){
   var itemName = itemsProperties[i][0] || "";
   var item = new itemType(this.menu, this, i, itemName);
   if(_aspxIsExists(itemsProperties[i][1]))
    item.enabled = itemsProperties[i][1];
   if(_aspxIsExists(itemsProperties[i][2]))    
    item.clientEnabled = itemsProperties[i][2];
   if(_aspxIsExists(itemsProperties[i][3]))
    item.visible = itemsProperties[i][3];
   if(_aspxIsExists(itemsProperties[i][4]))
    item.clientVisible = itemsProperties[i][4];
   this.items.push(item);
   item.CreateItems(itemsProperties[i][5]);
  }
 },
 GetIndexPath: function(){
  return this.indexPath;
 },
 GetItemCount: function(){
  return this.items.length;
 },
 GetItem: function(index){
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 GetItemByName: function(name){
  for(var i = 0; i < this.items.length; i ++)
   if(this.items[i].name == name) return this.items[i];
  for(var i = 0; i < this.items.length; i ++){
   var item = this.items[i].GetItemByName(name);
   if(item != null) return item;
  }
  return null;
 },
 GetChecked: function(){
  var indexPath = this.GetIndexPath();
  return this.menu.IsCheckedItem(indexPath);
 },
 SetChecked: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemChecked(indexPath, value);
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(value){
  if (this.clientEnabled != value) {
   this.clientEnabled = value;
   this.menu.SetItemEnabled(this.GetIndexPath(), value, false);
  }
 },
 GetImage: function() {
  return this.menu.GetItemImage(this.GetIndexPath());
 },
 GetImageUrl: function(){
  return this.menu.GetItemImageUrl(this.GetIndexPath());
 },
 SetImageUrl: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemImageUrl(indexPath, value);
 },
 GetNavigateUrl: function(){
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemNavigateUrl(indexPath);
 },
 SetNavigateUrl: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemNavigateUrl(indexPath, value);
 },
 GetText: function(){
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemText(indexPath);
 },
 SetText: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemText(indexPath, value);
 },
 GetVisible: function(){
  return this.visible && this.clientVisible;
 },
 SetVisible: function(value){
  if (this.clientVisible != value) {
   this.clientVisible = value;
   this.menu.SetItemVisible(this.GetIndexPath(), value, false);
  }
 },
 InitializeEnabledAndVisible: function(recursive){
  this.menu.SetItemEnabled(this.GetIndexPath(), this.clientEnabled, true);
  this.menu.SetItemVisible(this.GetIndexPath(), this.clientVisible, true);
  if(recursive) {
   for(var i = 0; i < this.items.length; i++)
    this.items[i].InitializeEnabledAndVisible(recursive);
  }
 }
});
ASPxClientMenu = _aspxCreateClass(ASPxClientMenuBase, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.isVertical = false;
  this.firstSubMenuDirection = "Auto";
 },
 IsVertical: function(indexPath){
  return this.isVertical || (indexPath.indexOf(__aspxItemIndexSeparator) > -1);
 },
 IsCorrectionDisableMethodRequired: function(indexPath){
  return (indexPath.indexOf("i") == -1) && (this.firstSubMenuDirection == "RightOrBottom" || this.firstSubMenuDirection == "LeftOrTop");
 },
 AdjustControlCore: function() {
  this.CorrectVerticalAlignment(_aspxClearHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(_aspxClearVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
  ASPxClientMenuLiteRenderHelper.CalculateMenuElements(this, this.GetMainElement());
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
  this.SetLightweightMenuHeightInIE7IfDisplayed(true);
 },
 OnBrowserWindowResize: function(evt) {
  this.AdjustControl();
 },
 GetCorrectionDisabledResult: function(x, toLeftX){
  switch(this.firstSubMenuDirection){
   case "RightOrBottom":{
    this.popupToLeft = false;
    return x;
   }
   case "LeftOrTop":{
    this.popupToLeft = true;
    return toLeftX;
   }
  }
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight){
  if (this.firstSubMenuDirection == "Auto")
   return ASPxClientMenuBase.prototype.IsHorizontalSubmenuNeedInversion.call(this, subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight);
  return this.firstSubMenuDirection == "LeftOrTop"
 },
 SetLightweightMenuHeightInIE7IfDisplayed: function(force) { 
  if(!__aspxIE || __aspxBrowserMajorVersion != 7)
   return;
  if(force)
   this.lightweightMenuHeightIE7Set = false;
  if(this.lightweightMenuHeightIE7Set || !this.IsDisplayed()) 
   return;
  var mainElement = this.GetMainElement();
  var commonContainer = mainElement.parentNode;
  var _this = this;
  window.setTimeout(function() {
   if(mainElement.offsetHeight != 0) 
    commonContainer.style.height = mainElement.offsetHeight + "px";
   else
    _this.lightweightMenuHeightIE7Set = false;
  }, 0);
  this.lightweightMenuHeightIE7Set = true;
 }
});
ASPxClientMenu.Cast = ASPxClientControl.Cast;
ASPxClientMenuItemEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
ASPxClientMenuItemMouseEventArgs = _aspxCreateClass(ASPxClientMenuItemEventArgs, {
 constructor: function(item, htmlElement) {
  this.constructor.prototype.constructor.call(this, item);
  this.htmlElement = htmlElement;
 }
});
ASPxClientMenuItemClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, item, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;  
 }
});
function aspxMIClick(evt, name, indexPath){
 if(ASPxClientTouchUI.isMouseEventFromScrolling) return;
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemClick(indexPath, evt);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
function aspxMIDDClick(evt, name, indexPath){
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemDropDownClick(indexPath, evt);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
function aspxAMIMOver(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOver(args.item, args.element);
}
function aspxBMIMOver(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnBeforeItemOver(args.item, args.element);
}
function aspxMIMOverTimer(name, indexPath){
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemOverTimer(indexPath);
}
function aspxBIDisabled(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnBeforeItemDisabled(args.item, args.element);
}
function aspxFIKeyDown(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnFocusedItemKeyDown(args.htmlEvent, args.item, args.element);
}
function aspxAMIMOut(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOut(args.item, args.element, args.toElement);
}
function aspxMIMOutTimer(name){
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemOutTimer();
}
function aspxMContextMenu(evt){
 return _aspxCancelBubble(evt);
}
function aspxMSBOver(source, args) {
 var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id)
 if(menu != null) menu.ClearDisappearTimer();
}
function aspxMSBOut(source, args) {
 var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id)
 if(menu != null) menu.SetDisappearTimer();
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxMenuDocumentMouseDown);
function aspxMenuDocumentMouseDown(evt){
 return aspxGetMenuCollection().OnMouseDown(evt); 
}
(function(){
 aspxAddAfterSetFocusedState(aspxAMIMOver);
 aspxAddAfterClearFocusedState(aspxAMIMOut);
 aspxAddAfterSetHoverState(aspxAMIMOver);
 aspxAddAfterClearHoverState(aspxAMIMOut);
 aspxAddBeforeSetFocusedState(aspxBMIMOver);
 aspxAddBeforeSetHoverState(aspxBMIMOver);
 aspxAddBeforeDisabled(aspxBIDisabled);
 aspxAddFocusedItemKeyDown(aspxFIKeyDown);
 aspxAddAfterSetHoverState(aspxMSBOver);
 aspxAddAfterSetPressedState(aspxMSBOver);
 aspxAddAfterClearHoverState(aspxMSBOut);
 aspxAddAfterSetPressedState(function(source, args) {
  var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StartScrolling(args.element.id, 1, 4);
 });
 aspxAddAfterClearPressedState(function(source, args) {
  var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StopScrolling(args.element.id);
 });
 if(!__aspxTouchUI){
  aspxAddAfterSetHoverState(function(source, args) {
   var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
   if(menu) menu.StartScrolling(args.element.id, 15, 1);
  });
  aspxAddAfterClearHoverState(function(source, args) {
   var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
   if(menu) menu.StopScrolling(args.element.id);
  }); 
 }
})();

var __aspxMVCQueryParamName = "DXMVC";
MVCxClientUploadControl = _aspxCreateClass(ASPxClientUploadControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
 },
 InlineInitialize: function() {
  var element = this.GetMainElement();
  if(element)
   element.appendChild(_aspxCreateHiddenField(this.name + "_DXMVCUploadControl"));
  ASPxClientUploadControl.prototype.InlineInitialize.call(this);
 },
 GetUploadFormAction: function(form){
  if(this.callbackUrl != "")
   form.action = this.callbackUrl;
  var action = ASPxClientUploadControl.prototype.GetUploadFormAction.call(this, form);
  return this.AddQueryParamToUrl(action, __aspxMVCQueryParamName, "true");
 }
});
(function () {
 var ASPxClientProgressBarIDSuffix = {
  DivIndicator: "_DI",
  ValueIndicatorCell: "_VIC"
 };
 var ASPxClientProgressBarBase = _aspxCreateClass(ASPxClientControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.displayMode = ASPxClientProgressBarBase.DisplayMode.Percentage;
   this.displayFormat = null;
   this.minimum = 0;
   this.maximum = 0;
   this.position = 0;
   this.onePercentValue = 0;
   this.hasOwner = true;
   this.customDisplayFormat = "";
  },
  InlineInitialize: function (calledByOwner) {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   if (calledByOwner || !this.hasOwner) {
    this.OnePercentValueUpdate();
    if (this.IsIndicatorDivWidthCorrectionRequired())
     this.SetCalculatedDivIndicatorWidth();
   }
  },
  OnePercentValueUpdate: function () {
   this.onePercentValue = (this.maximum - this.minimum) / 100;
  },
  GetMainCell: function () {
   if (!this.mainCell)
    this.mainCell = _aspxGetChildByTagName(this.GetMainElement(), "TD", 0);
   return this.mainCell;
  },
  GetIndicatorDiv: function () {
   if (!this.divIndicator)
    this.divIndicator = _aspxGetElementById(this.name + ASPxClientProgressBarIDSuffix.DivIndicator);
   return this.divIndicator;
  },
  GetValueIndicatorTable: function () {
   if (!this.valueIndicatorTable)
    this.valueIndicatorTable = _aspxGetParentByTagName(this.GetValueIndicatorCell(), "TABLE");
   return this.valueIndicatorTable;
  },
  GetValueIndicatorCell: function () {
   if (!this.valueIndicatorCell)
    this.valueIndicatorCell = _aspxGetElementById(this.name + ASPxClientProgressBarIDSuffix.ValueIndicatorCell);
   return this.valueIndicatorCell;
  },
  AdjustControlCore: function () {
   ASPxClientControl.prototype.AdjustControlCore.call(this);
   this.UpdateIndicators();
   this.CorrectIndicatorHeight();
  },
  CorrectIndicatorHeight: function () {
   var mainCell = this.GetMainCell();
   var valueIndicatorTable = this.GetValueIndicatorTable();
   var height = _aspxGetClearClientHeight(mainCell);
   this.SetOffsetHeight(this.GetIndicatorDiv(), height);
   if (valueIndicatorTable) {
    this.SetOffsetHeight(valueIndicatorTable, height);
    valueIndicatorTable.style.marginTop = -height + "px";
   }
   if (__aspxIE && __aspxBrowserMajorVersion == 8) {
    var valueIndicatorCell = this.GetValueIndicatorCell();
    if (valueIndicatorCell)
     valueIndicatorCell.innerHTML = valueIndicatorCell.innerHTML;
   }
  },
  ResetIndicatorHeight: function () {
   _aspxSetOffsetHeight(this.GetIndicatorDiv(), 1);
   var valueIndicatorTable = this.GetValueIndicatorTable();
   if (valueIndicatorTable)
    _aspxSetOffsetHeight(valueIndicatorTable, 1);
  },
  SetOffsetHeight: function (element, heightValue) {
   var currentStyle = _aspxGetCurrentStyle(element);
   heightValue -= _aspxPxToInt(currentStyle.paddingTop) + _aspxPxToInt(currentStyle.paddingBottom) +
    _aspxPxToInt(currentStyle.borderTopWidth) + _aspxPxToInt(currentStyle.borderBottomWidth);
   if (heightValue > -1)
    element.style.height = heightValue + "px";
  },
  GetCalculatedIndicatorDivWidth: function (percent) {
   var progressWidth = _aspxGetClearClientWidth(this.GetMainCell());
   var indicatorDivStyle = _aspxGetCurrentStyle(this.GetIndicatorDiv());
   progressWidth -= _aspxPxToInt(indicatorDivStyle.borderLeftWidth) + _aspxPxToInt(indicatorDivStyle.borderRightWidth);
   return progressWidth / 100 * percent;
  },
  UpdateIndicators: function () {
   if (this.IsIndicatorDivWidthCorrectionRequired()) {
    this.SetCalculatedDivIndicatorWidth();
   } else {
    var percent = this.GetPercent();
    this.GetIndicatorDiv().style.width = percent < 0 ? 0 : percent + "%";
   }
   var cell = this.GetValueIndicatorCell();
   if (cell) {
    cell.innerHTML = this.GetIndicatorText();
   }
  },
  GetIndicatorText: function () {
   if (this.displayMode == ASPxClientProgressBarBase.DisplayMode.Custom)
    return this.GetCustomText();
   var indicatorValue = this.displayMode == ASPxClientProgressBarBase.DisplayMode.Position ? this.position : this.GetPercent();
   if (this.displayFormat != null)
    indicatorValue = ASPxFormatter.Format(this.displayFormat, indicatorValue);
   if (this.displayMode == ASPxClientProgressBarBase.DisplayMode.Position)
    return indicatorValue;
   if (this.rtl && __aspxCultureInfo.percentPattern == 0)
    return indicatorValue + " %";
   return indicatorValue + "%";
  },
  SetCalculatedDivIndicatorWidth: function () {
   var indicatorWidth = this.GetCalculatedIndicatorDivWidth(this.GetPercent());
   if (indicatorWidth >= 0)
    this.GetIndicatorDiv().style.width = indicatorWidth + "px";
  },
  IsIndicatorDivWidthCorrectionRequired: function () {
   if (!_aspxIsExistsElement(this.GetIndicatorDiv()))
    return false;
   var indicatorDivStyle = _aspxGetCurrentStyle(this.GetIndicatorDiv());
   return _aspxPxToInt(indicatorDivStyle.borderLeftWidth) > 0 || _aspxPxToInt(indicatorDivStyle.borderRightWidth) > 0;
  },
  SetCustomDisplayFormat: function (value) {
   this.customDisplayFormat = value;
   this.UpdateIndicators();
  },
  GetDisplayText: function () {
   return this.GetIndicatorText();
  },
  GetCustomText: function () {
   if (this.displayFormat != null) {
    return this.customDisplayFormat
     .replace("{0}", ASPxFormatter.Format(this.displayFormat, this.position))
     .replace("{1}", ASPxFormatter.Format(this.displayFormat, this.minimum))
     .replace("{2}", ASPxFormatter.Format(this.displayFormat, this.maximum));
   }
   else {
    return this.customDisplayFormat
     .replace("{0}", this.position)
     .replace("{1}", this.minimum)
     .replace("{2}", this.maximum);
   }
  },
  SetPosition: function (value) {
   this.position = Math.min(Math.max(value, this.minimum), this.maximum);
   this.UpdateIndicators();
  },
  SetMinMaxValues: function (minValue, maxValue) {
   var preparedMinValue = parseInt(minValue.toString(), 10);
   var preparedMaxValue = parseInt(maxValue.toString(), 10);
   if (isNaN(preparedMinValue))
    preparedMinValue = this.minimum;
   if (isNaN(preparedMaxValue))
    preparedMaxValue = this.maximum;
   if (preparedMaxValue > preparedMinValue) {
    this.maximum = preparedMaxValue;
    this.minimum = preparedMinValue;
    this.OnePercentValueUpdate();
    this.SetPosition(this.position);
   }
  },
  GetPosition: function () {
   return this.position;
  },
  GetPercent: function () {
   if (this.minimum === this.maximum)
    return 0;
   return (this.position - this.minimum) / this.onePercentValue;
  }
 });
 ASPxClientProgressBarBase.DisplayMode = {
  Percentage: 0,
  Position: 1,
  Custom: 2
 }
 window.ASPxClientProgressBarBase = ASPxClientProgressBarBase;
})();
ASPxDateFormatter = _aspxCreateClass(null, {
 constructor: function() {
  this.date = new Date(2000, 0, 1);
  this.mask;
  this.specifiers = {};     
  this.spPositions = [];    
  this.knownSpecifiers = ["d", "M", "y", "H", "h", "m", "s", "f", "F", "g", "t"];
  this.savedYear = -1;
  this.isYearParsed = false;
  this.parsedMonth = -1;
  this.replacers = {
   "d": this.ReplaceDay,
   "M": this.ReplaceMonth,
   "y": this.ReplaceYear,
   "H": this.ReplaceHours23,
   "h": this.ReplaceHours12,
   "m": this.ReplaceMinutes,
   "s": this.ReplaceSeconds,
   "F": this.ReplaceMsTrimmed,
   "f": this.ReplaceMs,
   "g": this.ReplaceEra,
   "t": this.ReplaceAmPm
  };
  this.parsers = {
   "d": this.ParseDay,
   "M": this.ParseMonth,
   "y": this.ParseYear,
   "H": this.ParseHours,
   "h": this.ParseHours,
   "m": this.ParseMinutes,
   "s": this.ParseSeconds,
   "F": this.ParseMs,
   "f": this.ParseMs,
   "g": this.ParseEra,
   "t": this.ParseAmPm
  };
 },
 Format: function(date) {
  this.date = date;
  var sp;
  var pos;
  var replacerKey;
  var result = this.mask;
  for(var i = 0; i < this.spPositions.length; i++) {
   pos = this.spPositions[i];
   sp = this.specifiers[pos];
   replacerKey = sp.substr(0, 1);
   if(this.replacers[replacerKey]) {
    result = result.substr(0, pos) + this.replacers[replacerKey].call(this, sp.length) + result.substr(pos + sp.length);
   }
  }
  return result;
 }, 
 Parse: function(str) {
  var now = new Date();  
  this.savedYear = now.getFullYear();
  this.isYearParsed = false;
  this.parsedMonth = -1;
  this.date = new Date(2000, 0, now.getDate());    
  this.strToParse = str;
  this.catchNumbers(str);  
  var parserKey;
  var sp;
  var pos;
  var parseResult;
  var error = false;
  this.hasAmPm = false;
  for(var i = 0; i < this.spPositions.length; i++) {
   pos = this.spPositions[i];
   sp = this.specifiers[pos];
   parserKey = sp.substr(0, 1);
   if(this.parsers[parserKey]) {
    parseResult = this.parsers[parserKey].call(this, sp.length);
    if(!parseResult) {
     error = true;
     break;
    }
   }
  }
  if(error)
   return false;
  if(this.hasAmPm) {
   if(!this.fixHours())
    return false;
  }
  if(!this.isYearParsed)
   this.date.setYear(this.savedYear);
  if(this.parsedMonth < 0)
   this.parsedMonth = now.getMonth();   
  this.ApplyMonth();
  return this.date;  
 },
 ApplyMonth: function() {
  var trial;
  var day = this.date.getDate();
  while(true) {
   trial = new Date();
   trial.setTime(this.date.getTime());   
   trial.setMonth(this.parsedMonth);
   if(trial.getMonth() == this.parsedMonth)
    break;
   --day;
   this.date.setDate(day);
  }
  _aspxFixTimezoneGap(this.date, trial);
  this.date = trial;
 },
 SetFormatString: function(mask) {
  if(mask.length == 2 && mask.charAt(0) == "%")
   mask = mask.charAt(1);
  this.specifiers = {}; 
  this.spPositions = [];
  this.mask = "";
  var subt = 0;
  var pos = 0;
  var startPos = 0;
  var ch;
  var prevCh = "";
  var skip = false;
  var backslash = false;
  var sp = "";    
  while(true) {
   ch = mask.charAt(pos);
   if(ch == "") {
    if(sp.length > 0)
     this.RegisterSpecifier(startPos, sp);
    break;
   }
   if(ch == "\\" && !backslash) {
    backslash = true;
    subt++;
   } else {
    if(!backslash && (ch == "'" || ch == '"')) {
     skip = !skip;
     subt++;
    } else {     
     if(!skip) {
      if(ch == "/")
       ch = __aspxCultureInfo.ds;       
      else if(ch == ":")
       ch = __aspxCultureInfo.ts;
      else if(this.IsKnownSpecifier(ch)) {
       if(prevCh.length == 0)
        prevCh = ch;
       if(ch == prevCh)
        sp += ch;
       else {
        if(sp.length > 0)
         this.RegisterSpecifier(startPos, sp);
        sp = ch;
        startPos = pos - subt;
       }
      }
     }     
     this.mask += ch;
    }      
    backslash = false;
   }            
   prevCh = ch;
   pos++;
  }
  this.spPositions.reverse();
 },
 RegisterSpecifier: function(pos, sp) {
  this.spPositions.push(pos);
  this.specifiers[pos] = sp; 
 },
 ReplaceDay: function(length) {
  if(length < 3) {
   var value = this.date.getDate().toString();
   return length == 2 ? this.padLeft(value, 2) : value;  
  } else if(length == 3) {
   return __aspxCultureInfo.abbrDayNames[this.date.getDay()];
  } else {
   return __aspxCultureInfo.dayNames[this.date.getDay()];
  }
 }, 
 ReplaceMonth: function(length) {
  var value = 1 + this.date.getMonth();
  switch(length) {
   case 1:
    return value.toString();
   case 2:
    return this.padLeft(value.toString(), 2);
   case 3:
    return __aspxCultureInfo.abbrMonthNames[value - 1];
   default:
    for(var i in this.specifiers) {
     var spec = this.specifiers[i];
     if(spec == "d" || spec == "dd")
      return __aspxCultureInfo.genMonthNames[value - 1];
  }
    return __aspxCultureInfo.monthNames[value - 1];
  }
 },
 ReplaceYear: function(length) {
  var value = this.date.getFullYear();
  if(length <= 2)
   value = value % 100;
  return this.padLeft(value.toString(), length);
 },
 ReplaceHours23: function(length) {
  var value = this.date.getHours().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceHours12: function(length) {
  var value = this.date.getHours() % 12;
  if(value == 0)
   value = 12;
  value = value.toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceMinutes: function(length) {
  var value = this.date.getMinutes().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceSeconds: function(length) {
  var value = this.date.getSeconds().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceMsTrimmed: function(length) {   
  return this.formatMs(length, true);
 },
 ReplaceMs: function(length) { 
  return this.formatMs(length, false);
 },
 ReplaceEra: function(length) {
  return "A.D.";
 },
 ReplaceAmPm: function(length) {
  var value = this.date.getHours() < 12 ? __aspxCultureInfo.am : __aspxCultureInfo.pm;
  return length < 2 ? value.charAt(0) : value;
 },
 catchNumbers: function(str) {
  this.parseNumbers = [];  
  var regex = /\d+/g;  
  var match;
  for(;;) {
   match = regex.exec(str);
   if(!match)
    break;
   this.parseNumbers.push(this.parseDecInt(match[0]));
  }  
  var spCount = 0;
  var now = new Date();
  for(var i in this.specifiers) {
   var sp = this.specifiers[i];
   if(sp.constructor != String || !this.IsNumericSpecifier(sp)) continue;
   spCount++;
   if(this.parseNumbers.length < spCount) {    
    var defaultValue = 0;
    if(sp.charAt(0) == "y") defaultValue = now.getFullYear(); 
    this.parseNumbers.push(defaultValue);
   }
  }
  var excess = this.parseNumbers.length - spCount;
  if(excess > 0)
   this.parseNumbers.splice(spCount, excess);  
  this.currentParseNumber = this.parseNumbers.length - 1;
 },
 popParseNumber: function() {
  return this.parseNumbers[this.currentParseNumber--];
 },
 findAbbrMonth: function() {
  return this.findMonthCore(__aspxCultureInfo.abbrMonthNames);
 },
 findFullMonth: function() {
  return this.findMonthCore(__aspxCultureInfo.genMonthNames);
 }, 
 findMonthCore: function(monthNames) {
  var inputLower = this.strToParse.toLowerCase();
  for(var i = 0; i < monthNames.length; i++) {
   var monthName = monthNames[i].toLowerCase();
   if(monthName.length > 0 &&  inputLower.indexOf(monthName) > -1) {
    var empty = "";
    for(var j = 0; j < monthName.length; j++) empty += " ";
    this.strToParse = this.strToParse.replace(new RegExp(monthName, "gi"), empty);
    return 1 + parseInt(i);
   }
  }
  return false;
 },
 ParseDay: function(length) {
  if(length < 3) {
   var value = this.popParseNumber();
   if(value < 1 || value > 31)
    return false;
   this.date.setDate(value);
  }
  return true;
 },
 ParseMonth: function(length) {
  var value;
  switch(length){
   case 1:
   case 2:
    value = this.popParseNumber();
    break; 
   case 3:
    value = this.findAbbrMonth();
    break;
   default:
    value = this.findFullMonth();
    break;
  }
  if(value < 1 || value > 12)
   return false;
  this.parsedMonth = value - 1;
  return true;
 }, 
 ParseYear: function(length) {  
  var value = this.popParseNumber();
  if(value > 9999)
   return false;
  if(value < 100)
   value = _aspxExpandTwoDigitYear(value);
  this.date.setFullYear(value);
  this.isYearParsed = true;
  return true;
 },
 ParseHours: function(length) {
  var value = this.popParseNumber();
  if(value > 23)
   return false;
  this.date.setHours(value);
  return true;
 },
 ParseMinutes: function(length) {
  var value = this.parseMinSecCore();
  if(value == -1)
   return false;
  this.date.setMinutes(value);
  return true;
 },
 ParseSeconds: function(length) {
  var value = this.parseMinSecCore();
  if(value == -1)
   return false;
  this.date.setSeconds(value);
  return true;
 },
 ParseMs: function(length) {
  if(length > 3)
   length = 3;
  var thr = 1;
  for(var i = 0; i < length; i++)
   thr *= 10;
  thr -= 1;
  var value = this.popParseNumber();
  while(value > thr)
   value /= 10;
  this.date.setMilliseconds(Math.round(value));
  return true;
 },
 ParseEra: function(length) {
  return true;
 },
 ParseAmPm: function(length) {
  this.hasAmPm = __aspxCultureInfo.am.length > 0 && __aspxCultureInfo.pm.length > 0;
  return true;
 },
 parseDecInt: function(str) {
  return parseInt(str, 10);
 },
 padLeft: function(str, length) {
  while(str.length < length)
   str = "0" + str;
  return str;
 },
 formatMs: function(length, trim) {
  var value = Math.floor(this.date.getMilliseconds() * Math.pow(10, length - 3));
  value = this.padLeft(value.toString(), length);    
  if(trim) {
   var pos = value.length - 1;
   var req = false;
   while(value.charAt(pos) == "0") {
    req = true;
    pos--;
   }
   if(req)
    value = value.substring(0, pos + 1);   
  }
  return value;
 },
 parseMinSecCore: function() {
  var value = this.popParseNumber();
  return value > 59 ? -1 : value;
 },
 fixHours: function() {
  var state = this.getAmPmState(this.strToParse);
  if(!state) return true;
  var h = this.date.getHours();
  switch(state) {
   case "P":
    if(h > 12) return false;
    if(h < 12)
     this.date.setHours(12 + h);
    break;
   case "A":
    if(h == 12)
     this.date.setHours(0);
  }
  return true;
 },
 getAmPmState: function(str, skipCorrection) {
  var am = __aspxCultureInfo.am.charAt(0).toLowerCase();
  var pm = __aspxCultureInfo.pm.charAt(0).toLowerCase();
  var amMatches = new RegExp(am, "gi").exec(str);
  var pmMatches = new RegExp(pm, "gi").exec(str);
  var amCount = amMatches ? amMatches.length : 0;
  var pmCount = pmMatches ? pmMatches.length : 0;
  var hasAm = amCount > 0;
  var hasPm = pmCount > 0;
  if(hasAm ^ hasPm && amCount < 2 && pmCount < 2)
   return hasAm ? "A" : "P";
  if(!skipCorrection) {
   str = str.replace(new RegExp(this.getDayMonthNameReplacePattern(), "gi"), "");
   return this.getAmPmState(str, true);
  }
  return null;
 },
 getDayMonthNameReplacePattern: function() {
  if(!this.dayMonthNameReplacePattern)
   return this.createDayMonthNameReplacePattern();
  return this.dayMonthNameReplacePattern;
 },
 createDayMonthNameReplacePattern: function() {
  var parts = [ ] ;
  parts.push("(?:");
  parts.push(this.createReplacePattern(__aspxCultureInfo.monthNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.genMonthNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.abbrMonthNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.abbrDayNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.dayNames));
  parts.push(")");
  return parts.join("");
 },
 createReplacePattern: function(names) {
  return names && names.length > 0 ? "\\b" + names.join("\\b|\\b") + "\\b" : "";
 },
 IsNumericSpecifier: function(sp) {
  var ch = sp.charAt(0);
  if(ch == "g" || ch == "t" || ((ch == "M" || ch == "d") && sp.length > 2))
   return false;
  return true;
 },
 IsKnownSpecifier: function(sp) {
  if(sp.length > 1)
   sp = sp.charAt(0);
  for(var i = 0; i < this.knownSpecifiers.length; i++) {
   if(this.knownSpecifiers[i] == sp)
    return true;
  }
  return false;
 }
});
ASPxDateFormatter.Create = function(format) {
 var instance = new ASPxDateFormatter();
 instance.SetFormatString(format);
 return instance;
};
ASPxDateFormatter.ExpandPredefinedFormat = function(format) {
 switch(format) {
  case "d":
   return __aspxCultureInfo.shortDate;
  case "D":
   return __aspxCultureInfo.longDate;
  case "t":
   return __aspxCultureInfo.shortTime;
  case "T":
   return __aspxCultureInfo.longTime;
  case "g":
   return __aspxCultureInfo.shortDate + " " + __aspxCultureInfo.shortTime;   
  case "f":
   return __aspxCultureInfo.longDate + " " + __aspxCultureInfo.shortTime;
  case "G":
   return __aspxCultureInfo.shortDate + " " + __aspxCultureInfo.longTime;
  case "F":
  case "U":
   return __aspxCultureInfo.longDate + " " + __aspxCultureInfo.longTime;   
  case "M":
  case "m":
   return __aspxCultureInfo.monthDay;
  case "Y":
  case "y":
   return __aspxCultureInfo.yearMonth;   
  case "O":
  case "o":
   return "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffff";
  case "R":
  case "r":
   return "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
  case "s":
   return "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
  case "u":
    return "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
 }
 return format;
};
ASPxFormatter = {
 Format: function() {
  if(arguments.length < 1) 
   return "";
  var format = arguments[0];
  if(format == null)
   return "";
  var args;
  if(arguments.length > 1 && arguments[1] != null && arguments[1].constructor == Array) {
   args = arguments[1];
  } else {
   args = [ ];
   for(var i = 1; i < arguments.length; i++)
    args.push(arguments[i]);
  }
  var bag = [ ];
  var pos = 0;
  var savedPos = 0;  
  while(pos < format.length) {
   var ch = format.charAt(pos);
   pos++;
   if(ch == '{') {
    bag.push(format.substr(savedPos, pos - savedPos - 1));    
    if(format.charAt(pos) == "{") {
     savedPos = pos;
     pos++;
     continue;
    }
    var spec = this.ParseSpec(format, pos);
    var pos = spec.pos;
    var arg = args[spec.index];
    var argString;
    if(arg == null) {
     argString = "";
    } else if(typeof arg == "number") {
     argString = ASPxNumberFormatter.Format(spec.format, arg);
    } else if(arg.constructor == Date) {     
     if(spec.format != this.activeDateFormat) {
      this.activeDateFormat = spec.format;
      if(spec.format == "")
       spec.format = "G";      
      if(spec.format.length == 1)
       spec.format = ASPxDateFormatter.ExpandPredefinedFormat(spec.format);
      this.GetDateFormatter().SetFormatString(spec.format);
     }
     if(this.activeDateFormat == "U")
      arg = _aspxToUtcTime(arg);
     argString = this.GetDateFormatter().Format(arg);
    } else {
     argString = String(arg);     
     if(spec.format != "" && argString.length > 0) {
      var num = Number(argString.replace(",", "."));
      if(!isNaN(num))
       argString = ASPxNumberFormatter.Format(spec.format, num);
     }
    }
    var padLen = spec.width - argString.length;
    if(padLen > 0) {
     if(spec.left)
      bag.push(argString);
     for(var i = 0; i < padLen; i++)
      bag.push(" ");
     if(!spec.left)
      bag.push(argString);
    } else {
     bag.push(argString);
    }
    savedPos = pos;
   }
   else if(ch == "}" && pos < format.length && format.charAt(pos) == "}") {
    bag.push(format.substr(savedPos, pos - savedPos - 1));
    savedPos = pos;
    pos++;
   }
   else if (ch == "}") {
    return "";
   }
  }
  if(savedPos < format.length)
   bag.push(format.substr(savedPos));   
  return bag.join("");
 },
 ParseSpec: function(format, pos) {
  var result = {
   index: -1,   
   left: false,
   width: 0,
   format: "",
   pos: 0
  };
  var savedPos, ch;
  savedPos = pos;
  while(true) {   
   ch = format.charAt(pos);
   if(ch < "0" || ch > "9")
    break;
   pos++;
  }  
  if(pos > savedPos)
   result.index = Number(format.substr(savedPos, pos - savedPos));  
  if(format.charAt(pos) == ",") {
   pos++;
   while(true) {
    ch = format.charAt(pos);
    if(ch != " " && ch != "\t")
     break;
    pos++;
   }
   result.left = format.charAt(pos) == "-";
   if(result.left)
    pos++;   
   savedPos = pos;
   while(true) {
    ch = format.charAt(pos);
    if(ch < "0" || ch > "9")
     break;
    pos++;
   }
   if(pos > savedPos)
    result.width = Number(format.substr(savedPos, pos - savedPos));
  }
  if(format.charAt(pos) == ":") {
   pos++;
   savedPos = pos;
   while(format.charAt(pos) != "}")
    pos++;
   result.format = format.substr(savedPos, pos - savedPos);
  }
  pos++;
  result.pos = pos;
  return result;
 },
 activeDateFormat: null,
 GetDateFormatter: function() {
  if(!this.__dateFormatter)
   this.__dateFormatter = new ASPxDateFormatter();
  return this.__dateFormatter;
 }
};
ASPxNumberFormatter = {
 Format: function(format, value) {
  if(isNaN(value))
   return __aspxCultureInfo.numNan;
  if(!isFinite(value)) {
   return value > 0 
    ? __aspxCultureInfo.numPosInf 
    : __aspxCultureInfo.numNegInf;
  }
  this.FillFormatInfo(format);
  if(this.spec == "X")
   return this.FormatHex(value);
  this.FillDigitInfo(value);  
  switch(this.spec) {
   case "C":
    return this.FormatCurrency();
   case "D":
    return this.FormatDecimal();
   case "E":
    return this.FormatExp();
   case "F":
    return this.FormatFixed();
   case "G":   
    return this.FormatGeneral();
   case "N":
    return this.FormatNumber();
   case "P":
    return this.FormatPercent();
   default:
    if(this.custom)
     return this.FormatCustom(format);
    return "?";
  }
 },
 positive: true,
 digits: null,
 pointPos: 0, 
 spec: "",
 prec: -1,  
 upper: true,
 custom: false,
 FormatCurrency: function() {  
  if(this.prec < 0)
   this.prec = __aspxCultureInfo.currPrec;
  this.Round(this.prec);
  var bag = [ ];
  if(this.positive) {
   switch(__aspxCultureInfo.currPosPattern) {
    case 0:
     bag.push(__aspxCultureInfo.currency);
     break;
    case 2:
     bag.push(__aspxCultureInfo.currency, " ");     
     break;     
   }
  } else {
   switch(__aspxCultureInfo.currNegPattern) {
    case 0:
     bag.push("(", __aspxCultureInfo.currency);
     break;
    case 1:
     bag.push("-", __aspxCultureInfo.currency);
     break;
    case 2:
     bag.push(__aspxCultureInfo.currency, "-");
     break;
    case 3:
     bag.push(__aspxCultureInfo.currency);
     break;
    case 5:
    case 8:
     bag.push("-");
     break;
    case 9:
     bag.push("-", __aspxCultureInfo.currency, " ");
     break;
    case 12:
     bag.push(__aspxCultureInfo.currency, " -");
     break;
    case 14:
     bag.push("(", __aspxCultureInfo.currency, " ");
     break;
    case 15:
     bag.push("(");
     break;
   }
  }
  this.AppendGroupedInteger(bag, __aspxCultureInfo.currGroups, __aspxCultureInfo.currGroupSeparator);
  if(this.prec > 0) {
   bag.push(__aspxCultureInfo.currDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }
  if(this.positive) {
   switch(__aspxCultureInfo.currPosPattern) {
    case 1:
     bag.push(__aspxCultureInfo.currency);
     break;
    case 3:
     bag.push(" ", __aspxCultureInfo.currency);
     break;     
   }   
  } else {
   switch(__aspxCultureInfo.currNegPattern) {
    case 0:
    case 14:
     bag.push(")");
     break;
    case 3:
     bag.push("-");
     break;
    case 5:
     bag.push(__aspxCultureInfo.currency);
     break;
    case 8:
     bag.push(" ", __aspxCultureInfo.currency);
     break;
    case 10:
     bag.push(" ", __aspxCultureInfo.currency, "-");
     break;
    case 15:
     bag.push(" ", __aspxCultureInfo.currency, ")");
     break;
   }
  }
  return bag.join("");
 }, 
 FormatDecimal: function() {
  if(this.prec < this.pointPos)
   this.prec = this.pointPos;
  if(this.prec < 1)
   return "0";
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  this.AppendDigits(bag, this.pointPos - this.prec, this.pointPos);
  return bag.join("");
 },
 FormatExp: function() {  
  if(this.prec < 0)
   this.prec = 6;
  this.Round(1 - this.pointPos + this.prec);
  return this.FormatExpCore(3);
 },
 FormatExpCore: function(minExpDigits) {
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  this.AppendDigits(bag, 0, 1);
  if(this.prec > 0) {
   bag.push(__aspxCultureInfo.numDecimalPoint);
   this.AppendDigits(bag, 1, 1 + this.prec);
  }
  bag.push(this.upper ? "E" : "e");
  var order = this.pointPos - 1;  
  if(order >= 0) {
   bag.push("+");
  } else {
   bag.push("-");
   order = -order;
  }
  var orderStr = String(order);
  for(var i = orderStr.length; i < minExpDigits; i++)
   bag.push(0);
  bag.push(orderStr);
  return bag.join("");
 },
 FormatFixed: function() {
  if(this.prec < 0)
   this.prec = __aspxCultureInfo.numPrec;
  this.Round(this.prec);
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  if(this.pointPos < 1)
   bag.push(0);
  else
   this.AppendDigits(bag, 0, this.pointPos);
  if(this.prec > 0) {
   bag.push(__aspxCultureInfo.numDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }
  return bag.join(""); 
 },
 FormatGeneral: function() {
  var hasFrac = this.pointPos < this.digits.length;
  var allowExp;
  if(this.prec < 0) {
   allowExp = hasFrac;
   this.prec = hasFrac ? 15 : 10;
  } else {   
   allowExp = true;
   if(this.prec < 1)
    this.prec = hasFrac ? 15 : 10;
   this.Round(this.prec - this.pointPos);
  }
  if(allowExp) {
   if(this.pointPos > this.prec || this.pointPos <= -4) {
    this.prec = this.digits.length - 1;
    return this.FormatExpCore(2);
   }
  }
  this.prec = Math.min(this.prec, Math.max(1, this.digits.length)) - this.pointPos;
  return this.FormatFixed();
 },
 FormatNumber: function() {
  if(this.prec < 0)
   this.prec = __aspxCultureInfo.numPrec;
  this.Round(this.prec);
  var bag = [ ];
  if(!this.positive) {
   switch(__aspxCultureInfo.numNegPattern) {
    case 0:
     bag.push("(");
     break;
    case 1:
     bag.push("-");
     break;
    case 2:
     bag.push("- ");
     break;
   }
  }
  this.AppendGroupedInteger(bag, __aspxCultureInfo.numGroups, __aspxCultureInfo.numGroupSeparator);
  if(this.prec > 0) {
   bag.push(__aspxCultureInfo.numDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }
  if(!this.positive) {
   switch(__aspxCultureInfo.numNegPattern) {
    case 0:
     bag.push(")");
     break;
    case 3:
     bag.push("-");
     break;
    case 4:
     bag.push(" -");
     break;
   }
  }
  return bag.join("");
 },
 FormatPercent: function() {
  if(this.prec < 0)
   this.prec = __aspxCultureInfo.numPrec;
  if(this.digits.length > 0)
   this.pointPos += 2;
  this.Round(this.prec);
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  if(__aspxCultureInfo.percentPattern == 2)
   bag.push("%");    
  this.AppendGroupedInteger(bag, __aspxCultureInfo.numGroups, __aspxCultureInfo.numGroupSeparator);
  if(this.prec > 0) {
   bag.push(__aspxCultureInfo.numDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }  
  switch(__aspxCultureInfo.percentPattern) {
   case 0:
    bag.push(" %");
    break;
   case 1:
    bag.push("%");
    break;
  }  
  return bag.join("");
 },
 FormatHex: function(value) {
  var result = value.toString(16);
  if(result.indexOf("(") > -1)
   return result;
  result = this.upper ? result.toUpperCase() : result.toLowerCase();
  if(this.prec <= result.length)
   return result;
  var bag = [ ];
  for(var i = result.length; i < this.prec; i++)
   bag.push(0);
  bag.push(result);
  return bag.join("");
 },
 FormatCustom: function(format) {
  var sectionList = this.GetCustomFormatSections(format);
  var section = this.SelectCustomFormatSection(sectionList);
  if(section == "")
   return this.positive ? "" : "-";
  var info = this.ParseCustomFormatSection(section);
  var lists = this.CreateCustomFormatLists(info);
  if(sectionList.length > 2 && section != sectionList[2]) {
   var zero = lists.i.concat(lists.f).join("").split(0).join("") == "";
   if(zero) {
    section = sectionList[2];
    info = this.ParseCustomFormatSection(section);
    lists = this.CreateCustomFormatLists(info);   
   }   
  }
  return this.FormatCustomCore(section, info, lists);
 },
 GetCustomFormatSections: function(format) {
  var sections = [ ];
  var escaping = false;
  var quote = "";
  var length = 0;
  var prevPos = 0;
  for(var i = 0; i < format.length; i++) {
   var ch = format.charAt(i);
   if(!escaping && quote == "" && ch == ";") {
    sections.push(format.substr(prevPos, length));
    length = 0;
    prevPos = i + 1;
    if(sections.length > 2)
     break;
   } else {
    if(escaping)
     escaping = false;
    else if(ch == quote)
     quote = quote == "" ? ch : "";
    else if(ch == "\\")
     escaping = true;
    else if(ch == "'" || ch == '"')
     quote = ch;
    ++length;
   }
  }
  if(length > 0)
   sections.push(format.substr(prevPos, length));
  if(sections.length < 1)
   sections.push(format);
  return sections;
 },
 SelectCustomFormatSection: function(sections) {
  if(!this.positive && sections.length > 1 && sections[1] != "") {
   this.positive = true;
   return sections[1];
  }
  if(this.digits.length < 1 && sections.length > 2 && sections[2] != "")
   return sections[2];
  return sections[0];
 },
 CreateCustomFormatInfo: function() {
  return {
   pointPos: -1,
   grouping: false,
   exp: false,
   expShowPlus: false,
   percent: false,
   scaling: 0,
   intDigits: 0,
   fracDigits: 0,
   expDigits: 0,
   intSharps: 0,
   fracSharps: 0, 
   expSharps: 0
  };
 },
 ParseCustomFormatSection: function(section) {  
  var quote = "";
  var area = "i"; 
  var canParseIntSharps = true;
  var result = this.CreateCustomFormatInfo();
  var groupSeparators = 0;  
  for(var i = 0; i < section.length; i++) {
   var ch = section.charAt(i);   
   if(ch == quote) {
    quote = "";    
    continue;
   }
   if(quote != "")
    continue;
   if(area == "e" && ch != "0" && ch != "#") {
    area = result.pointPos < 0 ? "i" : "f";
    i--;
    continue;
   }
   switch(ch) {
    case "\\":
     i++;
     continue;
    case "'":
    case '"':
     quote = ch;
     continue;
    case "#":
    case "0":
     if(ch == "#") {
      switch(area) {
       case "i":
        if(canParseIntSharps)
         result.intSharps++;
        break;
       case "f":
        result.fracSharps++;
        break;
       case "e":
        result.expSharps++;
        break;
      }
     } else {
      canParseIntSharps = false;
      switch(area) {
       case "f":
        result.fracSharps = 0;        
        break;
       case "e":
        result.expSharps = 0;
        break;
      }
     }
     switch(area) {
      case "i":
       result.intDigits++;
       if(groupSeparators > 0)
        result.grouping = true;
       groupSeparators = 0;
       break;
      case "f":
       result.fracDigits++;  
       break;
      case "e":
       result.expDigits++;
       break;
     }
     break;
    case "e":
    case "E":
     if(result.exp)
      break;
     result.exp = true;     
     area = "e"; 
     if(i < section.length - 1) {
      var next = section.charAt(1 + i);
      if(next == "+" || next == "-") {
       if(next == "+")
        result.expShowPlus = true;
       i++;
      }
      else if(next != "0" && next != "#") {
       result.exp = false;
       if(result.pointPos < 0)
        area = "i";       
      }
     }
     break;
    case ".":
     area = "f";
     if(result.pointPos < 0)
      result.pointPos = i;
     break;
    case "%":
     result.percent = true;     
     break;
    case ",":
     if(area == "i" && result.intDigits > 0)
      groupSeparators++;
     break;
    default:
     break;
   }
  }
  if(result.expDigits < 1)
   result.exp = false;
  else
   result.intSharps = 0;
  if(result.fracDigits < 1)
   result.pointPos = -1;
  result.scaling = 3 * groupSeparators;  
  return result;
 },
 CreateCustomFormatLists: function(info) {
  var intList = [ ];
  var fracList = [ ];
  var expList = [ ];
  if(this.digits.length > 0) {
   if(info.percent)
    this.pointPos += 2;
   this.pointPos -= info.scaling;
  }
  var expPositive = true;
  if(info.exp && (info.intDigits > 0 || info.fracDigits > 0)) {
   var diff = 0;
   if(this.digits.length > 0) {
    this.Round(info.intDigits + info.fracDigits - this.pointPos);
    diff -= this.pointPos - info.intDigits;
    this.pointPos = info.intDigits;
   }
   expPositive = diff <= 0;   
   expList = String(diff < 0 ? -diff : diff).split("");
  } else {
   this.Round(info.fracDigits);
  }
  if(this.digits.length < 1 || this.pointPos < 1)
   intList = [ 0 ];
  else
   this.AppendDigits(intList, 0, this.pointPos);
  this.AppendDigits(fracList, this.pointPos, this.digits.length);
  if(info.exp) {
   while(intList.length < info.intDigits)
    intList.unshift(0);
   while(expList.length < info.expDigits - info.expSharps)
    expList.unshift(0);
   if(expPositive && info.expShowPlus)
    expList.unshift("+");
   else if(!expPositive)
    expList.unshift("-");
  } else {
   while(intList.length < info.intDigits - info.intSharps)
    intList.unshift(0);    
   if(info.intSharps >= info.intDigits) {
    var zero = true;
    for(var i = 0; i < intList.length; i++) {
     if(intList[i] != 0) {
      zero = false;
      break;
     }
    }
    if(zero)
     intList = [ ];
   }
  }
  while(fracList.length < info.fracDigits - info.fracSharps)
   fracList.push(0);
  return {
   i: intList,
   f: fracList,
   e: expList
  };
 },
 FormatCustomCore: function(section, info, lists) {
  var intLen = 0; 
  var total = 0;
  var groupIndex = 0; 
  var counter = 0;
  var groupSize = 0;
  if(info.grouping && __aspxCultureInfo.numGroups.length > 0) {
   intLen = lists.i.length;
   for(var i = 0; i < __aspxCultureInfo.numGroups.length; i++) {
    total += __aspxCultureInfo.numGroups[i];
    if(total <= intLen)
     groupIndex = i;
   }
   groupSize = __aspxCultureInfo.numGroups[groupIndex];
   var fraction = intLen > total ? intLen - total : 0;
   if(groupSize == 0) {
    while(groupIndex >= 0 && __aspxCultureInfo.numGroups[groupIndex] == 0)
     groupIndex--;
    groupSize = fraction > 0 ? fraction : __aspxCultureInfo.numGroups[groupIndex];
   }
   if(fraction == 0) {
    counter = groupSize;
   } else {
    groupIndex += Math.floor(fraction / groupSize);
    counter = fraction % groupSize;
    if(counter == 0)
     counter = groupSize;
    else
     groupIndex++;
   }
  } else {
   info.grouping = false;
  }
  var bag = [ ];
  var area = "i";
  var intSharps = 0;
  var intListIndex = 0;
  var fracListIndex = 0;
  var savedCh = "";
  for(var i = 0; i < section.length; i++) {
   var ch = section.charAt(i);
   if(ch == savedCh) {
    savedCh = "";
    continue;
   }
   if(savedCh != "") {
    bag.push(ch);
    continue;
   }
   switch(ch) {
    case "\\":
     ++i;
     if(i < section.length)
      bag.push(section.charAt(i));
     continue;
    case "'":
    case '"':     
     savedCh = ch;
     continue;
    case "#":     
    case "0":
     if(area == "i") {
      intSharps++;
      if(ch == "0" || info.intDigits - intSharps < lists.i.length + intListIndex) {
       while(info.intDigits - intSharps + intListIndex < lists.i.length) {
        bag.push(lists.i[intListIndex]);
        intListIndex++;
        if(info.grouping && --intLen > 0 && --counter == 0) {
         bag.push(__aspxCultureInfo.numGroupSeparator);
         if(--groupIndex < __aspxCultureInfo.numGroups.length && groupIndex >= 0)
          groupSize = __aspxCultureInfo.numGroups[groupIndex];
         counter = groupSize;
        }
       }
      }
     } else if(area == "f") {
      if(fracListIndex < lists.f.length) {
       bag.push(lists.f[fracListIndex]);
       fracListIndex++;
      }
     }
     break;
    case "e":
    case "E":
     if(lists.e == null || !info.exp) {
      bag.push(ch);
      break;
     }
     for(var q = i + 1; q < section.length; q++) {
      if(q == i + 1 && (section.charAt(q) == "+" || section.charAt(q) == "-"))
       continue;                   
      if(section.charAt(q) == "0" || section.charAt(q) == "#")
       continue;
      break;
     }
     i = q - 1;
     area = info.pointPos < 0 ? "i" : "f";
     bag.push(ch);
     bag = bag.concat(lists.e);
     lists.e = null;      
     break;
    case ".":
     if(info.pointPos == i && lists.f.length > 0)
      bag.push(__aspxCultureInfo.numDecimalPoint);
     area = "f";
     break;
    case ",":
     break;
    default:
     bag.push(ch);
     break;
   }
  }
  if(!this.positive)
   bag.unshift("-");
  return bag.join("");
 },
 FillDigitInfo: function(value) {
  this.positive = true;
  if(value < 0) {
   value = -value;
   this.positive = false;   
  }
  this.digits = [ ];
  this.pointPos = 0;    
  if(value == 0 || !isFinite(value) || isNaN(value)) {
   this.pointPos = 1;
   return;
  }
  var list = String(value).split("e");
  var str = list[0];
  if(list.length > 1) {   
   this.pointPos = Number(list[1]);
  }
  var frac = false;
  var decimalCount = 0;
  for(var i = 0; i < str.length; i++) {
   var ch = str.charAt(i);
   if(ch == ".") {
    frac = true;
   } else {
    if(frac)
     decimalCount++;     
    if(ch != "0" || this.digits.length > 0)
     this.digits.push(Number(ch));
   }
  }
  this.pointPos += this.digits.length - decimalCount;
 },
 FillFormatInfo: function(format) {
  this.upper = true;
  this.custom = false;
  this.prec = -1;
  var spec;
  if(format == null || format.length < 1)
   spec = "G";
  else
   spec = format.charAt(0);
  if(spec >= "a" && spec <= "z") {
   spec = spec.toUpperCase();
   this.upper = false;
  }
  if(spec >= "A" && spec <= "Z") {   
   if(format != null && format.length > 1) {
    var prec = Number(format.substr(1));
    if(!isNaN(prec))
     this.prec = prec;
    else
     this.custom = true;
   }
  } else {
   this.custom = true;   
  }  
  this.spec = this.custom ? "0" : spec;
 },
 Round: function(shift) {
  var amount = this.digits.length - this.pointPos - shift;
  if(amount <= 0) 
   return;
  var cutPos = this.pointPos + shift;
  if(cutPos < 0) {
   this.digits = [ ];
   this.pointPos = 0;
   return;
  }
  var digit = this.digits[cutPos];
  if(digit > 4) { 
   for(var i = 0; i < amount; i++) {
    var index = cutPos - 1 - i;
    if(index < 0) {
     this.digits.unshift(0);
     this.pointPos++;
     cutPos++;
     index++;
    }
    digit = this.digits[index];    
    if(digit < 9) {
     this.digits[index] = 1 + digit;
     break;
    } else {
     this.digits[index] = 0;
     amount++;
    }
   }
  }
  for(var i = cutPos - 1; i >= 0; i--) {
   if(this.digits[i] > 0) break;
   cutPos--;
  }
  this.digits.splice(cutPos, this.digits.length - cutPos);
 },
 AppendGroupedInteger: function(list, groups, separator) { 
  if(this.pointPos < 1) {
   list.push(0);
   return;
  }
  var total = 0;
  var groupIndex = 0;
  for(var i = 0; i < groups.length; i++) {
   total += groups[i];
   if(total <= this.pointPos)
    groupIndex = i;
   else
    break;
  }
  if(groups.length > 0 && total > 0) {
   var counter;
   var groupSize = groups[groupIndex];
   var fraction = this.pointPos > total ? this.pointPos - total : 0;
   if(groupSize == 0) {
    while(groupIndex >= 0 && groups[groupIndex] == 0)
     groupIndex--;
    groupSize = fraction > 0 ? fraction : groups[groupIndex];
   }
   if(fraction == 0) {
    counter = groupSize;
   } else {
    groupIndex += Math.floor(fraction / groupSize);
    counter = fraction % groupSize;
    if(counter == 0)
     counter = groupSize;
    else
     groupIndex++;
   }
   var i = 0;
   while(true) {
    if(this.pointPos - i <= counter || counter == 0) {
     this.AppendDigits(list, i, this.pointPos);
     break;
    }
    this.AppendDigits(list, i, i + counter);
    list.push(separator);
    i += counter;    
    groupIndex--;     
    if(groupIndex < groups.length && groupIndex >= 0)
     groupSize = groups[groupIndex];
    counter = groupSize;
   }
  } else {
   this.AppendDigits(list, 0, this.pointPos);   
  }  
 },
 AppendDigits: function(list, start, end) {
  for(var i = start; i < end; i++) {
   if(i < 0 || i >= this.digits.length)
    list.push(0);
   else
    list.push(this.digits[i]);
  }
 }
};
__aspxTableScrollHelpers = [ ];
ASPxClientTableHelperBase = _aspxCreateClass(null, {
 constructor: function(control, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll){
  this.control = control;
  this.horzScroll = horzScroll;
  this.vertScroll = vertScroll;
  this.contentTableIDSuffix = contentTableIDSuffix;
  this.headerTableIDSuffix = headerTableIDSuffix;
  this.footerTableIDSuffix = footerTableIDSuffix;
 },
 GetChildElementByID: function(idSuffix) {
  return _aspxGetElementById(this.control.name + "_" + idSuffix);
 },
 GetTable: function(tableIDSuffix) {
  return this.GetChildElementByID(tableIDSuffix);
 },
 GetContentTable: function() {
  return this.GetTable(this.contentTableIDSuffix);
 },
 GetHeaderTable: function() {
  return this.GetTable(this.headerTableIDSuffix);
 },
 GetFooterTable: function() {
  return this.GetTable(this.footerTableIDSuffix);
 },
 HasHorzScroll: function() { return this.horzScroll != ASPxScrollBarMode.Hidden; }, 
 HasVertScroll: function() { return this.vertScroll != ASPxScrollBarMode.Hidden; },
 IsHorzAutoScroll: function() {
  return this.horzScroll == ASPxScrollBarMode.Auto;
 },
 IsVertAutoScroll: function() {
  return this.vertScroll == ASPxScrollBarMode.Auto;
 },
 IsRtl: function() { return false; },
 GetArmatureCells: function(table) {
  return table.rows[0].cells;
 },
 GetArmatureCell: function(cell) {
  var index = this.GetArmatureCellIndexByOtherCell(cell);
  return this.GetArmatureCells(_aspxGetParentByTagName(cell, "TABLE"))[index];
 },
 GetArmatureCellIndexByOtherCell: function(cell) {
  return cell.cellIndex;
 },
 GetCellRealWidth: function(cell) {
  var width = this.GetStylePxWidth(this.GetArmatureCell(cell));
  return width > -1 ? width : cell.offsetWidth
 },
 GetStylePxWidth: function(element) {
  var width = element.style.width;
  if(width && width.indexOf("px") > -1) 
   return parseInt(width, 10);
  return -1;
 }
});
ASPxClientTableHelperAdapter = _aspxCreateClass(null, {
 constructor: function(tableHelper) {
  this.tableHelper = tableHelper;
  this.control = this.tableHelper.control;
 },
 GetContentTable: function() {
  return this.tableHelper.GetContentTable();
 },
 GetHeaderTable: function() {
  return this.tableHelper.GetHeaderTable();
 },
 GetFooterTable: function() {
  return this.tableHelper.GetFooterTable();
 },
 GetArmatureCells: function(table) {
  return this.tableHelper.GetArmatureCells(table);
 },
 GetArmatureCell: function(cell) {
  return this.tableHelper.GetArmatureCell(cell);
 },
 GetCellRealWidth: function(cell) {
  return this.tableHelper.GetCellRealWidth(cell);
 },
 GetStylePxWidth: function(element) {
  return this.tableHelper.GetStylePxWidth(element);
 },
 HasHorzScroll: function() {
  return this.tableHelper.HasHorzScroll();
 }, 
 HasVertScroll: function() {
  return this.tableHelper.HasVertScroll();
 },
 IsRtl: function() {
  return this.tableHelper.IsRtl();
 }
});
ASPxClientTableScrollHelperBase = _aspxCreateClass(ASPxClientTableHelperAdapter, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.touchUIScroller = null;
  this.savedScrollLeft = this.IsRtl() ? 0x1fffffff : -1;
  this.savedScrollTop = -1;
  this.posLoggerHandler = null;
  this.scrollableControlHeight = -1;
  this.activeElementSettings = [ ];
  __aspxTableScrollHelpers.push(this);
 },
 Update: function() {
  this.AssignPosLoggerHandler(this.GetScrollDiv(this.GetContentTable()));
  if(this.HasHorzScroll()) {
   this.AssignScrollEvent(this.GetScrollDiv(this.GetHeaderTable()));
   this.AssignScrollEvent(this.GetScrollDiv(this.GetContentTable()));
  }
  if(__aspxWebKitTouchUI)
   this.UpdateTouchUIScroller();
  this.UpdateScrollableControlsSize();
  if(this.tableHelper.control.resetScrollTop) {
   this.ResetScrollTop();
   this.tableHelper.control.resetScrollTop = false;
  }
  this.LoadScrollPosition();
  this.ApplyScrollPosition();
 },
 UpdateTouchUIScroller: function() {
  this.touchUIScroller = this.touchUIScroller || this.CreateTouchUIScroller();
  if(!_aspxIsExistsElement(this.touchUIScroller.element))
   this.touchUIScroller.ChangeElement(this.GetScrollDiv(this.GetContentTable()));
 },
 CreateTouchUIScroller: function() {
  return ASPxClientTouchUI.MakeScrollable(this.GetScrollDiv(this.GetContentTable()), { 
   showHorizontalScrollbar: this.ShowTouchHorizontalScrollbar(),
   showVerticalScrollbar: this.ShowTouchVerticalScrollbar(),
   forceCustomScroll: this.UseTouchCustomScroll()
  });
 },
 ShowTouchHorizontalScrollbar: function() {
  return this.HasHorzScroll();
 },
 ShowTouchVerticalScrollbar: function() {
  return this.HasVertScroll();
 },
 UseTouchCustomScroll: function() {
  return false;
 },
 AssignScrollEvent: function(element) {
  if(!element || element.scrollHelper == this) 
   return;
  element.scrollHelper = this;
  _aspxAttachEventToElement(element, "scroll", this.OnScroll);
 },
 OnScroll: function(event) {
  var src = _aspxGetEventSource(event);
  var helper = src.scrollHelper;
  if(!helper) return;
  var scrollDivs = [ 
   helper.GetScrollDiv(helper.GetHeaderTable()),
   helper.GetScrollDiv(helper.GetContentTable()),
   helper.GetScrollDiv(helper.GetFooterTable())
  ];
  for(var i = 0; i < scrollDivs.length; i++) {
   var div = scrollDivs[i];
   if(!div || div == src)
    continue;
   if(__aspxIE && __aspxBrowserVersion > 9 && i == 1)
    helper.SetScrollLeftPostponed(div, src);
   else
    helper.SetScrollLeft(div, src);
  }
 },
 SetScrollLeftPostponed: function(target, source) {
  if(!this.scrollUpdateTimerID) {
   this.scrollUpdateTimerID = window.setInterval(function() {
    this.SetScrollLeft(target, source);
   }.aspxBind(this), 0);
  }
  _aspxClearTimer(this.scrollUpdateTimerStopID);
  this.scrollUpdateTimerStopID = window.setTimeout(function() {
   _aspxClearInterval(this.scrollUpdateTimerID);
   delete this.scrollUpdateTimerID;
   delete this.scrollUpdateTimerStopID
  }.aspxBind(this), 500)
 },
 SetScrollLeft: function(target, source) {
  if(target.scrollLeft != source.scrollLeft)
   target.scrollLeft = source.scrollLeft;
 },
 AssignPosLoggerHandler: function(element) {
  if (!element) return;
  if(!this.posLoggerHandler)
   this.posLoggerHandler = function() { this.LogScrollPosition(); }.aspxBind(this);
  _aspxDetachEventFromElement(element, "scroll", this.posLoggerHandler);
  _aspxAttachEventToElement(element, "scroll", this.posLoggerHandler);
 },
 OnWindowResize: function() {
  if(!this.IsOriginalWidthPercentage())
   return;
  window.setTimeout(function() { 
   this.UpdateScrollableControlsSize(true);
   var resizingHelper = this.GetResizingHelper();
   if(this.IsOriginalWidthPercentage() && resizingHelper)
    resizingHelper.ValidateColumnWidths();
  }.aspxBind(this), 0);
 },
 UpdateScrollableControlsSize: function(onResize) {
  if(!this.control.GetMainElement()) 
   return;
  if(!this.control.IsDisplayed()) {
   this.control.ResetControlAdjustment();
   return;
  }
  this.SaveActiveElement();
  if(this.HasVertScroll() && this.scrollableControlHeight > -1)
   this.SetHeightCore(this.scrollableControlHeight);
  var mainTable = this.control.GetMainElement(),
   mainCell = mainTable.rows[0].cells[0],
   headerTable = this.GetHeaderTable(),
   contentTable = this.GetContentTable(),
   footerTable = this.GetFooterTable();
  var parts = [ headerTable, contentTable, footerTable ];
  var body = __aspxWebKitFamily ? document.body : document.documentElement;
  var scrollTop = this.GetScrollDiv(contentTable).scrollTop,
   scrollLeft = this.GetScrollDiv(contentTable).scrollLeft,
   savedHeight = mainTable.style.height,
   bodyScrollLeft = body.scrollLeft,
   scrollContainerPadding = this.IsVerticalScrollBarShowed() ? _aspxGetVerticalScrollBarWidth() : 0;
  mainTable.style.height = mainCell.offsetHeight + "px";
  for(var i = 0; i < parts.length; i++) {
   if(parts[i]) 
    parts[i].parentNode.style.display = "none";
  }
  _aspxRestoreElementOriginalWidth(mainTable);
  var desiredTableWidth = mainTable.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainTable);
  var desiredPartWidth = desiredTableWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainCell);
  var oldIE = __aspxIE && __aspxBrowserVersion < 8;
  if(oldIE) 
   contentTable.style.width = "100%";
  for(var i = 0; i < parts.length; i++) {
   var part = parts[i];
   if(!part) continue;
   var padding = 0;
   var div = part.parentNode;
   if(part != contentTable) {
    padding = scrollContainerPadding;
    div.parentNode.style.paddingRight = padding + "px";
   }
   var borderStyle = _aspxGetCurrentStyle(part == headerTable ? div.parentNode : div);
   padding += _aspxPxToInt(borderStyle.borderRightWidth) + _aspxPxToInt(borderStyle.borderLeftWidth);
   div.align = "left";
   div.style.width = oldIE ? "1%" : "";
   div.style.display = "";
   if(!this.HasHorzScroll() && part == headerTable) {
    var actualWidth = part.offsetWidth + padding;
    if(actualWidth > desiredPartWidth)
     desiredPartWidth = actualWidth;
   }
   this.SetElementWidth(div, desiredPartWidth - padding);
   if(!this.HasHorzScroll() && oldIE && part == contentTable && scrollContainerPadding > 0)
    part.style.width = Math.max(desiredPartWidth - _aspxGetVerticalScrollBarWidth(), 0) + "px";
  }
  if(this.IsContentTableEmpty() && this.HasHorzScroll() && headerTable)
   contentTable.style.width = headerTable.offsetWidth + "px";
  mainTable.style.width = desiredTableWidth + "px";
  mainTable.style.height = savedHeight;
  if(oldIE && !this.HasVertScroll() && this.tableHelper.IsHorzAutoScroll()) {
   var paddingBottom = 0;
   if(contentTable.offsetWidth > this.GetScrollDiv(contentTable).offsetWidth)
    paddingBottom = _aspxGetVerticalScrollBarWidth();
   this.GetScrollDiv(contentTable).style.paddingBottom = paddingBottom + "px";
  }
  if(oldIE && this.HasHorzScroll() && this.HasVertScroll() && !this.tableHelper.IsVertAutoScroll() && headerTable) {
   var contentTableWidth = contentTable.offsetWidth;
   var headerTableWidth = headerTable.offsetWidth;
   var diff = contentTableWidth - headerTableWidth;
   if(diff === _aspxGetVerticalScrollBarWidth())
    contentTable.style.width = headerTableWidth + "px";
  }
  this.GetScrollDiv(contentTable).scrollTop = scrollTop;
  this.GetScrollDiv(contentTable).scrollLeft = scrollLeft;
  if(body.scrollLeft != bodyScrollLeft) 
   body.scrollLeft = bodyScrollLeft;
  this.RestoreActiveElement();
  aspxGetControlCollection().AdjustControls(mainTable);
 },
 IsVerticalScrollBarShowed: function() {
  if(!this.HasVertScroll())
   return false;
  if(this.tableHelper.IsVertAutoScroll())
   return this.GetContentTableExcessHeight() > 0;
  return true;
 },
 GetContentTableExcessHeight: function() {
  var contentDiv = this.GetScrollDiv(this.GetContentTable());
  var scrollSize = _aspxGetVerticalScrollBarWidth();
  var contentWidth = 0;
  var contentHeight = 0;
  for(var i = 0; i < contentDiv.childNodes.length; i++) {
   var child = contentDiv.childNodes[i];
   if(child.nodeType != 1) 
    continue;
   contentWidth = Math.max(contentWidth, child.offsetWidth);
   contentHeight += child.offsetHeight;
  }
  var divWidth = contentDiv.offsetWidth;
  var divHeight = contentDiv.offsetHeight;
  var divHasHorzScroll = contentWidth > divWidth;
  var divHasVertScroll = contentHeight > divHeight;
  if(!divHasHorzScroll && divHasVertScroll)
   divHasHorzScroll = contentWidth > (divWidth - scrollSize);
  if(divHasHorzScroll && !divHasVertScroll)
   divHasVertScroll = contentHeight > (divHeight - scrollSize);
  var result = contentHeight - divHeight;
  if(divHasVertScroll)
   result += scrollSize;
  return result;
 },
 IsContentTableEmpty: function() {
  return false;
 },
 SetElementWidth: function(element, width) {
  if(!element || width <= 0) 
   return;
  element.style.width = width + "px";
 },
 GetScrollDiv: function(childTable) {
  if(!childTable) return null;
  return childTable.parentNode;
 },
 MakeRowVisible: function(row, fromKbdHelper) {
  var div = this.GetScrollDiv(this.GetContentTable());
  if(div == null || !row || !this.HasVertScroll()) 
   return;
  var divTop = _aspxGetAbsoluteY(div);
  var rowTop = _aspxGetAbsoluteY(row);
  var topDiff = divTop - rowTop;
  if(topDiff > 0) {
   div.scrollTop -= topDiff;
   return; 
  }
  var divBottom = divTop + div.clientHeight + 1;
  var rowBottom = rowTop + row.offsetHeight;
  var bottomDiff = rowBottom - divBottom;
  if(bottomDiff <= 0) return;
  var diff = fromKbdHelper ? bottomDiff : topDiff * -1;
  div.scrollTop += diff;
 },
 GetHorzScrollableControl: function() {
  if(this.HasHorzScroll()) 
   return this.GetScrollDiv(this.GetContentTable());
  return null;
 },
 GetVertScrollableControl: function() {
  if(this.HasVertScroll()) 
   return this.GetScrollDiv(this.GetContentTable());
  return null;
 },
 LogScrollPosition: function() {
  if(!this.control.GetMainElement()) return;
  if(this.HasHorzScroll())
   this.savedScrollLeft = this.GetHorzScrollableControl().scrollLeft;
  if(this.HasVertScroll())
   this.savedScrollTop = this.GetVertScrollableControl().scrollTop;
  this.SaveScrollPosition();
 },
 SaveScrollPosition: function() {
  ASPxSimpleHiddenField.Set("SP", this.savedScrollLeft + ";" + this.savedScrollTop, this.GetStateInput());
 },
 LoadScrollPosition: function() {
  var savedState = ASPxSimpleHiddenField.Get("SP", this.GetStateInput());
  if(savedState && savedState.length > 0) {
   var list = savedState.split(";");
   this.savedScrollLeft = Number(list[0]);
   this.savedScrollTop = Number(list[1]);
  }
 },
 ApplyScrollPosition: function() {
  this.SetHorzScrollPosition(this.savedScrollLeft);
  this.SetVertScrollPosition(this.savedScrollTop);
 },
 SetHorzScrollPosition: function(pos) {
  if(!this.HasHorzScroll() || pos < 0) 
   return;
  this.SetScrollPositionCore(this.GetHorzScrollableControl(), pos, false);
 },
 SetVertScrollPosition: function(pos) {
  if(!this.HasVertScroll() || pos < 0)
   return;
  this.SetScrollPositionCore(this.GetVertScrollableControl(), pos, true);
 },
 SetScrollPositionCore: function(element, pos, isTop) {
  if(isTop) {
   if(element.scrollTop != pos)
    element.scrollTop = pos;
  } else if(element.scrollLeft != pos) {
   element.scrollLeft = pos;
  }
 },
 GetHorzScrollPosition: function() {
  if(!this.HasHorzScroll()) return 0;
  return this.GetScrollPositionCore(this.GetHorzScrollableControl(), false);
 },
 GetVertScrollPosition: function() {
  if(!this.HasVertScroll()) return 0;
  return this.GetScrollPositionCore(this.GetVertScrollableControl(), true);
 },
 GetScrollPositionCore: function(element, isTop) {
  return isTop ? element.scrollTop : element.scrollLeft;
 },
 GetStateInput: function() { },
 ResetScrollTop: function() {
  this.savedScrollTop = 0;
  this.SaveScrollPosition();
 },
 SetHeight: function(height) {
  if(!this.HasVertScroll()) 
   return;
  if(this.scrollableControlHeight && this.scrollableControlHeight === height)
   return;
  this.scrollableControlHeight = height;
  this.SetHeightCore(height);
  this.Update();
 },
 SetHeightCore: function(height) {
  var mainElement = this.control.GetMainElement();
  var div = this.GetVertScrollableControl();
  var mainElementHeight = mainElement.offsetHeight;
  if (__aspxIE && __aspxBrowserVersion > 8)
   mainElementHeight = _aspxPxToFloat(window.getComputedStyle(mainElement, null).height);
  height = _aspxPxToFloat(div.style.height) + (height - mainElementHeight);
  div.style.height = Math.max(height, 0) + "px";
 },
 OnSetWidth: function() {
  _aspxDropElementOriginalWidth(this.control.GetMainElement());
 },
 IsOriginalWidthPercentage: function() {
  var mainElement = this.control.GetMainElement();
  var width = String(_aspxGetElementOriginalWidth(mainElement));
  return _aspxIsPercentageSize(width);
 },
 SaveActiveElement: function() {
  if(!__aspxIE) return;
  var activeElement = _aspxGetActiveElement();
  if(!activeElement || activeElement.tagName != "INPUT" && activeElement.tagName != "TEXTAREA") 
   return;
  if(!_aspxGetIsParent(this.control.GetMainElement(), activeElement))
   return;
  var selInfo = _aspxGetSelectionInfo(activeElement);
  this.activeElementSettings = [ activeElement, selInfo.startPos, selInfo.endPos ];
 },
 RestoreActiveElement: function() {
  if(!__aspxIE || !this.activeElementSettings || this.activeElementSettings.length == 0)
   return;
  var oldElement = this.activeElementSettings[0];
  var currentElement = _aspxGetActiveElement();
  if(!_aspxIsExistsElement(oldElement) || currentElement === oldElement)
   return;
  oldElement.focus();
  _aspxSetInputSelection(oldElement, this.activeElementSettings[1], this.activeElementSettings[2]);
  this.activeElementSettings = null;
 }
});
ASPxClientTableScrollHelperBase.prevBodyWidth = -1;
__aspxTableColumnResizing = null;
ASPxClientTableResizingHelperBase = _aspxCreateClass(ASPxClientTableHelperAdapter, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.maximumOffset = __aspxTouchUI ? 10 : 3;
  this.defaultMinWidth = 16;
  this.prevX = 0;
  this.colInfo = { };
  this.nextColInfo = { };
 },
 IsResizing: function() { 
  return __aspxTableColumnResizing == this;
 },
 CanStartResizing: function(e, headerCell) {
  this.prevX = _aspxGetEventX(e);
  var left = _aspxGetAbsoluteX(headerCell);
  var right = left + headerCell.offsetWidth - 1;
  var isLeftEdge = this.prevX - left < this.maximumOffset;
  var isRightEdge = right - this.prevX <= this.maximumOffset;
  if(!isLeftEdge && !isRightEdge)
   return false;
  var columnIndex = this.GetColumnIndexById(headerCell.id);
  var rtl = this.IsRtl();
  if(isLeftEdge && !rtl || isRightEdge && rtl)
   return !this.IsLeftmostColumn(columnIndex);
  if(isRightEdge && !rtl || isLeftEdge && rtl) {
   if(!this.IsNextColumnResizable())
    return true;
   return !this.IsRightmostColumn(columnIndex);
  }
 },
 GetResizingColumnIndex: function(e, headerCell) {
  var isLeft = _aspxGetEventX(e) < _aspxGetAbsoluteX(headerCell) + headerCell.offsetWidth / 2;
  if(this.IsRtl())
   isLeft = !isLeft;
  var columnIndex = this.GetColumnIndexById(headerCell.id);
  return this.GetResizingColumnIndexCore(columnIndex, isLeft);
 },
 GetResizingColumnIndexCore: function(columnIndex, isLeft) {
  if(isLeft)
   return this.GetColumnNeighbor(columnIndex, true);
  return columnIndex;
 },
 StartResizing: function(columnIndex) {
  this.colInfo = this.GetColumnInfo(columnIndex);
  if(this.IsNextColumnResizable())
   this.nextColInfo = this.GetColumnInfo(this.GetColumnNeighbor(columnIndex, false));
  __aspxTableColumnResizing = this;
  _aspxSetElementSelectionEnabled(document.body, false);
 },
 EndResizing: function() {
  if(!this.colInfo.headerCell)
   return;
  this.SaveControlDimensions();
  aspxGetControlCollection().AdjustControls(this.control.GetMainElement());
  this.OnResized(this.colInfo.index);
 },
 CancelResizing: function() {
  __aspxTableColumnResizing = null;
  _aspxSetElementSelectionEnabled(document.body, true);
  this.prevX = 0;
  this.colInfo = { };
  this.nextColInfo = { };
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.Update();
 },
 OnMouseMove: function(e) {
  if(ASPxClientTouchUI.isTouchEvent(e) && !ASPxClientTouchUI.isGesture)
   e.preventDefault();
  if(this.colInfo.headerCell.cellIndex < 0) { 
   this.CancelResizing(e);
   return;
  }
  _aspxClearSelection();
  this.Resize(e);
 },
 OnMouseUp: function(e) {
  this.EndResizing();
  this.CancelResizing();
 },
 Resize: function(e) {
  var newX = _aspxGetEventX(e);
  var delta = newX - this.prevX;
  if(this.IsRtl())
   delta = -delta;
  var newWidth = this.GetCellRealWidth(this.colInfo.headerCell) + delta;
  var minWidth = this.colInfo.minWidth > 0 ? this.colInfo.minWidth : this.defaultMinWidth;
  var nextColNewWidth = nextColMinWidth = 0;
  if(this.IsNextColumnResizable()) {
   nextColNewWidth = this.GetCellRealWidth(this.nextColInfo.headerCell) - delta;
   nextColMinWidth = this.nextColInfo.minWidth > 0 ? this.nextColInfo.minWidth : this.defaultMinWidth;
  }
  if(newWidth < minWidth || nextColNewWidth < nextColMinWidth)
   return;
  this.prevX = newX;
  var table = this.control.GetMainElement();
  var tableWidth = table.offsetWidth;
  this.ApplyColumnWidth(this.colInfo.index, newWidth + "px");
  this.colInfo.armCell.minWidthAssigned = false;
  if(this.IsNextColumnResizable()) {
   this.ApplyColumnWidth(this.nextColInfo.index, nextColNewWidth + "px");
   this.nextColInfo.armCell.minWidthAssigned = false;
  } else if(!this.HasHorzScroll()) {
   table.style.width = (tableWidth + delta) + "px";
   if(this.HasVertScroll())
    this.GetScrollHelper().Update();
  }
  if(__aspxIE && __aspxBrowserVersion == 9 && this.tableHelper.IsHorzAutoScroll())
   this.GetContentTable().parentNode.className = this.GenerateRandomClassName();
 },
 ApplyColumnWidth: function(columnIndex, width) {
  var cellIndex = this.GetArmatureCellIndex(columnIndex);
  this.ApplyCellWidth(this.GetHeaderTable(), cellIndex, width);
  this.ApplyCellWidth(this.GetContentTable(), cellIndex, width);
  if(this.NeedResizeFooterTable())
   this.ApplyCellWidth(this.GetFooterTable(), cellIndex, width);
 },
 ApplyCellWidth: function(table, cellIndex, width) {
  if(!table)
   return;
  this.GetArmatureCells(table)[cellIndex].style.width = width;
 },
 IsNextColumnResizable: function() { },
 GetColumnIndices: function() { },
 GetColumnIndexById: function(id) { },
 GetColumnMinWidth: function(columnIndex) { },
 GetHeaderCell: function(columnIndex) { },
 GetArmatureCellIndex: function(columnIndex) { },
 GetScrollHelper: function() { },
 OnResized: function(columnIndex) { },
 NeedResizeFooterTable: function() { },
 GetStateInput: function() { },
 GetColumnNeighbor: function(columnIndex, isLeft) {
  var indices = this.GetColumnIndices();
  var index = -1;
  for(var i = 0; i < indices.length; i++) {
   if(indices[i] === columnIndex) {
    index = isLeft ? i - 1 : i + 1;
    break;
   }
  }
  if(index < 0 || index >= indices.length)
   return -1;
  return indices[index];
 },
 IsLeftmostColumn: function(columnIndex) {
  return this.GetColumnIndices()[0] === columnIndex;
 },
 IsRightmostColumn: function(columnIndex) {
  var indices = this.GetColumnIndices();
  return indices[indices.length - 1] === columnIndex;
 },
 SaveControlDimensions: function(onlyControlWidth) {
  var input = this.GetStateInput();
  if(onlyControlWidth && input.value)
   return;
  var state = { };
  var controlWidth = this.GetStylePxWidth(this.control.GetMainElement());
  if(controlWidth > -1)
   state["ctrlWidth"] = controlWidth;
  if(!onlyControlWidth) {
   var indices = this.GetColumnIndices();
   for(var i = 0; i < indices.length; i++) {
    var index = indices[i];
    state[index] = this.GetCellRealWidth(this.GetHeaderCell(index));
   }
  }
  input.value = _aspxToJson(state);
 },
 UpdateCursor: function(e, headerCell) {
  var changed = true;
  if(this.IsResizing() || this.CanStartResizing(e, headerCell))
   _aspxChangeStyleAttribute(headerCell, "cursor", "w-resize");
  else
   changed = _aspxRestoreStyleAttribute(headerCell, "cursor");
  if(__aspxIE && __aspxBrowserVersion == 9 && this.tableHelper.IsHorzAutoScroll() && changed)
   this.GetContentTable().parentNode.className = this.GenerateRandomClassName();
 },
 GetColumnInfoList: function() {
  var list = [ ];
  var indices = this.GetColumnIndices();
  for(var i = 0; i < indices.length; i++)
   list.push(this.GetColumnInfo(indices[i]));
  list.sort(function(i1, i2) { 
   var w1 = i1.minWidth;
   var w2 = i2.minWidth;
   if(w1 > w2)
    return 1;
   else if(w1 < w2)
    return -1;
   else
    return 0;
  });
  return list;
 },
 GetColumnInfo: function(columnIndex) {
  var headerCell = this.GetHeaderCell(columnIndex);
  var armCell = this.GetArmatureCell(headerCell);
  return {
   index: columnIndex,
   headerCell: headerCell,
   armCell: armCell,
   minWidth: this.GetColumnMinWidth(columnIndex),
   pxWidth: this.GetStylePxWidth(armCell),
   minWidthAssigned: armCell.minWidthAssigned
  };
 },
 ValidateColumnWidths: function() {
  if(this.HasHorzScroll()) 
   return;
  var indices = this.GetColumnIndices();
  var validationRequired = false;
  for(var i = 0; i < indices.length; i++) {
   if(this.GetColumnMinWidth(indices[i]) > 0)
    validationRequired = true;
  }
  if(!validationRequired)
   return;
  var columnInfoList = this.GetColumnInfoList();
  var totalColumnWidth = 0;
  var allColumnsHasWidth = true;
  for(var i = 0; i < columnInfoList.length && allColumnsHasWidth; i++) {
   var info = columnInfoList[i];
   allColumnsHasWidth &= info.pxWidth > 0;
   totalColumnWidth += info.pxWidth;
  }
  var tablePxWidth = this.GetStylePxWidth(this.control.GetMainElement());
  if(allColumnsHasWidth && tablePxWidth > -1 && tablePxWidth <= totalColumnWidth)
   return;
  var processedList = [ ];
  for(var i = 0; i < columnInfoList.length; i++) {
   var info = columnInfoList[i];
   if(info.minWidth > 0 && (info.pxWidth <= 0 || info.minWidthAssigned))
    processedList.push(info);
  }
  this.ValidateColumnWidthsCore(processedList);
  if(this.HasVertScroll())
   this.GetScrollHelper().Update();
 },
 ValidateColumnWidthsCore: function(columnInfoList) {
  for(var i = 0; i < columnInfoList.length; i++) {
   var info = columnInfoList[i];
   if(info.minWidthAssigned)
    info.minWidthAssigned = !this.TryRestoreColumnWidth(info);
   else
    info.minWidthAssigned = this.TryCorrectColumnWidth(info);
  }
  for(var i = 0; i < columnInfoList.length; i++) {
   var info = columnInfoList[i];
   if(!info.minWidthAssigned)
    this.TryCorrectColumnWidth(info);
  }
 },
 TryRestoreColumnWidth: function(columnInfo) {
  var armCell = columnInfo.armCell;
  armCell.style.width = armCell.savedWidth;
  if(armCell.offsetWidth <= columnInfo.minWidth) {
   armCell.style.width = columnInfo.minWidth + "px";
   return false;
  }
  this.ApplyColumnWidth(columnInfo.index, armCell.savedWidth);
  armCell.minWidthAssigned = false;
  armCell.savedWidth = null;
  return true;
 },
 TryCorrectColumnWidth: function(columnInfo) {
  var armCell = columnInfo.armCell;
  if(armCell.offsetWidth >= columnInfo.minWidth)
   return false;
  armCell.savedWidth = armCell.style.width;
  armCell.minWidthAssigned = true;
  this.ApplyColumnWidth(columnInfo.index, columnInfo.minWidth + "px");
  return true;
 },
 ResetStretchedColumnWidth: function() {
  if(this.HasHorzScroll())
   return;
  var columnIndex = this.FindStretchedColumn();
  if(columnIndex > -1)
   this.ApplyColumnWidth(columnIndex, "");
 },
 FindStretchedColumn: function() {
  var columnInfoList = this.GetColumnInfoList();
  if(columnInfoList.length == 0)
   return -1;
  for(var i = 0; i < columnInfoList.length; i++) {
   if(columnInfoList[i].pxWidth < 0)
    return -1;
  }
  var indices = this.GetColumnIndices();
  return indices[indices.length - 1];
 },
 GenerateRandomClassName: function() {
  return "dx" + Math.floor((Math.random() + 1) * 100000).toString(36);
 }
});
_aspxAttachEventToElement(window, "resize", function(e) {
 if(!document.body) return; 
 var width = document.body.offsetWidth;
 if(width == ASPxClientTableScrollHelperBase.prevBodyWidth)
  return;
 ASPxClientTableScrollHelperBase.prevBodyWidth = width;
 for(var i = 0; i < __aspxTableScrollHelpers.length; i++)
  __aspxTableScrollHelpers[i].OnWindowResize();
});
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, function(e) {
 if(__aspxTableColumnResizing != null && !(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)) {
  __aspxTableColumnResizing.OnMouseMove(e);
  return true;
 }
});
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, function(e) {
 if(__aspxTableColumnResizing != null) {
  __aspxTableColumnResizing.OnMouseUp(e);
  return true;
 }
});
ASPxClientGridViewTableHelper = _aspxCreateClass(ASPxClientTableHelperBase, {
 GridDetailIndentClassName: "dxgvDI",
 GridGroupIndentClassName: "dxgvGI",
 constructor: function(control, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll) {
  this.constructor.prototype.constructor.call(this, control, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll);
 },
 GetChildElementByID: function(idSuffix) {
  return this.control.GetChildElementById(idSuffix);
 },
 GetArmatureCellIndexByOtherCell: function(cell) {
  var grid = this.control;
  if(!grid.IsHeaderRow(cell.parentNode))
   ASPxClientTableHelperBase.prototype.GetArmatureCellIndexByOtherCell.call(this, cell);
  var columnIndex = grid.getColumnIndex(cell.id);
  return this.GetArmatureCellIndex(columnIndex);
 },
 GetArmatureCellIndex: function(columnIndex) {
  var grid = this.control;
  return grid.indentColumnCount + grid.GetHeaderMatrix().GetLeafIndex(columnIndex);
 },
 UpdateIndentCellWidths: function() {
  var indentCount = this.control.indentColumnCount;
  if(indentCount == 0)
   return;
  var info = this.GetIndentsWidth(indentCount);
  if(info.group <= 0 && info.detail <= 0)
   return;
  var tables = [this.GetHeaderTable(), this.GetContentTable(), this.GetFooterTable()];
  for(var i = 0; i < tables.length; i++) {
   var table = tables[i];
   if(!table) continue;
   var armCells = this.GetArmatureCells(table);
   for(var j = 0; j < armCells.length; j++) {
    if(j >= indentCount) 
     break;
    var width = j == indentCount - 1 && info.detail > 0 ? info.detail : info.group;
    var cell = armCells[j];
    if(this.GetStylePxWidth(cell) != width)
     cell.style.width = width + "px";
   }
  }
 },
 GetIndentsWidth: function(indentCount) {
  var grid = this.control;
  var headerRow = grid.GetHeaderRow(0);
  var groupRow = this.FindFirstVisibleRow(true);
  var dataRow = this.FindFirstVisibleRow();
  var groupButton = this.FindExpandCollapseButton(headerRow, 0) || this.FindExpandCollapseButton(dataRow, 0);
  var detailButton = this.FindExpandCollapseButton(headerRow, indentCount - 1, true) || this.FindExpandCollapseButton(dataRow, indentCount - 1, true);
  return { group : this.GetButtonWidth(groupButton), detail : this.GetButtonWidth(detailButton) };
 },
 FindExpandCollapseButton: function(row, cellIndex, isDetail) {
  if(!row || row.cells.length === 0) return;
  var rowCells = row.cells;
  var armCells = this.GetArmatureCells(row.parentNode.parentNode);
  return this.FindExpandCollapseButtonCore(rowCells[cellIndex], armCells[cellIndex], isDetail);
 },
 FindExpandCollapseButtonCore: function(cell, armCell, isDetail) {
  if(!cell || !armCell) return;
  var hasDetail = armCell.className.indexOf(this.GridDetailIndentClassName) >= 0 && isDetail;
  var hasGroup = armCell.className.indexOf(this.GridGroupIndentClassName) >= 0 && !isDetail;
  if(!hasDetail && !hasGroup) return;
  var images = _aspxGetChildNodesByTagName(cell, "IMG");
  return images.length === 1 ? images[0] : null;
 },
 FindFirstVisibleRow: function(isGroup) {
  var grid = this.control;
  var start = grid.GetTopVisibleIndex();
  var end = start + grid.GetVisibleRowsOnPage();
  for(var i = start; i < end; i++) {
   var row = isGroup ? grid.GetGroupRow(i) : grid.GetDataRow(i);
   if(row) return row;
  }
 },
 GetButtonWidth: function(button) {
  if(!button) return -1;
  return button.offsetWidth + _aspxGetLeftRightBordersAndPaddingsSummaryValue(button.parentNode);
 },
 IsRtl: function() { return this.control.rtl; }
});
ASPxClientGridViewTableResizingHelper = _aspxCreateClass(ASPxClientTableResizingHelperBase, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
 },
 IsNextColumnResizable: function() { 
  return this.control.columnResizeMode == ASPxColumnResizeMode.NextColumn; 
 },
 GetScrollHelper: function() { 
  return this.control.GetScrollHelper(); 
 },
 GetHeaderCell: function(columnIndex) { 
  return this.control.GetHeader(columnIndex); 
 },
 GetColumnIndices: function() { 
  return this.control.GetHeaderMatrix().GetLeafIndices(); 
 },
 GetColumnIndexById: function(id) { 
  return this.control.getColumnIndex(id); 
 },
 GetColumnMinWidth: function(columnIndex) {
  return this.control.columns[columnIndex].minWidth;
 },
 GetArmatureCellIndex: function(columnIndex) {
  return this.tableHelper.GetArmatureCellIndex(columnIndex);
 },
 GetColumnNeighbor: function(columnIndex, isLeft) {
  var matrix = this.control.GetHeaderMatrix();
  return matrix.GetLeaf(columnIndex, isLeft, true);
 },
 GetResizingColumnIndexCore: function(columnIndex, isLeft) {
  var matrix = this.control.GetHeaderMatrix();
  return matrix.GetLeaf(columnIndex, isLeft, isLeft);
 },
 NeedResizeFooterTable: function() {
  return !this.control.hasFooterRowTemplate;
 },
 OnResized: function(columnIndex) {
  this.control.RaiseColumnResized(this.control.columns[columnIndex]);
 },
 GetStateInput: function() {
  return this.control.GetColResizedInput();
 }
});
ASPxClientGridViewTableScrollHelper = _aspxCreateClass(ASPxClientTableScrollHelperBase, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.isVirtualScrolling = this.control.isVirtualScrolling;
  this.lockVirtualScrolling = false;
  this.virtualScrollRowHeight = -1;
  this.virtualScrollPrevPos = -1;
  this.virtualScrollTimerID = -1;
  this.virtualScrollHandler = null;
  this.useEndlessPaging = this.control.useEndlessPaging;
 },
 Update: function() {
  if(this.isVirtualScrolling)
   this.UpdateVirtualScrolling();
  if(this.useEndlessPaging)
   this.UpdateEndlessPaging();
  ASPxClientTableScrollHelperBase.prototype.Update.call(this);
 },
 UpdateScrollableControlsSize: function(onResize) {
  if(onResize && this.HasFixedColumns())
   return;
  if(this.HasFixedColumns())
   this.UpdateFixedDivSize();
  ASPxClientTableScrollHelperBase.prototype.UpdateScrollableControlsSize.call(this, onResize);
 },
 UpdateFixedDivSize: function() {
  var fixedHelper = this.control.GetFixedColumnsHelper();
  if(!fixedHelper) return;
  var divs = [
   this.GetScrollDiv(this.GetContentTable()),
   fixedHelper.GetFixedDiv()
  ];
  var mainTable = this.control.GetMainElement();
  if(this.IsOriginalWidthPercentage(mainTable)) {
   for(var i = 0; i < divs.length; i++)
    this.SetElementWidth(divs[i], 1);
   _aspxRestoreElementOriginalWidth(mainTable);
  }
  var width = mainTable.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainTable);
  if(width < 0) 
   width = 0;
  for(var i = 0; i < divs.length; i++)
   this.SetElementWidth(divs[i], width);
  fixedHelper.Update();
 },
 SetHeight: function(val) {
  if(this.useEndlessPaging)
   this.CheckEndlessPagingLoadNextPage();
  ASPxClientTableScrollHelperBase.prototype.SetHeight.call(this, val);
 },
 HasFixedColumns: function() {
  return this.control.fixedColumnCount > 0 && this.control.GetFixedColumnsDiv();
 },
 IsContentTableEmpty: function() {
  return this.control.pageRowCount < 1;
 },
 ShowTouchHorizontalScrollbar: function() {
  return this.HasHorzScroll() && !this.HasFixedColumns();
 },
 UseTouchCustomScroll: function() {
  return this.HasFixedColumns();
 },
 GetStateInput: function() {
  return this.control.GetPostBackSyncInput();
 },
 AssignPosLoggerHandler: function(element) {
  if(this.HasVertScroll() || !this.HasFixedColumns())
   ASPxClientTableScrollHelperBase.prototype.AssignPosLoggerHandler.call(this, element);
  if(this.HasFixedColumns())
   ASPxClientTableScrollHelperBase.prototype.AssignPosLoggerHandler.call(this, this.control.GetFixedColumnsDiv());
 },
 GetHorzScrollableControl: function() {
  if(this.HasFixedColumns())
   return this.control.GetFixedColumnsDiv();
  return ASPxClientTableScrollHelperBase.prototype.GetHorzScrollableControl.call(this);
 },
 IsRestoreScrollPosition: function(){
  var grid = this.control;
  if(this.savedScrollTop > -1 && this.savedScrollTop !== grid.GetVerticalScrollPosition())
   return true;
  if(this.savedScrollLeft > -1 && this.savedScrollLeft !== grid.GetHorizontalScrollPosition())
   return true;
  return false;
 },
 LoadScrollPosition: function() {
  ASPxClientTableScrollHelperBase.prototype.LoadScrollPosition.call(this);
  var grid = this.control;
  var newRowVertScrollPos = this.GetNewRowVertScrollPos();
  if(newRowVertScrollPos > -1)
   this.savedScrollTop = newRowVertScrollPos;
  if(grid.rtl && this.HasFixedColumns() && this.savedScrollLeft == 0)
   this.savedScrollLeft = 1;
 },
 ApplyScrollPosition: function() {
  if(!this.isVirtualScrolling && this.savedScrollTop > -1)
   this.SetVertScrollPosition(this.savedScrollTop);
  if(this.savedScrollLeft > -1)
   window.setTimeout(function() { this.SetHorzScrollPosition(this.savedScrollLeft); }.aspxBind(this), 0);
 },
 SetScrollPositionCore: function(element, pos, isTop) {
  this.lockVirtualScrolling = true;
  try {
   ASPxClientTableScrollHelperBase.prototype.SetScrollPositionCore.call(this, element, pos, isTop);
   if(isTop) {
    var popup = this.control.GetPopupEditForm();
    if(popup && popup.GetVisible())
     popup.UpdatePosition();
   }
  } finally {
   this.lockVirtualScrolling = false;
  }
 },
 GetNewRowVertScrollPos: function() {
  var grid = this.control;
  if(grid.IsNewRowEditing()) {
   var row = grid.GetEditingRow(grid);
   if(row)
    return !grid.IsNewRowAtBottom() ? 0 : 0x1fffffff;
  }
  return -1;
 },
 GetResizingHelper: function() { return this.control.GetResizingHelper(); },
 UpdateVirtualScrolling: function() {
  this.UpdateVirtualScrollMargins();
  if(!this.virtualScrollHandler) 
   this.virtualScrollHandler = function() { this.OnVirtualScroll(); }.aspxBind(this);
  window.setTimeout(function() { 
   _aspxAttachEventToElement(this.GetVertScrollableControl(), "scroll", this.virtualScrollHandler); 
  }.aspxBind(this), 0);
 },
 UpdateVirtualScrollMargins: function() {
  var grid = this.control;
  if(grid.pageCount < 1)
   return;
  var table = this.GetContentTable();
  var topDiv, bottomDiv;
  var prev;
  for(var i = 0; i < table.parentNode.childNodes.length; i++) {
   var child = table.parentNode.childNodes[i];
   if(child.nodeType != 1)
    continue;
   if(child == table && prev)
    topDiv = prev;
   if(prev == table) {
    bottomDiv = child;
    break;
   }
   prev = child;
  }
  var rowHeight = this.GetVirtualScrollRowHeight();
  var topMargin = grid.visibleStartIndex * rowHeight;
  var bottomMargin = (grid.pageRowSize * (grid.pageCount - grid.pageIndex - 1) + grid.pageRowSize - grid.pageRowCount) * rowHeight;
  this.PrepareVirtualScrollMarginDiv(topDiv, topMargin);
  this.PrepareVirtualScrollMarginDiv(bottomDiv, bottomMargin);
  window.setTimeout(function() {
   this.SetVertScrollPosition(topMargin);
   this.virtualScrollPrevPos = topMargin;
  }.aspxBind(this), 0);
 },
 PrepareVirtualScrollMarginDiv: function(div, height) {
  if(!div) return;
  var maxPieceHeight = 1100000;
  if(height <= maxPieceHeight) {
   div.style.height = height + "px";
  } else {
   while(height > 0) {
    var pieceHeight = height >= maxPieceHeight ? maxPieceHeight : height;
    height -= maxPieceHeight;
    var pieceDiv = document.createElement("DIV");
    pieceDiv.style.height = pieceHeight + "px";
    div.appendChild(pieceDiv);
   } 
  }
 },
 OnVirtualScroll: function() {
  this.ClearVirtualScrollTimer();
  var deferredHandler = function() { this.HandleVirtualScroll(); }.aspxBind(this);
  this.virtualScrollTimerID = window.setTimeout(deferredHandler, 1000);
 },
 HandleVirtualScroll: function() {
  var pos = this.GetVertScrollPosition();
  if(pos == this.virtualScrollPrevPos)
   return;
  this.virtualScrollPrevPos = pos;
  if(this.lockVirtualScrolling) 
   return;
  var grid = this.control;
  var index = this.GetPageIndexForVirtualScrollPos(pos);
  if(index != grid.pageIndex) {
   _aspxDetachEventFromElement(this.GetVertScrollableControl(), "scroll", this.virtualScrollHandler);
   grid.PreventCallbackAnimation();
   grid.GotoPage(index);
  }
 },
 GetPageIndexForVirtualScrollPos: function(pos) {
  var grid = this.control;
  var table = this.GetContentTable();
  var container = table.parentNode;
  var index = Math.floor(grid.pageCount * pos / container.scrollHeight);
  var tableTop = _aspxGetAbsoluteY(table);
  var containerTop = _aspxGetAbsoluteY(container);
  var tableBottom = tableTop + table.offsetHeight;
  var containerBottom = containerTop + container.clientHeight;
  if(tableTop < containerTop && tableBottom > containerTop && tableBottom <= containerBottom)
   index++;
  return Math.min(grid.pageCount - 1, index);
 },
 ClearVirtualScrollTimer: function() {
  this.virtualScrollTimerID = _aspxClearTimer(this.virtualScrollTimerID);
 },
 GetVirtualScrollRowHeight: function() {
  var grid = this.control;
  if(this.virtualScrollRowHeight < 0) {
   var dataRow = grid.GetDataRow(grid.visibleStartIndex);
   var previewRow = grid.GetPreviewRow(grid.visibleStartIndex);
   var height = dataRow ? dataRow.offsetHeight : 20;
   if(previewRow)
    height += previewRow.offsetHeight;
   this.virtualScrollRowHeight = height;
  }
  return this.virtualScrollRowHeight;
 },
 UpdateEndlessPaging: function() {
  var container = this.GetVertScrollableControl();
  if(container.dxEndlessPaging)
   return;
  _aspxAttachEventToElement(container, "scroll", function(e) { this.OnEndlessPagingScroll(e); }.aspxBind(this)); 
  container.dxEndlessPaging = true;
 },
 OnEndlessPagingScroll: function(e) {
  this.CheckEndlessPagingLoadNextPage();
 },
 CheckEndlessPagingLoadNextPage: function() {
  var grid = this.control;
  if(grid.pageIndex + 1 === grid.pageCount || grid.pageCount === 0 || grid.InCallback())
   return;
  var table = this.GetContentTable();
  var scrollDiv = this.GetScrollDiv(table);
  var contentHeight = table.offsetHeight;
  var avgPageHeight = grid.pageRowSize * contentHeight / grid.pageRowCount;
  var bottomExcess = contentHeight - scrollDiv.clientHeight - scrollDiv.scrollTop;
  if(bottomExcess < avgPageHeight / 3)
   grid.NextPage();
 }
});
ASPxClientTableFixedColumnsHelper = _aspxCreateClass(ASPxClientTableHelperAdapter, {
 constructor: function(tableHelper, fixedDivName, fixedContentDivName, fixedColumnCount){
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.FixedDivName = fixedDivName;
  this.FixedContentDivName = fixedContentDivName;
  this.FixedColumnCount = fixedColumnCount; 
  this.hiddenColumnCount = 0;
  this.touchUIScroller = null;
  this.mouseScroller = null;
  this.savedScrollPos = -1;
 },
 GetFixedDiv: function() { return this.tableHelper.GetChildElementByID(this.FixedDivName); },
 GetFixedContentDiv: function() { return this.tableHelper.GetChildElementByID(this.FixedContentDivName); },
 Update: function() {
  var contentDiv = this.GetContentTable().parentNode;
  this.AttacheEvent(this.GetFixedDiv(), "scroll", this.OnScroll);
  this.AttacheEvent(contentDiv, "scroll", function() { 
   var expectedLeft = this.control.rtl ? 0x1fffffff : 0;
   if(contentDiv.scrollLeft != expectedLeft)
    contentDiv.scrollLeft = expectedLeft;
  }.aspxBind(this));
  if(__aspxTouchUI)
   this.UpdateMouseScroller();
  if(__aspxWebKitTouchUI)
   this.UpdateTouchUIScroller();
  if(__aspxMacOSPlatform && __aspxWebKitFamily) 
   this.UpdateWheelScroller();
  this.UpdateFixedDivSize();
 },
 UpdateFixedDivSize: function() {
  var fixedDiv = this.GetFixedDiv();
  if((__aspxWebKitFamily || __aspxIE) && fixedDiv.scrollLeft == 0 && this.savedScrollPos > 0) 
   fixedDiv.scrollLeft = this.savedScrollPos;
  var fixedContentDiv = this.GetFixedContentDiv();
  var contentDivStyleWidth = fixedContentDiv.style.width;
  var contentDivStyleHeight = fixedContentDiv.style.height;
  var contentDivWidth = this.GetFixedContentDivWidth() + "px";
  var contentDivHeight = this.GetFixedContentDivHeight() + "px";
  if(contentDivStyleWidth !== contentDivWidth)
   fixedContentDiv.style.width = contentDivWidth;
  if(contentDivStyleHeight !== contentDivHeight || fixedDiv.style.height !== contentDivHeight)
   fixedContentDiv.style.height = fixedDiv.style.height = contentDivHeight;
  this.UpdateRowHeights();
 },
 GetFixedContentDivWidth: function() {
  var armCells = this.GetArmatureCells(this.GetHeaderTable() || this.GetContentTable());
  var totalWidth = 0;
  for(var i = 0; i < armCells.length; i++) {
   var width = this.GetStylePxWidth(armCells[i]);
   totalWidth += width > -1 ? width : 0;
  }
  return totalWidth;
 },
 GetFixedContentDivHeight: function() {
  var scrollHeigth = _aspxGetVerticalScrollBarWidth() + 1; 
  if(__aspxMacOSPlatform && __aspxWebKitFamily && _aspxGetVerticalScrollBarWidth() == 0) 
   scrollHeigth = 12;
  return scrollHeigth;
 },
 OnScroll: function(event) {
  var src = _aspxGetEventSource(event);
  var helper = src.fixedHelper;
  helper.savedScrollPos = src.scrollLeft;
  helper.UpdateCellsVisibility(helper.GetColumnsToHide(src.scrollLeft));
  if(helper.control.rtl && __aspxIE && __aspxBrowserVersion < 8) {
   var tables = [ helper.GetHeaderTable(), helper.GetContentTable(), helper.GetFooterTable() ];
   for(var i = 0; i < tables.length; i++) {
    if(!tables[i]) continue;
    tables[i].offsetParent.scrollLeft = 0x1fffffff;
   }
  }
 },
 AttacheEvent: function(element, eventName, eventHandler) {
  if(!element) return;
  var eventMarker = "gvfh" + eventName;
  if(element[eventMarker])
   return;
  _aspxAttachEventToElement(element, eventName, eventHandler);
  element[eventMarker] = true;
  element.fixedHelper = this;
 },
 DetacheEvent: function(element, eventName, eventHandler) {
  if(!element) return;
  _aspxDetachEventFromElement(element, eventName, eventHandler);
  var eventMarker = "gvfh" + eventName;
  element[eventMarker] = false;
  element.fixedHelper = null;
 },
 SetScrollLeft: function(target, scrollLeft) {
  if(target.scrollLeft != scrollLeft)
   target.scrollLeft = scrollLeft;
 },
 UpdateMouseScroller: function() {
  var getContentDiv = function() { return this.GetContentTable().parentNode; }.aspxBind(this);
  if(!this.mouseScroller)
   this.mouseScroller = ASPxMouseScroller.Create(
    getContentDiv,
    function() { return this.GetFixedDiv(); }.aspxBind(this),
    getContentDiv,
    function(element) { return this.control.IsHeaderChild(element); }.aspxBind(this),
    true, 
    function(e) { this.UpdateTouchScrollBars(); }.aspxBind(this),
    function(e) { this.UpdateTouchScrollBars(); }.aspxBind(this),
    function(e) { this.UpdateTouchScrollBars(true); }.aspxBind(this)
   );
  else
   this.mouseScroller.update();
 },
 UpdateTouchUIScroller: function() {
  this.touchUIScroller = this.touchUIScroller || this.CreateTouchUIScroller();
  if(!_aspxIsExistsElement(this.touchUIScroller.element))
   this.touchUIScroller.ChangeElement(this.GetFixedDiv());
 },
 CreateTouchUIScroller: function() {
  return ASPxClientTouchUI.MakeScrollable(this.GetFixedDiv(), { 
   showHorizontalScrollbar: true, 
   showVerticalScrollbar: false,
   forceCustomScroll: true
  });
 },
 UpdateTouchScrollBars: function(hide) {
  if(!this.touchUIScroller) 
   return;
  if(hide) {
   this.touchUIScroller.hideScrollBars();
  } else {
   this.touchUIScroller.updateScrollHandles();
   this.touchUIScroller.showScrollBars();
  }
 },
 UpdateWheelScroller: function() {
  var contentDiv = this.GetContentTable().parentNode;
  if(this.wheelHandler)
   _aspxDetachEventFromElement(contentDiv, "mousewheel", this.wheelHandler);
  this.wheelHandler = this.wheelHandler || this.CreateWheelHandler();
  _aspxAttachEventToElement(contentDiv, "mousewheel", this.wheelHandler);
 },
 CreateWheelHandler: function() {
  return function(e) {
   if(!e.wheelDeltaX) 
    return;
   var fixedDiv = this.GetFixedDiv();
   var delta = e.wheelDeltaX / 120;
   var leftDirection = delta > 0;
   var isLeftmost = fixedDiv.scrollLeft == 0;
   var isRightmost = fixedDiv.scrollLeft + fixedDiv.offsetWidth == fixedDiv.scrollWidth
   if(leftDirection && isLeftmost || !leftDirection && isRightmost)
    return;
   fixedDiv.scrollLeft += -1 * delta * 100;
   return _aspxPreventEvent(e);
  }.aspxBind(this);
 },
 GetColumnsToHide: function(pos) {
  var grid = this.control;
  var indices = grid.GetHeaderMatrix().GetLeafIndices();
  if(grid.rtl) {
   pos = this.GetFixedContentDiv().scrollWidth - pos - grid.GetMainElement().offsetWidth;
   if(grid.HasVertScroll())
    pos += _aspxGetVerticalScrollBarWidth();
  }
  var i;
  var width = 0;
  for(i = this.FixedColumnCount; i < indices.length; i ++) {
   if(width >= pos) break;    
   width += this.GetCellRealWidth(grid.GetHeader(indices[i]));
  }
  return i - this.FixedColumnCount;
 },
 UpdateCellsVisibility: function(columnsToHide) {
  if(this.hiddenColumnCount == columnsToHide)
   return;
  var prevHiddenColumnCount = this.hiddenColumnCount;
  this.hiddenColumnCount = columnsToHide;
  var startIndex = Math.min(prevHiddenColumnCount, this.hiddenColumnCount) + this.FixedColumnCount;
  var endIndex = Math.max(prevHiddenColumnCount, this.hiddenColumnCount) + this.FixedColumnCount;
  var display = this.hiddenColumnCount - prevHiddenColumnCount > 0 ? "none" : "";
  var tables = [ this.GetHeaderTable(), this.GetContentTable(), this.GetFooterTable() ];
  for(var tableIndex = 0; tableIndex < tables.length; tableIndex++) {
   var table = tables[tableIndex];
   if(!table)
    continue;
   var armCells = this.GetArmatureCells(table);
   for(var i = startIndex; i < endIndex; i++)
    armCells[i].style.display = display;
   for(var rowIndex = 0; rowIndex < table.rows.length; rowIndex++) {
    var row = table.rows[rowIndex];
    if(this.control.IsHeaderRow(row))
     continue;
    this.ChangeCellsVisibility(row, startIndex, endIndex - 1, display);
   }
  }
  this.UpdateHeadersVisibility();
 },
 ChangeCellsVisibility: function(row, startIndex, endIndex, display) { 
  for(var i = startIndex; i <= endIndex; i++) {
   if(!row.cells[i])
    break;
   row.cells[i].style.display = display;
  }
 },
 UpdateHeadersVisibility: function() {
  var grid = this.control;
  var matrix = grid.GetHeaderMatrix();
  var totalSpans = { };
  var hiddenSpans = { };
  for(var rowIndex = 0; rowIndex < matrix.GetRowCount(); rowIndex++) {
   var indices = matrix.GetRowIndices(rowIndex);
   for(var i = this.FixedColumnCount; i < indices.length; i++) {
    var columnIndex = indices[i];
    if(isNaN(totalSpans[columnIndex])) totalSpans[columnIndex] = 0;
    if(isNaN(hiddenSpans[columnIndex])) hiddenSpans[columnIndex] = 0;
    totalSpans[columnIndex]++;
    if(i < this.FixedColumnCount + this.hiddenColumnCount)
     hiddenSpans[columnIndex]++;
   }
  }  
  for(var i = 0; i < grid.columns.length; i++) {
   var columnIndex = grid.columns[i].index;
   if(isNaN(totalSpans[columnIndex]))
    continue;
   var visible = totalSpans[columnIndex] > hiddenSpans[columnIndex];
   var header = grid.GetHeader(columnIndex);
   header.style.display = visible ? "" : "none";
   if(visible && matrix.GetRowCount() > 1)
    header.colSpan = Math.max(1, (totalSpans[columnIndex] - hiddenSpans[columnIndex]) / matrix.GetRowSpan(columnIndex));
  }
 },
 UpdateRowHeights: function() {
  var rows = this.GetRowsForHeightCorrection();
  var skipCorrection = true;
  for(var i = 0; i < rows.length; i++)
   skipCorrection &= !!rows[i].heightCorrected;
  if(skipCorrection)
   return;
  var savedColumnsToHide = this.hiddenColumnCount;
  if(savedColumnsToHide !== 0)
   this.UpdateCellsVisibility(0);
  this.UpdateRowHeightsCore(rows);
  if(savedColumnsToHide !== 0)
   this.UpdateCellsVisibility(savedColumnsToHide);
  for(var i = 0; i < rows.length; i++)
   rows[i].heightCorrected = true;
 },
 UpdateRowHeightsCore: function(rows) {
  ASPxGridViewFixedColumnsStyleSheetHelper.Instance.BeginUpdate();
  var styleSheetRules = this.GetStyleSheetRulesForHeightCorrection(rows);
  ASPxGridViewFixedColumnsStyleSheetHelper.Instance.ChangeRules(this.control, styleSheetRules);
  ASPxGridViewFixedColumnsStyleSheetHelper.Instance.EndUpdate();
 },
 GetRowsForHeightCorrection: function() {
  var tables = [ this.GetHeaderTable(), this.GetContentTable(), this.GetFooterTable() ];
  var rows = [ ];
  for(var tableIndex = 0; tableIndex < tables.length; tableIndex++) {
   var table = tables[tableIndex];
   if(!table) continue;
   for(var i = 0; i < table.rows.length; i++)
    rows.push(table.rows[i]);
  }
  return rows;
 },
 GetStyleSheetRulesForHeightCorrection: function(rows) {
  var selectors = { };
  var selectorMask = [ "#", "id", " > ", "td", ".dxgvHEC" ];
  if(__aspxIE && __aspxBrowserVersion < 8)
   selectorMask[2] = " ";
  for(var i = 0; i < rows.length; i++) {
   var row = rows[i];
   if(row.cells.length < 1 || !row.id)
    continue;
   var cell = row.cells[row.cells.length - 1];
   var h = cell.offsetHeight;
   if(h <= 0) continue;
   if(!selectors[h])
    selectors[h] = [ ];
   var selectorArgs = selectorMask.slice(0);
   selectorArgs[1] = row.id;
   selectors[h].push(selectorArgs.join(""));
  }
  var rules = [ ];
  for(var height in selectors)
   rules.push({ 
    selector: selectors[height].join(", "), 
    cssText: "height:" + height + "px"
   });
  return rules;
 },
 TryShowColumn: function(columnIndex, showFullRect) {
  if(!_aspxIsExists(columnIndex) || columnIndex < 0) 
   return false;
  var grid = this.control;
  var matrix = grid.GetHeaderMatrix();
  var index =  matrix.GetLeafIndex(columnIndex);
  if(index < this.FixedColumnCount)
   return false;
  var hiddenColumnCount = this.CalcHiddenColumnCount(columnIndex, showFullRect);
  if(this.hiddenColumnCount === hiddenColumnCount)
   return false;
  var columnsWidth = this.GetHiddenColumnsTotalWidth(hiddenColumnCount);
  var scrollLeft = columnsWidth > 10 ? columnsWidth - 10 : 0;
  this.UpdateCellsVisibility(hiddenColumnCount);
  this.control.SetHorizontalScrollPosition(scrollLeft);
  return true;
 },
 CalcHiddenColumnCount: function(visibleColumnIndex, showFullRect) {
  var grid = this.control;
  var matrix = grid.GetHeaderMatrix();
  var columnIndices = matrix.GetLeafIndices();
  var scrollDivWidth = this.GetContentTable().parentNode.offsetWidth;
  var fixedWidth = 0;
  var columnWidths = [ ];
  for(var i = 0; i < columnIndices.length; i++) {
   var width = this.GetCellRealWidth(grid.GetHeader(columnIndices[i]));
   columnWidths[i] = width;
   if(i < this.FixedColumnCount)
    fixedWidth += width;
  }
  var scrolledPartWidth = scrollDivWidth - fixedWidth;
  var start = this.FixedColumnCount + this.hiddenColumnCount;
  var end = this.GetLastColumnIndexFromBound(columnWidths, scrolledPartWidth, start, showFullRect);
  var index =  matrix.GetLeafIndex(visibleColumnIndex);
  var inc = index > start ? 1 : -1;
  while(index < start || index > end) {
   start += inc;
   end = this.GetLastColumnIndexFromBound(columnWidths, scrolledPartWidth, start, showFullRect);
   if(end === columnIndices.length - 1)
    break;
  }
  return start - this.FixedColumnCount;
 },
 GetLastColumnIndexFromBound: function(columnWidths, rectWidth, start, allowRightBound) {
  for(var i = start; i < columnWidths.length; i++) {
   rectWidth -= columnWidths[i];
   if(rectWidth > 0) continue;
   if(allowRightBound && rectWidth !== 0) 
    i--
   return i;
  }
  return columnWidths.length - 1;
 },
 GetHiddenColumnsTotalWidth: function(hiddenColumnCount) {
  var totalWidth = 0;
  var grid = this.control;
  var indices = grid.GetHeaderMatrix().GetLeafIndices();
  for(var i = 0; i < hiddenColumnCount; i++)
   totalWidth += this.GetCellRealWidth(grid.GetHeader(indices[i + this.FixedColumnCount]));
  return totalWidth;
 },
 SaveCallbackSettings: function() {
  this.savedScrollPos = -1;
 },
 RestoreCallbackSettings: function() {
  if(this.control.IsLastCallbackProcessedAsEndless())
   return;
  this.FixedColumnCount = this.control.fixedColumnCount;
  this.hiddenColumnCount = 0;
 },
 HideColumnsRelyOnScrollPosition: function() {
  var scrollHelper = this.control.GetScrollHelper();
  var columnsToHide = this.GetColumnsToHide(scrollHelper.savedScrollLeft);
  this.UpdateCellsVisibility(columnsToHide);
 },
 GetHiddenColumns: function() {
  var result = [ ];
  var indices = this.control.GetHeaderMatrix().GetLeafIndices();
  var start = this.FixedColumnCount;
  var end = start + this.hiddenColumnCount - 1;
  for(var i = start; i <= end; i++)
   result.push(indices[i]);
  return result;
 }
});
ASPxGridViewFixedColumnsStyleSheetHelper = _aspxCreateClass(null, {
 constructor: function() {
  this.styleSheet = null;
  this.rules = { };
  this.updateLock = 0;
 },
 ChangeRules: function(control, rules) {
  if(control.name && rules)
   this.rules[control.name] = rules
 },
 BeginUpdate: function() {
  this.updateLock++;
  if(this.styleSheet)
   _aspxRemoveElement(this.styleSheet);
 },
 EndUpdate: function() {
  this.updateLock--;
  if(this.updateLock !== 0)
   return;
  var styleArgs = [ ];
  for(var key in this.rules) {
   var controlRules = this.rules[key];
   for(var i = 0; i < controlRules.length; i++) {
    var rule = controlRules[i];
    styleArgs.push(rule.selector + " { " + rule.cssText + " } ");
   }
  }
  this.styleSheet = this.CreateStyleSheet(styleArgs.join(""));
 },
 CreateStyleSheet: function(cssText) {
  var container = document.createElement("DIV");
  _aspxSetInnerHtml(container, "<style type='text/css'>" + cssText + "</style>");
  styleSheet = _aspxGetChildByTagName(container, "style", 0);
  if(styleSheet) 
   _aspxGetChildByTagName(document, "HEAD", 0).appendChild(styleSheet);
  return styleSheet;
 }
});
ASPxGridViewFixedColumnsStyleSheetHelper.Instance = new ASPxGridViewFixedColumnsStyleSheetHelper();
ASPxClientPagerIDSuffix = {
 PageSizeBox: "PSB",
 PageSizeButton: "DDB",
 PageSizePopup: "PSP"
};
ASPxClientPager = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.hasOwnerControl = false;
  this.originalWidth = null;
  this.containerOffsetWidth = 0;
  this.droppedDown = false;
  this.pageSizeItems = [];
  this.pageSizeSelectedItem = null;
  this.pageSizeChangedHandler = new ASPxClientEvent();
  this.pageSizeChangeHandled = false;
 },
 InlineInitialize: function() {
  this.originalWidth = this.GetMainElement().style.width;
  ASPxClientControl.prototype.InlineInitialize.call(this);
 },
 Initialize: function () {
  ASPxClientControl.prototype.Initialize.call(this);
  aspxGetPagersCollection().Add(this);
 },
 BrowserWindowResizeSubscriber: function() {
  return ASPxClientControl.prototype.BrowserWindowResizeSubscriber.call(this) || this.hasOwnerControl;
 },
 OnBrowserWindowResize: function (evt) {
  this.AdjustControl();
 },
 GetAdjustedSizes: function() {
  if(this.hasOwnerControl){
   var mainElement = this.GetMainElement();
   if(mainElement) 
    return { width: mainElement.parentNode.offsetWidth, height: mainElement.parentNode.offsetHeight };
  }
  return ASPxClientControl.prototype.GetAdjustedSizes.call(this);
 },
 AdjustControlCore: function () {
  this.CorrectVerticalAlignment(_aspxClearHeight, this.GetButtonElements, "Btns");
  this.CorrectVerticalAlignment(_aspxClearVerticalMargins, this.GetButtonImages, "BtnImgs");
  this.CorrectVerticalAlignment(_aspxClearVerticalMargins, this.GetSeparatorElements, "Seps");
  this.containerOffsetWidth = this.GetContainerWidth();
  var savedDroppedDown = false;
  if(this.droppedDown && this.GetPageSizePopupMenu()){
   this.HidePageSizeDropDown();
   savedDroppedDown = true;
  }
  if(_aspxIsPercentageSize(this.originalWidth))
   this.AdjustControlItems();
  else if(this.hasOwnerControl)
   this.AdjustControlAlign();
  if(savedDroppedDown)
   this.ShowPageSizeDropDown();
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPageSizeButtonElement, "PSB");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPageSizeButtonImage, "PSBImg");
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetButtonElements, "Btns");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetButtonImages, "BtnImgs");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetSeparatorElements, "Seps");
 },
 AdjustControlMinWidth: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) mainElement.style.minWidth = (this.GetItemsWidth(mainElement) + _aspxGetLeftRightPaddings(mainElement)) + "px";
 },
 AdjustControlAlign: function() {
  this.AdjustControlMinWidth();
  var mainElement = this.GetMainElement();
  if(mainElement.parentNode && mainElement.parentNode.tagName === "TD"){
   var parentCurrentStyle = _aspxGetCurrentStyle(mainElement);
   if(mainElement.parentNode.align === "right" || parentCurrentStyle.textAlign === "right")
    _aspxSetElementFloat(mainElement, this.rtl ? "left" : "right");
   else if(mainElement.parentNode.align === "center" || parentCurrentStyle.textAlign === "center") {
    if(this.rtl)
     mainElement.style.marginRight = ((mainElement.parentNode.clientWidth - mainElement.offsetWidth) / 2) + "px";
    else
     mainElement.style.marginLeft = ((mainElement.parentNode.clientWidth - mainElement.offsetWidth) / 2) + "px";
   }
  }
 },
 AdjustControlItems: function() {
  var mainElement = this.GetMainElement();
  mainElement.style.width = this.originalWidth;
  var spacers = [];
  for(var i = 0; i < mainElement.childNodes.length; i++){
   var itemElement = mainElement.childNodes[i];
   if(!itemElement.tagName) continue;
   if(itemElement.className === "dxp-spacer"){
    spacers.push(itemElement);
    itemElement.style.width = "0px";
   }
  }
  this.AdjustControlMinWidth();
  if(spacers.length > 0) {
   var clientWidth = mainElement.clientWidth - _aspxGetLeftRightPaddings(mainElement);
   var spacerWidth = Math.floor((clientWidth - this.GetItemsWidth(mainElement)) / spacers.length);
   var makeItemsFloatRight = false;
   var rightItems = [];
   for(var i = 0; i < mainElement.childNodes.length; i++){
    var itemElement = mainElement.childNodes[i];
    if(!itemElement.tagName) continue;
    if(itemElement.className === "dxp-spacer"){
     if(itemElement == spacers[spacers.length - 1])
      makeItemsFloatRight = true;
     else
      itemElement.style.width = spacerWidth + "px";
    }
    else if(makeItemsFloatRight){
     if(!this.IsAdjusted())
      rightItems.push(itemElement);
    }
   }
   this.AdjustRightFloatItems(rightItems, _aspxGetLeftRightPaddings(mainElement));
   this.AdjustControlMinWidth();
  }
 },
 AdjustRightFloatItems: function(items, rightMargin) {
  for(var i = 0; i < items.length; i++) {
   if(i > 0)
    items[i].parentNode.insertBefore(items[i], items[i - 1]);
   items[i].className += " dxp-right";
   if(__aspxIE && __aspxBrowserMajorVersion == 7) {
    if(i === items.length - 1)  
     items[i].style.marginRight = rightMargin + "px";
   }
  }
 },
 GetItemsWidth: function(mainElement) {
  var width = 0;
  for(var i = 0; i < mainElement.childNodes.length; i++)
   width += this.GetItemWidth(mainElement.childNodes[i]);
  return width;
 },
 GetItemWidth: function(item) {
  if(!item || !item.tagName) 
   return 0;
  var style = _aspxGetCurrentStyle(item);
  var margins = _aspxPxToInt(style.marginLeft) + _aspxPxToInt(style.marginRight);
  if(__aspxIE && __aspxBrowserVersion > 8)
   return _aspxPxToFloat(window.getComputedStyle(item, null).width) + _aspxGetLeftRightBordersAndPaddingsSummaryValue(item) + margins;
  return item.offsetWidth + margins;
 },
 GetContainerWidth: function () {
  var mainElement = this.GetMainElement();
  if (mainElement && mainElement.parentNode)
   return mainElement.parentNode.offsetWidth;
  return 0;
 },
 GetPageSizeBoxID: function() {
  return this.name + "_" + ASPxClientPagerIDSuffix.PageSizeBox;
 },
 GetPageSizeButtonID: function() {
  return this.name + "_" + ASPxClientPagerIDSuffix.PageSizeButton;
 },
 GetPageSizePopupMenuID: function() {
  return this.name + "_" + ASPxClientPagerIDSuffix.PageSizePopup;
 },
 GetPageSizeBoxElement: function() {
  return _aspxGetElementById(this.GetPageSizeBoxID());
 },
 GetPageSizeButtonElement: function() {
  return _aspxGetElementById(this.GetPageSizeButtonID());
 },
 GetPageSizeButtonImage: function() {
  return _aspxGetChildByTagName(this.GetPageSizeButtonElement(), "IMG", 0);
 },
 GetPageSizeInputElement: function() {
  return _aspxGetChildByTagName(this.GetPageSizeBoxElement(), "INPUT", 0);
 },
 GetPageSizePopupMenu: function() {
  return aspxGetControlCollection().Get(this.GetPageSizePopupMenuID());
 },
 GetButtonElements: function() {
  return _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxp-button");
 },
 GetButtonImages: function() {
  var images = [];
  var buttons = this.GetButtonElements();
  for(var i = 0; i < buttons.length; i++){
   var img = _aspxGetChildByTagName(buttons[i], "IMG", 0);
   if(img) images.push(img);
  }
  return images;
 },
 GetSeparatorElements: function() {
  return _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxp-sep");
 },
 TogglePageSizeDropDown: function() {
  if(!this.droppedDown)
   this.ShowPageSizeDropDown();
  else
   this.HidePageSizeDropDown();
 },
 ShowPageSizeDropDown: function() {
  this.GetPageSizePopupMenu().Show();
  this.droppedDown = true;
 },
 HidePageSizeDropDown: function() {
  this.GetPageSizePopupMenu().Hide();
  this.droppedDown = false;
 },
 ChangePageSizeInput: function(isNext) {
  var input = this.GetPageSizeInputElement();
  var index = this.GetPageSizeIndexByText(input.value);
  var count = this.pageSizeItems.length;
  if(isNext)
   index = (index < count - 1) ? (index + 1) : 0;
  else
   index = (index > 0) ? (index - 1) : (count - 1);
  input.value = this.pageSizeItems[index].text;
 },
 ChangePageSizeValue: function(value) {
  this.GetPageSizeInputElement().value = this.GetPageSizeTextByValue(value);
 },
 IsPageSizeValueChanged: function() {
  var newValue = this.GetPageSizeValueByText(this.GetPageSizeInputElement().value);
  return newValue != this.pageSizeSelectedItem.value;
 },
 OnDocumentOnClick: function(evt) {
  var srcElement = _aspxGetEventSource(evt);
  if(srcElement != this.GetPageSizeBoxElement() && _aspxGetParentById(srcElement, this.GetPageSizeBoxID()) == null) {
   this.droppedDown = false;
  }
 },
 OnPageSizeClick: function(evt) {
  var self = this;
  window.setTimeout(function(){
   self.TogglePageSizeDropDown();
  }, 0);
  _aspxSetFocus(this.GetPageSizeInputElement());
 },
 OnPageSizePopupItemClick: function(value) {
  this.ChangePageSizeValue(value);
  if(this.IsPageSizeValueChanged())
   this.OnPageSizeValueChanged();
 },
 OnPageSizeBlur: function(evt) {
  if(this.IsPageSizeValueChanged())
   this.OnPageSizeValueChanged();
 },
 OnPageSizeKeyDown: function(evt) {
  var keyCode = _aspxGetKeyCode(evt);
  if(keyCode == ASPxKey.Down || keyCode == ASPxKey.Up) {
   if(evt.altKey)
    this.TogglePageSizeDropDown();
   else
    this.ChangePageSizeInput(keyCode == ASPxKey.Down);
   if(this.droppedDown) {
    var popupMenu = this.GetPageSizePopupMenu();
    var value = this.GetPageSizeValueByText(this.GetPageSizeInputElement().value);
    var item = popupMenu.GetItemByName(value);
    popupMenu.SetSelectedItem(item);
    _aspxPreventEvent(evt);
   }
  }
  else if(keyCode == ASPxKey.Enter) {
   if(this.IsPageSizeValueChanged())
    this.OnPageSizeValueChanged();
   else
    this.HidePageSizeDropDown();
   return _aspxPreventEventAndBubble(evt);
  }
  else if(keyCode == ASPxKey.Tab) {
   this.HidePageSizeDropDown();
  }
  else if(keyCode == ASPxKey.Esc) {
   this.HidePageSizeDropDown();
   this.GetPageSizeInputElement().value = this.pageSizeSelectedItem.text;
  }
  return true;
 },
 OnPageSizeValueChanged: function() {
  if(this.pageSizeChangeHandled)
   return;
  var value = this.GetPageSizeValueByText(this.GetPageSizeInputElement().value);
  if (!this.pageSizeChangedHandler.IsEmpty()) {
   this.pageSizeChangeHandled = true;
   var popupMenu = this.GetPageSizePopupMenu();
   var menuItem = popupMenu.GetItemByName(value);
   var menuItemElement = popupMenu.GetItemElement(menuItem.index);
   var command = ASPxClientPagerIDSuffix.PageSizePopup + value;
   var args = new ASPxClientPagerPageSizeChangedEventArgs(menuItemElement, command);
   this.pageSizeChangedHandler.FireEvent(this, args);
  }
 },
 GetPageSizeIndexByText: function(text) {
  var count = this.pageSizeItems.length;
  for(var i = 0; i < count; i++) {
   if(text == this.pageSizeItems[i].text)
    return i;
  }
  return -1;
 },
 GetPageSizeTextByValue: function(value) {
  var count = this.pageSizeItems.length;
  for(var i = 0; i < count; i++) {
   if(value == this.pageSizeItems[i].value)
    return this.pageSizeItems[i].text;
  }
  return value.toString();
 },
 GetPageSizeValueByText: function(text) {
  var count = this.pageSizeItems.length;
  for(var i = 0; i < count; i++) {
   if(text == this.pageSizeItems[i].text)
    return this.pageSizeItems[i].value;
  }
  return this.pageSizeSelectedItem.value;
 }
});
ASPxClientPagerPageSizeChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(element, value) {
  this.constructor.prototype.constructor.call(this);
  this.element = element;
  this.value = value;
 }
});
var __aspxPagersCollection = null;
function aspxGetPagersCollection() {
 if(__aspxPagersCollection == null)
  __aspxPagersCollection  = new ASPxClientPagersCollection();
 return __aspxPagersCollection;
}
_aspxAttachEventToDocument("click", aspxPagerDocumentOnClick);
function aspxPagerDocumentOnClick(evt){
 return aspxGetPagersCollection().OnDocumentOnClick(evt);
}
ASPxClientPagersCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 OnDocumentOnClick: function(evt) {
  this.ForEachControl(function(control){
   control.OnDocumentOnClick(evt);
  });
 }
});
function _aspxPGNavCore(element) {
 if(element != null) {
  if(element.tagName != "A") {
   var linkElement = _aspxGetChildByTagName(element, "A", 0);
   if(linkElement != null) 
    _aspxNavigateByLink(linkElement);
  }
 }
}
function _aspxPGNav(evt) {
 var element = _aspxGetEventSource(evt);
 _aspxPGNavCore(element);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
function aspxPOnPageSizeChanged(s, e) {
 s.SendPostBack(e.value);
}
function aspxPOnSeoPageSizeChanged(s, e) {
 _aspxPGNavCore(e.element);
}
function aspxPOnPageSizeBlur(name, evt) {
 var pager = aspxGetControlCollection().Get(name);
 if(pager != null)
  pager.OnPageSizeBlur(evt);
 return true;
}
function aspxPOnPageSizeKeyDown(name, evt) {
 var pager = aspxGetControlCollection().Get(name);
 if(pager != null)
  return pager.OnPageSizeKeyDown(evt);
 return true;
}
function aspxPOnPageSizeClick(name, evt) {
 var pager = aspxGetControlCollection().Get(name);
 if(pager != null)
  pager.OnPageSizeClick(evt);
}
function aspxPOnPageSizePopupItemClick(name, item) {
 var pager = aspxGetControlCollection().Get(name);
 if(pager != null) {
  pager.OnPageSizePopupItemClick(item.name);
 }
}
(function () {
 ASPxClientDataViewIDSuffix = {
  PagerTopPosition: "_PGT",
  PagerBottomPosition: "_PGB"
 };
 var ASPxClientDataView = _aspxCreateClass(ASPxClientControl, {
  EndlessPagingMode: {
   Disabled: 0,
   OnClick: 1,
   OnScroll: 2
  },
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.callbackPrefixes = { Custom: "c", PagerClick: "p" };
   this.supportGestures = true;
   this.endlessPagingHelper = null;
   ASPxClientDataViewCollection.add(this);
  },
  Initialize: function () {
   ASPxClientControl.prototype.Initialize.call(this);
   var helper = this.GetEndlessPagingHelper();
   if(helper) helper.Initialize();
   this.UpdateItemsScroller();
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   this.ChangeEndlessPagingContainerVisiblity();
  },
  AdjustControlCore: function () {
   this.AdjustPagerControls();
  },
  OnBrowserWindowResize: function (evt) {
   this.AdjustControl();
  },
  GetMainElement: function () { 
   if (__aspxIE && __aspxBrowserMajorVersion < 8) {
    if (!_aspxIsExistsElement(this.mainElement)) {
     var name = this.name;
     var predicate = function (e) { return e.id == name && e.tagName == 'TABLE' };
     this.mainElement = _aspxGetDescendantNodes(document.body, predicate)[0];
    }
    return this.mainElement;
   }
   return ASPxClientControl.prototype.GetMainElement.call(this);
  },
  GetPagerStateInputElement: function () {
   return _aspxGetElementById(this.name + "_S");
  },
  GetContentCell: function () {
   return this.GetChild("_CCell");
  },
  GetItemsCell: function () {
   return this.GetChild("_ICell");
  },
  GetItemsScroller: function () {
   return this.GetChild("_IScroller");
  },
  GetEndlessPagingContainer: function () {
   return this.GetChild("_EPContainer");
  },
  GetTopPagerControl: function () {
   return window[this.name + ASPxClientDataViewIDSuffix.PagerTopPosition];
  },
  GetBottomPagerControl: function () {
   return window[this.name + ASPxClientDataViewIDSuffix.PagerBottomPosition];
  },
  DoPagerClick: function (value) {
   this.AssignSlideAnimationDirectionByPagerArgument(value, this.GetPageIndex());
   var endlessPagingHelper = this.GetEndlessPagingHelper();
   if (endlessPagingHelper)
    endlessPagingHelper.OnDoPagerClick(value);
   var preparedArgs = this.PrepareCallbackArgs(this.GetPageIndex() + __aspxCallbackSeparator + this.GetPageSize() + __aspxCallbackSeparator + value, false);
   this.CreateCallback(preparedArgs, "PAGERCLICK");
  },
  CanHandleGesture: function (evt) {
   var source = _aspxGetEventSource(evt);
   return _aspxGetIsParent(this.GetItemsCell(), source);
  },
  AllowStartGesture: function () {
   return ASPxClientControl.prototype.AllowStartGesture.call(this) &&
    (this.AllowExecutePagerGesture(this.GetPageIndex(), this.GetPageCount(), 1) || this.AllowExecutePagerGesture(this.GetPageIndex(), this.GetPageCount(), -1));
  },
  AllowExecuteGesture: function (value) {
   return this.AllowExecutePagerGesture(this.GetPageIndex(), this.GetPageCount(), value);
  },
  ExecuteGesture: function (value, count) {
   this.ExecutePagerGesture(this.GetPageIndex(), this.GetPageCount(), value, count, function (arg) { this.DoPagerClick(arg); }.aspxBind(this));
  },
  AssignSlideAnimationDirectionByPagerArgument: function (arg, currentPageIndex) {
   if (this.UseEndlessPaging()) return;
   ASPxClientControl.prototype.AssignSlideAnimationDirectionByPagerArgument.call(this, arg, currentPageIndex);
  },
  CustomCallback: function (args) {
   var preparedArgs = this.PrepareCallbackArgs(args, true);
   if (!this.callBack) {
    if (this.isInitialized)
     this.SendPostBack(preparedArgs);
    return;
   }
   this.CreateCallback(preparedArgs, "CUSTOMCALLBACK");
  },
  OnCallback: function (result) {
   var areStatesEqual = this.GetPageIndex() == result.index && this.GetPageSize() == result.size;
   var inputElement = this.GetPagerStateInputElement();
   if (inputElement != null)
    inputElement.value = [result.index, result.size, result.count, result.epMode].join(";");
   var isEndlessPagingCallback = result.epHtml != undefined;
   if (this.UseEndlessPaging() && isEndlessPagingCallback) {
    var helper = this.GetEndlessPagingHelper();
    if (helper && !areStatesEqual)
     helper.OnCallback(result.html, result.epHtml, result.layout == 0);
   } else {
    var element = this.GetContentCell();
    if (element != null)
     _aspxSetInnerHtml(element, result.html);
   }
  },
  DoEndCallback: function () {
   ASPxClientControl.prototype.DoEndCallback.call(this);
   var helper = this.GetEndlessPagingHelper();
   if (helper) helper.DoEndCallback();
   this.UpdateItemsScroller();
  },
  CreateCallback: function (arg, command, callbackInfo) {
   this.ShowLoadingElements();
   ASPxClientControl.prototype.CreateCallback.call(this, arg, command);
  },
  PrepareCallbackArgs: function (args, isCustomCallback) {
   return (isCustomCallback ? this.callbackPrefixes.Custom : this.callbackPrefixes.PagerClick) + args;
  },
  ShowLoadingPanel: function () {
   var endlessPagingHelper = this.GetEndlessPagingHelper();
   var endlessContainer = this.GetEndlessPagingContainer();
   if (!endlessPagingHelper || !endlessPagingHelper.NeedShowLoadingPanelAtBottom() || !endlessContainer) {
    this.CreateLoadingPanelWithAbsolutePosition(this.GetContentCell(), this.GetLoadingPanelOffsetElement(this.GetContentCell()));
    return;
   }
   var nodes = endlessContainer.childNodes;
   for (var i = 0; i < nodes.length; i++)
    _aspxRemoveElement(nodes[i]);
   this.CreateLoadingPanelWithoutBordersInsideContainer(endlessContainer);
  },
  ShowLoadingDiv: function () {
   this.CreateLoadingDiv(this.GetContentCell());
  },
  GetCallbackAnimationElement: function () {
   var itemsCell = this.GetItemsCell();
   if (itemsCell)
    return itemsCell.firstChild;
   return null;
  },
  GetEndlessPagingMode: function () {
   var inputElement = this.GetPagerStateInputElement();
   if (inputElement) {
    var state = inputElement.value.split(";");
    if (state.length > 3)
     return parseInt(state[3]);
   }
   return this.EndlessPagingMode.Disabled;
  },
  UseEndlessPaging: function () {
   return !!this.GetEndlessPagingMode();
  },
  GetEndlessPagingHelper: function () {
   if (!this.UseEndlessPaging())
    return;
   if (!this.endlessPagingHelper)
    this.endlessPagingHelper = new ASPxClientDataViewEndlessPagingHelper(this);
   return this.endlessPagingHelper;
  },
  ChangeEndlessPagingContainerVisiblity: function () {
   var epContainer = this.GetEndlessPagingContainer();
   if (epContainer && epContainer.parentNode) {
    var isEPContainerVisible = !!epContainer.innerHTML && !(new RegExp(/^\s+$/).test(epContainer.innerHTML));
    _aspxSetElementDisplay(epContainer.parentNode, isEPContainerVisible);
   }
  },
  OnBrowserWindowResize: function(evt){
   ASPxClientControl.prototype.OnBrowserWindowResize.call(this, evt);
   var helper = this.GetEndlessPagingHelper();
   if(helper)  helper.LoadNextPageIfRequired();
   this.UpdateItemsScroller();
  },
  OnScroll: function(evt){
   var helper = this.GetEndlessPagingHelper();
   if(helper) helper.LoadNextPageIfRequired();
  },
  UpdateItemsScroller: function(){
   var scroller = this.GetItemsScroller();
   if(scroller){
    var scrollerParent = scroller.parentNode;
    scroller.style.height = "0px";
    scroller.style.height = (scrollerParent.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(scrollerParent)) + "px";
   }
  },
  SetHeight: function(height) {
   ASPxClientControl.prototype.SetHeight.call(this, height);
   this.UpdateItemsScroller();
  },
  GotoPage: function (pageIndex) {
   this.DoPagerClick(ASPxClientPagerCommands.PageNumber + pageIndex);
  },
  GetPageIndex: function () {
   var inputElement = this.GetPagerStateInputElement();
   if (inputElement != null)
    return parseInt(inputElement.value.split(";")[0]);
   return 0;
  },
  GetPageSize: function () {
   var inputElement = this.GetPagerStateInputElement();
   if (inputElement != null)
    return parseInt(inputElement.value.split(";")[1]);
   return 0;
  },
  SetPageSize: function (pageSize) {
   this.DoPagerClick(ASPxClientPagerCommands.PageSize + pageSize);
  },
  GetPageCount: function () {
   var inputElement = this.GetPagerStateInputElement();
   if (inputElement != null)
    return parseInt(inputElement.value.split(";")[2]);
   return 0;
  },
  NextPage: function () {
   this.DoPagerClick(ASPxClientPagerCommands.Next);
  },
  PrevPage: function () {
   this.DoPagerClick(ASPxClientPagerCommands.Prev);
  },
  FirstPage: function () {
   this.DoPagerClick(ASPxClientPagerCommands.First);
  },
  LastPage: function (focusBottomRow) {
   this.DoPagerClick(ASPxClientPagerCommands.Last);
  },
  PerformCallback: function (parameter) {
   this.CustomCallback(parameter);
  }
 });
 ASPxClientDataView.Cast = ASPxClientControl.Cast;
 var ASPxClientDataViewEndlessPagingHelper = _aspxCreateClass(null, {
  constructor: function (dataView) {
   this.dataView = dataView;
   this.needShowLoadingPanelAtBottom = false;
  },
  LoadNextPageIfRequired: function () {
   if (this.IsRequiredPageLoad())
    this.dataView.NextPage();
  },
  NeedShowLoadingPanelAtBottom: function () {
   return this.needShowLoadingPanelAtBottom;
  },
  GetEndlessPagingMode: function () {
   return this.dataView.GetEndlessPagingMode();
  },
  IsRequiredPageLoad: function () {
   var dataView = this.dataView;
   if (!dataView.UseEndlessPaging() || dataView.InCallback() || dataView.GetPageIndex() >= (dataView.GetPageCount() - 1))
    return false;
   if (this.GetEndlessPagingMode() == dataView.EndlessPagingMode.OnClick)
    return false;
   var windowHeight = ASPxClientUtils.iOSPlatform ? window.innerHeight : ASPxClientUtils.GetDocumentClientHeight();
   var mainElement = dataView.GetMainElement();
   var dataViewOffsetBottom = _aspxGetAbsolutePositionY(mainElement) + mainElement.clientHeight;
   var scrollTop = ASPxClientUtils.GetDocumentScrollTop();
   var scrollDelta = dataViewOffsetBottom - windowHeight - scrollTop;
   return scrollDelta <= 70;
  },
  Initialize: function () {
   this.LoadNextPageIfRequired();
  },
  OnDoPagerClick: function (command) {
   this.needShowLoadingPanelAtBottom = command == ASPxClientPagerCommands.Next;
  },
  OnCallback: function (html, epHtml, isTableLayout) {
   this.dataView.HideLoadingElements();
   this.ClearEPContainer();
   this.needShowLoadingPanelAtBottom = false;
   var container = this.dataView.GetEndlessPagingContainer();
   if (container)
    _aspxSetInnerHtml(container, epHtml);
   var itemsContainer = this.GetUpdatableItemsContainer(isTableLayout);
   if (isTableLayout)
    this.InsertRows(itemsContainer, html);
   else
    itemsContainer.insertAdjacentHTML("beforeEnd", html);
   this.dataView.ChangeEndlessPagingContainerVisiblity();
  },
  DoEndCallback: function () {
   this.LoadNextPageIfRequired();
  },
  ClearEPContainer: function () {
   var epContainer = this.dataView.GetEndlessPagingContainer();
   if (!epContainer)
    return;
   var nodes = epContainer.childNodes;
   for (var i = 0; i < nodes.length; i++)
    _aspxRemoveElement(nodes[i]);
  },
  InsertRows: function (table, rowsHtml) {
   var row = document.createElement("TR");
   var cell = document.createElement("TD");
   cell.innerHTML = "<table><tbody>" + rowsHtml + "</tbody></table>";
   var tbody = table.tBodies[0];
   tbody.appendChild(row);
   row.appendChild(cell);
   var newTable = _aspxGetChildByTagName(cell, "TABLE", 0);
   while (newTable.rows.length > 0)
    tbody.appendChild(newTable.rows[0]);
   _aspxRemoveElement(row);
  },
  GetUpdatableItemsContainer: function (isTableLayout) {
   var contentTable = _aspxGetElementsByTagName(this.dataView.GetItemsCell(), "TABLE")[0];
   if (isTableLayout)
    return contentTable;
   return contentTable.rows[0].cells[0];
  }
 });
 ASPxClientDataViewCollection = {
  instances: { },
  add: function(dataView){
   ASPxClientDataViewCollection.instances[dataView.name] = dataView;
  },
  remove: function(name){
   delete ASPxClientDataViewCollection.instances[name];
  },
  get: function(name){
   return ASPxClientDataViewCollection.instances[name];
  },
  onScroll: function(evt){
   for(var name in ASPxClientDataViewCollection.instances){
    var dataView = ASPxClientDataViewCollection.get(name);
    if(!dataView || !_aspxIsExists(dataView.GetMainElement()))
     ASPxClientDataViewCollection.remove(name);
    else
     dataView.OnScroll(evt);
   }
  }
 }
 _aspxAttachEventToElement(window, 'scroll', function(evt){ ASPxClientDataViewCollection.onScroll(evt); });
 function aspxDVPagerClick(name, value) {
  var dv = aspxGetControlCollection().Get(name);
  if (dv != null)
   dv.DoPagerClick(value);
 }
 function aspxDVEPClick(name) {
  var dataView = aspxGetControlCollection().Get(name);
  if (dataView)
   dataView.NextPage();
 }
 window.ASPxClientDataView = ASPxClientDataView;
 window.aspxDVPagerClick = aspxDVPagerClick;
 window.aspxDVEPClick = aspxDVEPClick;
})();
(function () {
 var ImageSizeModeEnum = {
  ActualSizeOrFit: 0,
  FitProportional: 1,
  FitAndCrop: 2
 };
 var Utils = {
  RemoveLoadingGif: function (element) {
   _aspxSetStyles(element, { backgroundImage: "url(" + ASPx.EmptyImageUrl + ")" });
  },
  IsImageLoaded: function (image) {
   if (__aspxIE && image.complete)
    return true;
   if (image.naturalWidth && image.naturalHeight)
    return true;
   return false;
  },
  IsExistImageSize: function(image) {
   return image.naturalWidth && image.naturalHeight || image.width && image.height ? true : false;
  },
  AttachHideByEscToPopup: function (popup, callback) {
   if(__aspxTouchUI)
    return;
   var popupElement = popup.GetWindowElement(-1);
   _aspxAttachEventToElement(popupElement, "keydown", function (evt) {
    if (_aspxGetKeyCode(evt) == _aspxParseShortcutString("ESC")) {
     popup.Hide();
     if(callback)
      callback();
    }
   });
   popup.PopUp.AddHandler(function (s) {
    s.GetWindowElement(-1).focus();
   });
   _aspxSetAttribute(popupElement, _aspxGetTabIndexAttribute(), 1);
  },
  ChangeImageSource: function (image, src, onLoad) {
   var parent = image.parentNode;
   var newImage = document.createElement("IMG");
   newImage.id = image.id;
   _aspxRemoveElement(image);
   parent.appendChild(newImage);
   _aspxAttachEventToElement(newImage, "load", function (evt) {
    var img = evt.srcElement || this;
    if (img.parentNode) {
     onLoad();
    }
   });
   newImage.src = src;
  }
 };
 var ResizeUtils = {
  ResizeImage: function(image, options) {
   var parent = image.parentNode;
   var canvas = ResizeUtils.GetCanvas(parent);
   var properties = ResizeUtils.GetImageProperties(image.naturalWidth || image.width, image.naturalHeight || image.height, options.width, options.height, options.sizeMode);
   var useCanvas = properties.useCanvas && (options.useCanvas == undefined ? true : options.useCanvas);
   if (useCanvas) {
    if (canvas) {
     canvas.width = options.width;
     canvas.height = options.height;
     ResizeUtils.DrawImage(canvas, image, properties);
    }
    else {
     canvas = ResizeUtils.CreateCanvas(parent, options.width, options.height, image, properties);
     _aspxRemoveElement(image);
    }
   }
   else {
    if (canvas)
     _aspxRemoveElement(canvas);
    ResizeUtils.SetImageProperties(image, properties, options.rtl);
   }
   if (options.onEndResize)
    options.onEndResize(canvas || image, useCanvas);
  },
  SetImageProperties: function (image, properties, rtl) {
   var style = {
    width: properties.w, height: properties.h,
    marginTop: properties.y, display: ""
   };
   if (rtl)
    style.marginRight = properties.x;
   else
    style.marginLeft = properties.x;
   _aspxSetStyles(image, style);
  },
  GetImageProperties: function (naturalWidth, naturalHeight, width, height, sizeMode) {
   var properties = {};
   switch (sizeMode) {
    case ImageSizeModeEnum.FitAndCrop:
     properties = ResizeUtils.GetFitAndCropImageProperties(naturalWidth, naturalHeight, width, height);
     break;
    case ImageSizeModeEnum.FitProportional:
     properties = ResizeUtils.GetFitProportionalImageProperties(naturalWidth, naturalHeight, width, height);
     break;
    case ImageSizeModeEnum.ActualSizeOrFit:
     properties = ResizeUtils.GetActualSizeOrFitImageProperties(naturalWidth, naturalHeight, width, height);
     break;
   }
   if (window.HTMLCanvasElement)
    properties.useCanvas = naturalWidth > width * 2 || naturalHeight > height * 2;
   return properties;
  },
  GetFitAndCropImageProperties: function (naturalWidth, naturalHeight, width, height) {
   var ratio = naturalWidth / naturalHeight;
   naturalWidth = width;
   naturalHeight = naturalWidth / ratio;
   if (naturalHeight < height) {
    naturalHeight = height;
    naturalWidth = naturalHeight * ratio;
   }
   var left = -(naturalWidth - width) / 2;
   var top = -(naturalHeight - height) / 2;
   return ResizeUtils.CreateImagePropertiesObject(naturalWidth, naturalHeight, left, top);
  },
  GetFitProportionalImageProperties: function (naturalWidth, naturalHeight, width, height) {
   var ratio = naturalWidth / naturalHeight;
   naturalWidth = width;
   naturalHeight = naturalWidth / ratio;
   if (naturalHeight > height) {
    naturalHeight = height;
    naturalWidth = naturalHeight * ratio;
   }
   var left = (width - naturalWidth) / 2;
   var top = (height - naturalHeight) / 2;
   return ResizeUtils.CreateImagePropertiesObject(naturalWidth, naturalHeight, left, top);
  },
  GetActualSizeOrFitImageProperties: function (naturalWidth, naturalHeight, width, height) {
   if (naturalWidth > width || naturalHeight > height)
    return ResizeUtils.GetFitProportionalImageProperties(naturalWidth, naturalHeight, width, height);
   return ResizeUtils.CreateImagePropertiesObject(naturalWidth, naturalHeight, (width - naturalWidth) / 2, (height - naturalHeight) / 2);
  },
  CreateImagePropertiesObject: function (w, h, x, y) {
   var obj = { w: w, h: h, x: x, y: y };
   obj.w = Math.round(obj.w);
   obj.h = Math.round(obj.h);
   obj.x = Math.round(obj.x);
   obj.y = Math.round(obj.y);
   return obj;
  },
  GetCanvas: function (container) {
   var elements = _aspxGetElementsByTagName(container, "CANVAS");
   return elements && elements[0] ? elements[0] : null;
  },
  CreateCanvas: function (container, width, height, image, properties) {
   var canvas = document.createElement("CANVAS");
   canvas.width = width;
   canvas.height = height;
   container.appendChild(canvas);
   if (image && properties)
    ResizeUtils.DrawImage(canvas, image, properties);
   return canvas;
  },
  DrawImage: function (canvas, image, properties) {
   var context = canvas.getContext("2d");
   context.drawImage(image, properties.x, properties.y, properties.w, properties.h);
  }
 };
 window.ASPxImageControlUtils = {};
 window.ASPxImageControlUtils.ResizeImage = ResizeUtils.ResizeImage;
 window.ASPxImageControlUtils.AttachHideByEscToPopup = Utils.AttachHideByEscToPopup;
 window.ASPxImageControlUtils.RemoveLoadingGif = Utils.RemoveLoadingGif;
 window.ASPxImageControlUtils.IsImageLoaded = Utils.IsImageLoaded;
 window.ASPxImageControlUtils.IsExistImageSize = Utils.IsExistImageSize;
 window.ASPxImageControlUtils.ChangeImageSource = Utils.ChangeImageSource;
 window.ASPxImageControlUtils.ImageSizeModeEnum = ImageSizeModeEnum;
})();
(function () {
 var Constants = {};
 Constants.Hash = "#dxig";
 Constants.FVContainerID = "_FVCell";
 Constants.InitialOpacityValue = 0;
 Constants.InitialFadedOpacityValue = 0.2;
 Constants.EmptyHash = " ";
 Constants.SlideAnimationDuration = 300;
 Constants.FadeAnimationDuration = 200;
 var CssClassesConstants = {};
 CssClassesConstants.Prefix = "dxig-";
 CssClassesConstants.ThumbnailImageClassName = CssClassesConstants.Prefix + "img";
 CssClassesConstants.ThumbnailTextAreaClassName = CssClassesConstants.Prefix + "thumbnailTextArea";
 CssClassesConstants.ThumbnailBorderClassName = CssClassesConstants.Prefix + "thumbnailBorder";
 CssClassesConstants.ThumbnailWrapperClassName = CssClassesConstants.Prefix + "thumbnailWrapper";
 CssClassesConstants.ImageSliderWrapperClassName = CssClassesConstants.Prefix + "imageSliderWrapper";
 CssClassesConstants.BottomPanelClassName = CssClassesConstants.Prefix + "bottomPanel";
 CssClassesConstants.PrevButtonAreaClassName = CssClassesConstants.Prefix + "prevButtonArea";
 CssClassesConstants.NextButtonAreaClassName = CssClassesConstants.Prefix + "nextButtonArea";
 CssClassesConstants.NavigationBarMarkerClassName = CssClassesConstants.Prefix + "navigationBarMarker";
 CssClassesConstants.OverflowPanelClassName = CssClassesConstants.Prefix + "overflowPanel";
 CssClassesConstants.PlayPauseButtonWrapperClassName = CssClassesConstants.Prefix + "playPauseButtonWrapper";
 CssClassesConstants.FullscreenViewerTextAreaClassName = CssClassesConstants.Prefix + "fullscreenViewerTextArea";
 CssClassesConstants.ExpandedText = " dxigExpandedText";
 ElementVisibilityModeEnum = {
  None: 0,
  Faded: 1,
  OnMouseOver: 2,
  Always: 3
 }
 var ASPxClientImageGallery = _aspxCreateClass(ASPxClientDataView, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.keyboardSupport = true;
   this.enablePagingByClick = true;
   this.useHash = true;
   this.navBarVisibility = 2;
   this.navBtnVisibility = 2;
   this.thumbTxtVisibility = 2;
   this.thumbImgSizeMode = 2;
   this.allowExpandText = true;
   this.items = [];
   this.hasFVTextTemplate = false;
   this.hasItemFVTextTemplate = false;
   this.adjustTimerId = -1;
   this.disappearElementsTimerId = -1;
   this.lastActiveItemIndex = 0;
   this.isLeftButtonPressed = false;
   this.elementsVisible = false;
   this.needUpdateFullscreenViewer = false;
   this.popup = null;
   this.slider = null;
   this.bottomPanel = null;
   this.navigationBar = null;
   this.imageSliderWrapper = null;
   this.navigationBarMarker = null;
   this.fulscreenViewerTextArea = null;
   this.prevButton = null;
   this.nextButton = null;
   this.closeButtonWrapper = null;
   this.playPauseButtonWrapper = null;
   this.lastMouseX = 0;
   this.lastMouseY = 0;
   this.prevButtonDisabled = false;
   this.nextButtonDisabled = false;
   this.contentPaddings = {};
   this.FullscreenViewerShowing = new ASPxClientEvent();
   this.FullscreenViewerActiveItemIndexChanged = new ASPxClientEvent();
  },
  InlineInitialize: function () {
   ASPxClientDataView.prototype.InlineInitialize.call(this);
   this.PrepareThumbnailImages();
  },
  Initialize: function () {
   ASPxClientDataView.prototype.Initialize.call(this);
   this.PrepareFullscreenViewer();
   var index = this.useHash ? this.GetIndexFromString(window.location) : -1;
   if (index != -1)
    this.ShowFullscreenViewer(index);
  },
  PrepareThumbnailImages: function () {
   var imageElements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), CssClassesConstants.ThumbnailImageClassName);
   for (var i = 0; i < imageElements.length; i++) {
    var item = this.items[i];
    if (item && !item.prepared) {
     this.PrepareThumbnailImage(imageElements[i], item);
     item.prepared = true;
    }
   }
  },
  PrepareThumbnailImage: function (image, item) {
   if (ASPxImageControlUtils.IsImageLoaded(image))
    ImageGalleryHelper.OnImageLoad(image, this.name, item.i, item.n);
   else
    _aspxAttachEventToElement(image, "load", function () {
     ImageGalleryHelper.OnImageLoad(image, this.name, item.i, item.n);
    }.aspxBind(this));
  },
  RaiseFullscreenViewerActiveItemIndexChanged: function () {
   if (!this.FullscreenViewerActiveItemIndexChanged.IsEmpty()) {
    var index = this.GetFullscreenViewerActiveItemIndex();
    var args = new ASPxClientImageGalleryFullscreenViewerEventArgs(index, this.GetName(index));
    this.FullscreenViewerActiveItemIndexChanged.FireEvent(this, args)
   }
  },
  RaiseFullscreenViewerShowing: function (index) {
   var cancel = false;
   if (!this.FullscreenViewerShowing.IsEmpty()) {
    if (index == undefined)
     index = this.GetFullscreenViewerActiveItemIndex();
    var args = new ASPxClientImageGalleryCancelEventArgs(index, this.GetName(index));
    this.FullscreenViewerShowing.FireEvent(this, args)
    cancel = args.cancel;
   }
   return cancel;
  },
  ShowFullscreenViewer: function (index) {
   if (this.RaiseFullscreenViewerShowing(index) || !this.HasFullscreenViewer())
    return;
   this.GetPopup().Show();
   this.SetFullscreenViewerActiveItemIndex(index, true);
   this.UpdateHash();
   this.UpdateFullscreenViewerText();
   this.UpdateNavigationButtonsState(true);
   if (this.CanHandleMouseOverForBottomPanel())
    this.SlideOutNavigationBar(true, true);
   _aspxSetTimeout(function () {
    this.AdjustImagePanel();
   }.aspxBind(this), 0);
  },
  HideFullscreenViewer: function () {
   if (this.HasFullscreenViewer()) {
    this.GetPopup().Hide();
    this.ClearHash();
    this.PauseSlideShow();
    this.HideElements();
   }
  },
  SetFullscreenViewerActiveItemIndex: function (index, preventAnimation) {
   if (this.HasFullscreenViewer()) {
    var imageSlider = this.GetImageSlider();
    imageSlider.SetActiveItemIndex(index, preventAnimation);
    imageSlider.Focus();
   }
  },
  GetFullscreenViewerItemCount: function () {
   if (this.HasFullscreenViewer())
    return this.GetImageSlider().GetItemCount();
   return 0;
  },
  GetFullscreenViewerActiveItemIndex: function () {
   if (this.HasFullscreenViewer())
    return this.GetImageSlider().GetActiveItemIndex();
   return 0;
  },
  PlaySlideShow: function () {
   this.GetImageSlider().Play();
   this.SetPlayPauseButtonState(false);
  },
  PauseSlideShow: function () {
   this.GetImageSlider().Pause();
   this.SetPlayPauseButtonState(true);
  },
  PrepareFullscreenViewer: function () {
   if (this.HasFullscreenViewer()) {
    this.PreparePlayPauseButton();
    this.PrepareCloseButtonWrapper();
    this.PrepareNavigationButtons();
    this.PrepareImagePanel();
    this.PrepareBottomPanel();
    if (this.enabled) {
     this.AssignHandlersToPopup();
     this.AssignHandlersToImagePanel();
     this.AssginHandlersToBottomPanel();
    }
    this.GetPopup().fadeAnimationDuration = Constants.FadeAnimationDuration;
   }
  },
  ResetFullscreenViewer: function () {
   this.needUpdateFullscreenViewer = false;
   this.popup = null;
   this.slider = null;
   this.bottomPanel = null;
   this.navigationBar = null;
   this.imageSliderWrapper = null;
   this.navigationBarMarker = null;
   this.fulscreenViewerTextArea = null;
   this.prevButton = null;
   this.nextButton = null;
   this.closeButtonWrapper = null;
   this.playPauseButtonWrapper = null;
  },
  PrepareImagePanel: function () {
   var element = this.GetImageSliderWrapper();
   var style = _aspxGetCurrentStyle(element);
   this.contentPaddings = {
    paddingLeft: _aspxPxToInt(style.paddingLeft),
    paddingTop: _aspxPxToInt(style.paddingTop),
    paddingRight: _aspxPxToInt(style.paddingRight),
    paddingBottom: _aspxPxToInt(style.paddingBottom)
   };
   _aspxSetStyles(element, { padding: 0 });
  },
  PrepareBottomPanel: function () {
   var navigationBar = this.GetNavigationBar();
   if (navigationBar)
    navigationBar.disableSelectedStateAnimation = true;
   if (this.GetNavigationBarMarker()) {
    this.GetOverflowPanel().className += " dxigOPWM";
    _aspxSetStyles(this.GetNavigationBar().GetMainElement(), { zIndex: "1" });
   }
   this.FadeOutTextArea(true);
  },
  PrepareNavigationButtons: function () {
   if (this.IsVisibleNavigationButtons()) {
    var prevButtonArea = this.GetPrevButtonArea();
    var nextButtonArea = this.GetNextButtonArea();
    var prevButtonAreaStyle = { className: CssClassesConstants.PrevButtonAreaClassName };
    var nextButtonAreaStyle = { className: CssClassesConstants.NextButtonAreaClassName };
    if (__aspxWebKitFamily) {
     prevButtonAreaStyle.webkitUserSelect = "none";
     nextButtonAreaStyle.webkitUserSelect = "none";
    }
    if (this.CanHandleMouseOverForButtons()) {
     prevButtonAreaStyle.opacity = this.GetInitialOpacity();
     nextButtonAreaStyle.opacity = this.GetInitialOpacity();
    }
    _aspxSetStyles(prevButtonArea, prevButtonAreaStyle);
    _aspxSetStyles(nextButtonArea, nextButtonAreaStyle);
   }
  },
  PreparePlayPauseButton: function () {
   var playPauseWrapper = this.GetPlayPauseButtonWrapper();
   if (playPauseWrapper) {
    if (this.CanHandleMouseOverForButtons())
     _aspxSetElementOpacity(playPauseWrapper, this.GetInitialOpacity());
    this.SetPlayPauseButtonState(true);
   }
  },
  PrepareCloseButtonWrapper: function () {
   var closeButtonWrapper = this.GetCloseButtonWrapper();
   if (closeButtonWrapper && this.CanHandleMouseOverForButtons())
    _aspxSetElementOpacity(closeButtonWrapper, this.GetInitialOpacity());
  },
  AdjustFullscreenViewer: function () {
   this.adjustTimerId = _aspxClearTimer(this.adjustTimerId);
   this.adjustTimerId = _aspxSetTimeout(function () {
    this.AdjustImagePanel();
    this.AdjustBottomPanel();
   }.aspxBind(this), 0);
  },
  AdjustImagePanel: function () {
   this.AdjustPopupContent();
   this.AdjustNavigationButtons();
   this.GetImageSlider().AdjustControl();
  },
  AdjustBottomPanel: function () {
   var navigationBar = this.GetNavigationBar();
   if (navigationBar)
    navigationBar.AdjustControl();
  },
  AdjustPopupContent: function () {
   var wrapper = this.GetImageSliderWrapper();
   var popupContentElement = wrapper.parentNode.parentNode;
   var navBarHeight = this.IsAlwaysVisibleNavBar() ? this.GetNavigationBarHeight() : 0;
   var style = {
    width: popupContentElement.clientWidth - this.contentPaddings.paddingLeft - this.contentPaddings.paddingRight,
    height: popupContentElement.clientHeight - this.contentPaddings.paddingTop - this.contentPaddings.paddingBottom - navBarHeight,
    marginTop: this.contentPaddings.paddingTop
   };
   if (this.rtl)
    style.marginRight = this.contentPaddings.paddingLeft;
   else
    style.marginLeft = this.contentPaddings.paddingLeft;
   _aspxSetStyles(wrapper, style);
  },
  AdjustNavigationButtons: function () {
   if (this.IsVisibleNavigationButtons()) {
    var textArea = this.GetFullscreenViewerTextArea();
    var prevBtnArea = this.GetPrevButtonArea();
    var nextBtnArea = this.GetNextButtonArea();
    var bottomPanelHeight = 0;
    if (textArea)
     bottomPanelHeight = textArea.offsetHeight;
    if (this.IsAlwaysVisibleNavBar())
     bottomPanelHeight += this.GetNavigationBarHeight();
    _aspxSetStyles(prevBtnArea, { height: "100%" });
    _aspxSetStyles(nextBtnArea, { height: "100%" });
    _aspxSetStyles(prevBtnArea, { height: prevBtnArea.offsetHeight - bottomPanelHeight });
    _aspxSetStyles(nextBtnArea, { height: nextBtnArea.offsetHeight - bottomPanelHeight });
   }
  },
  GetPopup: function () {
   if (!this.popup)
    this.popup = aspxGetControlCollection().Get(this.name + "_Popup");
   return this.popup;
  },
  GetImageSlider: function () {
   if (!this.slider)
    this.slider = aspxGetControlCollection().Get(this.GetPopup().name + "_Slider");
   return this.slider;
  },
  GetImageSliderWrapper: function () {
   if (!this.imageSliderWrapper)
    this.imageSliderWrapper = this.GetElementByClassName(CssClassesConstants.ImageSliderWrapperClassName);
   return this.imageSliderWrapper;
  },
  GetOverflowPanel: function () {
   if (!this.overflowPanel)
    this.overflowPanel = this.GetElementByClassName(CssClassesConstants.OverflowPanelClassName);
   return this.overflowPanel;
  },
  GetNavigationBar: function () {
   if (!this.navigationBar)
    this.navigationBar = aspxGetControlCollection().Get(this.GetPopup().name + "_NavigationBar");
   return this.navigationBar;
  },
  GetNavigationBarMarker: function () {
   if (!__aspxTouchUI && !this.navigationBarMarker)
    this.navigationBarMarker = this.GetElementByClassName(CssClassesConstants.NavigationBarMarkerClassName);
   return this.navigationBarMarker;
  },
  GetBottomPanel: function () {
   if (!this.bottomPanel)
    this.bottomPanel = this.GetElementByClassName(CssClassesConstants.BottomPanelClassName);
   return this.bottomPanel;
  },
  GetCloseButtonWrapper: function () {
   if (!this.closeButtonWrapper) {
    var closeButton = this.GetCloseButton();
    if (closeButton)
     this.closeButtonWrapper = closeButton.parentNode;
   }
   return this.closeButtonWrapper;
  },
  GetCloseButton: function () {
   return _aspxGetElementById(this.GetPopup().name + "_ClsBtn");
  },
  GetPlayPauseButtonWrapper: function () {
   if (!this.playPauseButtonWrapper)
    this.playPauseButtonWrapper = this.GetElementByClassName(CssClassesConstants.PlayPauseButtonWrapperClassName);
   return this.playPauseButtonWrapper;
  },
  GetPlayButton: function () {
   return this.GetPlayPauseButtonWrapper().children[0];
  },
  GetPauseButton: function () {
   return this.GetPlayPauseButtonWrapper().children[1];
  },
  GetFullscreenViewerTextArea: function () {
   if (!this.fulscreenViewerTextArea)
    this.fulscreenViewerTextArea = this.GetElementByClassName(CssClassesConstants.FullscreenViewerTextAreaClassName);
   return this.fulscreenViewerTextArea;
  },
  GetPrevButton: function () {
   if (!this.prevButton)
    this.prevButton = _aspxGetElementById(this.GetPopup().name + "_prevBtn");
   return this.prevButton;
  },
  GetNextButton: function () {
   if (!this.nextButton)
    this.nextButton = _aspxGetElementById(this.GetPopup().name + "_nextBtn");
   return this.nextButton;
  },
  GetPrevButtonArea: function () {
   var button = this.GetPrevButton();
   return button ? button.parentNode : null;
  },
  GetNextButtonArea: function () {
   var button = this.GetNextButton();
   return button ? button.parentNode : null;
  },
  GetNavigationBarHeight: function () {
   return this.GetNavigationBar().GetMainElement().offsetHeight;
  },
  SetPlayPauseButtonState: function (play) {
   if (this.GetPlayPauseButtonWrapper()) {
    _aspxSetElementDisplay(this.GetPlayButton(), play);
    _aspxSetElementDisplay(this.GetPauseButton(), !play);
   }
  },
  AnimateElements: function () {
   if (__aspxTouchUI || !this.CanHandleMouseOverForButtons())
    return;
   if (!this.elementsVisible)
    this.ChangeElementsVisibility();
   _aspxClearTimer(this.disappearElementsTimerId);
   this.disappearElementsTimerId = _aspxSetTimeout(function () {
    this.ChangeElementsVisibility();
   }.aspxBind(this), 2000);
  },
  OnCallback: function (result) {
   var areStatesEqual = this.GetPageIndex() == result.index && this.GetPageSize() == result.size;
   var isEndlessPagingCallback = result.epHtml != undefined;
   ASPxClientDataView.prototype.OnCallback.call(this, result);
   if (result.fv) {
    this.needUpdateFullscreenViewer = true;
    _aspxSetInnerHtml(this.GetChild(Constants.FVContainerID), result.fv);
   }
   if (result.items) {
    if (this.UseEndlessPaging() && isEndlessPagingCallback) {
     if (!areStatesEqual)
      this.items = _aspxCollectionsUnionToArray(this.items, result.items);
    } else
     this.items = result.items;
    this.PrepareThumbnailImages();
   }
  },
  DoEndCallback: function () {
   if (this.needUpdateFullscreenViewer) {
    this.ResetFullscreenViewer();
    this.PrepareFullscreenViewer();
   }
   ASPxClientDataView.prototype.DoEndCallback.call(this);
  },
  AssignHandlersToPopup: function () {
   var popup = this.GetPopup();
   if (popup) {
    if (!__aspxTouchUI) {
     _aspxAttachEventToElement(popup.GetWindowElement(-1), "mousemove", function (evt) { this.OnPopupElementMouseMove(evt); }.aspxBind(this));
     if (this.keyboardSupport) {
      ASPxImageControlUtils.AttachHideByEscToPopup(popup, function () {
       this.HideFullscreenViewer();
      }.aspxBind(this));
      popup.Shown.AddHandler(function () { this.GetImageSlider().Focus(); }.aspxBind(this));
     }
    }
    popup.BeforeResizing.AddHandler(function () { _aspxSetStyles(this.GetImageSliderWrapper(), { width: 0, height: 0 }); }.aspxBind(this));
    popup.AfterResizing.AddHandler(function () { this.AdjustFullscreenViewer(); }.aspxBind(this));
   }
  },
  AssignHandlersToImagePanel: function () {
   this.AssignHandlersToImageSlider();
   this.AssignHandlersToPlayPauseButton();
   this.AssignHandlersToNavigationButtons();
   this.AssignHandlersToCloseButtonWrapper();
  },
  AssginHandlersToBottomPanel: function () {
   if (!__aspxTouchUI && this.CanHandleMouseOverForBottomPanel()) {
    _aspxAttachMouseEnterToElement(this.GetBottomPanel(),
     function () { this.OnBottomPanelMouseIn(); }.aspxBind(this),
     function () { this.OnBottomPanelMouseOut(); }.aspxBind(this)
    );
   }
   this.AssignHandlersToNavigationBar();
  },
  AssignHandlersToNavigationBar: function () {
   var navigationBar = this.GetNavigationBar();
   if (navigationBar)
    navigationBar.ActiveItemChanged.AddHandler(function (s, e) { this.GetImageSlider().SetActiveItemIndex(e.item.index); }.aspxBind(this));
  },
  AssignHandlersToImageSlider: function () {
   this.GetImageSlider().ActiveItemChanged.AddHandler(function (s, e) { this.OnImageSliderActiveItemChanged(s, e); }.aspxBind(this));
  },
  AssignHandlersToNavigationButtons: function () {
   if (this.IsVisibleNavigationButtons()) {
    _aspxAttachEventToElement(this.GetPrevButtonArea(), this.GetClickEventName(), function (evt) { this.OnPrevButtonMouseDown(evt); }.aspxBind(this));
    _aspxAttachEventToElement(this.GetNextButtonArea(), this.GetClickEventName(), function (evt) { this.OnNextButtonMouseDown(evt); }.aspxBind(this));
   }
  },
  AssignHandlersToPlayPauseButton: function () {
   var playPauseButtonWrapper = this.GetPlayPauseButtonWrapper();
   if (playPauseButtonWrapper)
    _aspxAttachEventToElement(playPauseButtonWrapper, this.GetClickEventName(), function (evt) {
     this.OnPlayPauseButtonMouseDown(evt);
    }.aspxBind(this));
  },
  AssignHandlersToCloseButtonWrapper: function () {
   var closeButtonWrapper = this.GetCloseButtonWrapper();
   if (closeButtonWrapper)
    _aspxAttachEventToElement(closeButtonWrapper, this.GetClickEventName(), function (evt) {
     this.OnCloseButtonMouseDown(evt)
    }.aspxBind(this));
  },
  OnPopupElementMouseMove: function (evt) {
   if (!this.IsVisibleFullscreenViewer())
    return;
   if (__aspxIE && this.GetImageSlider().IsSlideShowPlaying()) {
    var x = _aspxGetEventX(evt);
    var y = _aspxGetEventY(evt);
    if (this.lastMouseX == x && this.lastMouseY == y)
     return;
    this.lastMouseX = x;
    this.lastMouseY = y;
   }
   this.AnimateElements();
  },
  OnHashChange: function () {
   if (!this.enabled || !this.IsVisibleFullscreenViewer())
    return;
   var index = this.GetIndexFromString(window.location);
   if (index != -1)
    this.SetFullscreenViewerActiveItemIndex(index);
  },
  OnPlayPauseButtonMouseDown: function (evt) {
   if (!this.CanPreventMouseDownEvent()) {
    this.AnimateElements();
    if (this.GetImageSlider().IsSlideShowPlaying())
     this.PauseSlideShow();
    else
     this.PlaySlideShow();
    _aspxPreventEvent(evt);
   }
  },
  OnCloseButtonMouseDown: function (evt) {
   if (!this.CanPreventMouseDownEvent()) {
    this.HideFullscreenViewer();
    _aspxPreventEvent(evt);
   }
  },
  OnPrevButtonMouseDown: function (evt) {
   if (!this.CanPreventMouseDownEvent()) {
    this.AnimateElements();
    if (this.rtl)
     this.DoSetNextItemIndex();
    else
     this.DoSetPrevItemIndex();
    _aspxPreventEvent(evt);
   }
  },
  OnNextButtonMouseDown: function (evt) {
   if (!this.CanPreventMouseDownEvent()) {
    this.AnimateElements();
    if (this.rtl)
     this.DoSetPrevItemIndex();
    else
     this.DoSetNextItemIndex();
    _aspxPreventEvent(evt);
   }
  },
  OnImageSliderActiveItemChanged: function (s, e) {
   this.UpdateHash();
   var navigationBar = this.GetNavigationBar();
   if (navigationBar)
    navigationBar.SetActiveItemIndex(e.item.index);
   this.UpdateFullscreenViewerText();
   this.UpdateNavigationButtonsState();
   this.RaiseFullscreenViewerActiveItemIndexChanged();
  },
  OnImageSliderItemClick: function () {
   if (__aspxTouchUI)
    this.ChangeElementsVisibility();
   else if (this.enablePagingByClick)
    this.DoSetNextItemIndex();
  },
  OnHyperLinkMouseDown: function (evt) {
   this.isLeftButtonPressed = _aspxGetIsLeftButtonPressed(evt);
   _aspxPreventEvent(evt);
  },
  OnHyperLinkClick: function (evt) {
   if (this.IsLeftButtonPressed(evt)) {
    var hyperLink = _aspxGetEventSource(evt).parentNode;
    this.ShowFullscreenViewer(this.GetIndexFromString(_aspxGetAttribute(hyperLink, "href")));
    _aspxPreventEvent(evt);
   }
  },
  OnBottomPanelMouseIn: function () {
   if (this.GetImageSlider().IsAdjusted()) {
    this.SlideInNavigationBar();
    this.FadeInTextArea();
   }
  },
  OnBottomPanelMouseOut: function (preventAnimation) {
   this.SlideOutNavigationBar(preventAnimation);
   this.FadeOutTextArea(preventAnimation);
  },
  ChangeElementsVisibility: function () {
   var canHandleMOButtons = this.CanHandleMouseOverForButtons();
   var canHandleMOBottomPanel = this.CanHandleMouseOverForBottomPanel();
   if (canHandleMOButtons || canHandleMOBottomPanel) {
    this.elementsVisible = !this.elementsVisible;
    var opacity = this.elementsVisible ? 1 : this.GetInitialOpacity();
    if (canHandleMOButtons) {
     if (this.GetCloseButtonWrapper())
      ASPxAnimationHelper.fadeTo(this.GetCloseButtonWrapper(), { to: opacity });
     if (this.GetPlayPauseButtonWrapper())
      ASPxAnimationHelper.fadeTo(this.GetPlayPauseButtonWrapper(), { to: opacity });
     ASPxAnimationHelper.fadeTo(this.GetPrevButtonArea(), { to: opacity });
     ASPxAnimationHelper.fadeTo(this.GetNextButtonArea(), { to: opacity });
    }
    if (__aspxTouchUI && canHandleMOBottomPanel) {
     if (this.elementsVisible)
      this.OnBottomPanelMouseIn();
     else
      this.OnBottomPanelMouseOut();
    }
   }
  },
  HideElements: function () {
   var canHandleMOButtons = this.CanHandleMouseOverForButtons();
   var canHandleMOBottomPanel = this.CanHandleMouseOverForBottomPanel();
   if (__aspxTouchUI && (canHandleMOButtons || canHandleMOBottomPanel)) {
    if (canHandleMOButtons) {
     if (this.GetCloseButtonWrapper())
      _aspxSetElementOpacity(this.GetCloseButtonWrapper(), this.GetInitialOpacity());
     if (this.GetPlayPauseButtonWrapper())
      _aspxSetElementOpacity(this.GetPlayPauseButtonWrapper(), this.GetInitialOpacity());
     _aspxSetElementOpacity(this.GetPrevButtonArea(), this.GetInitialOpacity());
     _aspxSetElementOpacity(this.GetNextButtonArea(), this.GetInitialOpacity());
    }
    if (canHandleMOBottomPanel)
     this.OnBottomPanelMouseOut(true);
    this.elementsVisible = false;
   }
  },
  DoSetPrevItemIndex: function () {
   var index = this.GetFullscreenViewerActiveItemIndex() - 1;
   if (index >= 0)
    this.SetFullscreenViewerActiveItemIndex(index);
  },
  DoSetNextItemIndex: function () {
   var index = this.GetFullscreenViewerActiveItemIndex() + 1;
   if (index < this.GetFullscreenViewerItemCount())
    this.SetFullscreenViewerActiveItemIndex(index);
  },
  SetNavigationBarMarkerVisibility: function (value) {
   var marker = this.GetNavigationBarMarker();
   if (marker)
    _aspxSetElementDisplay(marker, value);
  },
  SlideInNavigationBar: function (preventAnimation) {
   if (this.CanHandleMouseOverForBottomPanel()) {
    this.SetNavigationBarMarkerVisibility(false);
    ASPxAnimationHelper.slideTo(this.GetNavigationBar().GetMainElement(), {
     to: 0,
     direction: ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION,
     duration: Constants.SlideAnimationDuration
    });
   }
  },
  SlideOutNavigationBar: function (preventAnimation, preventMarker) {
   if (this.CanHandleMouseOverForBottomPanel()) {
    if (!preventMarker)
     this.SetNavigationBarMarkerVisibility(true);
    var element = this.GetNavigationBar().GetMainElement();
    if (preventAnimation)
     aspxAnimationUtils.SetTransformValue(element, this.GetNavigationBarHeight(), true);
    else
     ASPxAnimationHelper.slideTo(element, {
      to: this.GetNavigationBarHeight(),
      direction: ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION,
      duration: Constants.SlideAnimationDuration
     });
   }
  },
  FadeInTextArea: function () {
   var textArea = this.GetFullscreenViewerTextArea();
   if (textArea && this.CanHandleMouseOverForBottomPanel())
    ASPxAnimationHelper.fadeTo(textArea, { to: 1 });
  },
  FadeOutTextArea: function (preventAnimation) {
   var textArea = this.GetFullscreenViewerTextArea();
   if (textArea && this.CanHandleMouseOverForBottomPanel()) {
    if (preventAnimation)
     _aspxSetElementOpacity(textArea, Constants.InitialFadedOpacityValue);
    else
     ASPxAnimationHelper.fadeTo(textArea, { to: Constants.InitialFadedOpacityValue });
   }
  },
  UpdateFullscreenViewerText: function () {
   var textArea = this.GetFullscreenViewerTextArea();
   if (textArea) {
    if (this.hasItemFVTextTemplate) {
     var activeItemIndex = this.GetFullscreenViewerActiveItemIndex();
     _aspxSetStyles(this.GetChildElement(textArea, this.lastActiveItemIndex), { display: "" });
     _aspxSetStyles(this.GetChildElement(textArea, activeItemIndex), { display: "block" });
     this.lastActiveItemIndex = activeItemIndex;
    }
    else if (!this.hasFVTextTemplate)
     textArea.innerHTML = this.GetImageSlider().GetActiveItem().text || "";
   }
  },
  UpdateNavigationButtonsState: function (force) {
   var stateController = this.GetStateController();
   if (stateController && this.IsVisibleNavigationButtons()) {
    var activeItemIndex = this.GetFullscreenViewerActiveItemIndex();
    var prevButtonDisabled = activeItemIndex != 0;
    var nextButtonDisabled = activeItemIndex != this.GetFullscreenViewerItemCount() - 1;
    if (force || this.prevButtonDisabled != prevButtonDisabled)
     stateController.SetElementEnabled(this.GetPrevButton(), this.rtl ? nextButtonDisabled : prevButtonDisabled);
    if (force || this.nextButtonDisabled != nextButtonDisabled)
     stateController.SetElementEnabled(this.GetNextButton(), this.rtl ? prevButtonDisabled : nextButtonDisabled);
    this.prevButtonDisabled = prevButtonDisabled;
    this.nextButtonDisabled = nextButtonDisabled;
   }
  },
  UpdateHash: function () {
   if (this.useHash) {
    var newHash = Constants.Hash + this.GetImageSlider().GetActiveItemIndex();
    if (window.location.hash != newHash) {
     var newUrl = location.pathname + location.search + newHash;
     if (history.replaceState)
      history.replaceState("", "", newUrl)
     else
      location.replace(newUrl);
    }
   }
  },
  ClearHash: function () {
   if (this.useHash) {
    if (history.replaceState)
     history.replaceState("", "", location.pathname + location.search);
    else
     location.replace(location.pathname + location.search + "#");
   }
  },
  IsAlwaysVisibleNavBar: function () {
   return this.navBarVisibility == ElementVisibilityModeEnum.Always;
  },
  IsVisibleNavigationButtons: function () {
   return this.navBtnVisibility != ElementVisibilityModeEnum.None;
  },
  IsVisibleFullscreenViewer: function () {
   if (!this.HasFullscreenViewer())
    return false;
   return this.GetPopup().IsVisible();
  },
  HasFullscreenViewer: function () {
   return !!this.GetPopup() && this.GetPopup().IsDOMInitialized();
  },
  CanHandleMouseOverForButtons: function () {
   return this.IsVisibleNavigationButtons() && this.navBtnVisibility != ElementVisibilityModeEnum.Always;
  },
  CanHandleMouseOverForBottomPanel: function () {
   return this.navBarVisibility == ElementVisibilityModeEnum.OnMouseOver;
  },
  GetName: function (index) {
   var name = ImageGalleryHelper.GetName(this.name, index);
   if (this.HasFullscreenViewer())
    name = this.GetImageSlider().GetItem(index).name;
   return name;
  },
  GetClickEventName: function () {
   return __aspxTouchUI ? ASPxClientTouchUI.touchMouseUpEventName : "click";
  },
  CanPreventMouseDownEvent: function () {
   if (__aspxTouchUI && this.CanHandleMouseOverForButtons() && !this.elementsVisible) 
    return true;
   return false;
  },
  GetInitialOpacity: function () {
   return __aspxTouchUI ? Constants.InitialOpacityValue : Constants.InitialFadedOpacityValue;
  },
  IsLeftButtonPressed: function () {
   var tmpIsLeftButtonPressed = this.isLeftButtonPressed
   this.isLeftButtonPressed = false;
   return __aspxTouchUI || tmpIsLeftButtonPressed;
  },
  GetChildElement: function (parent, index) {
   return parent.children[index];
  },
  GetStateController: function () {
   return typeof (aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
  },
  GetElementByClassName: function (className) {
   var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), className);
   return elements.length > 0 ? elements[0] : null;
  },
  GetIndexFromString: function (str) {
   var hash = (new RegExp(Constants.Hash + '[0-9]+')).exec(str);
   if (!hash)
    return -1;
   return parseInt(hash[0].replace(new RegExp(Constants.Hash), ""));
  }
 });
 var ImageGalleryHelper = {
  Names: {},
  SetName: function (id, index, name) {
   if (ImageGalleryHelper.IsNullOrEmpty(name))
    return;
   var arr = ImageGalleryHelper.Names[id];
   if (!arr)
    arr = ImageGalleryHelper.Names[id] = [];
   arr[index] = name;
  },
  GetName: function (id, index) {
   var arr = ImageGalleryHelper.Names[id];
   return arr ? arr[index] : null;
  },
  OnHashChange: function () {
   aspxGetControlCollection().ForEachControl(function (control) {
    if (control.OnHashChange)
     control.OnHashChange();
   });
  },
  OnImageLoad: function (image, id, index, name) {
   var imageGallery = this.GetImageGallery(id);
   var hyperLink = image.parentNode;
   var item = ImageGalleryHelper.GetItem(image);
   var wrapper = ImageGalleryHelper.GetItemWrapper(image);
   var textElement = ImageGalleryHelper.GetItemText(item);
   var width = _aspxPxToInt(item.style.width);
   var height = _aspxPxToInt(item.style.height);
   ImageGalleryHelper.PrepareItemBorder(item, width, height);
   ImageGalleryHelper.PrepareImage(image, imageGallery.thumbImgSizeMode, width, height);
   ImageGalleryHelper.PrepareTextElement(textElement, imageGallery.thumbTxtVisibility, imageGallery.allowExpandText, _aspxGetAttribute(image, "alt"));
   if (wrapper)
    ImageGalleryHelper.PrepareItemWrapper(wrapper, width, height);
   if (imageGallery.enabled) {
    ImageGalleryHelper.AssignHandlersToHyperLink(hyperLink, id, index, imageGallery.useHash);
    ImageGalleryHelper.AssignHandlersToTextElement(textElement, item, imageGallery.thumbTxtVisibility, imageGallery.allowExpandText);
   }
   ASPxImageControlUtils.RemoveLoadingGif(item);
   ImageGalleryHelper.SetName(id, index, name);
  },
  OnImageSliderItemClick: function (id) {
   var gallery = ImageGalleryHelper.GetImageGallery(id);
   if (gallery)
    gallery.OnImageSliderItemClick();
  },
  OnHyperLinkClick: function (id, index) {
   var gallery = ImageGalleryHelper.GetImageGallery(id);
   if (gallery)
    gallery.ShowFullscreenViewer(index);
  },
  AssignHandlersToHyperLink: function (hyperLink, id, index, useHash) {
   if (!ImageGalleryHelper.IsNullOrEmpty(_aspxGetAttribute(hyperLink, "href")))
    return;
   if (useHash) {
    _aspxSetAttribute(hyperLink, "target", "_blank");
    _aspxSetAttribute(hyperLink, "href", Constants.Hash + index);
    if (!__aspxTouchUI)
     _aspxAttachEventToElement(hyperLink, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
      var gallery = ImageGalleryHelper.GetImageGallery(id);
      if (gallery)
       gallery.OnHyperLinkMouseDown(evt);
     });
    _aspxAttachEventToElement(hyperLink, "click", function (evt) {
     var gallery = ImageGalleryHelper.GetImageGallery(id);
     if (gallery)
      gallery.OnHyperLinkClick(evt);
    });
   }
   else {
    _aspxSetStyles(hyperLink, { cursor: "pointer" });
    _aspxAttachEventToElement(hyperLink, "click", function () {
     ImageGalleryHelper.OnHyperLinkClick(id, index);
    });
   }
  },
  AssignHandlersToTextElement: function (textElement, item, elementVisibility, allowExpandText) {
   if (textElement) {
    ImageGalleryHelper.AssignMouseEnterHandler(textElement, item, elementVisibility);
    if (allowExpandText)
     ImageGalleryHelper.AssingClickHandler(textElement);
   }
  },
  AssignMouseEnterHandler: function (textElement, item, elementVisibility) {
   if (elementVisibility == ElementVisibilityModeEnum.Always)
    return;
   var opacity = Constants.InitialOpacityValue;
   if (elementVisibility == ElementVisibilityModeEnum.Faded)
    opacity = Constants.InitialFadedOpacityValue;
   _aspxAttachMouseEnterToElement(item,
    function (element) { ASPxAnimationHelper.fadeTo(ImageGalleryHelper.GetItemText(item), { to: 1 }); },
    function (element) { ASPxAnimationHelper.fadeTo(ImageGalleryHelper.GetItemText(item), { to: opacity }); }
   );
  },
  AssingClickHandler: function (textElement) {
   _aspxAttachEventToElement(textElement, "click", function () {
    if (textElement.dxIsExpanded)
     ImageGalleryHelper.CollapseThumbnailText(textElement);
    else
     ImageGalleryHelper.ExpandThumbnailText(textElement);
    textElement.dxIsExpanded = !textElement.dxIsExpanded;
   });
  },
  PrepareItemWrapper: function (wrapper, width, height) {
   _aspxSetStyles(wrapper, { width: width, height: height });
  },
  PrepareItemBorder: function (item, width, height) {
   var borderElement = ImageGalleryHelper.GetItemBorder(item);
   _aspxSetStyles(borderElement, { width: width, height: height, display: "block" });
   _aspxSetStyles(borderElement, {
    width: width - (borderElement.offsetWidth - width),
    height: height - (borderElement.offsetHeight - height)
   });
  },
  PrepareTextElement: function (textElement, elementVisibility, allowExpandText, text) {
   if (textElement) {
    var style = { display: "block" };
    if (allowExpandText)
     style.cursor = "default";
    if (elementVisibility != ElementVisibilityModeEnum.Always) {
     style.opacity = Constants.InitialOpacityValue;
     if (elementVisibility == ElementVisibilityModeEnum.Faded)
      style.opacity = Constants.InitialFadedOpacityValue;
    }
    _aspxSetStyles(textElement, style);
    if (text != "")
     textElement.innerHTML = text;
   }
  },
  PrepareImage: function (image, sizeMode, width, height) {
   ImageGalleryHelper.PrepareImageInternal(image, sizeMode, width, height);
  },
  PrepareImageInternal: function (image, sizeMode, width, height) {
   ASPxImageControlUtils.ResizeImage(image, {
    width: width,
    height: height,
    sizeMode: sizeMode,
    onEndResize: function (element, isCanvas) {
     if (!isCanvas)
      element.onload = null;
     else
      element.className = CssClassesConstants.ThumbnailImageClassName;
     element.style.visibility = "visible";
    }
   });
  },
  CollapseThumbnailText: function (textElement) {
   textElement.className = textElement.className.replace(CssClassesConstants.ExpandedText, "");
  },
  ExpandThumbnailText: function (textElement) {
   textElement.className += CssClassesConstants.ExpandedText;
  },
  IsNullOrEmpty: function (str) {
   return str == null || str == "" ? true : false;
  },
  GetImageGallery: function (id) {
   return aspxGetControlCollection().Get(id);
  },
  GetItem: function (image) {
   var item = image.parentNode.parentNode;
   if (item.className == CssClassesConstants.ThumbnailWrapperClassName)
    item = item.parentNode;
   return item;
  },
  GetItemWrapper: function (image) {
   var wrapper = image.parentNode.parentNode;
   if (wrapper.className != CssClassesConstants.ThumbnailWrapperClassName)
    return null;
   return wrapper;
  },
  GetItemText: function (parent) {
   var elements = _aspxGetDescendantNodesByClassName(parent, CssClassesConstants.ThumbnailTextAreaClassName);
   if (elements.length)
    return elements[0];
   return null;
  },
  GetItemBorder: function (item) {
   return _aspxGetDescendantNodesByClassName(item, CssClassesConstants.ThumbnailBorderClassName)[0];
  }
 };
 ASPxClientImageGallery.Cast = ASPxClientDataView.Cast;
 ASPxClientImageGalleryCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
  constructor: function (index, name) {
   this.constructor.prototype.constructor.call(this);
   this.index = index;
   this.name = name;
  }
 });
 ASPxClientImageGalleryFullscreenViewerEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function (index, name) {
   this.constructor.prototype.constructor.call(this);
   this.index = index;
   this.name = name;
  }
 });
 window.ASPxClientImageGallery = ASPxClientImageGallery;
 window.ASPxClientImageGalleryCancelEventArgs = ASPxClientImageGalleryCancelEventArgs;
 window.ASPxClientImageGalleryFullscreenViewerEventArgs = ASPxClientImageGalleryFullscreenViewerEventArgs;
 window._aspxIGItemClick = function (id) {
  ImageGalleryHelper.OnImageSliderItemClick(id);
 }
 _aspxAttachEventToElement(window, "hashchange", ImageGalleryHelper.OnHashChange);
})();
MVCxClientImageGallery = _aspxCreateClass(ASPxClientImageGallery, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.customActionUrl = "";
  this.callbackCustomArgs = {};
  this.customActionCallBack;
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientImageGallery.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function() {
  if(this.callbackUrl != "") {
   this.callBack = function(arg) {
    MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs)
   };
  }
  if(this.customActionUrl != "") {
   this.customActionCallBack = function(arg) {
    MVCx.PerformControlCallback(this.name, this.customActionUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs)
   };
  }
  ASPxClientImageGallery.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientImageGallery.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientImageGallery.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 GetCallbackParams: function(arg) {
  var params = {};
  $(this.GetMainElement()).find("input").each(function() {
   params[this.name] = this.value;
  });
  var stateInput = this.GetPagerStateInputElement();
  if(stateInput)
   params[stateInput.name] = stateInput.value;
  return params;
 },
 EvalCallbackResult: function(resultString) {
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2) {
   var resultObj = ASPxClientImageGallery.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.html = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientImageGallery.prototype.EvalCallbackResult.call(this, resultString);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientImageGallery.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackMethod: function(command) {
  return MVCx.IsCustomCallback(command) ? MVCx.GetCustomActionCallBackMethod(this) : this.callBack;
 }
});
(function () {
 var CssClassesConstants = {};
 CssClassesConstants.Prefix = "dxis-";
 CssClassesConstants.OverlayElementCssClass = CssClassesConstants.Prefix + "overlayElement";
 CssClassesConstants.TextAreaCssClassName = CssClassesConstants.Prefix + "itemTextArea";
 CssClassesConstants.ImageAreaSlidePanelCssClassName = CssClassesConstants.Prefix + "slidePanel";
 CssClassesConstants.NavigationBarHoverStateElementCssClassName = CssClassesConstants.Prefix + "nbHoverItem";
 CssClassesConstants.NavigationBarSelectedStateCssClassName = " " + CssClassesConstants.Prefix + "selected";
 CssClassesConstants.NavigationBarHoverStateCssClassName = CssClassesConstants.Prefix + "hover";
 CssClassesConstants.NavigationBarSlidePanelCssClassName = CssClassesConstants.Prefix + "nbSlidePanel";
 CssClassesConstants.NavigationBarSlidePanelWrapperCssClassName = CssClassesConstants.Prefix + "nbSlidePanelWrapper";
 CssClassesConstants.PassePartoutCssClassName = CssClassesConstants.Prefix + "passePartout";
 CssClassesConstants.ItemHyperLinkCssClassName = CssClassesConstants.Prefix + "hl";
 CssClassesConstants.PlayPauseWrapperCssClassName = CssClassesConstants.Prefix + "playPauseBtnWrapper";
 CssClassesConstants.NavigationButtonUpWrapperCssClassName = CssClassesConstants.Prefix + "prevBtnVertWrapper";
 CssClassesConstants.NavigationButtonDownWrapperCssClassName = CssClassesConstants.Prefix + "nextBtnVertWrapper";
 CssClassesConstants.NavigationButtonBackwardWrapperCssClassName = CssClassesConstants.Prefix + "prevBtnHorWrapper";
 CssClassesConstants.NavigationButtonForwardWrapperCssClassName = CssClassesConstants.Prefix + "nextBtnHorWrapper";
 CssClassesConstants.NavigationButtonUpOutsideWrapperCssClassName = CssClassesConstants.Prefix + "prevBtnVertOutsideWrapper";
 CssClassesConstants.NavigationButtonDownOutsideWrapperCssClassName = CssClassesConstants.Prefix + "nextBtnVertOutsideWrapper";
 CssClassesConstants.NavigationButtonBackwardOutsideWrapperCssClassName = CssClassesConstants.Prefix + "prevBtnHorOutsideWrapper";
 CssClassesConstants.NavigationButtonForwardOutsideWrapperCssClassName = CssClassesConstants.Prefix + "nextBtnHorOutsideWrapper";
 CssClassesConstants.NavigationButtonWrapperHoverCssClassPostfix = "Hover";
 CssClassesConstants.NavigationButtonWrapperPressedCssClassPostfix = "Pressed";
 CssClassesConstants.NavigationButtonWrapperDisabledCssClassPostfix = "Disabled";
 CssClassesConstants.ImageZoomNavigatorCssClassName = CssClassesConstants.Prefix + "zoomNavigator";
 var LoadModeEnum = {
  AllImages: 0,
  DynamicLoadAndCache: 1,
  DynamicLoad: 2
 };
 var AnimationTypeEnum = {
  Slide: 0,
  Fade: 1,
  None: 2
 };
 var AnimationDirectionEnum = {
  Horizontal: 0,
  Vertical: 1
 };
 var NavigationBarPositionEnum = {
  Bottom: 0,
  Top: 1,
  Left: 2,
  Right: 3
 };
 var NavigationBarModeEnum = {
  Thumbnails: 0,
  Dots: 1
 };
 var ElementVisibilityModeEnum = {
  None: 0,
  Faded: 1,
  OnMouseOver: 2,
  Always: 3
 };
 var NavigationBarPagingModeEnum = {
  Page: 0,
  Single: 1
 };
 var ExtremeItemClickModeEnum = {
  SelectAndSlide: 0,
  Select: 1
 };
 var NavigationBarButtonPositionEnum = {
  Inside: 0,
  Outside: 1
 };
 var ActiveItemChangeActionEnum = {
  Click: 0,
  Hover: 1
 };
 var NavigationButtonVisibilityModeEnum = {
  Auto: 0,
  Always: 1
 };
 var FadedDefaultOpacity = 0.3;
 var SizeUtils = {
  GetClientWidth: function (element, clear) {
   return clear ? _aspxGetClearClientWidth(element) : element.offsetWidth;
  },
  GetClientHeight: function (element, clear) {
   return clear ? _aspxGetClearClientHeight(element) : element.offsetHeight;
  }
 };
 var MouseEnterHelper = {
  data: [],
  AddHandler: function (element, mouseOver, mouseOut) {
   var dataItem = this.GetDataItem(element);
   if (!dataItem)
    dataItem = this.CreateDataItem(element, mouseOver, mouseOut);
   dataItem.mouseOverHandlers.push(mouseOver);
   dataItem.mouseOutHandlers.push(mouseOut);
  },
  GetDataItem: function (element) {
   for (var i = 0; i < this.data.length; i++) {
    var dataItem = this.data[i];
    if (dataItem && dataItem.element == element)
     return dataItem;
   }
   return null;
  },
  CreateDataItem: function (element, mouseOver, mouseOut) {
   var dataItem = { element: element, mouseOverHandlers: [mouseOver], mouseOutHandlers: [mouseOut] };
   this.data.push(dataItem);
   _aspxAttachMouseEnterToElement(element, MouseEnterHelper.OnMouseOverHandler, MouseEnterHelper.OnMouseOutHandler);
   return dataItem;
  },
  OnMouseOverHandler: function (element) {
   MouseEnterHelper.PerformHandlers(MouseEnterHelper.GetDataItem(element).mouseOverHandlers);
  },
  OnMouseOutHandler: function (element) {
   MouseEnterHelper.PerformHandlers(MouseEnterHelper.GetDataItem(element).mouseOutHandlers);
  },
  PerformHandlers: function (array) {
   for (var i = 0; i < array.length; i++)
    array[i]();
  }
 };
 var ControlBase = _aspxCreateClass(null, {
  constructor: function (imageSlider) {
   this.imageSliderControl = imageSlider;
   this.Initialize();
   this.CreateControlHierarchy();
   this.PrepareControlHierarchy();
   if (this.IsEnabled())
    this.InitializeHandlers();
  },
  Initialize: function () {
  },
  CreateControlHierarchy: function () {
  },
  PrepareControlHierarchy: function () {
  },
  AdjustControl: function () {
   this.CalculateSize();
  },
  ResetControlStyle: function () {
  },
  CalculateSize: function () {
  },
  InitializeHandlers: function () {
  },
  IsAdjustedSize: function () {
   return this.GetImageSlider().IsAdjusted();
  },
  GetImageSlider: function () {
   return this.imageSliderControl;
  },
  GetClientControlName: function () {
   return this.GetImageSlider().name;
  },
  IsHorizontalNavigation: function () {
   return this.GetImageSlider().navDirection == AnimationDirectionEnum.Horizontal;
  },
  GetAnimationType: function () {
   return this.GetImageSlider().GetAnimationType();
  },
  IsEnabled: function () {
   return this.GetImageSlider().enabled;
  },
  IsRtl: function (withoutHorizontalNavigation) {
   var value = !!this.GetImageSlider().rtl;
   if (!withoutHorizontalNavigation)
    value = value && this.IsHorizontalNavigation();
   return value;
  },
  CreateDiv: function () {
   return document.createElement("DIV");
  },
  GetStateController: function () {
   return typeof (aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
  },
  PatchElementForMSTouch: function (element) {
   if (__aspxMSTouchUI)
    element.className += " " + ASPxClientTouchUI.msTouchDraggableClassName;
  }
 });
 var ButtonBase = _aspxCreateClass(ControlBase, {
  constructor: function (itemsOwner) {
   this.itemsOwner = itemsOwner;
   this.defaultOpacity = 0;
   this.isLeftButtonPressed = false;
   this.visibility = true;
   this.constructor.prototype.constructor.call(this, itemsOwner.GetImageSlider());
  },
  Initialize: function () {
   if (this.GetVisibilityMode() == ElementVisibilityModeEnum.Faded)
    this.defaultOpacity = FadedDefaultOpacity;
  },
  GetOwner: function () {
   return this.itemsOwner;
  },
  GetContainer: function () {
   return this.GetOwner().GetButtonsContainer()
  },
  GetMouseUpElement: function () {
   return this.GetContainer();
  },
  GetVisibilityMode: function () {
   return 0;
  },
  CanHandle: function () {
   return this.GetOwner().CanHandleButtons();
  },
  PrepareControlHierarchy: function () {
   if (this.GetVisibilityMode() == ElementVisibilityModeEnum.Always)
    return;
   var elements = this.GetAnimationElements();
   for (var i = 0; i < elements.length; i++) {
    _aspxSetStyles(elements[i], { opacity: this.defaultOpacity });
    this.PatchElementForMSTouch(elements[i]);
   }
  },
  InitializeHandlers: function () {
   _aspxAttachEventToElement(this.GetMouseUpElement(), ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
    this.isLeftButtonPressed = _aspxGetIsLeftButtonPressed(evt);
   }.aspxBind(this));
   _aspxAttachEventToElement(this.GetMouseUpElement(), __aspxTouchUI ? ASPxClientTouchUI.touchMouseUpEventName : "click", function (evt) {
    if (this.visibility && this.isLeftButtonPressed && this.CanHandle())
     this.OnMouseUp(evt);
   }.aspxBind(this));
   if (!__aspxTouchUI && this.GetVisibilityMode() != ElementVisibilityModeEnum.Always)
    MouseEnterHelper.AddHandler(this.GetContainer(), function () { this.Appear() }.aspxBind(this), function () { this.Disappear() }.aspxBind(this));
  },
  OnMouseUp: function (evt) {
  },
  Appear: function () {
   this.Animate(1);
  },
  Disappear: function () {
   this.Animate(this.defaultOpacity);
  },
  GetAnimationElements: function () {
   return [];
  },
  Animate: function (value) {
   var elements = this.GetAnimationElements();
   var hasAnimation = this.GetAnimationType() != AnimationTypeEnum.None;
   for (var i = 0; i < elements.length; i++) {
    if (hasAnimation)
     ASPxAnimationHelper.fadeTo(elements[i], { to: value });
    else
     _aspxSetStyles(elements[i], { opacity: value });
   }
  },
  SetInnerHtml: function (element, html) {
   element.innerHTML = html;
  }
 });
 var SlideShowButton = _aspxCreateClass(ButtonBase, {
  constructor: function (itemsOwner) {
   this.wrapperElement = null;
   this.playButton = null;
   this.pauseButton = null;
   this.itemsOwner = itemsOwner;
   this.constructor.prototype.constructor.call(this, itemsOwner);
  },
  GetMouseUpElement: function () {
   return this.wrapperElement;
  },
  GetAnimationElements: function () {
   return [this.wrapperElement];
  },
  GetVisibilityMode: function () {
   return this.GetImageSlider().playPauseBtnVbl;
  },
  CreateControlHierarchy: function () {
   var slider = this.GetImageSlider();
   this.wrapperElement = this.CreateDiv();
   this.wrapperElement.innerHTML = slider.playBH + slider.pauseBH;
   this.playButton = this.wrapperElement.children[0];
   this.pauseButton = this.wrapperElement.children[1];
   this.GetContainer().appendChild(this.wrapperElement);
  },
  PrepareControlHierarchy: function () {
   ButtonBase.prototype.PrepareControlHierarchy.call(this);
   this.wrapperElement.className = CssClassesConstants.PlayPauseWrapperCssClassName;
   this.SetButtonState(true);
  },
  IsPlaying: function () {
   return this.GetImageSlider().IsSlideShowPlaying();
  },
  OnMouseUp: function (evt) {
   var slider = this.GetImageSlider();
   if (this.IsPlaying())
    slider.Pause()
   else
    slider.Play()
  },
  SetButtonState: function (play) {
   _aspxSetElementDisplay(this.playButton, play);
   _aspxSetElementDisplay(this.pauseButton, !play);
  }
 });
 var NavigationButtons = _aspxCreateClass(ButtonBase, {
  constructor: function (itemsOwner) {
   this.prevButtonEnable = true;
   this.nextButtonEnable = true;
   this.prevButton = null;
   this.nextButton = null;
   this.prevButtonWrapper = null;
   this.nextButtonWrapper = null;
   this.constructor.prototype.constructor.call(this, itemsOwner);
  },
  GetUniqueId: function () {
   return this.GetOwner().GetUniqueId();
  },
  IsEnablePagingByClick: function () {
   return this.GetOwner().IsEnablePagingByClick();
  },
  IsHorizontal: function () {
   return this.GetOwner().IsHorizontalNavigation();
  },
  GetVisibilityMode: function () {
   return this.GetOwner().GetNavigationBtnsVisibilityMode();
  },
  OnPrevButtonMouseUp: function (evt) {
   if (this.prevButtonEnable)
    this.GetOwner().PerformBackward();
   return _aspxPreventEvent(evt);
  },
  OnNextButtonMouseUp: function (evt) {
   if (this.nextButtonEnable)
    this.GetOwner().PerformForward();
   return _aspxPreventEvent(evt);
  },
  CreateControlHierarchy: function () {
   this.prevButtonWrapper = this.CreateDiv();
   this.nextButtonWrapper = this.CreateDiv();
   this.SetInnerHtml(this.prevButtonWrapper, this.GetOwner().GetPrevButtonHtml());
   this.SetInnerHtml(this.nextButtonWrapper, this.GetOwner().GetNextButtonHtml());
   this.prevButton = this.prevButtonWrapper.firstChild;
   this.nextButton = this.nextButtonWrapper.firstChild;
   var container = this.GetContainer();
   container.appendChild(this.prevButtonWrapper);
   container.appendChild(this.nextButtonWrapper);
  },
  PrepareControlHierarchy: function () {
   ButtonBase.prototype.PrepareControlHierarchy.call(this);
   this.SetId(this.prevButtonWrapper, "nbwb");
   this.SetId(this.nextButtonWrapper, "nbwf");
   this.PrepareButtonWrapper(this.prevButtonWrapper, this.GetPrevButtonWrapperCssClassName());
   this.PrepareButtonWrapper(this.nextButtonWrapper, this.GetNextButtonWrapperCssClassName());
  },
  GetPrevButtonWrapperCssClassName: function () {
   return this.IsHorizontal() ?
    CssClassesConstants.NavigationButtonBackwardWrapperCssClassName : CssClassesConstants.NavigationButtonUpWrapperCssClassName;
  },
  GetNextButtonWrapperCssClassName: function () {
   return this.IsHorizontal() ?
     CssClassesConstants.NavigationButtonForwardWrapperCssClassName : CssClassesConstants.NavigationButtonDownWrapperCssClassName;
  },
  PrepareButtonWrapper: function (wrapper, className) {
   wrapper.className = className;
   var stateController = this.GetStateController();
   if (stateController) {
    if (this.IsEnabled()) {
     stateController.AddHoverItem(wrapper.id, [className + CssClassesConstants.NavigationButtonWrapperHoverCssClassPostfix], [""], [""], null, null, false);
     stateController.AddPressedItem(wrapper.id, [className + CssClassesConstants.NavigationButtonWrapperPressedCssClassPostfix], [""], [""], null, null, false);
    }
    stateController.AddDisabledItem(wrapper.id, [className + CssClassesConstants.NavigationButtonWrapperDisabledCssClassPostfix], [""], [""], null, null, false);
   }
  },
  SetId: function (element, id) {
   element.id = this.GetClientControlName() + this.GetOwner().GetUniqueId() + id;
  },
  OnMouseUp: function (evt) {
   var value = true;
   var container = this.GetContainer();
   var source = _aspxGetEventSource(evt);
   if (this.IsEnablePagingByClick() && !this.IsSlideShowButton(source) && !_aspxIsInteractiveControl(source)) {
    var containerSize = this.IsHorizontal() ? container.offsetWidth : container.offsetHeight;
    var leftLimitPos = containerSize * 0.35,
     rightLimitPos = containerSize * 0.65;
    var mousePosInElement = this.IsHorizontal() ? _aspxGetEventX(evt) - _aspxGetAbsolutePositionX(container) : _aspxGetEventY(evt) - _aspxGetAbsolutePositionY(container);
    if (mousePosInElement < leftLimitPos)
     value = this.OnPrevButtonMouseUp(evt);
    else if (mousePosInElement > rightLimitPos)
     value = this.OnNextButtonMouseUp(evt);
   }
   else {
    if (source == this.prevButtonWrapper || source == this.prevButton)
     value = this.OnPrevButtonMouseUp(evt);
    else if (source == this.nextButtonWrapper || source == this.nextButton)
     value = this.OnNextButtonMouseUp(evt);
   }
   return value;
  },
  IsSlideShowButton: function (element) {
   var className = CssClassesConstants.PlayPauseWrapperCssClassName;
   return element.className == className || element.parentNode.className == className;
  },
  SetEnablePrevButton: function (enable) {
   this.prevButtonEnable = enable;
   var stateController = this.GetStateController();
   if (stateController) {
    stateController.SetElementEnabled(this.prevButtonWrapper, enable);
    stateController.SetElementEnabled(this.prevButton, enable);
   }
  },
  SetEnableNextButton: function (enable) {
   this.nextButtonEnable = enable;
   var stateController = this.GetStateController();
   if (stateController) {
    stateController.SetElementEnabled(this.nextButtonWrapper, enable);
    stateController.SetElementEnabled(this.nextButton, enable);
   }
  },
  SetVisibilityButtons: function (visible) {
   if (this.visibility == visible)
    return;
   this.visibility = visible;
   _aspxSetElementDisplay(this.prevButtonWrapper, this.visibility);
   _aspxSetElementDisplay(this.nextButtonWrapper, this.visibility);
  },
  GetVisibilityButtons: function () {
   return this.visibility;
  },
  GetAnimationElements: function () {
   return [this.prevButtonWrapper, this.nextButtonWrapper];
  },
  GetPrevButtonWrapperSize: function () {
   return this.GetButtonSize(this.prevButtonWrapper);
  },
  GetNextButtonWrapperSize: function () {
   return this.GetButtonSize(this.nextButtonWrapper);
  },
  GetButtonSize: function (element) {
   return { width: element.offsetWidth, height: element.offsetHeight };
  }
 });
 var OutsideNavigationButtons = _aspxCreateClass(NavigationButtons, {
  constructor: function (itemsOwner) {
   this.constructor.prototype.constructor.call(this, itemsOwner);
  },
  GetAnimationElements: function () {
   return [];
  },
  GetPrevButtonWrapperCssClassName: function () {
   return this.IsHorizontal() ?
    CssClassesConstants.NavigationButtonBackwardOutsideWrapperCssClassName : CssClassesConstants.NavigationButtonUpOutsideWrapperCssClassName;
  },
  GetNextButtonWrapperCssClassName: function () {
   return this.IsHorizontal() ?
     CssClassesConstants.NavigationButtonForwardOutsideWrapperCssClassName : CssClassesConstants.NavigationButtonDownOutsideWrapperCssClassName;
  }
 });
 var ItemsOwnerBase = _aspxCreateClass(ControlBase, {
  constructor: function (imageSlider) {
   this.activeItemIndex = 0;
   this.prevItemIndex = -1;
   this.fullItemWidth = 0;
   this.fullItemHeight = 0;
   this.clearItemWidth = 0;
   this.clearItemHeight = 0;
   this.itemElementsManager = null; 
   this.navigationButtons = null; 
   this.slidePanelElement = null;
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  Initialize: function () {
   var value = this.GetImageSlider().GetHiddenField().value;
   this.activeItemIndex = this.GetRtlIndex(parseInt(value.split("|")[0]));
   if (this.IsRtl())
    this.prevItemIndex = this.activeItemIndex + 1;
  },
  GetRtlIndex: function (index) {
   if (this.IsRtl())
    return this.GetItemCount() - 1 - index;
   return index;
  },
  ForEachItem: function (func) {
   var count = this.GetItemCount();
   if (!this.IsRtl()) {
    for (var i = 0; i < count ; i++)
     func.call(this, i);
   }
   else {
    for (var i = count - 1; i >= 0; i--)
     func.call(this, i);
   }
  },
  GetUniqueId: function () {
   return "";
  },
  GetItemElementsManager: function () {
   if (!this.itemElementsManager)
    this.itemElementsManager = this.CreateItemElementsManager();
   return this.itemElementsManager;
  },
  CreateItemElementsManager: function () {
   return new ItemElementsManagerBase(this);
  },
  GetTemplate: function (index) {
   return this.IsValidItemIndex(index) ? this.GetItem(index).tpl : null;
  },
  GetNavigateUrl: function (index) {
   return this.IsValidItemIndex(index) ? this.GetItem(index).u : null;
  },
  GetImageSrc: function (index) {
   return this.IsValidItemIndex(index) ? this.GetItem(index).s : null;
  },
  GetItem: function (index) {
   return this.GetImageSlider().GetItemInternal(this.GetRtlIndex(index));
  },
  GetItemCount: function () {
   return this.GetImageSlider().GetItemCount();
  },
  SetActiveItemIndex: function (index, preventAnimation) {
   if (!this.IsEnabled() || !this.IsValidItemIndex(index) || index == this.GetActiveItemIndex())
    return;
   this.prevItemIndex = this.GetActiveItemIndex();
   this.activeItemIndex = index;
   this.SetActiveItemIndexInternal(index, preventAnimation);
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   this.UpdateNavigationButtonsState();
  },
  GetActiveItemIndex: function () {
   return this.activeItemIndex;
  },
  GetPrevItemIndex: function () {
   return this.prevItemIndex;
  },
  GetItemElement: function (index) {
   return this.IsValidItemIndex(index) ? this.GetItemElementsManager().GetCollection()[index] : null;
  },
  GetImageElement: function (index) {
   return _aspxGetElementsByTagName(this.GetItemElement(index), "IMG")[0];
  },
  GetCanvasElement: function (index) {
   return _aspxGetElementsByTagName(this.GetItemElement(index), "CANVAS")[0];
  },
  GetHyperLinkElement: function (index) {
   return _aspxGetChildNodesByClassName(this.GetItemElement(index), CssClassesConstants.ItemHyperLinkCssClassName)[0];
  },
  GetImageContainerElement: function (index) {
   return this.GetHyperLinkElement(index) || this.GetItemElement(index);
  },
  GetItemElementSize: function (clear) {
   return this.IsHorizontalNavigation() ? this.GetItemElementWidth(clear) : this.GetItemElementHeight(clear);
  },
  GetItemElementWidth: function (clear) {
   return clear ? this.clearItemWidth : this.fullItemWidth;
  },
  GetItemElementHeight: function (clear) {
   return clear ? this.clearItemHeight : this.fullItemHeight;
  },
  GetSlidePanelElement: function () {
   return this.slidePanelElement;
  },
  GetItemsContainer: function () {
   return null;
  },
  StopPlayingWhenPaging: function () {
   this.GetImageSlider().StopPlayingWhenPaging();
  },
  CanCreateNavigationButtons: function () {
   return true;
  },
  CreateNavigationButtons: function () {
   if (this.GetNavigationBtnsVisibilityMode() == ElementVisibilityModeEnum.None)
    return null;
   return new NavigationButtons(this);
  },
  GetNavigationBtnsVisibilityMode: function () {
   return this.GetImageSlider().navBtnsVbl;
  },
  UpdateNavigationButtonsState: function () {
  },
  GetButtonsContainer: function () {
   return null;
  },
  GetPrevButtonHtml: function () {
   return "";
  },
  GetNextButtonHtml: function () {
   return "";
  },
  CanHandleButtons: function () {
   return !this.IsExecutedGesture();
  },
  IsExecutedGesture: function () {
   return ASPxGesturesHelper.IsExecutedGesture();
  },
  IsEnablePagingByClick: function () {
   return false;
  },
  SetEnablePrevButton: function (enabled) {
   if (this.navigationButtons)
    this.navigationButtons.SetEnablePrevButton(enabled);
  },
  SetEnableNextButton: function (enabled) {
   if (this.navigationButtons)
    this.navigationButtons.SetEnableNextButton(enabled);
  },
  SetVisibilityButtons: function (visible) {
   if (this.navigationButtons)
    this.navigationButtons.SetVisibilityButtons(visible);
  },
  PerformBackward: function () {
  },
  PerformForward: function () {
  },
  PerformRollBack: function () {
  },
  GetEnableLoopNavigation: function () {
   return false;
  },
  GetImageLoadMode: function () {
   return this.GetImageSlider().imageLoadMode;
  },
  UpdateItemElementsIfRequired: function () {
   this.GetItemElementsManager().UpdateHierarchyIfRequired();
  },
  UpdateItemElementsAfterDelayIfRequired: function () {
   this.GetItemElementsManager().UpdateHierarchyAfterDelayIfRequired();
  },
  IsNeedCreateHyperLink: function () {
   return true;
  },
  GetTarget: function () {
   return this.GetImageSlider().target;
  },
  CreateTemplates: function () {
   this.ForEachItem(function (i) {
    var template = this.GetTemplate(i);
    if (template) {
     var itemElement = this.GetItemElement(i);
     var child = itemElement.firstChild ? itemElement.firstChild.cloneNode(true) : null;
     itemElement.innerHTML = template;
     if (child)
      itemElement.appendChild(child);
    }
   });
  },
  CreateControlHierarchy: function () {
   this.CreateControlHierarchyInternal();
   if (this.CanCreateNavigationButtons())
    this.navigationButtons = this.CreateNavigationButtons();
   this.GetItemElementsManager().CreateItemsIfRequired();
  },
  CreateControlHierarchyInternal: function () {
  },
  CreateItemElements: function () {
   this.ForEachItem(function (i) {
    this.GetItemsContainer().appendChild(this.CreateItemElement(i));
   });
  },
  CreateItemElement: function (index) {
   var itemElement = this.CreateDiv();
   if (!this.GetTemplate(index)) {
    var hyperLinkElement = this.CreateHyperLinkElement(index);
    if (hyperLinkElement)
     itemElement.appendChild(hyperLinkElement);
   }
   return itemElement;
  },
  CreateImageElement: function (index) {
   var image = new Image();
   _aspxSetElementDisplay(image, false);
   this.AttachLoadEvent(image);
   this.GetImageContainerElement(index).appendChild(image);
   image.dxIndex = index;
   image.dxImageSlider = this;
   image.src = this.GetImageSrc(index);
   return image;
  },
  CreateCanvasElement: function () {
   return document.createElement("CANVAS");
  },
  CreateHyperLinkElement: function (index) {
   var url = this.GetNavigateUrl(index);
   if (!this.IsNeedCreateHyperLink() || !url)
    return null;
   var element = document.createElement("A");
   element.target = this.GetTarget();
   element.className = CssClassesConstants.ItemHyperLinkCssClassName;
   element.href = url;
   return element;
  },
  PrepareControlHierarchy: function () {
   this.GetItemElementsManager().PrepareItemsIfRequired();
  },
  PrepareItemElements: function () {
   this.ForEachItem(function (i) {
    this.PrepareItemElement(i);
   });
  },
  PrepareItemElement: function (index) {
   var itemElement = this.GetItemElement(index);
   _aspxSetStyles(itemElement, {
    className: this.GetItemElementCssClass(),
    cssText: this.GetItemElementStyle()
   });
   if (this.GetTemplate(index))
    ASPxImageControlUtils.RemoveLoadingGif(itemElement);
  },
  AdjustControl: function () {
   ControlBase.prototype.AdjustControl.call(this);
   if (this.navigationButtons)
    this.navigationButtons.AdjustControl();
   this.AdjustControlInternal();
   this.SetActiveItemIndexInternal(this.GetActiveItemIndex(), true);
  },
  AdjustControlInternal: function () {
   this.AdjustItemElements();
  },
  AdjustItemElements: function () {
   this.GetItemElementsManager().AdjustItemsIfRequired();
  },
  CalculateSize: function () {
   var fakeElement = this.CreateDiv();
   _aspxSetStyles(fakeElement, {
    className: this.GetItemElementCssClass(),
    cssText: this.GetItemElementStyle()
   });
   this.CalculateItemElementSize(fakeElement);
   _aspxRemoveElement(fakeElement);
  },
  CalculateItemElementSize: function (element) {
  },
  AdjustItemElement: function (index) {
   _aspxSetStyles(this.GetItemElement(index), {
    width: this.GetItemElementWidth(true),
    height: this.GetItemElementHeight(true)
   });
  },
  AdjustImageElement: function (index) {
   if (this.GetTemplate(index) || !this.GetImageSrc(index))
    return;
   var image = this.GetImageElement(index);
   if (!image)
    image = this.CreateImageElement(index);
   else if (ASPxImageControlUtils.IsImageLoaded(image))
    this.ResizeImage(image, index);
  },
  GetItemElementCssClass: function () {
   return "";
  },
  GetItemElementStyle: function () {
   return "";
  },
  ResizeImage: function (image, index) {
   ASPxImageControlUtils.ResizeImage(image, {
    width: this.GetItemElementWidth(true),
    height: this.GetItemElementHeight(true),
    sizeMode: this.GetImageSizeMode(),
    rtl: this.IsRtl(true),
    onEndResize: function(element, isCanvas) {
     if (isCanvas)
      this.PrepareCanvasElement(index);
    }.aspxBind(this)
   });
  },
  PrepareCanvasElement: function (index) {
  },
  GetImageSizeMode: function () {
   return this.GetImageSlider().imageSizeMode;
  },
  GetSwipeGestureElement: function () {
   return this.GetSlidePanelElement();
  },
  CanCreateSwipeGestureHandler: function () {
   return false;
  },
  CreateSwipeGestureHandler: function () {
   ASPxGesturesHelper.AddSwipeSlideGestureHandler(
    this.GetClientControlName() + this.GetUniqueId(),
    function () { return this.GetSwipeGestureElement(); }.aspxBind(this),
    this.IsHorizontalNavigation() ? ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION : ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION,
    function (evt) { return this.CanHandleSwipeGesture(evt); }.aspxBind(this),
    function () { this.PerformBackward(); }.aspxBind(this),
    function () { this.PerformForward(); }.aspxBind(this),
    function () { this.PerformRollBack(); }.aspxBind(this)
   );
  },
  CanHandleSwipeGesture: function (evt) {
   return !!_aspxGetIsParent(this.GetSwipeGestureElement(), _aspxGetEventSource(evt));
  },
  InitializeHandlers: function () {
   if (this.GetImageSlider().allowMouseWheel)
    _aspxAttachEventToElement(this.GetItemsContainer(), _aspxGetMouseWheelEventName(), function (evt) { this.OnMouseWheel(evt); }.aspxBind(this));
   if (this.CanCreateSwipeGestureHandler() && this.GetImageSlider().enablePagingGestures)
    this.CreateSwipeGestureHandler();
  },
  AttachLoadEvent: function (image) {
   _aspxAttachEventToElement(image, "load", _onImageLoad);
  },
  DetachLoadEvents: function (image) {
   _aspxDetachEventFromElement(image, "load", _onImageLoad);
  },
  OnMouseWheel: function (evt) {
   if (!this.IsFocused())
    return;
   if (_aspxGetWheelDelta(evt) > 0)
    this.PerformBackward();
   else
    this.PerformForward();
   return _aspxPreventEvent(evt);
  },
  OnImageLoad: function (image) {
   this.InitializeImage(image);
   this.ResizeImage(image, image.dxIndex);
   ASPxImageControlUtils.RemoveLoadingGif(this.GetItemElement(image.dxIndex));
  },
  InitializeImage: function (image) {
   if (image.naturalWidth && image.naturalHeight)
    return;
   image.naturalWidth = image.width;
   image.naturalHeight = image.height;
  },
  GetElementTransformPosition: function (element) {
   return aspxAnimationUtils.GetTransformValue(element, !this.IsHorizontalNavigation());
  },
  SetElementTransformPosition: function (element, position) {
   aspxAnimationUtils.SetTransformValue(element, position, !this.IsHorizontalNavigation());
  },
  GetWidth: function () {
   return 0;
  },
  GetHeight: function () {
   return 0;
  },
  IsFocused: function () {
   return this.GetImageSlider().IsFocused();
  },
  CreateDocumentFragment: function () {
   var fragment = null;
   if (document.createDocumentFragment)
    fragment = document.createDocumentFragment();
   return fragment;
  },
  IsValidItemIndex: function (index) {
   if (index >= 0 && index < this.GetItemCount())
    return true;
   return false;
  }
 });
 function _onImageLoad(evt) {
  var image = evt.srcElement || this;
  if (!image.dxImageSlider)
   return;
  var imageSlider = image.dxImageSlider;
  imageSlider.DetachLoadEvents(image);
  imageSlider.OnImageLoad(image);
 }
 var ImageAreaStrategy = _aspxCreateClass(ItemsOwnerBase, {
  constructor: function (imageSlider) {
   this.currentItemTextElementOpacity = 0;
   this.defaultItemTextElementOpacity = 0;
   this.touchDeviceElementsVisible = false;
   this.imageAreaStyleSize = { width: "", height: "" };
   this.imageAreaElement = null;
   this.slideShowButton = null; 
   this.overlayLinkElement = null;
   this.overlayImageElement = null;
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  Initialize: function () {
   ItemsOwnerBase.prototype.Initialize.call(this);
   if (this.GetItemTextVisibilityMode() == ElementVisibilityModeEnum.Faded)
    this.defaultItemTextElementOpacity = FadedDefaultOpacity;
   else if (__aspxFirefox)
    this.defaultItemTextElementOpacity = 0.01; 
   this.currentItemTextElementOpacity = this.defaultItemTextElementOpacity;
  },
  GetUniqueId: function () {
   return "_ia_";
  },
  CreateItemElementsManager: function () {
   return new ImageAreaItemElementsManager(this);
  },
  GetTextTemplate: function (index) {
   return this.GetItem(index).ttpl;
  },
  GetItemText: function (index) {
   return this.IsValidItemIndex(index) ? this.GetItem(index).t : null;
  },
  SetSlideShowButtonState: function (play) {
   if (this.slideShowButton)
    this.slideShowButton.SetButtonState(play);
  },
  IsEnablePagingByClick: function () {
   return this.GetImageSlider().enablePagingByClick;
  },
  GetButtonsContainer: function () {
   return this.GetImageSlider().GetPassePartoutElement();
  },
  GetPrevButtonHtml: function () {
   return this.GetImageSlider().pbh;
  },
  GetNextButtonHtml: function () {
   return this.GetImageSlider().nbh;
  },
  UpdateNavigationButtonsState: function () {
   if (!this.navigationButtons)
    return;
   if (this.GetItemCount() == 1)
    this.SetVisibilityButtons(false);
   else {
    var currentItemIndex = this.GetActiveItemIndex();
    this.SetEnablePrevButton(currentItemIndex != 0);
    this.SetEnableNextButton(currentItemIndex != this.GetItemCount() - 1);
   }
  },
  PerformBackward: function () {
   this.StopPlayingWhenPaging();
   var index = this.GetActiveItemIndex();
   index--;
   if (index < 0 && this.GetEnableLoopNavigation())
    index = this.GetItemCount() - 1;
   this.GetImageSlider().SetActiveItemIndexInternal(index);
  },
  PerformForward: function () {
   this.StopPlayingWhenPaging();
   var index = this.GetActiveItemIndex();
   index++;
   if (index == this.GetItemCount() && this.GetEnableLoopNavigation())
    index = 0;
   this.GetImageSlider().SetActiveItemIndexInternal(index);
  },
  PerformRollBack: function () {
   this.SetActiveItemIndexInternal(this.GetActiveItemIndex(), false);
  },
  CreateControlHierarchy: function () {
   ItemsOwnerBase.prototype.CreateControlHierarchy.call(this);
   this.CreateOverlayElements();
  },
  CreateTemplates: function () {
   ItemsOwnerBase.prototype.CreateTemplates.call(this);
   this.ForEachItem(function (i) {
    var template = this.GetTextTemplate(i);
    if (template)
     this.GetItemTextElement(i).innerHTML = template;
   });
  },
  CreateControlHierarchyInternal: function () {
   ItemsOwnerBase.prototype.CreateControlHierarchyInternal.call(this);
   this.CreateImageAreaElement();
   this.CreateSlideShowButton();
  },
  CreateImageAreaElement: function () {
   this.imageAreaElement = document.createElement("DIV");
   this.GetImageSlider().GetPassePartoutElement().appendChild(this.imageAreaElement);
  },
  CreateSlideShowButton: function () {
   if (this.GetImageSlider().playPauseBtnVbl != ElementVisibilityModeEnum.None)
    this.slideShowButton = new SlideShowButton(this);
  },
  CreateOverlayElements: function () {
   var itemsContainer = this.GetItemsContainer();
   if (!itemsContainer)
    return;
   if (this.GetImageSlider().HasNavigateUrls()) {
    this.overlayLinkElement = document.createElement("A");
    itemsContainer.insertBefore(this.overlayLinkElement, itemsContainer.firstChild);
    this.overlayLinkElement.className = CssClassesConstants.OverlayElementCssClass;
    this.overlayLinkElement.target = this.GetTarget();
   }
   this.overlayImageElement = document.createElement("IMG");
   this.overlayImageElement.src = ASPx.EmptyImageUrl;
   this.overlayImageElement.alt = "";
   if (this.overlayLinkElement)
    this.overlayLinkElement.appendChild(this.overlayImageElement);
   else {
    this.overlayImageElement.className = CssClassesConstants.OverlayElementCssClass;
    itemsContainer.insertBefore(this.overlayImageElement, itemsContainer.firstChild);
   }
  },
  UpdateOverlayParameters: function () {
   var currentItem = this.GetItem(this.GetActiveItemIndex());
   if (this.overlayLinkElement) {
    if (!currentItem.u)
     this.overlayLinkElement.removeAttribute("href");
    else if (this.overlayLinkElement.href != currentItem.u)
     this.overlayLinkElement.href = currentItem.u;
   }
   if (this.overlayImageElement) {
    if (currentItem.s)
     this.overlayImageElement.src = currentItem.s;
    this.overlayImageElement.style.display = currentItem.tpl ? "none" : "";
   }
  },
  PrepareControlHierarchy: function () {
   ItemsOwnerBase.prototype.PrepareControlHierarchy.call(this);
   this.UpdateOverlayParameters();
   var imageAreaElement = this.GetImageAreaElement();
   _aspxSetStyles(imageAreaElement, {
    className: this.GetImageSlider().imgAreaCssCl,
    cssText: this.GetImageSlider().imgAreaStyle
   });
   this.imageAreaStyleSize = {
    width: imageAreaElement.style.width,
    height: imageAreaElement.style.height
   };
   this.GetItemsContainer().style.zIndex = "0";
  },
  AdjustControl: function (width, height) {
   this.AdjustImageAreaElement(width, height);
   ItemsOwnerBase.prototype.AdjustControl.call(this);
  },
  AdjustImageAreaElement: function (width, height) {
   var imageAreaElement = this.GetImageAreaElement();
   if (!imageAreaElement.style.width) {
    _aspxSetStyles(imageAreaElement, { width: width });
    if (imageAreaElement.offsetWidth > width)
     _aspxSetStyles(imageAreaElement, { width: width - (imageAreaElement.offsetWidth - width) });
   }
   if (!imageAreaElement.style.height) {
    _aspxSetStyles(imageAreaElement, { height: height });
    if (imageAreaElement.offsetHeight > height)
     _aspxSetStyles(imageAreaElement, { height: height - (imageAreaElement.offsetHeight - height) });
   }
   if (imageAreaElement.offsetHeight < height)
    _aspxSetStyles(imageAreaElement, { top: (height - imageAreaElement.offsetHeight) / 2 });
  },
  ResetControlStyle: function () {
   var imageAreaElement = this.GetImageAreaElement();
   _aspxSetStyles(imageAreaElement, this.imageAreaStyleSize);
   _aspxSetStyles(imageAreaElement, { top: 0 });
  },
  IsNeedCreateHyperLink: function () {
   return false;
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   ItemsOwnerBase.prototype.SetActiveItemIndexInternal.call(this, index, preventAnimation);
   this.UpdateOverlayParameters();
  },
  CalculateItemElementSize: function (fakeElement) {
   var imageArea = this.GetImageAreaElement();
   imageArea.appendChild(fakeElement);
   this.fullItemWidth = SizeUtils.GetClientWidth(imageArea, true);
   this.fullItemHeight = SizeUtils.GetClientHeight(imageArea, true);
   _aspxSetStyles(fakeElement, {
    width: this.fullItemWidth,
    height: this.fullItemHeight
   });
   this.clearItemWidth = this.fullItemWidth - (SizeUtils.GetClientWidth(fakeElement) - this.fullItemWidth);
   this.clearItemHeight = this.fullItemHeight - (SizeUtils.GetClientHeight(fakeElement) - this.fullItemHeight);
  },
  CreateItemElement: function (index) {
   var itemElement = ItemsOwnerBase.prototype.CreateItemElement.call(this, index);
   var textElement = this.CreateItemTextElement(index);
   if (!textElement)
    return itemElement;
   itemElement.appendChild(textElement);
   return itemElement;
  },
  CreateItemTextElement: function (index) {
   var text = this.GetItemText(index);
   var textTemplate = this.GetTextTemplate(index);
   if (this.GetItemTextVisibilityMode() == ElementVisibilityModeEnum.None || (!text && !textTemplate))
    return null;
   var itemTextElement = this.CreateDiv();
   if (!textTemplate)
    itemTextElement.innerHTML = text;
   _aspxSetStyles(itemTextElement, { className: this.GetImageSlider().itemTxtCssCl });
   return itemTextElement;
  },
  PrepareItemTextElement: function (index) {
   var itemTextElement = this.GetItemTextElement(index);
   if (itemTextElement) {
    var style = { cssText: this.GetImageSlider().itemTxtStyle, zIndex: 2 };
    if (this.GetItemTextVisibilityMode() != ElementVisibilityModeEnum.Always)
     style.opacity = this.currentItemTextElementOpacity;
    _aspxSetStyles(itemTextElement, style);
   }
  },
  PrepareItemElement: function (index) {
   ItemsOwnerBase.prototype.PrepareItemElement.call(this, index);
   this.PrepareItemTextElement(index);
  },
  GetItemElementCssClass: function () {
   return this.GetImageSlider().itemCssCl;
  },
  GetItemElementStyle: function () {
   return this.GetImageSlider().itemStyle;
  },
  PrepareCanvasElement: function (index) {
   var canvas = this.GetCanvasElement(index);
   canvas.style.position = "absolute";
   canvas.style.zIndex = "-1";
  },
  GetItemTextElement: function (index) {
   var itemElement = this.GetItemElement(index);
   return itemElement ? _aspxGetChildNodesByClassName(itemElement, CssClassesConstants.TextAreaCssClassName)[0] : null;
  },
  GetImageAreaElement: function () {
   return this.imageAreaElement;
  },
  GetItemTextVisibilityMode: function () {
   return this.GetImageSlider().itemTxtVbl;
  },
  GetNavigationBarStrategy: function () {
   return this.GetImageSlider().GetNavigationBarStrategy();
  },
  HasMouseOverForTouchDevice: function () {
   if (!__aspxTouchUI)
    return false;
   return this.HasMouseOverImageAreaNavigationButtons() || this.HasMouseOverNavigationBarNavigationButtons() || this.HasMouseOverTextArea() || this.HasMouseOverSlideShowButton();
  },
  HasMouseOverImageAreaNavigationButtons: function () {
   return this.IsMouseOverOrFaded(this.GetNavigationBtnsVisibilityMode());
  },
  HasMouseOverNavigationBarNavigationButtons: function () {
   var navigationBar = this.GetNavigationBarStrategy();
   if (!navigationBar)
    return false;
   return this.IsMouseOverOrFaded(navigationBar.GetNavigationBtnsVisibilityMode());
  },
  HasMouseOverTextArea: function () {
   return this.IsMouseOverOrFaded(this.GetItemTextVisibilityMode());
  },
  HasMouseOverSlideShowButton: function () {
   return this.IsMouseOverOrFaded(this.GetImageSlider().playPauseBtnVbl);
  },
  IsMouseOverOrFaded: function (visibility) {
   return visibility == ElementVisibilityModeEnum.Faded || visibility == ElementVisibilityModeEnum.OnMouseOver;
  },
  InitializeHandlers: function () {
   ItemsOwnerBase.prototype.InitializeHandlers.call(this);
   var imageSlider = this.GetImageSlider();
   imageSlider.StrategiesCreated.AddHandler(function () {
    if (this.CanHandleClickEvent())
     _aspxAttachEventToElement(this.GetImageAreaElement(), __aspxTouchUI ? ASPxClientTouchUI.touchMouseUpEventName : "click", function (evt) { this.OnImageAreaClick(evt); }.aspxBind(this));
   }.aspxBind(this));
   if (!__aspxTouchUI && this.IsMouseOverOrFaded(this.GetItemTextVisibilityMode()))
    MouseEnterHelper.AddHandler(
     imageSlider.GetPassePartoutElement(),
     function () { this.AppearTextElements(); }.aspxBind(this),
     function () { this.DisappearTextElements(); }.aspxBind(this)
    );
  },
  CanHandleClickEvent: function () {
   var imageSlider = this.GetImageSlider();
   return !imageSlider.ItemClick.IsEmpty() || imageSlider.HasNavigateUrls() || this.HasMouseOverForTouchDevice();
  },
  OnImageAreaClick: function (evt) {
   this.GetImageSlider().RaiseItemClick();
   if (!this.HasMouseOverForTouchDevice())
    return;
   if (this.touchDeviceElementsVisible) {
    if (this.HasMouseOverTextArea())
     this.DisappearTextElements();
    if (this.HasMouseOverImageAreaNavigationButtons())
     this.navigationButtons.Disappear();
    if (this.HasMouseOverNavigationBarNavigationButtons())
     this.GetNavigationBarStrategy().navigationButtons.Disappear();
    if (this.HasMouseOverSlideShowButton())
     this.slideShowButton.Disappear();
   }
   else {
    if (this.HasMouseOverTextArea())
     this.AppearTextElements();
    if (this.HasMouseOverImageAreaNavigationButtons())
     this.navigationButtons.Appear();
    if (this.HasMouseOverNavigationBarNavigationButtons())
     this.GetNavigationBarStrategy().navigationButtons.Appear();
    if (this.HasMouseOverSlideShowButton())
     this.slideShowButton.Appear();
   }
   this.touchDeviceElementsVisible = !this.touchDeviceElementsVisible;
  },
  AppearTextElements: function () {
   this.FadeItemTextElements(1);
  },
  DisappearTextElements: function () {
   this.FadeItemTextElements(this.defaultItemTextElementOpacity);
  },
  FadeItemTextElements: function (value) {
   this.currentItemTextElementOpacity = value;
   var activeItemIndex = this.GetActiveItemIndex();
   this.ForEachItem(function (i) {
    var preventAnimation = true;
    if (i == activeItemIndex && this.GetAnimationType() != AnimationTypeEnum.None)
     preventAnimation = false;
    this.FadeItemTextElement(i, preventAnimation);
   });
  },
  FadeItemTextElement: function (index, preventAnimation) {
   var textElement = this.GetItemTextElement(index);
   if (!textElement) 
    return;
   if (preventAnimation)
    _aspxSetStyles(textElement, { opacity: this.currentItemTextElementOpacity })
   else
    ASPxAnimationHelper.fadeTo(textElement, { to: this.currentItemTextElementOpacity });
  },
  GetWidth: function () {
   return SizeUtils.GetClientWidth(this.GetImageAreaElement());
  },
  GetHeight: function () {
   return SizeUtils.GetClientHeight(this.GetImageAreaElement());
  }
 });
 var SlideImageAreaStrategy = _aspxCreateClass(ImageAreaStrategy, {
  constructor: function (imageSlider) {
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   ImageAreaStrategy.prototype.SetActiveItemIndexInternal.call(this, index, preventAnimation);
   this.UpdateItemElementsAfterDelayIfRequired();
   var position = this.GetItemElementPosition(index);
   if (preventAnimation) {
    this.SetElementTransformPosition(this.GetSlidePanelElement(), position);
    this.UpdateItemElementsIfRequired();
   }
   else
    ASPxAnimationHelper.slideTo(this.GetSlidePanelElement(), {
     to: position, duration: this.GetImageSlider().animationDuration,
     direction: this.IsHorizontalNavigation() ? ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION : ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION,
     onComplete: function () { this.UpdateItemElementsIfRequired(); }.aspxBind(this)
    });
  },
  PerformRollBack: function () {
   this.SetActiveItemIndexInternal(this.GetActiveItemIndex(), false);
  },
  CreateControlHierarchyInternal: function () {
   ImageAreaStrategy.prototype.CreateControlHierarchyInternal.call(this);
   this.slidePanelElement = this.CreateDiv();
   this.GetImageAreaElement().appendChild(this.slidePanelElement);
  },
  PrepareControlHierarchy: function () {
   ImageAreaStrategy.prototype.PrepareControlHierarchy.call(this);
   var slideElement = this.GetSlidePanelElement();
   slideElement.className = CssClassesConstants.ImageAreaSlidePanelCssClassName;
   this.PatchElementForMSTouch(slideElement);
  },
  AdjustControlInternal: function () {
   ImageAreaStrategy.prototype.AdjustControlInternal.call(this);
   var horizontal = this.IsHorizontalNavigation();
   var width = horizontal ? this.GetItemCount() * this.GetItemElementWidth() : this.GetItemElementWidth();
   var height = !horizontal ? this.GetItemCount() * this.GetItemElementHeight() : this.GetItemElementHeight();
   _aspxSetStyles(this.GetSlidePanelElement(), {
    width: width,
    height: height
   });
  },
  AdjustItemElement: function (index) {
   ImageAreaStrategy.prototype.AdjustItemElement.call(this, index);
   var itemElement = this.GetItemElement(index);
   var position = this.IsHorizontalNavigation() ? this.GetItemElementWidth() * index : this.GetItemElementHeight() * index;
   if (this.IsHorizontalNavigation())
    _aspxSetStyles(itemElement, { left: position });
   else
    _aspxSetStyles(itemElement, { top: position });
  },
  GetItemsContainer: function () {
   return this.GetSlidePanelElement();
  },
  CanCreateSwipeGestureHandler: function () {
   return true;
  },
  IsEnablePagingByClick: function () {
   var imageSlider = this.GetImageSlider();
   return imageSlider.ItemClick.IsEmpty() && !imageSlider.HasNavigateUrls() && ImageAreaStrategy.prototype.IsEnablePagingByClick.call(this);
  },
  OnImageAreaClick: function (evt) {
   if (this.IsExecutedGesture())
    return _aspxPreventEventAndBubble(evt);
   else
    ImageAreaStrategy.prototype.OnImageAreaClick.call(this, evt);
  },
  GetItemElementPosition: function (index) {
   return this.IsHorizontalNavigation() ? -(index * this.GetItemElementWidth()) : -(index * this.GetItemElementHeight());
  }
 });
 var SlideLoopNavigationImageAreaStrategy = _aspxCreateClass(SlideImageAreaStrategy, {
  constructor: function (imageSlider) {
   this.simpleTransition = null;
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  CreateItemElementsManager: function () {
   return new LoopImageAreaItemElementsManager(this);
  },
  GetEnableLoopNavigation: function () {
   return true;
  },
  StartSlideSimpleTransition: function (from, to, preventAnimation) {
   if (preventAnimation)
    this.UpdateItemsPosition(to - from);
   else {
    this.simpleTransition = new aspxSimpleAnimationTransition({
     duration: this.GetImageSlider().animationDuration,
     onUpdate: function (value) {
      this.UpdateItemsPosition(value);
     }.aspxBind(this)
    });
    this.simpleTransition.Start(from, to);
   }
  },
  StopSimpleTransition: function () {
   if (this.simpleTransition) {
    this.simpleTransition.Cancel();
    this.simpleTransition = null;
   }
  },
  UpdateItemsPosition: function (value) {
   this.ForEachItem(function (i) {
    var element = this.GetItemElement(i);
    if (element) {
     element.dxPosition = element.dxPosition + value;
     this.SetItemPosition(element);
    }
   });
  },
  OnMouseMoveUpdatePosition: function (position) {
   this.StopSimpleTransition();
   var itemSize = this.GetItemElementSize();
   this.ForEachItem(function (i) {
    var element = this.GetItemElement(i);
    if (element)
     element.dxPosition = element.dxPosition + position;
   });
   this.ForEachItem(function (i) {
    var element = this.GetItemElement(i);
    if (!element)
     return;
    this.SetItemPosition(element);
    if (element.dxPosition < 0 && ((element.dxPosition + itemSize) > 0)) {
     var index = i + 1;
     if (index == this.GetItemCount())
      index = 0;
     var nextItem = this.GetItemElement(index);
     nextItem.dxPosition = element.dxPosition + itemSize;
     this.SetItemPosition(nextItem);
    }
    if (element.dxPosition < itemSize && ((element.dxPosition + itemSize) > itemSize)) {
     var index = i - 1;
     if (index < 0)
      index = this.GetItemCount() - 1;
     var nextItem = this.GetItemElement(index);
     nextItem.dxPosition = element.dxPosition - itemSize;
     this.SetItemPosition(nextItem);
    }
   });
  },
  SetItemPosition: function (itemElement) {
   this.SetElementTransformPosition(itemElement, itemElement.dxPosition);
  },
  SetActiveItemIndexInternal: function (index, preventAnimation, isRollback) {
   ImageAreaStrategy.prototype.SetActiveItemIndexInternal.call(this, index, preventAnimation);
   this.StopSimpleTransition();
   this.UpdateItemElementsIfRequired();
   var currentIndex = this.GetPrevItemIndex();
   if (currentIndex == -1)
    currentIndex = 0;
   if (!isRollback) {
    var isLeft = currentIndex > index;
    if (currentIndex == 0 && index == this.GetItemCount() - 1)
     isLeft = true;
    if (currentIndex == this.GetItemCount() - 1 && index == 0)
     isLeft = false;
    var prevItem = this.GetItemElement(currentIndex);
    var nextIndex = isLeft ? currentIndex - 1 : currentIndex + 1;
    for (var i = 1; i < this.GetItemCount() ; i++) {
     if (isLeft && nextIndex < 0)
      nextIndex = this.GetItemCount() - 1;
     else if (nextIndex == this.GetItemCount())
      nextIndex = 0;
     var nextItem = this.GetItemElement(nextIndex);
     if (nextItem) {
      nextItem.dxPosition = (isLeft ? -1 : 1) * (this.GetItemElementSize() * i) + prevItem.dxPosition;
      this.SetItemPosition(nextItem);
     }
     nextIndex = isLeft ? nextIndex - 1 : nextIndex + 1;
    }
   }
   var offset = this.GetItemElement(index).dxPosition;
   this.ForEachItem(function (i) {
    var element = this.GetItemElement(i);
    if (element)
     element.dxPosition = element.dxPosition - offset;
   });
   this.StartSlideSimpleTransition(offset, 0);
  },
  PerformRollBack: function () {
   this.SetActiveItemIndexInternal(this.GetActiveItemIndex(), false, true);
  },
  CreateControlHierarchyInternal: function () {
   ImageAreaStrategy.prototype.CreateControlHierarchyInternal.call(this);
  },
  PrepareControlHierarchy: function () {
   ImageAreaStrategy.prototype.PrepareControlHierarchy.call(this);
   this.PatchElementForMSTouch(this.GetImageAreaElement());
  },
  AdjustControlInternal: function () {
   ImageAreaStrategy.prototype.AdjustControlInternal.call(this);
  },
  AdjustItemElement: function (index) {
   ImageAreaStrategy.prototype.AdjustItemElement.call(this, index);
   var itemElement = this.GetItemElement(index);
   itemElement.dxPosition = this.IsHorizontalNavigation() ? this.GetItemElementWidth() * index : this.GetItemElementHeight() * index;;
   this.SetItemPosition(itemElement);
  },
  CreateSwipeGestureHandler: function () {
   ASPxGesturesHelper.AddSwipeSlideGestureHandler(
    this.GetClientControlName() + this.GetUniqueId(),
    function () { return this.GetSwipeGestureElement(); }.aspxBind(this),
    this.IsHorizontalNavigation() ? ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION : ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION,
    function (evt) { return this.CanHandleSwipeGesture(evt); }.aspxBind(this),
    function () { this.PerformBackward(); }.aspxBind(this),
    function () { this.PerformForward(); }.aspxBind(this),
    function () { this.PerformRollBack(); }.aspxBind(this),
    function (position) { this.OnMouseMoveUpdatePosition(position); }.aspxBind(this)
   );
  },
  GetSwipeGestureElement: function () {
   return this.GetImageAreaElement();
  },
  GetItemsContainer: function () {
   return this.GetImageAreaElement();
  },
  UpdateNavigationButtonsState: function () {
  }
 });
 FadeImageAreaStrategy = _aspxCreateClass(ImageAreaStrategy, {
  constructor: function (imageSlider) {
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   ImageAreaStrategy.prototype.SetActiveItemIndexInternal.call(this, index, preventAnimation);
   this.UpdateItemElementsIfRequired();
   var appearItem = this.GetItemElement(index);
   var disapperItem = this.GetItemElement(this.GetPrevItemIndex());
   if (preventAnimation) {
    this.SetVisible(appearItem);
    if (disapperItem)
     this.SetInvisible(disapperItem);
   }
   else {
    var duration = this.GetImageSlider().animationDuration;
    _aspxSetElementDisplay(appearItem, true);
    ASPxAnimationHelper.fadeTo(disapperItem, {
     to: 0, duration: duration,
     onComplete: function (el) { _aspxSetElementDisplay(el, false); }
    });
    ASPxAnimationHelper.fadeTo(appearItem, {
     to: 1, duration: duration
    });
   }
  },
  UpdateNavigationButtonsState: function () {
   if (!this.GetEnableLoopNavigation())
    ImageAreaStrategy.prototype.UpdateNavigationButtonsState.call(this);
  },
  AdjustItemElement: function (index) {
   ImageAreaStrategy.prototype.AdjustItemElement.call(this, index);
   this.SetInvisible(this.GetItemElement(index));
  },
  GetEnableLoopNavigation: function () {
   return this.GetImageSlider().enableLoopNavigation;
  },
  CanCreateSwipeGestureHandler: function () {
   return true;
  },
  GetSwipeGestureElement: function () {
   return this.GetImageAreaElement();
  },
  OnImageAreaClick: function (evt) {
   if (this.IsExecutedGesture())
    return _aspxPreventEventAndBubble(evt);
   else
    ImageAreaStrategy.prototype.OnImageAreaClick.call(this, evt);
  },
  CreateSwipeGestureHandler: function () {
   ASPxGesturesHelper.AddSwipeSlideGestureHandler(
    this.GetClientControlName() + this.GetUniqueId(),
    function () { return this.GetSwipeGestureElement(); }.aspxBind(this),
    this.IsHorizontalNavigation() ? ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION : ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION,
    function (evt) { return this.CanHandleSwipeGesture(evt); }.aspxBind(this),
    function () { this.PerformBackward(); }.aspxBind(this),
    function () { this.PerformForward(); }.aspxBind(this),
    function () { },
    function () { }
   );
  },
  GetItemsContainer: function () {
   return this.GetImageAreaElement();
  },
  SetVisible: function (element) {
   _aspxSetStyles(element, {
    display: "",
    opacity: 1
   });
  },
  SetInvisible: function (element) {
   _aspxSetStyles(element, {
    display: "none",
    opacity: 0
   });
  }
 });
 var NoneImageAreaStrategy = _aspxCreateClass(FadeImageAreaStrategy, {
  constructor: function (imageSlider) {
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   FadeImageAreaStrategy.prototype.SetActiveItemIndexInternal.call(this, index, true);
  }
 });
 var NavigationBarStrategy = _aspxCreateClass(ItemsOwnerBase, {
  constructor: function (imageSlider) {
   this.navigationBarElement = null;
   this.slidePanelWrapperElement = null;
   this.lastSlideItemsPortionDate = new Date();
   this.slideElementPosition = 0;
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  GetUniqueId: function () {
   return "_nb_";
  },
  IsHorizontalNavigation: function () {
   var position = this.GetPositionMode();
   return position == NavigationBarPositionEnum.Top || position == NavigationBarPositionEnum.Bottom;
  },
  IsNeedCreateHyperLink: function () {
   return false;
  },
  CreateItemElementsManager: function () {
   return new NavigationBarItemElementsManager(this);
  },
  GetTemplate: function (index) {
   return this.GetItem(index).tmtpl;
  },
  GetImageSrc: function (index) {
   var thumbnailImageSrc = this.GetItem(index).ts;
   if (thumbnailImageSrc)
    return thumbnailImageSrc;
   return this.GetItem(index).s;
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   var snapToLeft = this.IsSnapToLeft(index);
   var nextIndex = snapToLeft ? index - 1 : index + 1;
   if (this.GetImageSlider().extremeItemClickMode == ExtremeItemClickModeEnum.Select || !this.IsValidItemIndex(nextIndex))
    nextIndex = index;
   if (!this.IsVisibleItemElement(nextIndex, true))
    this.SlideToItem(nextIndex, snapToLeft, preventAnimation);
   this.SetActiveItemVisually(index, preventAnimation);
  },
  IsVisibleItemElement: function (index, considerSize) {
   var slideWrapperElementSize = this.GetElementSize(this.GetSlidePanelWrapperElement());
   var itemPosition = (this.GetItemElementSize() + this.GetItemSpacing()) * index;
   var itemPositionInSlideWrapper = this.ConvertItemPositionToSlideWrapperPosition(itemPosition);
   if (considerSize)
    return itemPositionInSlideWrapper >= 0 && itemPositionInSlideWrapper + this.GetItemElementSize() <= slideWrapperElementSize;
   return itemPositionInSlideWrapper + this.GetItemElementSize() >= 0 && itemPositionInSlideWrapper <= slideWrapperElementSize;
  },
  IsSnapToLeft: function (index) {
   var slideWrapperElementSize = this.GetElementSize(this.GetSlidePanelWrapperElement());
   var itemPosition = (this.GetItemElementSize() + this.GetItemSpacing()) * index;
   var lastItemSize = this.GetItemElementSize() + (index != this.GetItemCount() - 1 ? this.GetItemSpacing() : 0);
   return this.ConvertItemPositionToSlideWrapperPosition(itemPosition + lastItemSize) < (slideWrapperElementSize / 2);
  },
  ConvertItemPositionToSlideWrapperPosition: function (itemPosition) {
   return this.GetElementTransformPosition(this.GetSlidePanelElement()) + itemPosition;
  },
  SlideToItem: function (index, snapToLeft, preventAnimation) {
   this.UpdateItemElementsAfterDelayIfRequired();
   this.CalculateSlideElementPosition(index, snapToLeft);
   this.PerformSlideAction(preventAnimation);
  },
  CalculateSlideElementPosition: function (index, snapToLeft) {
   var slideWrapperElementSize = this.GetElementSize(this.GetSlidePanelWrapperElement());
   var itemPosition = (this.GetItemElementSize() + this.GetItemSpacing()) * index;
   if (snapToLeft) {
    this.slideElementPosition = -itemPosition;
    var limitPosition = -(this.GetElementSize(this.GetSlidePanelElement()) - this.GetElementSize(this.GetSlidePanelWrapperElement()));
    var next = this.GetElementTransformPosition(this.GetSlidePanelElement()) > this.slideElementPosition;
    if (this.slideElementPosition < limitPosition || next && Math.abs(-limitPosition + this.slideElementPosition) < this.GetItemElementSize())
     this.slideElementPosition = limitPosition;
   }
   else {
    this.slideElementPosition = slideWrapperElementSize - (itemPosition + this.GetItemElementSize());
    var prev = this.GetElementTransformPosition(this.GetSlidePanelElement()) < this.slideElementPosition;
    if (this.slideElementPosition > 0 || prev && this.slideElementPosition > -this.GetItemElementSize())
     this.slideElementPosition = 0;
   }
  },
  PerformSlideAction: function (preventAnimation) {
   this.UpdateNavigationButtonsState(); 
   if (preventAnimation)
    this.SetElementTransformPosition(this.GetSlidePanelElement(), this.slideElementPosition);
   else {
    ASPxAnimationHelper.slideTo(this.GetSlidePanelElement(), {
     to: this.slideElementPosition, callBack: function () { this.UpdateItemElementsIfRequired(); }.aspxBind(this),
     duration: this.IsSinglePagingMode() ? 300 : aspxAnimationTransitionBase.Durations.Default,
     direction: this.IsHorizontalNavigation() ? ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION : ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION
    });
   }
  },
  SetActiveItemVisually: function (index, preventAnimation) {
  },
  GetNavigationBtnsVisibilityMode: function () {
   return this.GetImageSlider().thumbNavBtnsVbl;
  },
  GetButtonsContainer: function () {
   return this.GetNavigationBarElement();
  },
  GetPrevButtonHtml: function () {
   return this.GetImageSlider().nbpbh;
  },
  GetNextButtonHtml: function () {
   return this.GetImageSlider().nbnbh;
  },
  UpdateNavigationButtonsState: function () {
   if (!this.navigationButtons)
    return;
   if (this.IsWrapperOverlapsItemCollection())
    this.SetVisibilityButtons(false);
   else {
    this.SetVisibilityButtons(true);
    var minOffset = -(this.GetElementSize(this.GetSlidePanelElement(), false) - this.GetElementSize(this.GetSlidePanelWrapperElement(), true)), maxOffset = 0;
    this.SetEnablePrevButton(this.slideElementPosition != maxOffset);
    this.SetEnableNextButton(this.slideElementPosition != minOffset);
   }
  },
  PerformBackward: function () {
   if (this.IsSinglePagingMode())
    this.SlideItemsPortionSingleMode(true);
   else
    this.SlideItemsPortionPageMode(true);
  },
  PerformForward: function () {
   if (this.IsSinglePagingMode())
    this.SlideItemsPortionSingleMode(false);
   else
    this.SlideItemsPortionPageMode(false);
  },
  PerformRollBack: function () {
   var position = this.GetElementTransformPosition(this.GetSlidePanelElement());
   var slidePanelElementSize = this.GetElementSize(this.GetSlidePanelElement());
   var slidePanelWrapperElementSize = this.GetElementSize(this.GetSlidePanelWrapperElement());
   var minPosition = slidePanelWrapperElementSize - slidePanelElementSize;
   if (this.IsWrapperOverlapsItemCollection())
    this.slideElementPosition = (slidePanelWrapperElementSize - slidePanelElementSize) / 2;
   else if (position > 0)
    this.slideElementPosition = 0;
   else if (position < minPosition)
    this.slideElementPosition = minPosition;
   this.PerformSlideAction();
  },
  SlideItemsPortionPageMode: function (backward) {
   var index = backward ? 0 : this.GetItemCount() - 1;
   var lastIndex = backward ? this.GetItemCount() - 1 : 0;
   var previousInvisibleIndex = index;
   while (index != lastIndex) {
    if (this.IsVisibleItemElement(index, true)) {
     this.SlideToItem(previousInvisibleIndex, !backward);
     break;
    }
    previousInvisibleIndex = index;
    index += backward ? 1 : -1;
   }
  },
  SlideItemsPortionSingleMode: function (backward) {
   var index = backward ? 0 : this.GetItemCount() - 1;
   var lastIndex = backward ? this.GetItemCount() - 1 : 0;
   var previousInvisibleIndex = index;
   var considerSize = new Date() - this.lastSlideItemsPortionDate < 350 ? false : true;
   while (index != lastIndex) {
    if (this.IsVisibleItemElement(index, considerSize)) {
     this.SlideToItem(previousInvisibleIndex, backward);
     break;
    }
    previousInvisibleIndex = index;
    index += backward ? 1 : -1;
   }
   this.lastSlideItemsPortionDate = new Date();
  },
  CreateControlHierarchyInternal: function () {
   ItemsOwnerBase.prototype.CreateControlHierarchyInternal.call(this);
   var mainElement = this.GetMainElement();
   this.navigationBarElement = this.CreateDiv();
   this.slidePanelWrapperElement = this.CreateDiv();
   switch (this.GetPositionMode()) {
    case NavigationBarPositionEnum.Top:
    case NavigationBarPositionEnum.Left:
     var passePartour = this.GetImageSlider().GetPassePartoutElement();
     if (passePartour) {
      mainElement.insertBefore(this.navigationBarElement, passePartour);
      break;
     }
    case NavigationBarPositionEnum.Bottom:
    case NavigationBarPositionEnum.Right:
     mainElement.appendChild(this.navigationBarElement);
     break;
   }
   this.slidePanelElement = this.CreateDiv();
   this.slidePanelWrapperElement.appendChild(this.slidePanelElement);
   this.navigationBarElement.appendChild(this.slidePanelWrapperElement);
  },
  GetItemsContainer: function () {
   return this.GetSlidePanelElement();
  },
  PrepareControlHierarchy: function () {
   ItemsOwnerBase.prototype.PrepareControlHierarchy.call(this);
   this.PrepareNavigationBarElement();
   this.PrepareSlidePanelElement();
  },
  PrepareNavigationBarElement: function () {
   var navigationBarElement = this.GetNavigationBarElement();
   _aspxSetStyles(navigationBarElement, {
    className: this.GetImageSlider().navBarCssCl,
    cssText: this.GetImageSlider().navBarStyle
   });
  },
  PrepareSlidePanelElement: function () {
   var slideElement = this.GetSlidePanelElement();
   slideElement.className = CssClassesConstants.NavigationBarSlidePanelCssClassName;
   this.GetSlidePanelWrapperElement().className = CssClassesConstants.NavigationBarSlidePanelWrapperCssClassName;
   this.PatchElementForMSTouch(slideElement);
  },
  AdjustControlInternal: function () {
   ItemsOwnerBase.prototype.AdjustControlInternal.call(this);
   this.AdjustNavigationBarElement();
   this.AdjustSlidePanelElement();
   this.UpdateItemElementsIfRequired();
   this.UpdateNavigationButtonsState();
  },
  AdjustItemElements: function () {
   if (!this.IsAdjustedSize()) {
    ItemsOwnerBase.prototype.AdjustItemElements.call(this);
    var horizontal = this.IsHorizontalNavigation();
    var width = horizontal ? this.GetItemCount() * this.GetItemWidthWithSpacing() - this.GetItemSpacing() : this.GetItemElementWidth();
    var height = horizontal ? this.GetItemElementHeight() : this.GetItemCount() * this.GetItemHeightWithSpacing() - this.GetItemSpacing();
    _aspxSetStyles(this.GetSlidePanelElement(), { width: width, height: height });
   }
  },
  AdjustNavigationBarElement: function () {
   var styles = this.GetNavigationBarElementsStyles();
   _aspxSetStyles(this.GetNavigationBarElement(), styles.navBarStyle);
   _aspxSetStyles(this.GetSlidePanelWrapperElement(), styles.wrapperStyle);
  },
  GetNavigationBarElementsStyles: function () {
   var isHorizontal = this.IsHorizontalNavigation();
   var styles = {};
   if (this.CanUseVisibleItemCount())
    styles = {
     width: isHorizontal ? this.GetItemWidthWithSpacing() * this.GetVisibleItemCount() - this.GetItemSpacing() : this.GetItemElementWidth(),
     height: isHorizontal ? this.GetItemElementHeight() : this.GetItemHeightWithSpacing() * this.GetVisibleItemCount() - this.GetItemSpacing()
    };
   else {
    var navigationBar = this.GetNavigationBarElement();
    var mainElementWidth = SizeUtils.GetClientWidth(this.GetMainElement(), true);
    var mainElementHeight = SizeUtils.GetClientHeight(this.GetMainElement(), true);
    styles = {
     width: this.IsHorizontalNavigation() ? mainElementWidth : this.GetItemElementWidth(),
     height: this.IsHorizontalNavigation() ? this.GetItemElementHeight() : mainElementHeight
    };
    _aspxSetStyles(navigationBar, styles);
    styles.width = this.IsHorizontalNavigation() ? mainElementWidth - (navigationBar.offsetWidth - mainElementWidth) : this.GetItemElementWidth();
    styles.height = this.IsHorizontalNavigation() ? this.GetItemElementHeight() : mainElementHeight - (navigationBar.offsetHeight - mainElementHeight);
   }
   return {
    navBarStyle: {
     width: styles.width,
     height: styles.height
    },
    wrapperStyle: {
     width: styles.width,
     height: styles.height
    }
   };
  },
  CanUseVisibleItemCount: function () {
   return !this.GetImageSlider().showImageArea && this.GetVisibleItemCount() > 0;
  },
  AdjustSlidePanelElement: function () {
   this.slideElementPosition = this.GetPostDataOffset();
   if (this.IsWrapperOverlapsItemCollection())
    this.slideElementPosition = (this.GetElementSize(this.GetSlidePanelWrapperElement()) - this.GetElementSize(this.GetSlidePanelElement())) / 2;
   this.SetElementTransformPosition(this.GetSlidePanelElement(), this.slideElementPosition);
  },
  IsWrapperOverlapsItemCollection: function () {
   return this.GetElementSize(this.GetSlidePanelWrapperElement()) > this.GetElementSize(this.GetSlidePanelElement());
  },
  GetPostDataOffset: function () {
   var offset = this.IsAdjustedSize() ? 0 : this.GetImageSlider().navBarOffset;
   if (offset == 0 && this.IsRtl())
    offset = this.GetElementSize(this.GetSlidePanelWrapperElement()) - this.GetElementSize(this.GetSlidePanelElement());
   return offset;
  },
  PrepareItemElement: function (index) {
   ItemsOwnerBase.prototype.PrepareItemElement.call(this, index);
   this.GetItemElement(index).itemIndex = index;
  },
  AdjustItemElement: function (index) {
   ItemsOwnerBase.prototype.AdjustItemElement.call(this, index);
   _aspxSetStyles(this.GetItemElement(index), this.IsHorizontalNavigation() ? { left: this.GetItemWidthWithSpacing() * index } : { top: this.GetItemHeightWithSpacing() * index });
  },
  CalculateSize: function () {
   if (!this.IsAdjustedSize())
    ItemsOwnerBase.prototype.CalculateSize.call(this);
  },
  CalculateItemElementSize: function (fakeElement) {
   this.GetNavigationBarElement().appendChild(fakeElement);
   this.fullItemWidth = SizeUtils.GetClientWidth(fakeElement);
   this.fullItemHeight = SizeUtils.GetClientHeight(fakeElement);
   this.clearItemWidth = SizeUtils.GetClientWidth(fakeElement, true);
   this.clearItemHeight = SizeUtils.GetClientHeight(fakeElement, true);
  },
  ResetControlStyle: function () {
   _aspxSetStyles(this.GetNavigationBarElement(), { width: 0, height: 0 });
  },
  CanCreateSwipeGestureHandler: function () {
   return true;
  },
  InitializeHandlers: function () {
   ItemsOwnerBase.prototype.InitializeHandlers.call(this);
   _aspxAttachEventToElement(this.GetSlidePanelElement(), this.GetMouseUpEventName(), function (evt) { this.OnNavigationBarMouseUp(evt); }.aspxBind(this)); 
  },
  OnNavigationBarMouseUp: function (evt) {
   if (this.CanCandleMouseUpEvent(evt)) {
    var index = this.GetItemIndexFromEvent(evt);
    if (index != -1) {
     this.GetImageSlider().SetActiveItemIndexInternal(index);
     this.StopPlayingWhenPaging();
     this.GetImageSlider().RaiseThumbnailItemClick();
    }
   }
  },
  GetMouseUpEventName: function () {
   return ASPxClientTouchUI.touchMouseUpEventName;
  },
  CanCandleMouseUpEvent: function (evt) {
   return !this.IsExecutedGesture() && _aspxGetIsLeftButtonPressed(evt);
  },
  GetItemIndexFromEvent: function (evt) {
   var eventSource = _aspxGetEventSource(evt);
   var itemElement = _aspxGetParentByClassName(eventSource, this.GetItemElementCssClass());
   if (itemElement)
    return itemElement.itemIndex;
   var selectedItem = this.GetSelectedStateElement();
   if (eventSource.parentNode == selectedItem || eventSource == selectedItem)
    return this.GetImageSlider().GetActiveItemIndex();
   return -1;
  },
  GetImageSizeMode: function () {
   return ASPxImageControlUtils.ImageSizeModeEnum.FitAndCrop;
  },
  GetMainElement: function () {
   return this.GetImageSlider().GetMainElement();
  },
  GetSlidePanelWrapperElement: function () {
   return this.slidePanelWrapperElement;
  },
  GetNavigationBarElement: function () {
   return this.navigationBarElement;
  },
  GetElementSize: function (element, clear) {
   return this.IsHorizontalNavigation() ? SizeUtils.GetClientWidth(element, clear) : SizeUtils.GetClientHeight(element, clear);
  },
  GetItemWidthWithSpacing: function () {
   return this.GetItemElementWidth() + this.GetItemSpacing();
  },
  GetItemHeightWithSpacing: function () {
   return this.GetItemElementHeight() + this.GetItemSpacing();
  },
  GetPositionMode: function () {
   return this.GetImageSlider().GetNavigationBarPosition();
  },
  GetItemSpacing: function () {
   return this.GetImageSlider().itemSpacing;
  },
  IsSinglePagingMode: function () {
   return this.GetImageSlider().navBarPagingMode == NavigationBarPagingModeEnum.Single;
  },
  GetVisibleItemCount: function () {
   return this.GetImageSlider().visibleItemsCount;
  },
  GetSlideElementPosition: function () {
   return Math.round(this.slideElementPosition);
  },
  GetWidth: function () {
   var navigationBarElement = this.GetNavigationBarElement();
   var currentStyle = _aspxGetCurrentStyle(navigationBarElement);
   var width = SizeUtils.GetClientWidth(navigationBarElement) + _aspxPxToInt(currentStyle.marginLeft) + _aspxPxToInt(currentStyle.marginRight);
   return width > 0 ? width : 0;
  },
  GetHeight: function () {
   var navigationBarElement = this.GetNavigationBarElement();
   var currentStyle = _aspxGetCurrentStyle(navigationBarElement);
   var height = SizeUtils.GetClientHeight(navigationBarElement) + _aspxPxToInt(currentStyle.marginTop) + _aspxPxToInt(currentStyle.marginBottom);
   return height > 0 ? height : 0;
  }
 });
 var NavigationBarThumbnailStrategy = _aspxCreateClass(NavigationBarStrategy, {
  constructor: function (imageSlider) {
   this.selectedStateElement = null;
   this.hoverStateElementSize = {};
   this.innerHoverStateElementSize = {};
   this.setActiveIndexCounter = 0;
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  BeginSetActiveIndex: function () {
   this.setActiveIndexCounter++;
  },
  EndSetActiveIndex: function () {
   this.setActiveIndexCounter--;
  },
  NeedOffsetCorrection: function () {
   return this.setActiveIndexCounter > 0 && this.GetImageSlider().extremeItemClickMode == ExtremeItemClickModeEnum.SelectAndSlide;
  },
  GetNavigationButtonsPosition: function () {
   return this.GetImageSlider().thumbNavBtnsPos;
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   this.BeginSetActiveIndex();
   NavigationBarStrategy.prototype.SetActiveItemIndexInternal.call(this, index, preventAnimation);
   this.EndSetActiveIndex();
  },
  SetActiveItemVisually: function (index, preventAnimation) {
   this.SelectItemElement(index);
   this.MoveSelectedItem(index, preventAnimation);
  },
  SelectItemElement: function (index) {
   var currentItemElement = this.GetItemElement(index);
   var prevItemElement = this.GetItemElement(this.GetPrevItemIndex());
   if (prevItemElement)
    prevItemElement.className = prevItemElement.className.replace(CssClassesConstants.NavigationBarSelectedStateCssClassName, "");
   if (currentItemElement && !_aspxElementCssClassContains(currentItemElement, CssClassesConstants.NavigationBarSelectedStateCssClassName))
    currentItemElement.className += CssClassesConstants.NavigationBarSelectedStateCssClassName;
  },
  MoveSelectedItem: function (index, preventAnimation) {
   var selectedStateElement = this.GetSelectedStateElement();
   var position = (this.GetItemElementSize() + this.GetItemSpacing()) * index;
   preventAnimation = this.GetImageSlider().disableSelectedStateAnimation || preventAnimation; 
   if (preventAnimation)
    this.SetElementTransformPosition(selectedStateElement, position);
   else
    ASPxAnimationHelper.slideTo(selectedStateElement, {
     to: position,
     direction: this.IsHorizontalNavigation() ? ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION : ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION
    });
  },
  SlideItemsPortionPageMode: function (backward) {
   this.PerformSlideToExtremeInvisibleElement(backward, true, !backward);
  },
  PerformRollBack: function () {
   NavigationBarStrategy.prototype.PerformRollBack.call(this);
  },
  UpdateItemElementsIfRequired: function () {
   NavigationBarStrategy.prototype.UpdateItemElementsIfRequired.call(this);
   if (this.GetImageLoadMode() != LoadModeEnum.AllImages)
    this.SelectItemElement(this.GetActiveItemIndex());
  },
  CanCreateNavigationButtons: function () {
   if (!this.CanUseVisibleItemCount())
    return true;
   return this.GetVisibleItemCount() < this.GetItemCount();
  },
  CreateNavigationButtons: function () {
   if (this.GetNavigationBtnsVisibilityMode() == ElementVisibilityModeEnum.None)
    return null;
   if (this.GetNavigationButtonsPosition() == NavigationBarButtonPositionEnum.Outside)
    return new OutsideNavigationButtons(this);
   return new NavigationButtons(this);
  },
  CreateControlHierarchy: function () {
   NavigationBarStrategy.prototype.CreateControlHierarchy.call(this);
   this.CreateSelectedStateElement();
  },
  CreateItemElement: function (index) {
   var itemElement = NavigationBarStrategy.prototype.CreateItemElement.call(this, index);
   if (this.IsEnabled() && !__aspxTouchUI)
    itemElement.appendChild(this.CreateHoverStateElement());
   return itemElement;
  },
  CreateHoverStateElement: function (itemElement) {
   var element = this.CreateDiv();
   element.className = CssClassesConstants.NavigationBarHoverStateElementCssClassName;
   element.appendChild(this.CreateDiv());
   return element;
  },
  CreateSelectedStateElement: function () {
   this.selectedStateElement = this.CreateDiv();
   this.selectedStateElement.appendChild(this.CreateDiv()); 
   this.GetSlidePanelElement().appendChild(this.selectedStateElement);
  },
  PrepareControlHierarchy: function () {
   NavigationBarStrategy.prototype.PrepareControlHierarchy.call(this);
   _aspxSetStyles(this.GetSelectedStateElement(), {
    className: this.GetImageSlider().thSelCssCl,
    cssText: this.GetImageSlider().thSelStyle
   });
  },
  PrepareItemElement: function (index) {
   NavigationBarStrategy.prototype.PrepareItemElement.call(this, index);
   var stateController = this.GetStateController();
   if (this.IsEnabled() && !__aspxTouchUI && stateController && this.GetEnableItemHoverState()) {
    var itemElement = this.GetItemElement(index);
    itemElement.id = this.GetClientControlName() + "_nb_" + index;
    stateController.AddHoverItem(itemElement.id, [CssClassesConstants.NavigationBarHoverStateCssClassName], [""], [""], null, null, false);
   }
  },
  GetEnableItemHoverState: function () {
   return true;
  },
  CalculateItemElementSize: function (fakeElement) {
   NavigationBarStrategy.prototype.CalculateItemElementSize.call(this, fakeElement);
   if (this.IsEnabled() && !__aspxTouchUI)
    this.CalculateHoverStateElement(fakeElement);
  },
  CalculateHoverStateElement: function (parent) {
   var actualWidth = this.GetItemElementWidth();
   var actualHeight = this.GetItemElementHeight();
   var hoverStateElement = this.CreateHoverStateElement();
   parent.appendChild(hoverStateElement);
   _aspxSetStyles(hoverStateElement, { display: "block" });
   this.hoverStateElementSize = this.GetBorderBoxSize(hoverStateElement, this.GetItemElementWidth(), this.GetItemElementHeight());
   var innerDiv = this.GetFirstChild(hoverStateElement);
   this.innerHoverStateElementSize = this.GetBorderBoxSize(innerDiv, this.hoverStateElementSize.width, this.hoverStateElementSize.height);
  },
  AdjustControlInternal: function () {
   NavigationBarStrategy.prototype.AdjustControlInternal.call(this);
   this.AdjustSelectedStateElement();
  },
  AdjustItemElement: function (index) {
   NavigationBarStrategy.prototype.AdjustItemElement.call(this, index);
   if (this.IsEnabled() && !__aspxTouchUI)
    this.AdjustHoverStateElement(index);
  },
  AdjustHoverStateElement: function (index) {
   var hoverStateElement = this.GetHoverStateElement(index);
   _aspxSetStyles(hoverStateElement, this.hoverStateElementSize);
   _aspxSetStyles(this.GetFirstChild(hoverStateElement), this.innerHoverStateElementSize);
  },
  AdjustSelectedStateElement: function () {
   var selectedStateElement = this.GetSelectedStateElement();
   var size = this.GetBorderBoxSize(selectedStateElement, this.GetItemElementWidth(), this.GetItemElementHeight());
   _aspxSetStyles(selectedStateElement, size);
   var innerDiv = this.GetFirstChild(selectedStateElement);
   size = this.GetBorderBoxSize(selectedStateElement, size.width, size.height);
   _aspxSetStyles(innerDiv, size);
  },
  GetHoverStateElement: function (index) {
   return _aspxGetChildNodesByClassName(this.GetItemElement(index), CssClassesConstants.NavigationBarHoverStateElementCssClassName)[0];
  },
  GetSelectedStateElement: function () {
   return this.selectedStateElement;
  },
  GetItemElementCssClass: function () {
   return this.GetImageSlider().thCssCl;
  },
  GetItemElementStyle: function () {
   return this.GetImageSlider().thStyle;
  },
  CalculateSlideElementPosition: function (index, snapToLeft) {
   var prevSlideElementPosition = this.slideElementPosition;
   NavigationBarStrategy.prototype.CalculateSlideElementPosition.call(this, index, snapToLeft);
   this.slideElementPosition = this.CorrectSelectAndSlideOffsetPosition(index, prevSlideElementPosition, this.slideElementPosition);
  },
  IsSnapToLeft: function (index) {
   var shownItemIndexes = this.GetShownItemIndexes(true);
   for (var i = 0; i < shownItemIndexes.length; i++)
    if (shownItemIndexes[i] == index)
     return i < shownItemIndexes.length / 2;
   return index < shownItemIndexes[0];
  },
  SlideItemsPortionSingleMode: function (backward) {
   var considerSize = new Date() - this.lastSlideItemsPortionDate >= 350;
   this.PerformSlideToExtremeInvisibleElement(backward, considerSize, backward);
   this.lastSlideItemsPortionDate = new Date();
  },
  PerformSlideToExtremeInvisibleElement: function (backward, considerSize, preventAnimation) {
   var shownItemIndexes = this.GetShownItemIndexes(false);
   var lastIndex = backward ? -1 : this.GetItemCount();
   var incValue = backward ? -1 : 1;
   for (var index = shownItemIndexes[backward ? 0 : shownItemIndexes.length - 1]; index != lastIndex; index += incValue)
    if (!this.IsVisibleItemElement(index, considerSize)) {
     this.SlideToItem(index, preventAnimation);
     break;
    }
  },
  GetShownItemIndexes: function (getUncroppedItems) {
   var result = [];
   var itemSize = this.GetItemElementSize();
   var constOffset = this.GetElementTransformPosition(this.GetSlidePanelElement());
   var itemFullSize = itemSize + this.GetItemSpacing();
   var minValue = getUncroppedItems ? -1 : -itemSize;
   var maxValue = getUncroppedItems ? this.GetSlidePanelWrapperSize() - itemSize + 1 : this.GetSlidePanelWrapperSize();
   var tempValue = null;
   for (var index = 0; index < this.GetItemCount() ; index++) {
    tempValue = constOffset + itemFullSize * index;
    if (tempValue > minValue && tempValue < maxValue)
     result.push(index);
   }
   return result;
  },
  CorrectSelectAndSlideOffsetPosition: function (nextItemIndex, prevPos, nextPos) {
   var index = this.GetActiveItemIndex();
   if (!this.NeedOffsetCorrection() || nextItemIndex == index)
    return nextPos;
   var itemElementSize = this.GetItemElementSize();
   var sliderWrapperSize = this.GetSlidePanelWrapperSize();
   if (sliderWrapperSize < (itemElementSize * 3)) {
    var offsetDelta = Math.abs(Math.abs(nextPos) - Math.abs(prevPos));
    var itemSpacing = this.GetItemSpacing();
    var itemPosition = (itemElementSize + itemSpacing) * index;
    var itemPositionInSlideWrapper = this.ConvertItemPositionToSlideWrapperPosition(itemPosition) +
     (nextItemIndex < index ? offsetDelta : -offsetDelta);
    nextPos += (sliderWrapperSize - itemElementSize) / 2 - itemPositionInSlideWrapper;
   }
   return nextPos;
  },
  GetBorderBoxSize: function (element, width, height) {
   _aspxSetStyles(element, { width: width, height: height });
   if (element.offsetWidth > width)
    width -= element.offsetWidth - width;
   if (element.offsetHeight > height)
    height -= element.offsetHeight - height;
   return { width: width, height: height };
  },
  GetFirstChild: function (parent) {
   return parent.children[0];
  },
  GetSlidePanelWrapperSize: function () {
   return this.GetElementSize(this.GetSlidePanelWrapperElement());
  },
  CanCalculateNavigationButtonSize: function() { 
   return true;
  },
  GetNavigationBarElementsStyles: function () {
   var styles = NavigationBarStrategy.prototype.GetNavigationBarElementsStyles.call(this);
   if (this.GetNavigationButtonsPosition() == NavigationBarButtonPositionEnum.Outside && this.navigationButtons) {
    if(this.CanCalculateNavigationButtonSize()) { 
     var buttonsVisibility = this.navigationButtons.GetVisibilityButtons();
     this.navigationButtons.SetVisibilityButtons(true);
    }
    var prevButtonSize = this.navigationButtons.GetPrevButtonWrapperSize();
    var nextButtonSize = this.navigationButtons.GetNextButtonWrapperSize();
    if(this.CanCalculateNavigationButtonSize()) 
     this.navigationButtons.SetVisibilityButtons(buttonsVisibility);
    var isHorizontal = this.IsHorizontalNavigation();
    var styleName = isHorizontal ? "width" : "height";
    if (this.CanUseVisibleItemCount())
     styles.navBarStyle[styleName] += prevButtonSize[styleName] + nextButtonSize[styleName];
    else
     styles.wrapperStyle[styleName] -= prevButtonSize[styleName] + nextButtonSize[styleName];
    styles.wrapperStyle[isHorizontal ? "left" : "top"] = prevButtonSize[styleName];
   }
   return styles;
  }
 });
 var NavigationBarDotsStrategy = _aspxCreateClass(NavigationBarStrategy, {
  constructor: function (imageSlider) {
   this.cloneElement = null;
   this.constructor.prototype.constructor.call(this, imageSlider);
  },
  Initialize: function () {
   NavigationBarStrategy.prototype.Initialize.call(this);
   this.cloneElement = _aspxCreateHtmlElementFromString(this.GetImageSlider().dbh);
  },
  SetActiveItemVisually: function (index, preventAnimation) {
   var stateController = this.GetStateController();
   if (stateController) {
    if (this.GetPrevItemIndex() != -1)
     stateController.DeselectElementBySrcElement(this.GetItemElement(this.GetPrevItemIndex()));
    stateController.SelectElementBySrcElement(this.GetItemElement(index));
   }
  },
  GetImageLoadMode: function () {
   return LoadModeEnum.AllImages;
  },
  OnNavigationBarMouseUp: function (evt) {
   aspxClearHoverState();
   NavigationBarStrategy.prototype.OnNavigationBarMouseUp.call(this, evt);
  },
  CanCandleMouseUpEvent: function (evt) {
   if (__aspxIE && __aspxBrowserVersion < 9)
    return !this.IsExecutedGesture();
   return NavigationBarStrategy.prototype.CanCandleMouseUpEvent.call(this, evt);
  }, 
  GetMouseUpEventName: function () {
   return __aspxIE && __aspxBrowserVersion < 9 ? "click" : ASPxClientTouchUI.touchMouseUpEventName; 
  },
  GetNavigationBtnsVisibilityMode: function () {
   return ElementVisibilityModeEnum.None;
  },
  CreateItemElement: function (index) {
   var itemElement = this.CreateDiv();
   itemElement.id = this.GetItemElementId(index);
   return itemElement;
  },
  PrepareControlHierarchy: function () {
   NavigationBarStrategy.prototype.PrepareControlHierarchy.call(this);
   var imageSlider = this.GetImageSlider();
   var stateController = this.GetStateController();
   if (!stateController)
    return;
   this.ForEachItem(function (i) {
    if (this.IsEnabled()) {
     stateController.AddHoverItem(this.GetItemElementId(i), [imageSlider.dotHCssCl], [imageSlider.dotHStyle],
      null, [imageSlider.dotHSprt], [""], false);
     stateController.AddPressedItem(this.GetItemElementId(i), [imageSlider.dotPCssCl], [imageSlider.dotPStyle],
      null, [imageSlider.dotPSprt], [""], false);
    }
    stateController.AddSelectedItem(this.GetItemElementId(i), [imageSlider.dotSCssCl], [imageSlider.dotSStyle],
     null, [imageSlider.dotSSprt], [""], false);
   });
  },
  AdjustImageElement: function (index) {
  },
  GetItemElementCssClass: function () {
   return this.cloneElement.className;
  },
  GetItemElementStyle: function () {
   return this.cloneElement.style.cssText;
  },
  CanHandleSwipeGesture: function (evt) {
   return !this.IsWrapperOverlapsItemCollection() && ItemsOwnerBase.prototype.CanHandleSwipeGesture.call(this, evt);
  },
  GetItemElementId: function (index) {
   return this.GetClientControlName() + "_dot_" + index;
  }
 });
 var ItemElementsManagerBase = _aspxCreateClass(null, {
  constructor: function (itemsOwner) {
   this.itemsOwner = itemsOwner;
   this.timerId == -1
   this.itemCollection = [];
  },
  GetOwner: function () {
   return this.itemsOwner;
  },
  GetCollection: function () {
   if (this.IsEnablePartialLoading())
    return this.itemCollection;
   return _aspxGetChildNodesByTagName(this.GetOwner().GetItemsContainer(), "DIV");
  },
  HasItem: function (index) {
   return !!this.GetCollection()[index];
  },
  SaveItem: function (index, item) {
   if (this.IsEnablePartialLoading())
    this.itemCollection[index] = item;
  },
  GetImageLoadMode: function () {
   return this.GetOwner().GetImageLoadMode();
  },
  IsEnablePartialLoading: function () {
   return this.GetImageLoadMode() != LoadModeEnum.AllImages;
  },
  CreateItemsIfRequired: function () {
   if (this.GetImageLoadMode() == LoadModeEnum.AllImages)
    this.GetOwner().CreateItemElements();
  },
  PrepareItemsIfRequired: function () {
   if (this.GetImageLoadMode() == LoadModeEnum.AllImages)
    this.GetOwner().PrepareItemElements();
  },
  AdjustItemsIfRequired: function () {
   var owner = this.GetOwner();
   for (var i = 0; i < owner.GetItemCount() ; i++) {
    if (this.IsEnablePartialLoading() && !this.HasItem(i))
     continue;
    this.GetOwner().AdjustItemElement(i);
    this.GetOwner().AdjustImageElement(i);
   }
  },
  UpdateHierarchyIfRequired: function () {
   if (this.IsEnablePartialLoading()) {
    this.timerId = _aspxClearTimer(this.timerId);
    this.UpdateHierarchyCore();
   }
  },
  CreateItemAndAppend: function (index, parent) {
   var owner = this.GetOwner();
   var element = owner.CreateItemElement(index);
   this.SaveItem(index, element);
   parent.appendChild(element);
   owner.PrepareItemElement(index);
   owner.AdjustItemElement(index);
   owner.AdjustImageElement(index);
  },
  RemoveItem: function (index) {
   if (this.GetImageLoadMode() == LoadModeEnum.DynamicLoadAndCache)
    return;
   var owner = this.GetOwner();
   var element = owner.GetItemElement(index);
   if (element) {
    var image = owner.GetImageElement(index);
    if (image)
     owner.DetachLoadEvents(image);
    this.itemCollection[index] = undefined;
    _aspxRemoveElement(element);
   }
  },
  UpdateHierarchyCore: function () {
   ;
  },
  GetDelay: function () {
   return 450;
  },
  UpdateHierarchyAfterDelayIfRequired: function () {
   if (this.IsEnablePartialLoading() && this.timerId == -1)
    this.timerId = _aspxSetTimeout(function () { this.UpdateHierarchyIfRequired(); }.aspxBind(this), this.GetDelay());
  }
 });
 var ImageAreaItemElementsManager = _aspxCreateClass(ItemElementsManagerBase, {
  constructor: function (imageAreaStrategy) {
   this.constructor.prototype.constructor.call(this, imageAreaStrategy);
  },
  GetDelay: function () {
   return this.GetOwner().GetImageSlider().animationDuration + 50;
  },
  UpdateHierarchyCore: function () {
   var owner = this.GetOwner();
   var activeItemIndex = owner.GetActiveItemIndex();
   var prevItemIndex = owner.GetPrevItemIndex();
   if (prevItemIndex == -1) 
    prevItemIndex = 0;
   var isForwardDirection = (activeItemIndex - prevItemIndex) >= 0;
   var fragment = owner.CreateDocumentFragment();
   var itemsContainer = owner.GetItemsContainer();
   if (!this.HasItem(activeItemIndex))
    this.CreateItemAndAppend(activeItemIndex, fragment || itemsContainer);
   if (this.CanUpdateItemElements(isForwardDirection, isForwardDirection ? activeItemIndex + 1 : activeItemIndex - 1)) {
    for (var i = 0; i < owner.GetItemCount() ; i++) {
     if (this.CanRemoveItem(i, activeItemIndex, prevItemIndex, isForwardDirection))
      this.RemoveItem(i);
     else if (!this.HasItem(i))
      this.CreateItemAndAppend(i, fragment || itemsContainer);
    }
   }
   if (fragment)
    itemsContainer.appendChild(fragment);
  },
  CanRemoveItem: function (index, activeItemIndex, prevItemIndex, forwardDirection) {
   var visibleItemCount = 6;
   var result = forwardDirection ? (index < activeItemIndex || index > (activeItemIndex + visibleItemCount)) :
     (index > activeItemIndex || index < (activeItemIndex - visibleItemCount));
   return result && prevItemIndex != index; 
  },
  CanUpdateItemElements: function (forwardDirection, followingItemIndex) {
   return forwardDirection ? followingItemIndex < this.GetOwner().GetItemCount() && !this.HasItem(followingItemIndex) :
    followingItemIndex > 0 && !this.HasItem(followingItemIndex);
  }
 });
 var LoopImageAreaItemElementsManager = _aspxCreateClass(ItemElementsManagerBase, {
  constructor: function (imageAreaStrategy) {
   this.constructor.prototype.constructor.call(this, imageAreaStrategy);
  },
  UpdateHierarchyCore: function () {
   var owner = this.GetOwner();
   var activeIndex = owner.GetActiveItemIndex();
   var fragment = owner.CreateDocumentFragment();
   var itemsContainer = owner.GetItemsContainer();
   if (!this.HasItem(activeIndex))
    this.CreateItemAndAppend(activeIndex, fragment || itemsContainer);
   var activeItem = owner.GetItemElement(activeIndex);
   var nextIndex = activeIndex + 1;
   if (nextIndex == owner.GetItemCount())
    nextIndex = 0;
   if (!this.HasItem(nextIndex)) {
    this.CreateItemAndAppend(nextIndex, fragment || itemsContainer);
    var item = owner.GetItemElement(nextIndex);
    item.dxPosition = activeItem.dxPosition + owner.GetItemElementSize();
    owner.SetItemPosition(item);
   }
   var prevIndex = activeIndex - 1;
   var prevIndex = activeIndex - 1;
   if (prevIndex < 0)
    prevIndex = owner.GetItemCount() - 1;
   if (!this.HasItem(prevIndex)) {
    this.CreateItemAndAppend(prevIndex, fragment || itemsContainer);
    var item = owner.GetItemElement(prevIndex);
    item.dxPosition = activeItem.dxPosition - owner.GetItemElementSize();
    owner.SetItemPosition(item);
   }
   for (var i = 0; i < owner.GetItemCount() ; i++)
    if (i != activeIndex && i != prevIndex && i != nextIndex && owner.GetPrevItemIndex() != i && owner.GetItemElement(i))
     this.RemoveItem(i);
   if (fragment)
    itemsContainer.appendChild(fragment);
  }
 });
 var NavigationBarItemElementsManager = _aspxCreateClass(ItemElementsManagerBase, {
  constructor: function (navigationBarStrategy) {
   this.constructor.prototype.constructor.call(this, navigationBarStrategy);
  },
  CreateDummyItem: function (index, parent) {
   if (!this.HasItem(index))
    this.CreateAndPrepareItemElement(index, parent);
   else if (this.GetImageLoadMode() != LoadModeEnum.DynamicLoadAndCache) {
    var owner = this.GetOwner();
    var element = owner.GetItemElement(index);
    if (element) {
     element.style.backgroundImage = "";
     var image = owner.GetImageElement(index);
     if (image)
      owner.DetachLoadEvents(image);
     _aspxRemoveElement(image);
     _aspxRemoveElement(owner.GetCanvasElement(index));
    }
    this.SetDummyFlagToElement(index, true);
   }
  },
  SetDummyFlagToElement: function (index, isDummy) {
   var element = this.GetOwner().GetItemElement(index);
   if (element)
    element.isDummy = isDummy;
  },
  IsElementDummy: function (index) {
   var element = this.GetOwner().GetItemElement(index);
   if (element)
    return !!element.isDummy;
   return false;
  },
  CreateItemAndAppend: function (index, parent) {
   if (!this.HasItem(index))
    this.CreateAndPrepareItemElement(index, parent);
   if (this.IsElementDummy(index)) {
    this.SetDummyFlagToElement(index, false);
    this.GetOwner().AdjustImageElement(index);
   }
  },
  CreateAndPrepareItemElement: function (index, parent) {
   var owner = this.GetOwner();
   var element = owner.CreateItemElement(index);
   this.SaveItem(index, element);
   parent.appendChild(element);
   owner.PrepareItemElement(index);
   owner.AdjustItemElement(index);
   this.SetDummyFlagToElement(index, true);
  },
  UpdateHierarchyCore: function () {
   var owner = this.GetOwner();
   var navigationBarSize = owner.GetElementSize(owner.GetSlidePanelWrapperElement()),
    slidePanelPosition = owner.GetElementTransformPosition(owner.GetSlidePanelElement());
   var fragment = owner.CreateDocumentFragment();
   var itemsContainer = owner.GetItemsContainer();
   var itemFullSize = owner.GetItemElementSize() + owner.GetItemSpacing();
   var lPos = Math.min(-navigationBarSize * 0.3, -itemFullSize);
   var rPos = Math.max(navigationBarSize * 1.3, navigationBarSize + itemFullSize);
   var lDummyPos = lPos - navigationBarSize;
   var rDummyPos = rPos + navigationBarSize;
   var itemPos = 0;
   for (var i = 0; i < owner.GetItemCount() ; i++) {
    itemPos = slidePanelPosition + itemFullSize * i;
    if (itemPos > lDummyPos && itemPos < rDummyPos && (itemPos < lPos || itemPos > rPos))
     this.CreateDummyItem(i, fragment || itemsContainer);
    else {
     if (itemPos <= lDummyPos || itemPos >= rDummyPos)
      this.RemoveItem(i);
     else
      this.CreateItemAndAppend(i, fragment || itemsContainer);
    }
   }
   if (fragment)
    itemsContainer.appendChild(fragment);
  }
 });
 var ASPxClientImageSlider = _aspxCreateClass(ASPxClientControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.imageAreaStrategy = null; 
   this.navigationBarStrategy = null; 
   this.passePartoutElement = null;
   this.hiddenField = null;
   this.slideShowEnabled = false;
   this.templateCreated = false;
   this.timerID = -1;
   this.mainElementStyleSize = { width: "", height: "" };
   this.showImageArea = true;
   this.showNavBar = true;
   this.seoFriendlyItems = [];
   this.items = []; 
   this.enableLoopNavigation = false;
   this.enableKeyboardSupport = true;
   this.enablePagingByClick = true;
   this.enablePagingGestures = true;
   this.extremeItemClickMode = 0;
   this.animationDuration = 400;
   this.allowMouseWheel = false;
   this.imageLoadMode = 1;
   this.imageSizeMode = 0;
   this.animationType = 0;
   this.navDirection = 0;
   this.itemSpacing = 5;
   this.target = "";
   this.hasNavigateUrls = false;
   this.hasTemplates = false;
   this.navBtnsVbl = 2;
   this.itemTxtVbl = 3;
   this.interval = 5000;
   this.autoPlay = false;
   this.stopPlayingWhenPaging = false;
   this.stopPlayingWhenPagingExecuted = false;
   this.pausePlayingWhenMouseOver = false;
   this.playPauseBtnVbl = 0;
   this.visibleItemsCount = 0;
   this.navBarPos = 0;
   this.navBarPagingMode = 0;
   this.thumbNavBtnsVbl = 2;
   this.thumbNavBtnsPos = 0;
   this.navBarOffset = 0;
   this.passePartoutStyle = "";
   this.imgAreaCssCl = "";
   this.imgAreaStyle = "";
   this.itemCssCl = "";
   this.itemStyle = "";
   this.navBarCssCl = "";
   this.navBarStyle = "";
   this.thCssCl = "";
   this.thStyle = "";
   this.thSelCssCl = "";
   this.thSelStyle = "";
   this.itemTxtCssCl = "";
   this.itemTxtStyle = "";
   this.dotHSprt = null;
   this.dotHCssCl = "";
   this.dotHStyle = "";
   this.dotPSprt = null;
   this.dotPCssCl = "";
   this.dotPStyle = "";
   this.dotSSprt = null;
   this.dotSCssCl = "";
   this.dotSStyle = "";
   this.dbh = "";
   this.playBH = "";
   this.pauseBH = "";
   this.pbh = "";
   this.nbh = "";
   this.nbpbh = "";
   this.nbnbh = "";
   this.disableSelectedStateAnimation = false;
   this.ActiveItemChanged = new ASPxClientEvent();
   this.ItemClick = new ASPxClientEvent();
   this.ThumbnailItemClick = new ASPxClientEvent();
   this.StrategiesCreated = new ASPxClientEvent();
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   this.PopulateItemsSeoMode();
  },
  Initialize: function () {
   ASPxClientControl.prototype.Initialize.call(this);
   if (this.hasTemplates)
    for (var i = 0; i < this.seoFriendlyItems.length; i++) {
     this.items[i].s = this.seoFriendlyItems[i].s;
     this.items[i].ts = this.seoFriendlyItems[i].ts;
     this.items[i].t = this.seoFriendlyItems[i].t;
     this.items[i].u = this.seoFriendlyItems[i].u;
    }
   this.seoFriendlyItems = null;
   this.CreateControlHierarchy();
   this.PrepareControlHierarchy();
   this.InitializeElementsSize();
  },
  PopulateItemsSeoMode: function () {
   var mainElement = this.GetMainElement();
   if (!_aspxGetElementsByTagName(mainElement, "IMG").length)
    return;
   var innerHtml = mainElement.innerHTML;
   mainElement.innerHTML = "";
   this.PopulateImageSrc(innerHtml);
   this.PopuplateNavigateUrl(innerHtml);
   this.PopulateText(innerHtml);
  },
  InitializeElementsSize: function () {
   var mainElement = this.GetMainElement();
   this.mainElementStyleSize = {
    width: mainElement.style.width,
    height: mainElement.style.height
   };
  },
  PopulateImageSrc: function (html) {
   this.PopulateItemsFromHtml(html, "s", "src");
  },
  PopuplateNavigateUrl: function (html) {
   this.PopulateItemsFromHtml(html, "u", "href");
  },
  PopulateText: function (html) {
   this.PopulateItemsFromHtml(html, "t", "alt");
  },
  PopulateItemsFromHtml: function (html, property, searchPattern) {
   var result = html.match(new RegExp(searchPattern + '="[^"]*(?=")', 'g'));
   if (!result)
    return;
   var collection = this.hasTemplates ? this.seoFriendlyItems : this.items;
   for (var i = 0; i < result.length; i++) {
    var value = result[i].replace(new RegExp(searchPattern + '="'), "");
    if (!collection[i])
     collection[i] = {};
    if (value !== "")
     collection[i][property] = value;
   }
  },
  AfterInitialize: function () {
   this.constructor.prototype.AfterInitialize.call(this);
   this.InitializeHandlers();
  },
  InitializeHandlers: function () {
   if (__aspxTouchUI)
    return;
   if (this.enableKeyboardSupport) {
    var element = this.GetMainElement();
    _aspxAttachEventToElement(element, "keydown", function (evt) { this.OnKeyDown(evt) }.aspxBind(this));
    _aspxAttachEventToElement(element, "mousedown", function () { this.Focus(); }.aspxBind(this));
   }
   if (this.pausePlayingWhenMouseOver)
    MouseEnterHelper.AddHandler(this.GetMainElement(), function () {
     if (this.slideShowEnabled)
      this.PauseInternal();
    }.aspxBind(this), function () {
     if (this.slideShowEnabled && !this.stopPlayingWhenPagingExecuted)
      this.PlayInternal();
    }.aspxBind(this));
  },
  UpdateStateInput: function () {
   var hiddenField = this.GetHiddenField();
   hiddenField.value = this.GetActiveItemIndex();
   var navigationBar = this.GetNavigationBarStrategy();
   if (navigationBar)
    hiddenField.value += "|" + navigationBar.GetSlideElementPosition();
  },
  GetHiddenField: function () {
   if (!this.hiddenField)
    this.hiddenField = _aspxGetElementById(this.name + "H");
   return this.hiddenField;
  },
  CreateTemplates: function () {
   var imageArea = this.GetImageAreaStrategy();
   if (imageArea)
    imageArea.CreateTemplates();
   var navigationBar = this.GetNavigationBarStrategy();
   if (navigationBar)
    navigationBar.CreateTemplates();
   _aspxProcessScripts(this.name);
   this.templateCreated = true;
  },
  AdjustControlCore: function () {
   this.AdjustControlCoreInternal();
   if (this.HasTemplates() && !this.templateCreated)
    _aspxSetTimeout(function () { this.CreateTemplates(); }.aspxBind(this), 0);
  },
  AdjustControlCoreInternal: function () {
   this.AllowRubberLayout();
   var mainElementStyle = {
    width: SizeUtils.GetClientWidth(this.GetMainElement(), true),
    height: SizeUtils.GetClientHeight(this.GetMainElement(), true)
   };
   var passePartourStyle = {
    width: mainElementStyle.width,
    height: mainElementStyle.height
   };
   this.AdjustNavigationBar(mainElementStyle, passePartourStyle);
   this.AdjustImageArea(mainElementStyle, passePartourStyle);
   _aspxSetStyles(this.GetMainElement(), mainElementStyle);
   if (this.showImageArea)
    _aspxSetStyles(this.GetPassePartoutElement(), passePartourStyle);
   this.DenyRubberLayout();
  },
  AdjustNavigationBar: function (mainElementStyle, passePartourStyle) {
   var navigationBar = this.GetNavigationBarStrategy();
   if (navigationBar) {
    navigationBar.AdjustControl();
    var width = navigationBar.GetWidth();
    var height = navigationBar.GetHeight();
    if (this.showImageArea) {
     switch (this.GetNavigationBarPosition()) {
      case NavigationBarPositionEnum.Right:
      case NavigationBarPositionEnum.Left:
       passePartourStyle.float = "left";
       passePartourStyle.width -= width;
       break;
      case NavigationBarPositionEnum.Bottom:
      case NavigationBarPositionEnum.Top:
       passePartourStyle.height -= height;
       break;
     }
    }
    else {
     mainElementStyle.width = width;
     mainElementStyle.height = height;
    }
   }
  },
  AdjustImageArea: function (mainElementStyle, passePartourStyle) {
   var imageAreaStrategy = this.GetImageAreaStrategy();
   if (imageAreaStrategy) {
    imageAreaStrategy.AdjustControl(passePartourStyle.width, passePartourStyle.height);
    var imageAreaWidth = imageAreaStrategy.GetWidth();
    var imageAreaHeight = imageAreaStrategy.GetHeight();
    var navigationBar = this.GetNavigationBarStrategy();
    var navigationBarWidht = navigationBar ? navigationBar.GetWidth() : 0;
    var navigationBarHeight = navigationBar ? navigationBar.GetHeight() : 0;
    if (imageAreaWidth > passePartourStyle.width) {
     passePartourStyle.width = imageAreaWidth;
     mainElementStyle.width = imageAreaWidth + navigationBarWidht;
    }
    if (imageAreaHeight > passePartourStyle.height) {
     passePartourStyle.height = imageAreaHeight;
     mainElementStyle.height = imageAreaHeight + navigationBarHeight;
    }
   }
  },
  AllowRubberLayout: function () {
   this.ResetControlStyle();
   _aspxSetStyles(this.GetMainElement(), {
    borderSpacing: 0,
    overflow: "hidden",
    display: __aspxIE && __aspxBrowserVersion < 8 ? "" : "table" 
   });
   if (this.showImageArea)
    _aspxSetStyles(this.GetPassePartoutElement(), { width: "", height: "" });
  },
  DenyRubberLayout: function () {
   _aspxSetStyles(this.GetMainElement(), {
    display: "",
    overflow: "",
    borderSpacing: ""
   });
   if (this.showImageArea)
    _aspxSetStyles(this.GetPassePartoutElement(), { display: "" });
  },
  ResetControlStyle: function () {
   _aspxSetStyles(this.GetMainElement(), this.mainElementStyleSize);
   var navigationBar = this.GetNavigationBarStrategy();
   if (navigationBar)
    navigationBar.ResetControlStyle();
   var imageAreaStrategy = this.GetImageAreaStrategy();
   if (imageAreaStrategy)
    imageAreaStrategy.ResetControlStyle();
  },
  CreateControlHierarchy: function () {
   if (this.showImageArea) {
    this.passePartoutElement = document.createElement("DIV");
    this.GetMainElement().appendChild(this.passePartoutElement);
    this.imageAreaStrategy = this.CreateImageAreaStrategy();
   }
   if (this.showNavBar)
    this.navigationBarStrategy = this.CreateNavigationBarStrategy();
   this.RaiseStrategiesCreated();
  },
  CreateImageAreaStrategy: function () {
   switch (this.GetAnimationType()) {
    case AnimationTypeEnum.Slide:
     return this.CreateSlideImageAreaStrategy();
     break;
    case AnimationTypeEnum.Fade:
     return new FadeImageAreaStrategy(this);
     break;
    case AnimationTypeEnum.None:
     return new NoneImageAreaStrategy(this);
     break;
   }
  },
  CreateSlideImageAreaStrategy: function () {
   return this.enableLoopNavigation ? new SlideLoopNavigationImageAreaStrategy(this) : new SlideImageAreaStrategy(this);
  },
  CreateNavigationBarStrategy: function () {
   switch (this.GetNavigationBarMode()) {
    case NavigationBarModeEnum.Thumbnails:
     return new NavigationBarThumbnailStrategy(this);
     break;
    case NavigationBarModeEnum.Dots:
     return new NavigationBarDotsStrategy(this);
     break;
   }
  },
  PrepareControlHierarchy: function () {
   this.PrepareMainElement();
   if (this.showImageArea)
    this.PreparePassePartoutElement();
   if (this.autoPlay)
    this.Play();
  },
  PrepareMainElement: function () {
   var mainElement = this.GetMainElement();
   mainElement.tabIndex = Math.max(mainElement.tabIndex, 0);
   _aspxSetElementDisplay(mainElement, true);
  },
  PreparePassePartoutElement: function () {
   _aspxSetStyles(this.GetPassePartoutElement(), {
    cssText: this.passePartoutStyle,
    className: CssClassesConstants.PassePartoutCssClassName
   });
  },
  OnBrowserWindowResize: function(evt) {
   this.AdjustControl();
  },
  OnKeyDown: function (evt) {
   var keyKode = _aspxGetKeyCode(evt);
   switch (keyKode) {
    case ASPxKey.Left:
     if (this.rtl) {
      this.SetActiveItemIndex(this.GetActiveItemIndex() + 1);
      return _aspxPreventEvent(evt);
     }
    case ASPxKey.Up:
     this.SetActiveItemIndex(this.GetActiveItemIndex() - 1);
     return _aspxPreventEvent(evt);
    case ASPxKey.Right:
     if (this.rtl) {
      this.SetActiveItemIndex(this.GetActiveItemIndex() - 1);
      return _aspxPreventEvent(evt);
     }
    case ASPxKey.Down:
     this.SetActiveItemIndex(this.GetActiveItemIndex() + 1);
     return _aspxPreventEvent(evt);
    case ASPxKey.Home:
     this.SetActiveItemIndex(0);
     return _aspxPreventEvent(evt);
    case ASPxKey.End:
     this.SetActiveItemIndex(this.GetItemCount() - 1);
     return _aspxPreventEvent(evt);
   }
  },
  GetImageAreaStrategy: function () {
   return this.imageAreaStrategy;
  },
  GetNavigationBarStrategy: function () {
   return this.navigationBarStrategy;
  },
  GetPassePartoutElement: function () {
   return this.passePartoutElement;
  },
  GetItem: function (index) {
   var item = this.GetItemInternal(index);
   if (item)
    return new ASPxClientImageSliderItem(this, index, item.n, item.s, item.t);
   return null;
  },
  GetItemByName: function (name) {
   for (var i = 0; i < this.GetItemCount() ; i++)
    if (this.GetItemInternal(i).n == name)
     return this.GetItem(i);
   return null;
  },
  GetActiveItemIndex: function () {
   return this.GetRtlIndex(this.GetActiveItemIndexInternal());
  },
  SetActiveItemIndex: function (index, preventAnimation) {
   this.SetActiveItemIndexInternal(this.GetRtlIndex(index), preventAnimation);
  },
  GetActiveItem: function () {
   return this.GetItem(this.GetActiveItemIndex());
  },
  SetActiveItem: function (item, preventAnimation) {
   this.SetActiveItemIndex(item.index, preventAnimation);
  },
  GetItemCount: function () {
   return this.items.length;
  },
  Focus: function () {
   if (!__aspxTouchUI && this.enableKeyboardSupport)
    _aspxSetFocus(this.GetMainElement());
  },
  Play: function () {
   if (this.enabled) {
    this.PlayInternal();
    this.slideShowEnabled = true;
   }
  },
  Pause: function () {
   if (this.enabled) {
    this.PauseInternal();
    this.slideShowEnabled = false;
   }
  },
  IsSlideShowPlaying: function () {
   return this.timerID != -1;
  },
  IsFocused: function () {
   return _aspxGetActiveElement() == this.GetMainElement();
  },
  PlayInternal: function () {
   if (this.IsSlideShowPlaying())
    return;
   this.timerID = _aspxSetInterval(function () { this.DoSeActivetNextItem(); }.aspxBind(this), this.interval);
   this.stopPlayingWhenPagingExecuted = false;
   if (this.GetImageAreaStrategy())
    this.GetImageAreaStrategy().SetSlideShowButtonState(false);
  },
  PauseInternal: function () {
   this.timerID = _aspxClearInterval(this.timerID);
   if (this.GetImageAreaStrategy())
    this.GetImageAreaStrategy().SetSlideShowButtonState(true);
  },
  ResetSlideShowTimer: function () {
   if (this.IsSlideShowPlaying()) {
    this.timerID = _aspxClearInterval(this.timerID);
    this.timerID = _aspxSetInterval(function () { this.DoSeActivetNextItem(); }.aspxBind(this), this.interval);
   }
  },
  StopPlayingWhenPaging: function () {
   if (this.stopPlayingWhenPaging) {
    this.Pause();
    this.stopPlayingWhenPagingExecuted = true;
   }
  },
  DoSeActivetNextItem: function () {
   var activeIndex = this.GetActiveItemIndex() + 1;
   if (activeIndex >= this.GetItemCount())
    activeIndex = 0;
   this.SetActiveItemIndex(activeIndex);
  },
  RaiseStrategiesCreated: function () {
   if (!this.StrategiesCreated.IsEmpty())
    this.StrategiesCreated.FireEvent(this, null);
  },
  RaiseActiveItemChanged: function () {
   this.RaiseItemEvent(this.ActiveItemChanged);
  },
  RaiseItemClick: function () {
   this.RaiseItemEvent(this.ItemClick);
  },
  RaiseThumbnailItemClick: function () {
   this.RaiseItemEvent(this.ThumbnailItemClick);
  },
  RaiseItemEvent: function (event) {
   if (!event.IsEmpty()) {
    var args = new ASPxClientImageSliderItemEventArgs(this.GetActiveItem());
    event.FireEvent(this, args);
   }
  },
  SetActiveItemIndexInternal: function (index, preventAnimation) {
   if (index >= 0 && index < this.GetItemCount() && index != this.GetActiveItemIndexInternal()) {
    if (this.GetImageAreaStrategy())
     this.GetImageAreaStrategy().SetActiveItemIndex(index, preventAnimation);
    if (this.GetNavigationBarStrategy())
     this.GetNavigationBarStrategy().SetActiveItemIndex(index, preventAnimation);
    this.UpdateStateInput();
    this.ResetSlideShowTimer();
    this.RaiseActiveItemChanged();
   }
  },
  GetActiveItemIndexInternal: function () {
   return (this.GetImageAreaStrategy() || this.GetNavigationBarStrategy()).GetActiveItemIndex();
  },
  GetItemInternal: function (index) {
   if (index < 0 || index >= this.GetItemCount())
    return null;
   return this.items[index];
  },
  GetRtlIndex: function (index) {
   if (this.rtl)
    return this.GetItemCount() - 1 - index;
   return index;
  },
  GetAnimationType: function () {
   return this.animationType;
  },
  HasNavigateUrls: function () {
   return this.hasNavigateUrls;
  },
  HasTemplates: function () {
   return this.hasTemplates;
  },
  GetNavigationBarPosition: function () {
   return this.navBarPos;
  },
  GetNavigationBarMode: function () {
   return this.dotHCssCl != "" ? 1 : 0;
  }
 });
 ASPxClientImageSlider.Cast = ASPxClientControl.Cast;
 var ASPxClientImageSliderItemEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function (item) {
   this.constructor.prototype.constructor.call(this);
   this.item = item;
  }
 });
 var ASPxClientImageSliderItem = _aspxCreateClass(null, {
  constructor: function (imageSlider, index, name, imageUrl, text) {
   this.imageSlider = imageSlider;
   this.index = index;
   this.name = name;
   this.imageUrl = imageUrl;
   this.text = text;
  }
 });
 var ASPxClientImageZoomNavigator = _aspxCreateClass(ASPxClientImageSlider, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.disableSelectedStateAnimation = true;
   this.imageZoomID = "";
   this.changeAction = 0;
   this.buttonVisibilityMode = 0;
  },
  Initialize: function () {
   ASPxClientImageSlider.prototype.Initialize.call(this);
   if (this.imageZoomID)
    this.ActiveItemChanged.AddHandler(function () {
     this.OnActiveItemChanged();
    }.aspxBind(this));
  },
  CreateNavigationBarStrategy: function () {
   return new ImageZoomNavigationBarStrategy(this);
  },
  PrepareControlHierarchy: function () {
   ASPxClientImageSlider.prototype.PrepareControlHierarchy.call(this);
   _aspxAddClassNameToElement(this.GetMainElement(), CssClassesConstants.ImageZoomNavigatorCssClassName);
  },
  OnActiveItemChanged: function () {
   var item = this.GetItemInternal(this.GetActiveItemIndex());
   window[this.imageZoomID].SetImageProperties(item.s, item.liu || item.s, item.zt, item.et);
  }
 });
 var ImageZoomNavigationBarStrategy = _aspxCreateClass(NavigationBarThumbnailStrategy, {
  constructor: function (imageZoomNavigator) {
   this.visibleItemCount = 0;
   this.constructor.prototype.constructor.call(this, imageZoomNavigator);
  },
  InitializeHandlers: function () {
   if (this.GetImageSlider().changeAction == ActiveItemChangeActionEnum.Hover) {
    ItemsOwnerBase.prototype.InitializeHandlers.call(this);
    _aspxAttachEventToElement(this.GetSlidePanelElement(), "mouseover", function (evt) { this.OnNavigationBarMouseOver(evt); }.aspxBind(this));
   }
   else
    NavigationBarThumbnailStrategy.prototype.InitializeHandlers.call(this);
  },
  OnNavigationBarMouseOver: function (evt) {
   if (!this.IsExecutedGesture()) {
    var index = this.GetItemIndexFromEvent(evt);
    if (index != -1)
     this.GetImageSlider().SetActiveItemIndexInternal(index);
   }
  },
  GetEnableItemHoverState: function () {
   return this.GetImageSlider().changeAction == ActiveItemChangeActionEnum.Click;
  },
  CalculateSize: function() {
   NavigationBarThumbnailStrategy.prototype.CalculateSize.call(this);
   if(!this.CanUseVisibleItemCount()) {
    var isHorizontal = this.IsHorizontalNavigation();
    var size = {
     width: isHorizontal ? this.GetItemWidthWithSpacing() * this.GetItemCount() - this.GetItemSpacing() : this.GetItemElementWidth(),
     height: isHorizontal ? this.GetItemElementHeight() : this.GetItemHeightWithSpacing() * this.GetItemCount() - this.GetItemSpacing()
    };
    var mainElementWidth = SizeUtils.GetClientWidth(this.GetMainElement(), true);
    var mainElementHeight = SizeUtils.GetClientHeight(this.GetMainElement(), true);
    if(isHorizontal && size.width < mainElementWidth || !isHorizontal && size.height < mainElementHeight) {
     this.visibleItemCount = this.GetItemCount();
     if(this.GetImageSlider().buttonVisibilityMode == NavigationButtonVisibilityModeEnum.Auto)
      this.SetVisibilityButtons(false);
    }
   }
  },
  UpdateNavigationButtonsState: function () {
   if(this.GetVisibleItemCount() != this.GetItemCount() || this.GetImageSlider().buttonVisibilityMode != NavigationButtonVisibilityModeEnum.Auto)
    NavigationBarThumbnailStrategy.prototype.UpdateNavigationButtonsState.call(this);
  },
  CanCreateNavigationButtons: function() {
   if(this.GetImageSlider().buttonVisibilityMode == NavigationButtonVisibilityModeEnum.Always)
    return true;
   return NavigationBarThumbnailStrategy.prototype.CanCreateNavigationButtons.call(this);
  },
  GetVisibleItemCount: function() {
   return this.GetImageSlider().visibleItemsCount || this.visibleItemCount;
  },
  CanCalculateNavigationButtonSize: function() { 
   return false;
  }
 });
 window.ASPxClientImageSlider = ASPxClientImageSlider;
 window.ASPxClientImageSliderItemEventArgs = ASPxClientImageSliderItemEventArgs;
 window.ASPxClientImageSliderItem = ASPxClientImageSliderItem;
 window.ASPxClientImageZoomNavigator = ASPxClientImageZoomNavigator;
})();
(function () {
 var CssClassesConstants = {};
 CssClassesConstants.Prefix = "dxiz-";
 CssClassesConstants.Lens = CssClassesConstants.Prefix + "lens";
 CssClassesConstants.ClipPanel = CssClassesConstants.Prefix + "clipPanel";
 CssClassesConstants.Hint = CssClassesConstants.Prefix + "hint";
 CssClassesConstants.Wrapper = CssClassesConstants.Prefix + "wrapper";
 var Constants = {};
 Constants.LargeImageID = "_LI";
 Constants.PopupID = "_P";
 Constants.ModalPopupID = "_MP";
 Constants.ExpandWindowPadding = 10;
 Constants.AnimationDuration = 200;
 var MouseBoxOpacityModeEnum = {
  Inside: 0,
  Outside: 1
 }
 var LargeImageLoadModeEnum = {
  AtOnce: 0,
  AfterInitialize: 1,
  OnAction: 2
 }
 var ZoomWindowPosition = {
  Inside: 0,
  Outside: 1
 }
 var ASPxClientImageZoom = _aspxCreateClass(ASPxClientControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.image = null;
   this.hint = null;
   this.action = null;
   this.zoomWindow = null;
   this.expandWindow = null;
   this.wrapperElement = null;
   this.showHint = true;
   this.showZoomWindow = true;
   this.showExpandWindow = true;
   this.largeImageLoadingLockCount = 0;
   this.width = 0;
   this.height = 0;
   this.zoomWWidth = "150%";
   this.zoomWHeight = "150%";
   this.zoomWPos = 1;
   this.mouseBoxOpacityMode = 0;
   this.largeImageLoadMode = 0;
   this.largeImageUrl = "";
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
  },
  Initialize: function () {
   ASPxClientControl.prototype.Initialize.call(this);
   this.GetMainElement().style.display = "block";
   this.InitMainElementSize();
   this.ApplyImageSize();
   this.CreateControlHierarchy();
   this.ChangeLoadingPanelLocation();
  },
  InitMainElementSize: function () {
   var mainElement = this.GetMainElement();
   if (mainElement.style.width)
    this.width = _aspxPxToInt(mainElement.style.width);
   if (mainElement.style.height)
    this.height = _aspxPxToInt(mainElement.style.height);
  },
  ApplyImageSize: function () { 
   var img = this.GetImage();
   if (this.width || this.height) {
    _aspxSetStyles(img, {
     width: this.width,
     height: this.height
    });
   } else
    _aspxSetStyles(this.GetMainElement(), {
     width: img.offsetWidth,
     height: img.offsetHeight
    });
  },
  CreateControlHierarchy: function () {
   if (this.showHint)
    this.hint = new HintControl(this);
   if (this.enabled) {
    if (this.showZoomWindow)
     this.zoomWindow = this.zoomWPos == ZoomWindowPosition.Outside ? new OutsideZoomWindowControl(this) : new ZoomWindowControl(this);
    if (this.showExpandWindow)
     this.expandWindow = new ExpandWindowControl(this);
    this.action = __aspxTouchUI ? new TouchAction(this) : new DesktopAction(this);
   }
  },
  ChangeLoadingPanelLocation: function () {
   var loadingPanel = this.GetLoadingPanelElement();
   if (loadingPanel) {
    if(loadingPanel.tagName == "DIV") {
     var table = loadingPanel.children[0];
     table.id = loadingPanel.id;
     table.style.zIndex = loadingPanel.style.zIndex;
     table.style.display = loadingPanel.style.display;
     this.GetWrapperElement().appendChild(table.cloneNode(true));
    }
    else
     this.GetWrapperElement().appendChild(loadingPanel.cloneNode(true));
    _aspxRemoveElement(loadingPanel);
   }
  },
  ShowLoadingPanel: function () {
   this.HideHint();
   var loadingPanel = this.GetLoadingPanelElement();
   _aspxSetElementDisplay(loadingPanel, true);
   _aspxSetStyles(loadingPanel, {
    top: (this.GetMainElement().offsetHeight - loadingPanel.offsetHeight) / 2,
    left: (this.GetMainElement().offsetWidth - loadingPanel.offsetWidth) / 2
   });
  },
  HideLoadingPanel: function () {
   this.ShowHint();
   _aspxSetElementDisplay(this.GetLoadingPanelElement(), false);
  },
  TryHideLoadingPanel: function () {
   var count = this.zoomWindow && this.expandWindow ? 2 : 1;
   if (this.largeImageLoadingLockCount == count) {
    this.largeImageLoadingLockCount = 0;
    this.HideLoadingPanel();
   }
  },
  ShowHint: function () {
   if (this.hint)
    this.hint.Show();
  },
  HideHint: function () {
   if (this.hint)
    this.hint.Hide();
  },
  OnBrowserWindowResize: function (evt) {
   this.expandWindow.AdjustControl();
  },
  BrowserWindowResizeSubscriber: function () {
   return this.expandWindow && this.expandWindow.IsVisible();
  },
  SetImageProperties: function (imageUrl, largeImageUrl, zoomWindowText, expandWindowText) {
   this.ShowLoadingPanel();
   ASPxImageControlUtils.ChangeImageSource(this.GetImage(), imageUrl, function () {
    this.ResetImage();
    this.ApplyImageSize();
    if (this.zoomWindow) {
     this.zoomWindow.SetText(zoomWindowText || "");
     ASPxImageControlUtils.ChangeImageSource(this.zoomWindow.GetImage(), largeImageUrl, function () {
      this.zoomWindow.ResetImage();
      this.zoomWindow.UpdateAppearance();
      this.largeImageLoadingLockCount++;
      this.TryHideLoadingPanel();
     }.aspxBind(this));
    }
    if (this.expandWindow) {
     this.expandWindow.SetText(expandWindowText || "");
     ASPxImageControlUtils.ChangeImageSource(this.expandWindow.GetImage(), largeImageUrl, function () {
      this.expandWindow.ResetImage();
      this.expandWindow.UpdateAppearance();
      this.largeImageLoadingLockCount++;
      this.TryHideLoadingPanel();
     }.aspxBind(this));
    }
   }.aspxBind(this));
  },
  GetImage: function () {
   if (!this.image)
    this.image = this.GetChild("_I");
   return this.image;
  },
  ResetImage: function () {
   this.image = null;
  },
  GetWrapperElement: function () {
   if (!this.wrapperElement)
    this.wrapperElement = _aspxGetDescendantNodesByClassName(this.GetMainElement(), CssClassesConstants.Wrapper)[0];
   return this.wrapperElement;
  }
 });
 var DesktopAction = _aspxCreateClass(null, {
  constructor: function (imageZoom) {
   this.imageZoom = imageZoom;
   this.zoomWindowLockCount = 0;
   this.mouseX = 0;
   this.mouseY = 0;
   this.zoomOffsetX = 0;
   this.zoomOffsetY = 0;
   this.CreateHandlers();
  },
  GetZoomWindow: function () {
   return this.imageZoom.zoomWindow;
  },
  GetExpandWindow: function () {
   return this.imageZoom.expandWindow;
  },
  LockZoomWindow: function () {
   this.zoomWindowLockCount++;
  },
  UnlockZoomWindow: function () {
   this.zoomWindowLockCount--;
  },
  IsZoomWindowLocked: function () {
   return this.zoomWindowLockCount > 0;
  },
  CreateHandlers: function () {
   var element = this.imageZoom.GetWrapperElement();
   if (this.HasMouseMoveHandler())
    _aspxAttachEventToElement(element, ASPxClientTouchUI.touchMouseMoveEventName, function (evt) {
     this.OnMouseMove(evt);
    }.aspxBind(this));
   if (this.HasMouseEnterHandler())
    _aspxAttachMouseEnterToElement(element,
     function () { this.OnMouseIn(); }.aspxBind(this),
     function () { this.OnMouseOut(); }.aspxBind(this)
    );
   if (this.HasMouseUpHandler())
    _aspxAttachEventToElement(element, ASPxClientTouchUI.touchMouseUpEventName, function (evt) {
     this.OnMouseUp(evt);
    }.aspxBind(this));
   if (this.HasMouseDownHandler())
    _aspxAttachEventToElement(element, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
     this.OnMouseDown(evt);
    }.aspxBind(this));
  },
  OnMouseDown: function (evt) {
  },
  OnMouseUp: function (evt) {
   if (_aspxGetIsLeftButtonPressed(evt)) {
    var zoomWindow = this.GetZoomWindow();
    if (zoomWindow && zoomWindow.IsVisible())
     zoomWindow.Hide(true);
    this.GetExpandWindow().Show();
   }
  },
  OnMouseMove: function (evt) {
   if (!this.IsZoomWindowLocked()) {
    this.mouseX = _aspxGetEventX(evt) - this.zoomOffsetX;
    this.mouseY = _aspxGetEventY(evt) - this.zoomOffsetY;
    this.GetZoomWindow().SetPosition(this.mouseX, this.mouseY);
   }
  },
  OnMouseIn: function () {
   if (!this.IsZoomWindowLocked()) {
    this.FillZoomOffsets();
    this.GetZoomWindow().Show();
   }
  },
  OnMouseOut: function () {
   if (!this.IsZoomWindowLocked())
    this.GetZoomWindow().Hide();
  },
  HasMouseMoveHandler: function () {
   return this.GetZoomWindow();
  },
  HasMouseDownHandler: function () {
   return false;
  },
  HasMouseUpHandler: function () {
   return this.GetExpandWindow();
  },
  HasMouseEnterHandler: function () {
   return this.GetZoomWindow();
  },
  FillZoomOffsets: function () {
   var mainElement = this.imageZoom.GetMainElement();
   this.zoomOffsetX = _aspxGetAbsoluteX(mainElement);
   this.zoomOffsetY = _aspxGetAbsoluteY(mainElement);
  }
 });
 var TouchAction = _aspxCreateClass(DesktopAction, {
  constructor: function (imageZoom) {
   this.constructor.prototype.constructor.call(this, imageZoom);
  },
  HasMouseDownHandler: function () {
   return true;
  },
  HasMouseUpHandler: function () {
   return true;
  },
  HasMouseEnterHandler: function () {
   return false;
  },
  OnMouseMove: function (evt) {
   if (!this.IsZoomWindowLocked()) {
    DesktopAction.prototype.OnMouseMove.call(this, evt);
    if (!this.GetZoomWindow().IsVisible()) {
     this.FillZoomOffsets();
     this.GetZoomWindow().Show();
    }
    _aspxPreventEvent(evt);
   }
  },
  OnMouseDown: function (evt) {
   _aspxPreventEvent(evt);
  },
  OnMouseUp: function (evt) {
   var zoomWindow = this.GetZoomWindow();
   var expandWindow = this.GetExpandWindow();
   if (expandWindow && zoomWindow && !zoomWindow.IsVisible())
    expandWindow.Show();
   else if (zoomWindow)
    zoomWindow.Hide();
  }
 });
 var HintControl = _aspxCreateClass(null, {
  constructor: function (imageZoom) {
   this.imageZoom = imageZoom;
   this.hintElement = null;
   this.visible = true;
  },
  Show: function () {
   if (!this.visible) {
    this.visible = true;
    this.GetHintElement().style.display = "";
   }
  },
  Hide: function () {
   if (this.visible) {
    this.visible = false;
    this.GetHintElement().style.display = "none";
   }
  },
  GetHintElement: function () {
   if (!this.hintElement)
    this.hintElement = _aspxGetDescendantNodesByClassName(this.imageZoom.GetMainElement(), CssClassesConstants.Hint)[0];
   return this.hintElement;
  }
 });
 var WindowControlBase = _aspxCreateClass(null, {
  constructor: function (imageZoom) {
   this.imageZoom = imageZoom;
   this.popup = null;
   this.image = null;
   this.loadImageStarted = false;
   this.imageLoaded = imageZoom.largeImageUrl ? false : true;
   this.Initialize();
  },
  Initialize: function () {
   if (this.imageZoom.largeImageLoadMode == LargeImageLoadModeEnum.AfterInitialize)
    this.StartLoadImage();
   else if (this.imageLoaded)
    this.UpdateAppearance();
  },
  UpdateAppearance: function () {
  },
  GetImage: function () {
   if (!this.image)
    this.image = _aspxGetElementById(this.GetImageID());
   return this.image;
  },
  GetImageID: function () {
   return "";
  },
  ResetImage: function () {
   this.image = null;
  },
  GetPopup: function () {
   if (!this.popup)
    this.popup = aspxGetControlCollection().Get(this.imageZoom.name + this.GetPopupID());
   return this.popup;
  },
  GetPopupID: function () {
   return "";
  },
  StartLoadImage: function () {
   this.imageZoom.ShowLoadingPanel();
   var image = this.GetImage();
   _aspxAttachEventToElement(image, "load", function () {
    this.OnImageLoad();
   }.aspxBind(this));
   image.src = this.imageZoom.largeImageUrl;
   this.loadImageStarted = true;
  },
  OnImageLoad: function () {
   this.imageLoaded = true;
   this.UpdateAppearance();
   this.imageZoom.HideLoadingPanel();
   if (this.imageZoom.largeImageLoadMode == LargeImageLoadModeEnum.OnAction)
    this.Show();
  },
  Show: function () {
   if (this.imageZoom.largeImageLoadMode == LargeImageLoadModeEnum.OnAction && !this.imageLoaded && !this.loadImageStarted)
    this.StartLoadImage();
   else if (this.imageLoaded) {
    this.ShowCore();
    this.imageZoom.HideHint();
   }
  },
  ShowCore: function () {
  },
  Hide: function (preventAnimation) {
   if (this.imageLoaded) {
    this.HideCore(preventAnimation);
    this.imageZoom.ShowHint();
   }
  },
  HideCore: function (preventAnimation) {
  },
  SetText: function (text) {
   this.GetPopup().SetFooterText(text);
  },
  IsVisible: function () {
   return this.GetPopup().IsVisible();
  }
 });
 var ExpandWindowControl = _aspxCreateClass(WindowControlBase, {
  constructor: function (imageZoom) {
   this.imageWidth = 0;
   this.imageHeight = 0;
   this.constructor.prototype.constructor.call(this, imageZoom);
  },
  Initialize: function () {
   WindowControlBase.prototype.Initialize.call(this);
   var popup = this.GetPopup();
   popup.fadeAnimationDuration = Constants.AnimationDuration;
   ASPxImageControlUtils.AttachHideByEscToPopup(popup);
   popup.Closing.AddHandler(function () {
    this.OnClosing();
   }.aspxBind(this));
   popup.PopUp.AddHandler(function () {
    this.OnPopup();
   }.aspxBind(this));
   _aspxAttachEventToElement(this.GetImage().parentNode, "click", function (evt) {
    this.Hide();
   }.aspxBind(this));
   this.SetVisibilityPointerCursor(true);
  },
  UpdateAppearance: function () {
   var image = this.GetImage();
   this.imageWidth = image.naturalWidth || image.width;
   this.imageHeight = image.naturalHeight || image.height;
  },
  OnClosing: function () {
   this.imageZoom.ShowHint();
   this.imageZoom.action.UnlockZoomWindow();
   this.SetVisibilityPointerCursor(true);
  },
  OnPopup: function () {
   this.AdjustControl();
   this.imageZoom.action.LockZoomWindow();
   this.SetVisibilityPointerCursor(false);
  },
  ShowCore: function () {
   this.GetPopup().Show();
  },
  HideCore: function () {
   this.GetPopup().Hide();
  },
  GetImageID: function () {
   return this.GetPopup().name + Constants.LargeImageID;
  },
  GetPopupID: function () {
   return Constants.ModalPopupID;
  },
  SetVisibilityPointerCursor: function (visible) {
   this.imageZoom.GetWrapperElement().style.cursor = visible ? _aspxGetPointerCursor() : "";
  },
  AdjustControl: function () {
   var popup = this.GetPopup();
   var image = this.GetImage();
   _aspxSetStyles(image, {
    width: this.imageWidth,
    height: this.imageHeight
   });
   popup.SetSize(0, 0);
   _aspxSetStyles(image, {
    height: "100%",
    width: "auto"
   });
   if (popup.GetHeight() >= window.innerHeight)
    popup.SetSize(0, window.innerHeight - Constants.ExpandWindowPadding);
   popup.UpdatePosition();
  }
 });
 var ZoomWindowControl = _aspxCreateClass(WindowControlBase, {
  constructor: function (imageZoom) {
   this.clipPanel = null;
   this.imageWidth = 0;
   this.imageHeight = 0;
   this.largeImageWidth = 0;
   this.largeImageHeight = 0;
   this.zoomWWidth = 0;
   this.zoomWHeight = 0;
   this.lensWidth = 0;
   this.lensHeight = 0;
   this.lensCenterX = 0;
   this.lensCenterY = 0;
   this.constructor.prototype.constructor.call(this, imageZoom);
  },
  GetClipPanel: function () {
   if (!this.clipPanel)
    this.clipPanel = _aspxGetDescendantNodesByClassName(this.imageZoom.GetMainElement(), CssClassesConstants.ClipPanel)[0];
   return this.clipPanel;
  },
  GetImageID: function () {
   return this.GetLargeImagePrefixID() + Constants.LargeImageID;
  },
  GetLargeImagePrefixID: function () {
   return this.imageZoom.name;
  },
  UpdateAppearance: function () {
   var largeImage = this.GetImage();
   if (!ASPxImageControlUtils.IsExistImageSize(largeImage)) { 
    var fakeImage = new Image();
    _aspxAttachEventToElement(fakeImage, "load", function() { 
     largeImage.naturalWidth = fakeImage.naturalWidth || fakeImage.width;
     largeImage.naturalHeight = fakeImage.naturalHeight || fakeImage.height;
     this.UpdateAppearanceCore();
    }.aspxBind(this));
    fakeImage.src = largeImage.src;
   }
   else
    this.UpdateAppearanceCore();
  },
  UpdateAppearanceCore: function () {
   var largeImage = this.GetImage();
   this.largeImageWidth = largeImage.naturalWidth || largeImage.width;
   this.largeImageHeight = largeImage.naturalHeight || largeImage.height;
   var izMainElement = this.imageZoom.GetMainElement();
   this.imageWidth = _aspxPxToInt(izMainElement.style.width); 
   this.imageHeight = _aspxPxToInt(izMainElement.style.height); 
   this.ratio = this.largeImageWidth / this.imageWidth;
   this.InitZoomAreaSize();
   this.lensWidth = this.zoomWWidth / this.ratio;
   this.lensHeight = this.zoomWHeight / this.ratio;
   this.lensCenterX = this.imageWidth - this.lensWidth / 2;
   this.lensCenterY = this.imageHeight - this.lensHeight / 2;
   var clipPanelStyle = {
    width: this.zoomWWidth,
    height: this.zoomWHeight
   };
   _aspxSetStyles(this.GetClipPanel(), clipPanelStyle);
  },
  InitZoomAreaSize: function () {
   this.zoomWHeight = this.imageHeight;
   this.zoomWWidth = this.imageWidth;
  },
  ShowCore: function () {
   ASPxAnimationHelper.fadeIn(this.GetClipPanel(), null, Constants.AnimationDuration);
  },
  HideCore: function (preventAnimation) {
   if (preventAnimation)
    _aspxSetElementOpacity(this.GetClipPanel(), 0);
   else
    ASPxAnimationHelper.fadeOut(this.GetClipPanel(), null, Constants.AnimationDuration);
  },
  SetText: function () {
  },
  SetPosition: function (x, y) {
   var borderX = this.imageWidth - this.lensWidth;
   var borderY = this.imageHeight - this.lensHeight;
   x = x - this.lensWidth / 2;
   y = y - this.lensHeight / 2;
   if (x < 0)
    x = 0;
   else if (x > borderX)
    x = borderX;
   if (y < 0)
    y = 0;
   else if (y > borderY)
    y = borderY;
   _aspxSetStyles(this.GetImage(), {
    left: -x * this.ratio,
    top: -y * this.ratio
   });
  }
 });
 var OutsideZoomWindowControl = _aspxCreateClass(ZoomWindowControl, {
  constructor: function (imageZoom) {
   this.mainElement = null;
   this.panelsContainer = null;
   this.topPanel = null;
   this.bottomPanel = null;
   this.leftPanel = null;
   this.rightPanel = null;
   this.centralPanel = null;
   this.constructor.prototype.constructor.call(this, imageZoom);
  },
  Initialize: function () {
   this.CreateControlHierarchy();
   this.PreparePopupControl();
   ZoomWindowControl.prototype.Initialize.call(this);
  },
  CreateControlHierarchy: function () {
   this.mainElement = this.CreateDiv(CssClassesConstants.Lens + (this.imageZoom.mouseBoxOpacityMode == MouseBoxOpacityModeEnum.Outside ? " outside" : ""));
   this.imageZoom.GetWrapperElement().appendChild(this.mainElement);
   this.panelsContainer = this.CreateDiv(CssClassesConstants.Prefix + "pc");
   this.mainElement.appendChild(this.panelsContainer);
   this.topPanel = this.CreateDiv(CssClassesConstants.Prefix + "ltp");
   this.bottomPanel = this.CreateDiv(CssClassesConstants.Prefix + "lbp");
   this.leftPanel = this.CreateDiv(CssClassesConstants.Prefix + "llp");
   this.rightPanel = this.CreateDiv(CssClassesConstants.Prefix + "lrp");
   this.centralPanel = this.CreateDiv(CssClassesConstants.Prefix + "lcp");
   this.panelsContainer.appendChild(this.leftPanel);
   this.panelsContainer.appendChild(this.rightPanel);
   this.panelsContainer.appendChild(this.topPanel);
   this.panelsContainer.appendChild(this.bottomPanel);
   this.panelsContainer.appendChild(this.centralPanel);
  },
  CreateDiv: function (className) {
   var element = document.createElement("DIV");
   if (className)
    element.className = className;
   return element;
  },
  PreparePopupControl: function () {
   var popup = this.GetPopup();
   popup.fadeAnimationDuration = Constants.AnimationDuration;
   popup.AddPopupElement(this.imageZoom.GetWrapperElement());
  },
  GetLargeImagePrefixID: function () {
   return this.GetPopup().name;
  },
  GetPopupID: function () {
   return Constants.PopupID;
  },
  UpdateAppearance: function () {
   ZoomWindowControl.prototype.UpdateAppearance.call(this);
   var izMainElement = this.imageZoom.GetMainElement();
   _aspxSetStyles(this.mainElement, {
    width: izMainElement.style.width,
    height: izMainElement.style.height
   });
   this.GetPopup().SetSize(this.zoomWWidth, this.zoomWHeight);
   _aspxSetStyles(this.panelsContainer, {
    width: this.imageWidth * 2 - this.lensWidth,
    height: this.imageHeight * 2 - this.lensHeight
   });
   this.AdjustPanel(this.topPanel, 0, this.imageWidth - this.lensWidth, this.lensWidth, this.imageHeight - this.lensHeight);
   this.AdjustPanel(this.bottomPanel, this.imageHeight, this.imageWidth - this.lensWidth, this.lensWidth, this.imageHeight - this.lensHeight);
   this.AdjustPanel(this.leftPanel, 0, 0, this.imageWidth - this.lensWidth, this.imageHeight * 2 - this.lensHeight);
   this.AdjustPanel(this.rightPanel, 0, this.imageWidth, this.imageWidth - this.lensWidth, this.imageHeight * 2 - this.lensHeight);
   this.AdjustPanel(this.centralPanel, this.imageHeight - this.lensHeight, this.imageWidth - this.lensWidth, this.lensWidth, this.lensHeight);
  },
  AdjustPanel: function (element, top, left, width, height) {
   _aspxSetStyles(element, {
    top: top,
    left: left,
    width: width,
    height: height
   });
  },
  InitZoomAreaSize: function () {
   this.zoomWHeight = typeof (this.imageZoom.zoomWHeight) == "string" ? this.imageHeight * _aspxPercentageToFloat(this.imageZoom.zoomWHeight) : this.imageZoom.zoomWHeight;
   this.zoomWWidth = typeof (this.imageZoom.zoomWWidth) == "string" ? this.imageWidth * _aspxPercentageToFloat(this.imageZoom.zoomWWidth) : this.imageZoom.zoomWWidth;
   if (this.zoomWHeight > this.largeImageHeight)
    this.zoomWHeight = this.largeImageHeight;
   if (this.zoomWWidth > this.largeImageWidth)
    this.zoomWWidth = this.largeImageWidth;
  },
  SetPosition: function (x, y) {
   ZoomWindowControl.prototype.SetPosition.call(this, x, y);
   _aspxSetStyles(this.panelsContainer, {
    left: this.GetCorrectedX(x),
    top: this.GetCorrectedY(y)
   });
  },
  GetCorrectedX: function (value) {
   value = value - this.lensCenterX;
   if (value >= 0)
    value = 0;
   else if (value <= -(this.imageWidth - this.lensWidth))
    value = -(this.imageWidth - this.lensWidth);
   return value;
  },
  GetCorrectedY: function (value) {
   value = value - this.lensCenterY;
   if (value >= 0)
    value = 0;
   else if (value <= -(this.imageHeight - this.lensHeight))
    value = -(this.imageHeight - this.lensHeight);
   return value;
  },
  ShowCore: function () {
   ASPxAnimationHelper.fadeIn(this.panelsContainer, null, Constants.AnimationDuration);
   this.GetPopup().Show();
  },
  HideCore: function (preventAnimation) {
   if (preventAnimation)
    _aspxSetElementOpacity(this.panelsContainer, 0);
   else
    ASPxAnimationHelper.fadeOut(this.panelsContainer, null, Constants.AnimationDuration);
   var popup = this.GetPopup();
   if (preventAnimation)
    popup.closeAnimationType = "none";
   popup.Hide();
   if (preventAnimation)
    popup.closeAnimationType = "fade";
  },
  SetText: function (text) {
   WindowControlBase.prototype.SetText.call(this, text);
  }
 });
 window.ASPxClientImageZoom = ASPxClientImageZoom;
})();
MVCxClientImageZoom = _aspxCreateClass(ASPxClientImageZoom, {
 InlineInitialize: function () {
  this.Init.AddHandler(function () {
   var navigator = aspxGetControlCollection().Get(this.imageZoomNavigatorID);
   if (navigator) {
    navigator.imageZoomID = this.name;
    navigator.Initialize();
    navigator.OnActiveItemChanged();
    navigator.AdjustControl();
   }
  } .aspxBind(this));
  ASPxClientImageZoom.prototype.InlineInitialize.call(this);
 }
});
var MVCxClientImageZoomNavigator = _aspxCreateClass(ASPxClientImageZoomNavigator, {
 Initialize: function(){
  if(!this.imageZoomID)
   return;
  ASPxClientImageZoomNavigator.prototype.Initialize.call(this);
 }
});
ASPxClientPopupMenu = _aspxCreateClass(ASPxClientMenuBase, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.skipNextPEMouseOutBeforePEMouseOver = false; 
  this.cursorOverPopupElement = false;
  this.isPopupMenu = true;
  this.closeAction = "OuterMouseClick";
  this.popupAction = "RightMouseClick";
  this.popupElementIDList = [ ];
  this.popupElementList = [ ];
  this.lastUsedPopupElementInfo = { };
  this.popupHorizontalOffset = 0;
  this.popupVerticalOffset = 0;
  this.popupHorizontalAlign = ASPxClientPopupUtils.NotSetAlignIndicator;
  this.popupVerticalAlign = ASPxClientPopupUtils.NotSetAlignIndicator;
  this.isPopupFullCorrectionOn = true;
  this.left = 0;
  this.top = 0;
 },
 Initialize: function() {
  this.RemoveAllPopupElements();
  this.PopulatePopupElements();
  ASPxClientMenuBase.prototype.Initialize.call(this);
 },
 SetPopupElementReference: function(popupElement, popupElementIndex, attach) {
  if(!_aspxIsExistsElement(popupElement)) return;
  var setReferenceFunction = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
  if(this.closeAction == "MouseOut" || this.popupAction == "MouseOver") {
   setReferenceFunction(popupElement, "mouseover", ASPxClientPopupUtils.OverControl.OnMouseOver);
   setReferenceFunction(popupElement, "mouseout",  ASPxClientPopupUtils.OverControl.OnMouseOut);
  }
  if(this.popupAction == "RightMouseClick")
   setReferenceFunction(popupElement, "contextmenu", aspxPMOnMouseUp);
  else if(this.popupAction == "LeftMouseClick")
   setReferenceFunction(popupElement, "mouseup", aspxPMOnMouseUp);
  if(attach) {
   popupElement.DXPopupElementControl = this;
   popupElement.DXPopupElementIndex = popupElementIndex;
  }else
   popupElement.DXPopupElementControl = popupElement.DXPopupElementIndex = undefined;
 },
 GetPopupElement: function (indexPopupElement) {
  var popupElement = this.popupElementList[indexPopupElement];
  return popupElement ? popupElement : null;
 },
 GetLastShownPopupElementIndex: function() {
  return _aspxGetDefinedValue(this.lastUsedPopupElementInfo.shownPEIndex, 0);
 },
 SetLastShownPopupElementIndex: function(popupElementIndex) {
  this.lastUsedPopupElementInfo.shownPEIndex = popupElementIndex;
 },
 GetLastOverPopupElementIndex: function() {
  return _aspxGetDefinedValue(this.lastUsedPopupElementInfo.overPEIndex, -1);
 },
 SetLastOverPopupElementIndex: function(popupElementIndex) {
  this.lastUsedPopupElementInfo.overPEIndex = popupElementIndex;
 },
 PopulatePopupElements: function() {
  var ids = this.popupElementIDList;
  for(var i = 0; i < ids.length; i++) {
   var popupElement = ASPxClientPopupUtils.FindPopupElementById(ids[i]);
   if(popupElement)
    this.AddPopupElement(popupElement);
  }
 },
 AddPopupElement: function(popupElement) {
  var popupElementIndex = this.AddPopupElementInternal(popupElement);
  this.SetPopupElementReference(popupElement, popupElementIndex, true);
 },
 RemovePopupElement: function(popupElement) {
  this.RemovePopupElementInternal(popupElement);
  this.SetPopupElementReference(popupElement, null, false);
 },
 AddPopupElementInternal: function(element) {
  for(var i = 0; i < this.popupElementList.length; i++) {
   if(!this.popupElementList[i]) {
    this.popupElementList[i] = element;
    return i;
   }
  }
  this.popupElementList.push(element);
  return this.popupElementList.length - 1;
 },
 RemovePopupElementInternal: function(element) {
  for(var i = 0; i < this.popupElementList.length; i++) {
   if(this.popupElementList[i] == element) {
    this.popupElementList[i] = null;
    return;
   }
  }
 },
 RemoveAllPopupElements: function() {
  for(var i = 0; i < this.popupElementList.length; i++)
   this.RemovePopupElement(this.popupElementList[i]);
 },
 IsMenuVisible: function(){
  var element = this.GetMainElement();
  return (element != null) ? _aspxGetElementDisplay(element) : false;
 },
 IsVisible: function() {
  return this.isShowing || this.IsMenuVisible();
 },
 IsParentElementPositionStatic: function(indexPath){
  return false;
 },
 GetClientSubMenuPos: function(element, indexPath, pos, isXPos){
  if (indexPath == "") {
   var popupPosition = null;
   if (isXPos){
    popupPosition = ASPxClientPopupUtils.GetPopupAbsoluteX(this.GetMenuMainCell(this.GetMainElement()),
     __aspxPopupShadowWidth, this.GetPopupElement(this.GetLastShownPopupElementIndex()), this.popupHorizontalAlign, this.popupHorizontalOffset, pos, this.left, this.rtl, this.isPopupFullCorrectionOn);
   }
   else{
    popupPosition = ASPxClientPopupUtils.GetPopupAbsoluteY(this.GetMenuMainCell(this.GetMainElement()),
     __aspxPopupShadowHeight, this.GetPopupElement(this.GetLastShownPopupElementIndex()), this.popupVerticalAlign, this.popupVerticalOffset, pos, this.top, this.isPopupFullCorrectionOn);
   }
   popupPosition.position -= _aspxGetPositionElementOffset(element, isXPos);
   return popupPosition;
  }
  return ASPxClientMenuBase.prototype.GetClientSubMenuPos.call(this, element, indexPath, pos, isXPos);
 },
 GetMenuElement: function(indexPath){
  if (indexPath == "")
   return this.GetMainElement();
  return ASPxClientMenuBase.prototype.GetMenuElement.call(this, indexPath);
 },
 OnItemOverTimer: function(indexPath){
  aspxGetMenuCollection().ClearCurrentShowingPopupMenuName();
  if(indexPath == ""){
   aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   aspxGetMenuCollection().DoShowAtCurrentPos(this.name, indexPath);
  }
  else
   ASPxClientMenuBase.prototype.OnItemOverTimer.call(this, indexPath);
 },
 DoShow: function(x, y){
  var element = this.GetMainElement();
  if(element != null && !_aspxGetElementDisplay(element)){
   aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   if(!this.isInitialized)
    this.PopulatePopupElements();
   this.isShowing = true;
   this.DoShowPopupMenu(element, x, y, "");
   this.isShowing = false;
  }
 },
 ShowPopupSubMenuAfterCallback: function(element, callbackResult) { 
  this.SetSubMenuInnerHtml(element, callbackResult);
  var indexPath = this.GetIndexPathById(element.id, true);
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   element.style.height = "";
   this.PrepareScrolling(element, scrollHelper, _aspxPxToInt(element.style.top));
  }
  aspxGetControlCollection().AdjustControls(element);
 },
 WrongEventOrderOperaHack: function(){
  this.skipNextPEMouseOutBeforePEMouseOver = true;
 },
 WrongEventOrderOperaRollBack: function(){
  this.skipNextPEMouseOutBeforePEMouseOver = false;
 },
 OnAfterItemOver: function(hoverItem, hoverElement) {
  var afterItemOverAllowed = ASPxClientMenuBase.prototype.AfterItemOverAllowed(this, hoverItem);
  if(afterItemOverAllowed) {
   this.WrongEventOrderOperaHack();
   ASPxClientMenuBase.prototype.OnAfterItemOver.call(this, hoverItem, hoverElement); 
  }
 },
 OnPopupElementMouseOver: function(evt, popupElement) {
  if(popupElement != null) {
   if(popupElement.DXPopupElementIndex == this.GetLastShownPopupElementIndex())
    this.cursorOverPopupElement = true
   this.WrongEventOrderOperaRollBack();
   if(this.popupAction == "MouseOver") {
    var isVisible = this.IsMenuVisible();
    if(popupElement.DXPopupElementIndex != this.GetLastOverPopupElementIndex()) {
     this.ClearDisappearTimer();
     this.ClearAppearTimer();
     if(isVisible) {
      this.Hide();
      isVisible = false;
     }
    }
    if(!isVisible) {
     aspxGetMenuCollection().SetCurrentShowingPopupMenuName(this.name);
     this.ShowInternal(evt, popupElement.DXPopupElementIndex);
    }
    this.SetLastOverPopupElementIndex(popupElement.DXPopupElementIndex);
   }
  }
 },
 OnPopupElementMouseOut: function(evt, popupElement) {
   if (popupElement != null) {
   aspxGetMenuCollection().ClearCurrentShowingPopupMenuName();
   this.cursorOverPopupElement = false;
   if(!this.IsMenuVisible()) 
    this.ClearAppearTimer();
   else if (!this.skipNextPEMouseOutBeforePEMouseOver) 
    this.SetDisappearTimer();
   }
 },
 DoShowPopupMenuBorderCorrector: function(element, x, y, indexPath, toTheLeft, toTheTop){
  if (indexPath != "")
   ASPxClientMenuBase.prototype.DoShowPopupMenuBorderCorrector.call(this, element, x, y, indexPath, toTheLeft, toTheTop);
 },
 ShowInternal: function(evt, popupElementIndex) {
  this.SetLastShownPopupElementIndex(popupElementIndex);
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  if (evt.type == "mouseover")
   aspxGetMenuCollection().SetAppearTimer(this.name, "", this.appearAfter);
  else
   this.DoShow(x, y);
 },
 GetAnimationHorizontalDirection: function(indexPath, popupPosition){
  if (this.GetMenuLevel(indexPath) == 0)
   return ASPxClientPopupUtils.GetAnimationHorizontalDirection(popupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
  else 
   return popupPosition.isInverted ? 1 : -1;
 },
 GetAnimationVerticalDirection: function(indexPath, popupPosition){
  if (this.GetMenuLevel(indexPath) == 0)
   return ASPxClientPopupUtils.GetAnimationVerticalDirection(popupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
  else 
   return 0;
 },
 OnHideByItemOut: function(){
  if(this.closeAction == "MouseOut" && !this.cursorOverPopupElement)
   this.Hide();
  else
   ASPxClientMenuBase.prototype.OnHideByItemOut.call(this);
 },
 SetPopupElementID: function(popupElementId) {
  this.RemoveAllPopupElements();
  this.popupElementIDList = popupElementId.split(';');
  if(this.closeAction == "MouseOut") {
   this.ClearDisappearTimer();
   this.Hide();
  }
  this.PopulatePopupElements();
  this.WrongEventOrderOperaRollBack();
 },
 GetCurrentPopupElementIndex: function() {
  var popupElement = this.GetCurrentPopupElement();
  return popupElement ? popupElement.DXPopupElementIndex : -1;
 },
 GetCurrentPopupElement: function() {
  var popupElement = this.GetPopupElement(this.GetLastShownPopupElementIndex());
  if(popupElement && popupElement.DXPopupElementControl)
   return popupElement;
  return null;
 },
 RefreshPopupElementConnection: function(){
  this.RemoveAllPopupElements();
  this.PopulatePopupElements();
 },
 Hide: function(){
  aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
 },
 Show: function(popupElementIndex){
  if(this.GetPopupElement(popupElementIndex) != null)
   this.SetLastShownPopupElementIndex(popupElementIndex);
  this.DoShow(__aspxInvalidPosition, __aspxInvalidPosition);
 },
 ShowAtElement: function(htmlElement){
  this.SetLastShownPopupElementIndex(this.AddPopupElementInternal(htmlElement));
  this.DoShow(__aspxInvalidPosition, __aspxInvalidPosition);
  this.RemovePopupElementInternal(htmlElement);
 },
 ShowAtElementByID: function(id){
  var htmlElement = document.getElementById(id);
  this.ShowAtElement(htmlElement);
 },
 ShowAtPos: function(x, y){
  var lastIndexBackup = this.GetLastShownPopupElementIndex();
  this.SetLastShownPopupElementIndex(-1);
  this.DoShow(x, y);
  this.SetLastShownPopupElementIndex(lastIndexBackup);
 },
 GetVisible: function(){
  return this.IsMenuVisible();
 },
 SetVisible: function(visible){
  if(visible && !this.IsMenuVisible())
   this.Show();
  else if(!visible && this.IsMenuVisible())
   this.Hide();
 }
});
ASPxClientPopupMenu.Cast = ASPxClientControl.Cast;
function aspxPMOnMouseUp(evt, element){
 var element = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupMenuElement);
 if(element == null || !element.DXPopupElementControl.isPopupMenu)
  return;
 var elementPopupAction = element.DXPopupElementControl.popupAction;
 switch(elementPopupAction) {
  case "LeftMouseClick":
   if(!_aspxGetIsLeftButtonPressed(evt)) return;
   break;
  case "RightMouseClick":
   ASPxClientPopupUtils.PreventContextMenu(evt);
 }
 aspxGetMenuCollection().ClearDisappearTimer();
 element.DXPopupElementControl.ShowInternal(evt, element.DXPopupElementIndex);
 return _aspxCancelBubble(evt);
}
function aspxTestPopupMenuElement(element){
 return !!element.DXPopupElementControl;
}
_aspxAttachEventToDocument("mousemove", aspxPopupMenuDocumentMouseMove);
function aspxPopupMenuDocumentMouseMove(evt){
 var element = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupMenuElement);
 if(element != null)
  aspxGetMenuCollection().SaveCurrentMouseOverPos(evt, element);
}

ASPxClientNavBar = _aspxCreateClass(ASPxClientControl, {
 GROUP_TEXT_CLASSNAME: 'dxnb-ghtext',
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.animationDuration = 200;
  this.autoCollapse = false;
  this.allowExpanding = true;
  this.allowSelectItem = false;
  this.cookieName = "";
  this.groupCount = 0;
  this.enableAnimation = false;
  this.groups = [];
  this.groupsExpanding = [];
  this.groupsExpandingRequest = [];
  this.mouseOverActionDelay = 300;
  this.mouseOverActionTimerID = -1;
  this.headerElementsCache = {};
  this.ItemClick = new ASPxClientEvent();
  this.ExpandedChanged = new ASPxClientEvent();
  this.ExpandedChanging = new ASPxClientEvent();
  this.HeaderClick = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.AssignControlElementAttributes();
  this.InitializeSelectedItem();
  this.InitializeEnabledAndVisible();
 },
 InitializeEnabledAndVisible: function() {
  for(var i = 0; i < this.groups.length; i++) {
   var group = this.groups[i];
   for(var j = 0; j < group.items.length; j++) {
    this.SetItemEnabled(i, j, group.items[j].clientEnabled, true);
    this.SetItemVisible(i, j, group.items[j].clientVisible, true);
   }
   this.SetGroupVisible(i, group.clientVisible, true);
  }
 },
 InitializeSelectedItem: function() {
  if(!this.allowSelectItem) return;
  this.SelectItem(this.GetSelectedItemIndexPath());
 },
 InitializeCallBackData: function() {
  for(var i = 0; i < this.GetGroupCountCore(); i++) {
   if(this.groupsExpanding[i]) {
    var element = this.GetGroupContentElement(i);
    if(element != null) element.loaded = true;
   }
  }
 },
 AdjustControlCore: function() {
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetGroupHeaderElements, "Headers", true);
  this.CorrectWrappedText(this.GetGroupHeaderElements, "Headers");
  this.CorrectWrappedText(this.GetItemLinkElements, "Items");
  this.CorrectGroupHeaderText();
 },
 CorrectGroupHeaderText: function() {
  var elements = this.GetCachedElements(this.GetGroupHeaderElements, this.headerElementsCache);
  for(var i = 0; i < elements.length; i++){
   if(elements[i].textCorrected || elements[i].offsetWidth == 0) continue;
   this.CorrectGroupHeaderTextElement(elements[i]);
   elements[i].textCorrected = true;
  }
 },
 CorrectGroupHeaderTextElement: function(element) {
  var textElements = _aspxGetChildNodesByClassName(element, "dxnb-ghtext");
  if(textElements.length > 0){
   var btnElements = _aspxGetChildNodesByClassName(element, "dxnb-btn");
   if(btnElements.length == 0)
    btnElements = _aspxGetChildNodesByClassName(element, "dxnb-btnLeft");
   if(btnElements.length > 0)
    _aspxSetStyles(textElements[0], {
     marginRight: btnElements[0].offsetWidth + _aspxGetLeftRightMargins(btnElements[0])
    }, true);
  }
 },
 AssignControlElementAttributes: function() {
  var disabledCssClass = "dxnbLiteDisabled";
  var mainElement = this.GetMainElement();
  if(mainElement.style.width && !_aspxIsPercentageSize(mainElement.style.width)) {
   mainElement.style.width = _aspxPxToInt(mainElement.style.width) -
    _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement) + 'px';
  }
  if(_aspxElementCssClassContains(mainElement, disabledCssClass)) return;
  var groups = _aspxGetElementNodes(mainElement);
  var groupIndex = 0;
  for(var i = 0; i < groups.length; i++) {
   while(!this.groups[groupIndex].visible)
    groupIndex++;
   if(_aspxElementHasCssClass(groups[i], disabledCssClass))
    continue;
   this.AssignGroupAttributes(groups[i], groupIndex);
   groupIndex++;
  }
 },
 AssignGroupAttributes: function(group, groupIndex) {
  var headers = _aspxGetChildrenByPartialClassName(group, "dxnb-header");
  for(var i = 0; i < headers.length; i++) {
   if(headers[i].id)
    continue;
   headers[i].id = this.PrepareElementID(this.GetGroupHeaderElementID(groupIndex, headers[i].className.indexOf("Collapsed") == -1));
   aspxAssignAccessabilityEventsToChildrenLinks(headers[i]);
  }
  this.AssignGroupContentAttributes(_aspxGetChildrenByPartialClassName(group, "dxnb-content")[0], groupIndex);
 },
 AssignGroupContentAttributes: function(content, groupIndex) {
  if(!content) return;
  content.id = this.PrepareElementID(this.GetGroupContentElementID(groupIndex));
  if(content.tagName == "UL") {
   var items = _aspxGetElementNodes(content);
   var itemIndex = 0;
   var group = this.groups[groupIndex];
   for(var i = 0; i < items.length; i++) {
    while(!group.items[itemIndex].visible)
     itemIndex++;
    this.AssignItemAttributes(items[i], this.GetIndexPath(groupIndex, itemIndex));
    itemIndex++;
   }
  }
 },
 AssignItemAttributes: function(item, indexPath) {
  item.id = this.PrepareElementID(this.GetItemElementID(indexPath));
  aspxAssignAccessabilityEventsToChildrenLinks(item);
  if(_aspxElementCssClassContains(item, "dxnb-tmpl")) return;
  var itemLink = _aspxGetChildrenByPartialClassName(item, "dxnb-link")[0];
  if(itemLink)
   itemLink.id = this.PrepareElementID(this.GetItemLinkID(indexPath));
  var itemImg = _aspxGetChildrenByPartialClassName(item, "dxnb-img")[0];
  if(itemImg)
   itemImg.id = this.PrepareElementID(this.GetItemImageID(indexPath));
 },
 PrepareElementID: function(id) {
  return this.name + id;
 },
 GetGroupHeaderElementID: function(index, expanded) {
  return "_GH" + (expanded ? "E" : "C") + index;
 },
 GetClickableGroupHeaderElement: function(index) {
  var isDisplayed = false;
  var element = this.GetGroupHeaderExpandedElement(index);
  if(element != null) isDisplayed = !_aspxGetElementDisplay(element) || !this.allowExpanding;
  if(!isDisplayed)
   element = this.GetGroupHeaderCollapsedElement(index);
  return element;
 },
 GetGroupContentElementID: function(index) {
  return "_GC" + index;
 },
 GetItemElementID: function(indexPath) {
  return "_I" + indexPath + "_";
 },
 GetItemLinkID: function(indexPath) {
  return this.GetItemElementID(indexPath) + "T";
 },
 GetItemImageID: function(indexPath) {
  return this.GetItemElementID(indexPath) + "Img";
 },
 GetGroupHeaderExpandedElement: function(index) {
  return this.GetChild(this.GetGroupHeaderElementID(index, true));
 },
 GetGroupHeaderCollapsedElement: function(index) {
  return this.GetChild(this.GetGroupHeaderElementID(index, false));
 },
 GetGroupHeaderElements: function(){
  var elements = [];
  elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxnb-header"));
  elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxnb-headerCollapsed"));
  return elements;
 },
 GetItemLinkElements: function(){
  return _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxnb-link");
 },
 GetGroupContentElement: function(index) {
  return this.GetChild(this.GetGroupContentElementID(index));
 },
 GetGroupContentAnimationElement: function(index) {
  return this.GetGroupContentElement(index);
 },
 GetRowElement: function(cellElement) {
  return cellElement.parentNode;
 },
 GetItemElement: function(groupIndex, itemIndex) {
  return this.GetItemElementByIndexPath(this.GetIndexPath(groupIndex, itemIndex));
 },
 GetItemSeparatorElement: function(groupIndex, itemIndex) {
  return this.GetChild("_I" + this.GetIndexPath(groupIndex, itemIndex) + "S");
 },
 GetItemElementByIndexPath: function(indexPath) {
  return this.GetChild(this.GetItemElementID(indexPath));
 },
 GetItemTextElementByIndexPath: function(indexPath) {
  return this.GetChild(this.GetItemElementID(indexPath) + "T");
 },
 GetItemImageElementByIndexPath: function(indexPath) {
  return this.GetChild(this.GetItemElementID(indexPath) + "I");
 },
 GetGroupRow: function(groupIndex) {
  return _aspxGetElementNodes(this.GetMainElement())[groupIndex];
 },
 GetGroupSeparatorRow: function(groupIndex) {
  return this.GetChild("_GSR" + groupIndex);
 },
 GetGroupStateInputElement: function(index) {
  return _aspxGetElementById(this.name + "GS");
 },
 GetSelectedItemInputElement: function() {
  return _aspxGetElementById(this.name + "SI");
 },
 DoItemClick: function(groupIndex, itemIndex, hasItemLink, htmlEvent) {
  var processOnServer = this.RaiseItemClick(groupIndex, itemIndex, htmlEvent);
  if(processOnServer && !hasItemLink)
   this.SendPostBack("CLICK:" + this.GetIndexPath(groupIndex, itemIndex));
 },
 GetAutoCollapseCoGroupIndex: function(groupIndex) {
  if(this.autoCollapse) {
   for(var i = 0; i < this.GetGroupCountCore(); i++) {
    if(i != groupIndex && this.groupsExpanding[i])
     return i;
   }
  }
  return -1;
 },
 SetExpandedInternal: function(groupIndex, expanded) {
  if(expanded == this.groupsExpanding[groupIndex] || !this.GetChild(this.GetGroupHeaderElementID(groupIndex, expanded))) 
   return;
  var processingMode = this.RaiseExpandedChanging(groupIndex);
  if(processingMode == "Client") {
   if(expanded || !this.autoCollapse)
    this.ChangeExpanding(groupIndex, expanded);
  }
  else if(processingMode == "Server")
   this.SendPostBack("EXPAND:" + groupIndex);
 },
 ChangeExpanding: function(groupIndex, expanded) {
  var element = this.GetGroupContentElement(groupIndex);
  var autoCollapseCoGroupIndex = this.GetAutoCollapseCoGroupIndex(groupIndex);
  if(expanded && _aspxIsFunction(this.callBack) && element != null && !element.loaded) {
   this.DoChangeExpanding(groupIndex, autoCollapseCoGroupIndex, expanded, false, false, true);
   if(!element.loading) {
    element.loading = true;
    this.groupsExpandingRequest.push(groupIndex);
    this.ShowLoadingPanelInGroup(groupIndex);
    this.CreateCallback(groupIndex);
   }
  }
  else
   this.DoChangeExpanding(groupIndex, autoCollapseCoGroupIndex, expanded, this.enableAnimation, true, true);
 },
 DoChangeExpanding: function(groupIndex, autoCollapseCoGroupIndex, expanded, doAnimation, raiseChangedEvent, raiseCoGroupChangedEvent) {
  this.ChangeGroupExpandState(groupIndex, expanded);
  if(autoCollapseCoGroupIndex > -1)
   this.ChangeGroupExpandState(autoCollapseCoGroupIndex, !expanded);
  if (doAnimation)
   this.DoChangeExpandingWithAnimation(groupIndex, autoCollapseCoGroupIndex, expanded);
  else
   this.DoChangeExpandingWithoutAnimation(groupIndex, autoCollapseCoGroupIndex, expanded, raiseChangedEvent, raiseCoGroupChangedEvent);
 },
 DoChangeExpandingWithoutAnimation: function (groupIndex, autoCollapseCoGroupIndex, expanded, raiseChangedEvent, raiseCoGroupChangedEvent) {
  this.ChangeGroupElementsExpandState(groupIndex, expanded);
  if (autoCollapseCoGroupIndex > -1)
   this.ChangeGroupElementsExpandState(autoCollapseCoGroupIndex, !expanded);
  if (raiseCoGroupChangedEvent && autoCollapseCoGroupIndex > -1)
   this.RaiseExpandedChanged(autoCollapseCoGroupIndex);
  if (raiseChangedEvent)
   this.RaiseExpandedChanged(groupIndex);
 },
 DoChangeExpandingWithAnimation: function (groupIndex, autoCollapseCoGroupIndex, expanded) {
  var controlHeight = this.GetMainElement().offsetHeight, endHeight = 0;
  var element = this.GetGroupContentAnimationElement(groupIndex);
  if (element != null) {
   element.expanding = expanded;
   endHeight = this.GetGroupContentEndHeight(element, expanded);
   this.PrepareGroupElementsForAnimation(groupIndex, expanded, 0);
  }
  if(autoCollapseCoGroupIndex > -1)
   this.PrepareGroupElementsForAnimation(autoCollapseCoGroupIndex, !expanded, controlHeight - this.GetMainElement().offsetHeight);
  if (element != null) 
   this.StartAnimation(element, this.GetGroupContentStartHeight(element, expanded), endHeight, function (element) { this.OnAnimationComplete(groupIndex); }.aspxBind(this));
  if (autoCollapseCoGroupIndex > -1) {
   var groupContentElement = this.GetGroupContentAnimationElement(autoCollapseCoGroupIndex);
   if(groupContentElement)
    this.StartAnimation(groupContentElement, groupContentElement.offsetHeight, 0, function (element) { this.OnAnimationCompleteAutoCollapseGroup(autoCollapseCoGroupIndex); }.aspxBind(this));
  }
 },
 StartAnimation: function (element, from, to, onComplete) {
  var transition = ASPxAnimationHelper.createAnimationTransition(element, {
   property: "height", unit: "px",
   duration: this.animationDuration,
   onComplete: onComplete
  });
  transition.Start(from, to);
 },
 OnAnimationCompleteAutoCollapseGroup: function (groupIndex) {
  this.ChangeGroupElementsExpandState(groupIndex, false);
  var element = this.GetGroupContentAnimationElement(groupIndex);
  if (element)
   _aspxSetStyles(element, { height: "" })
  this.RaiseExpandedChanged(groupIndex);
 },
 OnAnimationComplete: function (groupIndex) {
  var element = this.GetGroupContentAnimationElement(groupIndex);
  if (element) {
   this.ChangeGroupElementsExpandState(groupIndex, element.expanding);
   _aspxSetStyles(element, { overflow: "", height: "", width: "" });
   this.RaiseExpandedChanged(groupIndex);
  }
 },
 PrepareGroupElementsForAnimation: function(groupIndex, expanding, heightCorrection) {
  var element = this.GetGroupContentAnimationElement(groupIndex);
  var contentElement = this.GetGroupContentElement(groupIndex);
  if (!element || !contentElement)
   return;
  element.style.overflow = "hidden";
  if (expanding) {
   element.style.height = "0px";
   this.SetGroupElementDisplay(contentElement, true);
  }
  else {
   var height = element.offsetHeight + heightCorrection;
   if(height >= 0)
    _aspxSetOffsetHeight(element, height);
  }
 },
 GetGroupContentEndHeight: function (element, expanding) {
  if (!expanding)
   return 0;
  var container = element;
  var dispaly = container.style.display;
  container.style.display = "";
  var height = _aspxGetClearClientHeight(element);
  container.style.display = dispaly;
  return height;
 },
 GetGroupContentStartHeight: function (element, expanding) {
  return expanding ? 0 : element.offsetHeight
 },
 ChangeGroupExpandState: function(groupIndex, expanded) {
  this.groupsExpanding[groupIndex] = expanded;
  this.UpdateGroupStateInputElement();
  this.UpdateGroupStateCookie();
 },
 ChangeGroupElementsExpandState: function(groupIndex, expanded) {
  this.SetGroupElementDisplay(this.GetGroupContentElement(groupIndex), expanded);
  this.SetGroupElementDisplay(this.GetGroupHeaderExpandedElement(groupIndex), expanded);
  this.SetGroupElementDisplay(this.GetGroupHeaderCollapsedElement(groupIndex), !expanded);
  if(expanded)
   aspxGetControlCollection().AdjustControls(this.GetGroupContentElement(groupIndex));
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetGroupHeaderElements, "Headers");
  this.CorrectWrappedText(this.GetGroupHeaderElements, "Headers");
  this.CorrectWrappedText(this.GetItemLinkElements, "Items");
  this.CorrectGroupHeaderText();
 },
 SetGroupElementDisplay: function(groupElement, value) {
  if(groupElement != null)
   _aspxSetElementDisplay(groupElement, value);
 },
 GetGroupCountCore: function() {
  return (this.groups.length > 0) ? this.groups.length : this.groupCount;
 },
 GetIndexPath: function(groupIndex, itemIndex) {
  return (groupIndex != -1 && itemIndex != -1) ? groupIndex + __aspxItemIndexSeparator + itemIndex : "";
 },
 GetGroupIndex: function(indexPath) {
  var indexes = indexPath.split(__aspxItemIndexSeparator);
  return (indexes.length > 0) ? indexes[0] : -1;
 },
 GetItemIndex: function(indexPath) {
  var indexes = indexPath.split(__aspxItemIndexSeparator);
  return (indexes.length > 1) ? indexes[1] : -1;
 },
 GetGroupState: function() {
  var state = "";
  for(var i = 0; i < this.GetGroupCountCore(); i++) {
   state += this.groupsExpanding[i] ? "1" : "0";
   if(i < this.GetGroupCountCore() - 1) state += ";";
  }
  return state;
 },
 UpdateGroupStateCookie: function() {
  if(this.cookieName == "") return;
  _aspxDelCookie(this.cookieName);
  _aspxSetCookie(this.cookieName, this.GetGroupState());
 },
 UpdateGroupStateInputElement: function() {
  var element = this.GetGroupStateInputElement();
  if(element != null) element.value = this.GetGroupState();
 },
 SelectItem: function(indexPath) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetSelectingItemElement(indexPath);
  if(element != null) aspxGetStateController().SelectElementBySrcElement(element);
 },
 DeselectItem: function(indexPath) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetSelectingItemElement(indexPath);
  if(element != null) aspxGetStateController().DeselectElementBySrcElement(element);
 },
 GetSelectingItemElement: function(indexPath) {
  return this.GetItemElementByIndexPath(indexPath);
 },
 GetSelectedItemIndexPath: function() {
  var inputElement = this.GetSelectedItemInputElement();
  if(inputElement != null)
   return inputElement.value;
  return "";
 },
 SetSelectedItemInternal: function(groupIndex, itemIndex) {
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  if(this.allowSelectItem) {
   var inputElement = this.GetSelectedItemInputElement();
   if(inputElement != null) {
    this.DeselectItem(inputElement.value);
    inputElement.value = indexPath;
    var group = this.GetGroup(groupIndex);
    var item = group ? group.GetItem(itemIndex) : null;
    if(item == null || item.GetEnabled())
     this.SelectItem(inputElement.value);
   }
  }
 },
 OnHeaderClick: function(groupIndex, evt) {
  this.ClearMouseMoverTimer();
  var processingMode = this.RaiseHeaderClick(groupIndex, evt);
  var linkElement = (evt != null) ? _aspxGetParentByTagName(_aspxGetEventSource(evt), "A") : null;
  if(linkElement == null || linkElement.href == __aspxAccessibilityEmptyUrl) {
   if(processingMode == "Client" && this.allowExpanding) {
    var expanded = this.groupsExpanding[groupIndex];
    this.SetExpandedInternal(groupIndex, !expanded);
    if(evt != null)
     aspxUpdateHoverState(evt);
   }
   else if(processingMode == "Server")
    this.SendPostBack("HEADERCLICK:" + groupIndex);
  }
 },
 OnHeaderMouseMove: function(groupIndex, evt) {
  if(ASPxClientNavBar.MouseOverActiveNavBar != this || ASPxClientNavBar.MouseOverActiveGroupIndex != groupIndex) {
   ASPxClientNavBar.MouseOverActiveNavBar = this;
   ASPxClientNavBar.MouseOverActiveGroupIndex = groupIndex;
   this.ClearMouseMoverTimer();
   this.mouseOverActionTimerID = _aspxSetTimeout("aspxNBHMMoveTimer(\"" + this.name + "\", " + groupIndex + ");", this.mouseOverActionDelay);
  }
 },
 OnHeaderMouseMoveTimer: function(groupIndex) {
  this.ClearMouseMoverTimer();
  if(ASPxClientNavBar.MouseOverActiveNavBar == this || ASPxClientNavBar.MouseOverActiveGroupIndex == groupIndex)
   this.OnHeaderClick(groupIndex, null)
 },
 ClearMouseMoverTimer: function() {
  if(this.mouseOverActionTimerID > -1) {
   _aspxClearTimer(this.mouseOverActionTimerID);
   this.mouseOverActionTimerID = -1;
  }
 },
 OnItemClick: function(groupIndex, itemIndex, evt) {
  var element = this.GetItemElement(groupIndex, itemIndex);
  var clickedLinkElement = _aspxGetParentByTagName(_aspxGetEventSource(evt), "A");
  var isLinkClicked = (clickedLinkElement != null && clickedLinkElement.href != __aspxAccessibilityEmptyUrl);
  var linkElement = (element != null) ? (element.tagName === "A" ? element : _aspxGetChildByTagName(element, "A", 0)) : null;
  if(linkElement != null && linkElement.href == __aspxAccessibilityEmptyUrl)
   linkElement = null;
  aspxClearHoverState();
  this.SetSelectedItemInternal(groupIndex, itemIndex);
  aspxUpdateHoverState(evt);
  this.DoItemClick(groupIndex, itemIndex, isLinkClicked || (linkElement != null), evt);
  if(!isLinkClicked && linkElement != null)
   _aspxNavigateByLink(linkElement);
 },
 OnCallback: function(result) {
  this.OnCallbackInternal(result.html, result.index, false);
 },
 OnCallbackError: function(result, data) {
  this.OnCallbackInternal(result, data, true);
 },
 OnCallbackInternal: function(html, index, isError) {
  this.SetCallbackContent(html, index, isError);
  _aspxArrayRemoveAt(this.groupsExpandingRequest, 0);
  if (this.enableCallbackAnimation)
   ASPxAnimationHelper.fadeIn(this.GetGroupContentElement(index), function(){ this.OnCallbackFinish(index, isError); }.aspxBind(this));
  else
   this.OnCallbackFinish(index, isError);
 },
 OnCallbackFinish: function(index, isError) {
  if(!isError) {
   this.ClearWrappedTextContainersCache();
   this.CorrectWrappedText(this.GetItemLinkElements, "Items");
   this.RaiseExpandedChanged(index);
  }
 },
 OnCallbackGeneralError: function(result) {
  var callbackGroupIndex = (this.groupsExpandingRequest.length > 0) ? this.groupsExpandingRequest[0] : 0;
  this.SetCallbackContent(result, callbackGroupIndex, true);
  _aspxArrayRemoveAt(this.groupsExpandingRequest, 0);
 },
 ShowLoadingPanelInGroup: function(groupIndex) {
  if(this.lpDelay > 0)
   _aspxSetTimeout(function() { this.ShowLoadingPanelInGroupCore(groupIndex); }.aspxBind(this), this.lpDelay); 
  else
   this.ShowLoadingPanelInGroupCore(groupIndex);
 },
 ShowLoadingPanelInGroupCore: function(groupIndex) {
  if(_aspxArrayIndexOf(this.groupsExpandingRequest, groupIndex) < 0) return;
  var element = this.GetGroupContentElement(groupIndex);
  this.CreateLoadingPanelInsideContainer(element);
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 SetCallbackContent: function(html, index, isError) {
  var replaceGroupElement = !isError;
  if(replaceGroupElement) {
   var groupElement = _aspxGetElementNodes(this.GetMainElement())[index];
   _aspxRemoveElement(this.GetGroupContentElement(index));
   _aspxSetInnerHtml(groupElement, groupElement.innerHTML + html);
   this.AssignGroupContentAttributes(this.GetGroupContentElement(index), index);
  }
  var element = this.GetGroupContentElement(index);
  if(element != null) {
   if(!replaceGroupElement)
    _aspxSetInnerHtml(element, html);
   if(!isError)
    element.loaded = true;
   element.loading = false;
  }
 },
 CreateGroups: function(groupsProperties) {
  for(var i = 0; i < groupsProperties.length; i++) {
   var groupName = groupsProperties[i][0] || "";
   var group = new ASPxClientNavBarGroup(this, i, groupName);
   if(_aspxIsExists(groupsProperties[i][1]))
    group.enabled = groupsProperties[i][1];
   if(_aspxIsExists(groupsProperties[i][2]))
    group.visible = groupsProperties[i][2];
   if(_aspxIsExists(groupsProperties[i][3]))
    group.clientVisible = groupsProperties[i][3];
   this.groups.push(group);
   group.CreateItems(groupsProperties[i][4]);
  }
 },
 RaiseItemClick: function(groupIndex, itemIndex, htmlEvent) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
  if(!this.ItemClick.IsEmpty()) {
   var htmlElement = this.GetItemElement(groupIndex, itemIndex);
   var args = new ASPxClientNavBarItemEventArgs(processOnServer, this.GetGroup(groupIndex).GetItem(itemIndex), htmlElement, htmlEvent);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseExpandedChanged: function(groupIndex) {
  if(!this.ExpandedChanged.IsEmpty()) {
   var args = new ASPxClientNavBarGroupEventArgs(this.GetGroup(groupIndex));
   this.ExpandedChanged.FireEvent(this, args);
  }
 },
 RaiseExpandedChanging: function(groupIndex) {
  var processingMode = this.autoPostBack ? "Server" : "Client";
  if(!this.ExpandedChanging.IsEmpty()) {
   var args = new ASPxClientNavBarGroupCancelEventArgs(processingMode == "Server", this.GetGroup(groupIndex));
   this.ExpandedChanging.FireEvent(this, args);
   if(args.cancel)
    processingMode = "Handled";
   else
    processingMode = args.processOnServer ? "Server" : "Client";
  }
  return processingMode;
 },
 RaiseHeaderClick: function(groupIndex, htmlEvent) {
  var processingMode = this.autoPostBack || this.IsServerEventAssigned("HeaderClick") ? "Server" : "Client";
  if(!this.HeaderClick.IsEmpty()) {
   var htmlElement = this.GetClickableGroupHeaderElement(groupIndex);
   var args = new ASPxClientNavBarGroupClickEventArgs(processingMode == "Server", this.GetGroup(groupIndex), htmlElement, htmlEvent);
   this.HeaderClick.FireEvent(this, args);
   if(args.cancel)
    processingMode = "Handled";
   else
    processingMode = args.processOnServer ? "Server" : "Client";
  }
  return processingMode;
 },
 SetEnabled: function(enabled) {
  for(var i = this.GetGroupCount() - 1; i >= 0; i--) {
   var group = this.GetGroup(i);
   for(var j = group.GetItemCount() - 1; j >= 0; j--) {
    var item = group.GetItem(j);
    item.SetEnabled(enabled);
   }
  }
 },
 GetGroupCount: function() {
  return this.groups.length;
 },
 GetGroup: function(index) {
  return (0 <= index && index < this.groups.length) ? this.groups[index] : null;
 },
 GetGroupByName: function(name) {
  for(var i = 0; i < this.groups.length; i++)
   if(this.groups[i].name == name) return this.groups[i];
  return null;
 },
 GetActiveGroup: function() {
  if(this.autoCollapse) {
   for(var i = 0; i < this.groups.length; i++) {
    if(this.groups[i].GetExpanded())
     return this.groups[i];
   }
  }
  return null;
 },
 SetActiveGroup: function(group) {
  if(this.autoCollapse && group != null)
   group.SetExpanded(true);
 },
 GetItemByName: function(name) {
  for(var i = 0; i < this.groups.length; i++) {
   var item = this.groups[i].GetItemByName(name);
   if(item != null) return item;
  }
  return null;
 },
 GetSelectedItem: function() {
  var indexPath = this.GetSelectedItemIndexPath();
  if(indexPath != "") {
   var groupIndex = this.GetGroupIndex(indexPath);
   var itemIndex = this.GetItemIndex(indexPath);
   if(groupIndex > -1 && itemIndex > -1)
    return this.GetGroup(groupIndex).GetItem(itemIndex);
  }
  return null;
 },
 SetSelectedItem: function(item) {
  var groupIndex = (item != null) ? item.group.index : -1;
  var itemIndex = (item != null) ? item.index : -1;
  aspxClearHoverState();
  this.SetSelectedItemInternal(groupIndex, itemIndex);
 },
 CollapseAll: function() {
  for(var i = 0; i < this.groupsExpanding.length; i++) {
   if(this.groupsExpanding[i])
    this.SetExpandedInternal(i, false);
  }
 },
 ExpandAll: function() {
  for(var i = 0; i < this.groupsExpanding.length; i++) {
   if(!this.groupsExpanding[i])
    this.SetExpandedInternal(i, true);
  }
 },
 ChangeItemElementsEnabledAttributes: function(groupIndex, itemIndex, method, styleMethod) {
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  var imageElement = this.GetItemImageElementByIndexPath(indexPath);
  if(imageElement) {
   method(imageElement, "onclick");
   styleMethod(imageElement, "cursor");
   var link = this.GetInternalHyperlinkElement(imageElement, 0);
   if(link != null) {
    method(link, "href");
    styleMethod(link, "cursor");
   }
  }
  var textElement = this.GetItemTextElementByIndexPath(indexPath);
  if(textElement) {
   method(textElement, "onclick");
   styleMethod(textElement, "cursor");
   var link = this.GetInternalHyperlinkElement(textElement, 0);
   if(link != null) {
    method(link, "href");
    styleMethod(link, "cursor");
    link = this.GetInternalHyperlinkElement(textElement, 1);
    if(link != null) {
     method(link, "href");
     styleMethod(link, "cursor");
    }
   }
  }
  var itemElement = this.GetItemElement(groupIndex, itemIndex);
  if(itemElement) {
   method(itemElement, "onclick");
   if(imageElement == null && textElement == null) {
    styleMethod(itemElement, "cursor");
    var link = this.GetInternalHyperlinkElement(itemElement, 0);
    if(link != null) {
     method(link, "href");
     styleMethod(link, "cursor");
    }
   }
  }
 },
 SetItemEnabled: function(groupIndex, itemIndex, enabled, initialization) {
  if(!this.groups[groupIndex].items[itemIndex].enabled) return;
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  if(!enabled) {
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.DeselectItem(indexPath);
  }
  if(!initialization || !enabled)
   this.ChangeItemEnabledStateItems(groupIndex, itemIndex, enabled);
  this.ChangeItemEnabledAttributes(groupIndex, itemIndex, enabled);
  if(enabled) {
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.SelectItem(indexPath);
  }
 },
 ChangeItemEnabledAttributes: function(groupIndex, itemIndex, enabled) {
  this.ChangeItemElementsEnabledAttributes(groupIndex, itemIndex, _aspxChangeAttributesMethod(enabled),
   _aspxChangeStyleAttributesMethod(enabled));
 },
 ChangeItemEnabledStateItems: function(groupIndex, itemIndex, enabled) {
  if(!this.IsStateControllerEnabled()) return;
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  var element = this.GetItemTextElementByIndexPath(indexPath);
  if(element == null)
   element = this.GetItemImageElementByIndexPath(indexPath);
  if(element == null)
   element = this.GetItemElement(groupIndex, itemIndex);
  if(element != null)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 GetItemImageUrl: function(groupIndex, itemIndex) {
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  var element = this.GetItemImageContainer(indexPath);
  if(element != null) {
   var img = _aspxGetChildByTagName(element, "IMG", 0);
   if(img != null)
    return img.src;
  }
  element = this.GetItemTextElementByIndexPath(indexPath);
  if(element != null) {
   var img = _aspxGetChildByTagName(element, "IMG", 0);
   if(img != null)
    return img.src;
  }
  return "";
 },
 SetItemImageUrl: function(groupIndex, itemIndex, url) {
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  var element = this.GetItemImageContainer(indexPath);
  if(element != null) {
   var img = _aspxGetChildByTagName(element, "IMG", 0);
   if(img != null)
    img.src = url;
  }
  element = this.GetItemTextElementByIndexPath(indexPath);
  if(element != null) {
   var itemImageElementID = this.name + this.GetItemImageID(indexPath);
   var img = _aspxGetChildById(element, itemImageElementID);
   if(img != null)
    img.src = url;
  }
 },
 GetItemImageContainer: function(indexPath) {
  return this.GetItemElementByIndexPath(indexPath);
 },
 GetItemNavigateUrl: function(groupIndex, itemIndex) {
  var element = this.GetItemElement(groupIndex, itemIndex);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.href;
  }
  return "";
 },
 SetItemNavigateUrl: function(groupIndex, itemIndex, url) {
  var element = this.GetItemElement(groupIndex, itemIndex);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null) {
    link.href = url;
    link = _aspxGetChildByTagName(element, "A", 1);
    if(link != null)
     link.href = url;
   }
  }
 },
 GetItemText: function(groupIndex, itemIndex) {
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  var element = this.GetItemTextElementByIndexPath(indexPath);
  if(element == null)
   element = this.GetItemElement(groupIndex, itemIndex);
  if(element != null) {
   var textNode = _aspxGetChildTextNode(element, 0);
   if(textNode != null)
    return textNode.nodeValue;
  }
  return "";
 },
 SetItemText: function(groupIndex, itemIndex, text) {
  var indexPath = this.GetIndexPath(groupIndex, itemIndex);
  var element = this.GetItemTextElementByIndexPath(indexPath);
  if(element == null)
   element = this.GetItemElement(groupIndex, itemIndex);
  if(element != null) {
   var textNode = _aspxGetChildTextNode(element, 0);
   if(textNode != null)
    textNode.nodeValue = text;
  }
 },
 SetItemVisible: function(groupIndex, itemIndex, visible, initialization) {
  if(!this.groups[groupIndex].items[itemIndex].visible) return;
  if(visible && initialization) return;
  var element = this.GetItemElement(groupIndex, itemIndex);
  if(element != null) _aspxSetElementDisplay(element, visible);
  this.SetItemSeparatorsVisiblility(groupIndex);
 },
 SetItemSeparatorsVisiblility: function(groupIndex) {
  var group = this.groups[groupIndex];
  for(var i = 0; i < group.items.length; i++) {
   var separatorVisible = group.items[i].GetVisible() && this.HasNextVisibleItems(group, i);
   var separatorElement = this.GetItemSeparatorElement(groupIndex, i);
   if(separatorElement != null) _aspxSetElementDisplay(separatorElement, separatorVisible);
  }
 },
 HasNextVisibleItems: function(group, index) {
  for(var i = index + 1; i < group.items.length; i++) {
   if(group.items[i].GetVisible())
    return true;
  }
  return false;
 },
 SetGroupVisible: function(groupIndex, visible, initialization) {
  if(!this.groups[groupIndex].visible) return;
  if(visible && initialization) return;
  var element = this.GetGroupRow(groupIndex);
  if(element != null) _aspxSetElementDisplay(element, visible);
  this.SetGroupSeparatorsVisiblility();
 },
 GetGroupText: function(groupIndex) {
  var groupRow = this.GetGroupRow(groupIndex);
  if(!groupRow)
   return;
  var groupTextElement = _aspxGetDescendantNodesByClassName(groupRow, this.GROUP_TEXT_CLASSNAME)[0];
  if(!groupTextElement)
   return;
  return _aspxGetInnerText(groupTextElement);
 },
 SetGroupText: function(groupIndex, text) {
  var groupRow = this.GetGroupRow(groupIndex);
  if(!groupRow)
   return;
  var groupTextElements = _aspxGetDescendantNodesByClassName(groupRow, this.GROUP_TEXT_CLASSNAME);
  for(var i = 0; i < groupTextElements.length; i++) {
   var textNode = _aspxGetChildTextNode(groupTextElements[i], 0);
   if(textNode != null)
    textNode.nodeValue = text;
  }
 }, 
 SetGroupSeparatorsVisiblility: function() {
  for(var i = 0; i < this.groups.length; i++) {
   var separatorVisible = this.groups[i].GetVisible() && this.HasNextVisibleGroups(i);
   var separatorElement = this.GetGroupSeparatorRow(i);
   if(separatorElement != null) _aspxSetElementDisplay(separatorElement, separatorVisible);
  }
 },
 HasNextVisibleGroups: function(index) {
  for(var i = index + 1; i < this.groups.length; i++) {
   if(this.groups[i].GetVisible())
    return true;
  }
  return false;
 }
});
ASPxClientNavBar.Cast = ASPxClientControl.Cast;
ASPxClientNavBarGroup = _aspxCreateClass(null, {
 constructor: function(navBar, index, name){
  this.navBar = navBar;
  this.index = index;
  this.name = name;
  this.enabled = true;
  this.visible = true;
  this.clientVisible = true;
  this.items = []; 
 },
 CreateItems: function(itemsProperties){
  for(var i = 0; i < itemsProperties.length; i ++){
   var itemName = itemsProperties[i][0] || "";
   var item = new ASPxClientNavBarItem(this.navBar, this, i, itemName);
   if(_aspxIsExists(itemsProperties[i][1]))
    item.enabled = itemsProperties[i][1];
   if(_aspxIsExists(itemsProperties[i][2]))    
    item.clientEnabled = itemsProperties[i][2];
   if(_aspxIsExists(itemsProperties[i][3]))
    item.visible = itemsProperties[i][3];
   if(_aspxIsExists(itemsProperties[i][4]))
    item.clientVisible = itemsProperties[i][4];
   this.items.push(item);
  }
 },
 GetEnabled: function(){
  return this.enabled;
 },
 GetExpanded: function(){
  return this.navBar.groupsExpanding[this.index];
 },
 SetExpanded: function(value){
  this.navBar.SetExpandedInternal(this.index, value);
 },
 GetVisible: function(){
  return this.visible && this.clientVisible;
 },
 GetText: function() {
  return this.navBar.GetGroupText(this.index);
 },
 SetText: function(text) {
  this.navBar.SetGroupText(this.index, text);
 },
 SetVisible: function(value){
  if (this.clientVisible != value) {
   this.clientVisible = value;
   this.navBar.SetGroupVisible(this.index, value, false);
  }
 },
 GetItemCount: function(groupIndex){
  return this.items.length;
 },
 GetItem: function(index){
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 GetItemByName: function(name){
  for(var i = 0; i < this.items.length; i ++)
   if(this.items[i].name == name) return this.items[i];
  return null;
 }
});
ASPxClientNavBarItem = _aspxCreateClass(null, {
 constructor: function(navBar, group, index, name){
  this.navBar = navBar;
  this.group = group;
  this.index = index;
  this.name = name;
  this.enabled = true;
  this.clientEnabled = true;
  this.visible = true;
  this.clientVisible = true;
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(value){
  if (this.clientEnabled != value) {
   this.clientEnabled = value;
   this.navBar.SetItemEnabled(this.group.index, this.index, value, false);
  }
 },
 GetImageUrl: function(){
  return this.navBar.GetItemImageUrl(this.group.index, this.index);
 },
 SetImageUrl: function(value){
  this.navBar.SetItemImageUrl(this.group.index, this.index, value);
 },
 GetNavigateUrl: function(){
  return this.navBar.GetItemNavigateUrl(this.group.index, this.index);
 },
 SetNavigateUrl: function(value){
  this.navBar.SetItemNavigateUrl(this.group.index, this.index, value);
 },
 GetText: function(){
  return this.navBar.GetItemText(this.group.index, this.index);
 },
 SetText: function(value){
  this.navBar.SetItemText(this.group.index, this.index, value);
 },
 GetVisible: function(){
  return this.visible && this.clientVisible;
 },
 SetVisible: function(value){
  if (this.clientVisible != value) {
   this.clientVisible = value;
   this.navBar.SetItemVisible(this.group.index, this.index, value, false);
  }
 } 
});
ASPxClientNavBarItemEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, item, htmlElement, htmlEvent){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientNavBarGroupEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(group){
  this.group = group;
 }
});
ASPxClientNavBarGroupCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function(processOnServer, group){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.group = group;
 }
});
ASPxClientNavBarGroupClickEventArgs = _aspxCreateClass(ASPxClientNavBarGroupCancelEventArgs, {
 constructor: function(processOnServer, group, htmlElement, htmlEvent){
  this.constructor.prototype.constructor.call(this, processOnServer, group);
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;  
 }
});
function aspxNBHClick(evt, name, groupIndex){
 var nb = aspxGetControlCollection().Get(name);
 if(nb != null) nb.OnHeaderClick(groupIndex, evt);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
function aspxNBHMMove(evt, name, groupIndex){
 var nb = aspxGetControlCollection().Get(name);
 if(nb != null) nb.OnHeaderMouseMove(groupIndex, evt);
}
function aspxNBHMMoveTimer(name, groupIndex){
 var nb = aspxGetControlCollection().Get(name);
 if(nb != null) nb.OnHeaderMouseMoveTimer(groupIndex);
}
function aspxNBIClick(evt, name, groupIndex, itemIndex){
 var nb = aspxGetControlCollection().Get(name);
 if(nb != null) nb.OnItemClick(groupIndex, itemIndex, evt);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
ASPxClientNavBar.MouseOverActiveNavBar = null;
ASPxClientNavBar.MouseOverActiveGroupIndex = -1;
ASPxClientNavBar.DocMouseMoveHandler = function(evt) {
 if(ASPxClientNavBar.MouseOverActiveNavBar != null && ASPxClientNavBar.MouseOverActiveGroupIndex != -1){
  var srcElement = _aspxGetEventSource(evt);
  var headerElement = ASPxClientNavBar.MouseOverActiveNavBar.GetGroupHeaderExpandedElement(ASPxClientNavBar.MouseOverActiveGroupIndex);
  if(headerElement == null || (srcElement != headerElement && !_aspxGetIsParent(headerElement, srcElement))){
   headerElement = ASPxClientNavBar.MouseOverActiveNavBar.GetGroupHeaderCollapsedElement(ASPxClientNavBar.MouseOverActiveGroupIndex);
   if(headerElement == null || (srcElement != headerElement && !_aspxGetIsParent(headerElement, srcElement))){
    ASPxClientNavBar.MouseOverActiveNavBar = null;
    ASPxClientNavBar.MouseOverActiveGroupIndex = -1;
   }
  }
 }
};
_aspxAttachEventToDocument("mousemove", ASPxClientNavBar.DocMouseMoveHandler);
MVCxClientNavBar = _aspxCreateClass(ASPxClientNavBar, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  ASPxClientNavBar.prototype.InlineInitialize.call(this);
 },
 GetGroupsItemsGeneralInfoInputElement: function() {
  return _aspxGetElementById(this.name + "GIGI");
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  this.callbackCustomArgs = args.customArgs;
 },
 RaiseEndCallback: function() {
  ASPxClientNavBar.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientNavBar.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 GetCallbackParams: function(){
  var params = { };
  var postDataElements = [ 
   this.GetGroupStateInputElement(), 
   this.GetSelectedItemInputElement(), 
   this.GetGroupsItemsGeneralInfoInputElement() 
  ];
  $.each(postDataElements, function(i, input){
   if(_aspxIsExistsElement(input))
    params[input.name] = input.value;
  });
  return params;
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientNavBar.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.html = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientNavBar.prototype.EvalCallbackResult.call(this, resultString);
 }
});

(function() {
 var constants = {
  TABCONTROL_POSTFIX: "_TC",
  GROUPCOLLAPSEPOPUP_POSTFIX: "_GPC",
  TABMINIMIZEPOPUP_POSTFIX: "_MPC",
  TAB_CONTENTCONTROL_POSTFIX: "_T",
  TABSCONTAINER_POSTFIX: "_RTC",
  GROUP_POSTFIX: "G",
  POPUP_MENU_POSTFIX: "_PM",
  POPUP_CONTROL_POSTFIX: "_IPC",
  COMBOBOX_POSTFIX: "_CMB",
  CHECKBOX_POSTFIX: "_CB",
  SPINEDIT_POSTFIX: "_SE",
  TEXTBOX_POSTFIX: "_TB",
  DATEEDIT_POSTFIX: "_DE",
  STATEINPUT_POSTFIX: "_State",
  MINIMIZEBUTTON_POSTFIX: "_TPTCL_MinBtn",
  INACTIVETAB_NAME: "DXR_INACTIVE",
  FILETAB_NAME: "DXR_FILE",
  COLORTABLE_POSTFIX: "_IPC_CT",
  COLORINDICATOR_POSTFIX: "_CI",
  MENU_INDEXPATH_SEPARATOR: "i",
  CLASSNAMES: {
   LARGEITEM: "dxr-largeSize",
   ITEMLABEL: "dxr-label",
   ITEMPOPOUT: "dxr-popOut",
   ITEMDDIMAGECONTAINER: "dxr-ddImageContainer",
   GROUPLIST: "dxr-groupList",
   BLOCK: "dxr-block",
   BLOCK_REGULAR_ITEMS: "dxr-blRegItems",
   BLOCK_REGULAR_ITEMS_REDUCED: "dxr-blRegItems dxr-blReduced",
   BLOCK_LARGE_ITEMS: "dxr-blLrgItems",
   BLOCK_HORIZONTAL_ITEMS: "dxr-blHorItems",
   BLOCK_HORIZONTAL_ITEMS_REDUCED: "dxr-blHorItems dxr-blReduced",
   GROUP_COLLAPSED: "dxr-group dxr-grCollapsed",
   GROUP_EXPAND: "dxr-grExpBtn",
   GROUP: "dxr-group",
   GROUP_LABEL: "dxr-groupLabel",
   GROUP_CONTENT: "dxr-groupContent",
   BUTTONITEM: "dxr-buttonItem",
   ITEM: "dxr-item",
   IMAGE16: "dxr-img16",
   IMAGE32: "dxr-img32",
   LABELTEXT: "dxr-lblText",
   LABELCONTENT: "dxr-lblContent",
   TABWRAPPER: "dxr-tabWrapper"
  },
  ITEMTYPES: {
   BUTTON: 0,
   TEMPLATE: 1,
   DROPDOWNSPLIT: 2,
   DROPDOWNMENU: 3,
   TOGGLE: 4,
   OPTION: 5,
   SPINEDIT: 6,
   COLOR: 7,
   TEXTBOX: 8,
   DATEEDIT: 9,
   COMBOBOX: 10,
   CHECKBOX: 11
  }
 };
 ASPxClientRibbonCollection = {
  ribbons: {},
  register: function(ribbon) {
   ASPxClientRibbonCollection.ribbons[ribbon.name] = ribbon;
  },
  find: function(id) {
   var ribbons = ASPxClientRibbonCollection.ribbons;
   for(var name in ribbons) {
    if(!ribbons.hasOwnProperty(name)) continue;
    if(id.indexOf(name) == 0)
     return ASPxClientRibbonCollection.get(name);
   }
   return null;
  },
  get: function(name) {
   return ASPxClientRibbonCollection.ribbons[name];
  },
  onMouseDown: function(evt) {
   for(var name in ASPxClientRibbonCollection.ribbons) {
    if(!ASPxClientRibbonCollection.ribbons.hasOwnProperty(name)) continue;
    var ribbon = ASPxClientRibbonCollection.get(name);
    if(_aspxIsExists(ribbon.GetMainElement()))
     ribbon.onMouseDown(evt);
   }
  }
 };
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, ASPxClientRibbonCollection.onMouseDown);
 var ASPxClientRibbon = _aspxCreateClass(ASPxClientControl, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.activeTab = null;
   this.activeTabIndex = 0;
   this.tabs = [];
   this.items = {};
   this.CommandExecuted = new ASPxClientEvent();
   this.ActiveTabChanged = new ASPxClientEvent();
   this.MinimizationStateChanged = new ASPxClientEvent();
   this.FileTabClicked = new ASPxClientEvent();
   this.currentDropDownItem = null;
   this.currentGroupInPopup = null;
   ASPxClientRibbonCollection.register(this);
   this.adjustLocked = false;
   this.minimized = false;
   this.showFileTab = true;
   this.allowMinimize = true;
   this.showTabs = true;
   this.clientState = new ASPxClientRibbonClientState(this);
  },
  SetEnabled: function(enabled) {
   if(!this.enabled) return;
   this.setEnabledCore(enabled, false);
  },
  GetTab: function(index) {
   return this.tabs[index] || null;
  },
  GetTabByName: function(name) {
   for(var tab, i = 0; tab = this.tabs[i]; i++) {
    if(tab.name == name)
     return tab;
   }
   return null;
  },
  GetTabCount: function() {
   return this.tabs.length;
  },
  GetActiveTab: function() {
   return this.activeTab;
  },
  SetActiveTab: function(tab) {
   this.setActiveTabControlTab(tab.index);
  },
  SetActiveTabIndex: function(index) {
   this.setActiveTabControlTab(index);
  },
  GetItemByName: function(name) {
   var items = this.items;
   var subItem = null;
   for(var itemID in items) {
    if(!items.hasOwnProperty(itemID)) continue;
    if(items[itemID].name == name)
     return items[itemID];
    if(items[itemID].getItemByName && !subItem)
     subItem = items[itemID].getItemByName(name);
   }
   return subItem;
  },
  GetItemValueByName: function(name) {
   var item = this.GetItemByName(name);
   if(item)
    return item.GetValue();
  },
  SetItemValueByName: function(name, value) {
   var item = this.GetItemByName(name);
   if(item)
    item.SetValue(value);
  },
  SetMinimized: function(minimized) {
   this.setMininizedCore(minimized, true);
  },
  GetMinimized: function() {
   return this.minimized;
  },
  InlineInitialize: function() {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   var mainElement = this.GetMainElement(),
    controlWidth = mainElement.offsetWidth;
   this.setActiveTabContainer(this.activeTabIndex);
   if(this.showTabs)
    this.setActiveTabControlTab(this.activeTabIndex);
   var minimizeButton = this.getMinimizeButton();
   if(minimizeButton)
    _aspxAttachEventToElement(minimizeButton, "click", this.onMinimizeButtonClick.aspxBind(this));
   if(this.widthValueSetInPercentage)
    this.initWidth = mainElement.style.width;
   if(controlWidth > 0) {
    var innerWidth = controlWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
    _aspxSetOffsetWidth(this.activeTab.getTabContentElement(), innerWidth);
   }
  },
  Initialize: function() {
   this.constructor.prototype.Initialize.call(this);
   this.setEnabledCore(this.enabled && this.clientEnabled, true);
   this.activeTab.initialize();
  },
  AfterInitialize: function() {
   this.constructor.prototype.AfterInitialize.call(this);
   setTimeout(function() { this.activeTab.applyModification(); }.aspxBind(this), 100);
  },
  AdjustControlCore: function() {
   this.updateLayout(true);
   if(this.showTabs)
    this.getTabControl().AdjustControl(true);
  },
  OnBrowserWindowResize: function(evt) {
   if(this.minimized)
    this.hideTabMinimizePopup();
   this.updateLayout();
  },
  SetWidth: function(width) {
   this.constructor.prototype.SetWidth.call(this, width);
   this.updateLayout(false, true);
   if(this.showTabs)
    this.getTabControl().AdjustControl(true);
  },
  updateLayout: function(adjustItems, forceUpdating) {
   if(forceUpdating || !this.adjustLocked) {
    if(forceUpdating || this.widthValueSetInPercentage)
     this.updatePercentageWidth();
    this.hideAllPopups(true, true);
    if(forceUpdating || !this.widthValueSetInPercentage)
     this.activeTab.applyModification();
    if(adjustItems)
     this.activeTab.adjustItems();
   }
  },
  updatePercentageWidth: function() {
   var tabContent = this.activeTab.getTabContentElement();
   var tabWrapper = this.activeTab.getWrapperElement();
   if(this.resizingTimer === undefined) {
    tabContent.style.position = "relative";
    tabWrapper.style.position = "absolute";
    tabContent.style.width = "auto";
    this.resizingTimer = setTimeout(function() { this.updatePercentageWidthCore() }.aspxBind(this), 100);
   }
  },
  updatePercentageWidthCore: function() {
   var tabContent = this.activeTab.getTabContentElement();
   var tabWrapper = this.activeTab.getWrapperElement();
   if(this.showTabs)
    this.getTabControl().GetMainElement().style.display = "none";
   _aspxSetOffsetWidth(tabContent, tabContent.offsetWidth);
   tabWrapper.style.position = "static";
   tabContent.style.position = "static";
   this.activeTab.applyModification();
   if(this.showTabs)
    this.getTabControl().GetMainElement().style.display = "block";
   this.resizingTimer = undefined;
  },
  applyModifications: function() {
   if(!this.modificationsTimer) {
    this.modificationsTimer = _aspxSetTimeout(function() {
     this.activeTab.applyModification();
     this.modificationsTimer = undefined;
    }.aspxBind(this), 200);
   }
  },
  loadItems: function(tabsInfo) {
   for(var i = 0, tabInfo; tabInfo = tabsInfo[i]; i++) {
    var tab = new ASPxClientRibbonTab(this, i, tabInfo.n);
    this.tabs.push(tab);
    if(!tab.GetVisible())
     continue;
    for(var j = 0, groupInfo; groupInfo = tabInfo.g[j]; j++) {
     var group = new ASPxClientRibbonGroup(this, tab, j, groupInfo.n);
     tab.groups.push(group);
     if(!group.GetVisible())
      continue;
     for(var k = 0, itemInfo; itemInfo = groupInfo.i[k]; k++) {
      var item = ASPxClientRibbonItem.create(this, group, k, itemInfo.c, itemInfo.t, itemInfo.sg, itemInfo);
      group.items.push(item);
      this.items[getItemID(item, true)] = item;
     }
    }
   }
  },
  hideAllPopups: function(lockAdjust, skipTempTab) {
   lockAdjust = lockAdjust === undefined ? true : lockAdjust;
   if(lockAdjust)
    this.adjustLocked = true;
   this.hideGroupCollapsePopup(false, false);
   if(this.lastShownPopup && this.lastShownPopup.IsVisible())
    this.lastShownPopup.Hide();
   if(lockAdjust)
    this.adjustLocked = false;
   if(!skipTempTab)
    this.hideTabMinimizePopup();
  },
  onTabChanged: function(tcTab) {
   if(tcTab.name == constants.INACTIVETAB_NAME) return;
   var actTabIndex = this.activeTab.index;
   var newTabIndex = this.getRibbonTabIndex(tcTab.index);
   this.setActiveTabContainer(newTabIndex, actTabIndex != newTabIndex);
   if(this.widthValueSetInPercentage)
    this.updatePercentageWidth();
  },
  onTabClick: function(tcTabIndex, evt) {
   if(evt.tab.name == constants.FILETAB_NAME) {
    evt.cancel = true;
    this.raiseEvent("FileTabClicked", new ASPxClientEventArgs());
   }
   var tabIndex = this.getRibbonTabIndex(tcTabIndex);
   if(this.minimized && tabIndex > -1)
    evt.cancel = true;
  },
  onTabElementMouseDown: function(tab) {
   if(this.minimized) {
    setTimeout(function() {
     if(this.currentTemporaryTabPageIndex == tab.index)
      this.hideTabMinimizePopup();
     else
      this.showTabMinimizePopup(tab.index);
    }.aspxBind(this), 0);
   }
  },
  onTabElementDblClick: function(tab) {
   if(!this.GetEnabled()) return;
   this.setMininizedCore(!this.minimized);
   if(this.minimized)
    aspxGetStateController().SetCurrentHoverElementBySrcElement(this.getTabControl().GetTabElement(this.getTabControlTabIndex(tab.index), false));
  },
  onEditorValueChanged: function(itemID) {
   this.items[itemID].onValueChanged();
  },
  onPopupMenuItemClick: function(itemID, menuItem) {
   this.items[itemID].onMenuItemClick(menuItem);
  },
  onPopupMenuPopUp: function(itemID, popup) {
   this.onItemPopupPopUp(itemID, popup);
  },
  onPopupMenuCloseUp: function(itemID, popup) {
   this.onItemPopupCloseUp(itemID, popup);
  },
  onItemPopupPopUp: function(itemID, popup) {
   this.currentDropDownItem = this.items[itemID];
   this.lastShownPopup = popup;
  },
  onItemPopupCloseUp: function(itemID, popup) {
   var element = this.currentDropDownItem.getElement();
   if(!!this.currentDropDownItem.hoverItem) {
    this.currentDropDownItem.hoverItem.Cancel(element);
    this.currentDropDownItem.hoverItem = null;
   }
   this.currentDropDownItem = null;
   setTimeout(function() {
    if(this.lastShownPopup == popup)
     this.lastShownPopup = undefined;
   }.aspxBind(this), 100);
  },
  onMinimizeButtonClick: function() {
   if(this.GetEnabled())
    this.setMininizedCore(!this.minimized);
  },
  onColorButtonPopupPopUp: function(itemID, popup) {
   this.items[itemID].onPopupPopUp();
   this.onItemPopupPopUp(itemID, popup);
  },
  onColorTableColorChanged: function(itemID) {
   this.items[itemID].onColorChanged();
  },
  onCNCCustomColorTableUpdated: function(itemID) {
   this.getClientState().updateField(itemID, this.items[itemID].getState());
  },
  onCNCShouldBeClosed: function(itemID) {
   this.items[itemID].onCNCShouldBeClosed();
  },
  onMouseDown: function(evt) {
   if(!this.enabled) return;
   var source = _aspxGetEventSource(evt);
   if(!_aspxGetIsParent(this.GetMainElement(), source))
    this.hideAllPopups();
   else if(this.currentTemporaryTabPageIndex > -1 && !_aspxGetIsParent(this.activeTab.getTabContentElement(), source)) {
    if((!this.currentGroupInPopup || this.currentGroupInPopup.tab != this.activeTab) && (!this.currentDropDownItem || this.currentDropDownItem.group.tab != this.activeTab))
     this.hideTabMinimizePopup();
   }
   if(this.currentGroupInPopup && !_aspxGetIsParent(this.getGroupCollapsePopup().GetContentContainer(-1), source)) {
    var isExpandButtonClick = _aspxGetIsParent(this.currentGroupInPopup.getExpandButtonElement(), source);
    var isInGroupPopupItemClick = this.currentDropDownItem && _aspxGetIsParent(this.currentDropDownItem.getPopupElement(), source);
    if(!isExpandButtonClick && !isInGroupPopupItemClick)
     this.hideGroupCollapsePopup();
   }
  },
  onExecCommand: function(item, parameter) {
   if(!item.getEnabledCore()) return;
   this.hideGroupCollapsePopup();
   this.hideTabMinimizePopup();
   this.raiseEvent("CommandExecuted", new ASPxClientRibbonCommandExecutedEventArgs(item, parameter));
  },
  raiseEvent: function(eventName, args) {
   var evt = this[eventName];
   if(!evt.IsEmpty())
    evt.FireEvent(this, args);
   return args;
  },
  setEnabledCore: function(enabled, initialization) {
   this.constructor.prototype.SetEnabled.call(this, enabled);
   var clientEnabled = this.clientEnabled;
   for(var itemID in this.items) {
    if(!this.items.hasOwnProperty(itemID)) continue;
    var item = this.items[itemID];
    item.setEnabledCore(clientEnabled, initialization);
   }
   for(var group, i = 0; group = this.activeTab.groups[i]; i++) {
    var eb = group.getExpandButtonElement();
    if(eb)
     aspxGetStateController().SetElementEnabled(eb, clientEnabled);
   }
   var minimizeButton = this.getMinimizeButton();
   if(minimizeButton)
    aspxGetStateController().SetElementEnabled(minimizeButton, clientEnabled);
  },
  setMininizedCore: function(minimized, skipEvent) {
   if(!this.allowMinimize || this.minimized == minimized) return;
   this.hideTabMinimizePopup();
   this.minimized = minimized;
   this.adjustLocked = true;
   if(this.minimized) {
    this.activeTab.hideContainer();
    this.switchInactiveTab(false);
    aspxGetStateController().SelectElementBySrcElement(this.getMinimizeButton());
   }
   else {
    this.activeTab.showContainer();
    this.switchInactiveTab(true);
    aspxGetStateController().DeselectElementBySrcElement(this.getMinimizeButton());
   }
   this.adjustLocked = false;
   this.AdjustControlCore();
   if(!skipEvent)
    this.raiseEvent("MinimizationStateChanged", new ASPxClientRibbonMinimizationStateEventArgs(minimized ? ASPxClientRibbonState.Minimized : ASPxClientRibbonState.Normal));
  },
  showTabMinimizePopup: function(index) {
   if(!this.minimized) return;
   if(this.lastShownTemporaryTabPageIndex == index) return;
   this.currentTemporaryTabPageIndex = index;
   this.lastShownTemporaryTabPageIndex = index;
   var pc = this.getTabMinimizePopup();
   var cc = pc.GetContentContainer(-1);
   var tab = this.tabs[index];
   if(cc.childNodes.length)
    cc.innerHTML = "";
   if(!tab.initialized)
    tab.initialize(true);
   var tcMainElement = this.getTabControl().GetMainElement();
   var tabContainer = tab.getTabContentElement();
   cc.appendChild(tabContainer);
   var tcMainElementOffsetWidth = tcMainElement.offsetWidth;
   pc.SetHeight(0);
   pc.SetWidth(tcMainElementOffsetWidth);
   _aspxSetOffsetWidth(tabContainer, tcMainElementOffsetWidth);
   tab.showContainer();
   if(this.widthValueSetInPercentage)
    this.updatePercentageWidth();
   pc.ShowAtElement(tcMainElement);
   var tabChanged = this.activeTab !== tab;
   this.activeTab = tab;
   this.raiseEvent("MinimizationStateChanged", new ASPxClientRibbonMinimizationStateEventArgs(ASPxClientRibbonState.TemporaryShown));
   if(tabChanged)
    this.raiseEvent("ActiveTabChanged", new ASPxClientRibbonTabEventArgs(this.activeTab));
  },
  hideTabMinimizePopup: function() {
   if(this.getTabMinimizePopup().IsVisible() || this.activeTab.getTabContentElement().parentNode != this.getTabsContainer())
    this.hideTabMinimizePopupCore();
  },
  hideTabMinimizePopupCore: function() {
   this.getTabMinimizePopup().Hide();
   this.activeTab.hideContainer();
   this.getTabsContainer().appendChild(this.activeTab.getTabContentElement());
   if(this.minimized)
    this.switchInactiveTab(false);
   var tabIndex = this.currentTemporaryTabPageIndex;
   if(tabIndex > -1) {
    var tabElement = this.getTabControl().GetTabElement(this.getTabControlTabIndex(tabIndex));
    if(tabElement.hoverItem) {
     tabElement.hoverItem.Cancel(tabElement);
     tabElement.hoverItem = null;
    }
    this.currentTemporaryTabPageIndex = -1;
    setTimeout(function() {
     if(this.lastShownTemporaryTabPageIndex == tabIndex)
      this.lastShownTemporaryTabPageIndex = -1;
    }.aspxBind(this), 100);
   }
   this.raiseEvent("MinimizationStateChanged", new ASPxClientRibbonMinimizationStateEventArgs(ASPxClientRibbonState.Minimized));
  },
  setActiveTabContainer: function(index, raiseEvent) {
   if(index >= this.GetTabCount())
    index = this.GetTabCount() - 1;
   if(index < 0)
    index = 0;
   var tab = this.tabs[index];
   if(!this.minimized) {
    if(this.activeTab)
     this.activeTab.hideContainer();
    if(!this.minimized)
     tab.showContainer();
   }
   this.activeTab = tab;
   this.activeTabIndex = index;
   this.getClientState().updateField("ActiveTabIndex", this.activeTabIndex);
   if(raiseEvent)
    this.raiseEvent("ActiveTabChanged", new ASPxClientRibbonTabEventArgs(this.activeTab));
  },
  showGroupCollapsePopup: function(group) {
   this.adjustLocked = true;
   if(this.currentGroupInPopup) {
    if(this.currentGroupInPopup != group)
     this.hideGroupCollapsePopup();
    else {
     this.adjustLocked = false;
     return;
    }
   }
   var pc = this.getGroupCollapsePopup();
   var cc = pc.GetContentContainer(-1);
   if(cc.childNodes.length > 0)
    cc.innerHTML = "";
   var groupSubElements = group.getSubElements();
   for(var se, i = 0; se = groupSubElements[i]; i++) {
    cc.appendChild(se);
    se.style.width = (group.initWidth + 1) + "px";
   }
   this.activeTab.rollbackGroupModifications(group);
   setTimeout(function() {
    pc.SetWidth(1);
    pc.SetHeight(1);
    pc.ShowAtElement(group.getExpandButtonElement());
   }.aspxBind(this), 0);
   this.currentGroupInPopup = group;
   this.adjustLocked = false;
  },
  hideGroupCollapsePopup: function(skipHide, lockAdjust) {
   lockAdjust = lockAdjust === undefined ? true : lockAdjust;
   if(lockAdjust)
    this.adjustLocked = true;
   var pc = this.getGroupCollapsePopup();
   if(!pc) 
    return;
   if(this.enabled && !skipHide)
    pc.Hide();
   if(!this.currentGroupInPopup) {
    if(lockAdjust)
     this.adjustLocked = false;
    return;
   }
   var element = this.currentGroupInPopup.getExpandButtonElement();
   if(element.hoverItem) {
    element.hoverItem.Cancel(element);
    element.hoverItem = null;
   }
   this.activeTab.restoreGroupModifications();
   var cc = pc.GetContentContainer(-1);
   var groupSubElements = this.currentGroupInPopup.getSubElements();
   var groupElement = this.currentGroupInPopup.getElement();
   for(var i = groupSubElements.length - 1; i > -1; i--) {
    var se = groupSubElements[i];
    se.style.width = "";
    groupElement.insertBefore(se, groupElement.firstChild);
   }
   if(lockAdjust)
    this.adjustLocked = false;
   this.currentGroupInPopup = undefined;
  },
  switchInactiveTab: function(activate) {
   this.setActiveTabControlTab(activate ? this.activeTab.index : -1);
  },
  getTabControl: function() {
   return aspxGetControlCollection().Get(this.name + constants.TABCONTROL_POSTFIX);
  },
  getGroupCollapsePopup: function() {
   return aspxGetControlCollection().Get(this.name + constants.GROUPCOLLAPSEPOPUP_POSTFIX);
  },
  getTabMinimizePopup: function() {
   return aspxGetControlCollection().Get(this.name + constants.TABMINIMIZEPOPUP_POSTFIX);
  },
  getTabsContainer: function() {
   return document.getElementById(this.name + constants.TABSCONTAINER_POSTFIX);
  },
  getMinimizeButton: function() {
   return document.getElementById(this.name + constants.TABCONTROL_POSTFIX + constants.MINIMIZEBUTTON_POSTFIX);
  },
  getStateInput: function() {
   return document.getElementById(this.name + constants.STATEINPUT_POSTFIX);
  },
  getClientState: function() {
   return this.clientState;
  },
  getTabControlTab: function(index) {
   var tcTabIndex = this.getTabControlTabIndex(index);
   return this.getTabControl().GetTab(tcTabIndex);
  },
  setActiveTabControlTab: function(index) {
   if(this.showTabs) {
    if(this.minimized && index > -1) {
     var tc = this.getTabControl();
     if(this.currentTemporaryTabPageIndex == index) {
      this.hideTabMinimizePopup();
      tc.SetActiveTab(tc.GetTabByName(constants.INACTIVETAB_NAME));
     }
     else {
      this.showTabMinimizePopup(index);
      tc.SetActiveTabIndex(this.getTabControlTabIndex(index));
     }
    }
    else {
     var tc = this.getTabControl();
     if(index === -1)
      tc.SetActiveTab(tc.GetTabByName(constants.INACTIVETAB_NAME));
     else
      tc.SetActiveTabIndex(this.getTabControlTabIndex(index));
    }
   }
   else if(index >= 0)
    this.setActiveTabContainer(index, index != this.activeTab.index);
  },
  getActiveTabControlTab: function() {
   return this.getTabControl().GetActiveTab();
  },
  getTabControlTabIndex: function(rTabIndex) {
   return this.showFileTab ? (rTabIndex + 1) : rTabIndex;
  },
  getRibbonTabIndex: function(tcTabIndex) {
   return this.showFileTab ? (tcTabIndex - 1) : tcTabIndex;
  }
 });
 var ASPxClientRibbonClientState = _aspxCreateClass(null, {
  constructor: function(ribbon) {
   this.ribbon = ribbon;
   this.load();
  },
  load: function() {
   var stateStr = this.getStateString();
   this.state = stateStr
    ? eval("(" + stateStr + ")")
    : {};
  },
  save: function() {
   var jsonState = _aspxToJson(this.state);
   this.ribbon.getStateInput().value = jsonState;
   if(this.ribbon.cookieName && this.ribbon.cookieName != "") {
    _aspxDelCookie(this.ribbon.cookieName);
    _aspxSetCookie(this.ribbon.cookieName, jsonState);
   }
  },
  getStateString: function() {
   return this.ribbon.getStateInput().value;
  },
  updateField: function(key, value) {
   this.state[key] = value;
   this.save();
  }
 });
 var ASPxClientRibbonTab = _aspxCreateClass(null, {
  constructor: function(ribbon, index, name) {
   this.ribbon = ribbon;
   this.index = index;
   this.name = name || "";
   this.groups = [];
   this.tabElement = null;
   this.listElement = null;
   this.listWidth = -1;
   this.width = -1;
   this.height = -1;
   this.initialized = false;
   this.modifications = [];
   this.activeModificationIndex = -1;
   this.initializeHandlers();
  },
  GetText: function() {
   return this.ribbon.showTabs ? this.getTabControlTab().GetText() : "";
  },
  SetEnabled: function(enabled) {
   if(this.ribbon.showTabs)
    this.getTabControlTab().SetEnabled(enabled);
  },
  GetEnabled: function() {
   if(this.ribbon.showTabs)
    return this.getTabControlTab().GetEnabled();
   return true;
  },
  GetVisible: function() {
   return !!this.getTabContentElement();
  },
  initialize: function(forced) {
   if(this.initialized) return;
   var tabContentElement = this.getTabContentElement();
   var parent = tabContentElement.parentNode;
   if(tabContentElement.offsetWidth == 0 && forced) {
    _aspxChangeStyleAttribute(tabContentElement, "position", "absolute");
    _aspxChangeStyleAttribute(tabContentElement, "top", "-10000px");
    _aspxChangeStyleAttribute(tabContentElement, "left", "-10000px");
    _aspxChangeStyleAttribute(tabContentElement, "display", "block");
    this.ribbon.GetMainElement().appendChild(tabContentElement);
   }
   if(tabContentElement.offsetWidth > 0) {
    var groups = this.groups;
    for(var group, i = groups.length - 1; group = groups[i]; i--) {
     group.initialize();
    }
    this.calculateModifications();
    this.initialized = true;
    this.applyModification();
    this.height = this.getListElement().offsetHeight;
    this.listWidth = this.getListElement().offsetWidth;
   }
   if(tabContentElement.parentNode != parent) {
    _aspxRestoreStyleAttribute(tabContentElement, "display");
    _aspxRestoreStyleAttribute(tabContentElement, "position");
    _aspxRestoreStyleAttribute(tabContentElement, "top");
    _aspxRestoreStyleAttribute(tabContentElement, "left");
    parent.appendChild(tabContentElement);
    tabContentElement.style.display = "";
   }
  },
  initializeHandlers: function() {
   if(this.ribbon.showTabs) {
    var tabControl = this.ribbon.getTabControl();
    var tcTab = this.getTabControlTab();
    if(this.ribbon.enabled && this.GetVisible()) {
     _aspxAttachEventToElement(tabControl.GetTabElement(tcTab.index, true), 'dblclick', this.onTabElementDblClick.aspxBind(this));
     _aspxAttachEventToElement(tabControl.GetTabElement(tcTab.index, false), 'dblclick', this.onTabElementDblClick.aspxBind(this));
     _aspxAttachEventToElement(tabControl.GetTabElement(tcTab.index, true), 'mousedown', this.onTabElementMouseDown.aspxBind(this));
     _aspxAttachEventToElement(tabControl.GetTabElement(tcTab.index, false), 'mousedown', this.onTabElementMouseDown.aspxBind(this));
    }
   }
  },
  calculateModifications: function() {
   var groupInfos = [],
    blockInfos;
   for(var i = 0, group; group = this.groups[i]; i++) {
    if(!group.GetVisible())
     continue;
    blockInfos = group.getBlocksInfos();
    groupInfos.push({group: group, width: group.getElement().offsetWidth, collapseWidth: getCollapsedGroupWidth(group), blockInfos: blockInfos});
   }
   while(true) {
    var mod = findNextModification(groupInfos);
    if(mod.indexPath[0] == -1) break;
    var groupInfo = groupInfos[mod.indexPath[0]];
    if(mod.indexPath[1] > -1) {
     var blockInfo = groupInfo.blockInfos[mod.indexPath[1]];
     this.modifications.push(new Modification(mod.delta, blockInfo.block, blockInfo.mods[blockInfo.activeMod + 1].className, blockInfo.mods[blockInfo.activeMod].className, groupInfo.group, true));
     blockInfo.activeMod++;
     groupInfo.width -= blockInfo.mods[blockInfo.activeMod].width;
    }
    else {
     this.modifications.push(new Modification(mod.delta, groupInfo.group.getElement(), constants.CLASSNAMES.GROUP_COLLAPSED, constants.CLASSNAMES.GROUP, groupInfo.group, false));
     groupInfo.width = -1;
    }
   }
   for(var i = 0, groupInfo; groupInfo = groupInfos[i]; i++) {
    for(var j = 0, blockInfo; blockInfo = groupInfo.blockInfos[j]; j++)
     blockInfo.activeMod = 0;
   }
  },
  applyModification: function() {
   if(!this.initialized)
    this.initialize();
   else if(!this.rollbackGroup) {
    var newWidth = this.ribbon.widthValueSetInPercentage ? _aspxPxToInt(this.getTabContentElement().style.width) : this.getTabContentElement().offsetWidth;
    if(newWidth == 0)
     return;
    if(this.listWidth <= 0)
     this.listWidth = this.getListElement().offsetWidth;
    var listWidth = this.listWidth;
    if(listWidth == 0) return;
    var deltaWidth = newWidth - listWidth;
    if(deltaWidth == 0) return;
    var modificator = deltaWidth < 0 ? 1 : -1;
    while(deltaWidth != 0) {
     var newIndex = deltaWidth < 0 ? (this.activeModificationIndex + modificator) : this.activeModificationIndex;
     var modification = this.modifications[newIndex];
     if(!modification)
      return;
     var modDelta = modification.delta;
     if(deltaWidth > 0 && deltaWidth - modDelta < 0)
      return;
     this.applyModificationCore(modification, modificator);
     if(deltaWidth < 0 && deltaWidth - modDelta > 0)
      return;
     if(modificator > 0)
      deltaWidth += modDelta;
     else
      deltaWidth -= modDelta;
    }
   }
  },
  applyModificationCore: function(modification, modificator) {
   var modifyItemTitles = function() {
    var modifyFunction;
    if(modification.newClassName == constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS_REDUCED)
     modifyFunction = modificator > 0 ? setTextTitle : removeTextTitle;
    if(modification.newClassName == constants.CLASSNAMES.GROUP_COLLAPSED)
     modifyFunction = modificator > 0 ? removeTextTitle : setTextTitle;    
    if(_aspxIsExists(modifyFunction)) {
     var items = modification.group.items;
     for(var item, i = 0; item = items[i]; i++)
      if(item.GetVisible())
       modifyFunction(items[i]);
    }
   }
   var setTextTitle = function(item) {
    var element = item.element;
    if(!_aspxIsExistsAttribute(element, "title") && element.textContent) {
     _aspxSetAttribute(element, "title", element.textContent);
     item.isTextTitleSet = "true";
    }
   }
   var removeTextTitle = function(item) {
    if(item.isTextTitleSet) {
     _aspxRemoveAttribute(item.element, "title");
     item.isTextTitleSet = "";
    }
   }
   if(modificator > 0) {
    modification.element.className = modification.element.className.replace(modification.prevClassName, modification.newClassName);
   }
   else {
    modification.element.className = modification.element.className.replace(modification.newClassName, modification.prevClassName);
   }
   modifyItemTitles();
   this.activeModificationIndex = this.activeModificationIndex + modificator;
   this.listWidth = this.getListElement().offsetWidth;
  },
  rollbackGroupModifications: function(group) {
   this.rollbackGroup = group;
   for(var mod, i = this.activeModificationIndex; mod = this.modifications[i]; i--) {
    if(mod.group == group && mod.isBlock)
     this.applyModificationCore(mod, -1);
   }
  },
  restoreGroupModifications: function() {
   if(this.rollbackGroup) {
    var group = this.rollbackGroup;
    for(var i = 0; i <= this.activeModificationIndex; i++) {
     var mod = this.modifications[i];
     if(mod.group == group && mod.isBlock)
      this.applyModificationCore(mod, 1);
    }
    this.rollbackGroup = null;
   }
  },
  onTabElementDblClick: function() {
   this.ribbon.onTabElementDblClick(this);
  },
  onTabElementMouseDown: function() {
   this.ribbon.onTabElementMouseDown(this);
  },
  adjustItems: function() {
   for(var i = 0, group; group = this.groups[i]; i++) {
    for(var j = 0, item; item = group.items[j]; j++) {
     item.adjust();
    }
   }
  },
  getTabControlTab: function() {
   return this.ribbon.getTabControlTab(this.index);
  },
  getTabContentElement: function() {
   if(!this.tabElement)
    this.tabElement = document.getElementById(this.ribbon.name + constants.TAB_CONTENTCONTROL_POSTFIX + this.index);
   return this.tabElement;
  },
  getWrapperElement: function() {
   if(this.wrapperElement === undefined)
    this.wrapperElement = _aspxGetDescendantNodesByClassName(this.getTabContentElement(), constants.CLASSNAMES.TABWRAPPER)[0];
   return this.wrapperElement;
  },
  getListElement: function() {
   if(!this.listElement)
    this.listElement = _aspxGetDescendantNodesByClassName(this.getTabContentElement(), constants.CLASSNAMES.GROUPLIST)[0];
   return this.listElement;
  },
  showContainer: function() {
   this.getTabContentElement().style.display = "block";
   this.initialize();
   setTimeout(function() {
    this.ribbon.AdjustControl();
   }.aspxBind(this), 0);
  },
  hideContainer: function() {
   this.getTabContentElement().style.display = "";
  }
 });
 var ASPxClientRibbonGroup = _aspxCreateClass(null, {
  constructor: function(ribbon, tab, index, name) {
   this.ribbon = ribbon;
   this.tab = tab;
   this.index = index;
   this.name = name;
   this.items = [];
   this.initWidth = 0;
   this.subElements = [];
  },
  GetVisible: function() {
   return !!this.getElement();
  },
  initialize: function() {
   if(!this.getElement())
    return;
   var expandButton = this.getExpandButtonElement();
   if(expandButton)
    _aspxAttachEventToElement(expandButton, "mousedown", this.onExpandButtonClick.aspxBind(this));
   var items = this.items;
   for(var item, i = 0; item = items[i]; i++)
    item.initialize();
  },
  onExpandButtonClick: function() {
   if(this.ribbon.GetEnabled()) {
    if(this.ribbon.currentGroupInPopup == this) {
     setTimeout(function() {
      this.ribbon.hideGroupCollapsePopup();
     }.aspxBind(this), 0);
    }
    else {
     setTimeout(function() {
      this.ribbon.showGroupCollapsePopup(this);
     }.aspxBind(this), 0);
    }
   }
  },
  getElement: function() {
   if(!this.element)
    this.element = document.getElementById(this.ribbon.name + constants.TAB_CONTENTCONTROL_POSTFIX +
     this.tab.index + constants.GROUP_POSTFIX + this.index);
   return this.element;
  },
  getSubElements: function() {
   if(this.subElements.length == 0) {
    var element = this.getElement();
    this.subElements.push(_aspxGetDescendantNodesByClassName(element, constants.CLASSNAMES.GROUP_CONTENT)[0]);
    var groupLabel = _aspxGetDescendantNodesByClassName(element, constants.CLASSNAMES.GROUP_LABEL)[0];
    if(!!groupLabel)
     this.subElements.push(groupLabel);
   }
   return this.subElements;
  },
  getExpandButtonElement: function() {
   if(!this.getElement())
    return null;
   if(this.expandButtonElement === undefined)
    this.expandButtonElement = _aspxGetDescendantNodesByClassName(this.getElement(), constants.CLASSNAMES.GROUP_EXPAND)[0];
   return this.expandButtonElement;
  },
  getExpandButtonLabelTextElement: function() {
   if(this.expandButtonLabelTextElement === undefined)
     this.expandButtonLabelTextElement = _aspxGetDescendantNodesByClassName(this.getExpandButtonElement(), constants.CLASSNAMES.LABELTEXT)[0];
   return this.expandButtonLabelTextElement;
  },
  getExpandButtonLabelContentElement: function() {
   if(this.expandButtonLabelContentElement === undefined)
     this.expandButtonLabelContentElement = _aspxGetDescendantNodesByClassName(this.getExpandButtonElement(), constants.CLASSNAMES.LABELCONTENT)[0];
   return this.expandButtonLabelContentElement;
  },
  getExpandButtonPopOutElement: function() {
   if(this.expandButtonPopOutElement === undefined)
     this.expandButtonPopOutElement = _aspxGetDescendantNodesByClassName(this.getExpandButtonElement(), constants.CLASSNAMES.ITEMPOPOUT)[0];
   return this.expandButtonPopOutElement;
  },
  getBlockItems: function(block) {
   var items = [];
   for(var item, i = 0; item = this.items[i]; i++) {
    if(!item.GetVisible())
     continue;
    if(item.getElement().parentNode == block)
     items.push(item);
    else if(items.length > 0)
     break;
   }
   return items;
  },
  getRegularBlockSizeRanges: function(block) {
   var items = this.getBlockItems(block);
   var lastItemGroupName = "";
   var itemSizeInfos = [];
   var commonWidth = 0;
   var getRightBoundInfo = function(el) {
    var sibling,
     node = el,
     width = 0;
    while(el.nextSibling) {
     sibling = el.nextSibling;
     if(sibling.className && _aspxElementHasCssClass(sibling, constants.CLASSNAMES.ITEM))
      break;
     if(sibling.nodeType == 1) {
      var style = _aspxGetCurrentStyle(sibling);
      width += sibling.offsetWidth + _aspxPxToInt(style.marginLeft) + _aspxPxToInt(style.marginRight);
      node = sibling;
     }
     el = sibling;
    }
    return { width: width, node: node };
   };
   for(var item, i = 0; item = items[i]; i++) {
    var element = item.getElement();
    var style = _aspxGetCurrentStyle(element);
    var width = element.offsetWidth + _aspxPxToInt(style.marginLeft) + _aspxPxToInt(style.marginRight);
    var rightBoundInfo = getRightBoundInfo(element);
    width += rightBoundInfo.width;
    if(i > 0 && item.groupName && item.groupName == items[i - 1].groupName) {
     itemSizeInfos[itemSizeInfos.length - 1].width += width;
     itemSizeInfos[itemSizeInfos.length - 1].node = rightBoundInfo.node;
    }
    else
     itemSizeInfos.push({ width: width, node: rightBoundInfo.node });
    commonWidth += width;
   }
   return [
    this.calculateRegularItemsBlock(2, itemSizeInfos, commonWidth),
    this.calculateRegularItemsBlock(3, itemSizeInfos, commonWidth)
   ];
  },
  getBlocksInfos: function() {
   var blockMods = [];
   var groupElement = this.getElement();
   var blocks = _aspxGetDescendantNodesByClassName(groupElement, constants.CLASSNAMES.BLOCK);
   var canReduceHorizontalBlock = function(items) {
    for(var i = 0, item; item = items[i]; i++) {
     if(_aspxGetDescendantNodesByClassName(item.getElement(), constants.CLASSNAMES.IMAGE16).length == 0)
      return false;
    }
    return true;
   };
   var canReduceLargeBlock = function(items) {
    for(var i = 0, item; item = items[i]; i++) {
     var element = item.getElement();
     if(_aspxGetDescendantNodesByClassName(element, constants.CLASSNAMES.LABELTEXT).length == 0 && 
      _aspxGetDescendantNodesByClassName(element, constants.CLASSNAMES.IMAGE16).length == 0)
      return false;
    }
    return true;
   }
   for(var block, i = 0; block = blocks[i]; i++) {
    var info = { block: block, activeMod: 0, mods: [], group: this };
    var initWidth = 0;
    var items = this.getBlockItems(block);
    if(_aspxElementHasCssClass(block, constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS)) {
     initWidth = groupElement.offsetWidth;
     info.mods.push(new BlockMod(constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS, 0, -1));
     if(canReduceHorizontalBlock(items))
      info.mods.push(new BlockMod(constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS_REDUCED, -1, 0));
    }
    else if(_aspxElementHasCssClass(block, constants.CLASSNAMES.BLOCK_LARGE_ITEMS)) {
     initWidth = groupElement.offsetWidth;
     info.mods.push(new BlockMod(constants.CLASSNAMES.BLOCK_LARGE_ITEMS, 0, -1));
     if(canReduceLargeBlock(items)) {
      if(_aspxGetDescendantNodesByClassName(block, constants.CLASSNAMES.BUTTONITEM).length > 1) {
       info.mods.push(new BlockMod(constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS, -1, 1));
       if(canReduceHorizontalBlock(items))
        info.mods.push(new BlockMod(constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS_REDUCED, -1, 0));
      }
     }
    }
    else if(_aspxElementHasCssClass(block, constants.CLASSNAMES.BLOCK_REGULAR_ITEMS)) {
     var ranges = this.getRegularBlockSizeRanges(block);
     var classNames = [constants.CLASSNAMES.BLOCK_REGULAR_ITEMS, constants.CLASSNAMES.BLOCK_REGULAR_ITEMS_REDUCED];
     for(var j = 0, range; range = ranges[j]; j++) {
      var classPostfix = _aspxCreateImportantStyleRule(null, "width: " + ranges[j].width + "px;");
      var className = classNames[j] + " " + classPostfix;
      for(var k = 0; k < range.endNodes.length - 1; k++) {
       var rowEndNode = range.endNodes[k];
       var clearNode = document.createElement("b");
       clearNode.className = "dx-clear dxr-regClear-" + j;
       _aspxInsertElementAfter(clearNode, rowEndNode);
      }
      if(j == 0) {
       block.className = block.className.replace(classNames[j], className);
       initWidth = groupElement.offsetWidth;
       info.mods.push(new BlockMod(className, 0, 2));
      }
      else
       info.mods.push(new BlockMod(className, -1, 2));
     }
    }
    if(info.mods.length > 1) { 
     var calculateMod = function(currentMod, newMod) {
      block.className = block.className.replace(currentMod.className, newMod.className);
      if(newMod.width < 0) {
       newMod.width = initWidth - groupElement.offsetWidth;
       initWidth -= newMod.width;
      }
     };
     for(var j = 1, mod; mod = info.mods[j]; j++)
      calculateMod(info.mods[j - 1], mod);
     calculateMod(info.mods[info.mods.length - 1], info.mods[0]);
     for(var j = 1, mod; mod = info.mods[j]; j++) {
      if(mod.width < 0) {
       info.mods.splice(j, 1);
       var nextMod = info.mods[j + 1];
       if(nextMod)
        nextMod += mod.width;
       j--;
      }
     }
    }
    blockMods.push(info);
   }
   this.initWidth = groupElement.offsetWidth;
   return blockMods;
  },
  calculateRegularItemsBlock: function(rowsAmount, itemInfos, commonWidth) {
   var maxRowIndex = 0,
    rowsInfo = [],
    results = { endNodes: [itemInfos[itemInfos.length - 1].node], width: (commonWidth + 2) },
    width = commonWidth,
    offsetWidth = 2;
   if(itemInfos.length < 2)
    return results;
   for(var i = 0; i < rowsAmount; i++)
    rowsInfo.push({ width: 0, items: [] });
   rowsInfo[0].width = commonWidth;
   for(var i = 0; i < itemInfos.length; i++)
    rowsInfo[0].items.push(itemInfos[i]);
   var getLongestRowIndex = function() {
    var res = 0;
    for(var i = 0; i < rowsAmount; i++) {
     if(rowsInfo[i].width > rowsInfo[res].width)
      res = i;
    }
    return res;
   };
   var moveItem = function(index) {
    var item = rowsInfo[index].items.pop();
    rowsInfo[index].width -= item.width;
    rowsInfo[index + 1].items.unshift(item);
    rowsInfo[index + 1].width += item.width;
   };
   var updateResults = function(width) {
    results.width = width + offsetWidth;
    results.endNodes = [];
    for(var i = 0; i < rowsAmount; i++) {
     var ri = rowsInfo[i];
     if(ri.items.length === 0) return;
     results.endNodes.push(ri.items[ri.items.length - 1].node);
    }
   };
   while(true) {
    maxRowIndex = getLongestRowIndex();
    width = rowsInfo[maxRowIndex].width;
    if(width != results.width - offsetWidth)
     updateResults(width);
    if(maxRowIndex == rowsAmount - 1) break;
    moveItem(maxRowIndex);
    for(var i = maxRowIndex + 1; i < rowsAmount; i++) {
     if(rowsInfo[i].width > width) {
      if(i == rowsAmount - 1)
       return results;
      moveItem(i);
     }
     else
      break;
    }
   }
   return results;
  }
 });
 var ASPxClientRibbonItem = _aspxCreateClass(null, {
  constructor: function(ribbon, group, index, name, type, groupName, clientDisabled) {
   this.group = group;
   this.index = index;
   this.name = name || "";
   this.ribbon = ribbon;
   this.groupName = groupName;
   this.type = type;
   this.id = getItemID(this);
   this.enabled = !clientDisabled;
   this.clientDisabledLocked = clientDisabled;
  },
  GetEnabled: function() {
   return this.getEnabledCore();
  },
  SetEnabled: function(enabled) {
   if(!this.ribbon.clientEnabled) return;
   this.clientDisabledLocked = !enabled;
   this.setEnabledCore(enabled, false);
  },
  GetValue: function() {
   return this.getValueCore();
  },
  SetValue: function(value) {
   this.setValueCore(value);
  },
  GetVisible: function() {
   return !!this.getElement();
  },
  initialize: function() { },
  onClick: function(evt) { },
  setEnabledCore: function(enabled, initialization) {
   enabled = enabled && (!initialization || this.enabled);
   if(enabled && this.clientDisabledLocked)
    return;
   this.enabled = enabled;
   aspxGetStateController().SetElementEnabled(this.getElement(), enabled);
  },
  getEnabledCore: function() {
   return this.enabled;
  },
  getValueCore: function() {
   return null;
  },
  setValueCore: function() { },
  getElement: function() {
   if(!this.element)
    this.element = document.getElementById(this.id);
   return this.element;
  },
  getLabelElement: function() {
   if(!this.labelElement)
    this.labelElement = _aspxGetDescendantNodesByClassName(this.getElement(), constants.CLASSNAMES.ITEMLABEL)[0];
   return this.labelElement;
  },
  getLabelContentElement: function() {
   if(!this.labelContentElement) {
    var labelElement = this.getLabelElement();
    if(labelElement)
     this.labelContentElement = _aspxGetDescendantNodesByClassName(labelElement, constants.CLASSNAMES.LABELCONTENT)[0];
   }
   return this.labelContentElement;
  },
  getLabelTextElement: function() {
   if(!this.labelTextElement) {
    var labelElement = this.getLabelElement();
    if(labelElement)
     this.labelTextElement = _aspxGetDescendantNodesByClassName(labelElement, constants.CLASSNAMES.LABELTEXT)[0];
   }
   return this.labelTextElement;
  },
  getBlockElement: function() {
   if(!this.blockElement)
    this.blockElement = this.getElement().parentNode;
   return this.blockElement;
  },
  adjust: function() { }
 });
 var ASPxClientRibbonButtonItem = _aspxCreateClass(ASPxClientRibbonItem, {
  constructor: function(ribbon, group, index, name, type, groupName, clientDisabled, navigateUrl) {
   this.constructor.prototype.constructor.call(this, ribbon, group, index, name, type, groupName, clientDisabled);
   this.navigateUrl = navigateUrl;
  },
  initialize: function() {
   if(this.ribbon.enabled) {
    _aspxAttachEventToElement(this.getElement(), "mousedown", function(evt) {
     if(_aspxGetIsLeftButtonPressed(evt))
      this.onClick(evt);
    }.aspxBind(this));
   }
   var element = this.getElement();
   var label = this.getLabelTextElement();
   if(label && _aspxElementHasCssClass(this.getBlockElement(), constants.CLASSNAMES.BLOCK_LARGE_ITEMS) && !element.style.width) {
    var className = _aspxCreateImportantStyleRule(null, "width: " + this.getLargeItemWidth() + "px;", undefined, "." + constants.CLASSNAMES.BLOCK_LARGE_ITEMS);
    _aspxAddClassNameToElement(element, className);
   }
  },
  getLargeItemWidth: function() {
   return getLargeItemWidth(this.getLabelTextElement(), _aspxGetLeftRightMargins(this.getLabelContentElement()));
  },
  onClick: function(evt) {
   if(!this.getEnabledCore()) return;
   this.execute();
   return _aspxPreventEventAndBubble(evt);
  },
  execute: function() {
   if(!this.navigateUrl)
    this.ribbon.onExecCommand(this, null);
  },
  setEnabledCore: function(enabled, initialization) {
   this.constructor.prototype.setEnabledCore.call(this, enabled, initialization);
   var element = this.getElement();
   if(this.navigateUrl) {
    if(!this.enabled && element.href) {
     _aspxSetAttribute(element, "savedhref", element.href);
     _aspxRemoveAttribute(element, "href");
    }
    else if(this.enabled && _aspxGetAttribute(element, "savedhref")) {
     _aspxSetAttribute(element, "href", _aspxGetAttribute(element, "savedhref"));
     _aspxRemoveAttribute(element, "savedhref");
    }
   }
  },
  adjust: function() {
   var block = this.getBlockElement();
   var label = this.getLabelElement();
   var image = this.getImageElement(constants.CLASSNAMES.IMAGE16);
   if(label && !image && _aspxElementHasCssClass(block, constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS) && !_aspxElementHasCssClass(block, constants.CLASSNAMES.BLOCK_HORIZONTAL_ITEMS_REDUCED)) {
    this.ribbon.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, function() { return label; });
   }
  },
  getImageElement: function(className) {
   if(this.imageElement === undefined)
    this.imageElement = _aspxGetDescendantNodesByClassName(this.getElement(), className)[0] || null;
   return this.imageElement;
  }
 });
 var ASPxClientRibbonDropDownMenuItem = _aspxCreateClass(ASPxClientRibbonButtonItem, {
  constructor: function(ribbon, group, index, name, type, groupName, clientDisabled, items, navigateUrl) {
   this.constructor.prototype.constructor.call(this, ribbon, group, index, name, type, groupName, clientDisabled, navigateUrl);
   this.parent = null;
   if(items !== undefined) {
    this.items = [];
    for(var i = 0, itemInfo; itemInfo = items[i]; i++) {
     var subItem = ASPxClientRibbonItem.create(ribbon, group, i, itemInfo.c, itemInfo.t, itemInfo.sg, itemInfo);
     subItem.parent = this;
     this.items.push(subItem);
    }
   }
  },
  getLargeItemWidth: function() {
   var popOut = this.getPopOutElement();
   return getLargeItemWidth(this.getLabelTextElement(), _aspxGetLeftRightMargins(this.getLabelContentElement()), popOut.offsetWidth + _aspxGetLeftRightMargins(popOut));
  },
  getPopup: function() {
   return this.parent ? this.parent.getPopup() : aspxGetControlCollection().Get(getItemID(this) + constants.POPUP_MENU_POSTFIX);
  },
  getPopupElement: function() {
   var popup = this.getPopup();
   if(popup)
    return popup.GetMainElement();
  },
  getPopOutElement: function() {
   if(!this.popOutElement)
    this.popOutElement = _aspxGetDescendantNodesByClassName(this.getLabelElement(), constants.CLASSNAMES.ITEMPOPOUT)[0];
   return this.popOutElement;
  },
  onClick: function(evt) {
   if(!this.getEnabledCore()) return;
   setTimeout(function() { this.showPopup(); }.aspxBind(this), 0);
   return _aspxPreventEventAndBubble(evt);
  },
  showPopup: function() {
   if(!this.getEnabledCore()) return;
   var pm = this.getPopup();
   if(pm) {
    if(pm.IsVisible())
     pm.Hide();
    else if(this.ribbon.lastShownPopup != pm)
     pm.ShowAtElement(this.getElement());
   }
  },
  hidePopup: function() {
   var pm = this.getPopup();
   if(pm)
    pm.Hide();
  },
  onMenuItemClick: function(menuItem) {
   var indexPath = menuItem.indexPath.split(constants.MENU_INDEXPATH_SEPARATOR);
   var item = this.findItem(indexPath);
   if(item.type != constants.ITEMTYPES.DROPDOWNMENU)
    item.execute();
  },
  findItem: function(indexPath) {
   var item = this.items[indexPath.shift()];
   return indexPath.length ? item.findItem(indexPath) : item;
  },
  setEnabledCore: function(enabled, initialization) {
   if(!this.parent)
    ASPxClientRibbonButtonItem.prototype.setEnabledCore.call(this, enabled, initialization);
   else {
    var indexPath = this.getIndexPath();
    this.getPopup().GetItemByIndexPath(indexPath).SetEnabled(enabled);
   }
   if(this.items) {
    for(var item, i = 0; item = this.items[i]; i++)
     item.setEnabledCore(item.enabled, initialization);
   }
  },
  getEnabledCore: function() {
   if(!this.parent)
    return ASPxClientRibbonButtonItem.prototype.getEnabledCore.call(this);
   else {
    var indexPath = this.getIndexPath();
    return this.getPopup().GetItemByIndexPath(indexPath).GetEnabled();
   }
  },
  getIndexPath: function() {
   if(!this.parent) return "";
   var parentPath = this.parent.getIndexPath();
   return "" + (parentPath === "" ? this.index : (parentPath + constants.MENU_INDEXPATH_SEPARATOR + this.index));
  },
  getItemByName: function(name) {
   if(this.items) {
    var subItem = null;
    for(var i = 0; i < this.items.length; i++) {
     var item = this.items[i];
     if(item.name == name)
      return item;
     if(!subItem)
      subItem = item.getItemByName(name);
    }
    return subItem;
   }
   return null;
  },
  adjust: function() { }
 });
 var ASPxClientRibbonDropDownSplitItem = _aspxCreateClass(ASPxClientRibbonDropDownMenuItem, {
  onClick: function(evt) {
   if(!this.getEnabledCore()) return;
   var pm = this.getPopup();
   var source = _aspxGetEventSource(evt);
   var itemElement = this.getElement();
   var popoutContainer = _aspxElementHasCssClass(itemElement.parentNode, constants.CLASSNAMES.BLOCK_LARGE_ITEMS) ? this.getLabelElement() : this.getPopOutElement();
   var imgContainer = _aspxGetDescendantNodesByClassName(itemElement, constants.CLASSNAMES.ITEMDDIMAGECONTAINER)[0];
   if(_aspxGetIsParent(popoutContainer, source) || (imgContainer && evt.offsetY > imgContainer.offsetHeight))
    setTimeout(function() { this.showPopup(); }.aspxBind(this), 0);
   else if(!pm || !_aspxGetIsParent(pm.GetMainElement(), source))
    this.execute();
   return _aspxPreventEventAndBubble(evt);
  },
  getPopOutElement: function() {
   var itemElement = this.getElement();
   return _aspxGetDescendantNodesByClassName(itemElement, constants.CLASSNAMES.ITEMPOPOUT)[0];
  }
 });
 var ASPxClientRibbonColorButtonItem = _aspxCreateClass(ASPxClientRibbonDropDownSplitItem, {
  constructor: function(ribbon, group, index, name, type, groupName, clientDisabled, color) {
   this.constructor.prototype.constructor.call(this, ribbon, group, index, name, type, groupName, clientDisabled);
   if(ribbon.enabled) {
    if(color)
     this.setValueCore(color);
    this.updateIndicator();
   }
  },
  onColorChanged: function() {
   this.hidePopup();
   this.updateIndicator();
   this.execute();
  },
  onCNCShouldBeClosed: function() {
   this.getPopup().Hide();
  },
  onPopupPopUp: function() {
   this.getColorTable().SetColorSelectorDisplay(false);
   this.getColorTable().SetColorTablesDisplay(true);
   this.getPopup().SetWidth(0);
   this.getPopup().SetHeight(0);
  },
  execute: function() {
   this.ribbon.onExecCommand(this, this.getValueCore());
  },
  getPopup: function() {
   return aspxGetControlCollection().Get(getItemID(this) + constants.POPUP_CONTROL_POSTFIX);
  },
  getPopupElement: function() {
   var popup = this.getPopup();
   if(popup)
    return popup.GetContentContainer(-1);
  },
  getColorTable: function() {
   return aspxGetControlCollection().Get(this.id + constants.COLORTABLE_POSTFIX);
  },
  getValueCore: function() {
   return this.getColorTable().GetColor();
  },
  setValueCore: function(value) {
   this.getColorTable().SetColor(value);
   this.updateIndicator();
  },
  getIndicatorElement: function() {
   if(!this.indicatorElement)
    this.indicatorElement = document.getElementById(this.id + constants.COLORINDICATOR_POSTFIX);
   return this.indicatorElement;
  },
  updateIndicator: function() {
   var indicator = this.getIndicatorElement();
   indicator.style.backgroundColor = this.getValueCore();
  },
  getState: function() {
   return this.getColorTable().GetState();
  }
 });
 var ASPxClientRibbonTemplateItem = _aspxCreateClass(ASPxClientRibbonItem, {
  setEnabledCore: function(enabled, initialization) {
   this.constructor.prototype.setEnabledCore.call(this, enabled, initialization);
   enabled = this.GetEnabled();
   aspxGetControlCollection().ProcessControlsInContainer(this.getElement(), function(control) {
    if(_aspxIsFunction(control.SetEnabled))
     control.SetEnabled(enabled);
   });
  }
 });
 var ASPxClientRibbonToggleItem = _aspxCreateClass(ASPxClientRibbonButtonItem, {
  constructor: function(ribbon, group, index, name, type, groupName, clientDisabled, checked) {
   this.constructor.prototype.constructor.call(this, ribbon, group, index, name, type, groupName, clientDisabled);
   this.checked = !!checked;
  },
  initialize: function() {
   ASPxClientRibbonButtonItem.prototype.initialize.call(this);
   if(this.checked)
    aspxGetStateController().SelectElementBySrcElement(this.getElement());
  },
  getValueCore: function() {
   return !!this.checked;
  },
  setValueCore: function(value) {
   value = !!value;
   if(this.getValueCore() == value)
    return;
   var element = this.getElement();
   this.checked = value;
   if(this.checked)
    aspxGetStateController().SelectElementBySrcElement(element);
   else
    aspxGetStateController().DeselectElementBySrcElement(element);
  },
  onClick: function(evt) {
   if(!this.getEnabledCore()) return;
   this.setValueCore(!this.checked);
   this.ribbon.onExecCommand(this, this.checked);
   return _aspxPreventEventAndBubble(evt);
  }
 });
 var ASPxClientRibbonOptionItem = _aspxCreateClass(ASPxClientRibbonToggleItem, {
  constructor: function(ribbon, group, index, name, type, groupName, clientDisabled, checked, optionGroup) {
   this.constructor.prototype.constructor.call(this, ribbon, group, index, name, type, groupName, clientDisabled, checked);
   this.optionGroup = optionGroup;
  },
  setValueCore: function(value) {
   ASPxClientRibbonToggleItem.prototype.setValueCore.call(this, value);
   if(this.checked && this.optionGroup) {
    for(var i = 0, tab; tab = this.ribbon.tabs[i]; i++) {
     for(var j = 0, group; group = tab.groups[j]; j++) {
      for(var k = 0, item; item = group.items[k]; k++) {
       if(item != this && item instanceof ASPxClientRibbonOptionItem && item.optionGroup == this.optionGroup)
        item.setValueCore(false);
      }
     }
    }
   }
  }
 });
 var ASPxClientRibbonEditorItem = _aspxCreateClass(ASPxClientRibbonItem, {
  onValueChanged: function() {
   this.ribbon.onExecCommand(this, this.getEditor().GetValue());
  },
  getValueCore: function() {
   return this.getEditor().GetValue();
  },
  setValueCore: function(value) {
   this.getEditor().SetValue(value);
  },
  setEnabledCore: function(enabled, initialization) {
   this.constructor.prototype.setEnabledCore.call(this, enabled, initialization);
   if(this.ribbon.enabled)
    this.getEditor().SetEnabled(this.enabled);
  },
  getEditor: function() {
   return aspxGetControlCollection().Get(getItemID(this) + this.getEditorPostfix());
  },
  getEditorPostfix: function() {
  }
 });
 var ASPxClientRibbonCheckBoxItem = _aspxCreateClass(ASPxClientRibbonEditorItem, {
  getEditorPostfix: function() {
   return constants.CHECKBOX_POSTFIX;
  }
 });
 var ASPxClientRibbonComboBoxItem = _aspxCreateClass(ASPxClientRibbonEditorItem, {
  getEditorPostfix: function() {
   return constants.COMBOBOX_POSTFIX;
  }
 });
 var ASPxClientRibbonDateEditItem = _aspxCreateClass(ASPxClientRibbonEditorItem, {
  getEditorPostfix: function() {
   return constants.DATEEDIT_POSTFIX;
  }
 });
 var ASPxClientRibbonSpinEditItem = _aspxCreateClass(ASPxClientRibbonEditorItem, {
  getEditorPostfix: function() {
   return constants.SPINEDIT_POSTFIX;
  }
 });
 var ASPxClientRibbonTextBoxItem = _aspxCreateClass(ASPxClientRibbonEditorItem, {
  getEditorPostfix: function() {
   return constants.TEXTBOX_POSTFIX;
  }
 });
 ASPxClientRibbonItem.create = function(ribbon, group, index, name, type, subGroup, info) {
  switch(type) {
   case constants.ITEMTYPES.BUTTON:
    return new ASPxClientRibbonButtonItem(ribbon, group, index, name, type, subGroup, info.cdi, info.nu);
   case constants.ITEMTYPES.DROPDOWNMENU:
    return new ASPxClientRibbonDropDownMenuItem(ribbon, group, index, name, type, subGroup, info.cdi, info.i, info.nu);
   case constants.ITEMTYPES.DROPDOWNSPLIT:
    return new ASPxClientRibbonDropDownSplitItem(ribbon, group, index, name, type, subGroup, info.cdi, info.i, info.nu);
   case constants.ITEMTYPES.CHECKBOX:
    return new ASPxClientRibbonCheckBoxItem(ribbon, group, index, name, type, subGroup, info.cdi);
   case constants.ITEMTYPES.COMBOBOX:
    return new ASPxClientRibbonComboBoxItem(ribbon, group, index, name, type, subGroup, info.cdi);
   case constants.ITEMTYPES.TEXTBOX:
    return new ASPxClientRibbonTextBoxItem(ribbon, group, index, name, type, subGroup, info.cdi);
   case constants.ITEMTYPES.SPINEDIT:
    return new ASPxClientRibbonSpinEditItem(ribbon, group, index, name, type, subGroup, info.cdi);
   case constants.ITEMTYPES.DATEEDIT:
    return new ASPxClientRibbonDateEditItem(ribbon, group, index, name, type, subGroup, info.cdi);
   case constants.ITEMTYPES.TOGGLE:
    return new ASPxClientRibbonToggleItem(ribbon, group, index, name, type, subGroup, info.cdi, info.chk);
   case constants.ITEMTYPES.COLOR:
    return new ASPxClientRibbonColorButtonItem(ribbon, group, index, name, type, subGroup, info.cdi, info.color);
   case constants.ITEMTYPES.TEMPLATE:
    return new ASPxClientRibbonTemplateItem(ribbon, group, index, name, type, subGroup, info.cdi);
   case constants.ITEMTYPES.OPTION:
    return new ASPxClientRibbonOptionItem(ribbon, group, index, name, type, subGroup, info.cdi, info.chk, info.og);
   default:
    return new ASPxClientRibbonItem(ribbon, group, index, name, type, subGroup, info.cdi);
  }
 };
 ASPxClientRibbon.onTabChanged = function(s, e) {
  return getRibbonControl(s.name, constants.TABCONTROL_POSTFIX).onTabChanged(e.tab);
 };
 ASPxClientRibbon.onComboBoxValueChanged = function(s, e) {
  return getRibbonControlByItem(s.name, constants.COMBOBOX_POSTFIX, s.cpRibbonItemID).onEditorValueChanged(s.cpRibbonItemID);
 };
 ASPxClientRibbon.onDateEditValueChanged = function(s, e) {
  return getRibbonControlByItem(s.name, constants.DATEEDIT_POSTFIX, s.cpRibbonItemID).onEditorValueChanged(s.cpRibbonItemID);
 };
 ASPxClientRibbon.onSpinEditValueChanged = function(s, e) {
  return getRibbonControlByItem(s.name, constants.SPINEDIT_POSTFIX, s.cpRibbonItemID).onEditorValueChanged(s.cpRibbonItemID);
 };
 ASPxClientRibbon.onTextBoxValueChanged = function(s, e) {
  return getRibbonControlByItem(s.name, constants.TEXTBOX_POSTFIX, s.cpRibbonItemID).onEditorValueChanged(s.cpRibbonItemID);
 };
 ASPxClientRibbon.onCheckBoxCheckedChanged = function(s, e) {
  return getRibbonControlByItem(s.name, constants.CHECKBOX_POSTFIX, s.cpRibbonItemID).onEditorValueChanged(s.cpRibbonItemID);
 };
 ASPxClientRibbon.onMenuItemClick = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.POPUP_MENU_POSTFIX, itemID).onPopupMenuItemClick(itemID, e.item);
 };
 ASPxClientRibbon.onMenuPopUp = function(s, e) {
  if(e.item.parent) return;
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.POPUP_MENU_POSTFIX, itemID).onPopupMenuPopUp(itemID, s);
 };
 ASPxClientRibbon.onMenuCloseUp = function(s, e) {
  if(e.item.parent) return;
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.POPUP_MENU_POSTFIX, itemID).onPopupMenuCloseUp(itemID, s);
 };
 ASPxClientRibbon.onItemPopupPopUp = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.POPUP_CONTROL_POSTFIX, itemID).onItemPopupPopUp(itemID, s);
 };
 ASPxClientRibbon.onItemPopupCloseUp = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.POPUP_CONTROL_POSTFIX, itemID).onItemPopupCloseUp(itemID, s);
 };
 ASPxClientRibbon.onTabClick = function(s, e) {
  return getRibbonControl(s.name, constants.TABCONTROL_POSTFIX).onTabClick(e.tab.index, e);
 };
 ASPxClientRibbon.onColorButtonPopupPopUp = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.POPUP_CONTROL_POSTFIX, itemID).onColorButtonPopupPopUp(itemID, s);
 };
 ASPxClientRibbon.onColorTableColorChanged = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.COLORTABLE_POSTFIX, itemID).onColorTableColorChanged(itemID);
 };
 ASPxClientRibbon.OnCNCCustomColorTableUpdated = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.COLORTABLE_POSTFIX, itemID).onCNCCustomColorTableUpdated(itemID, s);
 };
 ASPxClientRibbon.onCNCShouldBeClosed = function(s, e) {
  var itemID = s.cpRibbonItemID;
  return getRibbonControlByItem(s.name, constants.COLORTABLE_POSTFIX, itemID).onCNCShouldBeClosed(itemID);
 };
 function getLargeItemWidth(textContainer, marginWidth, popOutWidth) {
  popOutWidth = popOutWidth === undefined ? 0 : popOutWidth;
  marginWidth = marginWidth === undefined ? 0 : marginWidth;
  var html = textContainer.innerHTML;
  var words = _aspxGetInnerText(textContainer).split(' ');
  var wordsWidths = [];
  textContainer.style.visibility = "hidden";
  textContainer.innerHTML = "&nbsp;";
  var spaceWidth = textContainer.offsetWidth;
  var commonWidth = spaceWidth;
  for(var i = 0; i < words.length; i++) {
   var word = words[i];
   textContainer.innerHTML = word;
   var width = textContainer.offsetWidth;
   commonWidth += width;
   if(i > 0)
    commonWidth += spaceWidth;
   wordsWidths.push(width);
  }
  var labelWidth = getLargeItemLabelWidth(commonWidth, popOutWidth, spaceWidth, wordsWidths);
  textContainer.innerHTML = html;
  textContainer.style.visibility = "";
  return labelWidth + marginWidth;
 }
 function getLargeItemLabelWidth(firstRowWidth, secondRowWidth, spaceWidth, wordsWidths) {
  var result = Math.max(firstRowWidth, secondRowWidth);
  for(var i = wordsWidths.length - 1; i > 0; i--) {
   if(firstRowWidth - secondRowWidth > 0) {
    secondRowWidth += (secondRowWidth ? spaceWidth : 0) + wordsWidths[i];
    firstRowWidth -= wordsWidths[i] + spaceWidth;
    if(Math.max(firstRowWidth, secondRowWidth) >= result)
     return result;
    result = Math.max(firstRowWidth, secondRowWidth);
   }
  }
  return result;
 }
 function getCollapsedGroupWidth(group) {
  var groupElement = group.getElement();
  groupElement.className = groupElement.className.replace(constants.CLASSNAMES.GROUP, constants.CLASSNAMES.GROUP_COLLAPSED);
  var expandButton = group.getExpandButtonElement();
  if(!expandButton.style.width) {
   var popout = group.getExpandButtonPopOutElement();
   var itemWidth = getLargeItemWidth(group.getExpandButtonLabelTextElement(), _aspxGetLeftRightMargins(group.getExpandButtonLabelContentElement()), popout.offsetWidth + _aspxGetLeftRightMargins(popout));
   expandButton.style.width = itemWidth + "px";
  }
  var width = groupElement.offsetWidth;
  groupElement.className = groupElement.className.replace(constants.CLASSNAMES.GROUP_COLLAPSED, constants.CLASSNAMES.GROUP);
  return width;
 }
 function findNextModification(groupInfos) {
  var currentDelta,
   delta = Number.MAX_VALUE,
   priority = -1,
   indexPath = [-1, -1];
  for(var i = 0, groupInfo; groupInfo = groupInfos[i]; i++) {
   if(groupInfo.width < 0) continue;
   for(var j = 0, blockInfo; blockInfo = groupInfo.blockInfos[j]; j++) {
    if((blockInfo.activeMod + 1) >= blockInfo.mods.length) continue;
    var blockMod = blockInfo.mods[blockInfo.activeMod + 1];
    currentDelta = blockMod.width;
    if(blockMod.priority < priority) 
     continue;
    if(blockMod.priority > priority || currentDelta <= delta) {
     delta = currentDelta;
     indexPath = [i, j];
     priority = blockMod.priority;
    }
   }
  }
  if(indexPath[0] == -1) {
   for(var i = 0, groupInfo; groupInfo = groupInfos[i]; i++) {
    currentDelta = groupInfo.width - groupInfo.collapseWidth;
    if(currentDelta > 0 && currentDelta < delta) {
     delta = currentDelta;
     indexPath = [i, -1];
    }
   }
  }
  return { delta: delta, indexPath: indexPath };
 };
 function getRibbonControl(controlName, controlPostfix) {
  var ribbonID = controlName.substr(0, controlName.length - controlPostfix.length);
  return aspxGetControlCollection().Get(ribbonID);
 }
 function getRibbonControlByItem(controlName, controlPostfix, itemID) {
  return getRibbonControl(controlName, "_" + itemID + controlPostfix);
 }
 function getItemID(item, excludeRibbon) {
  var id = "T" + item.group.tab.index + "G" + item.group.index + "I" + item.index;
  return excludeRibbon ? id : (item.ribbon.name + "_" + id);
 }
 var BlockMod = function(className, width, priority) {
  this.className = className;
  this.width = width;
  this.priority = priority;
 };
 var Modification = function(delta, element, newClassName, prevClassName, group, isBlock) {
  this.delta = delta;
  this.element = element;
  this.newClassName = newClassName;
  this.prevClassName = prevClassName;
  this.group = group;
  this.isBlock = isBlock;
 };
 var ASPxClientRibbonCommandExecutedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function(item, parameter) {
   this.constructor.prototype.constructor.call(this);
   this.item = item;
   this.parameter = parameter;
  }
 });
 var ASPxClientRibbonTabEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function(tab) {
   this.constructor.prototype.constructor.call(this);
   this.tab = tab;
  }
 });
 var ASPxClientRibbonMinimizationStateEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function(ribbonState) {
   this.constructor.prototype.constructor.call(this);
   this.ribbonState = ribbonState;
  }
 });
 var ASPxClientRibbonState = {
  Normal: 0,
  Minimized: 1,
  TemporaryShown: 2
 };
 function scItemOut(source, args) {
  var ribbon = ASPxClientRibbonCollection.find(args.item.name);
  if(ribbon && ribbon.currentDropDownItem) {
   if(args.item.name == ribbon.currentDropDownItem.id) {
    var element = ribbon.currentDropDownItem.getElement();
    var newHoverItem = args.item.Clone();
    ribbon.currentDropDownItem.hoverItem = newHoverItem;
    newHoverItem.Apply(element);
   }
  }
  else if(ribbon && ribbon.currentGroupInPopup) {
   var expButton = ribbon.currentGroupInPopup.getExpandButtonElement();
   if(args.item.name == expButton.id) {
    var newHoverItem = args.item.Clone();
    expButton.hoverItem = newHoverItem;
    newHoverItem.Apply(expButton);
   }
  }
  if(ribbon && ribbon.showTabs && ribbon.minimized && ribbon.currentTemporaryTabPageIndex > -1) {
   var tcTabIndex = ribbon.getTabControlTabIndex(ribbon.currentTemporaryTabPageIndex);
   var tabElement = ribbon.getTabControl().GetTabElement(tcTabIndex, false);
   if(args.item.name == tabElement.id) {
    var newHoverItem = args.item.Clone();
    tabElement.hoverItem = newHoverItem;
    newHoverItem.Apply(tabElement);
   }
  }
 }
 aspxAddAfterClearFocusedState(scItemOut);
 aspxAddAfterClearHoverState(scItemOut);
 window.ASPxClientRibbon = ASPxClientRibbon;
 window.ASPxClientRibbonItem = ASPxClientRibbonItem;
 window.ASPxClientRibbonCommandExecutedEventArgs = ASPxClientRibbonCommandExecutedEventArgs;
 window.ASPxClientRibbonMinimizationStateEventArgs = ASPxClientRibbonMinimizationStateEventArgs;
 window.ASPxClientRibbonState = ASPxClientRibbonState;
})();
ASPxClientRatingControl = _aspxCreateClass(ASPxClientControl, {
 __isASPxRatingControl: true,
 INDEX_DEFAULT: 0,
 INDEX_USER: 1,
 INDEX_CHECKED: 2,
 INDEX_HOVER: 3,
 FILLPRECISION_EXACT: 0,
 FILLPRECISION_HALF: 1,
 FILLPRECISION_FULL: 2,
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.itemCount = 0;
  this.itemWidth = 0;
  this.itemHeight = 0;
  this.mainDiv = null;
  this.checkedDiv = null;
  this.hoverDiv = null;
  this.titles = [ ];
  this.fillPrecision = 0;
  this.hoverItemIndex = -1;
  this.ItemClick = new ASPxClientEvent();
  this.ItemMouseOver = new ASPxClientEvent();
  this.ItemMouseOut = new ASPxClientEvent();
 },
 SetDimensions: function(itemCount, itemWidth, itemHeight) {
  this.itemCount = itemCount;
  this.itemWidth = itemWidth;
  this.itemHeight = itemHeight;
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  this.AddAnchors();
  if(__aspxIE && __aspxBrowserVersion < 7) { 
   this.GetMainDiv().style.fontSize = "0";
   this.GetCheckedDiv().style.fontSize = "0";
   this.GetHoverDiv().style.fontSize = "0";
  }
 },
 AddAnchors: function() {
  var div = this.GetMainDiv();
  if(div.lastChild.nodeName == "A")
   return;
  for(var i = 0; i < this.itemCount; i++)
   div.appendChild(this.CreateAnchor(i))
 },
 CreateAnchor: function(index) {
  var anchor = document.createElement("a");
  anchor.style.width = this.itemWidth + "px";
  anchor.style.height = this.itemHeight + "px";
  anchor.style[this.rtl ? "marginRight" : "marginLeft"] = index * this.itemWidth + "px";
  anchor.style.marginTop = -this.itemHeight + "px";
  anchor.style.display = "block";
  _aspxSetAttribute(anchor, "DXIndex", index);
  _aspxSetAttribute(anchor, "href", "javascript:void(0)");
  var title = this.GetTitle(index);
  if(title)
   _aspxSetAttribute(anchor, "title", title);
  _aspxAttachEventToElement(anchor, "click", function(){ aspxRatingControlVote(this.name, index); }.aspxBind(this));
  return anchor;
 },
 GetTitle: function(index) {
  if(!this.GetEnabled())
   return null;
  if(this.titles && this.titles[index])
   return this.titles[index];
  if(this.toolTip)
   return this.toolTip;
  return null;
 },
 GetChildDiv: function(parent){
  for(var i = 0; i < parent.childNodes.length; i++) {
   var child = parent.childNodes[i];
   if(child.tagName == "DIV")
    return child;
  }
 },
 GetMainDiv: function() {
  if(this.mainDiv == null)
   this.mainDiv = this.GetMainElement();
  return this.mainDiv;
 },
 GetCheckedDiv: function() {
  if(this.checkedDiv == null)
   this.checkedDiv = this.GetChildDiv(this.GetMainDiv());
  return this.checkedDiv;
 },
 GetHoverDiv: function() {
  if(this.hoverDiv == null)
   this.hoverDiv = this.GetChildDiv(this.GetCheckedDiv());
  return this.hoverDiv;
 },
 GetHiddenField: function() {
    return _aspxGetElementById(this.name + "S");
 }, 
 GetCurrentState: function() {
  var state = this.GetHiddenField().value.split(";");
  return [state[0] == "T", Number(state[1])];
 },
 UpdateStateInput: function(readOnly, value) {
  this.GetHiddenField().value = (readOnly ? "T" : "F") + ";" + value;
 },
 GetEnabled: function() {
  var disabled = _aspxGetAttribute(this.GetMainElement(), "disabled");
  if(disabled && disabled === "disabled")
   return false;
  return true;
 }, 
 GetReadOnly: function() {
  if(!this.GetEnabled())
   return null;
  return this.GetCurrentState()[0];
 },
 SetReadOnly: function(readOnly) {
  if(!this.GetEnabled())
   return;
  this.UpdateStateInput(readOnly, this.GetValue());
 },
 GetValue: function() {
  if(!this.GetEnabled())
   return null;
  return this.GetCurrentState()[1];
 },
 SetValue: function(value, isUi) {
  if(!this.GetEnabled())
   return;
  if(value > this.itemCount)
   value = this.itemCount;
  this.UpdateStateInput(this.GetReadOnly(), value);
  this.UpdateCheckDiv(value, isUi);
  this.UpdateHoverDiv(-1);
 },
 UpdateCheckDiv: function(value, isUi){
  var div = this.GetCheckedDiv();
  var index = isUi ? this.INDEX_USER : this.INDEX_CHECKED;
  div.style.backgroundPosition = "0 " + (-this.itemHeight * index) + "px";
  if(!isUi)
   value = this.QuantizeValue(value);
  div.style.width = this.itemWidth * value + "px";
 },
 QuantizeValue: function(input) {
  switch(this.fillPrecision) {
   case this.FILLPRECISION_EXACT:
    return input;
   case this.FILLPRECISION_FULL:
    return Math.round(input);
   case this.FILLPRECISION_HALF:
    return Math.round(input * 2) / 2;
  }
 },
 HandleVote: function(index) {
  if(this.GetReadOnly())
   return;
  this.SetValue(index + 1, true);
  var processOnServer = this.RaiseItemClick(index);
  if(processOnServer)
   this.SendPostBack(index);
 },
 HandleMouseMove: function(htmlEvent) {
  var index = this.GetItemIndexAtCursor(htmlEvent);
  if(index != -1){
   this.UpdateHoverDiv(index);
   this.hoverItemIndex = index;
   this.RaiseItemMouseOver(this.hoverItemIndex);
  }
 },
 HandleMouseOut: function() {
  this.UpdateHoverDiv(-1);
  this.RaiseItemMouseOut(this.hoverItemIndex);
  this.hoverItemIndex = -1;
 },
 GetItemIndexAtCursor: function(htmlEvent) {
  if(_aspxGetEventSource(htmlEvent).nodeName == "A")
   return parseInt(_aspxGetEventSource(htmlEvent).attributes.getNamedItem("DXIndex").value);
  return -1;
 },
 UpdateHoverDiv: function(itemIndex) {
  this.GetHoverDiv().style.width = (itemIndex + 1) * this.itemWidth + "px";
 },
 RaiseItemClick: function(index){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
  if(!this.ItemClick.IsEmpty()){
   var args = new ASPxClientRatingControlItemClickEventArgs(processOnServer, index);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseItemMouseOver: function(itemIndex) {
  if(!this.ItemMouseOver.IsEmpty()) {
   var args = new ASPxClientRatingControlItemMouseEventArgs(itemIndex);
   this.ItemMouseOver.FireEvent(this, args)
  }
 },
 RaiseItemMouseOut: function(itemIndex) {
  if(!this.ItemMouseOut.IsEmpty()) {
   var args = new ASPxClientRatingControlItemMouseEventArgs(itemIndex);
   this.ItemMouseOut.FireEvent(this, args)
  }
 }
});
ASPxClientRatingControl.Cast = ASPxClientControl.Cast;
ASPxClientRatingControl.elementUnderCursor = null;
ASPxClientRatingControl.active = null;
ASPxClientRatingControl.DocMouseMoveHandler = function(htmlEvent) {
 var element = _aspxGetEventSource(htmlEvent);
 if(element == ASPxClientRatingControl.elementUnderCursor)
  return;
 ASPxClientRatingControl.elementUnderCursor = element;
 for(var i = 0; i < 3 && element != null; i++) {
  if(element.id) {
   var obj = aspxGetControlCollection().Get(element.id);
   if(obj != null && obj.__isASPxRatingControl && obj.GetEnabled()) {
    if(ASPxClientRatingControl.active != null)
     ASPxClientRatingControl.active.HandleMouseOut();
    ASPxClientRatingControl.active = obj;
    if(!obj.GetReadOnly())
     obj.HandleMouseMove(htmlEvent);
    return;
   }
  }
  element = element.parentNode;
 }
 if(ASPxClientRatingControl.active != null && ASPxClientRatingControl.active.GetEnabled()) {
  ASPxClientRatingControl.active.HandleMouseOut();
  ASPxClientRatingControl.active = null;
 }
};
function aspxRatingControlVote(name, index) {
 var control = aspxGetControlCollection().Get(name);
 if(control)
  control.HandleVote(index);
}
ASPxClientRatingControlItemClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, index){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.index = index;
 }
});
ASPxClientRatingControlItemMouseEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(index) {
  this.constructor.prototype.constructor.call(this);
  this.index = index;
 }
});
ASPxClientRatingControl.handlerAssigned = false;
if(!ASPxClientRatingControl.handlerAssigned && !__aspxTouchUI) {
 _aspxAttachEventToDocument("mousemove", ASPxClientRatingControl.DocMouseMoveHandler);
 ASPxClientRatingControl.handlerAssigned = true;
}
ASPxClientPanel = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.touchUIScroller = null;
 },
 Initialize: function(){
  this.touchUIScroller = ASPxClientTouchUI.makeScrollableIfRequired(this.GetMainElement());
 },
 GetContentElement: function() {
  return this.GetMainElement();
 },
 GetContentHTML: function(){
  return this.GetContentHtml();
 },
 SetContentHTML: function(html){
  this.SetContentHtml(html);
 },
 GetContentHtml: function(){
  if(this.touchUIScroller)
   this.touchUIScroller.destroy();
  var contentElement = this.GetContentElement();
  contentHtml = _aspxIsExistsElement(contentElement) ? contentElement.innerHTML : null;
  if(this.touchUIScroller)
   this.touchUIScroller.ChangeElement(this.GetMainElement());
  return contentHtml;
 },
 SetContentHtml: function(html){
  var contentElement = this.GetContentElement();
  if (_aspxIsExistsElement(contentElement))
   _aspxSetInnerHtml(contentElement, html);
  if(this.touchUIScroller)
   this.touchUIScroller.ChangeElement(this.GetMainElement());
 }
});
ASPxClientPanel.Cast = ASPxClientControl.Cast;
(function () {
 var CssClasses = {
  HeaderContentWrapper: "dxrpHCW",
  AnimationWrapper: "dxrpAW",
  ContentWrapper: "dxrpCW",
  Collapsed: "dxrpCollapsed",
  CollapseButtonRtl: "dxrpCollapseButtonRtl",
  CollapseButton: "dxrpCollapseButton"
 };
 var IDSuffixes = {
  HeaderElement: "_HC",
  HiddenField: "_H",
  GroupBoxCaption: "_GBC",
  ContentElement: "_RPC",
  HeaderTextContainer: "_RPHT"
 };
 var VerticalAlignEnum = {
  Top: 1,
  Middle: 2,
  Bottom: 3,
  NotSet: 0
 };
 var ASPxClientRoundPanel = _aspxCreateClass(ASPxClientPanel, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.animationDuration = 200;
   this.enableAnimation = true;
   this.allowCollapsingByHeaderClick = false;
   this.headerTextContainer = null;
   this.headerTextEmpty = false;
   this.contentElement = null;
   this.collapseButton = null;
   this.collapseButtonImage = null;
   this.hiddenField = null;
   this.headerElement = null;
   this.contentWrapper = null;
   this.animationWrapper = null;
   this.headerContentWrapper = null;
   this.isGroupBox = false;
   this.contentHeightBeforeCollapse = 0;
   this.tableInlineHeight = "";
   this.headerCollapsedBorderSettings = {
    borderBottom: "",
    borderBottomLeftRadius: "",
    borderBottomRightRadius: ""
   };
   this.headerExpandedBorderSettings = {
    borderBottom: "",
    borderBottomLeftRadius: "",
    borderBottomRightRadius: ""
   };
   this.headerVerticalAlign = VerticalAlignEnum.Middle;
   this.loadContentViaCallback = false;
   this.isContentLoaded = false;
   this.loadingPanelImageOnloadHandler = null;
   this.CollapsedChanged = new ASPxClientEvent();
  },
  AdjustHeader: function () {
   var collapseButton = this.GetCollapseButton();
   var textWrapper = this.GetHeaderContentWrapper();
   if (!collapseButton || !textWrapper)
    return;
   var offset = Math.floor((collapseButton.offsetHeight - textWrapper.offsetHeight) * this.GetMarginTopMultiplier());
   if (offset > 0)
    textWrapper.style.marginTop = Math.abs(offset) + "px";
   if (offset < 0)
    collapseButton.style.marginTop = Math.abs(offset) + "px";
   var computedStyle = _aspxGetCurrentStyle(collapseButton);
   var padding = collapseButton.offsetWidth + _aspxPxToInt(computedStyle.marginRight) + _aspxPxToInt(computedStyle.marginLeft);
   if (this.rtl)
    textWrapper.style.paddingLeft = padding + "px";
   else
    textWrapper.style.paddingRight = padding + "px";
  },
  GetMarginTopMultiplier: function () {
   switch (this.headerVerticalAlign) {
    case VerticalAlignEnum.Middle:
     return 0.5;
    case VerticalAlignEnum.Bottom:
     return 1;
    default:
     return 0;
   }
  },
  GetHeaderContentWrapper: function () {
   if (this.headerContentWrapper == null)
    this.headerContentWrapper = _aspxGetChildNodesByClassName(this.GetHeaderElement(), CssClasses.HeaderContentWrapper)[0];
   return this.headerContentWrapper;
  },
  InlineInitialize: function () {
   ASPxClientPanel.prototype.InlineInitialize.call(this);
   this.tableInlineHeight = this.GetMainElement().style.height;
   this.isContentLoaded = !this.GetCollapsed();
  },
  Initialize: function () {
   this.RemoveCollapsedCssClass();
   ASPxClientPanel.prototype.Initialize.call(this);
   this.InitializeHeaderBorderSettings(this.headerExpandedBorderSettings, false);
   this.InitializeHeaderBorderSettings(this.headerCollapsedBorderSettings, true);
   if (this.IsCollapsingAllowed()) {
    this.PrepareContentWrapper();
    _aspxAttachEventToElement(this.GetHeaderElement(), ASPxClientTouchUI.touchMouseUpEventName,
     function (evt) {
      if (_aspxGetIsLeftButtonPressed(evt))
       this.OnHeaderMouseUp(evt);
     }.aspxBind(this));
    if (this.GetCollapsed()) {
     this.contentHeightBeforeCollapse = this.GetContentElement().offsetHeight;
     this.AssignCollapsedStyle();
    }
   }
  },
  PrepareContentWrapper: function () {
   var contentWrapper = this.GetContentWrapper();
   var contentWrapperMinHeight = _aspxPxToInt(contentWrapper.style.minHeight);
   if (contentWrapperMinHeight == 0 && this.tableInlineHeight && !this.heightValueSetInPercentage)
    contentWrapperMinHeight = _aspxPxToInt(this.tableInlineHeight) - this.GetHeaderElement().offsetHeight -
     this.GetAffectingSizeBordersAndPaddings(contentWrapper, true);
   contentWrapperMinHeight -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(this.GetContentElement());
   if (contentWrapperMinHeight > 0) {
    _aspxSetStyles(contentWrapper, { minHeight: contentWrapperMinHeight });
    _aspxClearHeight(this.GetMainElement());
   }
  },
  GetAffectingSizeBordersAndPaddings: function (element, isVertical) {
   var boxSizing = _aspxGetCurrentStyle(element).MozBoxSizing || _aspxGetCurrentStyle(element).boxSizing;
   if (boxSizing == "padding-box")
    return isVertical ? _aspxGetVerticalBordersWidth(element) : _aspxGetHorizontalBordersWidth(element);
   else if (boxSizing == "border-box")
    return 0;
   else
    return isVertical ? _aspxGetTopBottomBordersAndPaddingsSummaryValue(element) :
         _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
  },
  InitializeHeaderBorderSettings: function (settings, isTopRadius) {
   if (!this.GetHeaderElement())
    return;
   var currentStyle = _aspxGetCurrentStyle(this.GetHeaderElement());
   if (isTopRadius) {
    settings.borderBottomLeftRadius = currentStyle.borderTopLeftRadius;
    settings.borderBottomRightRadius = currentStyle.borderTopRightRadius;
    settings.borderBottom = currentStyle.borderTopWidth + " " + currentStyle.borderTopStyle + " " + currentStyle.borderTopColor;
   } else {
    settings.borderBottomLeftRadius = currentStyle.borderBottomLeftRadius;
    settings.borderBottomRightRadius = currentStyle.borderBottomRightRadius;
    settings.borderBottom = currentStyle.borderBottomWidth + " " + currentStyle.borderBottomStyle + " " + currentStyle.borderBottomColor;
   }
  },
  OnHeaderMouseUp: function (evt) {
   var source = _aspxGetEventSource(evt);
   var isButtonClick = source == this.GetCollapseButton() || source == this.GetCollapseButtonImage();
   if (isButtonClick || (this.allowCollapsingByHeaderClick && !_aspxIsInteractiveControl(source)))
    this.SetCollapsed(!this.GetCollapsed());
  },
  GetContentContainer: function () {
   return this.GetContentWrapper() || this.GetContentElement();
  },
  PerformCallback: function (parameter) {
   this.CreateCallback(parameter);
  },
  CreateCallback: function (arg, command, callbackInfo) {
   this.ShowLoadingElements();
   ASPxClientControl.prototype.CreateCallback.call(this, arg, command);
  },
  OnCallback: function (html) {
   this.isContentLoaded = true;
   this.UpdateContentHtml(html);
  },
  UpdateContentHtml: function (html) {
   if (this.GetAnimationWrapper()) {
    var size = this.BlockElementSize(this.GetAnimationWrapper(), false);
    this.SetContentHtmlInternal(html);
    this.StretchAnimationWrapper(size);
   } else this.SetContentHtmlInternal(html);
  },
  SetContentHtmlInternal: function (html) {
   var container = this.GetContentContainer();
   _aspxSetInnerHtml(container, html);
   this.BlockElementSize(container, true);
  },
  BlockElementSize: function (element, removeBlock) {
   var size = {
    width: element.offsetWidth - this.GetAffectingSizeBordersAndPaddings(element, false),
    height: element.offsetHeight - this.GetAffectingSizeBordersAndPaddings(element, true)
   };
   _aspxSetStyles(element, {
    overflow: removeBlock ? "" : "hidden",
    width: removeBlock ? "" : size.width,
    height: removeBlock ? "" : size.height
   });
   return size;
  },
  StretchAnimationWrapper: function (size) {
   var contentWrapper = this.GetContentWrapper();
   contentWrapper.style.display = "inline-block";
   var width = contentWrapper.offsetWidth;
   var height = contentWrapper.offsetHeight;
   contentWrapper.style.display = "";
   this.StartAnimation(this.GetAnimationWrapper(), function () {
    this.BlockElementSize(this.GetAnimationWrapper(), true);
    this.RaiseCollapsedChanged();
   }.aspxBind(this),
   [
    { property: "height", to: height, from: size.height },
    { property: "width", to: width, from: size.width }
   ]);
  },
  ShowLoadingElementsInternal: function () {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
   if (this.lpDelay > 0) {
    var clonedPanel = this.GetClonedLoadingPanel();
    clonedPanel.style.visibility = "hidden";
    _aspxSetTimeout(function () {
     clonedPanel.style.visibility = "";
    }, this.lpDelay);
   }
  },
  CanPerformLoadContentCallback: function () {
   return this.loadContentViaCallback && !this.isContentLoaded && !this.InCallback();
  },
  ShowLoadingPanel: function () {
   var blockContentContainer = !this.IsContentHtmlEmpty();
   if (blockContentContainer)
    this.BlockElementSize(this.GetContentContainer());
   this.CreateLoadingPanelInsideContainer(this.GetContentContainer());
   if (!blockContentContainer)
    this.CenterLoadingPanel();
  },
  CenterLoadingPanel: function () {
   var loadingPanel = this.GetClonedLoadingPanel();
   if (!loadingPanel)
    return;
   var contentContainer = this.GetContentContainer();
   var parentHeight = _aspxGetClearClientHeight(contentContainer);
   if (parentHeight > loadingPanel.offsetHeight)
    _aspxSetStyles(loadingPanel, { marginTop: Math.floor((parentHeight - loadingPanel.offsetHeight) / 2) });
  },
  AdjustControlCore: function () {
   if (this.GetHeaderElement())
    this.AdjustHeader();
   if (this.IsCollapsingAllowed() && this.enableAnimation && !_aspxElementHasCssClass(this.GetMainElement(), CssClasses.Collapsed))
    this.UpdateContentWrapperMinHeight();
  },
  UpdateContentWrapperMinHeight: function () {
   if (!this.tableInlineHeight || !this.heightValueSetInPercentage)
    return;
   var contentWrapper = this.GetContentWrapper();
   this.GetMainElement().style.height = this.tableInlineHeight;
   contentWrapper.style.minHeight = 0;
   var tableHeight = this.GetMainElement().offsetHeight;
   var contentWrapperMinHeight = tableHeight - this.GetHeaderElement().offsetHeight -
    this.GetAffectingSizeBordersAndPaddings(contentWrapper, true) - _aspxGetTopBottomBordersAndPaddingsSummaryValue(this.GetContentElement());
   _aspxSetStyles(contentWrapper, { minHeight: contentWrapperMinHeight });
   _aspxClearHeight(this.GetMainElement());
  },
  IsCollapsingAllowed: function () {
   return !this.isGroupBox && this.GetHeaderElement() && this.GetContentWrapper();
  },
  GetContentElement: function () {
   if (this.contentElement == null)
    this.contentElement = this.GetChild(IDSuffixes.ContentElement);
   return this.contentElement;
  },
  GetCollapseButton: function () {
   if (this.collapseButton == null)
    this.collapseButton = _aspxGetDescendantNodesByClassName(this.GetMainElement(),
     this.rtl ? CssClasses.CollapseButtonRtl : CssClasses.CollapseButton)[0];
   return this.collapseButton;
  },
  GetCollapseButtonImage: function () {
   if (this.collapseButtonImage == null)
    this.collapseButtonImage = _aspxGetChildByTagName(this.GetCollapseButton(), "IMG", 0);
   return this.collapseButtonImage;
  },
  GetHeaderElement: function () {
   if (this.headerElement == null)
    this.headerElement = this.GetChild(IDSuffixes.HeaderElement);
   return this.headerElement;
  },
  GetGroupBoxCaptionElement: function () {
   if (this.groupBoxCaptionElement == null)
    this.groupBoxCaptionElement = this.GetChild(IDSuffixes.GroupBoxCaption);
   return this.groupBoxCaptionElement;
  },
  GetHeaderTextContainer: function () {
   if (this.headerTextContainer == null)
    this.headerTextContainer = this.GetChild(IDSuffixes.HeaderTextContainer);
   return this.headerTextContainer;
  },
  GetHeaderText: function () {
   var textContainer = this.GetHeaderTextContainer();
   if (_aspxIsExistsElement(textContainer) && textContainer.innerHTML != "&nbsp;")
    return _aspxTrim(textContainer.innerHTML);
   return "";
  },
  SetHeaderText: function (text) {
   var textContainer = this.GetHeaderTextContainer();
   if (_aspxIsExistsElement(textContainer))
    textContainer.innerHTML = this.GetPreparedText(text);
  },
  GetContentHtml: function () {
   var contentElement = this.GetContentContainer();
   if (_aspxIsExistsElement(contentElement)) {
    if (this.isGroupBox)
     var caption = this.RemoveGroupBoxCaptionElement();
    var contentHTML = contentElement.innerHTML;
    if (this.isGroupBox)
     this.RestoreGroupBoxCaptionElement(caption);
    if (contentHTML == "&nbsp;")
     contentHTML = "";
    return contentHTML;
   }
   return null;
  },
  SetContentHtml: function (html) {
   var contentElement = this.GetContentContainer();
   if (_aspxIsExistsElement(contentElement)) {
    if (this.isGroupBox)
     var caption = this.RemoveGroupBoxCaptionElement();
    _aspxSetInnerHtml(contentElement, this.GetPreparedText(html));
    if (this.isGroupBox)
     this.RestoreGroupBoxCaptionElement(caption);
   }
  },
  IsContentHtmlEmpty: function () {
   return !_aspxTrim(this.GetContentHtml());
  },
  GetPreparedText: function (text) {
   if (!text || _aspxTrim(text) == "")
    text = "&nbsp;";
   return text;
  },
  RemoveGroupBoxCaptionElement: function () {
   var captionElement = this.GetGroupBoxCaptionElement();
   return captionElement ? captionElement.parentNode.removeChild(captionElement) : null;
  },
  RestoreGroupBoxCaptionElement: function (captionElement) {
   var contentElement = this.GetContentElement();
   if (contentElement) {
    if (contentElement.hasChildNodes())
     contentElement.insertBefore(captionElement, contentElement.firstChild);
    else
     contentElement.appendChild(captionElement);
   }
  },
  GetCollapsed: function () {
   if (!this.IsCollapsingAllowed())
    return false;
   return this.GetHiddenFieldValue();
  },
  SetCollapsed: function (collapsed) {
   if (this.IsCollapsingAllowed() && this.GetCollapsed() != collapsed) {
    this.SetHiddenFieldValue(collapsed);
    this.ToggleAppearance();
   }
  },
  GetHiddenField: function () {
   if (this.hiddenField == null)
    this.hiddenField = _aspxGetElementById(this.name + IDSuffixes.HiddenField);
   return this.hiddenField;
  },
  SetHiddenFieldValue: function (value) {
   this.GetHiddenField().value = value ? 1 : 0;
  },
  GetHiddenFieldValue: function () {
   return this.GetHiddenField().value == "1";
  },
  ToggleAppearance: function () {
   if (this.GetCollapsed())
    this.CollapseContent();
   else
    this.ExpandContent();
   if (!this.enableAnimation)
    this.RaiseCollapsedChanged();
  },
  GetAnimationWrapper: function () {
   if (this.animationWrapper == null)
    this.animationWrapper = _aspxGetChildNodesByClassName(this.GetContentElement(), CssClasses.AnimationWrapper)[0];
   return this.animationWrapper;
  },
  GetContentWrapper: function () {
   if (this.contentWrapper == null)
    this.contentWrapper = _aspxGetDescendantNodesByClassName(this.GetContentElement(), CssClasses.ContentWrapper)[0];
   return this.contentWrapper;
  },
  CollapseContent: function () {
   if (this.enableAnimation) {
    this.PrepareElementsToCollapseAnimation();
    this.StartAnimation(this.GetAnimationWrapper(), function () {
     this.CompleteCollapsing();
     this.RaiseCollapsedChanged();
    }.aspxBind(this), [{ property: "height", to: 0, from: this.contentHeightBeforeCollapse }]);
   } else
    this.CompleteCollapsing();
  },
  ExpandContent: function () {
   this.RemoveCollapsedCssClass();
   var contentLoadsOnCallback = this.CanPerformLoadContentCallback();
   if (contentLoadsOnCallback)
    this.PerformCallback();
   this.PrepareElementsToExpand();
   if (this.enableAnimation)
    this.StartAnimation(this.GetAnimationWrapper(), function () {
     this.CompleteExpanding();
     if (!contentLoadsOnCallback)
      this.RaiseCollapsedChanged();
    }.aspxBind(this), [{ property: "height", from: 0, to: this.contentHeightBeforeCollapse }]);
  },
  PrepareElementsToCollapseAnimation: function () {
   this.contentHeightBeforeCollapse = this.GetContentElement().offsetHeight;
   _aspxClearHeight(this.GetMainElement());
  },
  GetContentHeight: function () {
   return this.GetContentElement().offsetHeight;
  },
  CompleteCollapsing: function () {
   this.AssignCollapsedStyle();
  },
  CompleteExpanding: function () {
   _aspxClearHeight(this.GetAnimationWrapper());
   this.AdjustControl();
  },
  AssignCollapsedStyle: function () {
   _aspxAddClassNameToElement(this.GetMainElement(), CssClasses.Collapsed);
   _aspxSetStyles(this.GetHeaderElement(), this.headerCollapsedBorderSettings);
   this.ChangeSelectStateForCollapseButton();
  },
  PrepareElementsToExpand: function () {
   _aspxSetStyles(this.GetHeaderElement(), this.headerExpandedBorderSettings);
   this.ChangeSelectStateForCollapseButton();
   if (this.enableAnimation) {
    this.UpdateContentWrapperMinHeight();
    this.contentHeightBeforeCollapse = this.GetContentWrapper().offsetHeight;
   }
  },
  RemoveCollapsedCssClass: function () {
   var element = this.GetMainElement();
   var regex = new RegExp("(?:^|\\s)" + CssClasses.Collapsed + "(?!\\S)");
   element.className = element.className.replace(regex, "");
  },
  StartAnimation: function (element, onComplete, propsToAnimate) {
   if (!propsToAnimate || !element)
    return;
   var props = [];
   for (var i = 0; i < propsToAnimate.length; i++) {
    if (propsToAnimate[i].from != propsToAnimate[i].to)
     props.push(propsToAnimate[i]);
   }
   if (props.length == 0)
    return;
   if (props.length == 1) {
    ASPxAnimationHelper.createAnimationTransition(element, {
     property: props[0].property, unit: "px",
     duration: this.animationDuration, onComplete: onComplete
    }).Start(props[0].from, props[0].to);
   } else {
    var animationProperties = {};
    for (var i = 0; i < props.length; i++)
     animationProperties[props[i].property] = { unit: "px", from: props[i].from, to: props[i].to };
    ASPxAnimationHelper.createMultipleAnimationTransition(element, {
     duration: this.animationDuration,
     onComplete: onComplete
    }).Start(animationProperties);
   }
  },
  RaiseCollapsedChanged: function () {
   if (!this.CollapsedChanged.IsEmpty())
    this.CollapsedChanged.FireEvent(this);
  },
  ChangeSelectStateForCollapseButton: function () {
   if (!aspxGetStateController || !this.GetCollapseButton())
    return;
   if (this.GetCollapsed())
    aspxGetStateController().SelectElementBySrcElement(this.GetCollapseButton());
   else
    aspxGetStateController().DeselectElementBySrcElement(this.GetCollapseButton());
  }
 });
 ASPxClientRoundPanel.Cast = ASPxClientControl.Cast;
 window.ASPxClientRoundPanel = ASPxClientRoundPanel;
})();
MVCxClientRoundPanel = _aspxCreateClass(ASPxClientRoundPanel, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientRoundPanel.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) }; 
  ASPxClientRoundPanel.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientRoundPanel.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientRoundPanel.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function () { this.callbackCustomArgs = {}; } .aspxBind(this), 0);
  ASPxClientRoundPanel.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientRoundPanel.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientRoundPanel.prototype.EvalCallbackResult.call(this, resultString);
 }
});

var __aspxDialogFormCallbackStatus = "DialogForm";
var __aspxCurrentControlNameInDialog = "";
var __aspxAreKeyboardEventsInitialized = false;
function aspxAdjustControlsSizeInDialogWindow() {
 var control = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog); 
 var curDialog = control != null ? ASPxDialog.GetLastDialog(control) : null;
 if (curDialog != null) {
  var element = curDialog.GetDialogPopup().GetMainElement();
  aspxGetControlCollection().AdjustControls(element, true);
 }
}
ASPxDialog = _aspxCreateClass(null, {
 constructor: function(name) {
  this.name = name;
  this.initInfo = null;  
  this.editorKeyDownProccesed = false;
  this.keyDownHandlers = {};
  this.InitializeKeyHandlers();
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler("ESC", "HideDialog");
 },
 AddKeyDownHandler: function(shortcutString, handler) {
  this.keyDownHandlers[_aspxParseShortcutString(shortcutString)] = handler;
 },
 DoCustomAction: function(result, params) {
 },
 GetDialogCaptionText: function() {
  return "";
 },
 GetInitInfoObject: function() {
  return null;
 },
 InitializeDialogFields: function(initInfo) {
 },
 SetFocusInField: function() {
 },
 Execute: function(ownerControl, popupElementID) {
  this.ownerControl = ownerControl;
  __aspxCurrentControlNameInDialog = this.ownerControl.name;
  ASPxDialog.PushDialogToCollection(this.ownerControl, this);
  this.InitializePopupEvents();
  this.GetDialogPopup().SetHeaderText(this.GetDialogCaptionText());  
  if (popupElementID)
   this.GetDialogPopup().ShowAtElementByID(popupElementID);
  else
   this.GetDialogPopup().Show();
  if (this.GetDialogContent(this.name) == null) {
   this.SendCallbackForDialogContent();
   this.ShowLoadingPanelInDialogPopup();
  }
  else {
   this.ExecuteInternal(this.GetDialogContent(this.name));
   _aspxProcessScriptsAndLinks(__aspxCurrentControlNameInDialog);
   this.OnInitComplete();
  }
 },
 ExecuteInternal: function(result) {
  this.initInfo = this.GetInitInfoObject();
  this.GetDialogPopup().SetContentHtml(result);
  if (this.GetDialogPopup().IsVisible())
   this.GetDialogPopup().UpdatePosition();
 },
 GetDialogPopup: function() {
  if(this.ownerControl.GetDialogPopupControl)
   return this.ownerControl.GetDialogPopupControl();
  return null;
 },
 AddDialogContentToHash: function(name, content) {
  this.GetDialogContentHashTable()[this.name] = content;
 },
 GetDialogContent: function(name) { 
  return this.GetDialogContentHashTable()[this.name] || null;
 },
 GetDialogContentHashTable: function() {
  return this.ownerControl.dialogContentHashTable || null;
 },
 InitializePopupEvents: function() {
  var dialogPopup = this.GetDialogPopup();
  if (dialogPopup.CloseButtonClick.IsEmpty()) {
   var owner = this.ownerControl;
   dialogPopup.Closing.AddHandler(ASPxDialog.GetOnClosingEventHandler(owner));
   dialogPopup.CloseButtonClick.AddHandler(ASPxDialog.GetOnCloseButtonClickEventHandler(owner));
   dialogPopup.CloseUp.AddHandler(ASPxDialog.GetOnCloseEventHandler(owner));
  }
 },
 InitCustomKeyboardHandling: function() {
  if (!__aspxAreKeyboardEventsInitialized) {
   __aspxAreKeyboardEventsInitialized = true;      
   _aspxAttachEventToDocument(__aspxWebKitFamily ? "keydown" : "keypress", aspxDialogDocumentKeypress);
   if (__aspxNetscapeFamily)
    this.ReplaceKBSIKeyDown();
  }
 },
 ReplaceKBSIKeyDown: function() { 
  var original = aspxKBSIKeyDown;
  aspxKBSIKeyDown = function(name, evt) {
   var isProcessed = original(name, evt);
   var ownerControl = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
   var curDialog = ownerControl != null ? ASPxDialog.GetLastDialog(ownerControl) : null;
   if (curDialog != null) curDialog.OnInnerEditorKeyDown(evt, isProcessed);
   return isProcessed;
  };
 },
 SendCallbackForDialogContent: function() {
  this.ownerControl.callbackOwner = this;
  this.ownerControl.SendCallback(__aspxDialogFormCallbackStatus, this.name, false);
 },
 ShowLoadingPanelInDialogPopup: function() {
  var dialogPopup = this.GetDialogPopup();
  dialogPopup.SetContentHtml("");
  var contentElement = dialogPopup.GetWindowContentElement(-1);
  this.ownerControl.CreateLoadingDiv(contentElement);
  this.ownerControl.CreateLoadingPanelInsideContainer(contentElement);
  this.ownerControl.RestoreLoadingDivOpacity();
 },
 ShowLoadingPanelOverDialogPopup: function() {
  var offsetElement = _aspxGetParentByTagName(this.GetDialogPopup().GetWindowContentElement(-1), "table");
  this.ownerControl.CreateLoadingDiv(document.body, offsetElement);
  this.ownerControl.CreateLoadingPanelWithAbsolutePosition(document.body, offsetElement);
  this.ownerControl.RestoreLoadingDivOpacity();
 },
 HideLoadingPanelOverDialogPopup: function() {
  this.ownerControl.HideLoadingElements();
 }, 
 HideDialog: function(evt, dontRaiseClosing) {
  if(dontRaiseClosing || !this.OnClosing()) {
   this.HideDialogPopup();
   this.OnCloseButtonClick();
     this.OnClose();
  }
 },
 HideDialogPopup: function() {
  this.GetDialogPopup().DoHideWindow(-1, true);
 },
   OnCallback: function(result) {
  this.ExecuteInternal(result);
    this.AddDialogContentToHash(this.name, result);    
   },
 OnCallbackError: function(result, data) {
  this.ownerControl.callbackOwner = null;
 },
 OnEndCallback: function() {
  this.ownerControl.callbackOwner = null;
    this.OnInitComplete();
 },
 OnClosing: function(args) {
  return false;
 },
 OnCloseButtonClick: function() { },
 OnClose: function() {
  ASPxDialog.RemoveLastDialog(this.ownerControl);
 },
   OnComplete: function(result, params) {
    this.HideDialogPopup();
  this.DoCustomAction(result, params);
   },
 OnDocumentKeyPress: function(evt) {
  if (!this.editorKeyDownProccesed) {
   var handler = this.keyDownHandlers[_aspxGetShortcutCode(evt.keyCode, evt.ctrlKey, evt.shiftKey, evt.altKey)];
   if(handler)
    this[handler](evt);
  }
  this.editorKeyDownProccesed = false;
 },
 OnInnerEditorKeyDown: function(evt, isProcessed) {
  this.editorKeyDownProccesed = _aspxIsExists(isProcessed) ? !isProcessed : false;
 },
 OnInitComplete: function() {
  this.InitCustomKeyboardHandling();
  this.InitializeDialogFields(this.initInfo);
  this.SetFocusInField();
 }
});
ASPxDialog.GetOnClosingEventHandler = function(owner) {
 return ASPxDialog.GetPopupEventHandlerCore(owner, function(curDialog, args) {
  curDialog.OnClosing(args);
 });
};
ASPxDialog.GetOnCloseButtonClickEventHandler = function(owner) {
 return ASPxDialog.GetPopupEventHandlerCore(owner, function(curDialog, args) {
  curDialog.OnCloseButtonClick();
 });
};
ASPxDialog.GetOnCloseEventHandler = function(owner) {
 return ASPxDialog.GetPopupEventHandlerCore(owner, function(curDialog, args) {
  curDialog.OnClose();
 });
};
ASPxDialog.GetPopupEventHandlerCore = function(owner, action) {
 return function(s, e) {
  var curDialog = ASPxDialog.GetLastDialog(owner);
  if(curDialog)
   return action(curDialog, e);
 };
};
ASPxDialog.PushDialogToCollection = function(ownerControl, dialog) {
 if(!ownerControl.dialogArray)
  ownerControl.dialogArray = [ ];
 ownerControl.dialogArray.push(dialog);
};
ASPxDialog.GetLastDialog = function(ownerControl) {
 if(ownerControl.dialogArray) {
  var length = ownerControl.dialogArray.length;
  return length > 0 ? ownerControl.dialogArray[length - 1] : null;
 }
 return null;
};
ASPxDialog.RemoveLastDialog = function(ownerControl) {
 var array = ownerControl.dialogArray;
 if(array && array.length > 0)
  _aspxArrayRemoveAt(array, array.length - 1);
};
ASPxDialog.GetOwnerControl = function(name) {
 return aspxGetControlCollection().Get(name ? name : __aspxCurrentControlNameInDialog);
};
ASPxDialog.GetCurrentDialog = function(name) {
 var ownerControl = ASPxDialog.GetOwnerControl(name);
 return ownerControl ? ASPxDialog.GetLastDialog(ownerControl) : null;
};
function aspxDialogComplete(result, params) {
 var curDialog = ASPxDialog.GetCurrentDialog();
 if (curDialog != null)
  return curDialog.OnComplete(result, params);
}
function aspxDialogDocumentKeypress(evt) {
 var curDialog = ASPxDialog.GetCurrentDialog();
 if (curDialog != null)
  curDialog.OnDocumentKeyPress(evt);
}
var __aspxActiveSpellChecker = null;
var __aspxSCFormPostFix = ":SCFPR:";
var __aspxSCOptionsPrefix = "Options:";
var __aspxSCErrorMarker = "^^^DXError^^^";
var __aspxSCCallbackArgumentToGetSpellCheckOptionsFormContent = "DialogForm:SpellCheckOptionsForm";
var __aspxSCCallbackArgumentToGetSpellCheckFormContent = "DialogForm:SpellCheckForm";
ASPxClientSpellChecker = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackError = false;
  this.checkingText = null;
  this.anchorElement = null;
  this.editorElement = null;
  this.checkedContainer = null;
  this.checkedText = ""; 
  this.editorHelper = new ASPxEditorHelper();
  this.containerBrowser  = new ASPxContainerBrowser();
  this.formHandler = null;
  this.spellCheckForm = null;
  this.optionsForm = null;
  this.isOptionsForm = false;
  this.preventHideEvents = false;
  this.checkedElementID = "";
  this.showOneWordInTextPreview = false;
  this.finishSpellChecking = "";
  this.spellCheckFormCaption = "";
  this.optionsFormCaption = "";
  this.noSuggestionsText = "";
  this.BeforeCheck = new ASPxClientEvent();
  this.CheckCompleteFormShowing = new ASPxClientEvent();
  this.AfterCheck = new ASPxClientEvent();
  this.WordChanged = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  this.constructor.prototype.InlineInitialize.call(this);
  this.finishSpellChecking = unescape(this.finishSpellChecking);
  this.spellCheckFormCaption = unescape(this.spellCheckFormCaption);
  this.optionsFormCaption = unescape(this.optionsFormCaption);
  this.noSuggestionsText = unescape(this.noSuggestionsText);
 },
 Check: function() {  
  this.CheckElementById(this.checkedElementID);
 },
 CheckElement: function(element) { 
  if(!element) return;
  var inputElement = this.FindDxEditorInputElement(element);
  if (inputElement != null)
   element = inputElement;
  if(this.CanCheckControl(element.id))
   this.CheckElementCore(element);
  else
   this.ContinueOrFinishCheck(element);
 },
 CheckElementById: function(id) {
  var element = this.FindDxEditorInputElementById(id);
  if(!element)
   element = _aspxGetElementById(id);
  this.CheckElement(element);
 },
 CheckElementsInContainer: function(containerElement) {
  if(containerElement) {
   this.checkedContainer = containerElement;
   var editor = this.FindNextEditorInContainer(containerElement, null);
   if(editor)
    this.CheckElement(editor);
   else
    this.ShowFinishMessageBox();
  }  
 },
 CheckElementsInContainerById: function(containerId) {
  var container = _aspxGetElementById(containerId);
  this.CheckElementsInContainer(container);
 },
 CheckText: function(text, anchorElement) { 
  this.CheckCore(text, anchorElement, null, null);
 }, 
 FindDxEditorInputElement: function(obj) {
  if(ASPxIdent.IsASPxClientEdit(obj))
   return obj.GetInputElement();
  else if(_aspxIsExistsElement(obj) && obj.id)
   return _aspxGetChildById(obj, obj.id + "_I"); 
  return null;
 },
 FindDxEditorInputElementById: function(id) {
  var control = aspxGetControlCollection().Get(id);
  if(control != null && ASPxIdent.IsASPxClientEdit(control))
   return control.GetInputElement();
  return null;
 }, 
 GetEditorID: function(element) {
  var id = "";
  if (element) {
   var editor = this.editorHelper.GetDXEditorByInput(element);
   id = editor ? editor.name : element.id;
  }
  return id; 
 }, 
 GetDialogPopupControl: function(name) {
  return aspxGetControlCollection().Get(this.name + "_" + name);
 },
 GetOptionsHiddenField: function() {
  return document.getElementById(this.name + "_SettingsHiddenField");
 },  
 GetSpellCheckForm: function() {
  if(!this.spellCheckForm)
   this.spellCheckForm = new SpellCheckForm("SpellCheckForm", this);
  return this.spellCheckForm;
 },
 GetOptionsForm: function() {
  if(!this.optionsForm)
   this.optionsForm = new SpellCheckOptionsForm("SpellCheckOptionsForm", this);
  return this.optionsForm;
 }, 
 SetOptionsHiddenField: function(callbackResult) {
  if(callbackResult.indexOf(__aspxSCOptionsPrefix) == 0) {
   var i = callbackResult.indexOf(";");
   this.GetOptionsHiddenField().value = callbackResult.slice(8, i); 
   return callbackResult.slice(i +  1);
  }
  return callbackResult;
 },
 CanCheckControl: function(id) {
  return this.RaiseBeforeCheck(id);
 },   
 ContinueCheckContainer: function(nextEditor) {
  if (this.editorElement)
   this.RaiseAfterCheck(this.GetEditorID(this.editorElement), this.checkingText);
  this.checkedText = null;
  this.CheckElement(nextEditor);
 },
 ContinueOrFinishCheck: function(currentElement) {
  if(this.checkedContainer){  
   var editor = this.FindNextEditorInContainer(this.checkedContainer, currentElement);
   if(editor){
    this.ContinueCheckContainer(editor);
    return;
   }
   else 
    this.RaiseAfterCheck(this.GetEditorID(currentElement), this.checkingText);
  }
  var spellCheckForm = this.GetSpellCheckForm();
  if(spellCheckForm.IsVisible() != null)
   spellCheckForm.GetDialogPopup().Hide();
  if(!this.checkedContainer)
   this.RaiseAfterCheck(this.GetEditorID(currentElement), this.checkingText);
  this.ShowFinishMessageBox();
  __aspxActiveSpellChecker = null;
 },
 CheckElementCore: function(element) { 
  if (ASPxEditorHelper.IsEditableEditNode(element))
   this.CheckCore(element.value, element, element, null);
  else
   this.ContinueOrFinishCheck(element);
 },
 CheckByCallbackResult: function(text, result, anchorElement) {  
  this.CheckCore(text, anchorElement, null, result);
 }, 
 CheckCore: function(text, anchorElement, editorElement, callResult) { 
  __aspxActiveSpellChecker = this;
  this.checkingText = text;
  this.anchorElement = anchorElement || document.body;
  this.editorElement = editorElement;
  __aspxCurrentControlNameInDialog = this.name;
  if(this.formHandler == null)
   this.formHandler = new ASPxSpellCheckerFormHandler(this);  
  if(callResult != null)
   this.OnCallback(callResult);
  else if(text != "")
   this.SendCallback(this.CreateCallbackArgumentToCheckText(text));
  else 
   this.ContinueOrFinishCheck(this.editorElement);
 }, 
 ReCheck: function(text) {
  var callbackParam = this.CreateCallbackArgumentToCheckText(text);
  this.checkingText = text;
  this.SendCallback(callbackParam);
 },
 CreateCallbackArgumentToCheckText: function(text) {
  var mask = this.GetOptionsHiddenField().value;
  return ASPxClientSpellChecker.GetCallbackArgumentToCheckText(text, mask);
 },
 CreateCallbackArgumentToGetSpellCheckFormContent: function() {
  return __aspxSCCallbackArgumentToGetSpellCheckFormContent;
 },
 CreateCallbackArgumentToGetSpellCheckOptionsFormContent: function() {
  return __aspxSCCallbackArgumentToGetSpellCheckOptionsFormContent;
 },
 CreateCallbackArgumentToAddWord: function(word) {
  return "Word(" + word.length + "):" + word;
 },
 ShowFinishMessageBox: function() {
  var needShowAlert = this.formHandler == null || !this.formHandler.HasErrors();
  if(!needShowAlert)
   return;
  needShowAlert = this.RaiseCheckCompleteFormShowing();
  if(needShowAlert)
   alert(this.finishSpellChecking); 
 },
 IsDialogContentAvailable: function(name) {
  return this.dialogContentHashTable[name] != null;
 },
 HideDialog: function(result) { 
  if(this.preventHideEvents) return;
  var optionsForm = this.GetOptionsForm();
  if(optionsForm.IsVisible())
   this.OnFinishOptionsEditing(result);
  else
   this.OnFinishSpellChecking(result);
 },
 ShowOptionsForm: function(dialogContent) {
  this.isOptionsForm = true;
  var dialog = this.GetOptionsForm();
  if(!this.IsDialogContentAvailable(dialog.name)  && !dialogContent){
   this.SendCallback(this.CreateCallbackArgumentToGetSpellCheckOptionsFormContent());
  }
  else
   this.ShowOptionsFormCore(dialogContent);
 },
 ShowOptionsFormCore: function(dialogContent) { 
  var dialog = this.GetOptionsForm();
  var spellCheckForm = this.GetSpellCheckForm();
  var popupElement = this.anchorElement;
  if(spellCheckForm.IsVisible())
   popupElement = spellCheckForm.GetDialogPopup().GetWindowContentElement(-1);
  dialog.Show(popupElement);
  if(dialogContent)
   dialog.SetDialogContent(dialogContent);
 },
 ShowLoadingPanel: function() {
  var offsetElement = null;
  var spellCheckForm = this.GetSpellCheckForm();
  if(spellCheckForm.IsVisible())
   spellCheckForm.ShowLoadingPanelOverDialogPopup();
  else {
   offsetElement = this.checkedContainer ? this.checkedContainer : this.anchorElement;
   this.ShowLoadingPanelCore(document.body, offsetElement);   
  }
 },
 HideLoadingPanelCore: function() {
  var spellCheckForm = this.GetSpellCheckForm(); 
  if(spellCheckForm.IsVisible())
   spellCheckForm.HideLoadingPanelOverDialogPopup();
 },
 ShowLoadingPanelCore: function(parentElement, offsetElement) { 
  this.CreateLoadingPanelWithAbsolutePosition(parentElement, offsetElement);  
 },
 SendCallback: function(argument) {
  this.BeforeSendCallback();
  this.CreateCallback(argument);   
 },
 OnCallback: function(result) {
  this.HideLoadingPanelCore();
  this.ProcessCallbackResult(result);
 },
 IsNeedSpellCheckFormShow: function() {
  var errors = this.formHandler.errors;
  if(!errors || !errors.length)
   return false;
  for(var i = 0; i < errors.length; i++) {
   var word = errors[i].word;
   if(!this.formHandler.FindWord(this.formHandler.ignoreAllList, word))
    return true;
  }
  return false;
 },
 ProcessCallbackResult: function(resultObj) {
  if (_aspxIsExists(resultObj.options))
   this.GetOptionsHiddenField().value = resultObj.options;
  if(!this.isOptionsForm) {    
   var errorCount = resultObj.errorCount || 0;   
   if(errorCount > 0) {
    this.formHandler.Initialize(errorCount, resultObj.startErrorWordPositionArray,
           resultObj.wrongWordLengthArray, resultObj.suggestionsArray);
    this.formHandler.BeforeShowSpellCheckerForm();
    if(this.IsNeedSpellCheckFormShow()) {
     this.GetSpellCheckForm().Show(this.anchorElement);
     if(_aspxIsExists(resultObj.dialogContent))
      this.GetSpellCheckForm().SetDialogContent(resultObj.dialogContent);
    }
   }
   else
    if(!this.checkedContainer)
     this.OnFinishSpellChecking(false);
  }
  else
   this.ShowOptionsForm(resultObj.dialogContent);
 },
 DoEndCallback: function() {
  this.constructor.prototype.DoEndCallback.call(this);  
  if(this.callbackError){
   this.callbackError = false;
   return;
  }
  if(!this.isOptionsForm) {
   if(this.formHandler.errorCount > 0) {
    this.GetSpellCheckForm().OnEndCallback();
    this.formHandler.ShowSpellCheckerForm();
   } else if(this.checkedContainer) {
       var editor = this.FindNextEditorInContainer(this.checkedContainer, this.editorElement);
       if(editor)
        this.ContinueCheckContainer(editor);
       else {
        this.OnFinishSpellChecking(false);
        this.ShowFinishMessageBox();
       }
    }
    else
     this.ShowFinishMessageBox();
  }
  else
   this.InitializeOptionsDialogFields();   
 },
 OnCallbackError: function(result, data){
  this.callbackError = true;
  this.constructor.prototype.OnCallbackError.call(this, result, data);
 },
 BeforeSendCallback: function() {
  this.ShowLoadingElements();
 },
 AddToDictionary: function() {
  this.formHandler.AddToDictionaryClick();
 },
 AddWord: function(word) {
  this.formHandler.ClearErrorSelection();
  var text = this.checkedText;
  var callbackParam = this.CreateCallbackArgumentToCheckText(text);
  callbackParam = callbackParam.concat(":", this.CreateCallbackArgumentToAddWord(word));
  this.checkingText = text;  
  this.SendCallback(callbackParam);
 }, 
 Change: function() {
  this.formHandler.ChangeClick();  
 },
 ChangeAll: function() {
  this.formHandler.ChangeAllClick();
 },
 Ignore: function() {
  this.formHandler.IgnoreClick();
 }, 
 IgnoreAll: function() { 
  this.formHandler.IgnoreAllClick();
 }, 
 Cancel: function() {
  this.formHandler.Cancel();
 },
 ListBoxItemChanged: function(listBox, e) {
  this.formHandler.ListBoxItemChanged(listBox);
 }, 
 TextBoxKeyPress: function(evt) {
  this.formHandler.TextBoxKeyPress(_aspxGetKeyCode(evt));
 }, 
 TextBoxKeyDown: function(evt) {
  this.formHandler.TextBoxKeyDown(_aspxGetKeyCode(evt));
 },
 SCListBoxItemDoubleClick: function() {
  this.formHandler.SCListBoxItemDoubleClick();
 },
 OnWordChanged: function() {
  if(this.editorElement)
   this.editorHelper.SetText(this.editorElement, this.checkedText);
  this.RaiseWordChanged(this.GetEditorID(this.editorElement), this.checkedText);
 },
 OnFinishSpellCheckingCore: function(change) {
  var checkedText = this.checkingText;
  this.formHandler.ClearErrorSelection();
  if(change) {
   checkedText = this.checkedText;
   if(this.editorElement)
    this.editorHelper.SetText(this.editorElement, checkedText);    
  }
  this.formHandler.ClearInternalFields();
  this.RaiseAfterCheck(this.GetEditorID(this.editorElement), checkedText);
  this.checkingText = null;
  this.anchorElement = null;
  this.editorElement = null;
  this.checkedText = null;
 },
 OnFinishSpellChecking: function(change) {
  this.preventHideEvents = true;
  if(change && this.checkedContainer){
   var editor = this.FindNextEditorInContainer(this.checkedContainer, this.editorElement);
   if(editor){
    this.OnFinishSpellCheckingCore(change);
    this.ContinueCheckContainer(editor);
    this.preventHideEvents = false;
    return;
   }
  }
  var spellCheckForm = this.GetSpellCheckForm();
  if(spellCheckForm.IsVisible() != null)
   spellCheckForm.GetDialogPopup().Hide();
  this.OnFinishSpellCheckingCore(change);
  if(change) 
   this.ShowFinishMessageBox();
  __aspxActiveSpellChecker = null;
  this.preventHideEvents = false;
 }, 
 OnFinishOptionsEditing: function(change) {
  this.preventHideEvents = true;
  var optionsForm = this.GetOptionsForm();
  if(optionsForm.IsVisible() != null)
   optionsForm.GetDialogPopup().Hide();
  this.isOptionsForm = false;
  if(change) {
   this.GetOptionsHiddenField().value = this.CreateSettingsMask();
   this.ReCheck(this.checkedText);
  }
  else {
   var textBox = this.formHandler && this.formHandler.GetSCFormChangeTextBox();
   if(textBox)
    textBox.Focus();
  }
  this.preventHideEvents = false;
 },
 FindNextEditorInContainer: function(container, currentEditor) {
  var editor = this.containerBrowser.FindNextEditor(container, currentEditor);
  if(editor && editor.id && editor.id.indexOf(this.name + "_") == 0)
   editor = null;
  return editor;
 },
 CreateSettingsMask: function() {
  var mask = "";  
  mask += this.MapEditorValueToString(chkbUpperCase);
  mask += this.MapEditorValueToString(chkbMixedCase);
  mask += this.MapEditorValueToString(chkbNumbers);
  mask += this.MapEditorValueToString(chkbEmails);
  mask += this.MapEditorValueToString(chkbUrls);
  mask += this.MapEditorValueToString(chkbTags);
  mask = mask.concat(comboLanguage.GetValue()); 
  return mask;
 },
 MapEditorValueToString: function(editor) {
  return editor.GetChecked() ? "1" : "0";
 },
 InitializeOptionsDialogFields: function() {
  this.ParseSettingsMask(this.GetOptionsHiddenField().value);
 },
 ParseSettingsMask: function(mask) {
  if(!mask || mask == "")
   return;
  chkbUpperCase.SetChecked(mask.charAt(0) == "1"); 
  chkbMixedCase.SetChecked(mask.charAt(1) == "1"); 
  chkbNumbers.SetChecked(mask.charAt(2) == "1"); 
  chkbEmails.SetChecked(mask.charAt(3) == "1"); 
  chkbUrls.SetChecked(mask.charAt(4) == "1");
  chkbTags.SetChecked(mask.charAt(5) == "1");
  comboLanguage.SetValue(mask.slice(6)); 
 }
});
ASPxClientSpellChecker.Cast = ASPxClientControl.Cast;
ASPxClientSpellChecker.GetCallbackArgumentToCheckText = function(text, mask) {
 var argument = "Check(" + text.length + "):" + text;
 argument = argument.concat(":", __aspxSCCallbackArgumentToGetSpellCheckFormContent);
 var options = ASPxClientSpellChecker.GetCallbackArgumentToSaveOptions(mask);
 if(options && options != "")
  argument = argument.concat(":", options);
 return argument;
}
ASPxClientSpellChecker.GetCallbackArgumentToSaveOptions = function(mask) {
 return (mask && mask != "") ? "Options:" + mask : "";
}
ASPxSpellCheckerFormHandler = _aspxCreateClass(null, {
 constructor: function(spellChecker) {
  this.spellChecker = spellChecker;
  this.scForm = spellChecker.GetSpellCheckForm();
  this.errorCount = -1;
  this.errors = [];
  this.currentError = null;
  this.ignoreAllList = [];
  this.changeAllList = { };
  this.delta = 0;
  this.checkedTextFakeElement = null;
  this.previewTextElement = null;
  this.sampleErrorElement = null;
 },
 ClearInternalFields: function() {
  this.errorCount = -1;
  this.errors = [];
  this.currentError = null;
 },
 Initialize: function(errorCount, startErrorWordPositionArray, wrongWordLengthArray, suggestionsArray) {
  this.ClearInternalFields();
  this.wrongWordLengthArray = wrongWordLengthArray;
  this.startErrorWordPositionArray = startErrorWordPositionArray;
  this.suggestionsArray = suggestionsArray;
  this.errorCount = errorCount;
 },
 InitializeErrorArray: function() {
  _aspxArrayClear(this.errors);
  for (var i =0; i < this.errorCount; i++) {
   var error = {};
   error.wordStart = this.startErrorWordPositionArray[i];
   error.wordLength = this.wrongWordLengthArray[i];
   error.suggestions = this.suggestionsArray[i];
   error.suggestionCount = this.suggestionsArray[i].length;    
   error.word = this.GetWordByError(error);
   this.AddErrorToErrorsList(error);
  }
 },
 AddErrorToErrorsList: function(error) {
  if(this.currentError == null)
   this.errors.push(error);
  else {
   if(error.wordStart > this.currentError.wordStart)
    this.errors.push(error);
   else
    this.errorCount --;
  }
 },
 GetSCForm: function() {
  return this.scForm;
 },
 GetSCFormListBox: function (form) {
  if(typeof(_dxeSCSuggestionsListBox) != "undefined" && _dxeSCSuggestionsListBox && _aspxIsExistsElement(_dxeSCSuggestionsListBox.GetMainElement()))
   return _dxeSCSuggestionsListBox;
  return null;
 }, 
 GetSCFormChangeButton: function(form) { 
  if(typeof(_dxeSCBtnChange) != "undefined" && _dxeSCBtnChange && _aspxIsExistsElement(_dxeSCBtnChange.GetMainElement()))
   return _dxeSCBtnChange;
  return null;
 },
 GetSCFormChangeAllButton: function(form) {
  if(typeof(_dxeSCBtnChangeAll) != "undefined" && _dxeSCBtnChangeAll && _aspxIsExistsElement(_dxeSCBtnChangeAll.GetMainElement()))
   return _dxeSCBtnChangeAll;
  return null;
 },
 GetSCFormChangeTextBox: function() { 
  if(typeof(_dxeSCTxtChangeTo) != "undefined" && _dxeSCTxtChangeTo && _aspxIsExistsElement(_dxeSCTxtChangeTo.GetMainElement()))
   return _dxeSCTxtChangeTo;
  return null;
 },
 GetCheckedTextFakeElement: function() {
  if(!_aspxIsExistsElement(this.checkedTextFakeElement))
   this.checkedTextFakeElement = document.createElement("DIV");
  return this.checkedTextFakeElement;
 },
 GetSampleErrorElement: function() {
  return document.getElementById(this.spellChecker.name + "_SpellCheckSpan");  
 },
 GetCachedSampleErrorElement: function() {
  if(!_aspxIsExistsElement(this.sampleErrorElement))
   this.sampleErrorElement = this.GetSampleErrorElement();
  return this.sampleErrorElement;
 },   
 GetPreviewTextElement: function() {
  if(!_aspxIsExistsElement(this.previewTextElement))
   this.previewTextElement = document.getElementById(this.spellChecker.name + "_" + this.GetSCForm().name +"_SCCheckedDiv"); 
  return this.previewTextElement;
 },
 ClearListBoxItems: function() {
  var listBox = this.GetSCFormListBox(this.GetSCForm());
  if(listBox) 
   listBox.ClearItems();
 },
 CanPerformChangeAction: function() {
  return this.currentError.suggestionCount > 0;
 }, 
 HasErrors: function() {
  return this.errors.length > 0  || this.currentError != null;
 },
 ProcessNewError: function() {
  this.ClearErrorSelection();
  this.AdjustFormButtons();
  this.SelectError(this.currentError);
  this.PrepareFormControlsByError(this.currentError);
 },
 PrepareFormControlsByError: function(error) { 
  this.PopulateSuggestionsListBox(error);
  this.PrepareTextBox(error);
  this.SelectFirstSuggestion(); 
 },
 SetChangeButtonsEnabled: function(enabled) {
  var btnChange = this.GetSCFormChangeButton(this.GetSCForm());
  var btnChangeAll = this.GetSCFormChangeAllButton(this.GetSCForm());
  btnChange.SetEnabled(enabled);
  btnChangeAll.SetEnabled(enabled); 
 },
 SelectError: function(error) {
  var startIndex = this.GetWordStartIndex(error);
  var finishIndex = this.GetWordFinishIndex(error);   
  var text = this.spellChecker.checkedText;
  text = _aspxInsert(text, __aspxSCErrorMarker, finishIndex);
  text = _aspxInsert(text, __aspxSCErrorMarker, startIndex);
  if(this.spellChecker.editorElement != null)
   text = ASPxSpellCheckerFormHandler.PreparePreviewText(text);
  else
   text = ASPxSpellCheckerHtmlFilter.PreparePreviewHTML(text);
  startIndex = text.indexOf(__aspxSCErrorMarker);
  finishIndex = text.lastIndexOf(__aspxSCErrorMarker) + __aspxSCErrorMarker.length;
  var leftText = text.slice(0, startIndex);
  var rightText = text.slice(finishIndex);
  var element = this.GetPreviewTextElement();
  var errorSpan = this.GetCachedSampleErrorElement().cloneNode(true);
  _aspxSetElementDisplay(errorSpan, true);
  errorSpan.innerHTML = error.word;
  element.appendChild(errorSpan);
  element.innerHTML = leftText + element.innerHTML + rightText;
  this.UpdatePreviewElementScroll();
 },
 UpdatePreviewElementScroll: function() {
  var previewElement = this.GetPreviewTextElement();
  var sampleErrorElement = this.GetSampleErrorElement();
  var previewElementClientHeight = _aspxGetClearClientHeight(previewElement);
  var errorElementOffsetTop = this.getElementOffsetTop(sampleErrorElement, previewElement);
  var sampleErrorElementScrollTop = errorElementOffsetTop + sampleErrorElement.offsetHeight;
  var delta = sampleErrorElementScrollTop - previewElement.scrollTop;
  if (delta >= previewElementClientHeight || delta <=0)
   previewElement.scrollTop = errorElementOffsetTop - 10; 
 },
 getElementOffsetTop: function(element, scrollContainer) {
  var elementParent = element.parentNode;
  var offsetTop = element.offsetTop;
  while(elementParent && elementParent != scrollContainer) {
   if(elementParent.tagName == "TABLE" || elementParent.tagName == "TR")
    offsetTop += elementParent.offsetTop;
   elementParent = elementParent.parentNode;
  }
  return offsetTop;
 },
 PopulateSuggestionsListBox: function(error) {
  var listBox = this.GetSCFormListBox(this.GetSCForm());
  if(!listBox)
   return;
  listBox.BeginUpdate();
  listBox.ClearItems();
  if(error.suggestions.length > 0) {
   for(var i = 0; i < error.suggestions.length; i++)
    listBox.AddItem(error.suggestions[i]);
  }
  else {
   listBox.AddItem(this.spellChecker.noSuggestionsText);
  }
  listBox.EndUpdate();
 },
 SelectFirstSuggestion: function() {
  var listBox = this.GetSCFormListBox(this.GetSCForm());
  if(listBox.GetItemCount() > 0)
   listBox.SetSelectedIndex(0); 
 },
 ShowSpellCheckerFormCore: function() {
  this.GetPreviewTextElement().scrollTop = 0;
  this.StartProcessError(true);
 },
 ShowSpellCheckerForm: function() {
  if(this.errorCount > 0)
   this.ShowSpellCheckerFormCore();
  else
   this.FinishSpellChecking();
 },
 AddToDictionaryClick: function() {
  this.spellChecker.AddWord(this.currentError.word);
 },
 CloseSpellCheckForm: function() {
  this.GetSCForm().OnComplete(0, 0);
 }, 
 FindWord: function(wordArray, word) { 
  for(var i = 0; i < wordArray.length; i++)
   if(word == wordArray[i])
    return true;
  return false;
 },
 FindWordInChangeAllList: function(word) {
  return this.changeAllList[word] != null;
 },
 FinishSpellChecking: function() {
  this.spellChecker.OnFinishSpellChecking(true);
 },   
 StartProcessError: function(formShown) {
  this.currentError = this.GetNextError();
  if(!formShown)
   this.spellChecker.OnWordChanged();
  if(this.currentError)
   this.ProcessNewError(); 
  else
   this.FinishSpellChecking();
 },
 BeforeShowSpellCheckerForm: function() {
  this.delta = 0;
  this.spellChecker.checkedText = this.spellChecker.checkingText;
  this.InitializeErrorArray();
 },
 ChangeClick: function() {
  var suggestion = this.GetSuggestion();
  this.ChangeCore(suggestion);  
  this.StartProcessError();
 },
 IgnoreClick: function() {
  this.StartProcessError();
 },
 IgnoreAllClick: function() {  
  this.ignoreAllList.push(this.currentError.word);
  this.StartProcessError();
 }, 
 ChangeAllClick: function() {
  this.changeAllList[this.currentError.word] = this.GetSuggestion();
  this.ChangeClick();
 },    
 ListBoxItemChanged: function(listBox) { 
  var suggestion = listBox.GetSelectedItem().text;
  var textBox = this.GetSCFormChangeTextBox();
  textBox.SetValue(suggestion);
 },
 SCListBoxItemDoubleClick: function() {
  if(this.currentError.suggestionCount > 0)
   this.ChangeClick();
 }, 
 TextBoxKeyPress: function(keyCode) {
  if (keyCode > 0 && keyCode != ASPxKey.Enter && keyCode != ASPxKey.Esc)
   this.SetChangeButtonsEnabled(true);
 }, 
 TextBoxKeyDown: function(keyCode) {
  if(keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Delete)
   this.SetChangeButtonsEnabled(true); 
 },
 ChangeCore: function(suggestion) { 
  this.DoChangeWord(suggestion);
  if(suggestion)
   this.delta += suggestion.length - this.currentError.wordLength;
  else
   this.delta -= this.currentError.wordLength;
 }, 
 GetWord: function(startIndex, endIndex) {
  var text = this.spellChecker.checkedText;
  return text.substring(startIndex, endIndex);
 },
 GetText: function(tdElement) {
  var text = "";
  var textNodes = [ ];
  _aspxGetChildTextNodeCollection(tdElement, textNodes);
  for(var i = 0; i < textNodes.length; i++)
   text += textNodes[i].nodeValue;
  return text;
 }, 
 GetWordByError: function(error) {
  var startIndex = this.GetWordStartIndex(error);
  var finishIndex = this.GetWordFinishIndex(error);
  return this.GetWord(startIndex, finishIndex);
 }, 
 GetWordStartIndex: function(error) {
  return error.wordStart + this.delta;
 }, 
 GetWordFinishIndex: function(error) {
  return error.wordStart + error.wordLength + this.delta;
 },
 DoChangeWord: function(suggestion) {
  var startIndex = this.GetWordStartIndex(this.currentError);
  var finishIndex = this.GetWordFinishIndex(this.currentError);
  var text = this.spellChecker.checkedText;
  this.spellChecker.checkedText = _aspxInsertEx(text, suggestion, startIndex, finishIndex);
 },
 GetNextError: function() { 
  while(this.errors.length > 0) { 
   var error = this.errors.shift();
   var word = error.word;
   if(this.FindWordInChangeAllList(word)) { 
    this.currentError = error;
    this.ClearErrorSelection();
    this.ChangeCore(this.changeAllList[word]);
    continue;
   }
   if(!this.FindWord(this.ignoreAllList, word))
    return error;
  }
  return null;
 }, 
 GetSuggestion: function() {
  return this.GetSCFormChangeTextBox().GetText();
 },  
 AdjustFormButtons: function() {
  this.SetChangeButtonsEnabled(this.CanPerformChangeAction());
 },
 ClearErrorSelection: function() {
  var element = this.GetPreviewTextElement();   
  if(element) 
   element.innerHTML = "";
 },
 PrepareTextBox: function(error) {
  var textBox = this.GetSCFormChangeTextBox();  
  if(error.suggestions.length == 0) {
   textBox.SetValue(error.word);
   textBox.Focus();
   textBox.SelectAll();
  }
  else {
   textBox.SetValue(error.suggestions[0]);
   textBox.Focus();
  }
 } 
});
ASPxSpellCheckerFormHandler.PreparePreviewText = function(text) {
 var regExp = new RegExp("\\r\\n|\\n|\\n\\v", "g");
 text = _aspxApplyReplacement(text, [ [ /</g, '&lt;' ], [ />/g, '&gt;' ] ]);
 text = text.replace(regExp, "<br/>");
 return text;
}
var __aspxSCTextFormattingElementTagNames = [ "B", "I", "U", "S" ,"STRONG", "SMALL", "BIG", "BASEFONT", "TT", "STRIKE"];
var __aspxSCTextFormattingElementTagNameHashTable = _aspxCreateHashTableFromArray(__aspxSCTextFormattingElementTagNames);
var __aspxSCBlockElementTagNames = [ "H1", "H2", "H3", "H4" ,"H5", "H6", "CENTER" ];
var __aspxSCBlockElementTagNamesHashTable = _aspxCreateHashTableFromArray(__aspxSCBlockElementTagNames);
var __aspxSCForbiddenElementTagNames = [ "OBJECT", "APPLET", "IMG", "MAP" ,"IFRAME", "BODY", "HEAD", "SCRIPT", "LINK" ];
var __aspxSCForbiddenElementTagNamesHashTable = _aspxCreateHashTableFromArray(__aspxSCForbiddenElementTagNames);
ASPxSpellCheckerHtmlFilter = {};
ASPxSpellCheckerHtmlFilter.PreparePreviewHTML = function(html) {
 var fakeElement = document.createElement("DIV");
 _aspxSetInnerHtml(fakeElement, html);
 ASPxSpellCheckerHtmlFilter.FilterElements(fakeElement);
 return fakeElement.innerHTML;
}
ASPxSpellCheckerHtmlFilter.FilterElements = function(parentNode) {
 for (var i = parentNode.childNodes.length - 1; i >= 0 ; i--)
  ASPxSpellCheckerHtmlFilter.FilterElements(parentNode.childNodes[i]);
 ASPxSpellCheckerHtmlFilter.CleanElement(parentNode);
}
ASPxSpellCheckerHtmlFilter.CleanElement = function(element) {
 if (element.nodeType == 1) {
  var tagName = element.tagName;
  if (ASPxSpellCheckerHtmlFilter.IsTextFormattingElementTagName(tagName))
   _aspxRemoveOuterTags(element);
  else if (ASPxSpellCheckerHtmlFilter.IsBlockElementTagName(tagName))
   _aspxReplaceTagName(element, "P");
  else if (ASPxSpellCheckerHtmlFilter.IsForbiddenElementTagName(tagName))
   _aspxRemoveElement(element);
  else {
   _aspxRemoveAllAttributes(element);
   _aspxRemoveAllStyles(element);
   if (ASPxSpellCheckerHtmlFilter.IsLinkElementTagName(tagName))
    _aspxSetAttribute(element, "href", "javascript:void('0')");
  }
 }
}
ASPxSpellCheckerHtmlFilter.IsTextFormattingElementTagName = function(tagName) {
 return _aspxIsExists(__aspxSCTextFormattingElementTagNameHashTable[tagName]);
}
ASPxSpellCheckerHtmlFilter.IsBlockElementTagName = function(tagName) {
 return _aspxIsExists(__aspxSCBlockElementTagNamesHashTable[tagName]);
}
ASPxSpellCheckerHtmlFilter.IsForbiddenElementTagName = function(tagName) {
 return _aspxIsExists(__aspxSCForbiddenElementTagNamesHashTable[tagName]);
}
ASPxSpellCheckerHtmlFilter.IsLinkElementTagName = function(tagName) {
 return tagName == "A";
}
ASPxContainerBrowser = _aspxCreateClass(null, {
 constructor: function() {
  this.currentEditor = null;
  this.nextEditor = null;
  this.isCurrentEditorFound = false;
 },
 BeforeFindNextEditor: function(currentEditor) { 
  this.nextEditor = null;
  this.isCurrentEditorFound = false;  
  this.currentEditor = currentEditor;
 },
 FindNextEditor: function(container, currentEditor) { 
  this.BeforeFindNextEditor(currentEditor);
  this.FindNextEditorCore(container);
  return this.nextEditor;
 },
 FindNextEditorCore: function(container) { 
  if(this.nextEditor != null)
   return;
  for(var i = 0; i < container.childNodes.length; i++) {
   var curNode = container.childNodes[i];
   if(ASPxEditorHelper.IsEditableEditNode(curNode))
    this.ProcessEditableEditNode(curNode);
   else
    this.FindNextEditorCore(curNode);
  }
 },
 ProcessEditableEditNode: function(editNode) {
  if(this.nextEditor != null)
   return;
  if(editNode == this.currentEditor) { 
   this.isCurrentEditorFound = true;
   return;
  }
  if(this.isCurrentEditorFound || !this.currentEditor) {
   this.nextEditor = editNode;
   return;
  }
 } 
});
ASPxSpellCheckerBaseEditorHelper = _aspxCreateClass(null, {
 constructor: function() {},
 GetText: function(editor) {
  return editor.value; 
 },
 SetText: function(editor, value) {
  editor.value = value;
 },
 IsEditable: function(editor) {
  return !editor.disabled && !editor.readOnly;
 }
});
ASPxSpellCheckerASPxEditorHelper = _aspxCreateClass(ASPxSpellCheckerBaseEditorHelper, {
 constructor: function() { 
  this.constructor.prototype.constructor.call(this);
 },
 GetText: function(editor) {
  return editor.GetValue(); 
 },
 SetText: function(editor, value) {
  if(editor.SetText)
   editor.SetText(value);
  else
   editor.SetValue(value);
 },
 IsEditable: function(editor) {
  return editor.GetEnabled() && 
   ASPxSpellCheckerBaseEditorHelper.prototype.IsEditable(editor.GetInputElement());
 }
});
ASPxEditorHelper = _aspxCreateClass(null, {
 constructor: function() {
  this.standardEditorHelper = new ASPxSpellCheckerBaseEditorHelper();
  this.DXEditorHelper = new ASPxSpellCheckerASPxEditorHelper();
 },
 GetDXEditorByInput: function(inputElement) {
  var result = null;
  aspxGetControlCollection().ForEachControl(function(control) {
   if(ASPxIdent.IsASPxClientEdit(control) && control.GetInputElement() == inputElement) {
    result = control;
    return true;
   }
  });
  return result;
 },
 SetText: function(inputElement, value) {
  if(this.IsDXEditor(inputElement)) {
   this.GetDXEditorHelper().SetText(this.GetDXEditorByInput(inputElement), value);
   this.GetDXEditorByInput(inputElement).RaiseTextChanged();
  }
  else
   this.GetStandardEditorHelper().SetText(inputElement, value);
 },
 GetText: function(inputElement) {
  if(this.IsDXEditor(inputElement))
   return this.GetDXEditorHelper().GetText(this.GetDXEditorByInput(inputElement));
  else
   return this.GetStandardEditorHelper().GetText(inputElement);
 },
 IsDXEditor: function(inputElement) {
  return this.GetDXEditorByInput(inputElement) != null; 
 },
 IsEditable: function(inputElement) {
  if(this.IsDXEditor(inputElement))
   return this.GetDXEditorHelper().IsEditable(this.GetDXEditorByInput(inputElement));
  else
   return this.GetStandardEditorHelper().IsEditable(inputElement);
 },
 GetStandardEditorHelper: function() {
  return this.standardEditorHelper;
 },
 GetDXEditorHelper: function() {
  return this.DXEditorHelper;
 }
});
ASPxEditorHelper.IsEditableEditNode = function(element) {
 if(!element.tagName)
  return false;
 var tagName = element.tagName;
 if((tagName == "INPUT" && element.type == "text") || tagName == "TEXTAREA")  
  return ASPxEditorHelper.CanEditNode(element);
 return false;
}
ASPxEditorHelper.CanEditNode = function(element) {
 return !element.readOnly && !element.disabled;
}
function aspxSCIgnore(s, e) {
 __aspxActiveSpellChecker.Ignore();
}
function aspxSCIgnoreAll(s, e) {
 __aspxActiveSpellChecker.IgnoreAll();
}
function aspxSCAddToDictionary(s, e) {
 __aspxActiveSpellChecker.AddToDictionary();
}
function aspxSCChange(s, e) {
 __aspxActiveSpellChecker.Change();
}
function aspxSCChangeAll(s, e) {
 __aspxActiveSpellChecker.ChangeAll();
}
function aspxSCShowOptionsForm(s, e) {
 __aspxActiveSpellChecker.ShowOptionsForm();
}
function aspxSCListBoxItemChanged(s, e) {
 __aspxActiveSpellChecker.ListBoxItemChanged(s, e);
}
function aspxSCTextBoxKeyPress(s, e) {
 if (__aspxActiveSpellChecker != null)
  __aspxActiveSpellChecker.TextBoxKeyPress(e.htmlEvent);
}
function aspxSCTextBoxKeyDown(s, e) { 
 if (__aspxActiveSpellChecker != null)
  __aspxActiveSpellChecker.TextBoxKeyDown(e.htmlEvent);
}
function aspxSCListBoxItemDoubleClick(s, e) { 
 if (__aspxActiveSpellChecker != null)
  __aspxActiveSpellChecker.SCListBoxItemDoubleClick();
}
ASPxClientSpellChecker.prototype.RaiseBeforeCheck = function(controlId) {
 if(!this.BeforeCheck.IsEmpty()) {
  var args = new ASPxClientSpellCheckerBeforeCheckEventArgs(controlId);
  this.BeforeCheck.FireEvent(this, args);
  return !args.cancel;
 } 
 return true;
}
ASPxClientSpellCheckerBeforeCheckEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(controlId){
  this.constructor.prototype.constructor.call(this);
  this.controlId = controlId;
 }
});
ASPxClientSpellChecker.prototype.RaiseCheckCompleteFormShowing = function() {
 if(!this.CheckCompleteFormShowing.IsEmpty()) {
  var args = new ASPxClientCancelEventArgs();
  this.CheckCompleteFormShowing.FireEvent(this, args);
  return !args.cancel;
 }
 return true;
}
ASPxClientSpellChecker.prototype.RaiseAfterCheck = function(controlId, checkedText) {
 if(!this.AfterCheck.IsEmpty()) {
  var args = new ASPxClientSpellCheckerAfterCheckEventArgs(controlId, checkedText);
  this.AfterCheck.FireEvent(this, args);
 }
}
ASPxClientSpellChecker.prototype.RaiseWordChanged = function(controlId, checkedText) {
 if(!this.WordChanged.IsEmpty()) {
  var args = new ASPxClientSpellCheckerAfterCheckEventArgs(controlId, checkedText);
  this.WordChanged.FireEvent(this, args);
 }
}
ASPxClientSpellCheckerAfterCheckEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(controlId, checkedText){
  this.constructor.prototype.constructor.call(this, null);
  this.controlId = controlId;
  this.checkedText = checkedText;
 }
});

SCDialog = _aspxCreateClass(ASPxDialog, {
 constructor: function(name, spellChecker) {
  this.constructor.prototype.constructor.call(this, name);
  this.initExecuting = false;
  this.spellChecker = spellChecker;
  this.ownerControl = spellChecker;
 },
 ShowLoadingPanelInDialogPopup: function() {
 },
 Show: function(popupElement) {
  ASPxDialog.PushDialogToCollection(this.ownerControl, this);
  this.InitializePopupEvents();
  this.GetDialogPopup().SetHeaderText(this.GetDialogCaptionText());
  this.GetDialogPopup().ShowAtElement(popupElement);
 },
 InitializePopupEvents: function() {
  func = _aspxCreateEventHandlerFunction("aspxOnSCDialogClose", this.spellChecker, false);
  this.GetDialogPopup().CloseUp.AddHandler(func);
 },
 SetDialogContent: function(dialogContent) {
  var popupControl = this.GetDialogPopup();
  popupControl.SetContentHtml(dialogContent);
  if(__aspxChrome || popupControl.IeWithoutSupportDisplayTable())
   popupControl.AdjustSize();   
  this.AddDialogContentToHash(this.name, dialogContent);
  this.GetDialogPopup().UpdatePosition();
 },
 HideDialog: function() {
  aspxSCDialogComplete(false);
 }, 
 GetDialogPopup: function() {
  return this.spellChecker.GetDialogPopupControl(this.name); 
 },
 IsVisible: function(){
  return this.GetDialogPopup().IsVisible();
 },
 OnInitComplete: function() {
  ASPxDialog.prototype.OnInitComplete.call(this);
  this.GetDialogPopup().UpdatePosition();
 }
});
SpellCheckForm = _aspxCreateClass(SCDialog , {
 DoCustomAction: function(result) {
 },
 GetDialogCaptionText: function() {
  return this.spellChecker.spellCheckFormCaption;
 },
 SendCallbackForDialogContent: function() {
 },
 SetFocusInField: function() {
  _aspxSetFocusToTextEditWithDelay(_dxeSCTxtChangeTo.name);
 },
 HideLoadingPanelOverDialogPopup: function() {
  SCDialog.prototype.HideLoadingPanelOverDialogPopup.call(this);
  if (this.spellChecker.formHandler.GetSCFormChangeButton())
  _dxeSCBtnChange.SetEnabled(true);
 },
 ShowLoadingPanelOverDialogPopup: function() {
  SCDialog.prototype.ShowLoadingPanelOverDialogPopup.call(this);
  _dxeSCBtnChange.SetEnabled(false);
 }
});
SpellCheckOptionsForm = _aspxCreateClass(SCDialog , { 
 DoCustomAction: function(result, params) {
 },   
 GetDialogCaptionText: function() {
  return this.spellChecker.optionsFormCaption;
 },
 SetFocusInField: function() {
 }
});
function aspxSCDialogComplete(result) {
 if(__aspxActiveSpellChecker)
  __aspxActiveSpellChecker.HideDialog(result);
}
function aspxOnSCDialogClose(spellChecker) {
 aspxSCDialogComplete(false);
}
ASPxClientHtmlEditorSpellChecker = _aspxCreateClass(ASPxClientSpellChecker, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.htmlEditor = null;
 },
 CreateCallback: function(callbackString) {
  this.htmlEditor.SendSpellCheckerCallback(this, callbackString);
 },
 OnCallback: function(result) {
  ASPxClientSpellChecker.prototype.OnCallback.call(this, result.spellcheck ? result.spellcheck : result);
 },
 OnEndCallback: function() {
  this.htmlEditor.ClearOwnerControlCallback();
  ASPxClientSpellChecker.prototype.DoEndCallback.apply(this, arguments);
 },
 HideDialog: function(result) { 
  ASPxClientSpellChecker.prototype.HideDialog.call(this, result);
  if(__aspxWebKitFamily)
   this.htmlEditor.GetSelection().SetFocusToDocumentStart();
  if(!this.preventHideEvents) 
   this.htmlEditor.raiseSpellingChecked();
 },
 ShowFinishMessageBox: function() {
  ASPxClientSpellChecker.prototype.ShowFinishMessageBox.call(this);
  this.htmlEditor.raiseSpellingChecked();
 }
});

ASPxClientHtmlEditorSelection = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
  this.clientSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
  this.clientSelection.Save();
  this.isControlSelected = this.clientSelection.IsControl();
  this.html = this.clientSelection.GetHtmlText();
  this.text = this.clientSelection.GetText();
  this.selectedElement = this.clientSelection.GetParentElement();
 },
 Apply: function() {
  this.clientSelection.Restore();
 },
 GetIsControlSelected: function() {
  return this.isControlSelected;
 },
 GetSelectedElement: function() {
  return this.selectedElement;
 },
 GetHtml: function() {
  if(!this.htmlEditor.IsDesignView()) return;
  return this.html;
 },
 GetText: function() {
  if(!this.htmlEditor.IsDesignView()) return;
  return this.text;
 },
 IsCollapsed: function() {
  return this.GetHtml().length == 0 || (__aspxIE && (this.GetHtml().indexOf("&nbsp;") > -1) && this.GetText().length == 0);
 },
 GetElements: function(removeEmptyElements) {
  var selection = this.htmlEditor.GetSelection();
  var elements = [];
  if(selection.html != "" && selection.selectedElement.tagName == "IMG")
   elements.push(selection.selectedElement);
  else if(selection.html != "") { 
   var bm = selection.clientSelection.GetExtendedBookmark();
   elements = this.GetElementsCore(bm, removeEmptyElements);
   selection.clientSelection.SelectExtendedBookmark(bm);
  }
  if(elements.length == 1 && elements[0].tagName == "BODY")
   elements = _aspxCollectionToArray(elements[0].childNodes);
  elements = this.TryUnionElements(elements);
  return elements;
 },
 GetElementsCore: function(bm, removeEmptyElements) {
  var bmElements = ASPxClientSelection.GetBookmarkElements(bm, this.clientSelection.contentDocument);
  if(!__aspxIE)
   this.PrepareBookmarks(bmElements.startMarker, bmElements.endMarker);
  return this.htmlEditor.selectionHelper.GetSelectedElements(bmElements.startMarker, bmElements.endMarker, removeEmptyElements);
 },
 TryUnionElements: function(elements) {
  if(elements.length > 1) {
   var firstEl = elements[0];
   var lastEl = elements[elements.length-1];
   if(firstEl.parentNode == lastEl.parentNode && firstEl.parentNode.tagName != "BODY" && !firstEl.previousSibling && !lastEl.nextSibling)
    elements = [firstEl.parentNode];
  }
  return elements;
 },
 PrepareBookmarks: function(startBm, endBm) {
  if(startBm.previousSibling && startBm.previousSibling.nodeType == 3 && startBm.previousSibling.nodeValue == "")
   _aspxRemoveElement(startBm.previousSibling);
  if(endBm.nextSibling && endBm.nextSibling.nodeType == 3 && endBm.nextSibling.nodeValue == "")
   _aspxRemoveElement(endBm.nextSibling);
 },
 SetHtml: function(html, addToHistory) {
  addToHistory = _aspxIsExists(addToHistory) ? addToHistory : true;
  this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.PASTEHTML_COMMAND, html, addToHistory);
 },
 SetHtmlInternal: function(html) {
  if(!this.htmlEditor.IsDesignView()) return;
  html = ASPxClientHtmlEditor.ProtectUrlsInHTML(html);
  var processingContainer = document.createElement("DIV");
  processingContainer.innerHTML = html;
  this.htmlEditor.ProcessInnerHtml(processingContainer);
  html = processingContainer.innerHTML;
  if(this.selectedElement.tagName == "IMG") {
   if(!__aspxWebKitFamily)
    this.selectedElement.parentNode.removeChild(this.selectedElement);
   this.InsertHtml(html);
   this.htmlEditor.SaveSelection();
  }
  else {
   var elements = this.GetElements();
   if(__aspxIE && this.selectedElement.tagName == "DIV" && elements.length == 1 && elements[0] == this.selectedElement) {
    var doc = this.htmlEditor.GetDesignViewDocument();
    this.htmlEditor.RemoveFocus();
    var wrapper = doc.createElement("DIV");
    wrapper.innerHTML = html;
    var selNode = doc.createElement("SPAN");
    this.selectedElement.parentNode.insertBefore(selNode, this.selectedElement);
    _aspxRemoveElement(this.selectedElement);
    for(var child = wrapper.firstChild; child; child = wrapper.firstChild) {
       selNode.parentNode.insertBefore(child, selNode);
    }
    var _this = this;
    setTimeout(function() {
     _this.clientSelection.SelectElement(selNode, false); 
     _this.htmlEditor.SaveSelection(); 
     _aspxRemoveElement(selNode);
    }, 0);
    return;
   }
   else if(elements.length > 0) {
    var replaceElement = elements[0];
    for(var i = 1, element = elements[i]; element; element = elements[++i]) {
     if(this.IsElementCanDelete(element))
      element.parentNode.removeChild(element);
     else if(element.nodeType == 3) {
      if(this.IsTableCell(element.parentNode) && element.parentNode.childNodes.length == 1)
       element.parentNode.innerHTML = "&nbsp;";
      else
       element.nodeValue = "";
     }
     else if(element.nodeType == 1)
      element.innerHTML = this.IsTableCell(element) ? "&nbsp;" : "";
    }
    if(replaceElement.nodeType == 3) {
     var selectNode = this.CreateNode("font", "&nbsp;");
     replaceElement.parentNode.replaceChild(selectNode, replaceElement);
    }
    else {
     var nonContentElementExpr = /^(IMG|BR|TABLE)$/i;
     var needRemoveFirstChild = !nonContentElementExpr.test(replaceElement.tagName);
     selectNode = needRemoveFirstChild ? this.ReplaceNodeContent(replaceElement) : replaceElement;
    }
    this.clientSelection.SelectElement(selectNode, true);
   }
   if(__aspxIE && __aspxBrowserMajorVersion < 11)
    html += "<span id='selectNode'></span>";
   this.InsertHtml(html, selectNode);
   var doc = this.htmlEditor.GetDesignViewDocument();
   if(__aspxIE) {
    selectNode = doc.getElementById('selectNode');
    if(selectNode) {
     this.clientSelection.SelectElement(selectNode);
     _aspxRemoveElement(selectNode);
    }
    var fstNode = doc.getElementById('replaceBr');
    if(fstNode)
     _aspxRemoveElement(fstNode);
   }
   else {
    if(_aspxIsExistsElement(selectNode) && selectNode.childNodes.length > 0)
     _aspxRemoveOuterTags(selectNode);
    var fstNode = doc.getElementById('replaceBr');
    if(fstNode)
     _aspxRemoveElement(fstNode);
    if(needRemoveFirstChild && replaceElement) {
     if(replaceElement.childNodes.length == 0)
      _aspxRemoveElement(replaceElement); 
    }
   }
   this.htmlEditor.SaveSelection();
  }
 },
 CreateNode: function(tagName, innerHtml) {
  if(!__aspxOpera) {
   var node = this.htmlEditor.GetDesignViewDocument().createElement(tagName);
   node.innerHTML = innerHtml;
  } 
  else
   var node = _aspxCreateHtmlElementFromString("<" + tagName + ">" + innerHtml + "</" + tagName + ">");
  return node;
 },
 IsElementCanDelete: function(element) {
  var nonDeleteElementExpr = /^(TR|TD|TH|THEAD|TBODY|TFOOT)$/i;
  return (element.nodeType == 3 && element.parentNode.tagName != "TD") || 
      (element.nodeType == 1 && !nonDeleteElementExpr.test(element.tagName));
 },
 IsTableCell: function(element) {
  return element.tagName == "TD" || element.tagName == "TH";
 },
 ReplaceNodeContent: function(node) {
  if(node.nodeType != 1) return;
  var nodeContent = __aspxIE ? "<br id='replaceBr' />&#xA;" : "<br id='replaceBr' />"; 
  node.innerHTML = nodeContent;
  var replaceNode = this.htmlEditor.GetDesignViewDocument().createElement('font');
  replaceNode.innerHTML = "&nbsp";
  node.appendChild(replaceNode);
  return replaceNode;
 },
 InsertHtml: function(html, selectNode) {
  if (__aspxIE && __aspxBrowserMajorVersion < 11)
   this.InsertHtmlIECore(html);
  else
   this.InsertHtmlCore(html, selectNode);
 },
 InsertHtmlIECore: function(html) {
  if(__aspxBrowserMajorVersion > 8) { 
   html = ASPxHtmlEditorCommands.PasteHtml.safePreLineBreaks(html);
   html = html.replace(/[\s]{2,}/g, " "); 
   html = html.replace(/\s(<[^>]+>)\s/g, " $1"); 
   html = ASPxHtmlEditorCommands.PasteHtml.restorePreLineBreaks(html);
  }
  var doc = this.htmlEditor.GetDesignViewDocument();
  if (doc.selection.type.toLowerCase() != "none")
   doc.selection.createRange().execCommand("Delete");
  if (doc.selection.type.toLowerCase() != "none") 
   doc.execCommand("Delete");
  html = ASPxClientHtmlEditor.ProtectUrlsInHTML(html);
  doc.body.setActive();
  var selRange = doc.selection.createRange();
  if (selRange && selRange.length) {
   var elem = selRange.item(0);
   if (elem && elem.tagName.toUpperCase() == "BODY") {
    var formElement = elem.getElementsByTagName("FORM")[0];
    if (formElement)
     _aspxSetInnerHtml(formElement, formElement.innerHTML + html);
   }
  }
  else {
   var rngStart = selRange.duplicate();
   rngStart.collapse(true);
   selRange.pasteHTML(html);
   rngStart.setEndPoint("StartToEnd", selRange);
   rngStart.select();
  }
  ASPxClientHtmlEditor.RestoreUrlsInDOM(this.htmlEditor.GetDesignViewDocument());
  return true;
 },
 InsertHtmlCore: function(html, selectNode) {
  var doc = this.htmlEditor.GetDesignViewDocument();
  var range = this.htmlEditor.GetDesignViewIFrameWindow().getSelection().getRangeAt(0);
  if(selectNode)
   selectNode.parentNode.removeChild(selectNode);
  html += "<span id='sbm'></span> <span id='ebm'></span>";
  var bookmark = { "startMarkerID": "sbm", "endMarkerID": "ebm" };
  var tmpNode = doc.createElement("SPAN");
  _aspxSetInnerHtml(tmpNode, html);
  if(this.selectedElement.tagName == "IMG")
   range.deleteContents();
  range.insertNode(tmpNode);
  this.selectedElement.normalize();
  var length = tmpNode.childNodes.length;
  for(var i = 0; i < length; i++)
   tmpNode.parentNode.insertBefore(tmpNode.childNodes[0], tmpNode);
  tmpNode.parentNode.removeChild(tmpNode);
  var startMarkerNode = doc.getElementById(bookmark.startMarkerID);
  var endMarkerNode = doc.getElementById(bookmark.endMarkerID);
  var previousSibling = startMarkerNode.previousSibling;
  if(!endMarkerNode.nextSibling && previousSibling && previousSibling.nodeName != "#text" && previousSibling.nodeName != "IMG" && previousSibling.offsetTop != startMarkerNode.offsetTop) {
   var textNode = document.createTextNode("\xA0");
   startMarkerNode.parentNode.insertBefore(textNode, startMarkerNode);
  }
  var selection = this.htmlEditor.GetSelection();
  selection.clientSelection.SelectExtendedBookmark(bookmark);
  selection.clientSelection.RemoveExtendedBookmark(bookmark);
  var range = this.htmlEditor.GetDesignViewIFrameWindow().getSelection().getRangeAt(0);
  range.deleteContents();
  this.htmlEditor.Focus();
  return true;
 },
 SetFocusToDocumentStart: function() {
  var doc = this.htmlEditor.GetDesignViewDocument();
  var sbm = document.createElement("SPAN");
  var ebm = document.createElement("SPAN");
  sbm.id = "sbm";
  ebm.id = "ebm";
  doc.body.insertBefore(sbm, doc.body.firstChild)
  doc.body.insertBefore(ebm, sbm)
  var bookmark = { "startMarkerID": "sbm", "endMarkerID": "ebm" };
  this.htmlEditor.GetSelection().clientSelection.SelectExtendedBookmark(bookmark);
 }
});
ASPxClientHtmlEditorSelection.ElementsSelectionHelper = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
 },
 GetSelectedElements: function(startBm, endBm, removeEmptyElements) {
  var elements = [];
  var doc = this.htmlEditor.GetDesignViewDocument();
  startBm = typeof(startBm) == "string" ? _aspxGetElementByIdInDocument(doc, startBm) : startBm;
  endBm = typeof(endBm) == "string" ? _aspxGetElementByIdInDocument(doc, endBm) : endBm;
  var chain1 = this.GetAncestorsChain(startBm);
  var chain2 = this.GetAncestorsChain(endBm);
  var commonAncestor = this.FindCommonAncestor(chain1, chain2);
  if(this.IsNeedExchangeBmPlace(chain1, chain2)) {
   var tmp = chain1;
   chain1 = chain2;
   chain2 = tmp;
   tmp = startBm;
   startBm = endBm;
   endBm = tmp;
  }
  var curAncestor = startBm.parentNode;
  var curElement = startBm;
  while(curAncestor != commonAncestor) {
   while(curElement.nextSibling) {
    elements.push(curElement.nextSibling);
    curElement = curElement.nextSibling;
   }
   curElement = curAncestor;
   curAncestor = curAncestor.parentNode;
  }
  var rightLeftTreeNode = chain2[_aspxArrayIndexOf(chain2, commonAncestor) + 1];
  rightLeftTreeNode = rightLeftTreeNode ? rightLeftTreeNode : endBm;
  while(this.GetNextSibling(curElement) != rightLeftTreeNode) {
   elements.push(this.GetNextSibling(curElement));
   curElement = this.GetNextSibling(curElement);
  }
  curAncestor = endBm.parentNode;
  curElement = endBm;
  var rightElements = [];
  var saveAllRightTree = true;
  while(curAncestor != commonAncestor) {
   if(saveAllRightTree && this.GetNextSibling(curElement) == null && curAncestor.parentNode == commonAncestor)
    rightElements.push(curAncestor);
   else {
    saveAllRightTree = false;
    while(curElement.previousSibling) {
     rightElements.push(curElement.previousSibling);
     curElement = curElement.previousSibling;
    }
   }
   curElement = curAncestor;
   curAncestor = curAncestor.parentNode;
  }
  elements = elements.concat(rightElements.reverse());
  if(elements.length > 0)
   elements[0] = this.PrepareOuterSelectNode(elements[0], startBm, endBm);
  if(elements.length > 1)
   elements[elements.length - 1] = this.PrepareOuterSelectNode(elements[elements.length - 1], endBm, startBm);
  elements = this.MergeTextNodes(elements);
  if(elements.length == 1 && elements[0].tagName == "BODY")
   elements = _aspxCollectionToArray(elements[0].childNodes);
  if(removeEmptyElements)
   this.RemoveEmptyElements(elements);
  return elements;
 },
 MergeTextNodes: function(elements) {
  for(var i = 0; el = elements[i]; i++) {
   var nextEl = elements[i+1];
   if(el.nodeType == 3 && nextEl && nextEl.nodeType == 3 && nextEl.parentNode == el.parentNode) {
    el.nodeValue += nextEl.nodeValue;
    elements.splice(i + 1, 1);
    _aspxRemoveElement(nextEl);
    elements[i] = this.FindParentNode(el);
    i++;
   }
  }
  return elements;
 },
 RemoveEmptyElements: function(elements) {
  for(var i = 0, element; element = elements[i]; i++) {
   if(element.nodeType == 3 && (!element.nodeValue || (element.length == 1 && (element.nodeValue == "\n" || element.nodeValue == "\r")))) {
    elements.splice(i, 1);
    i--;
   }
  }
 },
 FindParentNode: function(el) {
  if(el.parentNode.childNodes.length == 1 && el.parentNode.tagName != "BODY")
   return this.FindParentNode(el.parentNode);
  return el;
 },
 FindCommonAncestor: function(chain1, chain2) {
  for(var i = 0; i < Math.max(chain1.length, chain2.length); i++) {
   if(chain1[i] != chain2[i])
    return chain1[i-1];
  }
  return chain1[chain1.length-1];
 },
 GetAncestorsChain: function(element) {
  var parent = element.parentNode;
  var chain = [];
  while(parent.tagName != "BODY") {
   chain.push(parent);
   parent = parent.parentNode;
  }
  chain.push(parent);
  var result = chain.reverse();
  result.push(element);
  return result;
 },
 PrepareOuterSelectNode: function(node, bmElement1, bmElement2) {
  var parent = node.parentNode;
  var parentChildCount = parent.childNodes.length;
  if(parent.tagName != "BODY") {
   var canMoveToParent = 
    parentChildCount == 1 ||
    (parentChildCount == 2 && (bmElement1.parentNode == parent || bmElement2.parentNode == parent)) ||
    (parentChildCount == 3 && bmElement1.parentNode == parent && bmElement2.parentNode == parent);
   if(canMoveToParent)
    return this.PrepareOuterSelectNode(parent, bmElement1, bmElement2);
  }
  return node;
 },
 IsNeedExchangeBmPlace: function(chain1, chain2) {
  var chainLength = Math.max(chain1.length, chain2.length);
  for(var i = 0; i < chainLength; i++) {
   if(i > 0 && chain1[i] != chain2[i])
    return _aspxArrayIndexOf(chain1[i - 1].childNodes, chain1[i]) > _aspxArrayIndexOf(chain1[i - 1].childNodes, chain2[i]);
  }
  return false;
 },
 GetNextSibling: function(node) {
  if(!__aspxIE || node.nextSibling)
   return node.nextSibling;
  var parent = node.parentNode;
  if(parent) {
   var index = _aspxArrayIndexOf(parent.childNodes, node);
   if(index < parent.childNodes.length - 1)
    return parent.childNodes[index + 1];
  }
  return null;
 }
});
ASPxClientHtmlEditorSelection.Create = function(htmlEditor) {
 var contentWindow = htmlEditor.GetDesignViewIFrameWindow();
 return ASPxClientSelection.Create(contentWindow);
}
ASPxClientHtmlEditorSelection.SelectElement = function(element, htmlEditor, selectAllContent) {
 if (!_aspxIsExists(selectAllContent))
  selectAllContent = true;
 var iframeWindow = htmlEditor.GetDesignViewIFrameWindow();
 return __aspxIE && __aspxBrowserMajorVersion < 11 ? ASPxClientSelectionIE.SelectElementInDocument(element, iframeWindow.document, selectAllContent) :
      ASPxClientSelectionNSOpera.SelectElementInDocument(element, iframeWindow.document, iframeWindow, selectAllContent);
}
ASPxClientSelection = _aspxCreateClass(null, {
 constructor: function(contentWindow) {
  this.contentWindow = contentWindow;
  this.contentDocument = contentWindow.document;
  this.startContainer = null;
  this.endContainer = null;
  this.startOffset = 0;
  this.endOffset = 0;
 },
 GetHtmlText: function() {
 },
 Save: function() {
 },
 Restore: function() {
 },
 GetText: function() {
 },
 GetHtmlText: function() {
 },
 GetStartContainer: function() {
  this.FindStartEndContainerInternal();
  return this.startContainer;
 },
 GetEndContainer: function() {
  this.FindStartEndContainerInternal();
  return this.endContainer;
 },
 GetStartOffset: function() {
  this.FindStartEndContainerInternal();
  return this.startOffset;
 },
 GetEndOffset: function() {
  this.FindStartEndContainerInternal();
  return this.endOffset;
 },
 IsControl: function() {
  return false;
 },
 IsTextOnly: function() {
  return false;
 },
 GetRange: function() {
 },
 GetExtendedBookmark: function() {
  return null;
 },
 GetSelectionMarkerElement: function(isStart) {
  return null;
 },
 SelectExtendedBookmark: function(bookmark) {
 },
 RemoveExtendedBookmark: function(bookmark) {
  if (bookmark) {
   var bmElements = ASPxClientSelection.GetBookmarkElements(bookmark, this.contentDocument);
   _aspxRemoveElement(bmElements.startMarker);
   _aspxRemoveElement(bmElements.endMarker);
  }
  return null;
 },
 FindStartEndContainer: function() {
 },
 FindStartEndContainerInternal: function() {
  if (this.startContainer || this.endContainer)
   return;
  this.FindStartEndContainer();
 }
});
ASPxClientSelection.IsHtml = function(text) {
 if (!text || !text.match) return text;
 return text.match(/</);
}
ASPxClientSelection.Create = function(contentWindow) {
 return __aspxIE && __aspxBrowserMajorVersion < 11 ? new ASPxClientSelectionIE(contentWindow) : new ASPxClientSelectionNSOpera(contentWindow);
}
ASPxClientSelection.UniqCounter = 0;
ASPxClientSelection.CreateUniqueID = function() {
 ASPxClientSelection.UniqCounter++;
 return 'dx_temp_' + (new Date()).valueOf() + '_' + ASPxClientSelection.UniqCounter;
}
ASPxClientSelection.IsControlElement = function(element) {
 if (element.nodeType == 1) {
  var tagName = element.tagName.toUpperCase();
  return tagName == "TABLE" || tagName == "IMG";
 }
 return false;
};
ASPxClientSelection.GetBookmarkElements = function(bookmark, document) {
 return {
  startMarker: _aspxGetElementByIdInDocument(document, bookmark.startMarkerID),
  endMarker: _aspxGetElementByIdInDocument(document, bookmark.endMarkerID)
 };
};
ASPxClientSelection.InsertNodeAtPosition = function(containerNode, insertNode, containeNodeOffset, doc) {
 var newTextNode = null;
 if ((containerNode.nodeType == 3) && (insertNode.nodeType == 3))
  containerNode.insertData(containeNodeOffset, insertNode.nodeValue);
 else {
  var afterNode;
  if (containerNode.nodeType == 3) {
   var textNode = containerNode;
   containerNode = textNode.parentNode;
   var nodeText = textNode.nodeValue;
   var textBefore = nodeText.substr(0, containeNodeOffset);
   var textAfter = nodeText.substr(containeNodeOffset);
   var beforeNode = doc.createTextNode(textBefore);
   afterNode = doc.createTextNode(textAfter);
   containerNode.insertBefore(afterNode, textNode);
   containerNode.insertBefore(insertNode, afterNode);
   newTextNode = beforeNode;
   try {
    containerNode.insertBefore(beforeNode, insertNode);
   }
   catch (exc) {}
   containerNode.removeChild(textNode);
  }
  else {
   if(containerNode.childNodes.length > 0) {
    afterNode = containerNode.childNodes[containeNodeOffset];
    containerNode.insertBefore(insertNode, afterNode);
   }
   else {
    if (containerNode.tagName != "BODY")
     containerNode = containerNode.parentNode;
    containerNode.appendChild(insertNode);
   }
  }
  return newTextNode;
 }
}
ASPxClientSelectionIE = _aspxCreateClass(ASPxClientSelection, {
 constructor: function(contentWindow) {
  this.constructor.prototype.constructor.call(this, contentWindow);
 },
 Save: function() {
  if(!this.IsControl() && !_aspxGetParentByTagName(this.GetParentElement(), "DIV") && __aspxUserAgent.toLowerCase().indexOf("touch") == -1)
   this.contentWindow.focus();
  var curSelection = this.contentDocument.selection;
  var selRange = curSelection.createRange();
  if (selRange.length)
   this.sourceIndex = selRange.item(0).sourceIndex;
  else {
   this.startBookmark = this.GetBookmark(selRange);
   this.selectedRange = selRange;
   this.isCollapsed = selRange.boundingWidth == 0;
  }
 },
 Restore: function() {
  var useBookmark = false;
  var selRange;
  if(this.selectedRange)
   useBookmark = this.GetHtmlText() != this.selectedRange.htmlText;
  if (_aspxIsExists(this.sourceIndex)) {
   selRange = this.contentDocument.body.createControlRange();
   selRange.addElement(this.contentDocument.all(this.sourceIndex));
   selRange.select();
  }
  else if (_aspxIsExists(this.selectedRange)) {
   if(useBookmark) {
    selRange = this.contentDocument.body.createTextRange();
    selRange.moveToBookmark(this.startBookmark);
    selRange.select();
    selRange.collapse();
   } else {
    try {
     if(this.isCollapsed)
      this.selectedRange.collapse();
     this.selectedRange.select();
    }
    catch(e) {}
   }
  }
  this.contentWindow.focus();
 },
 GetBookmark: function(range) {
  return range.getBookmark(); 
 },
 GetSelectionMarkerElement: function(isStart) {
  var rng = this.GetRange();
  var markerID = ASPxClientSelection.CreateUniqueID();
  var makerElem = null;
  if (this.IsControl()) {
   makerElem = this.contentDocument.createElement("span");
   makerElem.id = markerID;
   var controlElem = rng.item(0);
   if (isStart)
    controlElem.parentNode.insertBefore(makerElem, controlElem);
   else
    controlElem.parentNode.insertBefore(makerElem, controlElem.nextSibling);
  }
  else {
   if(rng.parentElement) {
    var document = rng.parentElement().document || rng.parentElement().ownerDocument;
    if(document != this.contentDocument)
     return null;
   }
   if (rng.collapse)
    rng.collapse(isStart);
   try {
    rng.pasteHTML('<span id="' + markerID + '"></span>');
    makerElem = _aspxGetElementByIdInDocument(this.contentDocument, markerID);
   } catch (e) { };
  }
  return makerElem;
 },
 GetExtendedBookmark: function() {
  var controlElementID = null;
  var bookmark = null;
  if (this.IsControl()) {
   var selRange = this.contentDocument.selection.createRange();
   controlElementID = ASPxClientSelection.CreateUniqueID();
   _aspxChangeAttribute(selRange.item(0), "id", controlElementID);
   bookmark = { "controlElementID": controlElementID };
  }
  else {
   var startMarker = this.GetSelectionMarkerElement(true);
   var endMarker = this.GetSelectionMarkerElement(false);
   if (startMarker != null && endMarker != null)
    bookmark = { "startMarkerID": startMarker.id, "endMarkerID": endMarker.id };
  }
  return bookmark;
 },
 SelectExtendedBookmark: function(bookmark) {
  var rng1 = null;
  if (bookmark.controlElementID) {
   rng1 = this.contentDocument.body.createControlRange();
   var controlElement = _aspxGetElementByIdInDocument(this.contentDocument, bookmark.controlElementID);
   _aspxRestoreAttribute(controlElement, "id");
   rng1.addElement(controlElement);
  }
  else {
   var bmElements = ASPxClientSelection.GetBookmarkElements(bookmark, this.contentDocument);
   rng1 = this.contentDocument.body.createTextRange();
   if (_aspxIsExists(bmElements.startMarker))
    rng1.moveToElementText(bmElements.startMarker);
   rng1.moveStart('character', 0);
   var rng2 = this.contentDocument.body.createTextRange();
   if (_aspxIsExists(bmElements.endMarker))
    rng2.moveToElementText(bmElements.endMarker);
   rng1.setEndPoint('EndToEnd', rng2);
   rng1.moveEnd('character', 0);
   _aspxRemoveElement(bmElements.startMarker);
   _aspxRemoveElement(bmElements.endMarker);
  }
  rng1.select();
 },
 SelectElement: function(elem, selectAllContent) {
  ASPxClientSelectionIE.SelectElementInDocument(elem, this.contentDocument, selectAllContent);
 },
 GetRange: function() {
  return this.contentDocument.selection.createRange();
 },
 GetParentElement: function() {
  var ret = null;
  var rng = this.GetRange();
  if (!rng) return ret;
  if (rng.length)
   ret = rng.item(0);
  else if (rng.parentElement)
   ret = rng.parentElement();
  return ret;
 },
 GetText: function() {
  var ret = "";
  var rng = this.contentDocument.selection.createRange();
  if (_aspxIsExists(rng.text))
   ret = rng.text;
  return ret;
 },
 GetHtmlText: function() {
  var ret = "";
  var rng = this.GetRange();
  if (rng.length)
   ret = rng.item(0).outerHTML;
  else if (rng.htmlText)
   ret = rng.htmlText;
  return ret;
 },
 IsControl: function() {
  return this.contentDocument.selection.type == 'Control';
 },
 IsTextOnly: function() {
  var rng = this.contentDocument.selection.createRange();
  if (_aspxIsExists(rng.text) && _aspxIsExists(rng.htmlText))
   return (rng.text == rng.htmlText);
  return false;
 },
 FindStartEndContainer: function() {
  var startMarker = this.GetSelectionMarkerElement(true);
  var endMarker = this.GetSelectionMarkerElement(false);
  if (!startMarker && !endMarker) {
   this.startContainer = this.contentDocument.body;
   return;
  }
  this.startContainer = startMarker.parentNode;
  this.startOffset = _aspxArrayIndexOf(this.startContainer.childNodes, startMarker);
  _aspxRemoveElement(startMarker);
  this.endContainer = endMarker.parentNode;
  this.endOffset = _aspxArrayIndexOf(this.endContainer.childNodes, endMarker);
  _aspxRemoveElement(endMarker);
  if (this.startContainer != this.endContainer) {
   if (this.endOffset == 0) {
    while (this.endContainer && !this.endContainer.previousSibling)
     this.endContainer = this.endContainer.parentNode;
    if (this.endContainer)
     this.endContainer = this.endContainer.previousSibling;
   }
   else if (this.endContainer.nodeType == 1)
    this.endContainer = this.endContainer.childNodes[this.endOffset - 1];
  }
 }
});
ASPxClientSelectionIE.SelectElementInDocument = function(elem, docObj, selectAllContent) {
 if (!_aspxIsExists(selectAllContent))
  selectAllContent = true;
 var rng;
 if (ASPxClientSelection.IsControlElement(elem)) {
  rng = docObj.body.createControlRange();
  rng.addElement(elem);
 }
 else {
  try { 
   rng = docObj.selection.createRange();
  } 
  catch(e) {
   window.focus();
   docObj.parentWindow.focus();
   rng = docObj.selection.createRange();
  }
  try { 
   rng.moveToElementText(elem);
  }
  catch (e) { }
 }
 if (!selectAllContent) {
  try { 
  rng.collapse(false);
  }
  catch (e) { }
 }
 rng.select();
};
ASPxClientDialogSelectionIE = _aspxCreateClass(ASPxClientSelectionIE, {
 Save: function() {
  if(!this.IsControl())
   this.contentWindow.focus();
  var curSelection = this.contentDocument.selection;
  if (curSelection) {
   this.selectionRange = curSelection.createRange();
   if (curSelection.type.toLowerCase() == "control")
    this.sourceIndex = this.selectionRange.item(0).sourceIndex;
  }
 },
 Restore: function () {
  try {
   if(_aspxIsExists(this.sourceIndex)) {
    var selRange = this.contentDocument.body.createControlRange();
    selRange.addElement(this.contentDocument.all(this.sourceIndex));
    selRange.select();
   }
   else if(this.selectionRange)
    this.selectionRange.select();
   if(!this.IsControl())
    this.contentWindow.focus();
  } catch (e) { }
 }
});
ASPxClientSelectionNSOpera = _aspxCreateClass(ASPxClientSelection, {
 constructor: function(contentWindow) {
  this.constructor.prototype.constructor.call(this, contentWindow);
 },
 Save: function() {
  if(__aspxIE && !this.IsControl() && !_aspxGetParentByTagName(this.GetParentElement(), "DIV") && __aspxUserAgent.toLowerCase().indexOf("touch") == -1)
   this.contentWindow.focus();
   var curSelection = this.contentWindow.getSelection();
   if (curSelection) {
    this.isCollapsedSelection = curSelection.isCollapsed;   
    this.startNodePath = this.GetNodePath(this.contentDocument.documentElement, curSelection.anchorNode);   
   this.startNodeOffset = curSelection.anchorOffset;
    this.endNodePath = this.GetNodePath(this.contentDocument.documentElement, curSelection.focusNode);
   this.endNodeOffset = curSelection.focusOffset;
   if (__aspxOpera && this.NeedExchangeStartAndEndNode(this.startNodePath, this.endNodePath, this.startNodeOffset, this.endNodeOffset)) {
    var tmp = this.startNodePath;
    this.startNodePath = this.endNodePath;
    this.endNodePath = tmp;
    tmp = this.startNodeOffset;
    this.startNodeOffset = this.endNodeOffset;
    this.endNodeOffset = tmp;
   }
  }
  else {
    this.isCollapsedSelection = null;
    this.startNodePath = null;
   this.startNodeOffset = null;
    this.endNodePath = null;
   this.endNodeOffset = null;
  }
 },
 Restore: function() {
  try {
   var curSelection = this.contentWindow.getSelection();
   var startNode = this.GetNodeByPath(this.contentDocument.documentElement, this.startNodePath, true);
   var endNode = this.GetNodeByPath(this.contentDocument.documentElement, this.endNodePath, false);
   var isSelectionEqual = (curSelection.anchorNode == startNode) && (curSelection.focusNode == endNode) && 
         (curSelection.anchorOffset == this.startNodeOffset) && (curSelection.focusOffset == this.endNodeOffset) && 
         (curSelection.isCollapsed == this.isCollapsedSelection);
   if (!isSelectionEqual) { 
    ASPxClientSelectionNSOpera.RestoreByStartAndEndNodeCore(startNode, endNode, this.startNodeOffset,
                 this.endNodeOffset,
                 this.isCollapsedSelection,
                 this.contentDocument,
                 this.contentWindow);
   }
  } catch (e) { }
 },
 GetParentElement: function() {
  var ret = null;
  var rng = this.GetRange();
  if (!rng) return ret;
  var selection = this.contentWindow.getSelection();
  var startContainer = this.GetStartContainer(rng, selection);
  var endContainer = this.GetEndContainer(rng, selection);
  var startOffset = this.GetStartOffset(rng, selection);
  var endOffset = this.GetEndOffset(rng, selection);
  if (this.IsControl())
   ret = selection.anchorNode.nodeType == 3 && __aspxIE ? startContainer.nextSibling : selection.anchorNode.childNodes[selection.anchorOffset];
  else {    
   if (!rng.commonAncestorContainer.tagName) {       
    if(__aspxIE && __aspxBrowserMajorVersion >= 11 && this.contentWindow.document == rng.commonAncestorContainer &&
      this.contentWindow.document == rng.startContainer && rng.startContainer == rng.endContainer)
     return this.contentWindow.document.body;
    if (this.contentWindow.document == rng.commonAncestorContainer && 
     selection.baseNode) 
     ret = selection.baseNode.parentNode;
    else
     ret = rng.commonAncestorContainer.parentNode;
   }
   else {
    if(__aspxWebKitFamily) {
     if((rng.startContainer.nodeType == 3 && rng.startOffset != rng.startContainer.length) || (rng.endContainer.nodeType == 3 && rng.endOffset > 0))
      return rng.commonAncestorContainer;
     var getSiblingElement = function(container) { return container.nextElementSibling; };
     var startImageElement = this.GetSelectedImageElement(rng, rng.startContainer, getSiblingElement, rng.startOffset);
     if(startImageElement && startImageElement.nodeName == "IMG") {
      getSiblingElement = function(element) { return element.previousElementSibling; };
      var endImageElement = this.GetSelectedImageElement(rng, rng.endContainer, getSiblingElement, rng.endOffset);
      if(startImageElement === endImageElement)
       return startImageElement;
     }
    }
    ret = rng.commonAncestorContainer;
   }
  }
  return ret;
 },
 GetSelectedImageElement: function(rng, container, getSiblingElement, offsetValue) {
  var isImageElement = function(element) { return element && element.nodeName == "IMG" && (element.style["float"] || _aspxGetCurrentStyle(element)["float"]); };
  var getImageOrNotEmptySiblingElement = function(container) {
   for(var element = container; element; element = getSiblingElement(element)) {
    if(isImageElement(element) || element.childNodes.length > 0)
     return element;
   }
  };
  if(container.childNodes.length > 0 && isImageElement(container.childNodes[offsetValue]))
   return container.childNodes[offsetValue];
  var result = getImageOrNotEmptySiblingElement(getSiblingElement(container));
  if(isImageElement(result)) 
   return result;
  for(var parent = container.parentNode; parent && parent.nodeName != "BODY"; parent = parent.parentNode) {
   result = getImageOrNotEmptySiblingElement(getSiblingElement(parent));
   if(isImageElement(result))
    return result;
   else if(result)
    break;
  }
  for(var child = getSiblingElement(container); child; child = child.firstChild) {
   if(isImageElement(child))
    return child;
  }
  return null;
 },
 GetRange: function() {
  var selection = this.contentWindow.getSelection(); 
  if(!selection)
   return null;
  if(selection.rangeCount < 1)
   return __aspxIE && __aspxBrowserMajorVersion >= 11 ? this.contentDocument.createRange() : null;
  return selection.getRangeAt ? selection.getRangeAt(0) : this.contentWindow.createRange();
 },
 GetText : function() {
  var ret = "";
  if (this.contentWindow.getSelection)
   ret = this.contentWindow.getSelection().toString();
  return ret;
 },
 GetHtmlText: function() {
  var ret = "";
  var selection = this.contentWindow.getSelection();   
  var rng = null;
  if (selection.getRangeAt && selection.rangeCount > 0) {
   rng = __aspxOpera ? selection.getRangeAt(0).cloneRange() : selection.getRangeAt(0);
   var tempDiv = this.contentWindow.document.createElement("div");
   var clonedFragment = rng.cloneContents();   
   if (_aspxIsExists(clonedFragment)) {
    tempDiv.appendChild(clonedFragment);
    ret = tempDiv.innerHTML;
   }
  }
  return ret;
 },
 GetExtendedBookmark : function() {
  var startSpan = this.contentDocument.createElement("span");
  startSpan.id = ASPxClientSelection.CreateUniqueID();
  var endSpan = this.contentDocument.createElement("span");
  endSpan.id = ASPxClientSelection.CreateUniqueID();  
  var isDirectOrder = !this.NeedExchangeStartAndEndNode(this.startNodePath, this.endNodePath, this.startNodeOffset, this.endNodeOffset);
  var isEmptyTextSelected = false;
  if (this.startContainer == this.endContainer) {
   isEmptyTextSelected = this.endOffset == this.startOffset;
   if(this.endContainer.tagName == "BR") {
    if(!isDirectOrder)
     _aspxInsertElementAfter(endSpan, this.endContainer);
    else
     this.endContainer.parentNode.insertBefore(endSpan, this.endContainer);      
   }
   else {
    var newContainer = ASPxClientSelection.InsertNodeAtPosition(this.endContainer, endSpan, this.endOffset, this.contentDocument);
    if (_aspxIsExists(newContainer))
     this.startContainer = newContainer;
   }
   if(this.startContainer.tagName == "BR") {
    if(!isDirectOrder)
     this.startContainer.parentNode.insertBefore(startSpan, this.startContainer);
    else
     _aspxInsertElementAfter(startSpan, this.startContainer);
   }
   else
    ASPxClientSelection.InsertNodeAtPosition(this.startContainer, startSpan, this.startOffset, this.contentDocument);
  }
  else {
   if(this.endContainer.tagName == "BR") {
    if(!isDirectOrder)
     _aspxInsertElementAfter(endSpan, this.endContainer);
    else
     this.endContainer.parentNode.insertBefore(endSpan, this.endContainer);
   }
   else
    ASPxClientSelection.InsertNodeAtPosition(this.endContainer, endSpan, this.endOffset, this.contentDocument);
   if(this.startContainer.tagName == "BR"){
    if(!isDirectOrder)
     this.startContainer.parentNode.insertBefore(startSpan, this.startContainer);
    else
     _aspxInsertElementAfter(startSpan, this.startContainer);
   }
   else
    ASPxClientSelection.InsertNodeAtPosition(this.startContainer, startSpan, this.startOffset, this.contentDocument);
  }
  var bookmark = { "startMarkerID": startSpan.id, "endMarkerID": endSpan.id, "isEmptyTextSelected": isEmptyTextSelected, "isDirectOrder": isDirectOrder };
  this.SelectExtendedBookmark(bookmark, false);
  return bookmark;
 },
 SelectExtendedBookmark: function(bookmark, withDeleteMarker) {
  if (!_aspxIsExists(withDeleteMarker)) 
   withDeleteMarker = true;
  var bmElements = ASPxClientSelection.GetBookmarkElements(bookmark, this.contentDocument);
  var rng1 = this.contentDocument.createRange();
  rng1.setStart(bmElements.startMarker.nextSibling || bmElements.startMarker, 0);
  if (bmElements.startMarker.nextSibling != bmElements.endMarker) {
   var nextSibling = bmElements.endMarker.nextSibling || bmElements.endMarker;
   rng1.setEnd(nextSibling, 0);
  }
  var sel = this.contentWindow.getSelection();
  if(!bookmark.isDirectOrder) {
   if(sel.extend) {
    sel.removeAllRanges();
    sel.addRange(rng1);
    sel.collapseToEnd();
    sel.extend(bmElements.startMarker, 0);
   }
   else {
    rng1.setStart(bmElements.startMarker, 0);
    rng1.setEnd(bmElements.endMarker, 0);
    sel.removeAllRanges();
    sel.addRange(rng1);
   }
  }
  else {
   sel.removeAllRanges();
   sel.addRange(rng1);
  }
  if (bookmark.isEmptyTextSelected) {
   var index = _aspxArrayIndexOf(bmElements.endMarker.parentNode.childNodes, bmElements.startMarker);
   if(__aspxOpera)
    bmElements.startMarker.innerHTML = "\xA0";
   sel.collapse(bmElements.endMarker.parentNode, index);
   if(__aspxOpera)
    bmElements.startMarker.innerHTML = "";
  }
  if (withDeleteMarker) {
   _aspxRemoveElement(bmElements.startMarker);
   _aspxRemoveElement(bmElements.endMarker);
  }
 },
 FindStartEndContainer: function() {  
    var rng = this.GetRange();
    if(!rng)
     rng = { };
  var selection = this.contentWindow.getSelection();
  if(!selection)
   selection = { };
  this.startContainer = rng.startContainer ? rng.startContainer : selection.baseNode;
  this.endContainer = rng.endContainer ? rng.endContainer : selection.extentNode;
  this.startOffset = rng.startOffset != null ? rng.startOffset : selection.baseOffset;
  this.endOffset = rng.endOffset != null ? rng.endOffset : selection.extentOffset;
 },
 IsControl : function ()  {    
  var selection = this.contentWindow.getSelection();
  if((!__aspxIE && !__aspxNetscapeFamily && selection.toString() != "") || !selection.focusNode) 
   return false;
  var focusNode = selection.focusNode;
  var rng = this.GetRange();
  var startContainer = this.GetStartContainer();
  var endContainer = this.GetEndContainer();
  var startOffset = this.GetStartOffset();
  var endOffset = this.GetEndOffset();
  if(__aspxIE) {
   var startNode, endNode;
   if(startContainer.nodeType == 3 && startOffset == startContainer.nodeValue.length && startContainer.nextSibling && startContainer.nextSibling.nodeType == 1)
    startNode = startContainer.nextSibling;
   else if(startContainer.nodeType == 1 && startContainer.childNodes.length > 0)
    startNode = startContainer.childNodes[startOffset];
   if(endContainer.nodeType == 3 && endOffset == 0 && endContainer.previousSibling && endContainer.previousSibling.nodeType == 1)
    endNode = endContainer.previousSibling;
   else if(endContainer.nodeType == 1 && endContainer.childNodes.length > 0)
    endNode = endContainer.childNodes[endOffset - 1];
   if(startNode && startNode == endNode)
    focusNode = startNode;
  } else if(focusNode.nodeType == 1) {
   if (startContainer == endContainer && (endOffset - startOffset) == 1 && 
     (selection.anchorNode.childNodes.length > selection.anchorOffset))
    focusNode = selection.anchorNode.childNodes[selection.anchorOffset];
  }
  return (focusNode.nodeName == 'IMG' || __aspxIE && focusNode.nodeName == "TABLE");
 },
 IsTextOnly: function() {
  var selection = this.contentWindow.getSelection();  
  return selection.focusNode && selection.anchorNode && 
    ((selection.focusNode == selection.anchorNode) || 
    ((selection.focusNode.nodeType == 3) && (selection.anchorNode.nodeType == 3))); 
 }, 
 SelectElement: function(elem, selectAllContent) {  
  if (!_aspxIsExists(selectAllContent))
   selectAllContent = true; 
  ASPxClientSelectionNSOpera.SelectElementInDocument(elem, this.contentDocument, this.contentWindow, selectAllContent);
 }, 
 NeedExchangeStartAndEndNode: function(startNodePath, endNodePath, startNodeOffset, endNodeOffset) {
  if (startNodePath != endNodePath) {
   var startNodePathArray = startNodePath.split("-");
   var endNodePathArray = endNodePath.split("-");
   var length = Math.min(startNodePathArray.length, endNodePathArray.length);
   for (var i = 0; i < length; i++) {
    var i1 = parseInt(startNodePathArray[i], 10);
    var i2 = parseInt(endNodePathArray[i], 10);
    if (i1 > i2)
     return true;
    else if(i1 < i2)
     return false;
   }
  }
  return startNodeOffset > endNodeOffset;
 },
 GetNodePath: function(rootNode, node) {
  var path = "";
  var curParentNode = node;
  var curNode = node;
  if (curParentNode){
   while (rootNode != curParentNode) {
    curParentNode = curParentNode.parentNode;
    if (curParentNode.childNodes) {
     var index = _aspxArrayIndexOf(curParentNode.childNodes, curNode);
     path = index.toString() + "-" + path;
    }
    curNode = curParentNode;
   }
  }
  return path.substr(0, path.length - 1);
 },
 GetNodeByPath: function(rootNode, path, isFirstNode) {
  if (path != "") {
   var pathNodeArray = path.split("-");
   var curNode = rootNode;
   for(var i = 0; i < pathNodeArray.length; i++) {
    var index = parseInt(pathNodeArray[i], 10);
    if(index >= curNode.childNodes.length) {
     if(isFirstNode)
      this.startNodeOffset = 0;
     else
      this.endNodeOffset = 0;
     return curNode; 
    }
    curNode = curNode.childNodes[index];
   }
   return curNode;
  }
  else
   return null;
 } 
});
ASPxClientSelectionNSOpera.RestoreByStartAndEndNodeCore = function(startNode, 
                 endNode, 
                 startNodeOffset, 
                 endNodeOffset, isCollapsed,
                 docObj, windowObj) {
 var curSelection = windowObj.getSelection();
 ASPxClientSelectionNSOpera.SelectElementInDocument(startNode, docObj, windowObj);
 ASPxClientSelectionNSOpera.SelectElementInDocument(endNode, docObj, windowObj);
 if (startNode) {
  if(startNode.nodeType == 1 && startNodeOffset > startNode.childNodes.length)
   startNodeOffset = startNode.childNodes.length > 0 ? startNode.childNodes.length - 1 : 0;
  curSelection.collapse(startNode, startNodeOffset);
 }
 if (endNode && !isCollapsed) {
  if(endNode.nodeType == 1 && endNodeOffset > endNode.childNodes.length)
   endNodeOffset = endNode.childNodes.length > 0 ? endNode.childNodes.length - 1 : 0;
  if (__aspxWebKitFamily)
   curSelection.setBaseAndExtent(startNode, startNodeOffset, endNode, endNodeOffset);
  else {
   if(curSelection.extend)
    curSelection.extend(endNode, endNodeOffset);
   else {
    var rng = docObj.createRange();
    rng.setStart(startNode, startNodeOffset);
    rng.setEnd(endNode, endNodeOffset);
    curSelection.removeAllRanges();
    curSelection.addRange(rng);
   }
  }
 }
}
ASPxClientSelectionNSOpera.SelectElementInDocument = function(elem, docObj, windowObj, selectAllContent) {
 if (elem) {
  if (!_aspxIsExists(selectAllContent))
   selectAllContent = true;
  var range = docObj.createRange();
  range.selectNode(elem);
  if (__aspxOpera)
   range.selectNodeContents(elem);
  if (!selectAllContent)
   range.collapse(false);
  var selection = windowObj.getSelection();   
  if (__aspxWebKitFamily)
   selection.setBaseAndExtent(range.startContainer, range.startOffset, range.endContainer, range.endOffset);
  else {
   selection.removeAllRanges();   
   selection.addRange(range);
  }
 } 
}
ASPxCachedElementsManager = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
  this.selectedElements = { table: null, tableRow: null, tableCell: null };
  this.needGetElementFromSelection = { table: true, tableRow: true, tableCell: true };
 },
 ClearSeletedElements: function() {
  for (var key in this.selectedElements) {
   this.selectedElements[key] = null;
   this.needGetElementFromSelection[key] = true;
  }
 },
 GetSeletedElement: function(name) {
  return this.selectedElements[name];
 },
 SetSelectedElement: function(name, element) {
  this.selectedElements[name] = element;
  this.needGetElementFromSelection[name] = false;
 },
 NeedGetElementFromSelection: function(name) {
  return this.needGetElementFromSelection[name] && !_aspxIsExists(this.selectedElements[name]);
 }
});

var ASPxClientCommandConsts = {
 BOLD_COMMAND : "bold",
 ITALIC_COMMAND: "italic",
 UNDERLINE_COMMAND: "underline", 
 STRIKETHROUGH_COMMAND: "strikethrough",
 SUPERSCRIPT_COMMAND: "superscript",
 SUBSCRIPT_COMMAND: "subscript",
 JUSTIFYCENTER_COMMAND: "justifycenter",
 JUSTIFYLEFT_COMMAND: "justifyleft",
 INDENT_COMMAND: "indent",
 OUTDENT_COMMAND: "outdent",
 JUSTIFYRIGHT_COMMAND: "justifyright",
 JUSTIFYFULL_COMMAND: "justifyfull",
 FONTSIZE_COMMAND : "fontsize",
 FONTNAME_COMMAND : "fontname",
 FONTCOLOR_COMMAND: "forecolor",
 BACKCOLOR_COMMAND: "backcolor",
 FORMATBLOCK_COMMAND: "formatblock",
 APPLYCSS_COMMAND: "applycss",
 REMOVEFORMAT_COMMAND: "removeformat",
 UNDO_COMMAND: "undo",
 REDO_COMMAND: "redo",
 COPY_COMMAND: "copy",
 KBCOPY_COMMAND: "kbcopy",
 PASTE_COMMAND: "paste",
 KBPASTE_COMMAND: "kbpaste",
 PASTEFROMWORD_COMMAND: "pastefromword", 
 PASTEFROMWORDDIALOG_COMMAND: "pastefromworddialog",
 CUT_COMMAND: "cut",
 KBCUT_COMMAND: "kbcut",
 SELECT_ALL: "selectall",
 DELETE_COMMAND: "delete", 
 KBDELETE_COMMAND: "kbdelete",
 TEXTTYPE_COMMAND: "texttype",
 NEWPARAGRAPHTYPE_COMMAND: "newparagraphtype",
 LINEBREAKETYPE_COMMAND: "linebreaktype",
 ENTER_COMMAND: "enter",
 PASTEHTML_COMMAND: "pastehtml",
 RESIZEOBJECT_COMMAND: "resizeobject",
 DRAGDROPOBJECT_COMMAND: "dragdropobject",
 DROPOBJECTFROMEXTERNAL_COMMAND: "dropobjectfromexternal",
 INSERTORDEREDLIST_COMMAND: "insertorderedlist",
 INSERTUNORDEREDLIST_COMMAND: "insertunorderedlist",
 UNLINK_COMMAND: "unlink",
 INSERTLINK_COMMAND: "insertlink",
 INSERTIMAGE_COMMAND: "insertimage",
 CHANGEIMAGE_COMMAND: "changeimage",
 CHECKSPELLING_COMMAND: "checkspelling",
 INSERTIMAGE_DIALOG_COMMAND: "insertimagedialog",
 CHANGEIMAGE_DIALOG_COMMAND: "changeimagedialog",
 INSERTLINK_DIALOG_COMMAND: "insertlinkdialog",
 CHANGELINK_DIALOG_COMMAND: "changelinkdialog",
 INSERTTABLE_DIALOG_COMMAND: "inserttabledialog",
 TABLEPROPERTIES_DIALOG_COMMAND: "tablepropertiesdialog",
 TABLECELLPROPERTIES_DIALOG_COMMAND: "tablecellpropertiesdialog",
 TABLECOLUMNPROPERTIES_DIALOG_COMMAND: "tablecolumnpropertiesdialog",
 TABLEROWPROPERTIES_DIALOG_COMMAND: "tablerowpropertiesdialog",
 PRINT_COMMAND: "print",
 FULLSCREEN_COMMAND: "fullscreen",
 INSERTTABLE_COMMAND: "inserttable",
 CHANGETABLE_COMMAND: "changetable",
 CHANGETABLECELL_COMMAND: "changetablecell",
 CHANGETABLEROW_COMMAND: "changetablerow",
 CHANGETABLECOLUMN_COMMAND: "changetablecolumn",
 DELETETABLE_COMMAND: "deletetable",
 DELETETABLEROW_COMMAND: "deletetablerow",
 DELETETABLECOLUMN_COMMAND: "deletetablecolumn",
 INSERTTABLECOLUMNTOLEFT_COMMAND: "inserttablecolumntoleft",
 INSERTTABLECOLUMNTORIGHT_COMMAND: "inserttablecolumntoright", 
 INSERTTABLEROWBELOW_COMMAND: "inserttablerowbelow",
 INSERTTABLEROWABOVE_COMMAND: "inserttablerowabove",
 SPLITTABLECELLHORIZONTALLY_COMMAND: "splittablecellhorizontally",
 SPLITTABLECELLVERTICALLY_COMMAND: "splittablecellvertically", 
 MERGETABLECELLRIGHT_COMMAND: "mergetablecellright",
 MERGETABLECELLDOWN_COMMAND: "mergetablecelldown",
 CheckSpellingCore_COMMAND: "checkspellingcore",
 Start_COMMAND: "start",
 CUSTOMDIALOG_COMMAND: "customdialog",
 EXPORT_COMMAND: "export",
 SAVESTATEUNDOREDOSTACK_COMMAND: "savestateundoredostack"
};
var ASPxHtmlEditorCommands = {
 Browser: {}
};
ASPxHtmlEditorCommands.Command = _aspxCreateClass(null, {
 constructor: function(cmdID) {
  this.commandID = cmdID;
 },
 Execute: function(cmdValue, editor) {
  return true;
 },
 GetCommandID: function() {
  return this.commandID;
 }, 
 GetState: function(editor, selection, selectedElements) {
  return true;
 },
 GetValue: function(editor, selection, selectedElements) {
  return null;
 },
 IsDefaultAction: function(editor) {
  return false; 
 },
 IsImmediateExecution: function() {
  return false;
 },
 IsHtmlChangeable: function() {
  return true;
 },
 IsLocked: function(editor) {
  return false;
 },
 IsReversable: function() {
  return true;
 },
 IsClientCommand: function() {
  return true;
 },
 SkipStateOnFirstLoad: function() {
  return false;
 },
 GetDefaultValue: function() {
  return "";
 }
});
ASPxHtmlEditorCommands.Browser.Command = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
  var contentAreaDoc = editor.GetDesignViewDocument();
  if (!this.NeedUseCss())
      contentAreaDoc.execCommand(this.GetUseCSSCommandName(), false, false);
  if(!editor.isSelectionRestored) {
   if(__aspxOpera) 
    editor.Focus();
   else
    editor.RestoreSelection();
  }
     var isSuccessfully = contentAreaDoc.execCommand(this.GetCommandName(), false, this.GetCorrectedValue(cmdValue));
  if (!this.NeedUseCss())
      contentAreaDoc.execCommand(this.GetUseCSSCommandName(), false, true);
  if(isSuccessfully) {
   editor.SaveSelection();
   if((__aspxWebKitTouchUI || __aspxMSTouchUI) && !editor.isInFocus)
    editor.isLockedUpdateToolbar = true;
   setTimeout(function() {
    if(!editor.isSelectionRestored)
     editor.RestoreSelection();
   }.aspxBind(this), 300);
  }
  return isSuccessfully;
 },
 GetCommandName: function() {
  return this.commandID;
 }, 
 GetCorrectedValue: function(value) {
  return value;  
 },
 GetState: function(editor, selection, selectedElements) {
  var ret = true;
  if (!this.IsAlwaysEnabledCommand(this.commandID)) {      
   try {
    ret = this.TryGetState(editor);
   }
   catch(ex) { ret = false; }
  }
  return ret;
 },
 GetValue: function(editor, selection, selectedElements) {  
  var ret = null;
  try {
   ret = this.TryGetValue(editor);
  }
  catch(e) {}
  return !ret ? null : ret;
 },
 GetUseCSSCommandName: function(doc) {
  return __aspxNetscapeFamily ? "styleWithCSS" : "useCSS";
 },
 IsLocked: function(editor) {
  var ret = this.TryGetIsLocked(editor);
  if (__aspxOpera && ret) {
   try { 
    ret = !this.TryGetState(editor); 
   }
   catch(ex) { ret = false; }
  }
  return ret;
 },
 TryGetState: function(editor) {
  return editor.GetDesignViewDocument().queryCommandState(this.GetCommandName()); 
 },
 TryGetValue: function(editor) {
  return editor.GetDesignViewDocument().queryCommandValue(this.GetCommandName());
 },
 TryGetIsLocked: function(editor) {
  try {
   return !editor.GetDesignViewDocument().queryCommandEnabled(this.GetCommandName());
  } catch(e) {}
  return true;
 },
 IsAlwaysEnabledCommand: function(commandID) {
  return this.commandID == ASPxClientCommandConsts.FONTSIZE_COMMAND || this.commandID == ASPxClientCommandConsts.FONTNAME_COMMAND;
 },
 NeedUseCss: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.Unlink = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 TryGetIsLocked: function(editor) {
  var state = ASPxHtmlEditorCommands.Browser.Command.prototype.TryGetIsLocked.apply(this, arguments);
  if(!__aspxFirefox)
   return state;
  return state || !_aspxGetParentByTagName(editor.GetSelection().GetSelectedElement(), "A");
 }
});
ASPxHtmlEditorCommands.Browser.WrappedCommand = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 Execute: function(cmdValue, editor) {
  if(__aspxWebKitTouchUI || __aspxMSTouchUI)
   return ASPxHtmlEditorCommands.Browser.Command.prototype.Execute.call(this, cmdValue, editor);
  if(!editor.isSelectionRestored) {
   if(!__aspxOpera && !editor.HasUnforcedFunction("SaveSelection"))
    editor.RestoreSelection();
   else
    editor.Focus();
  }
  var isSuccessfully = this.ExecuteCore(cmdValue, editor);
  if(isSuccessfully) {
   editor.SaveSelection();
   setTimeout(function() {
    if(!editor.isSelectionRestored)
     editor.RestoreSelection();
   }.aspxBind(this), 300);
  }
  return isSuccessfully;
 },
 ExecuteCore: function(cmdValue, editor) {
  return true;
 },
 ExecuteInternal: function(cmdValue, editor) {
  var doc = editor.GetDesignViewDocument();
  var selection = editor.GetSelection();
  var selectedElements = selection.GetElements(true);
  if(selectedElements.length > 0) {
   var selectedUnwrappedElements = this.GetNotStylizedElements(editor, selectedElements, null, false);
   if(selectedUnwrappedElements.length == 0)
    return true;
   else {
    var selectionBookmarks = this.CreateBookmarkElements(doc, selectedElements[0], selectedElements[selectedElements.length - 1]);
    this.RemoveStyle(editor, selectedUnwrappedElements, selectionBookmarks);
    if(this.ContainsNotDOMElements(selectedUnwrappedElements)) {
     selectedElements = editor.selectionHelper.GetSelectedElements(selectionBookmarks.startMarkerID, selectionBookmarks.endMarkerID, true);
     selectedUnwrappedElements = this.GetNotStylizedElements(editor, selectedElements, null, false);
    }
    this.StylizeElements(editor, selectedUnwrappedElements, selectionBookmarks);
    editor.GetSelection().clientSelection.SelectExtendedBookmark(selectionBookmarks);
   }
  }
  else
   this.ExecuteCommandLater(editor, selection);
  return true;
 },
 GetState: function(editor, selection, selectedElements) {
  if(__aspxWebKitTouchUI || __aspxMSTouchUI)
   return ASPxHtmlEditorCommands.Browser.Command.prototype.GetState.call(this, editor);
  selection = !selection ? editor.GetSelection() : selection;
  var selectedParent = this.GetSelectedElement(editor, selection, selectedElements);
  if(selectedElements && selectedElements.length == 1 && selectedElements[0].childNodes.length == 0)
   selectedElements = [];
  return this.GetStateCore(editor, selection, selectedParent, selectedElements);
 },
 GetStateCore: function(editor, selection, selectedParent, selectedElements) {
  return null;
 },
 GetStateInternal: function(editor, selection, selectedElements) {
  if(selection) {
   selectedElements = !selectedElements ? selection.GetElements(true) : selectedElements;
   return this.GetNotStylizedElements(editor, selectedElements, null, false) == 0;
  }
 },
 GetValue: function(editor, selection, selectedElements) {
  if(__aspxWebKitTouchUI || __aspxMSTouchUI)
   return ASPxHtmlEditorCommands.Browser.Command.prototype.GetValue.call(this, editor);
  selection = !selection ? editor.GetSelection() : selection;
  var selectedParent = this.GetSelectedElement(editor, selection, selectedElements);
  if(selectedElements && selectedElements.length == 1 && selectedElements[0].childNodes.length == 0)
   selectedElements = [];
  return this.GetValueCore(editor, selection, selectedParent, selectedElements);
 },
 GetValueCore: function(editor, selection, selectedParent, selectedElements) {
  return null;
 },
 IsCommandTextDecoration: function() {
  var cmdName = this.GetCommandName();
  return ASPxClientCommandConsts.UNDERLINE_COMMAND == cmdName || ASPxClientCommandConsts.STRIKETHROUGH_COMMAND == cmdName;
 },
 IsCommandTextAlign: function() {
  var cmdName = this.GetCommandName();
  return ASPxClientCommandConsts.JUSTIFYCENTER_COMMAND == cmdName || ASPxClientCommandConsts.JUSTIFYLEFT_COMMAND == cmdName ||
      ASPxClientCommandConsts.JUSTIFYRIGHT_COMMAND == cmdName || ASPxClientCommandConsts.JUSTIFYFULL_COMMAND == cmdName;
 },
 IsBookmark: function(bookmark, element) {
  return element && bookmark && element.nodeType == 1 && (bookmark.startMarkerID == element.id || bookmark.endMarkerID == element.id);
 },
 IsFontOrSpanElement: function(element) {
  return element.nodeName == "SPAN" || element.nodeName == "FONT";
 },
 IsExistAttributes: function(element) {
  return element.nodeType == 1 && (element.id || element.className || element.style.cssText);
 },
 IsParentElementStylized: function(element) {
  return (this.NeedFindFontStyleItalicParent() && this.FindFontStyleItalicParent(element)) || (this.IsCommandTextDecoration() && this.FindTextDecorationParent(element));
 },
 IsElementStylized: function(element) {
  var attr = this.GetAttribute();
  var styleAttrConstValue = this.GetStyleAttributeConstValue();
  var styleAttrValue = this.GetCurrentStyleAttributeValue(element);
  return (styleAttrValue && styleAttrValue.indexOf(styleAttrConstValue) > -1) || this.GetAttributeValue(element, attr) == styleAttrConstValue;
 },
 NeedFindFontStyleItalicParent: function() {
  return __aspxIE && __aspxBrowserMajorVersion < 9 && ASPxClientCommandConsts.ITALIC_COMMAND == this.GetCommandName();
 },
 StylizeElements: function(editor, elements, selectionBookmarks, wrapInFontStyleNormal) {
  if(wrapInFontStyleNormal && this.IsCommandTextDecoration())
   return;
  var wrapper;
  var doc = editor.GetDesignViewDocument();
  for(var i = 0, element; element = elements[i]; i++) {
   if((element.nodeType == 3 && !element.nodeValue) || this.IsBookmark(selectionBookmarks, element))
    continue;
   var prevSibling = element.previousSibling;
   var isPreviousElementWrapper;
   if(prevSibling && prevSibling.nodeType == 1) {
    var attrValue = this.GetStyleAttributeValue(prevSibling);
    if(attrValue)
     this.SetStyleAttribute(prevSibling, "");
    var isNotSetStyleAttribute = !this.IsExistAttributes(prevSibling);
    if(attrValue)
     this.SetStyleAttribute(prevSibling, attrValue);
    isPreviousElementWrapper = prevSibling !== wrapper && isNotSetStyleAttribute && !this.IsBookmark(selectionBookmarks, prevSibling) &&
             (wrapInFontStyleNormal && this.IsStyleAttributeNormal(prevSibling) || this.IsTagFontStyle(prevSibling));
   }
   if(isPreviousElementWrapper)
    wrapper = prevSibling;
   if(wrapper && wrapper === prevSibling)
    wrapper.appendChild(element);
   else {
    if(wrapInFontStyleNormal) {
     wrapper = doc.createElement("SPAN");
     this.SetStyleAttribute(wrapper, "normal");
    }
    else
     wrapper = this.CreateStylizedWrapper(doc, editor.updateDeprecatedElements, editor.updateBoldItalic, "SPAN");
    element.parentNode.insertBefore(wrapper, element);
    wrapper.appendChild(element);
   }
  }
 },
 UnwrapElement: function(editor, element, selectionBookmarks, removeFontStyleInHierarchy) {
  var childElements = [];
  for(var child = element.firstChild; child; child = element.firstChild) {
   element.parentNode.insertBefore(child, element);
   childElements.push(child);
   if(removeFontStyleInHierarchy && child.nodeType != 3 && this.FindFontStyleDescendant(child))
    this.RemoveStyle(editor, [ child ], selectionBookmarks, removeFontStyleInHierarchy);
  }
  element.parentNode.removeChild(element);
  return childElements;
 },
 RemoveStyle: function(editor, elements) {
  for(var i = 0, element; element = elements[i]; i++) {
   var childElements = [];
   var attr = this.GetAttribute();
   if(element.nodeType == 1) {
    var outerHTML = element.outerHTML;
    var attr = this.GetAttribute();
    if(this.GetAttributeValue(element, attr))
     _aspxRemoveAttribute(element, attr);
    if(this.GetStyleAttributeValue(element))
     this.SetStyleAttribute(element, "");
    this.RemoveStyleInHierarchy(editor, element, outerHTML != element.outerHTML);
   }
  }
 },
 RemoveStyleInHierarchy: function(editor, element, isElementChanged) {
  if(!element || element.nodeType != 1)
   return;
  if(isElementChanged && !this.IsExistAttributes(element) && this.IsFontOrSpanElement(element)) {
   childElements = this.UnwrapElement(editor, element, null, false);
   this.RemoveStyle(editor, childElements);
  }
  else {
   for(var child = element.firstChild; child; child = child.nextSibling)
    this.RemoveStyle(editor, [child]);
  }
 },
 ExecuteCommandLater: function(editor, selection) {
  var selectedParent = this.GetSelectedElement(editor, selection);
  if(this.IsElementStylized(selectedParent) || (this.IsCommandTextDecoration() && selectedParent.nodeName != "BODY" && this.FindTextDecorationParent(selectedParent))) {
   if(this.NeedChangeRemoveStyleCommandState())
    this.ChangeExecuteStyleCommandState(this.GetCommandName(), editor.executeRemoveFontStyle);
  }
  else
   this.ChangeExecuteStyleCommandState(this.GetCommandName(), editor.executeApplyStyle);
  var selection = editor.GetSelection();
  if(__aspxIE && __aspxBrowserMajorVersion < 9 && !selection.GetHtml())
   editor.isSelectionRestored = true;
  editor.isLockedUpdateToolbar = true;
  return false;
 },
 NeedChangeRemoveStyleCommandState: function() {
  return false;
 },
 CanBeWrapped: function(element) {
  return element.nodeType == 3 || ASPxHtmlEditorCommands.Utils.CanBePlacedInInlineParent(element);
 },
 CanNotBeRemove: function(element) {
  return element.nodeName == "SUB" || element.nodeName == "SUP" || 
      (ASPxHtmlEditorCommands.Utils.CanBePlacedInInlineParent(element) && !ASPxHtmlEditorCommands.Utils.IsInlineTextElement(element)) ||
      __aspxHEBlockElements[element.nodeName.toLowerCase()];
 },
 ContainsNotDOMElements: function(elements) {
  for(var i = 0, element; element = elements[i]; i++) {
   if(!element.parentNode || element.parentNode.nodeType == 11)
    return true;
  }
  return false;
 },
 ContainsOnlyTextNodes: function(element) {
  for(var i = 0, childNode; childNode = element.childNodes[i]; i++) {
   if(childNode.nodeType != 3)
    return false;
  }
  return true;
 },
 FindDescendant: function(element, comparer, comparerParam) {
  if(comparer(element, comparerParam))
   return element;
  if(element.nodeType != 3) {
   for(var child = element.firstChild; child; child = child.nextSibling) {
    var childNode = this.FindDescendant(child, comparer, comparerParam)
    if(childNode)
     return childNode;
   }
  }
  return null;
 },
 FindNotWrappedInlineDescendant: function(parent) {
  return this.FindDescendant(parent,
   function(element) {
    return (ASPxHtmlEditorCommands.Utils.CanBePlacedInInlineParent(element) && !ASPxHtmlEditorCommands.Utils.IsInlineTextElement(element) || element.nodeType == 3)
    && !this.IsElementStylized(element) && !this.IsParentElementStylized(element);
   }.aspxBind(this)
  );
 },
 FindNotWrappedDescendant: function(parent) {
  return this.FindDescendant(parent,
   function(element) {
    return !this.IsElementStylized(element);
   }.aspxBind(this)
  );
 },
 FindFontStyleDescendant: function(parent) {
  return this.FindDescendant(parent,
   function(element) {
    return this.IsElementStylized(element) || this.IsStyleAttributeNormal(element);
   }.aspxBind(this)
  );
 },
 FindBookmarkDescendant: function(parent, selectionBookmarks) {
  return this.FindDescendant(parent,
   function(element, selectionBookmarks) {
    return element.id && this.IsBookmark(selectionBookmarks, element);
   }.aspxBind(this),
   selectionBookmarks
  );
 },
 FindAllTextNodes: function(element) {
  if(element && element.nodeType == 3)
   return element;
  var nodes = [];
  for(var child = element.firstChild; child; child = child.nextSibling)
   nodes = nodes.concat(this.FindAllTextNodes(child));
  return nodes;
 },
 FindTextDecorationParent: function(parent) {
  return this.FindParent(parent,
   function(attributeValue) {
    return this.IsTextDecorationAttributeValue(attributeValue);
   }.aspxBind(this)
  );
 },
 FindFontStyleItalicParent: function(parent) {
  return this.FindParent(parent,
   function(attributeValue, element) {
    return attributeValue == this.GetStyleAttributeConstValue() || this.IsTagFontStyle(element);
   }.aspxBind(this)
  );
 },
 FindParent: function(element, compare) {
  var result;
  var attr = this.GetStyleAttribute();
  for(var parent = element.parentNode; parent.nodeName != "BODY"; parent = parent.parentNode) {
   var attributeValue =  _aspxGetCurrentStyle(parent)[attr];
   if(compare(attributeValue, parent))
    result = parent;
  }
  return result;
 },
 SetStyleAttribute: function(element, value) {
  if(element.nodeType != 3) {
   var attr = this.GetStyleAttribute();
   if(value == "" && __aspxIE)
    _aspxRemoveAttribute(element.style, attr);
   else
    element.style[attr] = value;
   if(__aspxNetscapeFamily) 
    var offsetHeight = element.offsetHeight;
  }
 },
 GetCurrentStyleAttributeValue: function(element) {
  var attr = this.GetStyleAttribute();
  return _aspxGetCurrentStyle(element.nodeType == 1 ? element : element.parentNode)[attr];
 },
 GetAttributeValue: function(element, attr) {
  var attrValue = _aspxGetAttribute(element.nodeType == 1 ? element : element.parentNode, attr);
  return attrValue && typeof(attrValue) == "string" ? attrValue.toLowerCase() : attrValue;
 },
 GetStyleAttribute: function() {
  if(ASPxClientCommandConsts.BOLD_COMMAND == this.GetCommandName())
   return "fontWeight";
  else if(ASPxClientCommandConsts.ITALIC_COMMAND == this.GetCommandName())
   return "fontStyle";
  else if(this.IsCommandTextDecoration())
   return "textDecoration";
  else if(this.IsCommandTextAlign())
   return "textAlign";
  else if(ASPxClientCommandConsts.FONTSIZE_COMMAND == this.GetCommandName())
   return "fontSize";
  else if(ASPxClientCommandConsts.FONTNAME_COMMAND == this.GetCommandName())
   return "fontFamily";
  else if(ASPxClientCommandConsts.INDENT_COMMAND == this.GetCommandName() || ASPxClientCommandConsts.OUTDENT_COMMAND == this.GetCommandName())
   return "marginLeft";
 },
 GetAttribute: function() {
  if(this.IsCommandTextAlign())
   return "align";
  else if(ASPxClientCommandConsts.FONTSIZE_COMMAND == this.GetCommandName())
   return "size";
  else if(ASPxClientCommandConsts.FONTNAME_COMMAND == this.GetCommandName())
   return "face";
 },
 GetStyleAttributeConstValue: function() {
  switch (this.GetCommandName()) {
   case ASPxClientCommandConsts.BOLD_COMMAND:
    return "bold";
   case ASPxClientCommandConsts.ITALIC_COMMAND:
    return "italic";
   case ASPxClientCommandConsts.UNDERLINE_COMMAND:
    return "underline";
   case ASPxClientCommandConsts.STRIKETHROUGH_COMMAND:
    return "line-through";
   case ASPxClientCommandConsts.JUSTIFYCENTER_COMMAND:
    return "center";
   case ASPxClientCommandConsts.JUSTIFYLEFT_COMMAND:
    return "left";
   case ASPxClientCommandConsts.JUSTIFYRIGHT_COMMAND:
    return "right";
   case ASPxClientCommandConsts.JUSTIFYFULL_COMMAND:
    return "justify";
  }
 },
 GetStyleAttributeValue: function(element) {
  if(element.nodeType != 3) {
   var attr = this.GetStyleAttribute();
   var attrValue = element.style[attr];
   return attrValue;
  }
 },
 GetCommonStyleAttributeValue: function(elements) {
  var textNodes = [];
  for(var i = 0, element; element = elements[i]; i++)
   textNodes = textNodes.concat(this.FindAllTextNodes(element));
  if(textNodes.length == 0)
   return "";
  var firstElement = textNodes[0];
  var styleAttrValue = this.GetCurrentStyleAttributeValue(firstElement);
  for(var i = 1, element; element = textNodes[i]; i++) {
   if(styleAttrValue != this.GetCurrentStyleAttributeValue(element))
    return null;
  }
  return styleAttrValue;
 },
 GetNotStylizedElements: function(editor, elements, selectionBookmarks, removeFontStyleInHierarchy) {
  var resultList = [];
  for(var i = 0, element; element = elements[i]; i++) {
   var elementStylized = this.IsElementStylized(element) || this.IsParentElementStylized(element);
   if(!this.CanBeWrapped(element) || elementStylized || this.GetStyleAttributeValue(element) == "normal") {
    for(var child = element.firstChild; child; child = child.nextSibling)
     resultList = resultList.concat(this.GetNotStylizedElements(editor, [child], selectionBookmarks, removeFontStyleInHierarchy));
   }
   else {
    if(!this.FindNotWrappedInlineDescendant(element))
     continue;
    resultList = resultList.concat(removeFontStyleInHierarchy ? this.GetCanBeWrappedElements(editor, [element], selectionBookmarks) : [element]);
   }
  }
  return resultList;
 },
 GetCanBeWrappedElements: function(editor, elements, selectionBookmarks) {
  var resultList = [];
  for(var i = 0, element; element = elements[i]; i++) {
   if(this.CanBeWrapped(element) && !this.FindBookmarkDescendant(element, selectionBookmarks) && !this.IsElementStylized(element)) {
    resultList.push(element);
    if(this.FindFontStyleDescendant(element))
     this.RemoveStyle(editor, [element], selectionBookmarks, true);
   } else {
    var childElements = [];
    for(var child = element.firstChild; child; child = child.nextSibling)
     childElements.push(child);
    this.RemoveStyle(editor, [element], selectionBookmarks, false);
    resultList = resultList.concat(this.GetCanBeWrappedElements(editor, childElements, selectionBookmarks));
   }
  }
  return resultList;
 },
 GetSelectedElement: function(doc, selection) {
  if(selection) {
   var selectedElement = selection.GetSelectedElement();
   return selectedElement.nodeName == "HTML" ? doc.body : selectedElement;
  }
  return doc.body;
 },
 CreateStylizedWrapper: function(doc, updateDeprecatedElements, updateBoldItalic, tagName) {
  var newElement = doc.createElement(tagName);
  this.SetStyleAttribute(newElement, this.GetStyleAttributeConstValue());
  return newElement;
 },
 CreateBookmarkElements: function(doc, firstElement, lastElement, isDirectOrder) {
  isDirectOrder = isDirectOrder === undefined || isDirectOrder;
  var selectionBookmarks = { "startMarkerID": "sbm", "endMarkerID": "ebm"};
  var sbm = doc.createElement("span");
  sbm.id = "sbm";
  var ebm = doc.createElement("span");
  ebm.id = "ebm";
  firstElement.parentNode.insertBefore(isDirectOrder ? sbm : ebm, firstElement);
  _aspxInsertElementAfter(isDirectOrder ? ebm : sbm, lastElement);
  return selectionBookmarks;
 },
 ChangeExecuteStyleCommandState: function(commandName, executeFontStyleCommandState) {
  var index = _aspxArrayIndexOf(executeFontStyleCommandState, commandName);
  if(index > -1)
   executeFontStyleCommandState.splice(index, 1);
  executeFontStyleCommandState.push(commandName);
 },
 SkipStateOnFirstLoad: function() {
  return true;
 },
 canCheckSelectedElementStyle: function(selection, selectedElement, selectedElements) {
  return selection.IsCollapsed() || this.ContainsOnlyTextNodes(selectedElement) || selectedElements && selectedElements.length == 0 ||  __aspxIE && __aspxBrowserMajorVersion > 10 && selection.GetIsControlSelected();
 }
});
ASPxHtmlEditorCommands.Browser.FontStyle = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.WrappedCommand, {
 ExecuteCore: function(cmdValue, editor) {
  var doc = editor.GetDesignViewDocument();
  var selection = editor.GetSelection();
  var selectedElements = cmdValue ? [ cmdValue ] : selection.GetElements(true);
  if(selectedElements.length > 0) {
   var firstElement = selectedElements[0];
   var lastElement = selectedElements[selectedElements.length - 1];
   var selectionBookmarks = this.CreateBookmarkElements(doc, firstElement, lastElement);
   var selectedUnwrappedElements = this.GetNotStylizedElements(editor, selectedElements, selectionBookmarks, true);
   var unwrappedElements = this.RemoveFontStyleParent(editor, firstElement, selectionBookmarks);
   if(selectedUnwrappedElements.length > 0) {
    unwrappedElements = unwrappedElements.concat(selectedUnwrappedElements);
    unwrappedElements = unwrappedElements.concat(this.RemoveFontStyleParent(editor, lastElement, selectionBookmarks));
    this.StylizeElements(editor, unwrappedElements, selectionBookmarks, false);
   } 
   else {
    unwrappedElements = unwrappedElements.concat(this.RemoveFontStyleParent(editor, lastElement, selectionBookmarks));
    if(unwrappedElements.length > 0) {
     this.StylizeElements(editor, unwrappedElements, selectionBookmarks, false);
     selectedElements = this.UpdateSelectionElements(selectedElements);
    }
    if(this.ContainsNotDOMElements(selectedElements))
     selectedElements = editor.selectionHelper.GetSelectedElements(selectionBookmarks.startMarkerID, selectionBookmarks.endMarkerID, true);
    this.RemoveStyle(editor, selectedElements, selectionBookmarks, true);
   }
   selection.clientSelection.SelectExtendedBookmark(selectionBookmarks);
  }
  else
   this.ExecuteCommandLater(editor, selection);
  return true;
 },
 GetStateCore: function(editor, selection, selectedParent, selectedElements) {
  if(_aspxArrayIndexOf(editor.executeApplyStyle, this.GetCommandName()) > -1)
   return true;
  else if(_aspxArrayIndexOf(editor.executeRemoveFontStyle, this.GetCommandName()) > -1)
   return false;
  if(this.canCheckSelectedElementStyle(selection, selectedParent, selectedElements))
   return this.IsElementStylized(selectedParent) || (selectedParent.nodeName != "BODY" && this.IsParentElementStylized(selectedParent));
  return this.GetStateInternal(editor, selection, selectedElements);
 },
 FindParentFontStyleElement: function(element) {
  if(this.NeedFindFontStyleItalicParent())
   return this.FindFontStyleItalicParent(element);
  if(this.IsCommandTextDecoration())
   return this.FindTextDecorationParent(element);
  return ASPxHtmlEditorCommands.Utils.FindParent(element, function(parent) {
   return this.IsElementStylized(parent);
  }.aspxBind(this));
 },
 NeedChangeRemoveStyleCommandState: function() {
  return true;
 },
 UpdateSelectionElements: function(elements) {
  var newElements = [];
  for(var i = 0, element; element = elements[i]; i++) {
   if(!element.id && this.IsElementStylized(element.parentNode) && this.CanBeWrapped(element.parentNode)) {
    if(newElements.length > 0 && newElements[newElements.length - 1] == element.parentNode)
     continue;
    newElements.push(element.parentNode);
   } 
   else
    newElements.push(element);
  }
  return newElements;
 },
 RemoveFontStyleParent: function(editor, element, selectionBookmarks) {
  if(!element.parentNode)
   return childElements;
  var childElements = [];
  var parentFontStyleElement = this.FindParentFontStyleElement(element);
  if(parentFontStyleElement && parentFontStyleElement.nodeName != "BODY") {
   for(var child = parentFontStyleElement.firstChild; child; child = child.nextSibling)
    childElements.push(child);
   if(this.GetStyleAttributeValue(parentFontStyleElement) == this.GetStyleAttributeConstValue()) {
    this.SetStyleAttribute(parentFontStyleElement, "");
    if(!this.IsFontOrSpanElement(parentFontStyleElement) && !this.IsElementStylized(parentFontStyleElement))
     return this.GetCanBeWrappedElements(editor, childElements, selectionBookmarks);
   }
   if(__aspxHEBlockElements[parentFontStyleElement.nodeName.toLowerCase()] && this.IsElementStylized(parentFontStyleElement))
    return [];
   if(this.IsTagFontStyle(parentFontStyleElement) || (!this.IsExistAttributes(parentFontStyleElement) && !this.CanNotBeRemove(parentFontStyleElement))) {
    if(this.IsExistAttributes(parentFontStyleElement)) {
     var doc = editor.GetDesignViewDocument();
     _aspxReplaceTagName(parentFontStyleElement, "SPAN", false);
    }
    else {
     for(var i = 0, child; child = childElements[i]; i++)
      parentFontStyleElement.parentNode.insertBefore(child, parentFontStyleElement);
     parentFontStyleElement.parentNode.removeChild(parentFontStyleElement);
    }
   }
  }
  return this.GetCanBeWrappedElements(editor, childElements, selectionBookmarks);
 },
 RemoveStyle: function(editor, elements, selectionBookmarks, removeFontStyleInHierarchy) {
  var doc = editor.GetDesignViewDocument();
  for(var i = 0, element; element = elements[i]; i++) {
   var childElements = [];
   if(element.nodeType == 1) {
    if(this.IsTagFontStyle(element)) {
     if(!this.IsExistAttributes(element))
      childElements = this.UnwrapElement(editor, element, selectionBookmarks, removeFontStyleInHierarchy);
     else
      element = _aspxReplaceTagName(element, "SPAN", false);
    }
    if(this.GetStyleAttributeValue(element) == this.GetStyleAttributeConstValue() || this.IsStyleAttributeNormal(element)) {
     this.SetStyleAttribute(element, "");
     if(!this.IsExistAttributes(element) && this.IsFontOrSpanElement(element))
      childElements = this.UnwrapElement(editor, element, selectionBookmarks, removeFontStyleInHierarchy);
    }
   }
   if(element.parentNode) {
    if(this.IsElementStylized(element) && this.CanBeWrapped(element))
     this.StylizeElements(editor, [element], selectionBookmarks, true);
    if(removeFontStyleInHierarchy) {
     childElements = [];
     for(var child = element.firstChild; child; child = child.nextSibling)
      childElements.push(child);
     this.RemoveStyle(editor, childElements, selectionBookmarks, removeFontStyleInHierarchy);
    }
   } 
   else if(childElements.length > 0) {
    for(var j = 0, child; child = childElements[j]; j++) {
     if(child.parentNode && this.IsElementStylized(child.parentNode)) {
      this.StylizeElements(editor, childElements, selectionBookmarks, true);
      break;
     }
    }
   }
  }
 },
 GetFontStyleTagName: function (updateBoldItalic) {
  switch(this.GetCommandName()) {
   case ASPxClientCommandConsts.BOLD_COMMAND:
    return updateBoldItalic ? "STRONG" : "B";
   case ASPxClientCommandConsts.ITALIC_COMMAND:
    return updateBoldItalic ? "EM" : "I";
   case ASPxClientCommandConsts.UNDERLINE_COMMAND:
    return "U";
   case ASPxClientCommandConsts.STRIKETHROUGH_COMMAND:
    return "S";
  }
 },
 IsTextDecorationAttributeValue: function(attributeValue) {
  return attributeValue.indexOf(this.GetStyleAttributeConstValue()) > -1;
 },
 IsStyleAttributeNormal: function(element) {
  return this.IsFontOrSpanElement(element) && this.GetStyleAttributeValue(element) == "normal";
 },
 IsTagFontStyle: function(element) {
  if(this.IsCommandTextDecoration()) {
   var att = this.GetStyleAttributeValue(element);
   return (this.IsFontOrSpanElement(element) && this.IsTextDecorationAttributeValue(att) == this.GetStyleAttributeConstValue()) ||
       element.nodeName == this.GetFontStyleTagName();
  }
  else
   return element.nodeName == this.GetFontStyleTagName(true) || element.nodeName == this.GetFontStyleTagName(false);
 },
 IsElementStylized: function(element) {
  if(!element.parentNode)
   return;
  element = element.nodeType == 1 ? element : element.parentNode;
  if(this.IsTagFontStyle(element))
   return true;
  var attr = this.GetStyleAttribute();
  var attributeValue =  _aspxGetCurrentStyle(element)[attr];
  if(this.GetCommandName() == ASPxClientCommandConsts.BOLD_COMMAND && (__aspxNetscapeFamily || __aspxIE || __aspxOpera))
   return attributeValue != 400; 
  if(this.IsCommandTextDecoration())
   return this.IsTextDecorationAttributeValue(attributeValue);
  return attributeValue == this.GetStyleAttributeConstValue();
 },
 CreateStylizedWrapper: function(doc, updateDeprecatedElements, updateBoldItalic, tagName) {
  var newElement;
  if(this.IsCommandTextDecoration() && updateDeprecatedElements) {
   newElement = doc.createElement(tagName);
   this.SetStyleAttribute(newElement, this.GetStyleAttributeConstValue());
  }
  else
   newElement = doc.createElement(this.GetFontStyleTagName(updateBoldItalic));
  return newElement;
 },
 ChangeExecuteStyleCommandState: function(commandName, executeFontStyleCommandState) {
  var index = _aspxArrayIndexOf(executeFontStyleCommandState, commandName);
  if(index > -1)
   executeFontStyleCommandState.splice(index, 1);
  else
   executeFontStyleCommandState.push(commandName);
 },
 SkipStateOnFirstLoad: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.Justify = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.WrappedCommand, {
 ExecuteCore: function(cmdValue, editor) {
  var doc = editor.GetDesignViewDocument();
  var selection = editor.GetSelection();
  var tempNodeId = "tempSpanID";
  var elements = [];
  var isCollapsed = selection.IsCollapsed();
  if(!isCollapsed)
   elements = selection.GetElements(true);
  if(elements.length == 0 || isCollapsed)
   elements = [ ASPxHtmlEditorCommands.Utils.InsertNewElement(doc, selection, tempNodeId) ];
  var firstElement = elements[0];
  var selectionBookmarks;
  if(isCollapsed) {
   if(firstElement.id == tempNodeId && !firstElement.previousSibling && !firstElement.nextSibling) {
    var newElement = doc.createElement("DIV");
    firstElement.parentNode.insertBefore(newElement, firstElement);
    newElement.appendChild(firstElement);
    newElement.appendChild(__aspxIE && __aspxBrowserMajorVersion < 11 ? doc.createTextNode("\xA0") : doc.createElement("BR"));
   }
   selectionBookmarks = this.CreateBookmarkElements(doc, firstElement, firstElement, false);
  }
  else
   selectionBookmarks = this.CreateBookmarkElements(doc, firstElement, elements[elements.length - 1]);
  var notStylizedElements = this.GetNotStylizedElements(editor, elements);
  if(notStylizedElements.length > 0) {
   this.RemoveStyle(editor, notStylizedElements);
   this.StylizeElements(doc, notStylizedElements);
  }
  _aspxRemoveElement(_aspxGetElementByIdInDocument(doc, tempNodeId));
  editor.GetSelection().clientSelection.SelectExtendedBookmark(selectionBookmarks);
  return true;
 },
 GetStateCore: function(editor, selection, selectedParent, selectedElements) {
  if(this.canCheckSelectedElementStyle(selection, selectedParent, selectedElements))
   return this.IsElementStylized(selectedParent);
  return this.GetStateInternal(editor, selection, selectedElements);
 },
 GetNotStylizedElements: function(editor, elements) {
  var resultList = [];
  for(var i = 0, element; element = elements[i]; i++) {
   if(!element.parentNode || this.IsElementStylized(element))
    continue;
   if(ASPxHtmlEditorCommands.Utils.IsBlockElement(element))
    resultList.push(element);
   else {
    var inlineEl = this.FindInlineElementBeforeBlockParent(element);
    var inlineElements = ASPxHtmlEditorCommands.Utils.GetBetweenBlocksInlineElements(inlineEl);
    var blockElement = inlineEl.parentNode;
    if(inlineElements.length == blockElement.childNodes.length && blockElement.nodeName != "BODY")
     resultList.push(blockElement);
    else
     resultList = resultList.concat(inlineElements);
   }
  }
  return resultList;
 },
 StylizeElements: function(doc, elements) {
  var wraper;
  var attr = this.GetStyleAttributeConstValue();
  for(var i = 0, element; element = elements[i]; i++) {
   if(ASPxHtmlEditorCommands.Utils.IsBlockElement(element)) {
    this.SetStyleAttribute(element, attr);
    if(wraper)
     wraper = null;
   } 
   else {
    if(!wraper)
     wraper = this.CreateStylizedWrapper(doc, false, false, "DIV");
    if(!wraper.parentNode) 
     element.parentNode.insertBefore(wraper, element);
    wraper.appendChild(element);
   }
  }
 },
 RemoveStyleInHierarchy: function(editor, element) {
  if(element) {
   for(var child = element.firstChild; child; child = child.nextSibling)
    this.RemoveStyle(editor, [child]);
  }
 },
 FindInlineElementBeforeBlockParent: function(element) {
  if(ASPxHtmlEditorCommands.Utils.IsBlockElement(element.parentNode) || element.parentNode.nodeName == "BODY")
   return element;
  else
   return this.FindInlineElementBeforeBlockParent(element.parentNode);
 },
 SkipStateOnFirstLoad: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.FontSize  = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.WrappedCommand, {
 ExecuteCore: function(cmdValue, editor) {
  if(cmdValue) {
   var value = parseInt(cmdValue);
   var unitMeasure = typeof(cmdValue) == "string" && cmdValue.indexOf("%") > -1 && cmdValue.indexOf("px") > -1 && cmdValue.indexOf("pt") > -1;
   if(!unitMeasure && (value > 0 && value < 8))
    this.cmdValue = __aspxDefaultFontSizes[value - 1];
   else
    this.cmdValue = cmdValue;
  }
  return this.ExecuteInternal(cmdValue, editor);
 },
 GetValue: function(editor, selection, selectedElements) {
  var styleAttrValue;
  if(__aspxWebKitTouchUI || __aspxMSTouchUI)
   var styleAttrValue = this.TryGetValue(editor);
  else {
   selection = !selection ? editor.GetSelection() : selection;
   var selectedParent = this.GetSelectedElement(editor, selection, selectedElements);
   if(selectedElements && selectedElements.length == 1 && selectedElements[0].childNodes.length == 0)
    selectedElements = [];
   if(this.canCheckSelectedElementStyle(selection, selectedParent, selectedElements)) {
    var styleAttrValue =  this.GetCurrentStyleAttributeValue(selectedParent);
    return this.GetDefaultFontSize(styleAttrValue);
   }
   selectedElements = !selectedElements ? selection.GetElements(true) : selectedElements;
   if(selectedElements.length > 0)
    styleAttrValue = this.GetCommonStyleAttributeValue(selectedElements);
   if(!styleAttrValue)
    return "";
  }
  return this.GetDefaultFontSize(styleAttrValue);
 },
 GetStyleAttributeConstValue: function() {
  return this.cmdValue;
 },
 GetAttributeValue: function(element, attr) {
  var attrValue = "" + _aspxGetAttribute(element.nodeType == 1 ? element : element.parentNode, attr);
  if(parseInt(attrValue) > 0)
   return attrValue;
  return "";
 },
 IsTagFontStyle: function(element) {
  return this.GetCurrentStyleAttributeValue(element) == this.cmdValue;
 },
 GetDefaultFontSize: function(styleAttrValue) {
  if(styleAttrValue && typeof(styleAttrValue) == 'string') {
   var unitMeasure = styleAttrValue.indexOf("px") > -1 ? "px"
       : styleAttrValue.indexOf("pt") > -1 ? "pt"
       : undefined;
   if(unitMeasure) {
    var value = (Math.round(parseFloat(styleAttrValue))).toString();
    if(isNaN(value))
     return "";
    styleAttrValue = value + unitMeasure;
    if(unitMeasure == "px") {
     var index = _aspxGetDefaultSafariFontSizesInPixelHashTable()[styleAttrValue];
     return index > -1 ? index + 1 : "";
    }
    if(unitMeasure ==  "pt") {
     var index = _aspxGetDefaultSafariFontSizesHashTable()[styleAttrValue];
     if(!index || index == -1)
      index = _aspxGetDefaultFontSizesHashTable()[styleAttrValue];
     return index > -1 ? index + 1 : "";
    }
   }
  }
  return styleAttrValue;
 },
 SkipStateOnFirstLoad: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.FontName  = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.WrappedCommand, {
 ExecuteCore: function(cmdValue, editor) {
  if(cmdValue)
   this.cmdValue = cmdValue;
  return this.ExecuteInternal(cmdValue, editor);
 },
 GetStyleAttributeConstValue: function() {
  return this.cmdValue;
 },
 IsTagFontStyle: function(element) {
  return true;
 },
 GetValueCore: function(editor, selection, selectedParent, selectedElements) {
  try {
   var attrValue = this.canCheckSelectedElementStyle(selection, selectedParent, selectedElements) ?
    this.GetCurrentStyleAttributeValue(selectedParent) :
    this.GetCommonStyleAttributeValue(!selectedElements ? selection.GetElements(true) : selectedElements);
   if(attrValue) {
    attrValue = attrValue.replace(/'|"/g, "");
    var atteValueArray = attrValue.split(',');
    for(var i = 0, value; value = atteValueArray[i]; i++) {
     if(_aspxArrayIndexOf(editor.fontNames, value) > -1)
      return value;
    }
   } 
   return "";
  }
  catch(e) {}
  return "";
 },
 NeedUseCss: function() {
  return !(__aspxFirefox && __aspxBrowserVersion >= 4);
 },
 SkipStateOnFirstLoad: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.ApplyStyle = function(editor) {
 if(editor.executeApplyStyle.length == 0 && editor.executeRemoveFontStyle.length == 0)
  return;
 var parentWrapper, wrapper;
 var doc = editor.GetDesignViewDocument();
 if(editor.executeApplyStyle.length > 0) {
  var currentWrapper = null;
  for(var i = 0; i < editor.executeApplyStyle.length; i++) {
   wrapper = ASPxHtmlEditorCommandList[editor.executeApplyStyle[i]].CreateStylizedWrapper(doc, editor.updateDeprecatedElements, editor.updateBoldItalic, "SPAN");
   if(i == 0)
    parentWrapper = wrapper;
   if(currentWrapper)
    currentWrapper.appendChild(wrapper);
   currentWrapper = wrapper;
  }
 }
 var selection = editor.GetSelection();
 var tempSpan = doc.createElement("SPAN");
 tempSpan.id = "tempSpan";
 if(!selection.IsCollapsed()) {
  var range = selection.clientSelection.GetRange();
  range.collapse(false);
  if(__aspxIE && __aspxBrowserMajorVersion < 11)
   range.select();
 }
 selection.InsertHtml(tempSpan.outerHTML);
 var tempElement = doc.getElementById("tempSpan");
 var previousNode = tempElement.previousSibling;
 var parentNode = tempElement.parentNode;
 if(__aspxIE && __aspxBrowserMajorVersion < 9) {
  editor.preventLostFocus = true;
  editor.GetDesignViewCell().focus();
  if(!doc.getElementById("tempSpan")) {
   _aspxInsertElementAfter(tempSpan, previousNode);
   tempElement = doc.getElementById("tempSpan");
  }
 }
 tempSpan = tempElement;
 if(!previousNode || previousNode.nodeType != 3) return;
 var imputText = previousNode.nodeValue.substring(previousNode.nodeValue.length - 1);
 previousNode.nodeValue = previousNode.nodeValue.substring(0, previousNode.nodeValue.length - 1);
 var imputTextNode =  doc.createTextNode(imputText);
 selectionBookmarks = { "startMarkerID": "sbm", "endMarkerID": "ebm"};
 var sbm = doc.createElement("span");
 sbm.id = "sbm";
 var ebm = doc.createElement("span");
 ebm.id = "ebm";
 if(!parentWrapper) {
  parentNode.insertBefore(imputTextNode, tempSpan);
  parentNode.insertBefore(sbm, tempSpan);
  parentNode.insertBefore(ebm, sbm);
 }
 else {
  wrapper.appendChild(imputTextNode);
  parentNode.insertBefore(parentWrapper, tempSpan);
  wrapper.appendChild(ebm);
  wrapper.appendChild(sbm);
 }
 _aspxRemoveElement(tempSpan);
 for(var i = 0, executeCommandFontStyle; executeCommandFontStyle = editor.executeRemoveFontStyle[i]; i++)
  ASPxHtmlEditorCommandList[executeCommandFontStyle].Execute(imputTextNode, editor);
 var node = __aspxNetscapeFamily || __aspxOpera ? imputTextNode.parentNode : ebm.previousSibling;
 if(node && node.style && (node.style.fontWeight == "normal" || node.style.fontStyle == "normal")) {
  node.appendChild(ebm);
  node.appendChild(sbm);
 }
 editor.GetSelection().clientSelection.SelectExtendedBookmark(selectionBookmarks);
 editor.ClearExecutingCommandState();
};
ASPxHtmlEditorCommands.SelectionManipulationCommand = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  this.newElements = [];
  if(__aspxIE && __aspxBrowserMajorVersion > 8)
   editor.RestoreSelection();
 },
 WrapElementInternal: function(target, wrapper) {
  var inline = ASPxHtmlEditorCommands.Utils.IsInlineTextElement(wrapper);
  if((inline || this.IsNewElement(target.previousSibling)) && target.previousSibling && this.CanMerge(target.previousSibling, wrapper)) {
   target.previousSibling.appendChild(target);
   return target.previousSibling;
  }
  else if ((inline || this.IsNewElement(target.nextSibling)) && target.nextSibling && this.CanMerge(target.nextSibling, wrapper)) {
   target.nextSibling.insertBefore(target, target.nextSibling.firstChild);
   return target.nextSibling;
  }
  else {
   target.parentNode.insertBefore(wrapper, target);
   wrapper.appendChild(target);
   this.newElements.push(wrapper);
   return wrapper;
  }
 },
 IsNewElement: function(target) {
  for(var i = 0, el; el = this.newElements[i]; i++) {
   if(target == el)
    return true;
  }
  return false;
 },
 CanMerge: function(el1, el2) {
  return el1.tagName == el2.tagName && el1.className == el2.className;
 },
 SeparateParentByPredicate: function(target, predicate) {
  while(target && predicate(target) && this.SeparateParent(target, target.parentNode.className, false)) {
   target = target.parentNode;
  }
  return target;
 },
 SeparateParent: function(target, className, tryMerge) { 
  var parent = target.parentNode;
  if(!parent || parent.tagName == "BODY")
   return false;
  if(target.previousSibling) {
   var prevParent = parent.previousSibling;
   if(!prevParent || prevParent.tagName != parent.tagName || prevParent.className != parent.className) {
    prevParent = parent.cloneNode(false);
    parent.parentNode.insertBefore(prevParent, parent);
   }
   for(var child = parent.firstChild; child && child != target; child = parent.firstChild) {
    prevParent.appendChild(child);
   }
  }
  if(target.nextSibling) {
   var nextParent = parent.nextSibling;
   if(!nextParent || nextParent.tagName != parent.tagName || nextParent.className != parent.className) {
    nextParent = parent.cloneNode(false);
    _aspxInsertElementAfter(nextParent, parent);
   }
   for(var child = parent.lastChild; child && child != target; child = parent.lastChild) {
    nextParent.insertBefore(child, nextParent.firstChild);
   }
  }
  this.SetClassName(parent, className);
  if(tryMerge && parent.previousSibling && this.CanMerge(parent, parent.previousSibling)) {
   parent.previousSibling.appendChild(target);
   _aspxRemoveElement(parent);
  }
  else if(tryMerge && parent.nextSibling && this.CanMerge(parent, parent.nextSibling)) {
   parent.nextSibling.insertBefore(target, parent.nextSibling.firstChild);
   _aspxRemoveElement(parent);
  }
  return true;
 },
 SetClassName: function(target, className) {
  if(!className) 
   _aspxRemoveAttribute(target, !__aspxIE || __aspxBrowserVersion >= 8 ? "class" : "className");
  else
   target.className = className;
 }
});
ASPxHtmlEditorCommands.ApplyCss = _aspxCreateClass(ASPxHtmlEditorCommands.SelectionManipulationCommand, {
 Execute: function(value, editor) {
  ASPxHtmlEditorCommands.SelectionManipulationCommand.prototype.Execute.apply(this, arguments);
  var cmdValue;
  if(typeof(value) != "string")
   cmdValue = value;
  else {
   var valueArray = value.split("|");
   cmdValue = { tagName: valueArray[0], cssClass: valueArray[1]};
  }
  cmdValue.tagName = _aspxTrim(cmdValue.tagName).toUpperCase();
  cmdValue.cssClass = _aspxTrim(cmdValue.cssClass);
  if(this.IsExclusionTagName(cmdValue.tagName)) 
   return false;    
  var selection = editor.GetSelection();
  var parentElement = selection.GetSelectedElement();
  if(parentElement.nodeType == 3)
   parentElement = parentElement.parentNode;
  var cleanMode = !cmdValue.cssClass && !cmdValue.tagName;
  var getNextSibling = function(element) { return element.nextSibling; };
  var getPreviousSibling = function(element) { return element.previousSibling; };
  var getSibling = function(element, func) { 
   element = func(element);
   while(element && element.nodeType == 3 && (!element.nodeValue || element.nodeValue.indexOf(" ") < 0 && !_aspxTrim(element.nodeValue)))
    element = func(element);
   return element;
  };
  if(this.IsExclusionTagName(parentElement.tagName)) {
   this.SetClassName(parentElement, cmdValue.cssClass);
  }
  else if(selection.GetHtml()) {
   var elements = selection.GetElements();
   for(var i = 0, el; el = elements[i]; i++) {
    if(cleanMode)
     this.CleanFormat(el.nodeType == 3 && !ASPxHtmlEditorCommands.Utils.IsInlineTextElement(el.parentNode) && !getSibling(el, getPreviousSibling) && !getSibling(el, getNextSibling) ? el.parentNode : el);
    else if(!this.GetEqualParentElement(el.nodeType == 3 ? el.parentNode : el, cmdValue.tagName, cmdValue.cssClass))
     this.ApplyFormat(el, cmdValue.cssClass, cmdValue.tagName);
   }
  }
  return true;
 },
 GetValue: function(editor, selection, selectedElements) {
  selection = !selection ? editor.GetSelection() : selection;
  var element = selection.GetSelectedElement();
  var tagName = "";
  var cssClass = "";
  if (element && element.nodeType == 1 && element.tagName != "BODY") {
   tagName = element.tagName.toLowerCase();
   cssClass = element.className;
  }
  return { tagName: tagName, cssClass: cssClass };
 },
 CleanFormat: function(el) {
  var parent = el.parentNode;
  if(el.nodeType == 3 && parent.className && ASPxHtmlEditorCommands.Utils.IsInlineTextElement(parent))
   this.SeparateParent(el, "", true);
  else if(el.nodeType == 1) {
   this.CleanFormatInDescendants(el);
   var prevSibling = el.previousSibling;
   if(el.previousSibling && prevSibling.tagName == el.tagName && !prevSibling.className) {
    for(var child = el.firstChild; child; child = el.firstChild) {
     el.previousSibling.appendChild(child);
    }
    _aspxRemoveElement(el);
   }   
  }
 },
 CleanFormatInDescendants: function(el) {
  if(el.nodeType == 1) {
   this.SetClassName(el, "");
   for(var child = el.firstChild; child; child = child.nextSibling) {
    this.CleanFormatInDescendants(child);
   }
  }
 },
 ApplyFormat: function(el, className, tagName) {
  if(el.nodeType == 1 && (!tagName || el.tagName == tagName))
   this.AppendClassName(el, className);
  else
   this.ApplyWrapperFormat(el, !tagName ? "SPAN" : tagName, className);
 },
 ApplyWrapperFormat: function(el, tagName, className) {
  if(this.FindNotNestedNode(el) && this.IsCantBeNested(tagName)) {
   var _this = this;
   var predicate = function(target) { return !_this.IsCantBeNested(target); };
   var nnElement = this.SeparateParentByPredicate(el, predicate);
   var wrapper = this.WrapElement(nnElement, tagName, className);
   for(var child = nnElement.firstChild; child; child = nnElement.firstChild) {
    nnElement.parentNode.insertBefore(child, nnElement);
   }
   _aspxRemoveElement(nnElement);
  }
  else if(ASPxHtmlEditorCommands.Utils.IsInlineTextElement(el.nodeType == 3 ? el.parentNode : el)) {
   var predicate = function(target) { return !ASPxHtmlEditorCommands.Utils.IsInlineTextElement(target.parentNode); };
   el = ASPxHtmlEditorCommands.Utils.IsInlineTextElement(tagName) ? el : this.SeparateParentByPredicate(el, predicate);
   this.WrapElement(el, tagName, className);
  }
  else if(el.nodeType == 3)
   this.WrapElement(el, tagName, className);
  else
   this.ApplyFormatToInlineChilds(el, tagName, className);
 },
 AppendClassName: function(target, className) {
  if(className && target.className.indexOf(className) == -1) {
   if(target.className.length > 0)
    className = " " + className; 
   target.className += className;
  }
 },
 WrapElement: function(target, tagName, className) {
  var wrapper = target.ownerDocument.createElement(tagName);
  this.SetClassName(wrapper, className);
  this.WrapElementInternal(target, wrapper);
 },
 ApplyFormatToInlineChilds: function(el, tagName, className) {
  var child = el.firstChild;
  while(child) {
   var next = child.nextSibling;
   if(child.nodeType == 3)
    this.WrapElement(child, tagName, className);
   else if(child.tagName == tagName && child.className.indexOf(className) < 0)
    this.AppendClassName(child, className);
   else if(ASPxHtmlEditorCommands.Utils.IsInlineTextElement(child))
    this.WrapElement(child, tagName, className);
   else
    this.ApplyFormatToInlineChilds(child, tagName, className);
   child = next;
  }
 },
 IsCantBeNested: function(el) {
  var expr = /^(H[1-6]|P|ADDRESS|BLOCKQUOTE|PRE|A)$/i;
  return expr.test(typeof(el) == "object" ? el.tagName : el);
 },
 IsExclusionTagName: function(tagName) {
  tagName = tagName.toUpperCase();
  return tagName == "IMG" || tagName == "TABLE" || tagName == "OBJECT" || tagName == "EMBED";
 },
 GetEqualParentElement: function(elem, tagName, cssClass) {
  if (tagName && cssClass)
   return _aspxGetParentByTagNameAndAttributeValue(elem, tagName, "class", cssClass);
  else if (cssClass)
   return _aspxGetParentByPartialClassName(elem, cssClass);
 },
 FindNotNestedNode: function(el) {
  if(!el || el.tagName == "BODY")
   return null;
  if(el.nodeType == 3)
   el = el.parentNode;
  if(this.IsCantBeNested(el))
   return el;
  return this.FindNotNestedNode(el.parentNode);
 },
 SkipStateOnFirstLoad: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.FontColor = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 Execute: function(cmdValue, editor) {
  if (!cmdValue)
   cmdValue = editor.currentFontColor;
  else
   editor.currentFontColor = cmdValue;
  var hyperlinks;
  if(__aspxIE || __aspxWebKitFamily)
   hyperlinks = this.SaveHyperlinks(editor);
  if(__aspxFirefox && __aspxBrowserVersion >= 4) { 
   var contentAreaDoc = editor.GetDesignViewDocument();
   contentAreaDoc.execCommand("useCSS", false, false);
   var commandExecResult = ASPxHtmlEditorCommands.Browser.Command.prototype.Execute.call(this, cmdValue, editor);
   contentAreaDoc.execCommand("useCSS", false, true);
  }
  else
   var commandExecResult = ASPxHtmlEditorCommands.Browser.Command.prototype.Execute.call(this, cmdValue, editor);
  if(hyperlinks)
   this.RestoreHyperlinks(hyperlinks);
  return commandExecResult;
 },
 GetValue: function(editor, selection, selectedElements) {
  return _aspxColorToHexadecimal(ASPxHtmlEditorCommands.Browser.Command.prototype.GetValue.call(this, editor));
 },
 NeedUseCss: function() {
  return !__aspxNetscapeFamily;
 },
 TryGetValue: function(editor) {
  return editor.currentFontColor;
 },
 SaveHyperlinks: function(htmlEditor) {
  var hyperlinks = [ ];
  var selection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
  var selectionContainer = selection.GetParentElement();
  var anchors = _aspxGetElementsByTagName(selectionContainer, "A");
  for(var i = 0; i < anchors.length; i++) {
   var anchor = anchors[i];
   if(this.IsHyperlink(anchor)) {
    hyperlinks.push(
     {
      element: anchor,
      innerHTML: anchor.innerHTML
     }
    );
   }
  }
  return hyperlinks;
 },
 RestoreHyperlinks: function(hyperlinks) {
  for(var i = 0; i < hyperlinks.length; i++) {
   var hyperlink = hyperlinks[i];
   hyperlink.element.innerHTML = hyperlink.innerHTML;
  }
 },
 IsHyperlink: function(anchor) {
  return typeof(anchor.href) == "string" && anchor.href.length > 0;
 }
});
ASPxHtmlEditorCommands.Browser.BgColor = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.FontColor, {
 Execute: function(cmdValue, editor) {
  if (!cmdValue)
   cmdValue = editor.currentBgColor;
  else
   editor.currentBgColor = cmdValue;
  return ASPxHtmlEditorCommands.Browser.Command.prototype.Execute.call(this, cmdValue, editor);
 },
 GetCommandName: function() {
  return __aspxIE ? ASPxHtmlEditorCommands.Browser.Command.prototype.GetCommandName.call(this) : "HiliteColor";
 },
 NeedUseCss: function() {
  return true;
 },
 TryGetValue: function(editor) {
  return editor.currentBgColor;
 }
});
ASPxHtmlEditorCommands.Browser.InsertList = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 GetState: function(editor, selection, selectedElements) {
  selection = !selection ? editor.GetSelection() : selection;
  var curSelection = selection.clientSelection;
  var tagName = "";
  var parent = curSelection.GetParentElement();
  switch (this.GetCommandName()) {
   case ASPxClientCommandConsts.INSERTORDEREDLIST_COMMAND:
    tagName = "OL";break;
   case ASPxClientCommandConsts.INSERTUNORDEREDLIST_COMMAND:
    tagName = "UL";break;
  }
  var parentList = ASPxHtmlEditorCommands.Browser.Indent.GetParentList(parent);
  return tagName && parentList && parentList.tagName == tagName;
 },
 Execute: function(cmdValue, editor) {
  var doc = editor.GetDesignViewDocument(),
   selection = editor.GetSelection(),
   selectedElement = selection.selectedElement,
   clientSelection = selection.clientSelection,
   bookmark = clientSelection.GetExtendedBookmark(),
   result = false,
   listItem;
  if(__aspxIE) {
   var startNode = _aspxGetElementByIdInDocument(doc, bookmark.startMarkerID);
   if(!startNode.nextSibling)
    this.InsertBeforeNextTextNode(doc, startNode);
  }
  var tagName = (this.GetCommandName() == ASPxClientCommandConsts.INSERTORDEREDLIST_COMMAND) ? "OL" : "UL",
   oppositeTagName = (tagName == "OL") ? "UL" : "OL";
  var parentList = ASPxHtmlEditorCommands.Browser.Indent.GetParentList(selectedElement);
  if(parentList) {
   if(selection.IsCollapsed()) {
    if(parentList.nodeName == tagName)
     this.UnwrapSelectedListItems(doc, bookmark, selectedElement);
    else {
     listItem = _aspxGetParentByTagName(selectedElement, "LI");
     this.ChangeListType([listItem], tagName, doc);
    }
   }
   else {
    var needUnwrapListItems = true;
    var listItemsList = [];
    var elements = selection.GetElements();
    var endNode = _aspxGetElementByIdInDocument(doc, bookmark.endMarkerID);
    if(!endNode.nextSibling && endNode.previousSibling.nodeName == "LI")
     endNode.previousSibling.appendChild(endNode);
    for(var el, i = 0; el = elements[i]; i++) {
     listItem = _aspxGetParentByTagName(el, "LI");
     if(listItem) {
      var childLists = _aspxGetChildNodesByTagName(listItem, oppositeTagName);
      for(var cl, j = 0; cl = childLists[j]; j++) {
       _aspxReplaceTagName(cl, tagName, false);
       needUnwrapListItems = false;
      }
     }
     if(listItem && listItem.parentNode.tagName == oppositeTagName) {
      if(listItemsList.length == 0 || listItemsList[listItemsList.length - 1] != listItem) {
       listItemsList.push(listItem);
       continue;
      }
      else if(listItemsList[listItemsList.length - 1].parentNode == listItem.parentNode)
       continue;
     }
     needUnwrapListItems = needUnwrapListItems && listItemsList.length == 0;
     this.ChangeListType(listItemsList, tagName, doc);
     listItemsList = [];
    }
    if(needUnwrapListItems && listItemsList.length == 0)
     this.UnwrapSelectedListItems(doc, bookmark, selectedElement);
    else
     this.ChangeListType(listItemsList, tagName, doc);
   }
   result = true;
  }
  else {
   selectedElement = this.GetBlockSelectedElement(selectedElement);
   var lineInfos = this.GetLineInfos(selectedElement);
   var selectedLineInfos = this.GetSelectedLineInfos(selectedElement, lineInfos, bookmark);
   result = this.CreateBulletList(doc, tagName, lineInfos, selectedLineInfos.startLineIndex, selectedLineInfos.endLineIndex);
   var startListItem = _aspxGetElementByIdInDocument(doc, bookmark.startMarkerID).parentNode;
   var endListItem =_aspxGetElementByIdInDocument(doc, bookmark.endMarkerID).parentNode;
   if(startListItem == endListItem) {
    if(__aspxIE && __aspxBrowserVersion < 11) {
     if(startListItem.innerText == " ") {
      for(var i = 0, childNode; childNode = startListItem.childNodes[i]; i++) {
       if(childNode.nodeType == 3)
        childNode.nodeValue = "";
      }
     }
    } 
    else if(startListItem.childNodes.length == 2)
     startListItem.appendChild(doc.createElement("BR"));
   }
  }
  editor.GetSelection().clientSelection.SelectExtendedBookmark(bookmark);
  return result;
 },
 InsertBeforeNextTextNode: function(doc, element) {
  var getNextSibling = function(elem) { return elem.nextSibling; }.aspxBind(this);
  var parentNode = ASPxHtmlEditorCommands.Browser.Indent.GetParent(element, getNextSibling);
  if(parentNode) {
   var nextSibling = parentNode.nextSibling;
   if(nextSibling.nodeType == 1) {
    var textNode = _aspxGetChildTextNode(nextSibling, 0);
    var node = !textNode ? nextSibling : textNode.parentNode;
    node.appendChild(element);
    element.parentNode.insertBefore(element, node.firstChild);
   }
   else
    nextSibling.parentNode.insertBefore(element, nextSibling);
  }
 },
 RemoveBookmark: function(el) {
  if(el.parentNode && el.parentNode.childNodes.length == 1 && (el.parentNode.tagName == "UL" || el.parentNode.tagName == "OL"))
   _aspxRemoveElement(el.parentNode);
  else
   _aspxRemoveElement(el);
 },
 ChangeListType: function(listItems, tagName, doc) {
  if(listItems.length == 0)
   return;
  var curList = listItems[0].parentNode;
  var newList = doc.createElement(tagName);
  curList.parentNode.insertBefore(newList, curList);
  if(listItems[0].previousSibling && listItems[0].previousSibling.tagName == "LI") {
   var newPrevList = curList.cloneNode(false);
   var curNode = curList.firstChild;
   do {
    var nextNode = curNode.nextSibling;
    newPrevList.appendChild(curNode);
    curNode = nextNode;
   } while(curNode && nextNode != listItems[0]);
   newList.parentNode.insertBefore(newPrevList, newList);
  }
  for(var listItem, i = 0; listItem = listItems[i]; i++)
   newList.appendChild(listItem);
  if(curList.childNodes.length == 0)
   _aspxRemoveElement(curList);
 },
 UnwrapSelectedListItems: function(doc, bookmark, selectedElement) {
  var selectedList = ASPxHtmlEditorCommands.Browser.Indent.GetMainParentList(selectedElement);
  var listItemArray = ASPxHtmlEditorCommands.Browser.Indent.GetListItemArray(selectedList, 0, null, null, bookmark);
  var startNode = _aspxGetElementByIdInDocument(doc, bookmark.startMarkerID);
  var endNode =_aspxGetElementByIdInDocument(doc, bookmark.endMarkerID);
  var startListItem = _aspxGetParentByTagName(startNode, "LI");
  var endListItem = _aspxGetParentByTagName(endNode, "LI");
  if(!startListItem && !endListItem) {
   selectedElement.appendChild(endNode);
   selectedElement.appendChild(startNode);
   startListItem = selectedElement;
   endListItem = selectedElement;
  }
  var tempArray = [];
  var structureArray = [];
  var index = 0;
  for(var listItem; listItem = listItemArray[index]; index++) {
   if(startListItem === listItem.node)
    break;
   tempArray.push(listItem);
  }
  if(tempArray.length > 0)
   structureArray.push(ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray(tempArray));
  var wrapper;
  for(var listItem; listItem = listItemArray[index]; index++) {
   wrapper = doc.createElement("DIV");
   structureArray.push(wrapper);
   var childNodes = listItem.node.childNodes;
   for(var child, i = 0; child = childNodes[i]; i++) {
    if(child.nodeName != "OL" && child.nodeName != "UL" && (child.nodeType != 3 || child.nodeValue))
     wrapper.appendChild(child.cloneNode(true));
   }
   if(endListItem === listItem.node)
    break;
  }
  index++;
  tempArray = [];
  for(var listItem; listItem = listItemArray[index]; index++)
   tempArray.push(listItem);
  if(tempArray.length > 0) {
   this.UpdateListItemsLevels(tempArray);
   structureArray.push(ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray(tempArray));
  }
  for(var item, i = 0; item = structureArray[i]; i++)
   selectedList.parentNode.insertBefore(item, selectedList);
  _aspxRemoveElement(selectedList);
  startNode = _aspxGetElementByIdInDocument(doc, bookmark.startMarkerID);
  endNode =_aspxGetElementByIdInDocument(doc, bookmark.endMarkerID);
  if(endNode.parentNode == wrapper && startNode.parentNode == wrapper && wrapper.childNodes.length == 2) {
   if(__aspxIE && __aspxBrowserVersion < 11) {
    _aspxInsertElementAfter(endNode, wrapper);
    _aspxInsertElementAfter(startNode, endNode);
    wrapper.innerHTML = "&nbsp;";
   }
   else
    wrapper.appendChild(doc.createElement("BR"));
  }
 },
 UpdateListItemsLevels: function(listItemArray) {
  var firstItem = listItemArray[0];
  var firstItemLevelValue = firstItem.level;
  if(firstItemLevelValue > 0) {
   firstItem.level = 0;
   firstItem.parentItemIndex = -1;
   for(var listItem, i = 1; listItem = listItemArray[i]; i++) {
    if(listItem.level == 0)
     break;
    var newLevelValue = listItem.level - firstItemLevelValue;
    listItem.level = newLevelValue;
    listItem.parentItemIndex = newLevelValue == 0 ? -1 : newLevelValue;
   }
  }
 },
 CreateBulletList: function(doc, tagName, lineInfos, startLineIndex, endLineIndex) {
  if(startLineIndex == -1 || endLineIndex == -1)
   return false;
  var lineIndex = startLineIndex;
  var lineCount = lineInfos.length;
  while(lineIndex <= endLineIndex) {
   var line = lineInfos[lineIndex];
   var firstLineNode = line[0];
   var lastLineNode = line[line.length - 1];
   var firstLineElement = this.GetLineSelectedElement(firstLineNode);
   var lastLineElement = this.GetLineSelectedElement(lastLineNode);
   var firstBlockNode = this.GetBlockSelectedElement(firstLineNode);
   var hasBlockSibling = _aspxGetChildNodes(firstBlockNode, function(element) {
    return ASPxHtmlEditorCommands.Enter.IsBlockNode(element);
   }).length > 0;
   var parent = null;
   var replacedElement = null;
   var isParentBlockLimit = this.IsBlockLimitElement(firstBlockNode);
   var isMoveOutTheBlock = !hasBlockSibling && !isParentBlockLimit;
   if(lineIndex == startLineIndex) {
    var isList = false;
    var sBlock = firstBlockNode;
    if(sBlock.tagName == "LI") {
     sBlock = sBlock.parentNode;
     isList = true;
     isMoveOutTheBlock = true;
    }
    for(var i = 0; i < lineIndex; i++) {
     var uBlock = this.GetBlockSelectedElement(lineInfos[i][0]);
     if(uBlock.tagName == "LI")
      uBlock = uBlock.parentNode;
     if(uBlock == sBlock && uBlock.tagName != tagName) {
      var tFirst = lineInfos[i];
      var tLast = lineInfos[lineIndex - 1];
      var tFirstLineNode = tFirst[0];
      var tLastLineNode = tLast[tLast.length - 1];
      var textNodes = ASPxClientHtmlProcessingUtils.SplitNode(uBlock, [tFirstLineNode, tLastLineNode]);
      if(isMoveOutTheBlock)
       sBlock.parentNode.insertBefore(textNodes[1].cloneNode(true), sBlock);
      else {
       var childs = textNodes[1].childNodes;
       var target = sBlock.firstChild;
       for(var j = 0; j < childs.length; j++)
        sBlock.insertBefore(childs[j].cloneNode(true), target);
      }
      this.RemoveLineBreakElement(uBlock, tFirstLineNode, tLastLineNode);
      this.RemoveLineElement(uBlock, tFirstLineNode, tLastLineNode);
      if(isList) {
       while(_aspxGetInnerText(uBlock.firstChild) == "")
        uBlock.removeChild(uBlock.firstChild);
      }
      break;
     }
    }
   }
   if(isParentBlockLimit && !this.IsAcceptableElement(firstBlockNode)) {
    lineIndex++;
    continue;
   }
   if(firstBlockNode.tagName == "LI") {
    var parentLI = _aspxGetParentByTagName(firstLineNode, "LI");
    var parentList = parentLI.parentNode;
    var prev = parentList.previousSibling;
    if(parentList.tagName != tagName) {
     if(!prev || prev.nodeType != 1 || prev.tagName != tagName) {
      prev = document.createElement(tagName);
      parentList.parentNode.insertBefore(prev, parentList);
     }
     prev.appendChild(parentLI.cloneNode(true));
     _aspxRemoveElement(parentLI);
    }
    else if(prev && prev.nodeType == 1 && prev.tagName == tagName) {
     prev.appendChild(parentLI.cloneNode(true));
     _aspxRemoveElement(parentLI);
    }
    if(_aspxGetInnerText(parentList) == "")
     parentList.parentNode.removeChild(parentList);
   }
   else {
    var list = doc.createElement(tagName);
    var addInBegin = false;
    if(isMoveOutTheBlock) {
     replacedElement = firstBlockNode;
     parent = replacedElement.parentNode;
     var node = replacedElement.previousSibling;
     if(node && node.nodeType == 1 && node.tagName == tagName)
      list = node;
     else
      parent.insertBefore(list, replacedElement);
     parent = replacedElement;
    }
    else {
     parent = firstLineElement.parentNode;
     var prevNode = firstLineElement.previousSibling;
     var nextNode = lastLineElement.nextSibling;
     if(prevNode && prevNode.nodeType == 1 && prevNode.tagName == tagName)
      list = prevNode;
     else if(nextNode && nextNode.nodeType == 1 && nextNode.tagName == tagName) {
      list = nextNode;
      addInBegin = true;
     }
     else {
      parent.insertBefore(list, firstLineElement);
      if(this.IsBoundaryElement(list.previousSibling))
       parent.removeChild(list.previousSibling);
     }
    }
    var li = doc.createElement("LI");
    if(addInBegin)
     list.insertBefore(li, list.firstChild);
    else
     list.appendChild(li);
    var textNodes = ASPxClientHtmlProcessingUtils.SplitNode(parent, [firstLineNode, lastLineNode]);
    if(isMoveOutTheBlock)
     this.AppendLineElement(li, replacedElement, textNodes[1].cloneNode(true));
    else {
     var childs = textNodes[1].childNodes;
     for(var j = 0; j < childs.length; j++)
      this.AppendLineElement(li, null, childs[j].cloneNode(true));
    }
    this.RemoveLineBreakElement(parent, firstLineNode, lastLineNode);
    this.RemoveLineElement(parent, firstLineNode, lastLineNode);
    if(replacedElement && _aspxGetInnerText(replacedElement) == "")
     replacedElement.parentNode.removeChild(replacedElement);
   }
   lineIndex++;
  }
  return true;
 },
 AppendLineElement: function(li, lineBlock, node) {
  if(lineBlock && {p:1, div:1}[node.tagName.toLowerCase()]) {
   _aspxCopyAllAttributes(lineBlock, li);
   li.innerHTML = node.innerHTML;
  }
  else
   li.appendChild(node);
 },
 RemoveLineBreakElement: function(lineBlock, firstLineNode, lastLineNode) {
  var isRemoved = false;
  var first = firstLineNode;
  var last = lastLineNode;
  var parent = first.parentNode;
  do {
   if(last && this.IsBoundaryElement(last.nextSibling)) {
    last.parentNode.removeChild(last.nextSibling);
    isRemoved = true;
   }
   else if(first && this.IsBoundaryElement(first.previousSibling)) {
    first.parentNode.removeChild(first.previousSibling);
    isRemoved = true;
   }
   else {
    first = first ? first.previousSibling : null;
    last = last ? last.nextSibling : null;
    if(!(first || last)) {
     first = parent.previousSibling ? parent.previousSibling : null;
     last = parent.nextSibling ? parent.nextSibling : null;
     if(parent != lineBlock)
      parent = parent.parentNode;
    }
   }
  } while(!isRemoved && parent != lineBlock);
 },
 RemoveLineElement: function(lineBlock, firstLineNode, lastLineNode) {
  if(firstLineNode == lastLineNode) {
   firstLineNode.parentNode.removeChild(firstLineNode);
   return;
  }
  var isNeedRemoveElement = (arguments[3] == true);
  if(lineBlock.hasChildNodes()) {
   var childs = lineBlock.childNodes;
   var index = 0;
   while(childs[index]) {
    if(childs[index].hasChildNodes())
     isNeedRemoveElement = this.RemoveLineElement(childs[index], firstLineNode, lastLineNode, isNeedRemoveElement);
    if(childs[index] == firstLineNode)
     isNeedRemoveElement = true;
    if(isNeedRemoveElement) {
     if(childs[index] == lastLineNode)
      isNeedRemoveElement = false;
     lineBlock.removeChild(childs[index]);
    }
    else
     index++;
   }
  }
  return isNeedRemoveElement;
 },
 GetBlockSelectedElement: function(element) {
  while(element && !(this.IsBlockLimitElement(element) || this.IsBlockElement(element)))
   element = element.parentNode;
  return element;
 },
 GetLineSelectedElement: function(element) {
  var parent = element.parentNode;
  while(parent && !this.IsBlockLimitElement(parent) && !this.IsBlockElement(parent)) {
   element = parent;
   parent = parent.parentNode;
  }
  return element;
 },
 GetLineInfos: function(selectedElement) {
  var properties = {
   lineInfos: [],
   lineElements: []
  };
  properties = this.SearchHtmlLines(selectedElement, properties);
  return properties.lineInfos;
 },
 GetSelectedLineInfos: function(parentElement, lineInfos, bookmark) {
  var startLineIndex = -1,
   endLineIndex = -1,
   i = 0,
   lineCount = lineInfos.length;
  while(i < lineCount) {
   var line = lineInfos[i];
   var markers;
   if(line.length == 1 && line[0].nodeType == 1)
    markers = this.SearchMarkers(line[0], bookmark);
   else if(line.length > 1) {
    params = [line[0], line[line.length - 1]];
    parts = ASPxClientHtmlProcessingUtils.SplitNode(parentElement, params);
    markers = this.SearchMarkers(parts[1], bookmark);
   }
   if(markers) {
    if(startLineIndex == -1 && markers.startMarkerIsFound)
     startLineIndex = i;
    if(endLineIndex == -1 && markers.endMarkerIsFound) {
     endLineIndex = i;
     break;
    }
   }
   i++;
  }
  return {
   startLineIndex: startLineIndex,
   endLineIndex: endLineIndex
  };
 },
 SearchHtmlLines: function(element, properties) {
  var nodes = element.childNodes;
  for(var i = 0; i < nodes.length; i++) {
   var isLineBreak = this.IsBoundaryElement(nodes[i]) || this.IsBlockElement(nodes[i]) || this.IsBlockLimitElement(nodes[i]);
   if( !isLineBreak ) {
    if(nodes[i].hasChildNodes())
     properties = this.SearchHtmlLines(nodes[i], properties);
    else
     properties.lineElements.push(nodes[i]);
   }
   else {
    if(properties.lineElements.length > 0) {
     properties.lineInfos.push( properties.lineElements );
     properties.lineElements = [];
    }
    if(nodes[i].hasChildNodes())
     properties = this.SearchHtmlLines(nodes[i], properties);
   }
  }
  if(this.IsBlockElement(element) || this.IsBlockLimitElement(element)) {
   if(properties.lineElements.length > 0) {
    properties.lineInfos.push( properties.lineElements );
    properties.lineElements = [];
   }
  }
  return properties;
 },
 SearchMarkers: function(element, bookmark) {
  var start = false;
  var end = false;
  if(element.nodeType == 1) {
   if(element.id == bookmark.startMarkerID)
    start = true;
   if(element.id == bookmark.endMarkerID)
    end = true;
   if(element.hasChildNodes()) {
    var childs = element.childNodes;
    for(var i = 0; i < childs.length; i++) {
     var markers = this.SearchMarkers(childs[i], bookmark);
     start = start || markers.startMarkerIsFound;
     end = end || markers.endMarkerIsFound;
    }
   }
  }
  return {
   startMarkerIsFound: start,
   endMarkerIsFound: end
  };
 },
 IsAcceptableElement: function(element) {
  var unacceptableElements = {colgroup: 1, table: 1, tbody: 1, thead:1, tfoot:1, tr: 1 };
  if(element.nodeType == 1)
   return !unacceptableElements[element.tagName.toLowerCase()];
  return true;
 },
 IsBlockElement: function(element) {
  return ASPxHtmlEditorCommands.Enter.IsBlockNode(element);
 },
 IsBlockLimitElement: function(element) {
  if(!this.limiters) {
   this.limiters = {};
   for(var e in __aspxHEPathBlockLimitElements) {
    if(!{div:1}[e])
     this.limiters[e] = 1;
   }
  }
  return element.nodeType == 1
   && !!this.limiters[element.tagName.toLowerCase()];
 },
 IsBoundaryElement: function(element) {
  return element != null && element.nodeType == 1 && element.tagName.toUpperCase() == "BR";
 }
});
ASPxHtmlEditorCommands.Browser.InsertList.RemoveListItems = function(startIndex, endIndex, listItemsArray) {
 var removeListItemsIndexArray = [];
 for(var i = startIndex; i <= endIndex; i++)
  removeListItemsIndexArray.push(i);
 ASPxHtmlEditorCommands.Browser.InsertList.OutdentListItemsByIndex(removeListItemsIndexArray, listItemsArray);
 var listItemsIndexArray = [];
 for(var listItem, j = 0; listItem = listItemsArray[j]; j++) {
  if(_aspxArrayIndexOf(removeListItemsIndexArray, listItem.parentItemIndex) > -1)
   listItemsIndexArray.push(j);
 }
 var parentItemIndex = startIndex == 0 ? -1 : startIndex - 1;
 for(var listItem, j = endIndex + 1; listItem = listItemsArray[j]; j++) {
  if(_aspxArrayIndexOf(listItemsIndexArray, j) < 0) {
   if(listItem.parentItemIndex > endIndex)
    listItem.parentItemIndex -= removeListItemsIndexArray.length;
  }
  else
   listItem.parentItemIndex = parentItemIndex;
 }
 listItemsArray.splice(startIndex, removeListItemsIndexArray.length);
}
ASPxHtmlEditorCommands.Browser.InsertList.OutdentListItemsByIndex = function(indexArray, listItemsArray) {
 for(var i = 0; i < indexArray.length; i++) {  
  var index = indexArray[i];
  var listItemsIndexArray = [];
  for(var listItem, j = 0; listItem = listItemsArray[j]; j++) {
   if(listItem.parentItemIndex == index)
    listItemsIndexArray.push(j);
  }
  listItemsArray[index].level -= 1;
  if(listItemsArray[index].level > 0) {
   for(var listItem, j = index - 1; listItem = listItemsArray[j]; j--) {
    if((listItemsArray[index].level - listItem.level) > 0) {
     listItemsArray[index].parentItemIndex = j;
     break;
    }
   }
  }
  else if(listItemsArray[index].level == 0)
   listItemsArray[index].parentItemIndex = -1;
  ASPxHtmlEditorCommands.Browser.InsertList.OutdentListItemsByIndex(listItemsIndexArray, listItemsArray);
 }
}
ASPxHtmlEditorCommands.Browser.Indent = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.WrappedCommand, {
 Execute: function(cmdValue, editor) {
  var selection = editor.GetSelection();
  var selectedElement = selection.GetSelectedElement();
  var selectedList = ASPxHtmlEditorCommands.Browser.Indent.GetMainParentList(selectedElement);
  if (selectedList)
   this.IndentList(selectedList, editor, selectedElement);
  else {
   if(__aspxWebKitFamily && this.GetCommandName() == ASPxClientCommandConsts.OUTDENT_COMMAND && !selection.IsCollapsed()) {
    var bookmark = selection.clientSelection.GetExtendedBookmark();
    var selection = editor.GetSelection();
    var selectedElements = selection.GetElements(true);
    this.SpliceBookmarks(selectedElements, bookmark);
    ASPxHtmlEditorCommands.Browser.Indent.SplitParentBlockquote(selectedElements);
    selection.clientSelection.SelectExtendedBookmark(bookmark);
   }
   ASPxHtmlEditorCommands.Browser.Command.prototype.Execute.call(this, cmdValue, editor);
  }
  return true;
 },
 GetState: function(editor, selection, selectedElements) {
  return false;
 },
 IsLocked: function(editor) {
  var selection = editor.GetSelection();
  var selectedList = ASPxHtmlEditorCommands.Browser.Indent.GetParentList(selection.GetSelectedElement());
  return selectedList ? false : ASPxHtmlEditorCommands.Browser.Command.prototype.TryGetIsLocked.call(this, editor);
 },
 IndentList: function(listNode, editor, selectedElement) {
  if(__aspxNetscapeFamily)
   selectedElement.normalize();
  var bookmark = editor.GetSelection().clientSelection.GetExtendedBookmark();
  var selection = editor.GetSelection();
  var startContainer, endContainer;
  if(!selection.IsCollapsed()) {
   var selectedElements = selection.GetElements(true);
   this.SpliceBookmarks(selectedElements, bookmark);
   startContainer = selectedElements[0];
   endContainer = selectedElements[selectedElements.length - 1];
  }
  else {
   startContainer = selection.GetSelectedElement();
   endContainer = startContainer;
  }
  var doc = editor.GetDesignViewDocument();
  var listItemArray = this.GetListItemArray(listNode, startContainer, endContainer, bookmark);
  if(listItemArray.length > 0) {
   var parentListItem = ASPxHtmlEditorCommands.Browser.Indent.GetParentListItem(startContainer);
   if(!parentListItem.previousSibling && (this.GetCommandName() == ASPxClientCommandConsts.INDENT_COMMAND || this.IsElementStylized(parentListItem.parentNode)))
    this.StylizeElements(parentListItem.parentNode);
   else
    this.ReplaceList(doc, listItemArray, listNode, bookmark);
   if(__aspxIE && __aspxBrowserMajorVersion > 8 && bookmark.endMarkerID) { 
    var endBm = doc.getElementById(bookmark.endMarkerID);
    if(endBm.parentNode.childNodes.length == 2 && endBm.parentNode.firstChild.id == bookmark.startMarkerID) {
     var fakeElement = doc.createTextNode(" ");
     endBm.parentNode.insertBefore(fakeElement, endBm.parentNode.firstChild);
    }
   }
   selection.clientSelection.SelectExtendedBookmark(bookmark);
   if(fakeElement) 
    fakeElement.parentNode.removeChild(fakeElement);
  }
  editor.SetFocus();
 },
 GetIndent: function() {
  var indent = 0;
  switch (this.GetCommandName()) {
   case ASPxClientCommandConsts.INDENT_COMMAND:
    indent = 1; break;
   case ASPxClientCommandConsts.OUTDENT_COMMAND:
    indent = -1; break;
  }
  return indent;
 },
 GetListItemArray: function(listNode, startItemNode, endItemNode, bookmark) {
  var startNode = ASPxHtmlEditorCommands.Browser.Indent.EnsureListItemNode(startItemNode);
  var endNode = ASPxHtmlEditorCommands.Browser.Indent.EnsureListItemNode(endItemNode);
  var listItemArray = ASPxHtmlEditorCommands.Browser.Indent.GetListItemArray(listNode, 0, null, null, bookmark);
  return ASPxHtmlEditorCommands.Browser.Indent.IndentListItemsInItemArray(listItemArray, startNode, endNode, this.GetIndent());
 },
 SpliceBookmarks: function(elements, bookmark) {
  for(var i = 0, element; element = elements[i]; i++) {
   if(element.id ==  bookmark.startMarkerID || element.id ==  bookmark.endMarkerID) {
    elements.splice(i, 1);
    i--;
   }
  }
 },
 ReplaceList: function(doc, listItemArray, listNode, bookmark) {
  var structureArray = [];
  var tempArray = [];
  var listNode = listItemArray[0].node.parentNode;
  for(var i = 0, item; item = listItemArray[i]; i++) {
   if(item.level == -1) {
    if(tempArray.length > 0) {
     structureArray.push(ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray(tempArray, listNode));
     tempArray = [];
    }
    this.WrapInBlockElements(doc, item.node.childNodes);
    for(var j = 0, child; child = item.node.childNodes[j]; j++) {
     if(child.nodeName != "UL" && child.nodeName != "OL")
      structureArray.push(child);
    }
   }
   else
    tempArray.push(item);
  }
  if(tempArray.length > 0)
   structureArray.push(ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray(tempArray, listNode));
  var lastElement = structureArray.splice(structureArray.length - 1, 1)[0];
  listNode.parentNode.replaceChild(lastElement, listNode);
  for(var i = 0, item; item = structureArray[i]; i++)
   lastElement.parentNode.insertBefore(item, lastElement);
  if(this.GetCommandName() == ASPxClientCommandConsts.INDENT_COMMAND) {
   var startBm = _aspxGetElementByIdInDocument(doc, bookmark.startMarkerID);
   var parentListItem = ASPxHtmlEditorCommands.Browser.Indent.GetParentListItem(startBm);
   if(!parentListItem.previousSibling)
    this.SetStyleAttribute(parentListItem.parentNode, "");
  }
 },
 GetStyleIndentValue: function(styleAttrValue, value) {
  return (styleAttrValue + value) + "px";
 },
 WrapInBlockElements: function(doc, elements) {
  var wrapper;
  var currentPos = 0;
  while (elements.length > currentPos) {
   child = elements[currentPos];
   if((child.nodeType == 3 || (_aspxGetCurrentStyle(child)["display"] == "inline") && child.nodeName != "UL" && child.nodeName != "OL")) {
    if(!wrapper) {
     wrapper = doc.createElement("DIV");
     child.parentNode.insertBefore(wrapper, child);
     currentPos++;
    }
    wrapper.appendChild(child);
   } 
   else {
    wrapper = null;
    currentPos++;
   }
  }
 },
 StylizeElements: function(element) {
  var styleAttrValue = this.GetCurrentStyleAttributeValue(element);
  var indentStep = this.GetIndentStep();
  var newStyleAttrValue = this.GetIndent() > 0 ? this.GetStyleIndentValue(styleAttrValue, indentStep) : this.GetStyleIndentValue(styleAttrValue, indentStep * -1);
  if(parseInt(newStyleAttrValue) < 0)
   this.SetStyleAttribute(element, "");
  else
   this.SetStyleAttribute(element, newStyleAttrValue);
 },
 GetIndentStep: function() {
  return 40;
 },
 IsElementStylized: function(element) {
  var styleAttributeValue = this.GetCurrentStyleAttributeValue(element);
  return __aspxIE && __aspxBrowserMajorVersion < 9 ? styleAttributeValue > this.GetIndentStep() : styleAttributeValue > 0;
 },
 GetCurrentStyleAttributeValue: function(element) {
  var attr = this.GetStyleAttribute();
  var styleAttrValue = _aspxGetCurrentStyle(element)[attr];
  var value = styleAttrValue ? parseInt(styleAttrValue) : 0;
  var indentStep = this.GetIndentStep();
  if(__aspxIE && __aspxBrowserMajorVersion < 9 && element.style) {
   styleAttrValue = element.style[attr];
   if(styleAttrValue)
    return parseInt(styleAttrValue);
   else if(value == 30)
    return this.GetIndentStep();
  }
  return value;
 },
 SkipStateOnFirstLoad: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.Browser.Indent.GetListItemArray = function(listNode, currentLevel, itemArray, parentItemIndex, bookmark) {
 if (!itemArray)
  itemArray = [ ];
 if (!_aspxIsExists(parentItemIndex))
  parentItemIndex = -1;
 var curListItem = _aspxGetChildByTagName(listNode, "LI" ,0); 
 while(curListItem) {
  if(!bookmark || (curListItem.id !=  bookmark.startMarkerID && curListItem.id !=  bookmark.endMarkerID))
   itemArray.push({ 'level': currentLevel, 'node' : curListItem, 'parentItemIndex' : parentItemIndex });
  var childListArray = ASPxHtmlEditorCommands.Browser.Indent.GetChildListArray(curListItem);
  for(var i = 0; listNode = childListArray[i]; i++)
   itemArray = ASPxHtmlEditorCommands.Browser.Indent.GetListItemArray(listNode, currentLevel + 1, itemArray, itemArray.length - 1, bookmark);
  curListItem = ASPxHtmlEditorCommands.Browser.Indent.GetNextListItem(curListItem);
 }
 return itemArray;
};
ASPxHtmlEditorCommands.Browser.Indent.IndentListItemsInItemArray = function(itemArray, startListItem, endListItem, indent) {
 var startItemIndex = -1;
 var endItemIndex = -1;
 for (var i = 0; i < itemArray.length; i++) {
  if (itemArray[i].node == startListItem)
   startItemIndex = i;
  if (itemArray[i].node == endListItem)
   endItemIndex = i;
  if (startItemIndex != -1 && endItemIndex != -1)
   break;
 }
 if (startItemIndex == -1 || endItemIndex == -1)
  return null;
 for (var i = startItemIndex; i <= endItemIndex; i++)
  itemArray[i].level += indent;
 if (indent < 0) {
  for (var i = 0; i < itemArray.length; i++) {
   if (itemArray[i].parentItemIndex != -1) {
    var parentLevel = itemArray[itemArray[i].parentItemIndex].level;
    if (itemArray[i].level - parentLevel > 1)
     itemArray[i].level += indent;
   }
  }
 }
 return itemArray;
};
ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray = function(itemArray, listNode) {
 if (itemArray.length <= 0)
  return null;
 var doc = itemArray[0].node.document || itemArray[0].node.ownerDocument;
 var listNodeByLevel = [];
 var listItemNodeArray = [];
 var curLevel = 0;
 for (var i = 0; i < itemArray.length; i++) {
  var curItem = itemArray[i];
  if (curLevel > curItem.level) {
   for (var j = curItem.level + 1; j <= curLevel; j++)
    listNodeByLevel[j] = null;
  }
  if (!listNodeByLevel[curItem.level]) {
   var oldListNode = ASPxHtmlEditorCommands.Browser.Indent.GetParentList(curItem.node);
   var ownerDocument = doc.ownerDocument ? doc.ownerDocument : doc;
   var newListNode = curItem.parentListType ? ownerDocument.createElement(curItem.parentListType) : oldListNode.cloneNode(false);
   if(curItem.listStyleTypeValue)
    newListNode.style.listStyleType = curItem.listStyleTypeValue;
   listNodeByLevel[curItem.level] = newListNode;
   if (curItem.level - 1 >= 0)
    listItemNodeArray[curItem.level - 1].appendChild(newListNode);
  }
  var clonedListItem = ASPxHtmlEditorCommands.Browser.Indent.CloneListItem(curItem.node, doc);
  listItemNodeArray[curItem.level] = clonedListItem;
  listNodeByLevel[curItem.level].appendChild(clonedListItem);
  curLevel = curItem.level;
 }
 var newListNode = listNodeByLevel[0];
 if(listNode)
  _aspxCopyAllAttributes(listNode, newListNode);
 return newListNode;
};
ASPxHtmlEditorCommands.Browser.Indent.EnsureListItemNode = function(node) {
 while (node) {
  var tagName = "";
  var parentNode = node.parentNode;
  if (parentNode && parentNode.nodeType == 1)
   tagName = parentNode.tagName.toUpperCase();
  if (tagName == "OL" || tagName == "UL")
   break;
  node = parentNode;
 }
 return node;
};
ASPxHtmlEditorCommands.Browser.Indent.CloneListItem = function(item, doc) {
 var newItem = item.cloneNode(true);
 newItem.innerHTML = "";
 for (var i = 0 ; i < item.childNodes.length; i++) {
  var tagName = item.childNodes[i].tagName;
  tagName = tagName ? tagName.toUpperCase() : "";
  if ((tagName != "UL") && (tagName != "OL"))
   newItem.appendChild(item.childNodes[i].cloneNode(true));
 }
 return newItem;
};
ASPxHtmlEditorCommands.Browser.Indent.GetChildListArray = function(elem) {
 var result = [];
 for (var i = 0 ; i < elem.childNodes.length; i++) {
  var tagName = elem.childNodes[i].tagName;
  tagName = tagName ? tagName.toUpperCase() : ""; 
  if ((tagName == "UL") || (tagName == "OL"))
   result.push(elem.childNodes[i]);
 }
 return result;
};
ASPxHtmlEditorCommands.Browser.Indent.GetNextListItem = function(listItemNode) {
 var nextListItemNode = listItemNode.nextSibling;
 while (nextListItemNode != null && nextListItemNode.nodeType != 1)
  nextListItemNode = nextListItemNode.nextSibling;
 return nextListItemNode;
};
ASPxHtmlEditorCommands.Browser.Indent.GetMainParentList = function(elem) {
 var lastListNode = null;
 while (elem) {
  if (elem.nodeType == 1) {
   var tagName = elem.tagName.toUpperCase();
   if (tagName == "UL" || tagName == "OL")
    lastListNode = elem;
  }
  elem = elem.parentNode;
 }
 return lastListNode;
};
ASPxHtmlEditorCommands.Browser.Indent.GetParentList = function(elem) {
 return ASPxHtmlEditorCommands.Browser.Indent.GetParent(elem,
  function(elem) {
   return elem.tagName == "UL" || elem.tagName == "OL";
  }.aspxBind(this)
 );
};
ASPxHtmlEditorCommands.Browser.Indent.GetParentListItem = function(elem) {
 return ASPxHtmlEditorCommands.Browser.Indent.GetParent(elem,
  function(elem) {
   return elem.tagName == "LI";
  }.aspxBind(this)
 );
};
ASPxHtmlEditorCommands.Browser.Indent.GetParentBlockquote = function(elem) {
 return ASPxHtmlEditorCommands.Browser.Indent.GetParent(elem,
  function(elem) {
   return elem.tagName == "BLOCKQUOTE";
  }.aspxBind(this)
 );
};
ASPxHtmlEditorCommands.Browser.Indent.GetParent = function(elem, compare) {
 while(elem) {
  if(compare(elem))
   return elem;
  elem = elem.parentNode;
 }
 return null;
};
ASPxHtmlEditorCommands.Browser.Indent.SplitParentBlockquote = function(selectedElements) {
 for(var i = 0, element; element = selectedElements[i]; i++) {
  var parentElement = ASPxHtmlEditorCommands.Browser.Indent.GetParentBlockquote(element);
  if(parentElement) {
   var prevParentElement = i > 0 ? ASPxHtmlEditorCommands.Browser.Indent.GetParentBlockquote(selectedElements[i - 1]) : null;
   var foundBlockOrBrElement = ASPxHtmlEditorCommands.Browser.Indent.FindBlockOrBrElement(parentElement.childNodes);
   if(foundBlockOrBrElement && parentElement.childNodes.length > 1 && (!prevParentElement || prevParentElement != parentElement)) {
    var blockElement = null;
    for(var child = parentElement.firstChild; child; child = parentElement.firstChild) {
     if(!blockElement || (child.nodeType == 1 && _aspxGetCurrentStyle(child)["display"] == "block")) {
      blockElement = parentElement.cloneNode(false);
      parentElement.parentNode.insertBefore(blockElement, parentElement);
     }
     blockElement.appendChild(child);
     if(child.nodeName == "BR")
      blockElement = null;
    }
    parentElement.parentNode.removeChild(parentElement);
   }
  }
 }
};
ASPxHtmlEditorCommands.Browser.Indent.FindBlockOrBrElement = function(elements) {
 for(var i = 0, elem; elem = elements[i]; i++) { 
  if(elem.nodeType == 1 && (elem.nodeName == "BR" || _aspxGetCurrentStyle(elem)["display"] == "block"))
   return true;
 }
 return false;
};
var __aspxEmptyBorderTableClassName = "dxEmptyBorderTable";
var __aspxHESizeTypeRegExp = new RegExp("([0-9]*[,.]?[0-9]*)(px|%)");
var _aspxHETableHelper = {
 HasEmptyBorderClassName: function(table) {
  return table.className.indexOf(__aspxEmptyBorderTableClassName) > -1;
 },
 AppendEmptyBorderClassName: function(elem) {
  if (_aspxHETableHelper.HasEmptyBorderClassName(elem))
   return;
  elem.className += " " + __aspxEmptyBorderTableClassName;
 },
 IsEmptyBorder: function(table) {
  if (!table)
   return false;
  return _aspxHETableHelper.GetTableBorderWidth(table) == 0;
 },
 GetBorderColor: function(style) {
  return style.borderColor || style.borderLeftColor || style.borderRightColor || style.borderTopColor || style.borderBottomColor;
 },
 GetBorderStyle: function(style) {
  return style.borderStyle || style.borderLeftStyle || style.borderRightStyle || style.borderTopStyle || style.borderBottomStyle;
 },
 RemoveEmptyBorderClassName: function(elem) {
  elem.className = elem.className.replace(__aspxEmptyBorderTableClassName, "");
 },
 GetTableBorderWidth: function(table) {
  var width = -1;
  for(var i = 0, row; row = table.rows[i]; i++) {
   for(var j = 0, cell; cell = row.cells[j]; j++) {
    if(width < 0)
     width = _aspxPxToInt(cell.style.borderWidth);
    else if(width != _aspxPxToInt(cell.style.borderWidth))
     return 0;
   }
  }
  return width;
 },
 GetTable: function(element) {
  if(!element) return null;
  return element.tagName == "TABLE" ? element : _aspxGetParentByTagName(element, "TABLE");
 },
 GetTableRow: function(elem) {
  if (elem && elem.nodeType == 1 && elem.tagName.toUpperCase() == "TR")
   return elem;
  var cell = this.GetTableCell(elem);
  if (cell)
   return cell.parentNode;
  return null;
 },
 GetTableCellBySelection: function(startElem, endElem) {
  var cell = _aspxHETableHelper.GetTableCell(startElem);
  if (!cell && endElem) {
   cell = _aspxHETableHelper.GetTableCell(endElem);
   if (__aspxSafari && startElem && startElem.tagName.toUpperCase() == "TR") { 
    var index = cell.cellIndex - 1;
    if (index < 0)
     cell = startElem.cells[startElem.cells.length - 1];
    else
     cell = startElem.cells[index];
   }
  }
  return cell;
 },
 GetTableCell: function(element) {
  if (!element)
   return null;
  if (element.nodeType == "1" &&
   (element.tagName.toUpperCase() == "TD" || element.tagName.toUpperCase() == "TH"))
   return element;
  var cell = _aspxGetParentByTagName(element, "TD");
  if (!cell)
   cell = _aspxGetParentByTagName(element, "TH");
  return cell;
 },
 GetTableProperties: function(table) {
  var tableInfoObject = {
   borderWidth: 0,
   borderColor: null,
   backgroundColor: null,
   width: null,
   height: null,
   cellPadding: 0,
   cellSpacing: 0,
   align: null,
   accessibility: null
  };
  if (table.className.indexOf(__aspxEmptyBorderTableClassName) == -1) {
   tableInfoObject.borderWidth = this.GetTableBorderWidth(table);
   var borderColor = this.GetTableBorderColor(table);
   if (_aspxIsExists(borderColor))
    tableInfoObject.borderColor = borderColor;
  }
  if (table.style.backgroundColor)
   tableInfoObject.backgroundColor = table.style.backgroundColor;
  if (table.style.width)
   tableInfoObject.width = table.style.width;
  if (table.style.height)
   tableInfoObject.height = table.style.height;
  tableInfoObject.cellPadding = table.cellPadding;
  tableInfoObject.cellSpacing = table.cellSpacing;
  if (table.align)
   tableInfoObject.align = table.align;
  var accessibility = { caption: "", summary: "", headers: "" };
  accessibility.headers = this.GetAccessibilityHeadersValue(table);
  accessibility.caption = this.GetAccessibilityCaption(table);
  accessibility.summary = table.summary;
  tableInfoObject.accessibility = accessibility;
  return tableInfoObject;
 },
 SetTableProperties: function(table, properties, htmlEditor) {
  if (properties) {
   if (_aspxIsExists(properties.borderWidth))
    this.SetTableBorderWidth(table, properties.borderWidth, htmlEditor);
   if (_aspxIsExists(properties.borderColor))
    this.SetTableBorderColor(table, properties.borderColor);
   this.SetBackgroundColor(table, properties.backgroundColor);
   if(_aspxIsExists(properties.cellSpacing))
    table.cellSpacing = properties.cellSpacing;
   if(_aspxIsExists(properties.cellPadding))
    table.cellPadding = properties.cellPadding;
   if (properties.width)
    table.style.width = properties.width;
   else if (_aspxIsExists(table.style.width)) {
    _aspxRemoveAttribute(table, "width");
    _aspxRemoveStyleAttribute(table, "width");
   }
   if (properties.height)
    table.style.height = properties.height;
   else if (_aspxIsExists(table.style.height)) {
    _aspxRemoveAttribute(table, "height");
    table.style.height = "";
    _aspxRemoveStyleAttribute(table, "height");
   }
   if (properties.align)
    table.align = properties.align;
   else if (_aspxIsExists(table.align)) {
    table.align = "";
    _aspxRemoveAttribute(table, "align");
   }
   if (properties.accessibility)
    this.SetTableAccessibility(table, properties.accessibility);
  }
 },
 SetTableBorderWidth: function(table, borderWidth, htmlEditor) {
  if (__aspxFirefox && table.style.borderCollapse == "collapse") {
   var tempTableId = ASPxClientSelection.CreateUniqueID();
   _aspxChangeAttribute(table, "id", tempTableId);
   table.style.borderCollapse = "separate";
   this.currentHtmlEditor = htmlEditor;
   _aspxSetTimeout("_aspxHETableHelper.SetTableBorderWidthDelay('" + tempTableId + "'," + borderWidth + ")", 100);
  }
  else {
   this.SetTableBorderWidthCore(table, borderWidth);
   this.SetEmptyTableBorderClass(table);
  }
 },
 SetTableBorderWidthDelay: function(tableId, borderWidth) {
  var table = _aspxGetElementByIdInDocument(this.currentHtmlEditor.GetDesignViewDocument(), tableId);
  this.SetTableBorderWidthCore(table, borderWidth);
  table.style.borderCollapse = "collapse";
  _aspxRestoreAttribute(table, "id");
  this.SetEmptyTableBorderClass(table);
  this.currentHtmlEditor.commandManager.UpdateLastItemInRestoreHtmlArray();
  this.currentHtmlEditor = null;
 },
 SetEmptyTableBorderClass: function(table) {
  if (this.IsEmptyBorder(table))
   this.AppendEmptyBorderClassName(table);
  else
   this.RemoveEmptyBorderClassName(table);
 },
 GetCellProperties: function(cell) {
  var cellInfo = {
   backgroundColor: null,
   align: null,
   vAlign: null
  };
  if (cell.style.textAlign)
   cellInfo.align = cell.style.textAlign;
  if (cell.style.verticalAlign)
   cellInfo.vAlign = cell.style.verticalAlign;
  if (cell.style.backgroundColor)
   cellInfo.backgroundColor = cell.style.backgroundColor;
  return cellInfo;
 },
 SetCellProperties: function(cell, properties) {
  if (properties.vAlign)
   cell.style.verticalAlign = properties.vAlign.toLowerCase();
  else if (_aspxIsExists(cell.vAlign))
   _aspxRemoveStyleAttribute(cell, "verticalAlign");
  if (properties.align)
   cell.style.textAlign = properties.align.toLowerCase();
  else if (_aspxIsExists(cell.align))
   _aspxRemoveStyleAttribute(cell, "textAlign");
  this.SetBackgroundColor(cell, properties.backgroundColor);
 },
 SetCellPropertiesForAllCell: function(table, properties) {
  for (var i = 0; i < table.rows.length; i++) {
   for (var j = 0; j < table.rows[i].cells.length; j++)
    this.SetCellProperties(this.GetCell(table, i, j), properties);
  }
 },
 SetColumnProperties: function(cell, properties) {
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
  var colSpan = this.GetColSpan(cell);
  for (var i = 0; i < tableModel.length; i++) {
   for (var j = columnIndex; j < columnIndex + colSpan; j++) {
    var curCell = tableModel[i][j];
    if (this.GetColSpan(curCell) <= colSpan) {
     this.SetCellProperties(curCell, properties);
     if (properties.width)
      curCell.style.width = properties.width;
     else if (_aspxIsExists(curCell.style.width)) {
      curCell.style.width = "";
      _aspxRemoveStyleAttribute(curCell, "width");
     }
    }
   }
  }
 },
 GetColumnProperties: function(cell) {
  var columnInfo = {
   backgroundColor: null,
   width: null,
   align: null,
   vAlign: null
  };
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
  var colSpan = this.GetColSpan(cell);
  var curCellInfo = this.GetCellProperties(cell);
  var align = columnInfo.align = curCellInfo.align;
  var vAlign = columnInfo.vAlign = curCellInfo.vAlign;
  var backgroundColor = columnInfo.backgroundColor = curCellInfo.backgroundColor;
  var maxCellWidth = 0;
  var isWidthDefined = true;
  for (var i = 0; i < tableModel.length; i++) {
   for (var j = columnIndex; j < columnIndex + colSpan; j++) {
    var curCell = tableModel[i][j];
    if (this.GetColSpan(curCell) <= colSpan) {
     var curCellInfo = this.GetCellProperties(curCell);
     if (curCell.style.width && _aspxGetClearClientWidth(curCell) > maxCellWidth)
      maxCellWidth = curCell.style.width;
     if (align != curCellInfo.align)
      columnInfo.align = null;
     if (vAlign != curCellInfo.vAlign)
      columnInfo.vAlign = null;
     if (backgroundColor != curCellInfo.backgroundColor)
      columnInfo.backgroundColor = null;
     if (isWidthDefined) {
      var curCellColSpan = this.GetColSpan(curCell);
      if (curCellColSpan != colSpan)
       isWidthDefined = false;
      else if (columnIndex != this.GetColumnIndexByTableModel(tableModel, i, curCell))
       isWidthDefined = false;
     }
    }
   }
  }
  if (isWidthDefined && this.ParseSizeString(maxCellWidth).value > 0)
   columnInfo.width = maxCellWidth;
  return columnInfo;
 },
 GetRowProperties: function(cell) {
  var rowInfo = {
   backgroundColor: null,
   height: null,
   align: null,
   vAlign: null
  };
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var rowSpan = this.GetRowSpan(cell);
  var curCellInfo = this.GetCellProperties(cell);
  var align = rowInfo.align = curCellInfo.align;
  var vAlign = rowInfo.vAlign = curCellInfo.vAlign;
  var backgroundColor = rowInfo.backgroundColor = curCellInfo.backgroundColor;
  var maxCellHeight = 0;
  var isHeightDefined = true;
  for (var i = row.rowIndex; i < row.rowIndex + rowSpan; i++) {
   for (var j = 0; j < tableModel[i].length; j++) {
    var curCell = tableModel[i][j];
    if (this.GetRowSpan(curCell) <= rowSpan) {
     var curCellInfo = this.GetCellProperties(curCell);
     if (curCell.style.height && _aspxGetClearClientHeight(curCell) > maxCellHeight)
      maxCellHeight = curCell.style.height;
     if (align != curCellInfo.align)
      rowInfo.align = null;
     if (vAlign != curCellInfo.vAlign)
      rowInfo.vAlign = null;
     if (backgroundColor != curCellInfo.backgroundColor)
      rowInfo.backgroundColor = null;
     if (isHeightDefined) {
      var curCellRowSpan = this.GetRowSpan(curCell);
      if (curCellRowSpan != rowSpan)
       isHeightDefined = false;
      else if (row.rowIndex != curCell.parentNode.rowIndex)
       isHeightDefined = false;
     }
    }
   }
  }
  if (isHeightDefined && this.ParseSizeString(maxCellHeight).value > 0)
   rowInfo.height = maxCellHeight;
  return rowInfo;
 },
 SetRowProperties: function(cell, properties) {
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
  var rowSpan = this.GetRowSpan(cell);
  var rowIndex = row.rowIndex;
  for (var i = rowIndex; i < rowIndex + rowSpan; i++) {
   for (var j = 0; j < tableModel[i].length; j++) {
    if (this.GetRowSpan(tableModel[i][j]) <= rowSpan) {
     this.SetCellProperties(tableModel[i][j], properties);
     if (properties.height)
      tableModel[i][j].style.height = properties.height;
     else if (_aspxIsExists(tableModel[i][j].style.width)) {
      tableModel[i][j].style.height = "";
      _aspxRemoveStyleAttribute(tableModel[i][j], "height");
     }
    }
   }
  }
 },
 SetTableAccessibility: function(table, properties) {
  if (properties.caption) {
   var caption = table.createCaption();
   caption.innerHTML = properties.caption;
  }
  else
   table.deleteCaption();
  if (properties.summary)
   table.summary = properties.summary;
  else
   _aspxRemoveAttribute(table, "summary");
  var hasColumnHeaders = this.GetHasColumnHeaders(table);
  var headers = properties.headers;
  this.SetRowAndBothHeaders(table, headers);
  this.SetColumnAndBothHeaders(table, headers, hasColumnHeaders);
 },
 SetColumnAndBothHeaders: function(table, headers, hasColumnHeaders) {
  if ((headers == 'column' || headers == 'both') && !this.GetHasColumnHeaders(table)) {
   for (var i = 0; i < table.rows.length; i++) {
    var newCell = _aspxReplaceTagName(table.rows[i].cells[0], 'TH');
    if (newCell != null && !(headers == 'both' && newCell.scope == 'col'))
     newCell.scope = 'row';
   }
  }
  if (hasColumnHeaders && headers != 'column' && headers != 'both') {
   for (var i = 0; i < table.rows.length; i++) {
    var row = table.rows[i];
    if (row.parentNode.nodeName.toUpperCase() == 'TBODY') {
     var newCell = _aspxReplaceTagName(row.cells[0], 'TD');
     if (newCell != null)
      newCell.removeAttribute('scope');
    }
   }
  }
 },
 SetRowAndBothHeaders: function(table, headers) {
  var hasRowHeaders = this.GetHasRowHeaders(table);
  if (!hasRowHeaders && (headers == 'row' || headers == 'both')) {
   var firstRow = table.rows[0];
   for (var i = 0; i < firstRow.childNodes.length; i++) {
    if (firstRow.childNodes[i].nodeType == 1) {
     var th = _aspxReplaceTagName(firstRow.childNodes[i], 'TH');
     if (th)
      th.scope = 'col';
    }
   }
   var tHead = table.tHead;
   if (!tHead)
    tHead = table.createTHead();
   if (tHead.childNodes.length == 0)
    tHead.appendChild(firstRow);
   for (var i = table.tBodies.length - 1; i >= 0; i--) {
    if (_aspxTrim(table.tBodies[i].innerHTML) == "")
     table.removeChild(table.tBodies[i]);
   }
  }
  if (hasRowHeaders && headers != 'row' && headers != 'both') {
   var firstRow = table.rows[0];
   for (var i = 0; i < firstRow.cells.length; i++) {
    var newCell = _aspxReplaceTagName(firstRow.cells[i], "TD");
    if (newCell != null)
     _aspxRemoveAttribute(newCell, "scope");
   }
   if (table.tHead && table.tHead.childNodes.length > 0) {
    var firstRow = table.tBodies[0].firstChild;
    for (var i = table.tHead.childNodes.length - 1; i >= 0; i--) {
     if (table.tHead.childNodes[i].nodeType == 1)
      firstRow = table.tBodies[0].insertBefore(table.tHead.childNodes[i], firstRow);
    }
    table.removeChild(table.tHead);
   }
  }
 },
 GetAccessibilityHeadersValue: function(table) {
  var hasColumnHeaders = this.GetHasColumnHeaders(table);
  var hasRowHeaders = this.GetHasRowHeaders(table);
  var ret = null;
  if (hasColumnHeaders && hasRowHeaders)
   ret = "both";
  else if (hasColumnHeaders)
   ret = "column";
  else if (hasRowHeaders)
   ret = "row";
  return ret;
 },
 GetAccessibilityCaption: function(table) {
  var caption = _aspxGetChildByTagName(table, "CAPTION", 0);
  if (caption)
   return caption.innerHTML;
  return "";
 },
 GetHasColumnHeaders: function(table) {
  for (var i = 0; i < table.rows.length; i++) {
   if (table.rows[i].cells[0].nodeName.toUpperCase() != 'TH')
    return false;
  }
  return true;
 },
 GetHasRowHeaders: function(table) {
  if (table.rows.length == 0)
   return false;
  for (var i = 0; i < table.rows[0].cells.length; i++) {
   if (table.rows[0].cells[i].nodeName.toUpperCase() != 'TH')
    return false;
  }
  return true;
 },
 IsTableColumnEqual: function(table) {
  if (table.rows.length < 0)
   return false;
  var cellWidth = table.rows[0].cells[0].style.width;
  if (!cellWidth)
   return false;
  for (var i = 0; i < table.rows.length; i++) {
   var curRow = table.rows[i];
   for (var j = 0; j < curRow.cells.length; j++)
    if (cellWidth && cellWidth != this.GetCell(table, i, j).style.width)
    return false;
  }
  return true;
 },
 AdjustColumnWidth: function(table) {
  var cellWidth = 100 / table.rows[0].cells.length + "%";
  for (var i = 0; i < table.rows.length; i++) {
   var curRow = table.rows[i];
   for (var j = 0; j < curRow.cells.length; j++) {
    _aspxRemoveAttribute(this.GetCell(table, i, j), "width");
    this.GetCell(table, i, j).style.width = cellWidth;
   }
  }
 },
 InsertColumn: function(cell, shift, htmlEditor) {
  if (cell.nodeName.toUpperCase() != "TD" && cell.nodeName.toUpperCase() != "TH")
   return "";
  var table = this.GetTable(cell);
  var tableModel = this.CreateTableModel(table);
  var row = cell.parentNode;
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
  var colSpan = this.GetColSpan(cell);
  var nextColumnIndex = -1;
  if (shift > 0)
   nextColumnIndex = columnIndex + colSpan;
  else
   nextColumnIndex = columnIndex;
  var isTableColumnEqual = this.IsTableColumnEqual(table);
  var doc = _aspxGetElementDocument(cell);
  for (var r = 0; r < tableModel.length; r++) {
   var curCell = shift > 0 ? tableModel[r][nextColumnIndex - 1] : tableModel[r][nextColumnIndex];
   if(!curCell) continue;
   var curCellColumnIndex = this.GetColumnIndexByTableModel(tableModel, r, curCell);
   var curCellColSpan = this.GetColSpan(curCell);
   if ((shift > 0 && curCellColumnIndex + curCellColSpan == columnIndex + colSpan) ||
    (shift == 0 && curCellColumnIndex == columnIndex)) {
    var curCellRowSpan = this.GetRowSpan(curCell);
    var newCell = this.CreateNewCellByCell(tableModel[r][columnIndex], true);
    for (var j = r; j < r + curCellRowSpan; j++)
     _aspxArrayInsert(tableModel[j], newCell, nextColumnIndex);
    r = j - 1;
   }
   else
    _aspxArrayInsert(tableModel[r], curCell, nextColumnIndex);
  }
  var rowIndex = row.rowIndex;
  this.GenerateTableFromModel(tableModel, table);
  if (isTableColumnEqual)
   this.AdjustColumnWidth(table);
  if (htmlEditor)
   this.SelectCellCore(tableModel[rowIndex][nextColumnIndex], htmlEditor);
 },
 InsertRow: function(cell, shift, htmlEditor) {
  if (cell.nodeName.toUpperCase() != "TD" && cell.nodeName.toUpperCase() != "TH")
   return "";
  var table = this.GetTable(cell);
  var tableModel = this.CreateTableModel(table);
  var row = cell.parentNode;
  var rowIndex = row.rowIndex;
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, rowIndex, cell);
  var rowSpan = this.GetRowSpan(cell);
  var doc = _aspxGetElementDocument(cell);
  var newRowIndex = -1;
  var rowIndexInModel = -1;
  if (shift > 0) {
   rowIndexInModel = rowIndex + rowSpan - 1;
   newRowIndex = rowIndex + rowSpan + shift - 1;
  }
  else {
   newRowIndex = rowIndex;
   rowIndexInModel = rowIndex;
  }
  var newRowModel = [ ];
  for (var i = 0; i < tableModel[rowIndexInModel].length; i++) {
   var curCell = tableModel[rowIndexInModel][i];
   var curCellRow = curCell.parentNode;
   var curCellRowSpan = this.GetRowSpan(curCell);
   if ((shift > 0 && (curCellRow.rowIndex + curCellRowSpan == rowIndex + rowSpan)) ||
    (shift == 0 && (curCellRow.rowIndex == rowIndex))) {
    var curCellColSpan = this.GetColSpan(curCell);
    var newCell = this.CreateNewCellByCell(curCell);
    for (var j = i; j < i + curCellColSpan; j++)
     newRowModel[j] = newCell;
    i = j - 1;
   }
   else
    newRowModel[i] = tableModel[rowIndexInModel][i];
  }
  _aspxArrayInsert(tableModel, newRowModel, newRowIndex);
  var newRow = null;
  if (_aspxGetParentByTagName(cell, "THEAD"))
   newRow = table.tHead.insertRow(newRowIndex);
  else
   newRow = table.insertRow(newRowIndex);
  _aspxCopyAllAttributes(row, newRow);
  _aspxRemoveAttribute(newRow, "id");
  this.GenerateTableFromModel(tableModel, table);
  if (htmlEditor)
   this.SelectCellCore(tableModel[newRowIndex][columnIndex], htmlEditor);
 },
 RemoveRow: function(cell, htmlEditor) {
  var row = _aspxHETableHelper.GetTableRow(cell);
  if (row) {
   var table = this.GetTable(cell);
   var tableModel = this.CreateTableModel(table);
   var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
   var rowIndex = row.rowIndex;
   var rowSpan = this.GetRowSpan(tableModel[rowIndex][columnIndex]);
   for (var r = rowSpan + rowIndex - 1; r >= rowIndex; r--) {
    _aspxArrayRemoveAt(tableModel, r);
    if (r < table.rows.length)
     table.deleteRow(r);
   }
   if (table.rows.length > 0) {
    this.GenerateTableFromModel(tableModel, table);
    if (htmlEditor) {
     rowIndex = Math.min(rowIndex, table.rows.length - 1);
     this.SelectCellCore(tableModel[rowIndex][columnIndex], htmlEditor);
    }
   }
   else
    _aspxRemoveElement(table);
   return true;
  }
  return false;
 },
 RemoveColumn: function(cell, htmlEditor) {
  var row = _aspxHETableHelper.GetTableRow(cell);
  if (row) {
   var table = this.GetTable(cell);
   var tableModel = this.CreateTableModel(table);
   var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
   var rowIndex = row.rowIndex;
   var colSpan = this.GetColSpan(tableModel[rowIndex][columnIndex]);
   for (var r = 0; r < tableModel.length; r++) {
    for (var c = columnIndex + colSpan - 1; c >= columnIndex; c--) {
     _aspxArrayRemoveAt(tableModel[r], c);
    }
   }
   if (tableModel[rowIndex].length > 0) {
    this.GenerateTableFromModel(tableModel, table);
    if (htmlEditor) {
     columnIndex = Math.min(columnIndex, tableModel[rowIndex].length - 1);
     this.SelectCellCore(tableModel[rowIndex][columnIndex], htmlEditor);
    }
   }
   else
    _aspxRemoveElement(table);
   return true;
  }
  return false;
 },
 SplitCellHorizontal: function(cell, htmlEditor) {
  if (!cell)
   return false;
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var rowIndex = row.rowIndex;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
  var colSpan = isNaN(cell.colSpan) ? 1 : cell.colSpan;
  var doc = _aspxGetElementDocument(table);
  var newCellWidth = "";
  var newCell = doc.createElement(cell.nodeName);
  newCell.style.cssText = cell.style.cssText;
  this.AddDefaultContentToCell(newCell);
  if (colSpan > 1) {
   var newColSpan = Math.ceil(colSpan / 2);
   var startIdx = columnIndex + newColSpan;
   var endIdx = columnIndex + colSpan;
   var rowSpan = isNaN(cell.rowSpan) ? 1 : cell.rowSpan;
   for (var r = rowIndex; r < rowIndex + rowSpan; r++) {
    for (var i = startIdx; i < endIdx; i++)
     tableModel[r][i] = newCell;
   }
  }
  else {
   var newTableModel = [ ];
   var newRowHash = {};
   for (var i = 0; i < tableModel.length; i++) {
    var newRow = tableModel[i].slice(0, columnIndex);
    if (tableModel[i].length <= columnIndex) {
     newTableModel.push(newRow);
     continue;
    }
    if (tableModel[i][columnIndex] == cell) {
     newRow.push(cell);
     newRow.push(newCell);
    }
    else {
     newRow.push(tableModel[i][columnIndex]);
     newRow.push(tableModel[i][columnIndex]);
    }
    for (var j = columnIndex + 1; j < tableModel[i].length; j++)
     newRow.push(tableModel[i][j]);
    newTableModel.push(newRow);
   }
   tableModel = newTableModel;
  }
  var cellWidthInfo = _aspxHETableHelper.ParseSizeString(tableModel[rowIndex][columnIndex].style.width);
  if (cellWidthInfo.valueType) {
   var newCellWidth = cellWidthInfo.value / 2;
   tableModel[rowIndex][columnIndex].style.width = newCellWidth + cellWidthInfo.valueType;
   newCell.style.width = newCellWidth + cellWidthInfo.valueType;
  }
  this.GenerateTableFromModel(tableModel, table);
  if (htmlEditor)
   this.SelectCellCore(tableModel[rowIndex][columnIndex], htmlEditor);
 },
 SplitCellVertical: function(cell, htmlEditor) {
  if (!cell)
   return false;
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var rowIndex = row.rowIndex;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, rowIndex, cell);
  var rowSpan = this.GetRowSpan(cell);
  var doc = _aspxGetElementDocument(table);
  if (rowSpan > 1) {
   var newRowSpan = Math.ceil(rowSpan / 2);
   var newCell = doc.createElement(cell.nodeName);
   newCell.style.cssText = cell.style.cssText;
   this.AddDefaultContentToCell(newCell);
   var startRowIndex = rowIndex + newRowSpan;
   var endRowIndex = rowIndex + rowSpan;
   var curColumnIndex = columnIndex;
   while (tableModel[rowIndex][curColumnIndex] == cell) {
    for (var r = startRowIndex; r < endRowIndex && r < tableModel.length; r++) {
     if (tableModel[r][curColumnIndex] == cell)
      tableModel[r][curColumnIndex] = newCell;
    }
    curColumnIndex++;
   }
  }
  else {
   var newRowHash = {};
   var newRowIndex = rowIndex + 1;
   var isThead = !!_aspxGetParentByTagName(cell, "THEAD");
   var newRow = null;
   if (isThead)
    newRow = table.tHead.insertRow(newRowIndex);
   else
    newRow = table.insertRow(newRowIndex);
   _aspxCopyAllAttributes(row, newRow);
   _aspxRemoveAttribute(newRow, "id");
   _aspxArrayInsert(tableModel, [ ], newRowIndex);
   for (var i = 0; i < tableModel[rowIndex].length; i++) {
    if (tableModel[rowIndex][i] == cell) {
     if (!newRowHash[cell]) {
      var newCell = doc.createElement(cell.nodeName);
      newCell.style.cssText = cell.style.cssText;
      newRowHash[cell] = newCell;
      this.AddDefaultContentToCell(newRowHash[cell]);
     }
     tableModel[newRowIndex][i] = newRowHash[cell];
    }
    else
     tableModel[newRowIndex][i] = tableModel[rowIndex][i];
   }
  }
  this.GenerateTableFromModel(tableModel, table);
  if (htmlEditor)
   this.SelectCellCore(tableModel[rowIndex][columnIndex], htmlEditor);
 },
 MergeCellHorizontal: function(cell, htmlEditor) {
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var rowIndex = row.rowIndex;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, rowIndex, cell);
  var nextCellColumnIndex = this.GetNextCellColumnIndexByTableModel(tableModel, rowIndex, columnIndex);
  var nextCell = tableModel[rowIndex][nextCellColumnIndex];
  var rowSpan = isNaN(cell.rowSpan) ? 1 : cell.rowSpan;
  var newCell = this.MergeCell(cell, nextCell);
  var cellWidthInfo = _aspxHETableHelper.ParseSizeString(tableModel[rowIndex][columnIndex].style.width);
  var mergedCellWidthInfo = _aspxHETableHelper.ParseSizeString(tableModel[rowIndex][nextCellColumnIndex].style.width);
  if (cellWidthInfo.valueType && cellWidthInfo.valueType == mergedCellWidthInfo.valueType)
   newCell.style.width = cellWidthInfo.value + mergedCellWidthInfo.value + cellWidthInfo.valueType;
  for (var i = rowIndex; i < rowIndex + rowSpan; i++) {
   var curColumnIndex = columnIndex;
   while (tableModel[i] &&
     (tableModel[i][curColumnIndex] == cell || tableModel[i][curColumnIndex] == nextCell)) {
    tableModel[i][curColumnIndex] = newCell;
    curColumnIndex++;
   }
  }
  this.GenerateTableFromModel(tableModel, table);
  if (htmlEditor)
   this.SelectCellCore(tableModel[rowIndex][columnIndex], htmlEditor);
 },
 MergeCellVertical: function(cell, htmlEditor) {
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var row = cell.parentNode;
  var rowIndex = row.rowIndex;
  var tableModel = _aspxHETableHelper.CreateTableModel(table);
  var columnIndex = this.GetColumnIndexByTableModel(tableModel, rowIndex, cell);
  var nextCellRowIndex = this.GetNextCellRowIndexByTableModel(tableModel, rowIndex, columnIndex);
  var colSpan = this.GetColSpan(cell);
  var nextCell = tableModel[nextCellRowIndex][columnIndex];
  var newCell = this.MergeCell(cell, nextCell);
  for (var i = columnIndex; i < columnIndex + colSpan; i++) {
   var curRowIndex = rowIndex;
   while (tableModel[curRowIndex] &&
     (tableModel[curRowIndex][i] == cell || tableModel[curRowIndex][i] == nextCell)) {
    tableModel[curRowIndex][i] = newCell;
    curRowIndex++;
   }
  }
  this.GenerateTableFromModel(tableModel, table);
  if (htmlEditor)
   this.SelectCellCore(tableModel[rowIndex][columnIndex], htmlEditor);
 },
 IsMergeCellHorizontalAllow: function(cell, htmlEditor) {
  var isAllow = false;
  var tableModel = _aspxHETableHelper.CreateTableModel(_aspxGetParentByTagName(cell, "TABLE"));
  var row = cell.parentNode;
  var colIndx = this.GetColumnIndexByTableModel(tableModel, row.rowIndex, cell);
  var nextCellColIndx = colIndx + this.GetColSpan(cell);
  var nextCell = tableModel[row.rowIndex][nextCellColIndx];
  if (nextCell) {
   if (this.GetRowSpan(cell) == this.GetRowSpan(nextCell)) {
    var realNextCellRow = nextCell.parentNode;
    isAllow = realNextCellRow.rowIndex == row.rowIndex;
   }
  }
  return isAllow;
 },
 IsMergeCellVerticalAllow: function(cell, htmlEditor) {
  var isAllow = false;
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var nextCell = this.GetNextCellVertical(cell);
  if (nextCell) {
   var colSpan = isNaN(cell.colSpan) ? 1 : cell.colSpan;
   var nextCellColSpan = isNaN(nextCell.colSpan) ? 1 : nextCell.colSpan;
   isAllow = colSpan == nextCellColSpan;
  }
  return isAllow;
 },
 MergeCell: function(firstCell, secondCell) {
  var doc = _aspxGetElementDocument(firstCell);
  var newCell = doc.createElement(firstCell.nodeName);
  newCell.innerHTML = firstCell.innerHTML;
  var emptyHtmlRegExp = new RegExp(__aspxHEEmptyHtmlRegExpPattern, "ig");
  if (!emptyHtmlRegExp.test(secondCell.innerHTML))
   newCell.innerHTML += "<br/>" + secondCell.innerHTML;
  _aspxCopyAllAttributes(firstCell, newCell);
  return newCell;
 },
 CreateTableModel: function(table) {
  var rows = table.rows;
  var rowCount = 0;
  var model = [ ];
  for (var i = 0; i < rows.length; i++) {
   if (!model[rowCount])
    model[rowCount] = [ ];
   var colCount = 0;
   for (var j = 0, cl = rows[i].cells.length; j < cl; j++) {
    var curCell = rows[i].cells[j];
    while (model[rowCount][colCount])
     colCount++;
    var colSpan = this.GetColSpan(curCell);
    var rowSpan = this.GetRowSpan(curCell);
    for (var rs = 0; rs < rowSpan; rs++) {
     var rowInd = rowCount + rs;
     if (rowInd >= rows.length)
      break;
     if (!model[rowInd])
      model[rowInd] = [ ];
     for (var cs = 0; cs < colSpan; cs++)
      model[rowInd][colCount + cs] = curCell;
    }
    colCount += colSpan - 1;
   }
   rowCount++;
  }
  return model;
 },
 GenerateTableFromModel: function(model, sourceTable) {
  var rowSpanAttr = __aspxIE ? "_dxrowspan" : "rowSpan";
  for (var i = 0; i < model.length; i++) {
   for (var j = 0; j < model[i].length; j++) {
    if (model[i][j].parentNode)
     model[i][j].parentNode.removeChild(model[i][j]);
    model[i][j].colSpan = model[i][j][rowSpanAttr] = 1;
    model[i][j].rowSpan = 1;
    model[i][j].rowIsNotSpanned = false;
    model[i][j].colIsNotSpanned = false;
   }
  }
  var maxColumnCount = 0;
  for (var i = 0; i < model.length; i++) {
   for (var j = 0; j < model[i].length; j++) {
    if (model[i][j]) {
     var cell = model[i][j];
     if (j > maxColumnCount)
      maxColumnCount = j;
     if (!cell.colIsNotSpanned) {
      if (model[i][j - 1] == cell)
       cell.colSpan++;
      if (model[i][j + 1] != cell)
       cell.colIsNotSpanned = true;
     }
    }
   }
  }
  var sourceRows = new Array();
  for (var i = 0; i <= maxColumnCount; i++) {
   for (var j = 0; j < model.length; j++) {
    if (model[j] && model[j][i] && !model[j][i].rowIsNotSpanned) {
     var cell = model[j][i];
     if (model[j - 1] && model[j - 1][i] == cell)
      cell[rowSpanAttr]++;
     if (!model[j + 1] || model[j + 1][i] != cell)
      cell.rowIsNotSpanned = true;
    }
   }
  }
  var doc = _aspxGetElementDocument(sourceTable);
  for (var i = 0; i < model.length; i++) {
   var rowObj = doc.createElement(sourceTable.rows[i].tagName);
   _aspxCopyAllAttributes(sourceTable.rows[i], rowObj);
   for (var j = 0; j < model[i].length; ) {
    var cell = model[i][j];
    _aspxRemoveAttribute(cell, "rowIsNotSpanned");
    _aspxRemoveAttribute(cell, "colIsNotSpanned");
    if (model[i - 1] && model[i - 1][j] == cell) {
     j += cell.colSpan;
     continue;
    }
    rowObj.appendChild(cell);
    var isEmptyRowSpan = cell.rowSpan == 1;
    if (rowSpanAttr != 'rowSpan' && _aspxIsExists(cell[rowSpanAttr])) {
     if (cell[rowSpanAttr] > 1)
      isEmptyRowSpan = false;
      cell.rowSpan = cell[rowSpanAttr];
      cell.removeAttribute(rowSpanAttr);
     }
    if (cell.colSpan == 1)
     cell.removeAttribute('colspan');
    if (isEmptyRowSpan)
     cell.removeAttribute('rowspan');
    j += cell.colSpan;
   }
   sourceTable.rows[i].parentNode.replaceChild(rowObj, sourceTable.rows[i]);
  }
 },
 AddDefaultContentToCell: function(cell) {
  cell.innerHTML = "&nbsp;";
 },
 CreateNewCellByCell: function(cell, resetWidth) {
  var newCell = _aspxGetElementDocument(cell).createElement(cell.nodeName);
  if (cell.style.cssText !== '') {
   newCell.style.cssText = cell.style.cssText;
   if (resetWidth && _aspxHETableHelper.ParseSizeString(newCell.style.width).valueType == "%")
    newCell.style.width = "";
  }
  this.AddDefaultContentToCell(newCell);
  return newCell;
 },
 ParseSizeString: function(sizeString) {
  var ret = { value: null, valueType: null };
  var res = __aspxHESizeTypeRegExp.exec(sizeString);
  if (res && res.length > 2) {
   ret.value = parseFloat(res[1]);
   ret.valueType = res[2];
  }
  return ret;
 },
 SetBackgroundColor: function(element, color) {
  if (color)
   element.style.backgroundColor = color;
  else {
   element.style.backgroundColor = "";
   _aspxRemoveStyleAttribute(element.style, "backgroundColor");
  }
 },
 SetTableBorderColor: function(table, color) {
  _aspxRemoveAttribute(table, __aspxIE ? "borderColor" : "bordercolor");
  for(var i = 0, row; row = table.rows[i]; i++) {
   for(var j = 0, cell; cell = row.cells[j]; j++) {
    cell.style.borderColor = color;
   }
  }
 },
 SetTableBorderWidthCore: function(table, width) {
  _aspxRemoveAttribute(table, "border");
  var className = "";
  if(_aspxHETableHelper.HasEmptyBorderClassName(table)) {
   className = table.className;
   _aspxHETableHelper.RemoveEmptyBorderClassName(table);
   table.offsetWidth; 
  }
  for(var i = 0, row; row = table.rows[i]; i++) {
   for(var j = 0, cell; cell = row.cells[j]; j++) {
    if(width > 0) {
     cell.style.borderWidth = width + "px";
     var currentStyle = _aspxGetCurrentStyle(cell);
     var bc = _aspxHETableHelper.GetBorderColor(currentStyle);
     var bs = _aspxHETableHelper.GetBorderStyle(currentStyle);
     if(!bc || bc == "transparent")
      cell.style.borderColor = "#000000";
     if(!bs || bs == "none")
      cell.style.borderStyle = "solid";
    }
    else {
     cell.style.borderWidth = "";
     cell.style.borderColor = "";
     cell.style.borderStyle = "";
    }
   }
  }
  if(className)
   table.className = className;
 },
 GetTableBorderColor: function(table, color) {
  var color = null;
  for(var i = 0, row; row = table.rows[i]; i++) {
   for(var j = 0, cell; cell = row.cells[j]; j++) {
    if(color === null)
     color = cell.style.borderColor;
    if(color !== cell.style.borderColor)
     return null;
   }
  }
  return color;
 },
 GetRowIndex: function(cell) {
  var row = cell.parentNode;
  return row.rowIndex;
 },
 GetCell: function(table, rowIndex, colIndex) {
  return table.rows[rowIndex].cells[colIndex];
 },
 GetNextCellVertical: function(cell) {
  var nextCell = null;
  var row = cell.parentNode;
  var table = _aspxGetParentByTagName(cell, "TABLE");
  var rowSpan = this.GetRowSpan(cell);
  if (table.rows.length > row.rowIndex + rowSpan) {
   var nextRow = table.rows[row.rowIndex + rowSpan];
   var prevSumSpan = 0;
   for(var i = 0, prevInd = cell.cellIndex; i <= prevInd; i++)
    prevSumSpan +=  this.GetColSpan(row.cells[i]);
   var nextSumSpan = 0;
   for(var i = 0, rowLen = nextRow.cells.length; i < rowLen; i++) {
    var nextSpan = this.GetColSpan(nextRow.cells[i]);
    nextSumSpan += nextSpan;
    if((this.GetColSpan(cell) == nextSpan) && (nextSumSpan == prevSumSpan)) {
     nextCell = nextRow.cells[i];
     break;
    }
   }
  }
  return nextCell;
 },
 GetColumnIndexByTableModel: function(model, rowIndex, cell) {
  if (model.length < rowIndex + 1)
   return -1;
  var row = model[rowIndex];
  for (var i = 0; i < row.length; i++) {
   if (row[i] == cell)
    return i;
  }
  return -1;
 },
 GetNextCellColumnIndexByTableModel: function(model, rowIndex, columnIndex) {
  if (model.length < rowIndex + 1)
   return -1;
  var cell = model[rowIndex][columnIndex];
  for (var i = columnIndex; i < model[rowIndex].length; i++) {
   if (model[rowIndex][i] != cell)
    return i;
  }
  return -1;
 },
 GetNextCellRowIndexByTableModel: function(model, rowIndex, columnIndex) {
  if (model.length < rowIndex + 1)
   return -1;
  var cell = model[rowIndex][columnIndex];
  for (var i = rowIndex; i < model.length; i++) {
   if (model[i][columnIndex] != cell)
    return i;
  }
  return -1;
 },
 GetNextRow: function(row) {
  var table = _aspxGetParentByTagName(row, "TABLE");
  var i = 0;
  for (i = 0; i < table.rows.length; i++)
   if (table.rows[i] == row)
   break;
  return i + 1 < table.rows.length ? table.rows[i + 1] : null;
 },
 GetColSpan: function(cell) {
  return isNaN(cell.colSpan) ? 1 : cell.colSpan;
 },
 GetRowSpan: function(cell) {
  return isNaN(cell.rowSpan) ? 1 : cell.rowSpan;
 },
 SelectCell: function(table, rowIndex, colIndex, htmlEditor) {
  var cell = this.GetCell(table, rowIndex, colIndex);
  if (cell)
   this.SelectCellCore(cell, htmlEditor);
 },
 SelectCellCore: function(cell, htmlEditor) {
  var elem = cell;
  if (cell.childNodes.length > 0 && !(__aspxIE && __aspxBrowserVersion < 11))
   elem = cell.childNodes[0];
  if(__aspxIE && __aspxBrowserMajorVersion > 10)
   htmlEditor.RemoveFocus();
  if (!__aspxIE)
   htmlEditor.SetFocus();
  ASPxClientHtmlEditorSelection.SelectElement(elem, htmlEditor, __aspxOpera);
 },
 DeleteRows: function(table) {
  for (var i = 0; i < table.rows.length; i++) {
   var rIndex = table.rows[i].sectionRowIndex;
   table.deleteRow(rIndex);
  }
 }
};
ASPxHtmlEditorCommands.Tables = {};
ASPxHtmlEditorCommands.Tables.Table = {
 IsSelected: function(htmlEditor) {
  var curSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
  return !!_aspxHETableHelper.GetTable(curSelection.GetParentElement());
 },
 SetRowAndColumnCount: function(table, rowCount, columnCount, isColumnEqualWidth) {
  _aspxHETableHelper.DeleteRows(table);
  var cellWidth = 100 / columnCount + "%";
  for (var i = 0; i < rowCount; i++) {
   var newRow = table.insertRow(i);
   for (var j = 0; j < columnCount; j++) {
    var cell = newRow.insertCell(j);
    if (isColumnEqualWidth)
     cell.style.width = cellWidth;
   }
  }
 },
 Insert: _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   var doc = htmlEditor.GetDesignViewDocument();
   var tableId = ASPxClientSelection.CreateUniqueID();
   var emptyTableHtml = "<table id='" + tableId + "'></table>";
   ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEHTML_COMMAND].Execute(emptyTableHtml, htmlEditor);
   var emptyTable = _aspxGetElementByIdInDocument(doc, tableId);
   emptyTable.id = "";
   _aspxRemoveAttribute(emptyTable, "id");
   ASPxHtmlEditorCommands.Tables.Table.SetRowAndColumnCount(emptyTable, cmdValue.rows, cmdValue.columns, cmdValue.isColumnEqualWidth);
   this.InitializeTable(emptyTable);
   _aspxHETableHelper.SetTableProperties(emptyTable, cmdValue.tableProperties, htmlEditor);
   _aspxHETableHelper.SelectCell(emptyTable, 0, 0, htmlEditor);
   return true;
  },
  InitializeTable: function(table) {
   table.style.borderCollapse = "collapse";
   for (var i = 0; i < table.rows.length; i++) {
    var row = table.rows[i];
    for (var j = 0; j < row.cells.length; j++)
     _aspxHETableHelper.AddDefaultContentToCell(row.cells[j]);
   }
  }
 }),
 Change: _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.SetTableProperties(cmdValue.tableElement, cmdValue.tableProperties, htmlEditor);
   _aspxHETableHelper.SelectCell(cmdValue.tableElement, 0, 0, htmlEditor);
   return true;
  }
 }),
 Delete: _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   var curSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
   var table = _aspxHETableHelper.GetTable(curSelection.GetParentElement());
   if (table) {
    ASPxClientHtmlEditorSelection.SelectElement(table, htmlEditor);
    ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DELETE_COMMAND].Execute(null, htmlEditor);
    if (__aspxOpera)
     _aspxRemoveElement(table);
    htmlEditor.SetFocus();
    return true;
   }
   return false;
  },
  IsLocked: function(editor) {
   return !ASPxHtmlEditorCommands.Tables.Table.IsSelected(editor);
  }
 })
};
ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 IsLocked: function(editor) {
  return !ASPxHtmlEditorCommands.Tables.Cell.Get(editor);
 }
});
ASPxHtmlEditorCommands.Tables.DeleteColumnAndRowBase = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 IsLocked: function(editor) {
  if (editor.NeedGetElementFromSelection("tableRow")) {
   var curSelection = ASPxClientHtmlEditorSelection.Create(editor);
   editor.SetSelectedElement("tableRow", _aspxHETableHelper.GetTableRow(curSelection.GetParentElement()));
  }
  return !editor.GetSelectedElement("tableRow");
 }
});
ASPxHtmlEditorCommands.Tables.Row = {
 Insert: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase.prototype.Execute.apply(this, arguments);
   var cell = ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor);
   if (cell) {
    _aspxHETableHelper.InsertRow(cell, this.GetShift(), htmlEditor);
    htmlEditor.SetFocus();
    return true;
   }
   return false;
  },
  GetShift: function() {
   var ret = 0; 
   if (this.commandID == ASPxClientCommandConsts.INSERTTABLEROWBELOW_COMMAND)
    ret = 1;
   return ret;
  }
 }),
 Change: _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.SetRowProperties(cmdValue.cell, cmdValue.properties);
   return true;
  }
 }),
 Delete: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.DeleteColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.DeleteColumnAndRowBase.prototype.Execute.apply(this, arguments);
   var cell = ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor);
   return _aspxHETableHelper.RemoveRow(cell, htmlEditor);
  }
 })
};
ASPxHtmlEditorCommands.Tables.Column = {
 Insert: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase.prototype.Execute.apply(this, arguments);
   var cell = ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor);
   if (cell) {
    _aspxHETableHelper.InsertColumn(cell, this.GetShift(htmlEditor.rtl), htmlEditor);
    htmlEditor.SetFocus();
    return true;
   }
   return false;
  },
  GetShift: function(rtl) {
   if(rtl)
    return this.commandID == ASPxClientCommandConsts.INSERTTABLECOLUMNTORIGHT_COMMAND ? 0 : 1;
   else
    return this.commandID == ASPxClientCommandConsts.INSERTTABLECOLUMNTORIGHT_COMMAND ? 1 : 0;
  }
 }),
 Change: _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.SetColumnProperties(cmdValue.cell, cmdValue.properties);
   return true;
  }
 }),
 Delete: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.DeleteColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.DeleteColumnAndRowBase.prototype.Execute.apply(this, arguments);
   var curSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
   var selElem = curSelection.GetParentElement();
   var table = _aspxHETableHelper.GetTable(selElem);
   var row = _aspxHETableHelper.GetTableRow(selElem);
   var cell = ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor);
   return _aspxHETableHelper.RemoveColumn(cell, htmlEditor);
  }
 })
};
ASPxHtmlEditorCommands.Tables.Cell = {
 Get: function(htmlEditor) {
  if (htmlEditor.NeedGetElementFromSelection("tableCell")) {
   var curSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
   var parentElem = curSelection.GetParentElement();
   var endElem = null;
   if (!__aspxIE)
    endElem = curSelection.GetEndContainer();
   htmlEditor.SetSelectedElement("tableCell", _aspxHETableHelper.GetTableCellBySelection(parentElem, endElem));
  }
  return htmlEditor.GetSelectedElement("tableCell");
 },
 IsSelected: function(editor) {
  return !!ASPxHtmlEditorCommands.Tables.Cell.Get(editor);
 },
 Change: _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   if (cmdValue.properties.applyForAll)
    _aspxHETableHelper.SetCellPropertiesForAllCell(_aspxGetParentByTagName(cmdValue.cellElement, "TABLE"),
                cmdValue.properties);
   else
    _aspxHETableHelper.SetCellProperties(cmdValue.cellElement, cmdValue.properties);
   return true;
  }
 }),
 SplitHorizontally: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.SplitCellHorizontal(ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor), htmlEditor);
   return true;
  }
 }),
 SplitVertically: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.SplitCellVertical(ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor), htmlEditor);
   return true;
  }
 }),
 MergeRight: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.MergeCellHorizontal(ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor), htmlEditor);
   return true;
  },
  IsLocked: function(editor) {
   var cell = ASPxHtmlEditorCommands.Tables.Cell.Get(editor);
   if (cell)
    return !_aspxHETableHelper.IsMergeCellHorizontalAllow(cell, editor);
   return true;
  }
 }),
 MergeDown: _aspxCreateClass(ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase, {
  Execute: function(cmdValue, htmlEditor) {
   ASPxHtmlEditorCommands.Tables.InsertColumnAndRowBase.prototype.Execute.apply(this, arguments);
   _aspxHETableHelper.MergeCellVertical(ASPxHtmlEditorCommands.Tables.Cell.Get(htmlEditor), htmlEditor);
   return true;
  },
  IsLocked: function(editor) {
   var cell = ASPxHtmlEditorCommands.Tables.Cell.Get(editor);
   if (cell)
    return !_aspxHETableHelper.IsMergeCellVerticalAllow(cell, editor);
   return true;
  }
 })
};
ASPxHtmlEditorCommands.Browser.FormatBlock = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 Execute: function(cmdValue, htmlEditor) {
  cmdValue = cmdValue.toUpperCase();
  if(ASPxHtmlEditorCommands.Utils.IsInlineTextElement(cmdValue))
   return;
  var selectionBookmarks = htmlEditor.GetSelection().clientSelection.GetExtendedBookmark();
  var selection = htmlEditor.GetSelection();
  var doc = htmlEditor.GetDesignViewDocument();
  var tempNodeId = "tempSpan";
  var elements = [];
  var isCollapsed = selection.IsCollapsed();
  if(!isCollapsed)
   elements = selection.GetElements(true);
  if(elements.length == 0 || isCollapsed)
   elements = [ ASPxHtmlEditorCommands.Utils.InsertNewElement(doc, selection, tempNodeId) ];
  var newElements = [];
  for(var i = 0, element; element = elements[i]; i++) {
   if(!element.parentNode)
    continue;
   var inlineNodes = [];
   var isTextNode = element.nodeType == 3;
   if(isTextNode)
    inlineNodes.push(element);
   else if(!selection.IsCollapsed())
    inlineNodes = this.FindAllTextNodes(element);
   else
    inlineNodes.push(element);
   var headerExpr = /H[1-6]/;
   for(var j = 0, node; node = inlineNodes[j]; j++) {
    var node = this.FindInlineTextParent(node) || node;
    if(_aspxArrayIndexOf(newElements, node.parentNode) > -1)
     continue;
    var parent = node.parentNode;
    if(parent.tagName !== cmdValue) {
     var wrapper = doc.createElement(cmdValue);
     var inlineElements = ASPxHtmlEditorCommands.Utils.GetBetweenBlocksInlineElements(node);
     var nextSibling = inlineElements[inlineElements.length - 1].nextSibling;
     for(var k = 0, elem; elem = inlineElements[k]; k++)
      wrapper.appendChild(elem);
     if(parent.childNodes.length > 0) {
      if(!nextSibling)
       parent.appendChild(wrapper);
      else
       parent.insertBefore(wrapper, nextSibling);
     }
     else if(parent.nodeName == "BODY" || parent.nodeName == "TD" || parent.nodeName == "TH" || parent.nodeName == "LI")
      parent.appendChild(wrapper);
     else {
      parent.parentNode.insertBefore(wrapper, parent);
      _aspxCopyAllAttributes(parent, wrapper);
      parent.parentNode.removeChild(parent);
     }
     newElements.push(wrapper);
     if(headerExpr.test(cmdValue))
      this.RemoveWeightAndSizeStyle(htmlEditor, inlineElements);
    }
   }
  }
  _aspxRemoveElement(_aspxGetElementByIdInDocument(doc, tempNodeId));
  selection.clientSelection.SelectExtendedBookmark(selectionBookmarks);
  return true;
 },
 FindInlineTextParent: function(element) {
  return ASPxHtmlEditorCommands.Utils.FindParent(element, ASPxHtmlEditorCommands.Utils.IsInlineTextElement);
 },
 FindAllTextNodes: function(element) {
  var nodes = [];
  for(var child = element.firstChild; child; child = child.nextSibling) {
   if(child.nodeType == 3)
    nodes.push(child);
   else
    nodes = nodes.concat(this.FindAllTextNodes(child));
  }
  return nodes;
 },
 GetCorrectedValue: function(value) {
  return __aspxIE ? "<" + value + ">" : value;
 },
 IsFormatBlockElement: function(element) {
  var expr = /H[1-6]|DIV|ADDRESS|BODY/;
  return expr.test(element.nodeName);
 },
 GetValue: function(editor, selection, selectedElements) {
  selection = !selection ? editor.GetSelection() : selection;
  var selectedElement = selection.GetSelectedElement();
  var getParentNode = function(node) { return node.parentNode; };
  var parent = ASPxHtmlEditorCommands.Utils.FindElement(selectedElement, this.IsFormatBlockElement, getParentNode);
  return !parent ? "" : parent.nodeName.toLowerCase();
 },
 RemoveWeightAndSizeStyle: function(htmlEditor, elements) {
  var parent = elements[0].parentNode;
  if(parent.nodeName != "BODY") {
   parent.style["fontWeight"] = "normal";
   if(__aspxNetscapeFamily) 
    var offsetHeight = parent.offsetHeight;
  }
  ASPxHtmlEditorCommandList[ASPxClientCommandConsts.BOLD_COMMAND].RemoveStyle(htmlEditor, elements, null, true);
  ASPxHtmlEditorCommandList[ASPxClientCommandConsts.FONTSIZE_COMMAND].RemoveStyle(htmlEditor, elements);
  if(parent.nodeName != "BODY") {
   parent.style["fontWeight"] = "";
   parent.style["fontSize"] = "";
  }
 },
 GetDefaultValue: function(htmlEditor) {
  var defaultTags = ["p", "span"];
  for(var i = 0, tag; tag = defaultTags[i]; i++) {
   if(_aspxArrayIndexOf(htmlEditor.formatBlockValues, tag) > -1)
    return tag;
  }
  return "";
 }
});
ASPxHtmlEditorCommands.Browser.RemoveFormat = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 Execute: function(cmdValue, editor) {
  ASPxHtmlEditorCommands.Browser.Command.prototype.Execute.call(this, cmdValue, editor);
  var sel = editor.GetSelection();
  if(!sel.clientSelection.IsTextOnly() && !sel.clientSelection.IsControl() && sel.GetSelectedElement()) {
   var elements = sel.GetElements();
   for(var i = 0, el; el = elements[i]; i++) {
    if(el.nodeType == 1)
     this.CleanElement(el);
   }
  }
  return true;
 },
 CleanElement: function(element) {
  for (var i = 0; i < element.childNodes.length ; i++)
   this.CleanElement(element.childNodes[i]);
  if (element.nodeType == 1 && element.tagName.toUpperCase() != "BODY") {
   _aspxRemoveAllAttributes(element, ["href", "src", "alt", "target", "id", "title", "value"]);
   _aspxRemoveAllStyles(element);
  }
 }
});
ASPxHtmlEditorCommands.PasteFromWord = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, htmlEditor) {
  if(!__aspxWebKitTouchUI) {
   var inlineNode;
   var doc = htmlEditor.GetDesignViewDocument();
   if(__aspxNetscapeFamily) {
    if(doc.body.childNodes.length == 0 || (doc.body.childNodes.length == 1 && doc.body.firstChild.nodeName == "BR"))
     inlineNode = doc.createTextNode("\xA0");
   }
   ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
   var isSuccessfully = ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEHTML_COMMAND].Execute(
    ASPxHtmlEditorCommands.PasteFromWord.ClearWordFormatting(cmdValue.html, cmdValue.stripFontFamily, doc), htmlEditor); 
   if(inlineNode)
    doc.body.appendChild(inlineNode);
   return isSuccessfully;
  }
  else
   alert(ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage[ASPxClientCommandConsts.PASTE_COMMAND]);
 }
});
ASPxHtmlEditorCommands.PasteFromWord.ClearWordFormatting = function(html, stripFontFamily, doc) {
 html = ASPxHtmlEditorCommands.PasteFromWord.ClearWordAttributes(html);
 html = html.replace(/<\/?\w+:[^>]*>/gi, '');
 html = html.replace(/<STYLE[^>]*>[\s\S]*?<\/STYLE[^>]*>/gi, '');
 html = html.replace(/<(?:META|LINK)[^>]*>\s*/gi, '');
 html = html.replace(/<\\?\?xml[^>]*>/gi, '');
 html = html.replace(/<o:[pP][^>]*>\s*<\/o:[pP]>/gi, '');
 html = html.replace(/<o:[pP][^>]*>.*?<\/o:[pP]>/gi, '&nbsp;');
 html = html.replace(/<st1:.*?>/gi, '');
 html = html.replace(/<\!--[\s\S]*?-->/g, '');
 html =  html.replace(/\s*style="\s*"/gi, '');
 html = html.replace(/style=""/ig, "");
 html = html.replace(/style=''/ig, "");
 var stRegExp = new RegExp('(?:style=\\")([^\\"]*)(?:\\")', 'gi');
 html = html.replace(stRegExp, function(str) {
  str = str.replace(/&quot;/gi, "'")
  str = str.replace(/&#xA;/gi, " ")
  return str;
 });
 html = html.replace(/^\s/i, '');
 html = html.replace(/\s$/i, '');
 html = html.replace(/<p>&nbsp;<\/p>/gi, '<br /><br />');
 html = html.replace(/<font\s*>([^<>]+)<\/font>/gi, '$1');
 html = html.replace(/<span\s*><span\s*>([^<>]+)<\/span><\/span>/ig, '$1');
 html = html.replace(/<span>([^<>]+)<\/span>/gi, '$1');
 if (stripFontFamily) {
  html = html.replace(/\s*face="[^"]*"/gi, '');
  html = html.replace(/\s*face=[^ >]*/gi, '');
  html = html.replace(/\s*FONT-FAMILY:[^;"]*;?/gi, '');
 }
 html = html.replace( /<td([^>]*)>\s*<\/td>/gi, '<td$1>&nbsp;</td>' );
 var re = /<([^\s>]+)(\s[^>]*)?><\/\1>/g;
 while(html != html.replace(re, '' ))
  html = html.replace( re, '' );
 re = /<([^\s>]+)(\s[^>]*)?>\s+<\/\1>/g;
 while(html != html.replace(re, ' ' ))
  html = html.replace( re, ' ' );
 html = ASPxHtmlEditorCommands.PasteFromWord.MergerFontFamilyAttributes(html);
 html = html.replace(/\n/gi, ' ');
 html = ASPxHtmlEditorCommands.PasteFromWord.RestoreBrokenLists(html, doc);
 html = html.replace(/\s*mso-[^:]+:[^;"]+;?/gi, '');
 html = html.replace(/<(\w[^>]*) class=([^ |>]*)([^>]*)/gi, "<$1$3") ;
 return html;
};
ASPxHtmlEditorCommands.PasteFromWord.ClearWordAttributes = function(html) {
 html = html.replace(/<(\w[^>]*) lang=([^ |>]*)([^>]*)/gi, "<$1$3");
 html = html.replace(/\s*mso-bidi-font-family/gi, "font-family");
 html = html.replace(/\s*MARGIN: 0cm 0cm 0pt\s*;/gi, '');
 html = html.replace(/\s*MARGIN: 0cm 0cm 0pt\s*"/gi, "\"");
 html = html.replace(/\s*TEXT-INDENT: 0cm\s*;/gi, '');
 html = html.replace(/\s*TEXT-INDENT: 0cm\s*"/gi, "\"");
 html = html.replace(/\s*PAGE-BREAK-BEFORE: [^\s;]+;?"/gi, "\"");
 html = html.replace(/\s*FONT-VARIANT: [^\s;]+;?"/gi, "\"") ;
 html = html.replace(/\s*tab-stops:[^;"]*;?/gi, '') ;
 html = html.replace(/\s*tab-stops:[^"]*/gi, '') ;
 return html;
};
ASPxHtmlEditorCommands.PasteFromWord.RestoreBrokenLists = function(html, doc) {
 var getPreviousSibling = function(element) {
  while(element && (element.nodeType == 3 && element.nodeValue && !_aspxTrim(element.nodeValue) || element.textContent && !_aspxTrim(element.textContent) || element.innerText && !_aspxTrim(element.innerText)))
   element = element.previousSibling;
  return element;
 }
 var convertTypeAttrToListStyleType = function(typeAttrValue) {
  if(/^(IX|IV|V?I{0,3})$/.test(typeAttrValue))
   return "upper-roman";
  else if(/^(ix|iv|v?i{0,3})$/.test(typeAttrValue))
   return "lower-roman";
  else if(/[0-9]/.test(typeAttrValue))
   return "decimal";
  else if(typeAttrValue == "o")
   return "circle";
  else  if(/[a-z]/.test(typeAttrValue))
   return "lower-alpha";
  else if(/[A-Z]/.test(typeAttrValue))
   return "upper-alpha";
  var typeAttrValue = escape(typeAttrValue);
  if(typeAttrValue == "%B7")
   return "disc";
  else if(typeAttrValue == "%A7")
   return "square";
 }
 var brokenListHtmlArray = html.match(/<p class=\"MsoListParagraphCxSpFirst\"[\s\S]*?class=\"MsoListParagraphCxSpLast\"[\s\S]*?<\/p>/gi);
 if(brokenListHtmlArray && brokenListHtmlArray.length > 0) {
  for(var i = 0, brokenListHtml; brokenListHtml = brokenListHtmlArray[i]; i++) {
   var listItemsArray = [];
   var parentItemIndex = -1;
   var brokenListItemHtmlArray = brokenListHtml.match(/<p[\s\S]*?>[\s\S]*?<\/p>/gi);
   for(var j = 0, brokenListItemHtml; brokenListItemHtml = brokenListItemHtmlArray[j]; j++) {
    var msoListAttr = brokenListItemHtml.match(/mso-list:\s*\w*\s*level[^ ]/gi);
    if(!msoListAttr || msoListAttr.length == 0)
     break;
    var currentLevel = parseInt(msoListAttr[0].replace(/mso-list:\s*\w*\s*level/gi,'')) - 1;
    var tempElement = doc.createElement("DIV");
    tempElement.innerHTML = brokenListItemHtml;
    tempElement = tempElement.firstChild;
    var listItemElement = doc.createElement("LI");
    var element = getPreviousSibling(tempElement.lastChild);
    var ignorElement = getPreviousSibling(element.previousSibling);
    listItemElement.appendChild(element);
    var listStyleTypeValue;
    var parentItemIndex = -1;
    if(listItemsArray.length == 0 || listItemsArray[j - 1].level < currentLevel) {
     var textContent = ignorElement.textContent ? _aspxTrim(ignorElement.textContent) : (ignorElement.innerText ? _aspxTrim(ignorElement.innerText) : "");
     listStyleTypeValue = convertTypeAttrToListStyleType(textContent.indexOf(".") > -1 ? textContent.substring(0, textContent.length - 1) : textContent);
     parentItemIndex = j - 1;
    }
    else if(currentLevel == 0)
     listStyleTypeValue = listItemsArray[0].listStyleTypeValue;
    else {
     for(var k = j - 1; listItem = listItemsArray[k]; k--) {
      if(listItem.level <= currentLevel) {
       listStyleTypeValue = listItemsArray[k].listStyleTypeValue;
       parentItemIndex = listItemsArray[k].parentItemIndex;
      }
     }
    }
    listItemsArray.push({ 'level': currentLevel, 'node' : listItemElement, 'parentItemIndex' : parentItemIndex, 'parentListType' : /square|disc|circle/.test(listStyleTypeValue) ? "UL" : "OL", 'listStyleTypeValue' : listStyleTypeValue});
   }
   if(listItemsArray.length > 0)
    html = html.replace(brokenListHtml, ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray(listItemsArray).outerHTML);
  }
 }
 if(__aspxIE) {
  brokenListHtmlArray = html.match(/<(?:(?:ol)|(?:ul))>\s*<font[^>]*><font[^>]*>/);
  if(brokenListHtmlArray && brokenListHtmlArray.length > 0) {
   html = html.replace(/(?:<font[^>]*>)*(?:<span[^>]*>)*\s*<p[^>]*>(<li>.*?<\/li>)\s*(?:<\/span>)*(?:<\/font>)*/gi,"$1");
   html = html.replace(/(?:<font[^>]*>)*(?:<span[^>]*>)*\s*(<(?:(?:ul)|(?:ol))>)/gi,"$1");
   html = html.replace(/(<(?:(?:ul)|(?:ol))>)\s*(?:<\/span>)*(?:<\/font>)*/gi,"$1");
   var tempDivElement = doc.createElement("DIV");
   tempDivElement.innerHTML = html;
   for(var i = 0, childElement; childElement = tempDivElement.childNodes[i]; i++) {
    if(childElement.nodeName == "OL" || childElement.nodeName == "UL") {
     var listItemsArray = _aspxGetElementsByTagName(childElement, "LI");
     for(var j = 0, listItem; listItem = listItemsArray[j]; j++) {
      if(listItem.nextSibling && (listItem.nextSibling.nodeName == "UL" || listItem.nextSibling.nodeName == "OL"))
       listItem.appendChild(listItem.nextSibling);
     }
    }
   }
   html = tempDivElement.innerHTML;
  }
 }
 html = html.replace(/<li[^>]*>/gi,"<li>");
 return html;
};
ASPxHtmlEditorCommands.PasteFromWord.MergerFontFamilyAttributes = function(html) {
 var attrName = "font-family";
 var styleAttrPos = html.toLowerCase().indexOf("style");
 while (styleAttrPos != -1) {
  var styleAttrValue = html.substring(styleAttrPos, html.indexOf(">", styleAttrPos + 1));
  var attrValuePos = styleAttrValue.toLowerCase().indexOf(attrName);
  var countAttrValue = [];
  while (attrValuePos != -1) {
   countAttrValue.push(attrValuePos + styleAttrPos);
   attrValuePos = styleAttrValue.toLowerCase().indexOf(attrName, attrValuePos + 1);
  }
  if(countAttrValue.length > 1) {
   var attrValues = [];
   for(var i = countAttrValue.length - 1; i > 0; i--) {
    attrValuePos = countAttrValue[i];
    attrValues.push(html.substring(html.indexOf(":", attrValuePos) + 1, html.indexOf(";", attrValuePos)));
    html = html.substring(0, attrValuePos) + html.substring(attrValuePos + attrName.length + attrValues[attrValues.length - 1].length + 2);
   }
   var tempString = "";
   for(var i = 0, value; value = attrValues[i]; i++)
    tempString += "," + value;
   var posInsert = html.indexOf(";", countAttrValue[0]);
   html = html.substring(0, posInsert) + tempString + html.substring(posInsert);
  }
  styleAttrPos = html.toLowerCase().indexOf("style", styleAttrPos + 1);
 }
 return html;
};
ASPxHtmlEditorCommands.PasteHtml = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(htmlText, htmlEditor) {
  ASPxHtmlEditorCommands.Command.prototype.Execute.apply(this, arguments);
  if(__aspxIE) {
   htmlText = ASPxHtmlEditorCommands.PasteHtml.safePreLineBreaks(htmlText); 
   htmlText = htmlText.replace(/(\r\n|\n|\r)/gm, " "); 
   htmlText = htmlText.replace(/>[\s]*</g, "><");
   htmlText = ASPxHtmlEditorCommands.PasteHtml.restorePreLineBreaks(htmlText);
  }
  htmlText = ASPxClientHtmlEditor.PreserveAttribute(htmlText, __aspxContentEditableAttributeNameRegExp);
  htmlEditor.GetSelection().SetHtmlInternal(htmlText);
  return true;
 }
});
ASPxHtmlEditorCommands.PasteHtml.safePreLineBreaks = function(text) {
 var matches = text.match(/<pre[^>]*>[\S\s]*?<\/pre>/gi);
 for(var i = 0; matches && i < matches.length; i++) {
  text = text.replace(matches[i], matches[i].replace(/(\r\n|\n|\r)/gm, "!dxrn!"));
 }
 return text;
};
ASPxHtmlEditorCommands.PasteHtml.restorePreLineBreaks = function(text) {
 return text.replace(/!dxrn!/gm, "\r\n");
};
ASPxHtmlEditorCommands.Browser.Clipboard = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 Execute: function(cmdValue, editor) {
  if(__aspxIE && __aspxBrowserMajorVersion < 8 && !editor.isInFocus)
   editor.SetFocus();
  var result = false;
  if(ASPxHtmlEditorCommands.Browser.Clipboard.IsAllowed[this.commandID])
   result = this.ExecuteInternal(editor);
  else
   alert(ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage[this.commandID]);
  if(__aspxIE && __aspxBrowserMajorVersion > 8)
   editor.SaveSelection();
  editor.SetFocus();
  return result;
 },
 ExecuteInternal: function(editor) {
  var isEnabled = true;
  if(__aspxIE) {
   try {
    editor.GetDesignViewDocument().queryCommandEnabled(this.commandID); 
   }
   catch (e) { 
    isEnabled = false;
   }
  }
  if(isEnabled)
   return editor.GetDesignViewDocument().execCommand(this.commandID, false, null);
  return false;
 },
 TryGetIsLocked: function(editor) {
  if(!__aspxIE && (this.commandID == ASPxClientCommandConsts.COPY_COMMAND || this.commandID == ASPxClientCommandConsts.CUT_COMMAND || this.commandID == ASPxClientCommandConsts.PASTE_COMMAND))
   return true;
  if(__aspxSafari)
   return false;
  if(__aspxIE && this.commandID == ASPxClientCommandConsts.PASTE_COMMAND)
   return false;
  return ASPxHtmlEditorCommands.Browser.Command.prototype.TryGetIsLocked.call(this, editor);
 },
 IsHtmlChangeable: function() {
  return this.GetCommandID() != ASPxClientCommandConsts.COPY_COMMAND;
 }
});
ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage = {};
ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage[ASPxClientCommandConsts.CUT_COMMAND] = "This command cannot be executed. Please use Ctrl+X to Cut to the clipboard.";
ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage[ASPxClientCommandConsts.PASTE_COMMAND] = "This command cannot be executed. Please use Ctrl+V to Paste from the clipboard.";
ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage[ASPxClientCommandConsts.COPY_COMMAND] = "This command cannot be executed. Please use Ctrl+C to Copy to the clipboard.";
ASPxHtmlEditorCommands.Browser.Clipboard.IsAllowed = {};
ASPxHtmlEditorCommands.Browser.Clipboard.IsAllowed[ASPxClientCommandConsts.CUT_COMMAND] = __aspxIE || __aspxChrome;
ASPxHtmlEditorCommands.Browser.Clipboard.IsAllowed[ASPxClientCommandConsts.PASTE_COMMAND] = __aspxIE;
ASPxHtmlEditorCommands.Browser.Clipboard.IsAllowed[ASPxClientCommandConsts.COPY_COMMAND] = __aspxIE || __aspxChrome;
ASPxHtmlEditorCommands.Browser.SelectAll  = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 IsHtmlChangeable: function() {
  return false;
 }
});
ASPxHtmlEditorCommands.TextType = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 IsDefaultAction: function(editor) {
  return true;
 },
 IsImmediateExecution: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.KbCopy = _aspxCreateClass(ASPxHtmlEditorCommands.TextType, {
 IsHtmlChangeable: function() {
  return false;
 } 
});
ASPxHtmlEditorCommands.KbCut = _aspxCreateClass(ASPxHtmlEditorCommands.TextType, { });
ASPxHtmlEditorCommands.KbPaste = _aspxCreateClass(ASPxHtmlEditorCommands.TextType, { });
ASPxHtmlEditorCommands.LineBreakType = _aspxCreateClass(ASPxHtmlEditorCommands.TextType, { });
ASPxHtmlEditorCommands.NewParagraphType = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  return editor.GetDesignViewDocument().execCommand("InsertParagraph", false, null);
 }
});
var __aspxHEBlockElements = { div:1, address:1, blockquote:1, center:1, table:1, h1:1, h2:1, h3:1, h4:1, h5:1, h6:1, p:1, pre:1, ol:1, ul:1, dl:1 };
var __aspxHEPathBlockElements = { address:1, blockquote:1, dl:1, h1:1, h2:1, h3:1, h4:1, h5:1, h6:1, p:1, pre:1, li:1, dt:1, de:1 };
var __aspxHEPathBlockLimitElements = { html:1, body: 1, form: 1, div:1, table:1, tbody:1, tr:1, td:1, th:1, li:1, caption:1 };
var __aspxHEBogusSymbol = "\u200B";
ASPxHtmlEditorCommands.Enter = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 constructor: function(cmdID) {
  ASPxHtmlEditorCommands.Command.prototype.constructor.call(this, cmdID);
  this.passCommandToBrowser;
 },
 IsDefaultAction: function(htmlEditor) {
  return Boolean(this.passCommandToBrowser);
 },
 ReplaceWithNewLine: function(controlElement, lineFeedNodeTagName) {
  var newLineElement = controlElement.document.createElement(lineFeedNodeTagName);
  if(newLineElement.tagName != "BR") {
   newLineElement = this.EnsureEmptySymbolIs(newLineElement);
  }
  controlElement.parentNode.replaceChild(newLineElement, controlElement);
 },
 Execute: function(cmdValue, htmlEditor) {
  this.passCommandToBrowser = false;
  if(htmlEditor.enterMode == ASPxHtmlEditorEnterMode.Default) {
   this.passCommandToBrowser = true;
   return false;
  }
  var selection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
  var enterMode = htmlEditor.enterMode;
  var doc = htmlEditor.GetDesignViewDocument();
  var win = htmlEditor.GetDesignViewIFrameWindow();
  var startContainer = selection.GetStartContainer();
  var startParentLI = _aspxGetParentByTagName(startContainer, "LI");
  if(startParentLI) {
   var endParentLI = _aspxGetParentByTagName(selection.GetEndContainer(), "LI");
   if(enterMode == ASPxHtmlEditorEnterMode.P && this.TryMoveToParagraphFromLI(startParentLI, endParentLI, doc, selection, htmlEditor))
    return true;
   if(__aspxIE && __aspxBrowserMajorVersion > 10 && startParentLI == endParentLI && endParentLI.childNodes.length == 1 && endParentLI.firstChild.nodeName == "BR")
    endParentLI.innerHTML = "";
   this.passCommandToBrowser = true;
   return false;
  }
  if(this.NodeOrOneOfItsParentsIsPre(selection.GetParentElement()))
   enterMode = ASPxHtmlEditorEnterMode.BR;
  if(enterMode == ASPxHtmlEditorEnterMode.BR) {
   var lineFeedNode;
   var lineFeedNodeTagName = "br";
   var range = selection.GetRange();
   if(__aspxIE && __aspxBrowserMajorVersion < 11) {
    if(selection.IsControl()) {
     var controlElement = range.item(0);
     this.ReplaceWithNewLine(controlElement, lineFeedNodeTagName);
     return true;
    }
    var uniqueID = ASPxClientSelection.CreateUniqueID();
    range.pasteHTML("<" + lineFeedNodeTagName + " id=\"" + uniqueID + "\" />");
    lineFeedNode = _aspxGetElementByIdInDocument(doc, uniqueID);
    _aspxRemoveAttribute(lineFeedNode, "id");
    if(ASPxHtmlEditorCommands.Enter.IsNeedBogusNode(lineFeedNode)) {
     range.collapse(false);
     ASPxHtmlEditorCommands.Enter.AppendBogusNode(lineFeedNode);
    }
    range.collapse(true);
    range.select();
   } else if(__aspxNetscapeFamily || (__aspxIE && __aspxBrowserMajorVersion > 10)) {
    range.deleteContents();
    lineFeedNode = doc.createElement(lineFeedNodeTagName);
    range.insertNode(lineFeedNode);
    var emptyNode = doc.createTextNode("");
    lineFeedNode.parentNode.insertBefore(emptyNode, lineFeedNode.nextSibling);
    if(__aspxIE && __aspxBrowserMajorVersion > 10)
     range.selectNode(lineFeedNode);
    else
     range.selectNode(emptyNode);
    range.collapse(false);
    if(ASPxHtmlEditorCommands.Enter.IsNeedBogusNode(lineFeedNode))
     ASPxHtmlEditorCommands.Enter.AppendBogusNode(lineFeedNode);
    var nativeSelection = win.getSelection();
    if(nativeSelection.rangeCount > 0)
     nativeSelection.removeAllRanges();
    nativeSelection.addRange(range);
   } else if(__aspxOpera) {
    range.deleteContents();
    lineFeedNode = doc.createElement(lineFeedNodeTagName);
    range.insertNode(lineFeedNode);
    var parentElement = selection.GetParentElement();
    if(!ASPxHtmlEditorCommands.Enter.IsBlockNode(parentElement) && ASPxHtmlEditorCommands.Enter.NextNode(lineFeedNode) == null) {
     var savedDisplayStyle = parentElement.style.display;
     parentElement.style.display = "block";
    }
    range = doc.createRange();
    range.selectNode(lineFeedNode);
    range.collapse(false);
    win.getSelection().addRange(range);
    if(_aspxIsExists(savedDisplayStyle))
     parentElement.style.display = savedDisplayStyle;
   } else if(__aspxWebKitFamily) {
    range.deleteContents();
    lineFeedNode = doc.createElement(lineFeedNodeTagName);
    range.insertNode(lineFeedNode);
    range.collapse(false);
    if(ASPxHtmlEditorCommands.Enter.IsNeedBogusNode(lineFeedNode))
     ASPxHtmlEditorCommands.Enter.AppendBogusNode(lineFeedNode);
    selection = win.getSelection();
    selection.setBaseAndExtent(range.startContainer, range.startOffset, range.endContainer, range.endOffset);
   }
   ASPxHtmlEditorCommands.Enter.RemoveBogusNodes(doc.body);
   if(!__aspxIE) {
    var elementToView = lineFeedNode.nextSibling ? lineFeedNode.nextSibling : lineFeedNode;
    this.ScrollToElement(elementToView, doc);
   }
  } else if(htmlEditor.enterMode == ASPxHtmlEditorEnterMode.P) {
   var bookmark = selection.GetExtendedBookmark();
   if(__aspxIE && selection.IsControl()) {
    this.ReplaceWithNewLine(doc.getElementById(bookmark.controlElementID), "P");
    return true;
   }
   var startMarkerNode = doc.getElementById(bookmark.startMarkerID);
   var endMarkerNode = doc.getElementById(bookmark.endMarkerID);
   this.TryMoveBookmarkFromParent(startMarkerNode);
   var firstSplitBlockItem = this.GetSplitBlockItem("P", startMarkerNode, true);
   var lastSplitBlockItem = this.GetSplitBlockItem("P", endMarkerNode, false);
   var firstContainer = firstSplitBlockItem.block,
    firstLimitContainer = firstSplitBlockItem.blockLimit,
    lastContainer = lastSplitBlockItem.block,
    lastLimitContainer = lastSplitBlockItem.blockLimit;
   var elements = firstSplitBlockItem.elements.concat(lastSplitBlockItem.elements);
   if(!__aspxIE) {
    var paragraphElement = elements[elements.length-1];
    var deleteBrElement = paragraphElement.childNodes.length > 1;
    if(!__aspxWebKitFamily && deleteBrElement) {
     var node = paragraphElement.childNodes[1];
     deleteBrElement = (node.nodeName != "BR" && node.nextSibling) || node.nodeName == "#text";
    }
   }
   if(firstContainer && firstContainer == lastContainer) {
    var container = firstContainer;
    for(var i = 0; i < elements.length; i++) {
     if(i == 0)
      container.parentNode.replaceChild(elements[i], container);
     else
      container.parentNode.insertBefore(elements[i], container.nextSibling);
     container = elements[i];
    }
   }
   else if(firstLimitContainer && firstLimitContainer == lastLimitContainer) {
    _aspxSetInnerHtml(firstLimitContainer, "");
    for(var i = 0; i < elements.length; i++)
     firstLimitContainer.appendChild(elements[i]);
   }
   else {
    selection.RemoveExtendedBookmark(bookmark);
    this.passCommandToBrowser = true;
    return false;
   }
   var startSplitNode = doc.getElementById(bookmark.startMarkerID).parentNode;
   var endSplitNode = doc.getElementById(bookmark.endMarkerID).parentNode;
   selection.RemoveExtendedBookmark(bookmark);
   startSplitNode = this.EnsureEmptySymbolIs(startSplitNode);
   endSplitNode = this.EnsureEmptySymbolIs(endSplitNode);
   var selectElem = endSplitNode;
   var range = selection.GetRange();
   if(__aspxIE && __aspxBrowserMajorVersion < 11) {
    if(__aspxBrowserVersion == 9) {
     var fakeElem = doc.createElement("P");
     selectElem.insertBefore(fakeElem, selectElem.firstChild);
     selectElem = fakeElem;
    }
    range.moveToElementText(selectElem);
   }
   else {
    if(selectElem.hasChildNodes())
     selectElem = selectElem.firstChild;
    selection.SelectElement(selectElem, htmlEditor);
    range = selection.GetRange();
   }
   var isStartSelection = !(__aspxIE && __aspxBrowserVersion == 9);
   range.collapse(isStartSelection);
   if(__aspxIE && __aspxBrowserMajorVersion < 11) {
    range.select();
    if (__aspxBrowserVersion == 9)
     selectElem.parentNode.removeChild(selectElem);
   } else if(__aspxNetscapeFamily || (__aspxIE && __aspxBrowserMajorVersion > 10)) {
    var emptyNode = doc.createTextNode("");
    selectElem.parentNode.insertBefore(emptyNode, selectElem);
    range.selectNode(emptyNode);
    range.collapse(false);
    var nativeSelection = win.getSelection();
    if(nativeSelection.rangeCount > 0)
     nativeSelection.removeAllRanges();
    nativeSelection.addRange(range);
    if(deleteBrElement && selectElem.nodeName == "BR" && selectElem.parentNode && selectElem.parentNode.nodeName == startSplitNode.nodeName)
     endSplitNode.parentNode.removeChild(endSplitNode);
   } else if(__aspxOpera) {
    doc.body.focus();
    range = doc.createRange();
    range.selectNode(selectElem);
    range.collapse(true);
    var nativeSelection = win.getSelection();
    if(__aspxBrowserVersion >= 10.5 && nativeSelection.rangeCount > 0)
     nativeSelection.removeAllRanges();
    nativeSelection.addRange(range);
    var parentNode = selectElem.parentNode;
    if(selectElem.innerHTML == "<br>" && parentNode && parentNode.previousSibling && parentNode.previousSibling.nodeName != selectElem.nodeName)
     selectElem.parentNode.removeChild(selectElem);
    else if(deleteBrElement && selectElem.nodeName == "BR" && selectElem.parentNode.nodeName == startSplitNode.nodeName)
     endSplitNode.parentNode.removeChild(endSplitNode);
   } else if(__aspxWebKitFamily) {
    winSelection = win.getSelection();
    if(deleteBrElement && startSplitNode.tagName == winSelection.focusNode.tagName && winSelection.focusNode.innerHTML == "<br>" && startSplitNode.innerHTML != "<br>")
     _aspxRemoveElement(winSelection.focusNode); 
    winSelection.setBaseAndExtent(range.startContainer, range.startOffset, range.endContainer, range.endOffset);
   }
   if(!__aspxIE)
    this.ScrollToElement(endSplitNode.firstChild, doc);
  }
  return true;
 },
 TryMoveToParagraphFromLI: function(startParentLI, endParentLI, doc, selection, htmlEditor) {
  if(__aspxWebKitFamily && startParentLI == endParentLI) {
   if(startParentLI.childNodes.length == 1 && startParentLI.firstChild.tagName == "BR" && startParentLI.parentNode.lastChild == endParentLI) {
    var newNode = doc.createElement("P");
    _aspxInsertElementAfter(newNode, startParentLI.parentNode);
    newNode.innerHTML = "<br />";
    startParentLI.parentNode.removeChild(startParentLI);
    selection.SelectElement(newNode.firstChild, htmlEditor);
    return true;
   }
  }
 },
 TryMoveBookmarkFromParent: function (bm) {
  var parent = bm.parentNode;
  parent.normalize();
  if (parent.tagName == "A" && parent.firstChild == bm) {
   parent.parentNode.insertBefore(bm, parent);
   this.TryMoveBookmarkFromParent(bm);
  }
 },
 NodeOrOneOfItsParentsIsPre: function(node) {
  while(node && node.tagName != "BODY") {
   if(node.tagName == "PRE")
    return true;
   else
    node = node.parentNode;
  }
  return false;
 },
 EnsureEmptySymbolIs: function(node) {
  if(__aspxIE && __aspxBrowserMajorVersion < 11 && node.nodeType == 1 && _aspxTrim(node.innerHTML) == "") {
   node.innerHTML = "&nbsp;";
   node.innerText = "";
  }
  else if(node.nodeType == 3 && _aspxTrim(node.nodeValue) == "")
   node.nodeValue = "\xA0";
  else if(!node.hasChildNodes()) {
   node.appendChild(node.ownerDocument.createElement("BR"));
  }
  return node;
 },
 GetSplitInfo: function(splitNode) {
  var block = null;
  var blockLimit = null;
  var elements = [];
  var node = splitNode;
  while(node && node.tagName != "BODY") {
   elements.push(node);
   node = node.parentNode;
   if(this.IsPathBlockElement(node)) {
    block = node;
    break;
   }
   if(this.IsPathBlockLimitElement(node)) {
    blockLimit = node;
    break;
   }
  }
  elements = elements.reverse();
  return {
   block: block,
   blockLimit: blockLimit,
   elements: elements
  };
 },
 GetSplitBlockItem: function(blockTag, splitNode, isFirst) {
  var doc = _aspxGetElementDocument(splitNode);
  var splitInfo = this.GetSplitInfo(splitNode);
  var elements = splitInfo.elements;
  if(splitInfo.blockLimit && splitInfo.blockLimit.tagName == "DIV") {
   blockTag = "DIV";
   splitInfo.block = splitInfo.blockLimit;
  }
  var srcNode = null;
  var destNode = splitInfo.block ? splitInfo.block.cloneNode(false) : doc.createElement(blockTag);
  var splitBlock = destNode;
  for(var i = 0; i < elements.length; i++) {
   srcNode = elements[i];
   destNode = destNode.appendChild(srcNode.cloneNode(false));
   while(srcNode = isFirst ? srcNode.previousSibling : srcNode.nextSibling) {
    var parent = destNode.parentNode;
    if(isFirst)
     parent.insertBefore(srcNode.cloneNode(true), parent.firstChild);
    else
     parent.appendChild(srcNode.cloneNode(true));
   }
  }
  return {
   block: splitInfo.block,
   blockLimit: splitInfo.blockLimit,
   elements: this.ValidateElements(splitBlock, isFirst)
  };
 },
 IsPathBlockElement: function(element) {
  return element.nodeType == 1
   && __aspxHEPathBlockElements[element.tagName.toLowerCase()];
 },
 IsPathBlockLimitElement: function(element) {
  return element.nodeType == 1
   && __aspxHEPathBlockLimitElements[element.tagName.toLowerCase()];
 },
 IsValidBlock: function(parentBlock, childBlock) {
  if(this.IsPathBlockElement(parentBlock) && 
   (this.IsPathBlockElement(childBlock) || this.IsPathBlockLimitElement(childBlock))) {
   return false;
  }
  return true;
 },
 ValidateElements: function(splitBlock, isFirst) {
  var elements = [];
  var isNeedToWrap = true;
  if(splitBlock.hasChildNodes()) {
   var count = splitBlock.childNodes.length;
   for(var i = isFirst ? count-1 : 0; isFirst ? i >= 0 : i < count; isFirst ? i-- : i++ ) {
    var node = splitBlock.childNodes[i].cloneNode(true);
    if(!this.IsValidBlock(splitBlock, node) || !isNeedToWrap) {
     isNeedToWrap = false;
     elements.push(node);
    }
    else {
     if(elements.length == 0)
      elements.push(splitBlock.cloneNode(false));
     if(isFirst)
      elements[0].insertBefore(node, elements[0].firstChild);
     else
      elements[0].appendChild(node);
    }
   }
  }
  if(isFirst)
   elements = elements.reverse();
  return elements;
 },
 ScrollToElement: function(element, doc) {
  var elementPosY = 0;
  var elementHeight = 0;
  var parentNode = element.parentNode;
  var fakeElem = doc.createElement("DIV");
  fakeElem.innerHTML = "&nbsp;";
  parentNode.insertBefore(fakeElem, element);
  elementPosY = fakeElem.offsetTop;
  elementHeight = fakeElem.offsetHeight;
  parentNode.removeChild(fakeElem);
  var newScrollTop = (elementPosY + elementHeight) - doc.body.clientHeight;
  if(newScrollTop > doc.body.scrollTop)
   doc.body.scrollTop = Math.max(newScrollTop, 0);
 }
});
ASPxHtmlEditorCommands.Enter.NextNode = function(node) {
 var next = node.nextSibling;
 if(next && next.nodeType == 3 && next.nodeValue == "")
  next = ASPxHtmlEditorCommands.Enter.NextNode(next);
 return next;
};
ASPxHtmlEditorCommands.Enter.PreviousNode = function(node) {
 var prev = node.previousSibling;
 if(prev && prev.nodeType == 3 && prev.nodeValue == "")
  prev = ASPxHtmlEditorCommands.Enter.PreviousNode(prev);
 return prev;
};
ASPxHtmlEditorCommands.Enter.IsBogusNode = function(node) {
 if(node && node.nodeType == 3) {
  if(__aspxIE && node.parentNode && node.nodeValue == __aspxHEBogusSymbol)
   return true;
  else if(__aspxNetscapeFamily || __aspxWebKitFamily) {
   if(node.nodeValue == __aspxHEBogusSymbol)
    return true;
  }
 }
 return false;
};
ASPxHtmlEditorCommands.Enter.IsBlockNode = function(node) {
 if(node && node.nodeType == 1) {
  if(__aspxHEBlockElements[node.nodeName.toLowerCase()]) {
   if(node.style.display != "inline")
    return true;
  }
  else if(node.style.display == "block")
   return true;
 }
 return false;
};
ASPxHtmlEditorCommands.Enter.IsNeedBogusNode = function(node) {
 if(__aspxIE && __aspxBrowserVersion == 6) 
  return false;
 var prev = ASPxHtmlEditorCommands.Enter.PreviousNode(node);
 var next = ASPxHtmlEditorCommands.Enter.NextNode(node);
 if(__aspxNetscapeFamily && prev && prev.nodeName == "BR") {
  if(_aspxGetAttribute(prev, "type") == "_moz")
   return false;
 }
 if(!ASPxHtmlEditorCommands.Enter.IsBlockNode(prev) && (ASPxHtmlEditorCommands.Enter.IsBlockNode(next) || next == null))
  return true;
 return false;
};
ASPxHtmlEditorCommands.Enter.AppendBogusNode = function(node) {
 var doc = _aspxGetElementDocument(node);
 return node.parentNode.insertBefore(doc.createTextNode(__aspxHEBogusSymbol), node.nextSibling);
};
ASPxHtmlEditorCommands.Enter.RemoveBogusNodes = function(node) {
 var textNodes = [ ];
 _aspxGetChildTextNodeCollection(node, textNodes);
 for(var i = textNodes.length - 1; i > 0; i--)
  if(ASPxHtmlEditorCommands.Enter.IsBogusNode(textNodes[i]) && !ASPxHtmlEditorCommands.Enter.IsNeedBogusNode(textNodes[i]))
   textNodes[i].parentNode.removeChild(textNodes[i]);
};
ASPxHtmlEditorCommands.Delete = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  var startContainer = editor.GetSelection().clientSelection.GetStartContainer();
  var endContainer = editor.GetSelection().clientSelection.GetEndContainer();
  var startListItem = _aspxGetParentByTagName(startContainer, "LI");
  var endListItem = _aspxGetParentByTagName(endContainer, "LI");
  var isSuccessfully = true;
  if(endListItem && startListItem != endListItem)
   ASPxHtmlEditorCommands.DeleteSelectedListItems(editor, startListItem, endListItem)
  else {
   ASPxHtmlEditorCommands.CorrectSelectionForDeleteCommand(editor);
   var designViewIFrameDocument = editor.GetDesignViewDocument();
     isSuccessfully = designViewIFrameDocument.execCommand(this.commandID, false, null);
     if (__aspxOpera) { 
    designViewIFrameDocument.contentEditable = true;
    designViewIFrameDocument.body.focus();
   }
  }
  return isSuccessfully;
 }
});
ASPxHtmlEditorCommands.DeleteWithoutSelection = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  ASPxHtmlEditorCommands.CorrectSelectionForDeleteCommand(editor);
  if(__aspxNetscapeFamily) {
   var IFrameBody = editor.GetDesignViewDocument().body;
   window.setTimeout(function() {
    ASPxHtmlEditorCommands.Enter.RemoveBogusNodes(IFrameBody);
    }, 0);
  }
  return true;
 },
 IsImmediateExecution: function() {
  return true;
 }
});
ASPxHtmlEditorCommands.CorrectSelectionForDeleteCommand = function(editor) {
 if(__aspxNetscapeFamily) { 
  var clientSelection = ASPxClientHtmlEditorSelection.Create(editor);
  var parent = clientSelection.GetParentElement();
  if(parent.tagName != "A")
   return;
  var isNeedDeleteParentNode = false;
  var selectionText = clientSelection.GetText();
  if(selectionText != "") {
   var parentInnerText = _aspxGetInnerText(parent);
   isNeedDeleteParentNode = selectionText == parentInnerText;
  }
  else {
   var bm = clientSelection.GetExtendedBookmark();
   var startBmElement = _aspxGetElementByIdInDocument(clientSelection.contentDocument, bm.startMarkerID);
   var endBmElement = _aspxGetElementByIdInDocument(clientSelection.contentDocument, bm.endMarkerID);
   var parts = ASPxClientHtmlProcessingUtils.SplitNode(parent, [endBmElement, startBmElement]);
   var prevSymbolsCount = _aspxGetInnerText(parts[0]).length,
    nextSymbolsCount = _aspxGetInnerText(parts[parts.length - 1]).length;
   var isBackSpaceKey = editor.keyDownInfo.isBackSpaceKey;
   if(isBackSpaceKey)
    isNeedDeleteParentNode = prevSymbolsCount < 2 && nextSymbolsCount == 0;
   else
    isNeedDeleteParentNode = nextSymbolsCount < 2 && prevSymbolsCount == 0;
   clientSelection.SelectExtendedBookmark(bm);
  }
  if(isNeedDeleteParentNode && parent.tagName != "BODY")
   clientSelection.SelectElement(parent);
 }
};
ASPxHtmlEditorCommands.DeleteSelectedListItems = function(editor, startListItem, endListItem) {
 var elements = editor.GetSelection().GetElements(true);
 var skipFirstListItem = !!startListItem;
 var firstElement = elements[0];
 if(firstElement.nodeName == "LI")
  firstElement = firstElement.firstChild;
 var lastElement = elements[elements.length - 1];
 if(lastElement.nodeName == "LI")
  lastElement = lastElement.lastChild;
 var selection = editor.GetSelection();
 var doc = editor.GetDesignViewDocument();
 selectionBookmarks = { "startMarkerID": "sbm", "endMarkerID": "ebm"};
 var sbm = doc.createElement("span");
 sbm.id = "sbm";
 var ebm = doc.createElement("span");
 ebm.id = "ebm";
 firstElement.parentNode.insertBefore(ebm, firstElement);
 firstElement.parentNode.insertBefore(sbm, firstElement);
 _aspxRemoveElement(firstElement);
 var getNextSibling = function(element) { return element.nextSibling; };
 var getPreviousSibling = function(element) { return element.previousSibling; };
 var getSibling = function(element, func) { 
  element = func(element);
  while(element && element.nodeType != 1 && !element.nodeValue)
   element = func(element);
  return element;
 };
 var nextSibling = getSibling(lastElement, getNextSibling);
 if(nextSibling && nextSibling.nodeName != "LI" && nextSibling.nodeName != "UL" && nextSibling.nodeName != "OL") {
  for(var nextElement = nextSibling; nextElement; nextElement = nextElement.nextSibling) {
   if(nextElement.nodeName != "LI" && nextElement.nodeName != "UL" && nextElement.nodeName != "OL")
    _aspxInsertElementAfter(nextElement.cloneNode(true), sbm)
   else break;
  }
 }
 else { 
  nextSibling = getSibling(sbm, getNextSibling);
  if(!nextSibling || nextSibling.nodeName == "LI" || nextSibling.nodeName == "UL" || nextSibling.nodeName == "OL")
   _aspxInsertElementAfter(doc.createTextNode("\xA0"), sbm);
 }
 if(!startListItem) {
  for(var i = 1; i < elements.length - 1; i++) {
   var listItem = _aspxGetParentByTagName(elements[i], "LI");
   if(!listItem) 
    _aspxRemoveElement(elements[i]);
   else {
    startListItem = listItem;
    break;
   }
  }
 }
 var parentList = ASPxHtmlEditorCommands.Browser.Indent.GetMainParentList(endListItem);
 var listItemArray = ASPxHtmlEditorCommands.Browser.Indent.GetListItemArray(parentList, 0 ,null, null, selectionBookmarks);
 if(lastElement.nodeName == "UL" || lastElement.nodeName == "OL")
  endListItem = listItemArray[listItemArray.length - 1].node;
 var startListItemIndex, endListItemIndex;
 for(var i = 0, listItem; listItem = listItemArray[i]; i++) {
  if(startListItem == listItem.node)
   startListItemIndex = skipFirstListItem ? i + 1 : i;
  else if(endListItem == listItem.node) {
   endListItemIndex = i;
   break;
  }
 }
 ASPxHtmlEditorCommands.Browser.InsertList.RemoveListItems(startListItemIndex === undefined ? endListItemIndex : startListItemIndex, endListItemIndex, listItemArray);
 var list = ASPxHtmlEditorCommands.Browser.Indent.GenerateListByItemArray(listItemArray);
 if(list)
  parentList.parentNode.insertBefore(list, parentList);
 _aspxRemoveElement(parentList);
 selection.clientSelection.SelectExtendedBookmark(selectionBookmarks);
};
ASPxHtmlEditorCommands.Undo = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  editor.SetFocus();
  var ret = editor.Undo();
  return ret;
 },
 IsReversable: function() {
  return false;
 },
 IsLocked: function(editor) {
  return !editor.IsUndoAvailable();
 }
});
ASPxHtmlEditorCommands.Redo = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  editor.SetFocus();
  var ret = editor.Redo();
  return ret;
 },
 IsReversable: function() {
  return false;
 },
 IsLocked: function(editor) {
  return !editor.IsRedoAvailable();
 }
});
ASPxHtmlEditorCommands.CheckSpelling  = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  return editor.CheckSpelling();
 },
 IsLocked: function(editor) {
  return aspxIsEmptyHtml(editor.GetHtmlInternal());
 }
});
ASPxHtmlEditorCommands.CheckSpellingCore = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  editor.SetHtmlInternal(cmdValue);
  return true;
 }
});
ASPxHtmlEditorCommands.Print  = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  return editor.Print();
 },
 IsLocked: function(editor) {
  return aspxIsEmptyHtml(editor.GetHtmlInternal());
 },
 IsReversable: function() {
  return false;
 }
});
ASPxHtmlEditorCommands.Fullscreen = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  editor.SetFullscreenMode();
  return true;
 },
 IsLocked: function(editor) {
  return false;
 },
 IsReversable: function() {
  return false;
 },
 GetState: function(editor, selection, selectedElements) {
  return editor.isFullscreenMode;
 }
});
function aspxIsEmptyHtml(html){
 var html = _aspxTrim(html);
 return html == "" || html == "&nbsp;" || html == "<P>&nbsp;</P>";
}
ASPxHtmlEditorCommands.Browser.InsertImage = _aspxCreateClass(ASPxHtmlEditorCommands.Browser.Command, {
 Execute: function(cmdValue, editor) {
  var newImageElement = this.InsertImage(cmdValue.src, editor);
  ASPxHtmlEditorCommands.ChangeImage.SetImageProperties(newImageElement, cmdValue);
  if(__aspxIE)
   ASPxClientHtmlEditor.RestoreUrlsInDOM(editor.GetDesignViewDocument());
  return true;
 },
 InsertImage: function(source, editor) {
  var markerID = ASPxClientSelection.CreateUniqueID();
  var htmlText = '<img src="' + source + '" id="' + markerID + '" />';
  ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEHTML_COMMAND].Execute(htmlText, editor);
  var imageElement = _aspxGetElementByIdInDocument(editor.GetDesignViewDocument(), markerID);
  _aspxRemoveAttribute(imageElement, "id");
  return imageElement;
 }
});
ASPxHtmlEditorCommands.ChangeImage = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  ASPxHtmlEditorCommands.ChangeImage.SetImageProperties(cmdValue.imageElement, cmdValue);
  return true;
 }
});
ASPxHtmlEditorCommands.ChangeImage.GetUnitAttributeValue = function(element, attrName) {
 var attrValue = _aspxGetAttribute(element, attrName);
 if(attrValue)
  attrValue = attrValue.replace("px", "");
 return attrValue;
};
ASPxHtmlEditorCommands.ChangeImage.GetImageProperties = function(imageElement) {
 var GetUnitAttributeValue = ASPxHtmlEditorCommands.ChangeImage.GetUnitAttributeValue;
 var imageInfoObject = {
  isCustomSize: false,
  src: __aspxIE ? imageElement.getAttribute("src", 2) : _aspxGetAttribute(imageElement, "src"),
  width: imageElement.width,
  height: imageElement.height,
  align: "",
  alt: "",
  useFloat: false,
  alt: _aspxGetAttribute(imageElement, "alt"),
  cssClass: imageElement.className,
  borderWidth: GetUnitAttributeValue(imageElement.style, "border-width"),
  borderColor: _aspxColorToHexadecimal(_aspxGetAttribute(imageElement.style, "border-color")),
  marginTop: GetUnitAttributeValue(imageElement.style, "margin-top"),
  marginLeft: GetUnitAttributeValue(imageElement.style, "margin-left"),
  marginRight: GetUnitAttributeValue(imageElement.style, "margin-right"),
  marginBottom: GetUnitAttributeValue(imageElement.style, "margin-bottom")
 };
 imageInfoObject.isCustomSize = ASPxHtmlEditorCommands.ChangeImage.IsExistImageAttribute(imageElement, "width") ||
           ASPxHtmlEditorCommands.ChangeImage.IsExistImageAttribute(imageElement, "height");
 var parentNode = imageElement.parentNode;
 if (parentNode.childNodes.length == 1 && parentNode.tagName != "BODY") {
  imageInfoObject.align = parentNode.style.textAlign;
  if (!imageInfoObject.align)
   imageInfoObject.align = parentNode.align;
 }
 if (!imageInfoObject.align) {
  if (_aspxIsExistsAttribute(imageElement, "align"))
   imageInfoObject.align = _aspxGetAttribute(imageElement, "align");
  else {
   if (__aspxIE && _aspxIsExists(imageElement.style.styleFloat)) {
    imageInfoObject.align = imageElement.style.styleFloat;
    imageInfoObject.useFloat = true;
   }
   if (!__aspxIE && _aspxIsExists(imageElement.style.cssFloat)) {
    imageInfoObject.align = imageElement.style.cssFloat;
    imageInfoObject.useFloat = true;
   }
  }
 }
 return imageInfoObject;
};
ASPxHtmlEditorCommands.ChangeImage.IsExistImageAttribute = function(image, attrName) {
 var styleAttr = _aspxGetAttribute(image.style, attrName);
 return ((styleAttr != "") && (styleAttr != null)) ||
     (!__aspxNetscapeFamily && (image.outerHTML.toLowerCase().indexOf(attrName + "=") > -1));
};
ASPxHtmlEditorCommands.ChangeImage.SetElementProperty = function(element, propName, propValue) {
 if(propValue != null)
  _aspxSetAttribute(element, propName, propValue);
 else
  _aspxRemoveAttribute(element, propName);
};
ASPxHtmlEditorCommands.ChangeImage.SetImageHorizontalAlign = function(imageElement, align, useFloat) {
 var documentObj = _aspxGetElementDocument(imageElement); 
 var sourceId = imageElement.id;
 imageElement.id = __aspxHEMarkID;
 var parentNode = imageElement.parentNode;
 var wrapElem = null;
 if(parentNode.childNodes.length == 1 && parentNode.tagName == "DIV")
  wrapElem = parentNode;
 _aspxRemoveAttribute(imageElement, "align");
 _aspxSetElementFloat(imageElement, "");
 var alignValue = (align) ? align.toLowerCase() : null;
 if(!alignValue || alignValue == "left" || alignValue == "right") {
  if(wrapElem != null)
   _aspxRemoveOuterTags(wrapElem);
  imageElement = _aspxGetElementByIdInDocument(documentObj, __aspxHEMarkID);
  if(alignValue) {
   if(useFloat) {
    if(__aspxIE)
     imageElement.style.styleFloat = align;
    else
     imageElement.style.cssFloat = align;
   }
   else
    _aspxSetAttribute(imageElement, "align", align);
  }
 }
 else { 
  if(wrapElem == null)
   wrapElem = _aspxWrapElementInNewElement(imageElement, "DIV");
  wrapElem.style.textAlign = "center";
  imageElement = _aspxGetElementByIdInDocument(documentObj, __aspxHEMarkID);
 }
 sourceId != "" ? imageElement.id = sourceId : _aspxRemoveAttribute(imageElement, "id");
};
ASPxHtmlEditorCommands.ChangeImage.SetImageProperties = function(imageElement, params) {
 var src = params.src,
  cssClass = params.cssClass,
  width = params.width,
  height = params.height,
  align = params.align,
  alt = params.alt,
  useFloat = params.useFloat,
  borderWidth = params.borderWidth,
  borderColor = params.borderColor,
  marginTop = params.marginTop,
  marginLeft = params.marginLeft,
  marginRight = params.marginRight,
  marginBottom = params.marginBottom;
 var SetElementProperty = ASPxHtmlEditorCommands.ChangeImage.SetElementProperty;
 if(src)
  _aspxSetAttribute(imageElement, "src", src);
 SetElementProperty(imageElement, "class", cssClass);
 SetElementProperty(imageElement, "alt", alt);
 SetElementProperty(imageElement.style, "width", width);
 if(!width && width != null)
  _aspxRemoveAttribute(imageElement, "width");
 SetElementProperty(imageElement.style, "height", height);
 if(!height && height != null)
  _aspxRemoveAttribute(imageElement, "height");
 SetElementProperty(imageElement.style, "border-width", borderWidth);
 if(__aspxIE && borderWidth == null)
  imageElement.style["border-width"] = "";
 SetElementProperty(imageElement.style, "border-color", borderColor);
 if(borderWidth || borderColor) {
  var borderStyle = _aspxGetAttribute(imageElement.style, "border-style");
  if(!borderStyle || borderStyle == "none")
   _aspxSetAttribute(imageElement.style, "border-style", "solid");
 }
 else if(borderWidth == null) {
  if(__aspxIE)
   imageElement.style["border-style"] = "";
  else
   _aspxRemoveAttribute(imageElement.style, "border-style");
 }
 SetElementProperty(imageElement.style, "margin-top", marginTop);
 SetElementProperty(imageElement.style, "margin-left", marginLeft);
 SetElementProperty(imageElement.style, "margin-right", marginRight);
 SetElementProperty(imageElement.style, "margin-bottom", marginBottom);
 ASPxHtmlEditorCommands.ChangeImage.SetImageHorizontalAlign(imageElement, align, useFloat);
 if(imageElement) 
  return imageElement;
};
ASPxHtmlEditorCommands.InsertLink = _aspxCreateClass(ASPxHtmlEditorCommands.SelectionManipulationCommand, {
 Execute: function(cmdValue, editor) {
  ASPxHtmlEditorCommands.SelectionManipulationCommand.prototype.Execute.apply(this, arguments);
  this.ValidateCommandValue(cmdValue);
  var selection = editor.GetSelection();
  this.parentElement = selection.GetSelectedElement();
  this.text = ASPxHtmlEditorCommands.InsertLink.PrepareLinkText(cmdValue.text);
  this.url = cmdValue.url;
  this.target = cmdValue.target;
  this.title = cmdValue.title;
  var link = _aspxGetParentByTagName(this.parentElement, "A");
  if(link)
   this.SetLinkProperties(link, this.url, this.target, this.title, this.text);
  else if(this.parentElement.tagName == "IMG")
   this.WrapElementInternal(this.parentElement, this.CreateLink());
  else if(selection.GetHtml()) {
   var elements = selection.GetElements();
   if(elements.length) {
    var link = this.ApplyLinkFormat(elements, this.CreateLink());
    selection.clientSelection.SelectElement(link, false);
    if (__aspxOpera)
     editor.GetDesignViewDocument().body.focus();
   }
   else
    return this.InsertLinkAtCursor(editor);
  }
  else
   return this.InsertLinkAtCursor(editor);
  return true;
 },
 InsertLinkAtCursor: function(editor) {
  var htmlText = "<a href=\"" + this.url + "\"";
  if (this.title)
   htmlText = this.AddAttributeStringToHtml(htmlText, "title", this.title);
  if (this.target)
   htmlText = this.AddAttributeStringToHtml(htmlText, "target", this.target);
  htmlText += ">" + ASPxHtmlEditorCommands.InsertLink.PrepareLinkText(this.text) + "</a>";
  return ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEHTML_COMMAND].Execute(htmlText, editor);
 },
 CreateLink: function() {
  var link = this.parentElement.ownerDocument.createElement('A');
  if (__aspxWebKitFamily)
   link.href = "#";
  return link;
 },
 ApplyLinkFormat: function(elements, link) {
  var lastLink;
  for(var i = 0, el; el = elements[i]; i++) {
   if(el.tagName == "A" && el.href != this.url) {
    this.SetLinkProperties(el, this.url, this.target, this.title);
    this.newElements.push(el);
    lastLink = el;
   }
   else if(_aspxGetParentByTagName(el, "A")) {
    var predicate = function(target) { return target.tagName != "A"; };
    var nnElement = this.SeparateParentByPredicate(el, predicate);
    this.SetLinkProperties(nnElement, this.url, this.target, this.title);
    this.newElements.push(nnElement);
    lastLink = nnElement;
   }
   else if(el.nodeType == 3 || el.tagName == "IMG")
    lastLink = this.WrapElementInternal(el, link.cloneNode(false));
   else
    lastLink = this.ApplyLinkFormat(el.childNodes, link);
  }
  return lastLink;
 },
 WrapElementInternal: function(el, wrapper) {
  this.SetLinkProperties(wrapper, this.url, this.target, this.title);
  var link = ASPxHtmlEditorCommands.SelectionManipulationCommand.prototype.WrapElementInternal.apply(this, arguments);
  if(this.text)
   link.innerHTML = this.text;
  return link;
 },
 CanMerge: function(el1, el2) {
  return el1.tagName == el2.tagName && el1.className == el2.className && el1.href == el2.href;
 },
 ValidateCommandValue: function(cmdValue) {
  cmdValue.url = this.ReplaceDoubleQuotesWithSingleQuotes(cmdValue.url);
  cmdValue.title = this.ReplaceDoubleQuotesWithSingleQuotes(cmdValue.title);
 },
 ReplaceDoubleQuotesWithSingleQuotes: function(str) {
  return str ? str.replace(new RegExp("\"", "g"), "'") : str;
 },
 AddAttributeStringToHtml: function(html, attrName, attrValue) {
  return html + " " + attrName + "=\"" + attrValue + "\"";
 },
 SetLinkProperties: function(linkElement, url, target, title, text) {
  _aspxSetOrRemoveAttribute(linkElement, "href", url);
  _aspxSetOrRemoveAttribute(linkElement, "target", target);
  _aspxSetOrRemoveAttribute(linkElement, "title", title);
  if(text)
   linkElement.innerHTML = text;
 }
});
ASPxHtmlEditorCommands.InsertLink.PrepareLinkText = function(text) {
 return text.replace("<", "&lt;").replace(">", "&gt;");
};
ASPxHtmlEditorCommands.DialogCommand = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  var dialog = ASPxHtmlEditorDialogList[this.commandID];
  if (dialog != null)
   dialog.Execute(editor);
  else
   alert('Dialog is not found');
  return true;
 },
 IsHtmlChangeable: function() {
  return false;
 },
 GetState: function(editor, selection, selectedElements) {
  return false;
 },
 IsLocked: function(editor) {
  return false;
 }
});
ASPxHtmlEditorCommands.Dialogs = {
 PasteFromWord: _aspxCreateClass(ASPxHtmlEditorCommands.DialogCommand, {
  Execute: function(cmdValue, editor) {
   if(!__aspxWebKitTouchUI)
    ASPxHtmlEditorCommands.DialogCommand.prototype.Execute.call(this, cmdValue, editor);
   else
    alert(ASPxHtmlEditorCommands.Browser.Clipboard.NotAllowedMessage[ASPxClientCommandConsts.PASTE_COMMAND]);
  },
  IsLocked: function(editor) {
   if (__aspxWebKitFamily) return false;
   try {
    return !(__aspxIE || editor.GetDesignViewDocument().queryCommandEnabled(ASPxClientCommandConsts.PASTE_COMMAND));
   }
   catch(e) {}
   return true;
  }
 }),
 ChangeImage: _aspxCreateClass(ASPxHtmlEditorCommands.DialogCommand, {
  IsLocked: function(editor) {
   return !InsertImageDialog.prototype.GetSelectedImage(editor);
  }
 }),
 ChangeLink: _aspxCreateClass(ASPxHtmlEditorCommands.DialogCommand, {
  IsLocked: function(editor) {
   return !InsertLinkDialog.prototype.IsLinkSelected(editor);
  }
 }),
 TableCellProperties: _aspxCreateClass(ASPxHtmlEditorCommands.DialogCommand, {
  IsLocked: function(editor) {
   return !ASPxHtmlEditorCommands.Tables.Cell.IsSelected(editor);
  }
 }),
 ChangeTable: _aspxCreateClass(ASPxHtmlEditorCommands.DialogCommand, {
  IsLocked: function(editor) {
   return !ASPxHtmlEditorCommands.Tables.Table.IsSelected(editor);
  }
 }),
 CustomDialog: _aspxCreateClass(ASPxHtmlEditorCommands.DialogCommand, {
  constructor: function(cmdID) {
   this.constructor.prototype.constructor.call(this, cmdID);
   this.dialogs = {};
  },
  Execute: function(cmdValue, editor) {
   var customDialogName = "cd_" + cmdValue;
   if(!this.dialogs[customDialogName])
    this.dialogs[customDialogName] = new ASPxCustomDialog(customDialogName, cmdValue);
   var dialog = this.dialogs[customDialogName];
   dialog.Execute(editor);
   return true;
  },
  DialogNotFound: function(dialogName) {
   delete this.dialogs[dialogName];
  }
 })
};
ASPxHtmlEditorCommands.SaveAs = _aspxCreateClass(ASPxHtmlEditorCommands.Command, {
 Execute: function(cmdValue, editor) {
  editor.Export(cmdValue);
 },
 IsDefaultAction: function(editor) {
  return true; 
 },
 IsImmediateExecution: function() {
  return true;
 },
 IsHtmlChangeable: function() {
  return false;
 },
 IsLocked: function(editor) {
  return false;
 },
 IsReversable: function() {
  return false;
 },
 IsClientCommand: function() {
  return false;
 }
});
ASPxHtmlEditorCommands.Utils = {
 IsInlineTextElement: function(element) {
  var expr = /^(SPAN|B|STRONG|I|EM|U|S|SUP|SUB|FONT)$/i;
  return expr.test(typeof (element) == "object" ? element.tagName : element);
 },
 CanBePlacedInInlineParent: function(element) {
  if(this.IsInlineTextElement(element))
   return true;
  var expr = /^(IMG|A|BR|SMALL|BIG)$/i;
  return expr.test(typeof (element) == "object" ? element.tagName : element);
 },
 FindParent: function(element, comparer) {
  var parent = null;
  while(element && element.tagName != "BODY") {
   element = element.parentNode;
   if(comparer(element))
    parent = element;
   else break;
  }
  return parent;
 },
 IsBlockElement: function(element) {
  return element && element.style && _aspxGetCurrentStyle(element)["display"] != "inline" && element.nodeName != "IMG" || 
  (__aspxHEBlockElements[element.nodeName.toLowerCase()] || __aspxHEPathBlockLimitElements[element.nodeName.toLowerCase()]);
 },
 FindNextBlockElement: function(element) {
  return this.FindElement(element, this.IsBlockElement,
   function(element) {
    return element.nextSibling;
   }.aspxBind(this)
  );
 },
 FindPreviousBlockElement: function(element) {
  return this.FindElement(element, this.IsBlockElement,
   function(element) {
    return element.previousSibling;
   }.aspxBind(this)
  );
 },
 FindElement: function(element, comparer, func) {
  var result;
  for(var el = element; el; el = func(el)) {
   if(comparer(el)) {
    result = el;
    break;
   }
  }
  return result;
 },
 GetBetweenBlocksInlineElements: function(element) {
  var firstElement, lastElement;
  var resultList = [];
  firstElement = this.FindPreviousBlockElement(element);
  lastElement = this.FindNextBlockElement(element);
  firstElement = firstElement ? firstElement.nextSibling : element.parentNode.firstChild;
  lastElement = lastElement ? lastElement.previousSibling : element.parentNode.lastChild;
  for(var el = firstElement; el !== lastElement.nextSibling; el = el.nextSibling)
   resultList.push(el);
  return resultList;
 },
 InsertNewElement: function(doc, selection, nodeId) {
  var tempNode = doc.createElement("SPAN");
  tempNode.id = nodeId;
  selection.InsertHtml(tempNode.outerHTML);
  return _aspxGetElementByIdInDocument(doc, nodeId);
 }
};
var ASPxHtmlEditorCommandList = {};
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.BOLD_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontStyle(ASPxClientCommandConsts.BOLD_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.ITALIC_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontStyle(ASPxClientCommandConsts.ITALIC_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.UNDERLINE_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontStyle(ASPxClientCommandConsts.UNDERLINE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.STRIKETHROUGH_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontStyle(ASPxClientCommandConsts.STRIKETHROUGH_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.JUSTIFYCENTER_COMMAND] = new ASPxHtmlEditorCommands.Browser.Justify(ASPxClientCommandConsts.JUSTIFYCENTER_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.JUSTIFYLEFT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Justify(ASPxClientCommandConsts.JUSTIFYLEFT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.JUSTIFYRIGHT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Justify(ASPxClientCommandConsts.JUSTIFYRIGHT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.JUSTIFYFULL_COMMAND] = new ASPxHtmlEditorCommands.Browser.Justify(ASPxClientCommandConsts.JUSTIFYFULL_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.SUPERSCRIPT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Command(ASPxClientCommandConsts.SUPERSCRIPT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.SUBSCRIPT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Command(ASPxClientCommandConsts.SUBSCRIPT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INDENT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Indent(ASPxClientCommandConsts.INDENT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.OUTDENT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Indent(ASPxClientCommandConsts.OUTDENT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTORDEREDLIST_COMMAND] = new ASPxHtmlEditorCommands.Browser.InsertList(ASPxClientCommandConsts.INSERTORDEREDLIST_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTUNORDEREDLIST_COMMAND] = new ASPxHtmlEditorCommands.Browser.InsertList(ASPxClientCommandConsts.INSERTUNORDEREDLIST_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.SELECT_ALL] = new ASPxHtmlEditorCommands.Browser.SelectAll(ASPxClientCommandConsts.SELECT_ALL);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTE_COMMAND] = new ASPxHtmlEditorCommands.Browser.Clipboard(ASPxClientCommandConsts.PASTE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEFROMWORD_COMMAND] = new ASPxHtmlEditorCommands.PasteFromWord(ASPxClientCommandConsts.PASTEFROMWORD_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CUT_COMMAND] = new ASPxHtmlEditorCommands.Browser.Clipboard(ASPxClientCommandConsts.CUT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.COPY_COMMAND] = new ASPxHtmlEditorCommands.Browser.Clipboard(ASPxClientCommandConsts.COPY_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.KBPASTE_COMMAND] = new ASPxHtmlEditorCommands.KbPaste(ASPxClientCommandConsts.KBPASTE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.KBCUT_COMMAND] = new ASPxHtmlEditorCommands.KbCut(ASPxClientCommandConsts.KBCUT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.KBCOPY_COMMAND] = new ASPxHtmlEditorCommands.KbCopy(ASPxClientCommandConsts.KBCOPY_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.FONTSIZE_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontSize(ASPxClientCommandConsts.FONTSIZE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.FONTNAME_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontName(ASPxClientCommandConsts.FONTNAME_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.FONTCOLOR_COMMAND] = new ASPxHtmlEditorCommands.Browser.FontColor(ASPxClientCommandConsts.FONTCOLOR_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.BACKCOLOR_COMMAND] = new ASPxHtmlEditorCommands.Browser.BgColor(ASPxClientCommandConsts.BACKCOLOR_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.APPLYCSS_COMMAND] = new ASPxHtmlEditorCommands.ApplyCss(ASPxClientCommandConsts.APPLYCSS_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.FORMATBLOCK_COMMAND] = new ASPxHtmlEditorCommands.Browser.FormatBlock(ASPxClientCommandConsts.FORMATBLOCK_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.REMOVEFORMAT_COMMAND] = new ASPxHtmlEditorCommands.Browser.RemoveFormat(ASPxClientCommandConsts.REMOVEFORMAT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.UNDO_COMMAND] = new ASPxHtmlEditorCommands.Undo(ASPxClientCommandConsts.UNDO_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.REDO_COMMAND] = new ASPxHtmlEditorCommands.Redo(ASPxClientCommandConsts.REDO_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.LINEBREAKETYPE_COMMAND] = new ASPxHtmlEditorCommands.LineBreakType(ASPxClientCommandConsts.LINEBREAKETYPE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.NEWPARAGRAPHTYPE_COMMAND] = new ASPxHtmlEditorCommands.NewParagraphType(ASPxClientCommandConsts.NEWPARAGRAPHTYPE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.TEXTTYPE_COMMAND] = new ASPxHtmlEditorCommands.TextType(ASPxClientCommandConsts.TextType_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.RESIZEOBJECT_COMMAND] = new ASPxHtmlEditorCommands.TextType(ASPxClientCommandConsts.RESIZEOBJECT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DRAGDROPOBJECT_COMMAND] = new ASPxHtmlEditorCommands.TextType(ASPxClientCommandConsts.DRAGDROPOBJECT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DROPOBJECTFROMEXTERNAL_COMMAND] = new ASPxHtmlEditorCommands.TextType(ASPxClientCommandConsts.DROPOBJECTFROMEXTERNAL_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DELETE_COMMAND] = new ASPxHtmlEditorCommands.Delete(ASPxClientCommandConsts.DELETE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.KBDELETE_COMMAND] = new ASPxHtmlEditorCommands.DeleteWithoutSelection(ASPxClientCommandConsts.KBDELETE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.ENTER_COMMAND] = new ASPxHtmlEditorCommands.Enter(ASPxClientCommandConsts.ENTER_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEHTML_COMMAND] = new ASPxHtmlEditorCommands.PasteHtml(ASPxClientCommandConsts.PASTEHTML_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTLINK_COMMAND] = new ASPxHtmlEditorCommands.InsertLink(ASPxClientCommandConsts.INSERTLINK_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.UNLINK_COMMAND] = new ASPxHtmlEditorCommands.Browser.Unlink(ASPxClientCommandConsts.UNLINK_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGEIMAGE_COMMAND] = new ASPxHtmlEditorCommands.ChangeImage(ASPxClientCommandConsts.CHANGEIMAGE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTIMAGE_COMMAND] = new ASPxHtmlEditorCommands.Browser.InsertImage(ASPxClientCommandConsts.INSERTIMAGE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHECKSPELLING_COMMAND] = new ASPxHtmlEditorCommands.CheckSpelling(ASPxClientCommandConsts.CHECKSPELLING_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CheckSpellingCore_COMMAND] = new ASPxHtmlEditorCommands.CheckSpellingCore(ASPxClientCommandConsts.CHECKSPELLING_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PRINT_COMMAND] = new ASPxHtmlEditorCommands.Print(ASPxClientCommandConsts.PRINT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.FULLSCREEN_COMMAND] = new ASPxHtmlEditorCommands.Fullscreen(ASPxClientCommandConsts.FULLSCREEN_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTTABLE_COMMAND] = new ASPxHtmlEditorCommands.Tables.Table.Insert(ASPxClientCommandConsts.INSERTTABLE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGETABLE_COMMAND] = new ASPxHtmlEditorCommands.Tables.Table.Change(ASPxClientCommandConsts.CHANGETABLE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DELETETABLE_COMMAND] = new ASPxHtmlEditorCommands.Tables.Table.Delete(ASPxClientCommandConsts.DELETETABLE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTTABLECOLUMNTOLEFT_COMMAND] = new ASPxHtmlEditorCommands.Tables.Column.Insert(ASPxClientCommandConsts.INSERTTABLECOLUMNTOLEFT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTTABLECOLUMNTORIGHT_COMMAND] = new ASPxHtmlEditorCommands.Tables.Column.Insert(ASPxClientCommandConsts.INSERTTABLECOLUMNTORIGHT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGETABLECOLUMN_COMMAND] = new ASPxHtmlEditorCommands.Tables.Column.Change(ASPxClientCommandConsts.CHANGETABLECOLUMN_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DELETETABLECOLUMN_COMMAND] = new ASPxHtmlEditorCommands.Tables.Column.Delete(ASPxClientCommandConsts.DELETETABLECOLUMN_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTTABLEROWBELOW_COMMAND] = new ASPxHtmlEditorCommands.Tables.Row.Insert(ASPxClientCommandConsts.INSERTTABLEROWBELOW_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTTABLEROWABOVE_COMMAND] = new ASPxHtmlEditorCommands.Tables.Row.Insert(ASPxClientCommandConsts.INSERTTABLEROWABOVE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGETABLEROW_COMMAND] = new ASPxHtmlEditorCommands.Tables.Row.Change(ASPxClientCommandConsts.CHANGETABLEROW_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.DELETETABLEROW_COMMAND] = new ASPxHtmlEditorCommands.Tables.Row.Delete(ASPxClientCommandConsts.DELETETABLEROW_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGETABLECELL_COMMAND] = new ASPxHtmlEditorCommands.Tables.Cell.Change(ASPxClientCommandConsts.CHANGETABLECELL_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.SPLITTABLECELLHORIZONTALLY_COMMAND] = new ASPxHtmlEditorCommands.Tables.Cell.SplitHorizontally(ASPxClientCommandConsts.SPLITTABLECELLHORIZONTALLY_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.SPLITTABLECELLVERTICALLY_COMMAND] = new ASPxHtmlEditorCommands.Tables.Cell.SplitVertically(ASPxClientCommandConsts.SPLITTABLECELLVERTICALLY_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.MERGETABLECELLRIGHT_COMMAND] = new ASPxHtmlEditorCommands.Tables.Cell.MergeRight(ASPxClientCommandConsts.MERGETABLECELLRIGHT_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.MERGETABLECELLDOWN_COMMAND] = new ASPxHtmlEditorCommands.Tables.Cell.MergeDown(ASPxClientCommandConsts.MERGETABLECELLDOWN_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.PASTEFROMWORDDIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.PasteFromWord(ASPxClientCommandConsts.PASTEFROMWORDDIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGEIMAGE_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.ChangeImage(ASPxClientCommandConsts.CHANGEIMAGE_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTIMAGE_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.DialogCommand(ASPxClientCommandConsts.INSERTIMAGE_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTLINK_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.DialogCommand(ASPxClientCommandConsts.INSERTLINK_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CHANGELINK_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.ChangeLink(ASPxClientCommandConsts.CHANGELINK_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.TABLEPROPERTIES_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.ChangeTable(ASPxClientCommandConsts.TABLEPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.INSERTTABLE_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.DialogCommand(ASPxClientCommandConsts.INSERTTABLE_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.TABLECELLPROPERTIES_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.TableCellProperties(ASPxClientCommandConsts.TABLECELLPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.TableCellProperties(ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.TABLEROWPROPERTIES_DIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.TableCellProperties(ASPxClientCommandConsts.TABLEROWPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CUSTOMDIALOG_COMMAND] = new ASPxHtmlEditorCommands.Dialogs.CustomDialog(ASPxClientCommandConsts.CUSTOMDIALOG_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.Start_COMMAND] = new ASPxHtmlEditorCommands.Command(ASPxClientCommandConsts.TEXTTYPE_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.SAVESTATEUNDOREDOSTACK_COMMAND] = new ASPxHtmlEditorCommands.Command(ASPxClientCommandConsts.SAVESTATEUNDOREDOSTACK_COMMAND);
ASPxHtmlEditorCommandList[ASPxClientCommandConsts.EXPORT_COMMAND] = new ASPxHtmlEditorCommands.SaveAs(ASPxClientCommandConsts.EXPORT_COMMAND);
var __aspxEmptySelection = "empty";
CommandManager = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
  this.commandIdArray = [ ];
  this.currentCmdIDIndex = -1;
  this.lastRestoreSelection = null;
  this.restoreHtmlArray = [ ];
  this.undoSelectionArray = [ ];
  this.redoSelectionArray = [ ];
  this.ExecuteCommand(ASPxClientCommandConsts.Start_COMMAND, "null", true);
 },
 ExecuteCommand: function(cmdID, cmdValue, addToUndoHistory) {
  var isSuccessfully = false;
  if (!ASPxHtmlEditorCommandList[cmdID].IsHtmlChangeable() || !addToUndoHistory)
   isSuccessfully = ASPxHtmlEditorCommandList[cmdID].Execute(cmdValue, this.htmlEditor);
  else {
   this.OnCommandExecuting(cmdID);
   isSuccessfully = ASPxHtmlEditorCommandList[cmdID].Execute(cmdValue, this.htmlEditor);
   var needAddToStack = isSuccessfully && ASPxHtmlEditorCommandList[cmdID].IsReversable();
   if (needAddToStack) {
    this.ClearActionsToRedo();
    this.currentCmdIDIndex = this.commandIdArray.length;
    this.commandIdArray.push(cmdID);
   }
   this.OnCommandExecuted(needAddToStack);
  }
  return isSuccessfully;
 },
 Undo: function(depth) {
  depth = Math.min(depth, this.commandIdArray.length);
  var actionCount = this.commandIdArray.length;
  depth = Math.min(depth, this.commandIdArray.length);
  while ((depth > 0) && (this.currentCmdIDIndex > 0) && (this.currentCmdIDIndex < actionCount)) {
   this.htmlEditor.SetInnerHtmlToBody(this.htmlEditor.GetDesignViewIFrameDocumentBody(), this.GetRestoreText(this.currentCmdIDIndex - 1));
   this.GetUndoSelection(this.currentCmdIDIndex - 1).Restore();
   this.currentCmdIDIndex--;
   depth--;
  }
  return true;
 },
 Redo: function(depth) {
  depth = Math.min(depth, this.commandIdArray.length);
  var actionIndex = this.currentCmdIDIndex + 1;
  while (depth > 0 && this.commandIdArray.length >= actionIndex) {
   this.htmlEditor.SetInnerHtmlToBody(this.htmlEditor.GetDesignViewIFrameDocumentBody(), this.GetRestoreText(actionIndex));
   this.GetRedoSelection(actionIndex).Restore();
   this.currentCmdIDIndex = actionIndex;
   actionIndex++;
   depth--;
  }
  return true;
 },
 OnCommandExecuting: function(cmdID) {
  if (this.IsUndoRedoCommand(cmdID) &&
   _aspxIsExists(this.commandIdArray[this.currentCmdIDIndex + 1]))
   return;
  if (_aspxIsExists(this.commandIdArray[this.currentCmdIDIndex])) {
   var prevActionUndoSelection = this.htmlEditor.SaveLastSelection();
   if (this.IsLastCommandImmediateExecute()) {
    this.AddNewItemToArray(this.restoreHtmlArray, this.currentCmdIDIndex, this.lastHTML);
    this.UpdateOrAddNewItemToArray(this.undoSelectionArray, this.currentCmdIDIndex, prevActionUndoSelection);
    this.AddNewItemToArray(this.redoSelectionArray, this.currentCmdIDIndex,
      _aspxCloneObject(this.lastRestoreSelection));
   }
   else
    this.undoSelectionArray[this.currentCmdIDIndex] = prevActionUndoSelection;
  }
 },
 OnCommandExecuted: function(needAddToStack) {
  var lastCmdID = this.GetLastCommandID();
  if (needAddToStack && !ASPxHtmlEditorCommandList[lastCmdID].IsImmediateExecution()) {
   this.AddNewItemToArray(this.restoreHtmlArray, this.currentCmdIDIndex, this.GetEditorHtml());
   this.AddNewItemToArray(this.undoSelectionArray, this.currentCmdIDIndex, __aspxEmptySelection);
   try { 
    var selection = lastCmdID == ASPxClientCommandConsts.Start_COMMAND ? __aspxEmptySelection : this.htmlEditor.SaveLastSelection();
   } catch(e) {
    var selection = __aspxEmptySelection;
   }
   this.AddNewItemToArray(this.redoSelectionArray, this.currentCmdIDIndex, selection);
  }
 },
 ClearActionsToRedo: function() {
  if (this.IsRedoAvailable()) {
   this.lastRestoreSelection = null;
   var startIndex = this.currentCmdIDIndex + 1;
   var length = this.commandIdArray.length - this.currentCmdIDIndex;
   this.commandIdArray.splice(startIndex, length);
   this.restoreHtmlArray.splice(startIndex, length);
   this.undoSelectionArray.splice(startIndex, length);
   this.redoSelectionArray.splice(startIndex, length);
  }
 },
 ClearUndoHistory: function() {
  this.lastRestoreSelection = null;
  this.currentCmdIDIndex = -1;
  this.commandIdArray.length = 0;
  this.commandIdArray.length = 0;
  this.restoreHtmlArray.length = 0;
  this.undoSelectionArray.length = 0;
  this.redoSelectionArray.length = 0;
  this.ExecuteCommand(ASPxClientCommandConsts.Start_COMMAND, "null", true);
 },
 CleanEmptyRestoreHtml: function() {
  if (this.GetEditorHtml() == this.lastHTML) {
   _aspxArrayRemoveAt(this.commandIdArray, this.currentCmdIDIndex);
   this.currentCmdIDIndex = this.commandIdArray.length - 1;
   return true;
  }
  return false;
 },
 GetEditorHtml: function() {
  return this.htmlEditor.GetHtmlInternal();
 },
 GetRestoreText: function(index) {
  return this.restoreHtmlArray[index];
 },
 GetRedoSelection: function(index) {
  return this.redoSelectionArray[index];
 },
 GetUndoSelection: function(index) {
  return this.undoSelectionArray[index];
 },
 IsRedoAvailable: function() {
  return (this.commandIdArray.length - 1 > this.currentCmdIDIndex);
 },
 IsUndoAvailable: function() {
  return this.currentCmdIDIndex > 0;
 },
 UpdateLastRestoreSelectionAndHTML: function() {
  if (this.lastRestoreSelection == null)
   this.lastRestoreSelection = ASPxClientHtmlEditorSelection.Create(this.htmlEditor);
  this.lastRestoreSelection.Save();
  this.UpdateLastRestoreHtml();
 },
 UpdateLastRestoreHtml: function() {
  this.lastHTML = this.GetEditorHtml();
 },
 UpdateLastItemInRestoreHtmlArray: function() {
  this.restoreHtmlArray[this.restoreHtmlArray.length - 1] = this.GetEditorHtml();
 },
 IsLastCommandImmediateExecute: function() {
  var lastCmdID = this.GetLastCommandID();
  var isImmediateExecution = ASPxHtmlEditorCommandList[lastCmdID].IsImmediateExecution();
  return (lastCmdID != null) && isImmediateExecution &&
    (this.currentCmdIDIndex == this.commandIdArray.length - 1);
 },
 IsDeleting: function() {
  var lastCmdID = this.GetLastCommandID();
  return (lastCmdID != null) && (lastCmdID == ASPxClientCommandConsts.KBDELETE_COMMAND) &&
    (this.currentCmdIDIndex == this.commandIdArray.length - 1);
 },
 IsUndoRedoCommand: function(cmdID) {
  return (cmdID == ASPxClientCommandConsts.REDO_COMMAND) ||
    (cmdID == ASPxClientCommandConsts.UNDO_COMMAND);
 },
 GetLastCommandID: function() {
  var curAction = this.commandIdArray[this.currentCmdIDIndex];
  return _aspxIsExists(curAction) ? curAction : null;
 },
 AddNewItemToArray: function(array, index, value) {
  if (!_aspxIsExists(array[index]))
   array.push(value);
 },
 UpdateOrAddNewItemToArray: function(array, index, value) {
  if (!_aspxIsExists(array[index]))
   array.push(value);
  else if (array[index] == __aspxEmptySelection)
   array[index] = value;
 }
});
ASPxHtmlEditorKeyboardManager = _aspxCreateClass(null, {
 constructor: function() {
  this.shortcutCommands = [ ];
 },
 AddShortcut: function(shortcutString, commandID) {
   var shortcutCode = _aspxParseShortcutString(shortcutString);
   this.shortcutCommands[shortcutCode] = commandID;
 },
 GetShortcutCommand: function(evt) {
  var shortcutCode = _aspxGetShortcutCode(evt.keyCode, evt.ctrlKey, evt.shiftKey, evt.altKey);
  return this.shortcutCommands[shortcutCode];
 },
 IsBrowserShortcut: function(evt) {
  if(__aspxWebKitFamily || __aspxIE) {
   var shortcutCode = _aspxGetShortcutCode(evt.keyCode, evt.ctrlKey, evt.shiftKey, evt.altKey);
   return _aspxArrayIndexOf(ASPxHtmlEditorKeyboardManager.BrowserShortcuts, shortcutCode) > -1;
  }
 },
 GetKeyDownInfo: function(evt) { 
  return {
   isSystemKey: ASPxHtmlEditorKeyboardManager.IsSystemKey(evt.keyCode),
   isDeleteOrBackSpaceKey: ASPxHtmlEditorKeyboardManager.IsDeleteOrBackSpaceKey(evt.keyCode),
   isBackSpaceKey: ASPxHtmlEditorKeyboardManager.IsBackSpaceKey(evt.keyCode),
   isSpaceKey: ASPxHtmlEditorKeyboardManager.IsSpaceKey(evt.keyCode),
   isCursorMovingKey: ASPxHtmlEditorKeyboardManager.IsCursorMovingKey(evt.keyCode)
  };
 }
});
ASPxHtmlEditorKeyboardManager.Shortcuts = [
 [ASPxClientCommandConsts.BOLD_COMMAND, "CTRL+B"],
 [ASPxClientCommandConsts.ITALIC_COMMAND, "CTRL+I"],
 [ASPxClientCommandConsts.UNDERLINE_COMMAND, "CTRL+U"],
 [ASPxClientCommandConsts.JUSTIFYLEFT_COMMAND, "CTRL+L"],
 [ASPxClientCommandConsts.JUSTIFYCENTER_COMMAND, "CTRL+E"],
 [ASPxClientCommandConsts.JUSTIFYRIGHT_COMMAND, "CTRL+R"],
 [ASPxClientCommandConsts.JUSTIFYFULL_COMMAND, "CTRL+J"],
 [ASPxClientCommandConsts.UNDO_COMMAND, "CTRL+Z"],
 [ASPxClientCommandConsts.REDO_COMMAND, "CTRL+Y"],
 [ASPxClientCommandConsts.INSERTLINK_DIALOG_COMMAND, "CTRL+K"], 
 [ASPxClientCommandConsts.INSERTIMAGE_DIALOG_COMMAND, "CTRL+G"], 
 [ASPxClientCommandConsts.UNLINK_COMMAND, "CTRL+SHIFT+K"], 
 [ASPxClientCommandConsts.PRINT_COMMAND, "CTRL+P"],
 [ASPxClientCommandConsts.FULLSCREEN_COMMAND, "F11"],
 [ASPxClientCommandConsts.NEWPARAGRAPHTYPE_COMMAND, "CTRL+ENTER"],
 [ASPxClientCommandConsts.LINEBREAKETYPE_COMMAND, "SHIFT+ENTER"],
 [ASPxClientCommandConsts.ENTER_COMMAND, "ENTER"],
 [ASPxClientCommandConsts.SELECT_ALL, "CTRL+A"],
 [ASPxClientCommandConsts.KBCUT_COMMAND, "CTRL+X"],
 [ASPxClientCommandConsts.KBCUT_COMMAND, "SHIFT+DELETE"],
 [ASPxClientCommandConsts.KBCOPY_COMMAND, "CTRL+C"],
 [ASPxClientCommandConsts.KBCOPY_COMMAND, "CTRL+INSERT"],
 [ASPxClientCommandConsts.KBPASTE_COMMAND, "CTRL+V"],
 [ASPxClientCommandConsts.KBPASTE_COMMAND, "SHIFT+INSERT"]
];
ASPxHtmlEditorKeyboardManager.BrowserShortcuts = [
 _aspxParseShortcutString("CTRL+B"),
 _aspxParseShortcutString("CTRL+I"),
 _aspxParseShortcutString("CTRL+U"),
 _aspxParseShortcutString("CTRL+Z"),
 _aspxParseShortcutString("CTRL+Y")
];
ASPxHtmlEditorKeyboardManager.IsSystemKey = function(keyCode) {
 return keyCode == 0 ||
  keyCode >= ASPxKey.F1 && keyCode <= ASPxKey.F12 ||
  keyCode >= ASPxKey.Backspace && keyCode <= ASPxKey.Esc ||
  keyCode >= ASPxKey.Space && keyCode <= ASPxKey.Delete ||
  keyCode == ASPxKey.ContextMenu;
};
ASPxHtmlEditorKeyboardManager.IsDeleteOrBackSpaceKey = function(keyCode) {
 return keyCode == ASPxKey.Delete || keyCode == ASPxKey.Backspace;
};
ASPxHtmlEditorKeyboardManager.IsBackSpaceKey = function(keyCode) {
 return keyCode == ASPxKey.Backspace;
};
ASPxHtmlEditorKeyboardManager.IsSpaceKey = function(keyCode) {
 return keyCode == ASPxKey.Space;
};
ASPxHtmlEditorKeyboardManager.IsCursorMovingKey = function(keyCode) {
 return keyCode >= ASPxKey.PageUp && keyCode <= ASPxKey.Down;
};
ASPxHtmlEditorDialogSR = { };
ASPxHtmlEditorDialog = _aspxCreateClass(ASPxDialog, {      
 Execute: function(ownerControl) {
  this.htmlEditor = ownerControl;
  this.SaveDocumentScrollPosition();
  this.CreateSelectionInfo();
  if (__aspxIE)
   this.SaveScrollPosition();
  this.htmlEditor.RemoveFocus();
  if (__aspxOpera || __aspxChrome)
   this.RestoreDocumentScrollPosition();
  this.SetDialogNameInput();
  this.isOnCallbackError = false;
  this.isPreventKeyPress = false;
  ASPxDialog.prototype.Execute.call(this, ownerControl);
 },
 ExecuteInternal: function(result) {
  ASPxDialog.prototype.ExecuteInternal.call(this, result);
  var nonEmptyTextPattern = /\S/;
  var contentContainer = this.GetDialogPopup().GetContentContainer(-1);
  if(contentContainer.lastChild && contentContainer.lastChild.nodeType == 3 && !nonEmptyTextPattern.test(contentContainer.lastChild.nodeValue))
   contentContainer.removeChild(contentContainer.lastChild);
 },
 OnCallbackError: function(result, data) {
  this.isOnCallbackError = true;
  this.ClearDialogNameInput();
  this.HideDialog(null, true);
  ASPxDialog.prototype.OnCallbackError.call(this, result); 
 }, 
 OnClose: function() {
  ASPxDialog.prototype.OnClose.call(this);
  this.ClearDialogNameInput();
  if (!this.isOnCallbackError)
   this.SaveEditorsState();
 },
 OnCloseButtonClick: function() { 
    this.htmlEditor.RestoreLastSelection(this.selectionInfo.selection);
  this.htmlEditor.UpdateToolbar();
 },
   OnComplete: function(result, params) {
    this.HideDialogPopup();
    this.htmlEditor.RestoreLastSelection(this.selectionInfo.selection);
  if(__aspxIE && __aspxBrowserMajorVersion > 8)
   this.htmlEditor.RestoreSelection();
  this.DoCustomAction(result, params);
  this.ClearEditorValue();
  if (!result)
   this.htmlEditor.UpdateToolbar();
   },
 OnInitComplete: function() {
  ASPxDialog.prototype.OnInitComplete.call(this);
  this.GetDialogPopup().UpdatePosition();
  if (__aspxIE)
   this.RestoreScrollPositionAndSelection();
  var htmlEditor = this.htmlEditor;
  htmlEditor.ClearFocusInput(); 
  this.RestoreEditorsState();
  var popupElement = this.GetDialogPopup().GetWindowElement(-1);
  if(popupElement && popupElement.style.width)
   _aspxRemoveAttribute(popupElement.style, "width");
 },
 OnDocumentKeyPress: function(evt) {
  if(!this.isPreventKeyPress)
   ASPxDialog.prototype.OnDocumentKeyPress.call(this, evt);   
 },
 SaveEditorsState: function() {
 },
 RestoreEditorsState: function() {
 },
 ClearEditorValue: function() {
 },
 CreateSelectionInfo: function() {
  var curSelection = this.htmlEditor.CreateRestoreSelectionForDialog();
  this.selectionInfo = {
   selection: curSelection,
   isControl: curSelection.IsControl(),
   text: curSelection.GetText(),
   htmlText: curSelection.GetHtmlText(),
   selectedElement: curSelection.GetParentElement(),
   endSelectedElement: curSelection.GetEndContainer()
  };
 },
 ClearDialogNameInput: function() {
  this.htmlEditor.GetCurrentDialogHiddenField().value = "";
 },
 SendCallback: function(callbackArgs) {
  this.ownerControl.callbackOwner = this;
  this.ownerControl.CreateCallback(callbackArgs, "", false);
  this.ShowLoadingPanelOverDialogPopup();
 },
 SetDialogNameInput: function() {
  this.htmlEditor.GetCurrentDialogHiddenField().value = this.name;
 },
 RestoreScrollPositionAndSelection: function() {
    this.htmlEditor.RestoreLastSelection(this.selectionInfo.selection);
    if (this.savedScrollLeft > 0)
     this.htmlEditor.GetDesignViewDocument().body.scrollLeft = this.savedScrollLeft;
    if (this.savedScrollTop > 0)     
     this.htmlEditor.GetDesignViewDocument().body.scrollTop = this.savedScrollTop;
 },
 RestoreDocumentScrollPosition: function() {
  var scrollElement = __aspxIE || __aspxFirefox ? document.documentElement : document.body;
  if(this.savedDocumentScrollLeft)
   scrollElement.scrollLeft = this.savedDocumentScrollLeft;
  if(this.savedDocumentScrollTop)
   scrollElement.scrollTop = this.savedDocumentScrollTop;
 },
 SaveScrollPosition: function() {
  this.savedScrollLeft = this.htmlEditor.GetDesignViewDocument().body.scrollLeft;
  this.savedScrollTop = this.htmlEditor.GetDesignViewDocument().body.scrollTop;
 },
 SaveDocumentScrollPosition: function() {
  this.savedDocumentScrollLeft = _aspxGetDocumentScrollLeft();
  this.savedDocumentScrollTop = _aspxGetDocumentScrollTop();
 }, 
 IsEnabledEditor: function(editor) {
  return _aspxGetElementVisibility(editor.GetMainElement());
 }
});
ASPxCustomDialog = _aspxCreateClass(ASPxHtmlEditorDialog, {
 constructor: function(customDialogName, customDialogPublicName) {
  this.constructor.prototype.constructor.call(this, customDialogName);
  this.publicName = customDialogPublicName;
 },
 OnCallbackError: function(result, data) {
  ASPxHtmlEditorDialog.prototype.OnCallbackError.call(this, result, data);
  ASPxHtmlEditorCommandList[ASPxClientCommandConsts.CUSTOMDIALOG_COMMAND].DialogNotFound(this.name);
 },
 GetDialogCaptionText: function() {
  return this.htmlEditor.customDialogsCaptions[this.name] || "";
 },
 OnInitComplete: function() {
  this.RestoreDocumentScrollPosition();
  ASPxHtmlEditorDialog.prototype.OnInitComplete.call(this);
  var _this = this;
  setTimeout(function() {
   _this.SetFakeFocus(); 
   _this.htmlEditor.RaiseCustomDialogOpened(_this.publicName);
  }, 0);
 },
 SetFakeFocus: function() {
  if(!this.fakeFocusElement) {
   this.fakeFocusElement = document.createElement("A");
   this.fakeFocusElement.setAttribute("href", "#");
  }
  this.GetDialogPopup().GetContentContainer(-1).appendChild(this.fakeFocusElement);
  this.fakeFocusElement.focus();
 },
 OnClosing: function(args) {
  ASPxHtmlEditorDialog.prototype.OnClosing.call(this);
  if(args)
   args.cancel = true;
  var canceled = this.htmlEditor.RaiseCustomDialogClosing(this.publicName, "cancel");
  if(!canceled)
   ASPxClientHtmlEditor.CustomDialogComplete("cancel", null);
  return canceled;
 },
 DoCustomAction: function(result, data) {
  ASPxHtmlEditorDialog.prototype.DoCustomAction.call(this);
  this.htmlEditor.RaiseCustomDialogClosed(this.publicName, result, data);
 }
});
__aspxDefaultLinkHref = "http://"; 
__aspxMailtToPrefix = "mailto:";
__aspxMailtToSubjectPrefix = "?subject=";
__aspxOpenInNewWindowTarget = "_blank";
InsertLinkDialog = _aspxCreateClass(ASPxHtmlEditorDialog , {
 OnInitComplete: function() {
  ASPxHtmlEditorDialog.prototype.OnInitComplete.apply(this, arguments);
  if(typeof(ASPxClientHtmlEditorFileManager) != "undefined")
   ASPxClientHtmlEditorFileManager.SetOwner(this.GetDialogPopup().GetContentContainer(-1), this.htmlEditor);
 },
 DoCustomAction: function(result, params) {
  if (result) {   
   var target = "";
   var title = "";
   var text = "";
   var url = "";
   title = params.title;
   text = params.text;
   var linkTypeRadioButtonList = this.GetLinkTypeRadioButtonList();
   var linkType = linkTypeRadioButtonList ? linkTypeRadioButtonList.GetValue() : "URL";
   switch(linkType) {
    case "Email":
      url = __aspxMailtToPrefix + params.url;
      if (params.subject)
       url += __aspxMailtToSubjectPrefix + params.subject;
      break;
    case "URL":
      url = params.url;
      target = params.isCheckedOpenInNewWindow ? __aspxOpenInNewWindowTarget : "";
      break;
   }
   if (params.isTextOnlySelected && (text == ""))
    text = params.url;
   this.htmlEditor.InsertLink(url, text, target, title);
  }
 },
 GetDialogCaptionText: function() {
  return InsertLinkDialog.prototype.IsLink(this.selectionInfo.selectedElement) 
   ? ASPxHtmlEditorDialogSR.ChangeLink
   : ASPxHtmlEditorDialogSR.InsertLink;
 },
 GetInitInfoObject: function() {
  var linkInfoObject = {
   href: "",
   text: "",
   title: "",
   target: ""
  };
  var link = this.selectionInfo.selectedElement.tagName == "A" ? this.selectionInfo.selectedElement : _aspxGetParentByTagName(this.selectionInfo.selectedElement, "A");
  var isTextEditorVisible =true;
  if (link) {
   if (!InsertLinkDialog.prototype.ContaintTextNodeOnly(link) || this.selectionInfo.isControl)
    isTextEditorVisible = false;     
  }
  else {
   var img = _aspxGetParentByTagName(this.selectionInfo.selectedElement, "img");
   if (img)
    isTextEditorVisible = false;
   else {
    var text = this.selectionInfo.text;
    if (text) text = this.selectionInfo.htmlText;
    isTextEditorVisible = !ASPxClientSelection.IsHtml(_aspxTrim(text));
   }
  }
  linkInfoObject.isTextEditorVisible = isTextEditorVisible;
  linkInfoObject.text = this.selectionInfo.text;
  if (link) {
   linkInfoObject.href = _aspxGetAttribute(link, "href");
   linkInfoObject.text = link.innerHTML;
   linkInfoObject.title = _aspxGetAttribute(link, "title");
   linkInfoObject.target = _aspxGetAttribute(link, "target");
  }
  if (linkInfoObject.href == "")
   linkInfoObject.href = __aspxDefaultLinkHref;
  return linkInfoObject;
 },
 InitializeDialogFields: function(linkInfo) {
  var isLinkSelected = InsertLinkDialog.prototype.IsLink(this.selectionInfo.selectedElement);
  var linkTypeRadioButtonList = this.GetLinkTypeRadioButtonList();
  var openInNewWindowCheckBox = this.GetOpenInNewWindowCheckBox();
  this.GetChangeButton().SetVisible(isLinkSelected);
  this.GetInsertButton().SetVisible(!isLinkSelected);
  if(!linkInfo.href) {
   this.GetLinkTypeRadioButtonList().SetValue("URL");
   this.GetUrlTextBox().SetValue("");
   if(openInNewWindowCheckBox)
    openInNewWindowCheckBox.SetValue(false);
  }
  else if ((linkInfo.href != "") && (linkInfo.href.indexOf(__aspxMailtToPrefix) > -1)) {   
   var mailtoIndex = linkInfo.href.indexOf(__aspxMailtToPrefix);
   var subjectIndex = linkInfo.href.indexOf(__aspxMailtToSubjectPrefix);
   var index = subjectIndex > -1 ? subjectIndex : linkInfo.href.length;
   this.GetEmailToTextBox().SetValue(linkInfo.href.substring(mailtoIndex + __aspxMailtToPrefix.length, index));
   var subject = "";
   if (subjectIndex > -1)
    subject = linkInfo.href.substring(subjectIndex + __aspxMailtToSubjectPrefix.length);
   this.GetSubjectTextBox().SetValue(subject);
   linkTypeRadioButtonList.SetValue("Email");
  }
  else {
   if(linkTypeRadioButtonList)
    linkTypeRadioButtonList.SetValue("URL");
   this.GetUrlTextBox().SetValue(linkInfo.href);
   if((linkInfo.href != __aspxDefaultLinkHref || linkInfo.target != "") && openInNewWindowCheckBox)
    openInNewWindowCheckBox.SetValue(linkInfo.target == __aspxOpenInNewWindowTarget);
  }
  this.InitializeDisplayPropertiesFields(linkInfo);
  if(linkTypeRadioButtonList)
   linkTypeRadioButtonList.RaiseSelectedIndexChanged();  
 },
 InitializeDisplayPropertiesFields: function(linkInfo){
  if(!this.IsVisibleDisplayProperties())
   return;
  this.GetToolTipTextBox().SetValue(linkInfo.title);
  if (linkInfo.isTextEditorVisible)
   this.GetTextTextBox().SetValue(linkInfo.text);
  else {
   this.GetTextTextBox().SetEnabled(false);
   this.GetLabelText().SetEnabled(false);
  }
 },
 ClearEditorValue: function() {
  var dialogPopup = this.htmlEditor.GetDialogPopupControl();
  if(dialogPopup){
   var container = dialogPopup.GetWindowContentElement(-1);
   ASPxClientEdit.ClearEditorsInContainer(container);
  }
 },
 SetFocusInField: function() {
  var linkTypeRadioButtonList = this.GetLinkTypeRadioButtonList();
  if(!linkTypeRadioButtonList || linkTypeRadioButtonList.GetValue() == "URL")
   _aspxSetFocusToTextEditWithDelay(_dxeTxbURL.name);
  else
   _aspxSetFocusToTextEditWithDelay(_dxeTxbEmailTo.name);
 },
 GetChangeButton: function() {
  return window._dxeBtnChange || null;
 },
 GetEmailToTextBox: function() {
  return _dxeTxbEmailTo;
 },
 GetInsertButton: function() {
  return _dxeBtnOk;
 },   
 GetLabelText: function() {
  if(typeof(_dxeLblText) == "undefined")
   return null;
  return _dxeLblText;
 },
 GetLinkTypeRadioButtonList: function() {
  if(typeof(_dxeRblLinkType) == "undefined")
   return null;
  return _dxeRblLinkType;
 },
 GetOpenInNewWindowCheckBox: function() {
  if(typeof(_dxeCkbOpenInNewWindow) == "undefined")
   return null;
  return _dxeCkbOpenInNewWindow;
 },
 GetTextTextBox: function() {
  if(typeof(_dxeTxbText) == "undefined")
   return null;
  return _dxeTxbText;
 },
 GetToolTipTextBox: function() {
  if(typeof(_dxeTxbToolTip) == "undefined")
   return null;
  return _dxeTxbToolTip;
 },
 GetSubjectTextBox: function() {
  return _dxeTxbSubject;
 }, 
 GetUrlTextBox: function() {
  return _dxeTxbURL;
 },
 IsVisibleDisplayProperties: function(){
  return !!this.GetTextTextBox() && !!this.GetLabelText();
 }
});
InsertLinkDialog.prototype.ContaintTextNodeOnly = function(linkElement) {
 if (linkElement.childNodes.length > 0) {
  for (var i = 0; i < linkElement.childNodes.length; i++) {
   if (linkElement.childNodes[i].nodeType != 3)
    return false;
  }
 }
 return true;
};
InsertLinkDialog.prototype.IsLinkSelected = function(htmlEditor) {
 var curSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
 return InsertLinkDialog.prototype.IsLink(curSelection.GetParentElement());
};
InsertLinkDialog.prototype.IsLink = function(element) {
 return !!_aspxGetParentByTagName(element, "A");
};
var __aspxPreviewTextElementID = "_dxInsertImagePreviewText";
var __aspxPreviewImageElementID = "_dxInsertImagePreviewImage";
InsertImageDialog = _aspxCreateClass(ASPxHtmlEditorDialog, {
 OnInitComplete: function() {
  ASPxHtmlEditorDialog.prototype.OnInitComplete.apply(this, arguments);
  if(typeof(ASPxClientHtmlEditorFileManager) != "undefined")
   ASPxClientHtmlEditorFileManager.SetOwner(this.GetDialogPopup().GetContentContainer(-1), this.htmlEditor);
 },
 DoCustomAction: function(result, params) {
  if (result) {
   if (this.selectedImageElement)
    this.htmlEditor.ChangeImage(this.selectedImageElement, params);
   else
    this.htmlEditor.InsertImage(params);
  }
 },
 GetDialogCaptionText: function() {
  var img = InsertImageDialog.prototype.GetImage(this.selectionInfo.selectedElement);
  return img
   ? ASPxHtmlEditorDialogSR.ChangeImage
   : ASPxHtmlEditorDialogSR.InsertImage;
 },
 GetInitInfoObject: function() {
  var imageInfoObject = {
   isCustomSize: false,
   src: "",
   width: "",
   height: "",
   align: "",
   alt: "",
   useFloat: false,
   cssClass: "",
   borderWidth: "",
   borderColor: "",
   marginTop: "",
   marginLeft: "",
   marginRight: "",
   marginBottom: ""
  };
  this.constrainProportions = true;
  this.selectedImageElement = InsertImageDialog.prototype.GetImage(this.selectionInfo.selectedElement);
  if (this.selectedImageElement)
   imageInfoObject = ASPxHtmlEditorCommands.ChangeImage.GetImageProperties(this.selectedImageElement);
  return imageInfoObject;
 },
 InitializeDialogFields: function(imageInfo) {
  var isImage = !!this.selectedImageElement;
  this.GetChangeButton().SetVisible(isImage);
  this.GetInsertButton().SetVisible(!isImage);
  if (imageInfo.src) {
   this.fieldInitializing = true;
   _dxeTbxInsertImageUrl.SetValue(imageInfo.src);
   this.OnImageSrcChanged(imageInfo.src);
  }
  if(typeof(_dxeTbxInsertImageUrl) != "undefined")
   _aspxAttachEventToElement(_dxeTbxInsertImageUrl.GetInputElement(), "paste", aspxInsertImageSrcPaste);
  this.UpdateSizeFields(imageInfo.width ? imageInfo.width : 0, imageInfo.height ? imageInfo.height : 0);
  if (imageInfo.isCustomSize) {
   _dxeCmbSize.SetValue("custom");
   _dxeCmbSize.OnSelectChanged();
  }
  if (imageInfo.align && typeof(_dxeCmbImagePosition) != "undefined")
   _dxeCmbImagePosition.SetValue(imageInfo.align);
  if (imageInfo.alt && typeof(_dxeTxbDescription) != "undefined")
   _dxeTxbDescription.SetValue(imageInfo.alt);
  if (imageInfo.useFloat && typeof(_dxeCkbWrapTextArroundImage) != "undefined")
   _dxeCkbWrapTextArroundImage.SetChecked(imageInfo.useFloat);
  if(imageInfo.cssClass && typeof(_dxeCmbCssClass) != "undefined")
   _dxeCmbCssClass.SetValue(imageInfo.cssClass);
  if(imageInfo.borderWidth && typeof(_dxeSpnBorderWidth) != "undefined")
   _dxeSpnBorderWidth.SetValue(imageInfo.borderWidth);
  if(imageInfo.borderColor && typeof(_dxeClrBorderColor) != "undefined")
   _dxeClrBorderColor.SetValue(imageInfo.borderColor);
  if(imageInfo.marginTop && typeof(_dxeSpnMarginTop) != "undefined")
   _dxeSpnMarginTop.SetValue(imageInfo.marginTop);
  if(imageInfo.marginLeft && typeof(_dxeSpnMarginLeft) != "undefined")
   _dxeSpnMarginLeft.SetValue(imageInfo.marginLeft);
  if(imageInfo.marginRight && typeof(_dxeSpnMarginRight) != "undefined")
   _dxeSpnMarginRight.SetValue(imageInfo.marginRight);
  if(imageInfo.marginBottom && typeof(_dxeSpnMarginBottom) != "undefined")
   _dxeSpnMarginBottom.SetValue(imageInfo.marginBottom);
 },
 ClearEditorValue: function() {
  var dialogPopup = this.htmlEditor.GetDialogPopupControl();
  if(dialogPopup){
   var container = dialogPopup.GetWindowContentElement(-1);
   ASPxClientEdit.ClearEditorsInContainer(container);
  }
 },
 SaveEditorsState: function() {
  var checkBox = this.GetCheckBoxMoreImageOptions();
  if (checkBox) {
   this.htmlEditor.moreImageOptions = checkBox.GetChecked();
  }
 },
 RestoreEditorsState: function() {  
  if (_aspxIsExists(this.htmlEditor.moreImageOptions)) {
   this.GetCheckBoxMoreImageOptions().SetChecked(this.htmlEditor.moreImageOptions);
   this.GetCheckBoxMoreImageOptions().RaiseCheckedChanged();
  }
 },
 GetPreviewTextElement: function() {
  return _aspxGetElementById(this.htmlEditor.name + __aspxPreviewTextElementID);
 },
 GetPreviewImageElement: function() {
  return _aspxGetElementById(this.htmlEditor.name + __aspxPreviewImageElementID);
 },
 GetPreviewAreaCell: function() {
  return _aspxGetParentByTagName(this.GetPreviewImageElement(), "td");
 },
 GetChangeButton: function() {
  return _dxeBtnChangeImage;
 },
 GetCheckBoxMoreImageOptions: function() {
  return window._dxeCkbMoreImageOptions || null;
 },
 GetClientUploadDirectory: function() {
  return this.htmlEditor.uploadImageFileDirectoryPath;
 },
 GetThumbnailCheckBox: function() {
  if(typeof(_dxeCkbCreateThumbnail) == "undefined")
   return null;
  return _dxeCkbCreateThumbnail;
 }, 
 GetErrorLabel: function() {
  return _dxeLblError;
 },
 GetInsertButton: function() {
  return _dxeBtnInsertImage;
 },   
 GetImageUploader: function() {
  return _dxeUplImage;
 },
 GetThumbnailFileNameTextBox: function() {
  return typeof(_dxeThumbnailFileName) != "undefined" ? _dxeThumbnailFileName : null;
 },
 GetInsertImageUrlTextBox: function() {
  return _dxeTbxInsertImageUrl;
 },
 IsFieldInitializing: function() {
  if (_aspxIsExists(this.fieldInitializing))
   return this.fieldInitializing;
  return false;
 },
 SetFocusInField: function() {
  if(typeof(_dxeTbxInsertImageUrl) == "undefined")
   return;
  _aspxSetFocusToTextEditWithDelay(_dxeTbxInsertImageUrl.name);
 },
 HasImageProductedFromUrl: function(){
  if(typeof(_dxeRblImageFromTheWeb) == "undefined")
   return true;
  return _dxeRblImageFromTheWeb.GetChecked();
 },
 HasImageProductedFromComputer: function(){
  if(typeof(_dxeRblImageFromThisComputer) == "undefined")
   return false;
  return _dxeRblImageFromThisComputer.GetChecked();
 },
 OnCallback: function(result) {
  if (result.indexOf(__aspxHESaveImageToServerCallbackPrefix) == 0) {
   this.OnImageSavedToServer(result.substring(__aspxHESaveImageToServerCallbackPrefix.length + 1, result.length));
   this.ownerControl.callbackOwner = null;
  }
  else
   ASPxDialog.prototype.OnCallback.call(this, result);
 },
 OnComplete: function(result, params) {
  this.insertImageParams = params;
  if (result) {
   if(this.HasImageProductedFromComputer())
    return this.GetImageUploader().UploadFile();
   else if (this.IsCreateThumbnail())
    return this.SaveThumbnailImageToServerViaCallback(this.GetInsertImageUrlTextBox().GetText(),
                  this.GetThumbnailFileNameTextBox().GetText(),
                  params.width, params.height);
   else if (this.IsSaveImageToServer() && this.HasImageProductedFromUrl())
    return this.SaveImageToServerViaCallback(this.GetInsertImageUrlTextBox().GetText());
  }
  ASPxHtmlEditorDialog.prototype.OnComplete.call(this, result, params);
 },
 OnImageSavedToServer: function(result) {
  if (result.indexOf(__aspxSaveImageToServerErrorCallbackPrefix) > -1)
   this.ShowErrorMessage(result.substring(__aspxSaveImageToServerErrorCallbackPrefix.length + 1, result.length));
  else {
   this.insertImageParams.src = result.substr(__aspxSaveImageToServerNewUrlCallbackPrefix.length + 1, result.length);
   ASPxHtmlEditorDialog.prototype.OnComplete.call(this, 1, this.insertImageParams);
  }
 },
 OnConstrainProportionsSwitchClick: function(evt, invisibleSwitchImgID) {
  var visibleSwitchImg = _aspxGetEventSource(evt);
  var invisibleSwitchImg = _aspxGetElementById(invisibleSwitchImgID);
  _aspxSetElementDisplay(visibleSwitchImg, false);
  _aspxSetElementDisplay(invisibleSwitchImg, true); 
  this.constrainProportions = !this.constrainProportions;
  if (this.constrainProportions)
   this.UpdateSizeFields(this.initialWidth, this.initialHeight);
 },
 OnImageUploadStart: function() {
  this.ShowLoadingPanelOverDialogPopup();
 },
 OnImageUploadComplete: function(args) {
  this.HideLoadingPanelOverDialogPopup();
  if (args.isValid) {
   var fileName = args.callbackData;
   var isDataUriImage = (fileName.toLowerCase().indexOf("data:image") == 0);
   if(!isDataUriImage)
    fileName = this.GetClientUploadDirectory() + fileName;
   this.insertImageParams.src = fileName;
   if(!isDataUriImage && this.IsCreateThumbnail()) {
    this.SaveThumbnailImageToServerViaCallback(
     ASPxClientPath.GetBaseUrlPath() + fileName,
     this.GetThumbnailFileNameTextBox().GetText(),
     this.insertImageParams.width,
     this.insertImageParams.height
    );
   }
   else
    ASPxHtmlEditorDialog.prototype.OnComplete.call(this, 1, this.insertImageParams);
  }
 },
 OnImageUploadTextChanged: function() {
  this.UpdateThumbnailFileName(this.GetImageUploader().GetText());
 },
 OnImageSrcChanged: function(src) {
  this.htmlEditor.ClearUnforcedFunctionByKey("OnImageSrcChanged");
  this.CheckImageExisting(src);
  this.UpdateThumbnailFileName(src);
 },
 OnImageSrcChangedByTimer: function(src) {
  if(src == _aspxGetAttribute(this.testImage, "src"))
   return;
  this.htmlEditor.UnforcedFunctionCall(function() {
   this.OnImageSrcChanged(src);
  }.aspxBind(this), "OnImageSrcChanged", 250, true);
 },
 OnImageFromTypeChanged: function() {
  var src = this.HasImageProductedFromUrl() ? this.GetInsertImageUrlTextBox().GetText() :
             this.GetImageUploader().GetText();
  this.UpdateThumbnailFileName(src);
 },
 OnLoadTestExistingImage: function() {  
  this.GetPreviewImageElement().src = this.testImage.src;  
  var previewAreaTD = this.GetPreviewAreaCell();
  var maxWidth = previewAreaTD.clientWidth;
  var maxHeight = __aspxWebKitFamily ? previewAreaTD.offsetHeight : previewAreaTD.clientHeight;
  this.SetPreviewImageSize(this.testImage.width, this.testImage.height, maxWidth, maxHeight);  
  _aspxSetElementDisplay(this.GetPreviewTextElement(), false);
  _aspxSetElementDisplay(this.GetPreviewImageElement(), true);
  previewAreaTD.style.borderStyle = "none";
  this.UpdateSizeFieldsAfterLoad(this.testImage.width, this.testImage.height);
 },
 OnErrorTestExistingImage: function() {
  _aspxSetElementDisplay(this.GetPreviewTextElement(), true);
  _aspxSetElementDisplay(this.GetPreviewImageElement(), false);
  var previewAreaTD = this.GetPreviewAreaCell();
  previewAreaTD.style.borderStyle = "";
  this.UpdateSizeFieldsAfterLoad();
 },
 OnSizeSpinNumberChanged: function(sizeType) {
  if (this.constrainProportions)
   this.UpdateSizeSpinEditsWithConstrainProportions(sizeType);
 },
 OnSizeSpinKeyUp: function(sizeType, htmlEvent) {
  if (this.constrainProportions) {
   var keyCode = _aspxGetKeyCode(htmlEvent);  
   if (keyCode != ASPxKey.Tab && keyCode != ASPxKey.Shift)
    this.UpdateSizeSpinEditsWithConstrainProportions(sizeType);
  }
 },
 CheckImageExisting: function (checkingSrc) {
  if (document.images) {
   this.testImage = new Image();
   _aspxAttachEventToElement(this.testImage, "load", new Function("aspxTestExistingImageOnLoad" + "('" + this.htmlEditor.name + "');"));
   _aspxAttachEventToElement(this.testImage, "error", new Function("aspxTestExistingImageOnError" + "('" + this.htmlEditor.name + "');"));
   this.testImage.src = checkingSrc;
  }
 },
 IsCreateThumbnail: function() {  
  var thumbnailCheckBox = this.GetThumbnailCheckBox();
  if(!thumbnailCheckBox || typeof(_dxeCmbSize) == "undefined")
   return false;
  return thumbnailCheckBox.GetChecked() && _dxeCmbSize.GetValue() == "custom";
 },
 IsSaveImageToServer: function() {
  return typeof(_dxeCkbSaveToServer) != "undefined" && _dxeCkbSaveToServer.GetValue() || !this.htmlEditor.allowInsertDirectImageUrls;
 },
 SetPreviewImageSize: function(sourceWidth, sourceHeight, maxWidth, maxHeight) {
  var newWidth = sourceWidth;
  var newHeight = sourceHeight;
  if ((sourceWidth > maxWidth) || 
   (sourceHeight > maxHeight)) {
   var cw = sourceWidth/maxWidth;   
   var ch = sourceHeight/maxHeight;
   if (cw > ch) {
    var cw = sourceWidth/maxWidth;   
    newWidth = Math.floor(sourceWidth/cw);
    newHeight = Math.floor(sourceHeight/cw);
   }
   else {
    newWidth = Math.floor(sourceWidth/ch);
    newHeight = Math.floor(sourceHeight/ch);
   }
  }  
  var previewImage = this.GetPreviewImageElement();
  previewImage.style.width = newWidth + "px";
  previewImage.style.height = newHeight + "px";
 },
 SaveImageToServerViaCallback: function(src) {
  this.SendCallback(_aspxFormatCallbackArg(__aspxHESaveImageToServerCallbackPrefix, src));
 },
 SaveThumbnailImageToServerViaCallback: function(src, newImageFileName, thumbnailWidth, thumbnailHeight) {
  this.SendCallback(_aspxFormatCallbackArgs([
   [ __aspxHESaveImageToServerCallbackPrefix, src ],
   [ __aspxHEThumbnailImageWidthCallbackPrefix, thumbnailWidth ],
   [ __aspxHEThumbnailImageHeightCallbackPrefix, thumbnailHeight ],
   [ __aspxHEThumbnailImageFileNameCallbackPrefix, newImageFileName ]
  ]));
 },
 HideErrorMessage: function() {
  this.GetErrorLabel().SetVisible(false);
 },
 ShowErrorMessage: function(message) {
  var textBox = this.GetInsertImageUrlTextBox();
  textBox.isValid = false;
  textBox.errorText = message;
  textBox.UpdateErrorFrameAndFocus(false, true);
 },
 UpdateConstrainProportionsCoef: function(width, height) {
  if ((width == height) || (height == 0))
   this.constrainProportionsCoef_WH = 1;
  else
   this.constrainProportionsCoef_WH = width/height;
  this.initialWidth = width;
  this.initialHeight = height;
 },
 UpdateSizeSpinEditsWithConstrainProportions: function(sizeType) {
  var widthVal = _dxeSpnWidth.GetText();
  var heightVal = _dxeSpnHeight.GetText();
  if(widthVal === "" || heightVal === "") {
   if(widthVal == heightVal)
    this.UpdateSizeFields(this.initialWidth, this.initialHeight);
   return;
  }
  var newWidth = _dxeSpnWidth.GetNumber();
  var newHeight = _dxeSpnHeight.GetNumber();
  switch(sizeType) {
   case "width":
    _dxeSpnWidth.SaveSelectionStartAndEndPosition();
    newHeight = _dxeSpnWidth.GetParsedNumber()/this.constrainProportionsCoef_WH;
    _dxeSpnHeight.SetValue(Math.floor(newHeight));
    _dxeSpnWidth.RestoreSelectionStartAndEndPosition();
    break;
   case "height":
    _dxeSpnHeight.SaveSelectionStartAndEndPosition();
    newWidth = _dxeSpnHeight.GetParsedNumber()*this.constrainProportionsCoef_WH;
    _dxeSpnWidth.SetValue(Math.floor(newWidth));
    _dxeSpnHeight.RestoreSelectionStartAndEndPosition();
    break;
  }
 }, 
 UpdateSizeFields: function(imageWidth, imageHeight) {
  var imageWidth = imageWidth >= 0 ? imageWidth : 0;
  var imageHeight = imageHeight >=0 ? imageHeight: 0
  if(typeof(_dxeSpnWidth) != "undefined")
   _dxeSpnWidth.SetValue(imageWidth);
  if(typeof(_dxeSpnHeight) != "undefined")
   _dxeSpnHeight.SetValue(imageHeight);
  this.UpdateConstrainProportionsCoef(imageWidth, imageHeight);
 },
 UpdateSizeFieldsAfterLoad: function(imageWidth, imageHeight) {
  if (!this.IsFieldInitializing())
   this.UpdateSizeFields(imageWidth, imageHeight);
  else
   this.fieldInitializing = false;
 },
 UpdateThumbnailFileName: function(src) {
  var thumbnailFileNameTextBox = this.GetThumbnailFileNameTextBox();
  if(!thumbnailFileNameTextBox)
   return;
  var fileName = ASPxClientPath.GetFileNameWithoutExtension(src);
  if (fileName)
   fileName += "Thumbnail.jpg";
  thumbnailFileNameTextBox.SetText(fileName);
 }
});
InsertImageDialog.prototype.GetSelectedImage = function(htmlEditor) {
 var curSelection = ASPxClientHtmlEditorSelection.Create(htmlEditor);
 var containerElement = curSelection.GetParentElement();  
 return InsertImageDialog.prototype.GetImage(containerElement);
}
InsertImageDialog.prototype.GetImage = function(element) {
 return element.tagName == "IMG" ? element : _aspxGetParentByTagName(element, "img");
}
function aspxInsertImageSrcPaste() {
 setTimeout(function() {
  var src = typeof(_dxeTbxInsertImageUrl) != "undefined" ? _dxeTbxInsertImageUrl.GetText() : null
  if (src) aspxInsertImageSrcValueChanged(src);
 }, 0);
}
function aspxInsertImageSrcKeyUp(src) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null) curDialog.OnImageSrcChangedByTimer(src);
}
function aspxInsertImageSrcValueChanged(src) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null) curDialog.OnImageSrcChanged(src);
}
function aspxConstrainProportionsSwitchClick(evt, invisibleSwitchImgID) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null) 
  return curDialog.OnConstrainProportionsSwitchClick(evt, invisibleSwitchImgID);
}
function aspxImageUploadStart() {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null)
  return curDialog.OnImageUploadStart();
}
function aspxImageUploadComplete(args) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null)
  return curDialog.OnImageUploadComplete(args);
}
function aspxImageUploadTextChanged() {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null)
  return curDialog.OnImageUploadTextChanged();
}
function aspxOnImageFromTypeChanged() {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null)
  return curDialog.OnImageFromTypeChanged();
}
function aspxTestExistingImageOnLoad(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null) curDialog.OnLoadTestExistingImage();
}
function aspxTestExistingImageOnError(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null) curDialog.OnErrorTestExistingImage();
}
function aspxSizeSpinNumberChanged(sizeType) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null) 
  return curDialog.OnSizeSpinNumberChanged(sizeType);
}
function aspxSizeSpinKeyUp(sizeType, htmlEvent) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null)
  return curDialog.OnSizeSpinKeyUp(sizeType, htmlEvent);
}
InsertTableDialog = _aspxCreateClass(ASPxHtmlEditorDialog, {
 DoCustomAction: function(result, cmdValue) {
  if (result)
   this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.INSERTTABLE_COMMAND, cmdValue, true);
 },
 GetDialogCaptionText: function() {
  return ASPxHtmlEditorDialogSR.InsertTable;
 },
 InitializeDialogFields: function(tableInfo) {
  this.SetDisplayColumnsAndRowsEditors(true);
 },
 SetFocusInField: function() {
  _aspxSetFocusToTextEditWithDelay(_dxeSpnTableColumns.name);
 },
 SetDisplayColumnsAndRowsEditors: function(display) {
  _dxeCkbColumnsEqualWidth.SetClientVisible(display);
  var row = this.GetRowsAndColumnsRowElement();
  _aspxSetElementDisplay(row, display);
  _aspxSetElementDisplay(_aspxHETableHelper.GetNextRow(row), display);
 },
 GetRowsAndColumnsRowElement: function() {
  return _aspxGetParentByTagName(_dxeSpnTableColumns.GetMainElement(), "TR");
 }
});
TablePropertiesDialog = _aspxCreateClass(InsertTableDialog, {
 DoCustomAction: function(result, cmdValue) {
  if (result) {
   cmdValue = { tableElement: this.selectedTable, tableProperties: cmdValue.tableProperties };
   this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.CHANGETABLE_COMMAND, cmdValue, true);
  }
 },
 GetInitInfoObject: function() {
  var tableInfoObject = {
   borderWidth: null,
   borderColor: "",
   backgroundColor: "",
   width: "",
   height: "",
   cellPadding: "",
   cellSpacing: "",
   align: null,
   accessibility: null
  };
  this.selectedTable = _aspxHETableHelper.GetTable(this.selectionInfo.selectedElement);
  if (this.selectedTable)
   tableInfoObject = _aspxHETableHelper.GetTableProperties(this.selectedTable);
  return tableInfoObject;
 },
 InitializeDialogFields: function(tableInfo) {
  this.SetDisplayColumnsAndRowsEditors(false);
  TablePropertiesDialog.SetSizeEditors(_dxeCmbTableWidth, _dxeCmbTableWidthType, _dxeTxbTableWidth, tableInfo.width);
  TablePropertiesDialog.SetSizeEditors(_dxeCmbTableHeight, _dxeCmbTableHeightType, _dxeTxbTableHeight, tableInfo.height);
  if(typeof(_dxeSpnCellPadding) != "undefined")
   _dxeSpnCellPadding.SetText(tableInfo.cellPadding);
  if(typeof(_dxeSpnCellSpacing) != "undefined")
   _dxeSpnCellSpacing.SetText(tableInfo.cellSpacing);
  if(typeof(_dxeCmbTableAlign) != "undefined")
   _dxeCmbTableAlign.SetValue(tableInfo.align);
  if(tableInfo.align && typeof(_dxeCmbTableAlign) != "undefined")
   _dxeCmbTableAlign.SetValue(tableInfo.align.toLowerCase());
  if(typeof(_dxeSpnTableBorderSize) != "undefined")
   _dxeSpnTableBorderSize.SetText(tableInfo.borderWidth);
  if(typeof(_dxeTxbTableBorderColor) != "undefined")
   _dxeTxbTableBorderColor.SetText(tableInfo.borderColor);
  if(typeof(_dxeTxbTableBackgroundColor) != "undefined")
   _dxeTxbTableBackgroundColor.SetText(tableInfo.backgroundColor);
  var accessibility = tableInfo.accessibility;
  if(typeof(_dxeTxbTableSummary) != "undefined")
   _dxeTxbTableSummary.SetText(accessibility.summary);
  if(typeof(_dxeTxbTableCaption) != "undefined")
   _dxeTxbTableCaption.SetText(accessibility.caption);
  if(typeof(_dxeCmbTableHeaders) != "undefined")
   _dxeCmbTableHeaders.SetValue(accessibility.headers);
 },
 GetDialogCaptionText: function() {
  return ASPxHtmlEditorDialogSR.ChangeTable;
 },
 SetFocusInField: function() {
  if(typeof(_dxeCmbTableWidth) == "undefined")
   return;
  _aspxSetFocusToTextEditWithDelay(_dxeCmbTableWidth.name);
 }
});
TablePropertiesDialog.SetSizeEditors = function(cmb, cmbType, spinEdit, value) {
 cmb.SetValue(value);
 var selectedItem = cmb.GetSelectedItem();
 if (selectedItem == null) {
  cmb.SetValue("custom");
  var res = _aspxHETableHelper.ParseSizeString(value);
  if (res.valueType) {
   value = res.value;
   cmbType.SetValue(res.valueType);
   cmbType.RaiseValueChangedEvent();
  }
  spinEdit.SetText(value);
 }
 cmb.RaiseValueChangedEvent();
}
TableCellPropertiesDialog = _aspxCreateClass(ASPxHtmlEditorDialog, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.showApplyToAllCellsButton = true;
  this.showAlignmentSettings = true;
  this.showAppearanceSettings = true;
 },
 DoCustomAction: function(result, cmdValue) {
  if (result) {
   cmdValue = { cellElement: this.selectedCell, properties: cmdValue };
   this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.CHANGETABLECELL_COMMAND, cmdValue, true);
  }
 },
 GetDialogCaptionText: function() {
  return ASPxHtmlEditorDialogSR.ChangeTableCell;
 },
 InitializeDialogFields: function(cellInfo) {
  this.ChangeEditorContainerVisibility(_dxeRPTableColumnSize, _dxeRPTableLayout, true);
  this.ChangeEditorContainerVisibility(_dxeRPTableLayout, _dxeRPAppearanceLayout, this.showAlignmentSettings);
  this.ChangeEditorContainerVisibility(_dxeRPAppearanceLayout, null, this.showAppearanceSettings);
  _dxeCkbApplyForAllElements.SetVisible(this.showApplyToAllCellsButton);
  _dxeTxbTableColumnBackgroundColor.SetText(cellInfo.backgroundColor);
  _dxeCmbTableColumnAlign.SetValue(cellInfo.align);
  if(cellInfo.align)
   _dxeCmbTableColumnAlign.SetValue(cellInfo.align.toLowerCase());
  _dxeCmbTableColumnVAlign.SetValue(cellInfo.vAlign);
  if(cellInfo.vAlign)
   _dxeCmbTableColumnVAlign.SetValue(cellInfo.vAlign.toLowerCase());
 },
 GetInitInfoObject: function() {
  var cellInfoObject = {
   backgroundColor: "",
   align: null,
   vAlign: null
  };
  this.selectedCell = _aspxHETableHelper.GetTableCellBySelection(this.selectionInfo.selectedElement,
                  this.selectionInfo.endSelectedElement);
  if (this.selectedCell)
   cellInfoObject = _aspxHETableHelper.GetCellProperties(this.selectedCell);
  return cellInfoObject;
 },
 SetFocusInField: function() {
  _aspxSetFocusToTextEditWithDelay(_dxeCmbTableColumnAlign.name);
 },
 ChangeEditorContainerVisibility: function(containerControl, secondControl, display) {
  containerControl.SetVisible(display);
  var firstMainElem = containerControl.GetMainElement();
  var secondMainElem = secondControl ? secondControl.GetMainElement() : null;
  if (firstMainElem && secondMainElem) {
   var curElem = firstMainElem.nextSibling;
   while (curElem && curElem != secondMainElem) {
    if (curElem.nodeType == 1)
     _aspxSetElementDisplay(curElem, display);
    curElem = curElem.nextSibling;
   }
  }
 },
 OnComplete: function(result, params) {
  ASPxHtmlEditorDialog.prototype.OnComplete.call(this, result, params);
  _dxeCkbApplyForAllElements.SetChecked(false);
 },
 SetWidthEditorsDisplay: function(display) {
  _aspxSetElementDisplay(_aspxGetElementById(this.GetWidthEditorsTRID()), display);
 },
 SetHeightEditorsDisplay: function(display) {
  _aspxSetElementDisplay(_aspxGetElementById(this.GetHeightEditorsTRID()), display);
 },
 GetWidthEditorsTRID: function() {
  return this.htmlEditor.name + "_dxeColumnWidthCell";
 },
 GetHeightEditorsTRID: function() {
  return this.htmlEditor.name + "_dxeColumnHeightCell";
 }
});
TableColumnPropertiesDialog = _aspxCreateClass(TableCellPropertiesDialog, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.showApplyToAllCellsButton = false;
 },
 DoCustomAction: function(result, cmdValue) {
  if (result) {
   cmdValue = { cell: this.selectedCell, properties: cmdValue };
   this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.CHANGETABLECOLUMN_COMMAND, cmdValue, true);
  }
 },
 SetFocusInField: function() {
  var editorForFocus = typeof(_dxeCmbTableColumnAlign) != "undefined" ? _dxeCmbTableColumnAlign : _dxeCmbTableColumnWidth;
  _aspxSetFocusToTextEditWithDelay(editorForFocus.name);
 },
 GetInitInfoObject: function() {
  var columnInfoObject = {
   backgroundColor: "",
   width: "",
   align: null,
   vAlign: null
  };
  var table = _aspxHETableHelper.GetTable(this.selectionInfo.selectedElement);
  this.selectedCell = _aspxHETableHelper.GetTableCellBySelection(this.selectionInfo.selectedElement,
                 this.selectionInfo.endSelectedElement);
  if (table)
   columnInfoObject = _aspxHETableHelper.GetColumnProperties(this.selectedCell);
  return columnInfoObject;
 },
 InitializeDialogFields: function(columnInfo) {
  _dxeTxbTableColumnBackgroundColor.SetText(columnInfo.backgroundColor);
  this.SetWidthEditorsDisplay(true);
  this.SetHeightEditorsDisplay(false);
  this.ChangeEditorContainerVisibility(_dxeRPTableColumnSize, _dxeRPTableLayout, true);
  this.ChangeEditorContainerVisibility(_dxeRPTableLayout, _dxeRPAppearanceLayout, this.showAlignmentSettings);
  this.ChangeEditorContainerVisibility(_dxeRPAppearanceLayout, null, this.showAppearanceSettings);
  _dxeCkbApplyForAllElements.SetVisible(this.showApplyToAllCellsButton);
  if(typeof(_dxeCmbTableColumnAlign) != "undefined")
   _dxeCmbTableColumnAlign.SetValue(columnInfo.align);
  if (columnInfo.align)
   _dxeCmbTableColumnAlign.SetValue(columnInfo.align.toLowerCase());
  if(typeof(_dxeCmbTableColumnVAlign) != "undefined")
   _dxeCmbTableColumnVAlign.SetValue(columnInfo.vAlign);
  if (typeof(_dxeCmbTableColumnVAlign) != "undefined" && columnInfo.vAlign)
   _dxeCmbTableColumnVAlign.SetValue(columnInfo.vAlign.toLowerCase());
  TablePropertiesDialog.SetSizeEditors(_dxeCmbTableColumnWidth, _dxeCmbTableColumnWidthType,
           _dxeTxbTableColumnWidth, columnInfo.width);
 },
 GetDialogCaptionText: function() {
  return ASPxHtmlEditorDialogSR.ChangeTableColumn;
 }
});
TableRowPropertiesDialog = _aspxCreateClass(TableCellPropertiesDialog, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.showApplyToAllCellsButton = false;
 },
 DoCustomAction: function(result, cmdValue) {
  if (result) {
   cmdValue = { cell: this.selectedCell, properties: cmdValue };
   this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.CHANGETABLEROW_COMMAND, cmdValue, true);
  }
 },
 SetFocusInField: function() {
  _aspxSetFocusToTextEditWithDelay(_dxeCmbTableColumnAlign.name);
 },
 GetInitInfoObject: function() {
  var rowInfoObject = {
   backgroundColor: "",
   height: "",
   align: null,
   vAlign: null
  };
  var table = _aspxHETableHelper.GetTable(this.selectionInfo.selectedElement);
  this.selectedCell = _aspxHETableHelper.GetTableCellBySelection(this.selectionInfo.selectedElement,
                 this.selectionInfo.endSelectedElement);
  if (this.selectedCell)
   rowInfoObject = _aspxHETableHelper.GetRowProperties(this.selectedCell);
  return rowInfoObject;
 },
 GetDialogCaptionText: function() {
  return ASPxHtmlEditorDialogSR.ChangeTableRow;
 },
 InitializeDialogFields: function(rowInfo) {
  _dxeTxbTableColumnBackgroundColor.SetText(rowInfo.backgroundColor);
  this.SetWidthEditorsDisplay(false);
  this.SetHeightEditorsDisplay(true);
  this.ChangeEditorContainerVisibility(_dxeRPTableColumnSize, _dxeRPTableLayout, true);
  this.ChangeEditorContainerVisibility(_dxeRPTableLayout, _dxeRPAppearanceLayout, this.showAlignmentSettings);
  this.ChangeEditorContainerVisibility(_dxeRPAppearanceLayout, null, this.showAppearanceSettings);
  _dxeCkbApplyForAllElements.SetVisible(this.showApplyToAllCellsButton);
  _dxeCmbTableColumnAlign.SetValue(rowInfo.align);
  if (rowInfo.align)
   _dxeCmbTableColumnAlign.SetValue(rowInfo.align.toLowerCase());
  _dxeCmbTableColumnVAlign.SetValue(rowInfo.vAlign);
  if (rowInfo.vAlign)
   _dxeCmbTableColumnVAlign.SetValue(rowInfo.vAlign.toLowerCase());
  TablePropertiesDialog.SetSizeEditors(_dxeCmbTableRowHeight, _dxeCmbTableRowHeightType, _dxeTxbTableRowHeight, rowInfo.height);
 }
});
PasteFromWordDialog = _aspxCreateClass(ASPxHtmlEditorDialog, {
 DoCustomAction: function(result, cmdValue) {
  _aspxRemoveElement(this.GetPasteContainerIFrame());
  if (result && cmdValue.html)
   this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.PASTEFROMWORD_COMMAND, cmdValue, true);
 },
 InitializeDialogFields: function() {
  var iframe = this.GetPasteContainerIFrame();
  if(!iframe.contentWindow) { 
   var src = iframe.src;
   iframe.src = src;
  }
  var contentDocument = this.GetPasteContainerIFrame().contentWindow.document;
  contentDocument.open();
  contentDocument.write("<head><style></style></head><body></body>");
  contentDocument.close();
  if (__aspxIE)
   contentDocument.body.contentEditable = true;
  else {
   contentDocument.body.spellcheck = false;
   contentDocument["designMode"] = "on";
  }
  _aspxAttachEventToElement(contentDocument, "keypress", aspxHEPasteFromWordContainerKeyPress);
  contentDocument.body.style.margin = "0px";
  contentDocument.body.style.padding = "2px";
  contentDocument.body.style.border = "Solid 0px";
  var designViewDoc = this.htmlEditor.GetDesignViewDocument();
  contentDocument.body.className = designViewDoc.body.className;
  var childNodes = _aspxGetHeadElementOrCreateIfNotExist(designViewDoc).childNodes;
  var headElement = _aspxGetHeadElementOrCreateIfNotExist(contentDocument);
  for(var i = 0, child; child = childNodes[i]; i++) {
   var nodeName = child.nodeName.toLowerCase();
   if((nodeName == "style" && child.innerHTML) || (nodeName == "link"))
    headElement.appendChild(child.cloneNode(true));
  }
 },
 SetFocusInField: function() {
  _aspxSetTimeout("ASPxIFrame.GetWindow('" + this.GetPasteContainerIFrameName() + "').focus();", 500);
 },
 GetDialogCaptionText: function() {
  return ASPxHtmlEditorDialogSR.PasteFromWord;
 },
 OnPasteContainerKeyPress: function(evt) {
  if (evt.keyCode == ASPxKey.Esc)
   this.HideDialog(evt);
 },
 GetPasteContainerIFrame: function() {
  return _aspxGetElementById(this.GetPasteContainerIFrameName());
 },
 GetPasteContainerIFrameName: function() {
  return this.htmlEditor.name + "_dxePasteFromWordContainer";
 }
});
function aspxHEPasteFromWordContainerKeyPress(evt) {
 var htmlEdit = aspxGetControlCollection().Get(__aspxCurrentControlNameInDialog);
 var curDialog = htmlEdit != null ? ASPxDialog.GetLastDialog(htmlEdit) : null;
 if (curDialog != null)
  return curDialog.OnPasteContainerKeyPress(evt);
}
var ASPxHtmlEditorDialogList = {};
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.INSERTLINK_DIALOG_COMMAND] = new InsertLinkDialog(ASPxClientCommandConsts.INSERTLINK_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.CHANGELINK_DIALOG_COMMAND] = new InsertLinkDialog(ASPxClientCommandConsts.INSERTLINK_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.INSERTIMAGE_DIALOG_COMMAND] = new InsertImageDialog(ASPxClientCommandConsts.INSERTIMAGE_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.CHANGEIMAGE_DIALOG_COMMAND] = new InsertImageDialog(ASPxClientCommandConsts.INSERTIMAGE_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.INSERTTABLE_DIALOG_COMMAND] = new InsertTableDialog(ASPxClientCommandConsts.INSERTTABLE_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.TABLEPROPERTIES_DIALOG_COMMAND] = new TablePropertiesDialog(ASPxClientCommandConsts.INSERTTABLE_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.TABLECELLPROPERTIES_DIALOG_COMMAND] = new TableCellPropertiesDialog(ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND] = new TableColumnPropertiesDialog(ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.TABLEROWPROPERTIES_DIALOG_COMMAND] = new TableRowPropertiesDialog(ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND);
ASPxHtmlEditorDialogList[ASPxClientCommandConsts.PASTEFROMWORDDIALOG_COMMAND] = new PasteFromWordDialog(ASPxClientCommandConsts.PASTEFROMWORDDIALOG_COMMAND);
var __aspxHEIsDocumentDragOver = false;
var __aspxHEDragDropDelay = 100;
var __aspxHEMarkID = "dxMID";
var __aspxHEMarkClassName = "dxMClassName";
var __aspxHEDesignViewDocumentCssClassName = "dxheDesignViewDoc";
var __aspxHEPreviewDocumentCssClassName = "dxhePreviewDoc";
var __aspxHEPreservedTagNamePrefix = "ASPxPreservedTag_";
var __aspxHEPreservedAttributeNamePrefix = "aspx-preserved-";
ASPxClientHtmlEditorIDSuffix = {
 ClientStateHiddenField: "_ClientState",
 ContentHtmlHiddenField: "_Html",
 StandardValidationHiddenField: "_SVHtml",
 CurrentDialogHiddenField: "_CurDialog",
 ValidationStateHiddenField: "_VS",
 CssFilesHiddenField: "_CssFiles",
 DesignViewIFrame: "_DesignIFrame",
 DesignViewCell: "_DesignViewCell",
 EditAreaCell: "_EdtCell",
 ErrorFrame: "_EF",
 ErrorTextCell: "_ETC",
 ErrorFrameCloseButton: "_EFCB",
 FakeFocusInput: "_FFI",
 FakeFocusAnchor: "_FFA",
 HtmlViewEdit: "_HtmlViewEdit",
 MainCell: "_MainCell",
 PopupDialogControl: "_DPP",
 PopupMenu: "_PPM",
 PreviewIFrame: "_PreviewIFrame",
 PreviewCell: "_PreviewCell",
 ButtonImageIdPostfix: "Img",
 TabControl: "_TC",
 Toolbar: "_TD",
 ToolbarRow: "_TBRow",
 StatusBarCell: "_SBarCell",
 SpellChecker : "_SC",
 SizeGrip : "_SG"
};
ASPxHtmlEditorEnterMode = {
 Default: "Default",
 BR: "BR",
 P: "P"
};
var __aspxHESaveImageToServerCallbackPrefix = "ImageToServer";
var __aspxHEThumbnailImageWidthCallbackPrefix = "TNIW";
var __aspxHEThumbnailImageHeightCallbackPrefix = "TNIH";
var __aspxHEThumbnailImageFileNameCallbackPrefix = "TNIF";
var __aspxHESwitchToDesignViewCallbackPrefix = "ProcessHtml_Design";
var __aspxHESwitchToHtmlViewCallbackPrefix = "ProcessHtml_Html";
var __aspxHESwitchToPreviewCallbackPrefix = "ProcessHtml_Preview";
var __aspxHESpellCheckingCallbackPrefix = "SpellCheck";
var __aspxHESpellCheckingLoadControlCallbackPrefix = "SpellCheckLoadControl";
var __aspxHESpellCheckerOptionsCallbackPrefix = "SpellCheckerOptions";
var __aspxHEFileManagerCallbackPrefix = "FileManager";
var __aspxSaveImageToServerErrorCallbackPrefix = "ISE";
var __aspxSaveImageToServerNewUrlCallbackPrefix = "ISU";
var __aspxContentEditableAttributeNameRegExp = "contenteditable";
var __aspxJSEventAttributeNameRegExp = "on[a-zA-Z][a-z]+";
var __aspxHETagsWithAttributeRegExpPattern = "<[a-zA-z][a-z\\d]*(?:\\s+[a-zA-Z][a-z]*\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')))*";
var __aspxJSEventHandlersRegExp = new RegExp("(" + __aspxHETagsWithAttributeRegExpPattern + ")(?:\\s+" + __aspxJSEventAttributeNameRegExp + "\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')))", "gi"); 
var __aspxJSTagsRegExpPattern = "<(script)([^>]*)>[\\s\\S]*?</(script)([^>]*)>";
var __aspxHEBrTagsRegExpPattern = "<br\\/\\>|<br \\/\\>|<br>";
var __aspxHEEmptyTagsRegExpPattern = "^<(p|div|address|h\\d|center|strong)(?=[ >])[^>]*>(?:\\s*|&nbsp;|" + __aspxHEBrTagsRegExpPattern + ")(<\\/\\1>)?$";
var __aspxHEEmptyHtmlRegExpPattern = "^(" + __aspxHEBrTagsRegExpPattern + "|&nbsp;)?$";
var __aspxProtectUrlsARegExpPattern = /<a(?=\s).*?\shref=((?:"[^">]+")|(?:'[^'>]+')|(?:[^"' >]+))/gi;
var __aspxProtectUrlsImgRegExpPattern = /<img(?=\s).*?\ssrc=((?:('|")[^>]+?(?:\2))|(?:[^"' >]+))/gi;
var __aspxProtectUrlsAreaRegExpPattern = /<area(?=\s).*?\shref=((?:(?:'|")[^"'>]+(?:'|"))|(?:[^"' >]+))/gi;
var __aspxRemoveSavedUrlsRegExpPattern = /\ssavedurl=((?:"[^">]+")|(?:'[^'>]+')|(?:[^"' >]+))/gi;
ASPxClientHtmlEditorView = {
 Design: "D",
 Html: "H",
 Preview: "P"
};
ASPxClientHtmlEditorCommandEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(commandName, parameter, isSuccessful) {
  this.constructor.prototype.constructor.call(this);
  this.commandName = commandName;
  this.parameter = parameter;
  this.isSuccessful = isSuccessful;
 }
});
ASPxClientHtmlEditorCustomDialogEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this);
  this.name = name;
 }
});
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase = _aspxCreateClass(ASPxClientHtmlEditorCustomDialogEventArgs, {
 constructor: function(name, status) {
  this.constructor.prototype.constructor.call(this, name);
  this.status = status;
 }
});
ASPxClientHtmlEditorCustomDialogClosingEventArgs = _aspxCreateClass(ASPxClientHtmlEditorCustomDialogCloseEventArgsBase, {
 constructor: function(name, status) {
  this.constructor.prototype.constructor.call(this, name, status);
  this.handled = false;
 }
});
ASPxClientHtmlEditorCustomDialogClosedEventArgs = _aspxCreateClass(ASPxClientHtmlEditorCustomDialogCloseEventArgsBase, {
 constructor: function(name, status, data) {
  this.constructor.prototype.constructor.call(this, name, status);
  this.data = data;
 }
});
ASPxClientHtmlEditorValidationEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(html, isValid, errorText) {
  this.constructor.prototype.constructor.call(this);
  this.html = html;
  this.isValid = isValid;
  this.errorText = errorText;
 }
});
var ASPxClientHtmlEditorTabEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this);
  this.name = name;
 }
});
ASPxClientHtmlEditorTabCancelEventArgs = _aspxCreateClass(ASPxClientHtmlEditorTabEventArgs, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.cancel = false;
 }
});
ASPxHtmlEditorsCollection = _aspxCreateClass(null, {
 constructor: function() {
  this.htmlEditors = {};
  this.lastActiveHtmlEditorName = "";
  var instance = this;
  aspxGetPostHandler().Post.AddHandler(function(s, e) {
   instance.Synchronize();
  });
 },
 Push: function(htmlEditor) {
  aspxGetPostHandler().Update(); 
  this.htmlEditors[htmlEditor.name] = htmlEditor;
 },
 Get: function(name) {
  var instance = this.htmlEditors[name];
  if(instance) {
   if(instance.GetMainElement())
    return instance;
   delete this.htmlEditors[name]; 
  }
  return null;
 },
 ForEach: function(action) {
  for(var name in this.htmlEditors) {
   var instance = this.Get(name);
   if(instance)
    action(instance);
  }
 },
 Synchronize: function() {
  this.ForEach(function(instance) {
   instance.Synchronize();
  });
 },
 FocusActiveEditorToolbar: function() {
  this.ForEach(function(instance) {
   if(instance.isInFocus)
    instance.FocusToolbar();
  });
 },
 AreEditorsValidInContainer: function(container, validationGroup, checkInvisibleEditors) {
  return this.ProcessingEditorsInContainer(function(editor) {
       return editor.GetIsValid() ;
      }, container, validationGroup, checkInvisibleEditors);
 },
 ClearEditorsInContainer: function(container, validationGroup, clearInvisibleEditors) {
  this.ProcessingEditorsInContainer(function(editor) {
   editor.SetHtml("");
   editor.SetIsValid(true);
   return true;
  }, container, validationGroup, clearInvisibleEditors);
 },
 ValidateEditorsInContainer: function(container, validationGroup, validateInvisibleEditors) {
  return this.ProcessingEditorsInContainer(function(editor) {
       return editor.OnValidation(ASPxValidationType.MassValidation);
      }, container, validationGroup, validateInvisibleEditors);
 },
 ProcessingEditorsInContainer: function(proc, container, validationGroup, validateInvisibleEditors) {
  var isSuccess = true;
  this.ForEach(function(instance) {
   if(container == null || _aspxGetIsParent(container, instance.GetMainElement())) {
    if((validationGroup == "" || instance.validationGroup == validationGroup)
       && (validateInvisibleEditors || instance.IsVisible())) {
     isSuccess = proc(instance) && isSuccess;
    }
   }
  });
  return isSuccess;
 },
 IsLastActive: function(htmlEditor) {
  return this.lastActiveHtmlEditorName == htmlEditor.name;
 },
 SetActive: function(htmlEditor) {
  this.lastActiveHtmlEditorName = htmlEditor.name;
 }
});
ASPxHtmlEditorsCollection.Get = function() {
 if(!ASPxHtmlEditorsCollection.instance)
  ASPxHtmlEditorsCollection.instance = new ASPxHtmlEditorsCollection();
 return ASPxHtmlEditorsCollection.instance;
};
ASPxHtmlEditorLayoutCalculator = _aspxCreateClass(null, {
 UpdateLayout: function(htmlEditor, activeView, isInitializing) {
  if(__aspxOpera)
   this.ShowHideViewAreasDependingOnActiveView(htmlEditor, activeView);
  if (!htmlEditor.IsVisible())
   return;
  this.HideViewAreas(htmlEditor);
  this.UpdateToolbarRowDisplay(htmlEditor, activeView);
  this.CollapseViewAreas(htmlEditor);
  this.ShowHideViewAreasDependingOnActiveView(htmlEditor, activeView);
  if (__aspxNetscapeFamily && !htmlEditor.IsHtmlView(activeView))
   this.FixToolbarTableBorder_NS(htmlEditor);
  var ffi = htmlEditor.GetFakeFocusInputElement();
  ffi.style.top = "0px"; 
  ffi.tabIndex = "-1"; 
  this.CalculateSizes(htmlEditor);
 },
 CalculateSizes: function(htmlEditor) {
  if(htmlEditor.currentHeight == 0){
   var mainElement = htmlEditor.GetMainElement();
   var width = _aspxPxToInt(mainElement.style.width);
   var height = _aspxPxToInt(mainElement.style.height);
   if(width == 0) { 
    var percentWidth = _aspxPercentageToFloat(mainElement.style.width) * 100;
    if(percentWidth > 0) {
     htmlEditor.isWidthDefinedInPercent = true;
     htmlEditor.initialMainElementWidth = mainElement.style.width;
     htmlEditor.SetClientStateFieldValue("CurrentWidth", Math.round(percentWidth));
     htmlEditor.percentSizeDiv = _aspxCreateHtmlElementFromString("<div style='height:0px;font-size:0px;line-height:0;width:100%;'></div>");
     _aspxInsertElementAfter(htmlEditor.percentSizeDiv, mainElement);
     mainElement.parentNode.style.width = htmlEditor.initialMainElementWidth;
    }
   }
   htmlEditor.currentHeight = (height == 0) ? mainElement.offsetHeight : height;
   htmlEditor.currentWidth = (width == 0) ? mainElement.offsetWidth : width;
   mainElement.style.height = "";
   mainElement.style.width = "";
  }
  htmlEditor.SetClientStateFieldValue("IsPercentWidth", htmlEditor.isWidthDefinedInPercent ? 1 : 0);
  if(htmlEditor.isFullscreenMode) {
   htmlEditor.AdjustSizeInFullscreen();
   return;
  }
  if(htmlEditor.isWidthDefinedInPercent)
   htmlEditor.AdjustSizeInPercent();
  else
   htmlEditor.SetWidthInternal(htmlEditor.currentWidth, true, true);
  htmlEditor.HideErrorFrame();
  htmlEditor.SetHeightInternal(htmlEditor.currentHeight, true, true);
  htmlEditor.UpdateErrorFrame();
 },
 ShowHideViewAreas: function(htmlEditor, showDesignView, showHtmlView, showPreview) {
  var designViewTable = htmlEditor.GetDesignViewTable();
  var htmlViewEdit = htmlEditor.GetHtmlViewEdit();
  var previewTable = htmlEditor.GetPreviewTable();
  if (designViewTable)
   _aspxSetElementDisplay(designViewTable, showDesignView);
  if (htmlViewEdit)
   htmlViewEdit.SetVisible(showHtmlView);
  if (previewTable)
   _aspxSetElementDisplay(previewTable, showPreview);
 },
 HideViewAreas: function(htmlEditor) {
  this.ShowHideViewAreas(htmlEditor, false, false, false);
 },
 UpdateToolbarRowDisplay: function(htmlEditor, activeView) {
  this.ShowHideToolbarRow(htmlEditor, this.IsToolbarRowVisible(htmlEditor, activeView));
 },
 IsToolbarRowVisible: function(htmlEditor, activeView) {
  return htmlEditor.IsDesignView(activeView);
 },
 ShowHideToolbarRow: function(htmlEditor, isDisplayed) {
  var toolbarRow = htmlEditor.GetToolbarRow();
  if (toolbarRow) {
   _aspxSetElementDisplay(toolbarRow, isDisplayed);
  }
 },
 CollapseViewAreas: function(htmlEditor) {
  var designViewCell = htmlEditor.GetDesignViewCell();
  var htmlEdit = htmlEditor.GetHtmlViewEdit();
  var previewCell = htmlEditor.GetPreviewCell();
  if (designViewCell)
   htmlEditor.SetEditElementHeight(designViewCell, 0);
  if (htmlEdit && htmlEdit.GetInputElement())
   htmlEditor.SetEditElementHeight(htmlEdit.GetInputElement(), 0);
  if (previewCell)
   htmlEditor.SetEditElementHeight(previewCell, 0);
 },
 ShowHideViewAreasDependingOnActiveView: function(htmlEditor, activeView) {
  this.ShowHideViewAreas(htmlEditor, htmlEditor.IsDesignView(activeView), htmlEditor.IsHtmlView(activeView), htmlEditor.IsPreview(activeView));
 },
 FixToolbarTableBorder_NS: function(htmlEditor) {
  var table = htmlEditor.GetToolbarTable();
  if (table) {
   var borderCollapse = table.style.borderCollapse;
   table.style.borderCollapse = "";
   table.style.borderCollapse = borderCollapse;
  }
 }
});
__aspxHtmlEditorLayoutCalculator = null;
function aspxGetHtmlEditorLayoutCalculator() {
 if (__aspxHtmlEditorLayoutCalculator == null)
  __aspxHtmlEditorLayoutCalculator = new ASPxHtmlEditorLayoutCalculator();
 return __aspxHtmlEditorLayoutCalculator;
}
ASPxClientHtmlEditorClientState = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
  this.clientStateInput = null;
  this.fieldsNameValueCollection = this.ParseStateStr();
 },
 GetClientStateInput: function() {
  if (this.clientStateInput == null)
   this.clientStateInput = this.FindClientStateInput();
  return this.clientStateInput;
 },
 FindClientStateInput: function() {
  return _aspxGetElementById(this.htmlEditor.name + ASPxClientHtmlEditorIDSuffix.ClientStateHiddenField);
 },
 SetFieldValue: function(name, value, saveToCookie) {
  this.fieldsNameValueCollection[name] = value;
  this.Save(this.fieldsNameValueCollection, saveToCookie);
 },
 ParseStateStr: function() {
  var state = this.GetClientStateInput().value;
  collection = {};
  var startIndex = 0;
  while(startIndex < state.length)
   startIndex = this.ParseFieldRecord(state, startIndex, collection);
  return collection;
 },
 ParseFieldRecord: function(state, startIndex, collection) {
  var indexOfFirstSeparator = state.indexOf(ASPxClientHtmlEditorClientState.RecordSeparator, startIndex);
  var fieldName = state.substr(startIndex, indexOfFirstSeparator - startIndex);
  startIndex += fieldName.length + 1;
  var indexOfSecondSeparator = state.indexOf(ASPxClientHtmlEditorClientState.RecordSeparator, startIndex);
  var fieldValueLengthStr = state.substr(startIndex, indexOfSecondSeparator - startIndex);
  startIndex += fieldValueLengthStr.length + 1;
  var fieldValueLength = parseInt(fieldValueLengthStr);
  var fieldValue = state.substr(startIndex, fieldValueLength);
  startIndex += fieldValueLength;
  collection[fieldName] = fieldValue;
  return startIndex;
 },
 Save: function(collection, saveToCookie) {
  var result = [];
  for(var fieldName in collection) {
   var value = collection[fieldName];
   if (typeof(value) == "number")
    value = value.toString();
   if (typeof(value) == "string")
    result.push(fieldName + ASPxClientHtmlEditorClientState.RecordSeparator + value.length + ASPxClientHtmlEditorClientState.RecordSeparator + value);
  }
  var state = result.join('');
  this.GetClientStateInput().value = state;
  if(saveToCookie && this.htmlEditor.cookieName != ""){
   _aspxDelCookie(this.htmlEditor.cookieName);
   _aspxSetCookie(this.htmlEditor.cookieName, state);
  }
 }
});
ASPxClientHtmlEditorClientState.RecordSeparator = '|';
ASPxClientHtmlEditor = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.allowDesignView = true;
  this.allowHtmlView = true;
  this.allowPreview = true;
  this.allowContextMenu = true;
  this.allowScripts = false;
  this.allowInsertDirectImageUrls = true;
  this.cssFileLinkArray = new Function("return " + this.GetCssFilesHiddenField().value)(); 
  this.designViewIFrameDocumentStyleCssText = "";
  this.previewIFrameDocumentStyleCssText = "";
  this.docStyleCssText = "";
  this.html = "";
  this.activeView = ASPxClientHtmlEditorView.Design;
  this.uploadImageFileDirectoryPath = "";
  this.updateDeprecatedElements = true;
  this.updateBoldItalic = true;
  this.clientValidationEnabled = false;
  this.validationPatterns = [];
  this.initialErrorText = "";
  this.errorText = "";
  this.isValid = true;
  this.validationGroup = "";
  this.notifyValidationSummariesToAcceptNewError = false;
  this.templateHoverErrorFrameCloseButton = null;
  this.enterMode = ASPxHtmlEditorEnterMode.Default;
  this.clientState = new ASPxClientHtmlEditorClientState(this);
  this.callbackOwner = null;
  this.isDraggingInsideEditor = false;
  this.isDropExternalContentExecuted = false;
  this.dragDropTimerID = null;
  this.beforePopupSelection = null;
  this.CustomCommand = new ASPxClientEvent();
  this.CommandExecuted = new ASPxClientEvent();
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.HtmlChanged = new ASPxClientEvent();
  this.CustomDialogOpened = new ASPxClientEvent();
  this.CustomDialogClosing = new ASPxClientEvent();
  this.CustomDialogClosed = new ASPxClientEvent();
  this.Validation = new ASPxClientEvent();
  this.ContextMenuShowing = new ASPxClientEvent();
  this.SpellingChecked = new ASPxClientEvent();
  this.ActiveTabChanged = new ASPxClientEvent();
  this.ActiveTabChanging = new ASPxClientEvent();
  this.inSharePoint = false;
  this.currentBgColor = null;
  this.currentFontColor = null;
  this.isWidthDefinedInPercent = false;
  this.initialMainElementWidth = -1;
  this.layoutCalculator = aspxGetHtmlEditorLayoutCalculator();
  this.eventListener = null;
  this.commandManager = null;
  this.isErrorOnCallback = false;
  this.isMouseDown = false;
  this.isInFocus = false;
  this.isSelectionRestored = false;
  this.keyboardManager = null;
  this.toolbar = null;
  this.shortcutCmdID = null;
  this.executingCommandName = null;
  this.pasteContainer = null;
  this.savedPreviewHtmlAfterSet = ""; 
  this.isPreventKeyPressOnShowContextMenu = false;
  this.isFocusedOnce = false;
  this.htmlBackup = null;
  this.isLockedUpdateToolbar = false;
  this.fontNames = [];
  this.formatBlockValues = [];
  this.customCssValueHashTablel = {};
  this.allowCommandListArray = [];
  this.cookieName = "";
  this.cachedElementsManager = new ASPxCachedElementsManager(this);
  this.sizingConfig.correction = true;
  this.sizingConfig.adjustControl = true;
  this.allowResize = false;
  this.minWidth = 0;
  this.minHeight = 0;
  this.maxWidth = 0;
  this.maxHeight = 0;
  this.currentHeight = 0;
  this.currentWidth = 0;
  this.resizeTempVars = {};
  this.percentResizeStarted = false;
  this.isFullscreenMode = false;
  this.fullscreenTempVars = {};
  this.selection = null;
  this.customComboBoxCollection = {};
  this.spellCheckerHelper = new ASPxClientHtmlEditor.SpellCheckerHelper(this);
  this.selectionHelper = new ASPxClientHtmlEditorSelection.ElementsSelectionHelper(this);
  this.customDialogsCaptions = {};
  this.shortcuts = null;
  this.suspendHCEvt = -1;
  this.unforcedFunctions = {};
  this.executeApplyStyle = [];
  this.executeRemoveFontStyle = [];
 },
 InlineInitialize: function() {
  this.htmlBackup = this.html;
  ASPxClientControl.prototype.InlineInitialize.call(this);
  var toolbar = this.GetToolbar();
  if(toolbar && toolbar.isRibbonMode())
   toolbar.SetVisible(false);
  this.InitAreas(true);
  if(!this.NeedToolbarRtlPrecorrection())
   this.UpdateLayout(this.activeView, false);
  if (__aspxIE && __aspxBrowserMajorVersion < 9 && this.IsDesignView()) 
    ASPxClientHtmlProcessingUtils.CleanWrongSizeAttribute(this.GetDesignViewIFrameDocumentBody());
  var tabs = this.GetTabControl();
  if(this.enabled && tabs && tabs.IsDOMInitialized())
   tabs.SetEnabled(false);
  if(this.IsStandardValidationEnabled())
   this.SynchronizeForStandardValidation();
  ASPxHtmlEditorsCollection.Get().Push(this);
  this.SynchronizeContentHtml();
 },
 IsStandardValidationEnabled: function() {
  return !!window.ValidatorHookupControl;
 },
 Initialize: function() {
  ASPxClientControl.prototype.Initialize.call(this);
  var toolbar = this.GetToolbar();
  if(toolbar && toolbar.isRibbonMode())
   toolbar.SetVisible(true);
  if(this.enabled)
   this.InitializeErrorFrames();
  this.UpdateClientValidationState();
  this.UpdateValidationSummaries(null , true );
  if(!__aspxOpera || !this.allowDesignView) 
   this.InitializeManagers();
  if(__aspxOpera && this.allowDesignView && toolbar && toolbar.extToolbarID)
   toolbar.attachExternalToolbarEvents(this);
  if(this.allowDesignView && __aspxWebKitFamily && this.GetDesignViewIFrameElement().loadUnhandled) 
   this.OnDesignViewIframeLoad();
  if(this.enabled && this.allowResize){
   var sizeGrip = this.GetSizeGrip();
   if(sizeGrip){
    _aspxPreventElementDrag(sizeGrip);
    var instance = this;
    _aspxAttachEventToElement(sizeGrip, "mousedown", function(evt) {
     instance.OnSizeGripMouseDown(evt);
    });
    _aspxAttachEventToDocument("mouseup", function(evt) {
     instance.OnSizeGripMouseUp(evt);
    });
    _aspxAttachEventToDocument("mousemove", function(evt) {
     instance.OnSizeGripMouseMove(evt);
    });
   }
  }
  var tabs = this.GetTabControl();
  if(this.enabled && tabs)
   tabs.SetEnabled(this.GetEnabled());
  if(!this.clientEnabled)
   this.SetEnabled(false);
 },
 AfterInitialize: function() {
  var initFunc = null;
  if(__aspxOpera && !this.iframeLoadCalled) {
   initFunc = this.RaiseInit;
   this.needRaiseInit = true;
   this.RaiseInit = function() { };
  }
  this.constructor.prototype.AfterInitialize.call(this);
  if(initFunc)
   this.RaiseInit = initFunc;
  if(__aspxIE) {
   this.oldFocusValue = this.isFocusedOnce;
   this.AdjustControl();
  }
  if(this.needUpdateErrorFrame)
   this.UpdateErrorFrame();
  var _this = this;
  var iframe = this.allowDesignView && (this.activeView == ASPxClientHtmlEditorView.Design || this.activeView == ASPxClientHtmlEditorView.Html) ? this.GetDesignViewIFrameElement() : null;
  iframe = !iframe && this.allowPreview ? this.GetPreviewIFrameElement() : iframe;
  if(iframe)
   _aspxAttachEventToElement(iframe, "load", function(evt) { _this.OnIFrameLoad(); });
  if(this.NeedReinitIFrame()) {
   setTimeout(function() {
    this.OnIFrameLoad();
   }.aspxBind(this), 0);
  }
  if(this.IsStandardValidationEnabled())
   this.RedirectStandardValidators();
  this.TryCallRaiseInit();
  if(this.IsDesignView() && __aspxIE)
   this.SetDesignModeAttribute();
  if(this.allowDesignView) {
   this.fontNames = this.GetFontNames();
   this.formatBlockValues = this.GetFormatBlockValues();
   this.InitCustomCssValueHashTablel();
   this.InitAllowCommandList();
  }
  window.setTimeout(function() {
   if(this.IsVisible() && !this.isLoaded)
    this.AdjustControlCore();
   if(__aspxIE && __aspxBrowserMajorVersion > 10 && this.htmlBackup != this.GetHtmlInternal())
    this.SetHtmlInternal(this.htmlBackup);
  }.aspxBind(this), 10);
 },
 RedirectStandardValidators: function() {
  var contentToValidate = this.GetStandardValidationHiddenField();
  if(contentToValidate.Validators) {
   for(var i = 0; i < contentToValidate.Validators.length; i++)
    contentToValidate.Validators[i].controltovalidate = contentToValidate.id;
  }
 },
 InitializeManagers: function() {
  this.commandManager = new CommandManager(this);
  this.keyboardManager = new ASPxHtmlEditorKeyboardManager();
  this.InitializeEventListner();
  this.InitializeShortcuts();
  if (this.allowDesignView) {
   this.toolbar = this.GetToolbar();
   if(this.htmlToDelayedSet) {
    this.SetHtml(this.htmlToDelayedSet.html, this.htmlToDelayedSet.clearUndoHistory);
    this.htmlToDelayedSet = null;
   }
  }
 },
 InitAreas: function(inlineInit) {
  if (this.allowDesignView)
   this.InitDesignViewIFrame();
  if (this.allowPreview)
   this.InitPreviewIFrame();
  if (this.allowHtmlView)
   this.InitHtmlViewArea();
  if(this.html != "") {
   var self = this;
   var handler = function() {
    self.SetHtmlInternal(self.html);
   };
   var IFrameBody = null;
   if(!this.IsHtmlView())
    IFrameBody = this.IsDesignView() ? this.GetDesignViewIFrameDocumentBody() : this.GetPreviewIFrameDocumentBody();
   if(!this.IsHtmlView() && !IFrameBody) {
    var IFrameElement = this.IsDesignView() ? this.GetDesignViewIFrameElement() : this.GetPreviewIFrameElement();
    _aspxAttachEventToElement(IFrameElement, "load", handler);
   } else {
    handler();
   }
  }
  if(this.IsDesignView() && (!__aspxIE || !inlineInit))
   this.SetDesignModeAttribute();
 },
 InitializeErrorFrames: function() {
  this.initialErrorText = this.errorText;
  this.CreateErrorFrames();
 },
 InitDesignViewIFrame: function() {
  this.InitIFrame(this.GetDesignViewIFrameName(), "", this.cssFileLinkArray);
  this.InitDesignViewIFrameStyle();
 },
 InitPreviewIFrame: function() {
  this.InitIFrame(this.GetPreviewIFrameName(), "", this.cssFileLinkArray);
  this.InitPreviewIFrameStyle();
 },
 InitHtmlViewArea: function() {
  this.DisableSpellCheckAttribute(this.GetHtmlViewEdit().GetInputElement());
  this.GetHtmlViewEdit().heightCorrectionRequired = false;
  if(__aspxWebKitFamily)
   this.GetHtmlViewEdit().GetInputElement().style.resize = "none"; 
 },
 InitializeEventListner: function() {
  this.eventListener = new EventListener(this);
 },
 InitializeShortcuts: function() {
  var scs = ASPxHtmlEditorKeyboardManager.Shortcuts;
  for(var i = 0; i < scs.length; i++)
   this.keyboardManager.AddShortcut(scs[i][1], scs[i][0]);
  if(this.shortcuts) {
   for(var key in this.shortcuts) {
    if(this.shortcuts.hasOwnProperty(key) && key != "None")
     this.keyboardManager.AddShortcut(key, this.shortcuts[key]);
   }
  }
  this.shortcutCmdID = null;
 },
 InitIFrame: function(iframeName, bodyContentHtml, cssFileLinkArray) {
  var doc = ASPxIFrame.GetDocument(iframeName);
  var element = ASPxIFrame.GetElement(iframeName);
  if (doc != null && element != null) {
   this.InitIFrameDocument(doc, bodyContentHtml, cssFileLinkArray);
   if (__aspxIE)
    doc.body.style.paddingBottom = 2;
   if (__aspxOpera)
    doc.body.style.height = "100%";
   element.style.height = "100%";
   doc.body.className = element.className;
   if(this.rtl)
    doc.body.dir = "rtl";
  }
 },
 InitIFrameDocument: function(doc, bodyContentHtml, cssFileLinkArray) {
  doc.open();
  doc.write(this.GetIFrameDocumentHtml(bodyContentHtml));
  doc.close();
  if(this.docStyleCssText)
   doc.body.style.cssText = this.docStyleCssText;
  doc.body.style.borderWidth = 0;
  this.DisableSpellCheckAttribute(doc.body);
  this.AddCssFileLinksToDocument(doc, cssFileLinkArray);
 },
 InitDesignViewIFrameStyle: function() {
  if (this.designViewIFrameDocumentStyleCssText != "") {
   var designViewIFrameDocumentStyleSheet = _aspxCreateStyleSheetInDocument(this.GetDesignViewDocument());
   _aspxAddStyleSheetRule(designViewIFrameDocumentStyleSheet,
      "." + __aspxHEDesignViewDocumentCssClassName, this.designViewIFrameDocumentStyleCssText);
   this.GetDesignViewIFrameDocumentBody().className += " " + __aspxHEDesignViewDocumentCssClassName;
  }
 },
 InitPreviewIFrameStyle: function() {
  if (this.previewIFrameDocumentStyleCssText != "") {
   var previewIFrameDocumentStyleSheet = _aspxCreateStyleSheetInDocument(this.GetPreviewDocument());
   _aspxAddStyleSheetRule(previewIFrameDocumentStyleSheet,
      "." + __aspxHEPreviewDocumentCssClassName, this.previewIFrameDocumentStyleCssText);
   this.GetPreviewIFrameDocumentBody().className += " " + __aspxHEPreviewDocumentCssClassName;
  }
 },
 AddCssFileLinksToDocument: function(doc, linkArray) {
  for (var i = 0; i < linkArray.length; i++) {
   _aspxAddStyleSheetLinkToDocument(doc, linkArray[i]);
  }
 },
 OnIFrameLoad: function() {
  if(this.commandManager && !(__aspxIE && __aspxBrowserMajorVersion < 9) && !this.iframeLoading) { 
   this.iframeLoading = true;
   if(this.NeedReinitIFrame()) {
    this.InitAreas();
    this.InitializeEventListner();
   }
   if(_aspxIsExists(this.htmlBackup))
    this.SetHtmlInternal(this.htmlBackup);
   window.setTimeout(function() {
    this.AdjustControl();
    if(__aspxOpera)
     this.iframeLoading = false;
    this.RestoreFakeNode();  
   }.aspxBind(this), 10);
   if(!__aspxOpera)
    this.iframeLoading = false;
  }
 },
 RestoreFakeNode: function() {
  var doc = this.GetDesignViewDocument();
  if(__aspxNetscapeFamily && doc && doc.body.childNodes.length == 0) {
   var newElement = doc.createElement("BR");
   doc.body.appendChild(newElement);
   setTimeout(function() {
    newElement.parentElement.removeChild(newElement);
   }.aspxBind(this), 50);
  }
 },
 IsIFrameLoaded: function(iframeName) {
  var doc = ASPxIFrame.GetDocument(iframeName);
  return !!doc && !!doc.body.className;
 },
 NeedReinitIFrame: function() {
  if(this.activeView == ASPxClientHtmlEditorView.Design)
   return !this.IsIFrameLoaded(this.GetDesignViewIFrameName());
  else if(this.activeView == ASPxClientHtmlEditorView.Preview)
   return !this.IsIFrameLoaded(this.GetPreviewIFrameName());
  return false;
 },
 GetFontNames: function() {
  var result = __aspxDefaultFontNames;
  var toolbar = this.GetToolbar();
  if(toolbar) {
   var itemValues = toolbar.getItemTemplateValuesByName(ASPxClientCommandConsts.FONTNAME_COMMAND);
   var compare = function(itemValue, value) {
    return itemValue.toLowerCase() == value.toLowerCase();
   };
   for(var i = 0, value; value = itemValues[i]; i++) {
    if(_aspxArrayIndexOf(result, value, compare) == -1)
     result.push(value);
   }
  }
  return result;
 },
 GetFormatBlockValues: function() {
  var result = [];
  var toolbar = this.GetToolbar();
  if(toolbar) {
   var itemValues = toolbar.getItemTemplateValuesByName(ASPxClientCommandConsts.FORMATBLOCK_COMMAND);
   for(var i = 0, itemValue; itemValue = itemValues[i]; i++)
    result.push(itemValue);
  }
  return result;
 },
 InitCustomCssValueHashTablel: function() {
  var toolbar = this.GetToolbar();
  if(toolbar) {
   var itemValues = toolbar.getItemTemplateValuesByName(ASPxClientCommandConsts.APPLYCSS_COMMAND);
   for(var i = 0, itemValue; itemValue = itemValues[i]; i++) {
    var valueArray = itemValue.split("|");
    this.customCssValueHashTablel[itemValue] = { tagName: valueArray[0], cssClass: valueArray[1] };
   }
  }
 },
 InitAllowCommandList: function() {
  var toolbar = this.GetToolbar();
  if(toolbar)
   this.allowCommandListArray = toolbar.getAllowCommandListArray(ASPxHtmlEditorCommandList);
 },
 SetClientStateFieldValue: function(name, value, saveToCookie) {
  this.clientState.SetFieldValue(name, value, saveToCookie);
 },
 GetDesignViewCell: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.DesignViewCell);
 },
 GetDesignViewTable: function() {
  return _aspxGetParentByTagName(this.GetDesignViewCell(), "table");
 },
 GetPreviewTable: function() {
  return _aspxGetParentByTagName(this.GetPreviewCell(), "table");
 },
 GetPreviewCell: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.PreviewCell);
 },
 GetHtmlViewEditCell: function() {
  var htmlViewEditTable = _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.HtmlViewEdit);
  return _aspxGetChildByTagName(htmlViewEditTable, "TD", 0);
 },
 GetDesignViewDocument: function() {
  if(!this.allowDesignView)
   return null;
  return ASPxIFrame.GetDocument(this.GetDesignViewIFrameName());
 },
 GetDesignViewIFrameDocument: function() {
  return this.GetDesignViewDocument();
 },
 GetDesignViewIFrameDocumentBody: function() {
  return ASPxIFrame.GetDocumentBody(this.GetDesignViewIFrameName());
 },
 GetDesignViewIFrameWindow: function() {
  return ASPxIFrame.GetWindow(this.GetDesignViewIFrameName());
 },
 GetEditAreaCell: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.EditAreaCell);
 },
 GetViewCellID: function(view) {
  if(view == ASPxClientHtmlEditorView.Design)
   return ASPxClientHtmlEditorIDSuffix.DesignViewCell;
  if(view == ASPxClientHtmlEditorView.Html)
   return ASPxClientHtmlEditorIDSuffix.HtmlViewEdit;
  if(view == ASPxClientHtmlEditorView.Preview)
   return ASPxClientHtmlEditorIDSuffix.PreviewCell;
  return "";
 },
 GetErrorFrameID: function(view) {
  return this.name + this.GetViewCellID(view) + ASPxClientHtmlEditorIDSuffix.ErrorFrame;
 },
 GetErrorTextCellID: function(view) {
  return this.name + this.GetViewCellID(view) + ASPxClientHtmlEditorIDSuffix.ErrorTextCell;
 },
 GetErrorFrameCloseButtonCellID: function(view) {
  return this.name + this.GetViewCellID(view) + ASPxClientHtmlEditorIDSuffix.ErrorFrameCloseButton;
 },
 GetTemplateErrorFrameID: function() {
  return this.name + ASPxClientHtmlEditorIDSuffix.ErrorFrame;
 },
 GetErrorFrame: function(view) {
  return _aspxGetElementById(this.GetErrorFrameID(view));
 },
 GetErrorTextCell: function(view) {
  return _aspxGetElementById(this.GetErrorTextCellID(view));
 },
 GetTemplateErrorFrame: function() {
  return _aspxGetElementById(this.GetTemplateErrorFrameID());
 },
 GetDialogPopupControl: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientHtmlEditorIDSuffix.PopupDialogControl);
 },
 GetDesignViewIFrameElement: function() {
  return ASPxIFrame.GetElement(this.GetDesignViewIFrameName());
 },
 GetDesignViewIFrameName: function() {
  return this.name + ASPxClientHtmlEditorIDSuffix.DesignViewIFrame;
 },
 GetPreviewIFrameName: function() {
  return this.name + ASPxClientHtmlEditorIDSuffix.PreviewIFrame;
 },
 GetPreviewIFrameElement: function() {
  return ASPxIFrame.GetElement(this.GetPreviewIFrameName());
 },
 GetPreviewIFrameWindow: function() {
  return ASPxIFrame.GetWindow(this.GetPreviewIFrameName());
 },
 GetPreviewDocument: function() {
  if(!this.allowPreview)
   return null;
  return ASPxIFrame.GetDocument(this.GetPreviewIFrameName());
 },
 GetPreviewIFrameDocumentBody: function() {
  return ASPxIFrame.GetDocumentBody(this.GetPreviewIFrameName());
 },
 GetElementDocument: function(element) {
  return element.ownerDocument || element.document;
 },
 GetFakeFocusInputElement: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.FakeFocusInput);
 },
 GetFakeFocusAnchorElement: function() {
  var element = _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.FakeFocusAnchor);
  if(!element || !element.parentNode) {
   element = document.createElement("A");
   _aspxSetAttribute(element, "href", "javascript:void('0')");
   _aspxInsertElementAfter(element, this.GetMainElement());
  }
  return element;
 },
 GetHtmlViewEdit: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientHtmlEditorIDSuffix.HtmlViewEdit);
 },
 GetMainCell: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.MainCell);
 },
 GetContextMenu: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientHtmlEditorIDSuffix.PopupMenu);
 },
 GetToolbar: function() { 
  return aspxGetControlCollection().Get(this.name + ASPxClientHtmlEditorIDSuffix.Toolbar);
 },
 GetTabControl: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientHtmlEditorIDSuffix.TabControl);
 },
 GetRibbon: function() {
  var toolbar = this.GetToolbar();
  return toolbar && toolbar.getRibbon();
 },
 GetToolbarRow: function() {
  return this.GetChild(ASPxClientHtmlEditorIDSuffix.ToolbarRow);
 },
 GetToolbarTable: function() {
  return _aspxGetParentByTagName(this.GetToolbarRow(), "table");
 },
 GetToolbarCell: function() {
  return _aspxGetChildByTagName(this.GetToolbarRow(), "td", 0);
 },
 GetStatusBarCell: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.StatusBarCell);
 },
 GetSizeGrip: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.SizeGrip);
 },
 GetHiddenField: function(key, postfix, toMainCell) {
  var hiddenField = this[key];
  if(!hiddenField) {
   var hiddenFieldName = this.name + postfix;
   this[key] = hiddenField = _aspxCreateHiddenField(hiddenFieldName, hiddenFieldName);
   var container = toMainCell ? this.GetMainCell() : this.GetMainElement().parentNode;
   container.appendChild(hiddenField);
  }
  return hiddenField;
 },
 GetCurrentDialogHiddenField: function() {
  return this.GetHiddenField("currentDialogHiddenField", ASPxClientHtmlEditorIDSuffix.CurrentDialogHiddenField);
 },
 GetHtmlSyncHiddenField: function() {
  return this.GetHiddenField("contentHtmlHiddenField", ASPxClientHtmlEditorIDSuffix.ContentHtmlHiddenField);
 },
 GetStandardValidationHiddenField: function() {
  return this.GetHiddenField("standardValidationHiddenField", ASPxClientHtmlEditorIDSuffix.StandardValidationHiddenField, true);
 },
 GetValidationStateHiddenField: function() {
  return this.GetHiddenField("validationStateHiddenField", ASPxClientHtmlEditorIDSuffix.ValidationStateHiddenField);
 },
 GetCssFilesHiddenField: function() {
  return _aspxGetElementById(this.name + ASPxClientHtmlEditorIDSuffix.CssFilesHiddenField);
 },
 UpdateLayout: function(activeView, isInitializing) {
  if(this.GetMainElement().offsetWidth == 0)
   return;
  this.inAdjusting = true;
  isInitializing = !!isInitializing;
  if(this.isFullscreenMode)
   this.AdjustSizeInFullscreen();
  this.layoutCalculator.UpdateLayout(this, activeView, isInitializing);
  this.inAdjusting = false;
 },
 UpdateToolbarAndMenu: function() {
  if (this.allowDesignView && this.IsDesignView()) {
   this.UpdateToolbarImmediately();
   this.UpdateContextMenu();
  }
 },
 RemoveChildrenFromFlow: function(parent, remove) {
  var elements = _aspxGetElementNodes(parent);
  for(var i = 0, l = elements.length; i < l; i++) {
   if(__aspxIE && __aspxBrowserMajorVersion >= 9)
    elements[i].style.position = remove ? "absolute" : "";
   else
    _aspxSetElementDisplay(elements[i], !remove);
  }
 },
 AdjustSizeInPercent: function() {
  this.inAdjusting = true;
  var mainElement = this.GetMainElement();
  var mainCell = this.GetMainCell();
  if(this.currentHeight)
   this.percentSizeDiv.style.height = this.currentHeight + "px";
  this.RemoveChildrenFromFlow(mainCell, true); 
  var newOffsetWidth = this.percentSizeDiv.offsetWidth;
  this.RemoveChildrenFromFlow(mainCell, false);
  this.percentSizeDiv.style.height = "0px";
  if(this.adjustResizeTimerID){
   _aspxClearTimer(this.adjustResizeTimerID);
   delete this.adjustResizeTimerID;
  }
  if(this.oldOffsetWidth != newOffsetWidth || newOffsetWidth != mainElement.offsetWidth) {
   if(!this.percentResizeStarted || this.resizeTempVars.startMainWidth === undefined) {
    this.SaveStartSize();
    this.percentResizeStarted = true;
   }
   this.SetDeltaWidthInternal(newOffsetWidth - this.resizeTempVars.startMainWidth, true);
   this.adjustResizeTimerID = _aspxSetTimeout(function() {
    this.percentResizeStarted = false;
    if((__aspxIE && __aspxBrowserMajorVersion == 10 || __aspxNetscapeFamily) && this.oldFocusValue) {
     this.RestoreSelection();
     this.oldFocusValue = null;
    }
   }.aspxBind(this), 200);
  }
  this.inAdjusting = false;
  this.oldOffsetWidth = newOffsetWidth;
 },
 AdjustControlCore: function() {
  if(!_aspxIsExistsElement(this.GetMainElement())) 
   return;
  if(this.resizeTempVars && this.resizeTempVars.isInMove) 
   return;
  if(this.isInitialized && !this.IsDisplayed()){
   return;
  }
  if (this.isFullscreenMode) {
   this.AdjustSizeInFullscreen();
   return;
  }
  if (this.IsVisible() && (!this.isInitialized || !this.isLoaded)) {
   this.isLoaded = true;
   this.UpdateLayout(this.activeView, true);
   this.UpdateToolbarAndMenu();
   var needSetFocus = !(__aspxNetscapeFamily || __aspxIE);
   var scrollX = _aspxGetDocumentScrollLeft();
   var scrollY = _aspxGetDocumentScrollTop();
   if(this.IsDesignView() && this.GetEnabled()) {
    this.SetDesignModeAttribute();
    if (needSetFocus)
     this.SetFocus();
   }
   this.percentResizeStarted = false;
   if (this.IsDesignView() && needSetFocus) {
    this.RemoveFocus();
    window.scrollTo(scrollX, scrollY);
   }
   if (this.delayedFocus) { 
    this.SetFocus();
    this.delayedFocus = null;
   }
  }
  if(this.isWidthDefinedInPercent) {
   if(!this.percentResizeStarted)
    this.oldFocusValue = this.isInFocus || this.oldFocusValue;
   var needSaveAndRestoreSelection = (__aspxIE && __aspxBrowserMajorVersion == 10 || __aspxNetscapeFamily) && this.oldFocusValue && !this.percentResizeStarted;
   if(needSaveAndRestoreSelection) {
    this.SaveSelection();
    this.RemoveFocus();
   }
   this.AdjustSizeInPercent();
   this.SaveCurrentSize(true, true, false);
   if(needSaveAndRestoreSelection && !this.percentResizeStarted) {
    this.RestoreSelection();
    this.oldFocusValue = null;
   }
  }
 },
 AdjustInnerControls: function() {
  var tabControl = this.GetTabControl();
  if(tabControl && !tabControl.GetMainElement())
   tabControl = null;
  var ribbon = this.GetRibbon();
  if(ribbon && !ribbon.GetMainElement())
   ribbon = null;
  if(tabControl && ribbon) {
   tabControl.CollapseControl();
   ribbon.AdjustControl();
   tabControl.ExpandControl();
   tabControl.AdjustControl();
   var ribbonMarkerSize = ribbon.GetControlPercentMarkerSize(true);
   if(ribbon.adjustedSizes.width < ribbonMarkerSize.width)
    ribbon.AdjustControl();
   ribbon.ResetControlPercentMarkerSize();
  }
  else if(tabControl)
   tabControl.AdjustControl();
  else if(ribbon)
   ribbon.AdjustControl();
 },
 NeedCollapseControlCore: function() {
  return true;
 },
 IsStatusBarShown: function() {
  return (this.allowDesignView ? 1 : 0) + (this.allowHtmlView ? 1 : 0) + (this.allowPreview ? 1 : 0) > 1;
 },
 SetDesignModeAttribute: function() {
  var enabled = this.GetEnabled();
  var doc = ASPxIFrame.GetDocument(this.GetDesignViewIFrameName());
  if(doc) {
   if(__aspxNetscapeFamily)
    doc.designMode = enabled ? "on" : "off";
   else if(doc.body)
    doc.body.contentEditable = enabled;
  }
 },
 DisableSpellCheckAttribute: function(element) {
  if(!!this.disableBrowserSpellCheck)
   element.spellcheck = false;
 },
 ShowLoadingPanel: function() {
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetMainElement());
 },
 GetCallbackAnimationElement: function() {
  if(_aspxElementIsVisible(this.GetDesignViewIFrameElement()))
   return this.GetDesignViewIFrameElement();
  if(_aspxElementIsVisible(this.GetHtmlViewEdit().GetInputElement()))
   return this.GetHtmlViewEdit().GetInputElement();
  if(_aspxElementIsVisible(this.GetPreviewIFrameElement()))
   return this.GetPreviewIFrameElement();
  return null;
 },
 UpdateAdjustmentFlags: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = _aspxGetCurrentStyle(mainElement);
   var widths = [];
   if(this.isWidthDefinedInPercent)
    widths.push(this.initialMainElementWidth);
   this.UpdatePercentSizeConfig(widths, [mainElementStyle.height, mainElement.style.height]);
  }
 },
 GetEnabled: function(){
  return this.clientEnabled && this.enabled;
 },
 SetEnabled: function(enabled) {
  ASPxClientControl.prototype.SetEnabled.call(this, enabled);
  this.SetEnabledInternal(enabled);
 },
 SetEnabledInternal: function(enabled) {
  this.SetDesignModeAttribute();
  if(enabled)
   this.UpdateToolbar();
  else {
   var toolbar = this.GetToolbar();
   if(toolbar && toolbar.extToolbarID && ASPxHtmlEditorsCollection.Get().IsLastActive(this)) {
    var listItemsNames = [];
    for(var i = 0, command; command = this.allowCommandListArray[i]; i++)
     listItemsNames.push(command.commandID);
    this.toolbar.setItemsEnabled(enabled, listItemsNames);
   }
  }
 },
 Focus: function() {
  this.SetFocus();
 },
 ClearFocusInput: function() {
  var focusInputElement = this.GetFakeFocusInputElement();
  if (focusInputElement)
   focusInputElement.value = "";
 },
 SetActive: function() {
  if (__aspxIE) {
   var iFrame = this.GetDesignViewIFrameElement();
   if (iFrame)
    iFrame.setActive();
  }
 },
 SetFocus: function() {
  if ((this.IsDesignView() || this.IsPreview()) && !this.isInFocus) {
   if (this.IsIFrameReady()) {
    var focusObj = __aspxWebKitFamily && !__aspxWebKitTouchUI && !this.IsPreview()
     ? this.GetIFrameDocumentBody()
     : this.GetIFrameWindow();
    focusObj.focus();
    if(this.IsDesignView()) {
     if(!__aspxMSTouchUI) {
      setTimeout(function() {
       this.UpdateToolbarAndMenu(); 
      }.aspxBind(this), 0);
     }
     this.isFocusedOnce = true;
    }
   }
   else
    this.delayedFocus = true; 
  }
  else if (this.IsHtmlView()) { 
   var htmlViewInput = this.GetHtmlViewEdit().GetInputElement();
   htmlViewInput.focus();
   _aspxSetCaretPosition(htmlViewInput, 0);
  }
 },
 IsIFrameReady: function() {
  return this.isInitialized && this.isLoaded;
 },
 GetIFrameDocumentBody: function() {
  return this.IsDesignView() ? this.GetDesignViewIFrameDocumentBody() : this.GetPreviewIFrameDocumentBody();
 },
 GetIFrameWindow: function() {
  return this.IsDesignView() ? this.GetDesignViewIFrameWindow() : this.GetPreviewIFrameWindow();
 },
 RemoveFocus: function(byAnchor) {
  this.isInFocus = false; 
  var scrollTop = _aspxGetDocumentScrollTop();
  if(byAnchor) {
   try {
    this.GetFakeFocusAnchorElement().focus();
   } catch(e) {}
   _aspxSetDocumentScrollTop(scrollTop);
  }
  else {
   var inputElement = this.GetFakeFocusInputElement();
   _aspxRemoveAttribute(inputElement, "disabled");
   try {
    inputElement.focus();
   }
   catch (e) { }
   if (__aspxIE || (__aspxWebKitFamily && !this.isInitialized)) {
    try {
     window.focus();
     if(__aspxIE && __aspxBrowserMajorVersion < 8) 
      setTimeout(function() { _aspxSetDocumentScrollTop(scrollTop); }, 100);
    }
    catch (e) { }
   }
   inputElement.disabled = "disabled";
  }
 },
 GetHtml: function() {
  return this.ProcessHtmlToGetHtml(this.GetHtmlInternal(true));
 },
 GetHtmlInternal: function(removeInlineEmptyElements) {
  var html = this.html;
  if (this.IsDesignView() && this.IsExistsWindowInIFrame(this.GetDesignViewIFrameName())) {
   var bodyElement = this.GetDesignViewIFrameDocumentBody();
   if(removeInlineEmptyElements)
    ASPxClientHtmlProcessingUtils.ProcessingEmptyElements(bodyElement);
   html = this.GetDesignViewIFrameDocumentBody().innerHTML;
  }
  else if (this.IsHtmlView() && _aspxIsExistsElement(this.GetHtmlViewEdit().GetMainElement()))
   html = this.GetHtmlViewEdit().GetText();
  else if (this.IsExistsWindowInIFrame(this.GetPreviewIFrameName()))
   html = this.savedPreviewHtmlAfterSet;
  return html;
 },
 SetHtml: function(html, clearUndoHistory) {
  if(this.IsDesignView() && !this.commandManager) {
   this.htmlToDelayedSet = {
    "html": html,
    "clearUndoHistory": clearUndoHistory
   };
  }
  else {
   clearUndoHistory = _aspxIsExists(clearUndoHistory) ? clearUndoHistory : true;
   this.SetHtmlInternal(html);
   if(clearUndoHistory) {
    this.ClearUndoHistory();
    this.executingCommandName = null;
   }
   this.OnHtmlChanged(false);
   if(!clearUndoHistory)
    this.SaveToUndoHistory();
  }
 },
 SetHtmlInternal: function(html, newActiveView) {
  if (!newActiveView)
   newActiveView = this.activeView;
  this.CallSuspendedHtmlChangedEvt();
  html = this.ProcessHtmlToSetHtml(html, newActiveView);
  if (this.allowDesignView && this.IsDesignView(newActiveView)) {
   this.SetInnerHtmlToBody(this.GetDesignViewIFrameDocumentBody(), html);
   this.ProcessDesignViewDocumentDomAfterSetHtml();
   window.setTimeout(function() {
    var doc = this.GetDesignViewDocument();
    if(doc && doc.body)
     doc.body.scrollTop = 0;
   }.aspxBind(this), 0);
  }
  if (this.allowHtmlView && this.IsHtmlView(newActiveView))
   this.GetHtmlViewEdit().SetText(html);
  if (this.allowPreview && this.IsPreview(newActiveView)) {
   ASPxClientHtmlEditor.SetInnerHtml(this.GetPreviewIFrameDocumentBody(), html);
   this.savedPreviewHtmlAfterSet = this.GetPreviewIFrameDocumentBody().innerHTML;
   this.ProcessPreviewDocumentDomAfterSetHtml();
  }
 },
 ProcessHtmlToSetHtml: function(html, newActiveView) {
  if (this.IsPreview(newActiveView) || this.IsDesignView(newActiveView)) {
   html = ASPxClientHtmlEditor.ProcessHtmlByBrowser(html);
   html = ASPxClientHtmlEditor.PreserveTagsByName("noscript", html);
   if (!this.allowScripts)
    html = ASPxClientHtmlEditor.CleanHtmlScripts(html);
   else {
    var masked = this.MaskComments(html); 
    html = ASPxClientHtmlEditor.PreserveTagsByName("script", masked.html);
    html = ASPxClientHtmlEditor.PreserveAttribute(html, __aspxJSEventAttributeNameRegExp)
    html = this.UnMaskComments(html, masked.comments);
   }
   if (this.IsDesignView(newActiveView)) {
    if (__aspxIE)
     html = ASPxClientHtmlProcessingUtils.ReplaceUnderlineSpanWithUTag(html);
    if (this.updateDeprecatedElements)
     html = ASPxClientHtmlProcessingUtils.ReplaceSpanWithFontTag(html);
   }
   if(this.IsDesignView(newActiveView)) {
    html = ASPxClientHtmlEditor.PreserveAttribute(html, __aspxContentEditableAttributeNameRegExp);
    if(__aspxNetscapeFamily)
     html = ASPxClientHtmlProcessingUtils.SetTextInputUnselectable(html);
   }
  } else if (this.IsHtmlView(newActiveView))
   html = this.ConvertToEmptyHtml(html);
  return html;
 },
 ProcessDesignViewDocumentDomAfterSetHtml: function() {
  this.ProcessInnerHtml(this.GetDesignViewIFrameDocumentBody())
 },
 ProcessInnerHtml: function(container) {
  ASPxClientHtmlEditor.PreserveButtonTags(container);
  ASPxClientHtmlProcessingUtils.AddEmptyBorderClassInTables(container);
 },
 ProcessPreviewDocumentDomAfterSetHtml: function() {
  ASPxClientHtmlProcessingUtils.ReplaceLinkTargetWithBlank(this.GetPreviewIFrameDocumentBody());
 },
 ProcessHtmlToGetHtml: function(html) {
  if (this.IsPreview() || this.IsDesignView()) {
   if(this.allowDesignView && __aspxIE && __aspxBrowserMajorVersion > 10)
    html = ASPxClientHtmlProcessingUtils.ClearFakeBrElements(this.GetDesignViewIFrameDocumentBody(), html);
   html = this.ConvertToEmptyHtml(ASPxClientHtmlEditor.DepreserveTagsByName("noscript", html));
   if (this.allowScripts) {
    html = ASPxClientHtmlEditor.DepreserveTagsByName("script", html);
    html = ASPxClientHtmlEditor.DepreserveAttribute(html, __aspxJSEventAttributeNameRegExp);
   }
   if (this.IsDesignView()) {
    if (this.updateDeprecatedElements)
     html = ASPxClientHtmlProcessingUtils.ReplaceFontWithSpanTag(html);
    html = ASPxClientHtmlEditor.DepreserveButtonTags(html);
    html = ASPxClientHtmlProcessingUtils.FilterHtmlToGetHtml(html);
    html = ASPxClientHtmlProcessingUtils.RemoveEmptyBorderClassName(html);
    html = ASPxClientHtmlProcessingUtils.CloseTags(html);
   }
   if(this.IsDesignView()) {
    html = ASPxClientHtmlEditor.DepreserveAttribute(html, __aspxContentEditableAttributeNameRegExp);
    if(__aspxNetscapeFamily)
     html = ASPxClientHtmlProcessingUtils.RemoveMozUserSelectStyleAttribute(html);
   }
  }
  html = ASPxClientHtmlEditor.RemoveSavedUrlsInHTML(html);
  if(this.enterMode == ASPxHtmlEditorEnterMode.BR) { 
   var regExp = new RegExp(__aspxHEBogusSymbol, 'g');
   html = html.replace(regExp, ' ');
  }
  return html;
 },
 SetInnerHtmlToBody: function(bodyElement, html) {
  ASPxClientHtmlEditor.SetInnerHtml(bodyElement, html);
  ASPxClientHtmlProcessingUtils.ProcessingEmptyElements(bodyElement);
  if(__aspxIE) 
   ASPxClientHtmlProcessingUtils.CleanWrongSizeAttribute(bodyElement);
 },
 Synchronize: function() {
  if(this.IsControlExist()) {
   this.SynchronizeContentHtml();
   this.ClearFocusInput();
  }
 },
 SynchronizeForStandardValidation: function(checkValidators) {
  var contentToValidate = this.GetStandardValidationHiddenField();
  if(!checkValidators || contentToValidate.Validators)
   this.GetStandardValidationHiddenField().value = _aspxEncodeHtml(this.GetHtml());
 },
 SynchronizeContentHtml: function() {
  var htmlSyncInput = this.GetHtmlSyncHiddenField();
  if (_aspxIsExistsElement(htmlSyncInput)) {
   var html = this.GetHtml();
   this.syncronizedHtml = html; 
   htmlSyncInput.value = _aspxEncodeHtml(html);
  }
 },
 IsControlExist: function() {
  return _aspxIsExistsElement(this.GetMainElement());
 },
 IsDesignView: function(view) {
  if (!view)
   view = this.activeView;
  return view == ASPxClientHtmlEditorView.Design;
 },
 IsHtmlView: function(view) {
  if (!view)
   view = this.activeView;
  return view == ASPxClientHtmlEditorView.Html;
 },
 IsPreview: function(view) {
  if (!view)
   view = this.activeView;
  return view == ASPxClientHtmlEditorView.Preview;
 },
 ChangeActiveView: function(activeView) {
  if (activeView == this.activeView)
   return;
  if(activeView == ASPxClientHtmlEditorView.Design && this.cachedElementsManager)
   this.cachedElementsManager.ClearSeletedElements();
  this.SaveCurrentSize(true, true, false);
  switch (activeView) {
   case ASPxClientHtmlEditorView.Design:
    this.SetDesignActiveView();
    break;
   case ASPxClientHtmlEditorView.Html:
    this.SetHtmlActiveView();
    break;
   case ASPxClientHtmlEditorView.Preview:
    this.SetPreviewActiveView();
    break;
  }
  this.activeView = activeView;
 },
 SetDesignActiveView: function() {
  this.SetClientStateFieldValue("ActiveView", "Design");
  this.executingCommandName = null;
  if (this.IsHtmlView())
   this.ClearUndoHistory();
  this.SendCallback(__aspxHESwitchToDesignViewCallbackPrefix, "", true);
 },
 SetHtmlActiveView: function() {
  this.SetClientStateFieldValue("ActiveView", "Html");
  if (this.IsDesignView())
   this.ClearUndoHistory();
  this.SendCallback(__aspxHESwitchToHtmlViewCallbackPrefix, "", true);
 },
 SetPreviewActiveView: function() {
  this.SetClientStateFieldValue("ActiveView", "Preview");
  this.ClearUndoHistory();
  this.SendCallback(__aspxHESwitchToPreviewCallbackPrefix, "", true);
 },
 SwitchToDesignViewCore: function(html) {
  var oldHtml = this.GetHtml();
  this.selection = null;
  this.SwitchToViewCore(ASPxClientHtmlEditorView.Design, html);
  if (__aspxIE && __aspxBrowserMajorVersion < 9) 
    ASPxClientHtmlProcessingUtils.CleanWrongSizeAttribute(this.GetDesignViewIFrameDocumentBody());
  this.SetDesignModeAttribute();
  if(oldHtml != this.GetHtml())
   this.OnHtmlChanged(false);
 },
 SwitchToHtmlViewCore: function(html) {
  this.SwitchToViewCore(ASPxClientHtmlEditorView.Html, html);
 },
 SwitchToPreviewCore: function(html) {
  this.SwitchToViewCore(ASPxClientHtmlEditorView.Preview, html);
 },
 SwitchToViewCore: function(view, html) {
  var toolbar = this.GetToolbar();
  if(toolbar && toolbar.extToolbarID) {
   var listItemsNames = [];
   for(var i = 0, command; command = this.allowCommandListArray[i]; i++)
    listItemsNames.push(command.commandID);
   this.toolbar.setItemsEnabled(view == ASPxClientHtmlEditorView.Design, listItemsNames);
   if(this.isFullscreenMode) {
    if(view == ASPxClientHtmlEditorView.Design)
     toolbar.setExternalRibbonPositionOnPageTop(this);
    else
     toolbar.restoreExternalRibbonPositionOnPage(this);
   }
  }
  if(__aspxWebKitFamily)
   this.SaveCurrentSize(true, true, false);
  if(this.NeedReinitIFrame())
   this.OnIFrameLoad();
  this.UpdateLayout(view);
  this.CorrectSizeOnSwitchToView();
  this.SetHtmlInternal(html, view);
  this.SetFocus();
  this.RaiseActiveTabChanged(this.GetActiveTabName());
 },
 CorrectSizeOnSwitchToView: function(view) {
  var editArea = this.GetEditAreaCell();
  editArea.style.height = "100%";
  editArea.style.width = "100%";
  this.SetWidthInternal(this.currentWidth, false, false);
  this.SetHeightInternal(this.currentHeight, false, false);
 },
 ExecuteCommand: function(commandName, parameter, addToUndoHistory) {
  addToUndoHistory = _aspxIsExists(addToUndoHistory) ? addToUndoHistory : true;
  var isSuccessfully = false;
  if (commandName.indexOf(";") > -1) {
   var commandParts = commandName.split(";");
   commandName = commandParts[0];
   parameter = commandParts[1];
  }
  var cmd = ASPxHtmlEditorCommandList[commandName];
  var nonClientCommand = cmd && !cmd.IsClientCommand();
  if(nonClientCommand) {
   isSuccessfully = cmd.Execute(parameter, this);
   this.RaiseCommandExecuted(commandName, parameter, isSuccessfully);
  }
  else if (!this.GetEnabled())
   return false;
  else if (this.IsDesignView()) {
   this.RestoreSelectionForPopup();
   if((__aspxWebKitFamily || __aspxOpera) && !this.isFocusedOnce) { 
    this.isFocusedOnce = true;
    this.RemoveFocus(true);
    this.GetDesignViewIFrameDocumentBody().focus();
   }
   this.CallSuspendedHtmlChangedEvt();
   var contentHtml = this.GetHtmlInternal();
   if(!this.commandManager) return; 
   if (cmd != null) {
    this.executingCommandName = commandName;
    if(!this.isInFocus)
     this.RestoreSelection();
    isSuccessfully = this.commandManager.ExecuteCommand(commandName, parameter, addToUndoHistory);
    if(commandName == ASPxClientCommandConsts.BACKCOLOR_COMMAND || commandName == ASPxClientCommandConsts.FONTCOLOR_COMMAND)
     this.SaveRibbonClientState();
    if (!cmd.IsImmediateExecution())
     this.executingCommandName = null;
   }
   else if (!this.CustomCommand.IsEmpty()) {
    if(!__aspxIE || (__aspxBrowserMajorVersion >= 9 || !this.selection || !this.selection.GetIsControlSelected())) 
     this.RestoreSelection();
    isSuccessfully = this.RaiseCustomCommand(commandName, parameter);
   }
   else {
    var toolbar = this.GetToolbar();
    if(toolbar.innerToolbarsCount)
     alert('Command not found');
    return false;
   }
   if(contentHtml != this.GetHtmlInternal())
    this.OnHtmlChanged(true, false);
   else if(isSuccessfully)
    this.OnSelectionChanged();
   this.RaiseCommandExecuted(commandName, parameter, isSuccessfully);
  }
  else if(commandName == ASPxClientCommandConsts.FULLSCREEN_COMMAND && this.commandManager)
   isSuccessfully = this.commandManager.ExecuteCommand(commandName, parameter, false);
  return isSuccessfully;
 },
 SaveToUndoHistory: function() {
  this.ExecuteCommand(ASPxClientCommandConsts.SAVESTATEUNDOREDOSTACK_COMMAND, null);
 },
 PasteHtml: function(htmlText) {
  return this.ExecuteCommand(ASPxClientCommandConsts.PASTEHTML_COMMAND, htmlText);
 },
 InsertLink: function(url, text, target, title) {
  var value = {
   url: url,
   text: text,
   target: target,
   title: title
  };
  this.ExecuteCommand(ASPxClientCommandConsts.INSERTLINK_COMMAND, value);
 },
 InsertImage: function(params) {
  this.ExecuteCommand(ASPxClientCommandConsts.INSERTIMAGE_COMMAND, params);
 },
 ChangeImage: function(imageElement, params) {
  params.imageElement = imageElement;
  this.ExecuteCommand(ASPxClientCommandConsts.CHANGEIMAGE_COMMAND, params);
 },
 CheckSpelling: function() {
  this.spellCheckerHelper.CheckSpelling();
 },
 Print: function() {
  var window = this.GetDesignViewIFrameWindow();
  if (window) {
   if(__aspxIE)
    window.focus();
   window.print();
  }
 },
 Undo: function() {
  if (this.IsUndoAvailable()) {
   this.ClearExecutingCommandState();
   return this.commandManager.Undo(1);
  }
  return false;
 },
 Redo: function() {
  if (this.IsRedoAvailable()) {
   this.ClearExecutingCommandState();
   return this.commandManager.Redo(1);
  }
  return false;
 },
 ClearExecutingCommandState: function() {
  this.executeApplyStyle = []; 
  this.executeRemoveFontStyle = [];
 },
 GetSelection: function() {
  if(!this.IsDesignView() || !this.GetEnabled()) return null;
  var selection = new ASPxClientHtmlEditorSelection(this);
  if(!selection.selectedElement) {
   this.RestoreSelection();
   selection = new ASPxClientHtmlEditorSelection(this);
  }
  return selection;
 },
 RestoreSelection: function() {
  if(!this.IsDesignView() || !this.GetEnabled())
   return;
  if((__aspxIE && this.inRestoreSelectionProcess) || (__aspxOpera && this.isInFocus))
   return true;
  if(this.PreventSelectionProcessing())
   return false;
  this.inRestoreSelectionProcess = true; 
  this.isSelectionRestored = true;
  this.SetFocus();
  if(this.isInFocus)
   this.isFocusedOnce = true;
  var _this = this;
  setTimeout(function() {
   _this.inRestoreSelectionProcess = false;
  }, 100);
  try {
   this.SetSelection(this.selection);
   return true;
  }
  catch(e) {
   return false;
  }
 },
 RestoreSelectionByTimer: function() {
  var self = this;
  var handler = function() {
   self.RestoreSelection();
  };
  window.setTimeout(handler, 0);
 },
 SaveSelection: function() { 
  try {
   var selection = this.GetSelection();
   if(__aspxWebKitFamily && !selection.selectedElement) {
    this.selection = null;
    return;
   }
   else if(__aspxIE && __aspxBrowserMajorVersion > 8) { 
    var selection = this.GetSelection();
    if(!this.PreventSelectionProcessing())
     this.selection = selection;
   }
   else
    this.selection = this.GetSelection();
  } catch(e) { }
 },
 PreventSelectionProcessing: function() { 
  if(__aspxIE && __aspxBrowserMajorVersion > 8) {
   var element = this.GetSelection().GetSelectedElement();
   while(element && element.ownerDocument == this.GetDesignViewDocument() && element.tagName != "BODY") {
    if(element.tagName == "DIV") {
     var divStyle = _aspxGetCurrentStyle(element);
     if(divStyle.float != "none" || divStyle.width != "auto" || divStyle.height != "auto" || divStyle.overflow == "hidden")
      return true;
    }
    element = element.parentNode;
   }
  }
  return false;
 },
 SetSelection: function(selection) {
  if (__aspxNetscapeFamily)
   this.SetFocus();
  if(selection)
   selection.Apply();
 },
 GetSelectedElement: function(name) {
  return this.cachedElementsManager.GetSeletedElement(name);
 },
 SetSelectedElement: function(name, element) {
  return this.cachedElementsManager.SetSelectedElement(name, element);
 },
 NeedGetElementFromSelection: function(name) {
  return this.cachedElementsManager.NeedGetElementFromSelection(name);
 },
 RestoreLastSelection: function(selectionObj) {
  if (selectionObj != null) {
   this.SetFocus();
   selectionObj.Restore();
  }
  if(__aspxIE && __aspxBrowserMajorVersion < 9)
   this.SaveSelection();
 },
 SaveLastSelection: function() {
  var selectionObj = ASPxClientHtmlEditorSelection.Create(this);
  selectionObj.Save();
  return selectionObj;
 },
 CreateRestoreSelectionForDialog: function() {
  var selectionObj = __aspxIE && __aspxBrowserMajorVersion < 11 ? new ASPxClientDialogSelectionIE(this.GetDesignViewIFrameWindow()) :
       new ASPxClientSelectionNSOpera(this.GetDesignViewIFrameWindow());
  selectionObj.Save();
  return selectionObj;
 },
 UpdateContextMenu: function() {
  if(this.GetEnabled() && this.allowContextMenu == true && this.GetContextMenu().GetVisible())
   this.GetContextMenu().SetVisible(false);
 },
 ShowContextMenu: function(evt) {
  if(this.GetEnabled()) {
   this.SaveSelectionForPopup();
   if (!this.GetContextMenu().GetVisible()) {
    this.UpdateContextMenuItemsState();
    this.RaiseContextMenuShowing();
    var scrollX = _aspxGetDocumentScrollLeft();
    var scrollY = _aspxGetDocumentScrollTop();
    var x = _aspxGetEventX(evt) + _aspxGetAbsoluteX(this.GetDesignViewIFrameElement()) - scrollX;
    var y = _aspxGetEventY(evt) + _aspxGetAbsoluteY(this.GetDesignViewIFrameElement()) - scrollY;
    this.GetContextMenu().ShowAtPos(x + 8, y + 8);
    if(__aspxIE)
     this.isPreventKeyPressOnShowContextMenu = true;
   }
  }
 },
 UpdateContextMenuItemsState: function() {
  var popupMenu = this.GetContextMenu();
  for (var i = 0; i < popupMenu.GetItemCount(); i++) {
   var item = popupMenu.GetItem(i);
   var command = ASPxHtmlEditorCommandList[item.name];
   if (command)
    item.SetVisible(!command.IsLocked(this));
  }
 },
 UpdateToolbar: function() {
  this.UnforcedFunctionCall(function() {
   if(this.toolbar && this.IsDesignView() && this.GetEnabled() && !this.isLockedUpdateToolbar && this.isInFocus)
    this.toolbar.UpdateItems(this.GetAllowCommandsState());
  }.aspxBind(this), "UpdateToolbar", 300, true);
 },
 UpdateToolbarImmediately: function() {
  if(this.toolbar && !this.isLockedUpdateToolbar){
   this.toolbar.AdjustControls();
   if(!this.clientEnabled)
    this.toolbar.SetEnabled(false);
   if(!this.isInFocus)
    return;
   this.toolbar.UpdateItems(this.GetAllowCommandsState());
  }
 },
 GetAllowCommandsState: function() {
  var result = [];
  if(this.allowCommandListArray.length > 0) {
   var selection, selectedElements;
   if(!this.isSelectionRestored && !__aspxOpera)
    this.RestoreSelection();
   if(!__aspxWebKitTouchUI && !__aspxMSTouchUI) {
    selection = this.GetSelection();
    if(!selection.IsCollapsed() && selection.GetHtml().length > 1 && !selection.GetIsControlSelected()) {
     selectedElements = selection.GetElements(true);
     this.SaveSelection();
    }
   }
   for(var i = 0, command; command = this.allowCommandListArray[i]; i++) {
    if(!this.isFocusedOnce && command.SkipStateOnFirstLoad()) continue;
    var value = command.GetValue(this, selection, selectedElements);
    if(command.commandID == ASPxClientCommandConsts.APPLYCSS_COMMAND)
     value = !value.tagName && !value.cssClass ? null : value.tagName + "|" + value.cssClass;
    value = (command.commandID == ASPxClientCommandConsts.APPLYCSS_COMMAND && !this.customCssValueHashTablel[value]) || 
      (command.commandID == ASPxClientCommandConsts.FORMATBLOCK_COMMAND && _aspxArrayIndexOf(this.formatBlockValues, value) < 0) ? command.GetDefaultValue(this) : value;
    result.push({ "commandID": command.commandID, "value": value, "isChecked": command.GetState(this, selection, selectedElements), "isLocked" : command.IsLocked(this) });
   }
  }
  return result;
 },
 OnToolbarCustomComboBoxInit: function(combobox) {
  this.customComboBoxCollection[combobox.commandName] = combobox;
 },
 OnToolbarColorPickerCustomColorTableUpdated: function(colorPicker, name) {
  this.SetClientStateFieldValue(name.toLowerCase() == "forecolor" ? "ForeColorPalette" : "BackColorPalette", colorPicker.GetState(), true);
 },
 SaveRibbonClientState: function() {
  var ribbon = this.GetRibbon();
  if(ribbon)
   this.SetClientStateFieldValue("Ribbon", ribbon.getClientState().getStateString(), true);
 },
 OnRibbonActiveTabChanged: function() {
  this.SaveRibbonClientState();
 },
 SetToolbarComboBoxValue: function(commandName, value) {
  if(this.customComboBoxCollection[commandName])
   this.customComboBoxCollection[commandName].SetValue(value);
 },
 SendCallback: function(prefix, arg, showLoadingPanel) {
  if (showLoadingPanel)
   this.ShowLoadingElements();
  this.CreateCallback(_aspxFormatCallbackArg(prefix, arg));
 },
 SendFileManagerCallback: function(fileManager, callbackString) {
  this.callbackOwner = fileManager;
  this.CreateCallback(_aspxFormatCallbackArg(__aspxHEFileManagerCallbackPrefix, callbackString));
 },
 SendSpellCheckerCallback: function(spellChecker, callbackString) {
  this.callbackOwner = spellChecker;
  this.CreateCallback(_aspxFormatCallbackArg(__aspxHESpellCheckingCallbackPrefix, callbackString));
 },
 ClearOwnerControlCallback: function() {
  this.callbackOwner = null;
 },
 OnCallback: function(result) {
  if (this.callbackOwner != null)
   this.callbackOwner.OnCallback(result);
  else
   this.OnHtmlEditorCallback(result.action, result.html, result.spellcheck, result.allowScripts, result.spellcheckerloadcontrol);
 },
 OnCallbackError: function(result, data) {
  if (this.callbackOwner != null)
   this.callbackOwner.OnCallbackError(result);
  else
   this.RollbackActiveView();
  this.isErrorOnCallback = true;
  this.constructor.prototype.OnCallbackError.call(this, result, data);
 },
 DoEndCallback: function() {
  this.constructor.prototype.DoEndCallback.call(this);
  if (this.callbackOwner != null && !this.isErrorOnCallback)
   this.callbackOwner.OnEndCallback();
  this.isErrorOnCallback = false;
 },
 OnHtmlEditorCallback: function(prefix, result, spellCheckResult, allowScripts, spellcheckerloadcontrol) {
  this.allowScripts = Boolean(allowScripts);
  switch (prefix) {
   case __aspxHESwitchToDesignViewCallbackPrefix:
    this.SwitchToDesignViewCore(result);
    break;
   case __aspxHESwitchToHtmlViewCallbackPrefix:
    this.SwitchToHtmlViewCore(result);
    break;
   case __aspxHESwitchToPreviewCallbackPrefix:
    this.SwitchToPreviewCore(result);
    break;
   case __aspxHESpellCheckingLoadControlCallbackPrefix:
   case __aspxHESpellCheckingCallbackPrefix:
   case __aspxHESpellCheckerOptionsCallbackPrefix:
    this.spellCheckerHelper.OnHtmlEditorCallback(prefix, result, spellCheckResult, allowScripts, spellcheckerloadcontrol);
    break;
   default:
    throw "Unexpected callback prefix.";
    break;
  }
 },
 RollbackActiveView: function() {
  if (this.allowDesignView) {
   this.activeView = ASPxClientHtmlEditorView.Design;
   this.SwitchToDesignViewCore(this.GetHtml());
  }
  else if (this.allowHtmlView) {
   this.activeView = ASPxClientHtmlEditorView.Html;
   this.SwitchToHtmlViewCore(this.GetHtml());
  }
  else if (this.allowPreview) {
   this.activeView = ASPxClientHtmlEditorView.Preview;
   this.SwitchToPreviewCore(this.GetHtml());
  }
  var tabControl = this.GetTabControl();
  if (tabControl != null)
   tabControl.SetActiveTab(tabControl.GetTab(0));
 },
 ConvertToEmptyHtml: function(html) {
  var emptyTagsRegExp = new RegExp(__aspxHEEmptyTagsRegExpPattern, "ig");
  var emptyHtmlRegExp = new RegExp(__aspxHEEmptyHtmlRegExpPattern, "ig");
  var brTagsRegExp = new RegExp(__aspxHEBrTagsRegExpPattern, "ig");
  var processedHtml = _aspxTrim(html);
  if (emptyTagsRegExp.test(processedHtml) || emptyHtmlRegExp.test(processedHtml))
   html = "";
  else if(__aspxIE && __aspxBrowserMajorVersion > 10 && this.activeView == ASPxClientHtmlEditorView.Design && !html.replace(brTagsRegExp, "")) {
   var childNodes = this.GetDesignViewDocument().body.childNodes;
   if(childNodes.length == 0 || childNodes.length == 1 && childNodes[0].nodeName == "BR")
    html = "";
  }
  return html;
 },
 MaskComments: function (html) {
  var comments = [];
  var match = null;
  var i = 0;
  while ((match = html.match("<!--(.*?)-->")) !== null) {
   var comment = match[0];
   comments.push(comment);
   var mask = "<dxHideComment" + i + " />";
   html = html.replace(comment, mask);
   i++;
  }
  return { html: html, comments: comments };
 },
 UnMaskComments: function (html, comments) {
  for (var i = 0, l = comments.length; i < l; i++) {
   var mask = "<dxHideComment" + i + " />";
   html = html.replace(mask, comments[i]);
  }
  return html;
 },
 CreatePasteContainer: function() {
  var divElem = document.createElement("DIV");
  divElem.style.overflow = "hidden";
  divElem.style.width = "1px";
  divElem.style.height = "1px";
  divElem.contentEditable = true;
  document.body.appendChild(divElem);
  return divElem;
 },
 IsExistsWindowInIFrame: function(iframeName) {
  try {
   return !!ASPxIFrame.GetWindow(iframeName);
  }
  catch (e) {
   return false;
  }
 },
 GetIFrameDocumentHtml: function(bodyContentHtml) {
  var html = "";
  html += "<html>"
  html += "<head>";
  if (__aspxIE)
   html += "  <scr" + "ipt type=\"text/javascript\">" +
    "    window.document.onkeydown = function() {" +
    "       if(event.keyCode == 121) {" +
    "           window.parent.FocusActiveEditorToolbar();" +
    "           event.keyCode = 0;" +
    "           return false;" +
    "       }" +
    "   }" +
    "  </scr" + "ipt>";
  html += "<style></style></head><body>";
  if (bodyContentHtml)
   html += bodyContentHtml;
  html += "</body>";
  html += "</html>";
  return html;
 },
 ClearUndoHistory: function() {
  if (this.allowDesignView)
   this.commandManager.ClearUndoHistory();
 },
 ClearKeyDownInfo: function() { 
  this.keyDownInfo = null;
 },
 IsDefaultActionCommand: function(cmdID) {
  var cmd = ASPxHtmlEditorCommandList[cmdID];
  return cmd && cmd.IsDefaultAction(this);
 },
 IsDeleting: function() {
  return this.commandManager.IsDeleting() && this.keyDownInfo && this.keyDownInfo.isDeleteOrBackSpaceKey;
 },
 IsSpacing: function() {
  return this.keyDownInfo && this.keyDownInfo.isSpaceKey;
 },
 IsHtmlChangeableCommand: function(cmdID) {
  var cmd = ASPxHtmlEditorCommandList[cmdID];
  return cmd && cmd.IsHtmlChangeable();
 },
 IsShortcut: function() {
  return !!this.shortcutCmdID;
 },
 IsTextTyping: function() {
  return this.executingCommandName 
   && this.executingCommandName == ASPxClientCommandConsts.TEXTTYPE_COMMAND 
   && this.keyDownInfo && !this.keyDownInfo.isSystemKey;
 },
 IsRedoAvailable: function() {
  return this.commandManager.IsRedoAvailable();
 },
 IsUndoAvailable: function() {
  return this.commandManager.IsUndoAvailable();
 },
 OnSelectionChanged: function() {
  this.cachedElementsManager.ClearSeletedElements();
  if(this.isInFocus && !this.isLockedUpdateToolbar) {
   this.UpdateToolbar();
   if(__aspxIE && __aspxBrowserMajorVersion < 9) { 
    var _this = this;
    setTimeout(function() {
     _this.UpdateToolbar();
    }, 200);
   }
  }
  if(this.isInFocus)
   this.isLockedUpdateToolbar = false;
  this.UpdateContextMenu();
  this.RaiseSelectionChanged();
  this.UnforcedFunctionCall(function() {
   if(!(__aspxIE && __aspxBrowserMajorVersion >= 9) || this.isInFocus) { 
    this.SaveSelection();
    this.isLockedUpdateToolbar = false;
   }
  }.aspxBind(this), "SaveSelection", 300);
 },
 OnHtmlChanged: function(saveSelectionAndHtml, preventEvent) {
  if(this.suspendHCEvt > -1) {
   if(this.IsTextTyping()) {
    this.suspendHCEvt = this.suspendHCEvt == 2 || saveSelectionAndHtml ? 2 : 1;
    return;
   }
   else {
    saveSelectionAndHtml = saveSelectionAndHtml || this.suspendHCEvt == 2;
    this.suspendHCEvt = -1;
   }
  }
  this.OnHtmlChangedInternal(saveSelectionAndHtml, preventEvent);
  if(this.IsTextTyping()) {
   this.suspendHCEvt = 0;
   var _this = this;
   setTimeout(function() {
    if(_this.suspendHCEvt > 0)
     _this.OnHtmlChangedInternal(_this.suspendHCEvt == 2, preventEvent);
    _this.suspendHCEvt = -1;
   }, 300);
  }
 },
 CallSuspendedHtmlChangedEvt: function() {
  if(this.suspendHCEvt > 0) {
   this.OnHtmlChangedInternal(this.suspendHCEvt == 2);
   this.suspendHCEvt = -1;
  }
 },
 OnHtmlChangedInternal: function(saveSelectionAndHtml, preventEvent) {
  this.htmlBackup = this.GetHtmlInternal();
  if (saveSelectionAndHtml && this.IsDesignView())
   this.commandManager.UpdateLastRestoreSelectionAndHTML();
  if(!preventEvent)
   this.RaiseHtmlChanged();
  if (this.IsDesignView())
   this.OnSelectionChanged();
  if(this.IsStandardValidationEnabled())
   this.SynchronizeForStandardValidation(true);
 },
 UnforcedFunctionCall: function(func, key, timeout, resetTimer) {
  if(resetTimer && this.HasUnforcedFunction(key))
   this.ClearUnforcedFunctionByKey(key);
  if(this.unforcedFunctions[key] === undefined) {
   this.unforcedFunctions[key] = setTimeout(function() {
    func();
    this.unforcedFunctions[key] = undefined;
   }.aspxBind(this), timeout);
  }
 },
 HasUnforcedFunction: function(key) {
  return !!this.unforcedFunctions[key];
 },
 ClearUnforcedFunctionByKey: function(key) {
  _aspxClearTimer(this.unforcedFunctions[key]);
  this.unforcedFunctions[key] = undefined;
 },
 FocusToolbar: function() {
  this.GetToolbar().Focus();
 },
 FocusLastToolbar: function() {
  this.GetToolbar().FocusLastToolbar();
 },
 ProcessTabOnKeyDown: function(evt) {
  if (__aspxIE && evt.keyCode == ASPxKey.Tab) {
   try {
    if (evt.shiftKey) {
     this.isLockedUpdateToolbar = true;
     this.FocusLastToolbar();
     ASPxClientHtmlEditor.PreventEventIE(evt);
    }
   }
   catch (e) { }
  }
 },
 OnKeyDown: function(evt) {
  if(!this.GetEnabled())
   return;
  var keyCode = _aspxGetKeyCode(evt);
  if(!__aspxWebKitTouchUI && !__aspxMSTouchUI && (this.executeApplyStyle.length > 0 || this.executeRemoveFontStyle.length > 0)) {
   if(!ASPxHtmlEditorKeyboardManager.IsSystemKey(keyCode) || keyCode == ASPxKey.Space || keyCode == 0) {
    setTimeout(function () {
     if(this.executeApplyStyle.length > 0 || this.executeRemoveFontStyle.length > 0)
      ASPxHtmlEditorCommands.Browser.ApplyStyle(this);
    }.aspxBind(this), 0);
   } 
   else if(keyCode == ASPxKey.Ctrl || keyCode == ASPxKey.Shift || keyCode == ASPxKey.Alt)
    this.isLockedUpdateToolbar = true;
   else {
    this.isLockedUpdateToolbar = false;
    this.ClearExecutingCommandState();
   }
  }
  if(__aspxIE) {
   if(this.isPreventKeyPressOnShowContextMenu) {
    _aspxPreventEventAndBubble(evt);
    return false;
   }
   if(evt.shiftKey) {
    this.isLockedUpdateToolbar = true;
    if(evt.keyCode == ASPxKey.Tab)
     this.SaveSelection();
   }
  }
  this.shortcutCmdID = this.keyboardManager.GetShortcutCommand(evt);
  this.isAllowToPreventShortcut = false;
  if(this.IsShortcut() && this.shortcutCmdID == ASPxClientCommandConsts.FULLSCREEN_COMMAND) {
   this.ExecuteCommand(ASPxClientCommandConsts.FULLSCREEN_COMMAND, null);
   this.isAllowToPreventShortcut = true;
   return __aspxIE || __aspxWebKitFamily ? ASPxClientHtmlEditor.PreventEventIE(evt) : _aspxPreventEvent(evt);
  }
  else if(this.IsHtmlView() || this.IsPreview())
   return false;
  this.ProcessTabOnKeyDown(evt); 
  if(!this.IsShortcut()) 
   this.beforePopupSelection = null;
  if(!__aspxIE && evt.keyCode == ASPxKey.F10) { 
   ASPxHtmlEditorsCollection.Get().FocusActiveEditorToolbar();
   return _aspxPreventEvent(evt);
  }
  else if(this.IsShortcut()) {
   this.ExecuteCommand(this.shortcutCmdID, null);
   this.isAllowToPreventShortcut = !this.IsDefaultActionCommand(this.shortcutCmdID);  
  }
  else if(this.keyboardManager.IsBrowserShortcut(evt))
   return _aspxPreventEvent(evt);
  else {
   this.keyDownInfo = this.keyboardManager.GetKeyDownInfo(evt);
   if(this.keyDownInfo.isSystemKey) {
    if(this.keyDownInfo.isDeleteOrBackSpaceKey) {
     var startListItem = _aspxGetParentByTagName(this.GetSelection().clientSelection.GetStartContainer(), "LI");
     var endListItem = _aspxGetParentByTagName(this.GetSelection().clientSelection.GetEndContainer(), "LI");
     if((__aspxIE || __aspxOpera) && !this.keyDownInfo.isBackSpaceKey && !this.GetSelection().GetHtml() || endListItem && endListItem != startListItem) {
      this.ExecuteCommand(ASPxClientCommandConsts.DELETE_COMMAND, null);
      _aspxPreventEvent(evt);
     }
     else {
      this.ExecuteCommand(ASPxClientCommandConsts.KBDELETE_COMMAND, null);
      this.commandManager.UpdateLastRestoreHtml();
     }
    }
   }
   else if(!this.keyDownInfo.isCursorMovingKey && !this.IsTextTyping())
    this.ExecuteCommand(ASPxClientCommandConsts.TEXTTYPE_COMMAND, null);
   else if(__aspxIE && __aspxBrowserMajorVersion < 9){
    this.UnforcedFunctionCall(function() { 
     this.SaveSelection();
    }.aspxBind(this), "SaveSelection", 300);
   }
  }
  if (this.IsShortcut() && (__aspxIE || __aspxWebKitFamily) && this.isAllowToPreventShortcut)
   ASPxClientHtmlEditor.PreventEventIE(evt);
 },
 OnKeyUp: function(evt) {
  if(!this.GetEnabled())
   return;
  if(__aspxIE) {
   if(this.isPreventKeyPressOnShowContextMenu) {
    _aspxPreventEventAndBubble(evt);
    return false;
   }
   if(evt.keyCode == ASPxKey.Shift)
    this.isLockedUpdateToolbar = false;
  }
  if(!this.IsShortcut()) {
   if (this.IsDeleting())
    var emptyDeleted = this.commandManager.CleanEmptyRestoreHtml();
   if (this.IsTextTyping() || (this.IsDeleting() && !emptyDeleted) || this.IsSpacing())
    this.OnHtmlChanged(true);
   else if(!this.isLockedUpdateToolbar)
    this.OnSelectionChanged();
   this.ClearKeyDownInfo();
  } else if(this.IsDefaultActionCommand(this.shortcutCmdID) && this.IsHtmlChangeableCommand(this.shortcutCmdID)) {
   if(evt.keyCode == ASPxKey.Enter && !this.isAllowToPreventShortcut)
    this.SaveToUndoHistory(); 
   this.OnHtmlChanged(true);
  }
  else
   this.OnSelectionChanged();
 },
 OnKeyPress: function(evt) {
  if(!this.GetEnabled())
   return;
  if(__aspxIE && this.isPreventKeyPressOnShowContextMenu) {
   _aspxPreventEventAndBubble(evt);
   return false;
  }
  if (this.IsShortcut(evt) && this.isAllowToPreventShortcut) {
   this.shortcutCmdID = null;
   return _aspxPreventEvent(evt);
  }
 },
 OnDblClick: function(evt) {
  if(!this.GetEnabled())
   return;
  if(__aspxIE)
   this.isPreventKeyPressOnShowContextMenu = false;
  var source = _aspxGetEventSource(evt);
  if (!source)
   return;
  if (source.tagName == "IMG") {
   if (__aspxWebKitFamily)
    ASPxClientHtmlEditorSelection.SelectElement(source, this);
   this.ExecuteCommand(ASPxClientCommandConsts.CHANGEIMAGE_DIALOG_COMMAND);
  }
 },
 OnMouseDown: function(evt) {
  if(!this.GetEnabled())
   return;
  if(this.shouldLostFocusBePrevented(evt, true)) {
   this.preventLostFocus = true;
   return _aspxPreventEventAndBubble(evt);
  }
  if(__aspxIE)
   this.isPreventKeyPressOnShowContextMenu = false;
  var toolBar = this.GetToolbar();
  if (toolBar)
   toolBar.HideAllPopups();
  if (__aspxWebKitFamily) {
   var source = _aspxGetEventSource(evt);
   if (source && source.tagName == "IMG")
    ASPxClientHtmlEditorSelection.SelectElement(source, this);
  }
  this.isMouseDown = true;
  if(__aspxNetscapeFamily && !this.isInFocus) { 
   var source = _aspxGetEventSource(evt);
   if (source && source.tagName == "IMG") {
    this.SetFocus();
    return _aspxPreventEvent(evt);
   }
  }
 },
 OnTouchMouseUp: function() {
  if(!this.isInFocus) {
   setTimeout(function() {
    this.Focus();
   }.aspxBind(this), 0);
  }
 },
 selectionChange: function(){
  if(this.isInFocus)
   this.OnSelectionChanged();
 },
 OnMouseUp: function(evt) {
  if(!this.GetEnabled())
   return;
  if(this.shouldLostFocusBePrevented(evt, false)) {
   this.preventLostFocus = true;
   return _aspxPreventEventAndBubble(evt);
  }
  if(this.executeApplyStyle.length > 0 || this.executeRemoveFontStyle.length > 0) {
   if(!this.isLockedUpdateToolbar)
    this.ClearExecutingCommandState();
   this.isLockedUpdateToolbar = false;
  }
  if((__aspxIE && evt.button != 2) || (__aspxWebKitFamily && _aspxGetIsLeftButtonPressed(evt))) { 
   var self = this;
   var handler = function() {
    self.OnSelectionChanged();
   };
   window.setTimeout(handler, (__aspxIE && __aspxBrowserMajorVersion >= 9) ? 100 : 0); 
  }
  else
   this.OnSelectionChanged();
  this.isMouseDown = false;
 },
 OnFocus: function() {
  if(!this.GetEnabled())
   return;
  ASPxClientTouchUI.removeDocumentTouchEventHandlers();
  if(__aspxWebKitTouchUI) {
   ASPxGesturesHelper.DetachEvents();
   this.eventListener.DetachEventTouchMouseUpToEditor();
   if(window.parent != window) {
    if(window.parent.ASPxGesturesHelper)
     window.parent.ASPxGesturesHelper.DetachEvents();
    if(window.parent.ASPxClientTouchUI)
     window.parent.ASPxClientTouchUI.removeDocumentTouchEventHandlers();
   }
  }
  if (!this.isInitialized || this.isInFocus || !this.IsDesignView())
   return;
  if(this.toolbar && this.toolbar.extToolbarID)
   ASPxHtmlEditorsCollection.Get().SetActive(this);
  this.isInFocus = true;
  this.isLockedUpdateToolbar = !(this.executeApplyStyle.length == 0 && this.executeRemoveFontStyle.length == 0) || this.isLockedUpdateToolbar;
  if(!this.isSelectionRestored) {
   if(__aspxWebKitFamily)
    this.RestoreSelectionByTimer();
   else
    this.RestoreSelection();
  }
  this.RaiseFocus();
 },
 OnLostFocus: function() {
  if(!this.GetEnabled())
   return;
  if(this.preventLostFocus) {
   this.preventLostFocus = undefined;
   return;
  }
  ASPxClientTouchUI.restoreDocumentTouchEventHandlers();
  if(__aspxWebKitTouchUI) {
   ASPxGesturesHelper.AttachEvents();
   this.eventListener.AttachEventTouchMouseUpToEditor();
   if(window.parent != window) {
    if(window.parent.ASPxGesturesHelper)
     window.parent.ASPxGesturesHelper.AttachEvents();
    if(window.parent.ASPxClientTouchUI)
     window.parent.ASPxClientTouchUI.restoreDocumentTouchEventHandlers();
   }
  }
  if (!this.isInitialized || !this.isInFocus || !this.IsDesignView())
   return;
  if(this.toolbar && this.toolbar.extToolbarID)
   ASPxHtmlEditorsCollection.Get().SetActive(this);
  this.isInFocus = false;
  this.isSelectionRestored = false;
  this.RaiseLostFocus();
 },
 OnErrorFrameCloseButtonClick: function() {
  this.SaveCurrentSize(false, true);
  this.isValid = true;
  this.UpdateErrorFrame();
  this.UpdateClientValidationState();
  this.SetFocus();
  this.SetHeightInternal(this.currentHeight);
 },
 OnDesignViewIframeLoad: function() {
  var designViewIframe = document.getElementById(this.GetDesignViewIFrameName());
  if (designViewIframe && !designViewIframe.isLoaded) {
   designViewIframe.isLoaded = true;
   this.InitAreas();
   if(!this.IsHidden())
    this.UpdateLayout();
   this.InitializeManagers();
   if(!this.IsHidden())
    this.AdjustControlCore();
   this.iframeLoadCalled = true;
   this.TryCallRaiseInit();
   if(__aspxOpera)
    this.UpdateToolbar();
  }
 },
 TryCallRaiseInit: function() {
  if(this.isInitialized && this.iframeLoadCalled && this.needRaiseInit) {
   this.needRaiseInit = false;
   this.RaiseInit();
  }
 },
 shouldLostFocusBePrevented: function(evt, mouseDown) {
  var source = _aspxGetEventSource(evt);
  return __aspxIE && source && source.tagName == "HTML" && this.isInFocus && (!mouseDown || _aspxGetIsLeftButtonPressed(evt));
 },
 ClearDragDropTimer: function() {
  if (this.dragDropTimerID)
   _aspxClearTimer(this.dragDropTimerID);
 },
 OnAfterDocumentObjectDragEnd: function() {
  this.isDropExternalContentExecuted = false;
  this.OnHtmlChanged(true);
  this.ClearDragDropTimer();
 },
 OnAfterDocumentObjectDragEndCallWithDelay: function() {
  var callStr = "aspxHEAfterDocumentObjectDragEnd(\"" + this.name + "\")";
  this.dragDropTimerID = _aspxSetTimeout(callStr, __aspxHEDragDropDelay);
 },
 OnAfterObjectDragEnd: function() {
  this.OnHtmlChanged(true);
  this.ClearDragDropTimer();
 },
 OnAfterObjectDragEndWithDelay: function() {
  var callStr = "aspxHEAfterObjectDragEnd(\"" + this.name + "\")";
  this.dragDropTimerID = _aspxSetTimeout(callStr, __aspxHEDragDropDelay);
 },
 OnDocumentObjectDragEnd: function() {
  if (this.isDropExternalContentExecuted)
   this.OnAfterDocumentObjectDragEnd();
 },
 OnObjectDragStart: function(evt) {
  if (!this.isDraggingInsideEditor && !__aspxHEIsDocumentDragOver ) {
   this.isDraggingInsideEditor = true;
   this.ExecuteCommand(ASPxClientCommandConsts.DRAGDROPOBJECT_COMMAND, null);
  }
 },
 OnObjectDrop: function(evt) {
  if (!this.isDraggingInsideEditor) {
   this.isDropExternalContentExecuted = true;
   this.ExecuteCommand(ASPxClientCommandConsts.DROPOBJECTFROMEXTERNAL_COMMAND, null);
   if (__aspxHEIsDocumentDragOver) { 
    __aspxHEIsDocumentDragOver = false;
    this.OnAfterDocumentObjectDragEndCallWithDelay();
   }
  }
  if (__aspxNetscapeFamily)
   this.OnObjectDragEnd();
 },
 OnObjectDragEnd: function() {
  if (this.isDraggingInsideEditor) {
   this.isDraggingInsideEditor = false;
   this.OnAfterObjectDragEndWithDelay();
  }
 },
 OnObjectResizeStart: function(evt) {
  this.ExecuteCommand(ASPxClientCommandConsts.RESIZEOBJECT_COMMAND, null);
 },
 OnObjectResizeEnd: function(evt) {
  this.OnHtmlChanged(true);
 },
 OnContextMenuItemClick: function(item) {
  this.RestoreSelectionForPopup();
  if(__aspxIE)
   this.isPreventKeyPressOnShowContextMenu = false;
  var instance = this;
  window.setTimeout(function() { 
   instance.ExecuteCommand(item.name, null);
  }, 0);
 },
 SaveSelectionForPopup: function() {
  this.beforePopupSelection = this.GetSelection().clientSelection;
  if (__aspxIE && __aspxBrowserMajorVersion < 11)
   this.selectionBookmark = this.beforePopupSelection.GetExtendedBookmark();
  else
   this.beforePopupSelection.Save();
 },
 RestoreSelectionForPopup: function() {
  if(!__aspxOpera) {
   if (this.beforePopupSelection) {
    if (__aspxIE && __aspxBrowserMajorVersion < 11 && this.selectionBookmark) {
     this.beforePopupSelection.SelectExtendedBookmark(this.selectionBookmark);
     this.selectionBookmark = null;
    }
    else
     this.beforePopupSelection.Restore();
    this.beforePopupSelection = null;
   }
  }
 },
 OnContextMenuCloseUp: function() {
  if (this.beforePopupSelection)
   this.selectionBookmark = this.beforePopupSelection.RemoveExtendedBookmark(this.selectionBookmark);
 },
 OnContextMenu: function(evt) {
  if (this.allowContextMenu == true)
   this.ShowContextMenu(evt);
  if (__aspxIE && __aspxBrowserMajorVersion < 9)
   evt.returnValue = false;
  else
   evt.preventDefault();
 },
 OnToolbarDropDownItemCloseUp: function() {
  this.RestoreSelectionForPopup();
 },
 OnPasteIE: function() {
  if(this.IsDesignView()) {
   var body = this.GetDesignViewIFrameDocumentBody();
   ASPxClientHtmlEditor.RestoreUrlsInDOM(body);
   if(__aspxBrowserVersion == 8) {
    var selection = this.GetSelection();
    body.innerHTML = body.innerHTML; 
    this.SetSelection(selection);
   }
  }
 },
 OnPasteWebKit: function(evt) {
  var target = evt.target;
  if(evt.clipboardData.getData('text/html') && _aspxGetCurrentStyle(target).display != 'block')
   this.WebKitProcessPasteInTableCell(target); 
  if(__aspxWebKitTouchUI) {
   setTimeout(function() {
    this.ExecuteCommand(ASPxClientCommandConsts.KBPASTE_COMMAND);
    this.OnHtmlChanged(true);
   }.aspxBind(this), 0);
  }
 },
 WebKitProcessPasteInTableCell: function(target) { 
  var tableCell = ASPxClientUtils.GetParentByTagName(target, 'TD');
  if(tableCell == null) {
   return;
  }
  var doc = this.GetDesignViewDocument();
  var selection = this.GetSelection().clientSelection;
  var bookmark = selection.GetExtendedBookmark();
  tableCell.normalize();
  var iterator = doc.createNodeIterator(tableCell, NodeFilter.SHOW_TEXT, null, false);
  var analyzer = doc.createElement('span');
  var textNode;
  while(textNode = iterator.nextNode()) {
   analyzer.textContent = textNode.nodeValue;
   analyzer.innerHTML = analyzer.innerHTML.replace(/\s{2,}/g, ' ');
   textNode.nodeValue = analyzer.textContent;
  }
  var contentWrapper = doc.createElement('div');
  for(var child; child = tableCell.firstChild; ) {
    contentWrapper.appendChild(child);
  }
  tableCell.appendChild(contentWrapper);
  selection.SelectExtendedBookmark(bookmark, true);
  var instance = this;
  var cleanupCallback = function () {
   var selection = instance.GetSelection().clientSelection;
   var bookmark = selection.GetExtendedBookmark();
   for(var child; child = contentWrapper.firstChild; ) {
    tableCell.appendChild(child);
   }
   _aspxRemoveElement(contentWrapper);
   selection.SelectExtendedBookmark(bookmark, true);
  };
  setTimeout(cleanupCallback, 0);
 },
 CreateErrorFrames: function() {
  if(this.GetTemplateErrorFrame() == null)
   return;
  var designViewCell = this.GetDesignViewCell();
  if(designViewCell != null) {
   var errorFrame = this.CreateErrorFrame(this.GetErrorFrameID(ASPxClientHtmlEditorView.Design),
          this.GetErrorTextCellID(ASPxClientHtmlEditorView.Design),
          this.GetErrorFrameCloseButtonCellID(ASPxClientHtmlEditorView.Design));
   designViewCell.insertBefore(errorFrame, designViewCell.firstChild);
  }
  var htmlViewCell = this.GetHtmlViewEditCell();
  if(htmlViewCell != null) {
   var errorFrame = this.CreateErrorFrame(this.GetErrorFrameID(ASPxClientHtmlEditorView.Html),
          this.GetErrorTextCellID(ASPxClientHtmlEditorView.Html),
          this.GetErrorFrameCloseButtonCellID(ASPxClientHtmlEditorView.Html));
   htmlViewCell.insertBefore(errorFrame, htmlViewCell.firstChild);
  }
  var previewViewCell = this.GetPreviewCell();
  if(previewViewCell != null) {
   var errorFrame = this.CreateErrorFrame(this.GetErrorFrameID(ASPxClientHtmlEditorView.Preview),
          this.GetErrorTextCellID(ASPxClientHtmlEditorView.Preview),
          this.GetErrorFrameCloseButtonCellID(ASPxClientHtmlEditorView.Preview));
   previewViewCell.insertBefore(errorFrame, previewViewCell.firstChild);
  }
 },
 CreateErrorFrame: function(errorFrameId, errorTextCellId, errorFrameCloseButtonCellId) {
  var errorFrame = this.GetTemplateErrorFrame().cloneNode(true);
  errorFrame.id = errorFrameId;
  errorTable = _aspxGetChildByTagName(errorFrame, "TABLE", 0);
  var errorTextCell = _aspxGetChildByTagName(errorTable, "TD", 0);
  errorTextCell.id = errorTextCellId;
  var errorFrameCloseButtonCell = _aspxGetChildByTagName(errorTable, "TD", 2);
  errorFrameCloseButtonCell.id = errorFrameCloseButtonCellId;
  var errorFrameCloseButtonImage = _aspxGetChildByTagName(errorFrameCloseButtonCell, "IMG", 0);
  errorFrameCloseButtonImage.id = errorFrameCloseButtonCellId + ASPxClientHtmlEditorIDSuffix.ButtonImageIdPostfix;
  this.CreateErrorFrameCloseButtonHoverState(errorFrameCloseButtonCell.id);
  return errorFrame;
 },
 CreateErrorFrameCloseButtonHoverState: function(buttonID) {
  if (this.templateHoverErrorFrameCloseButton) {
   aspxGetStateController().AddHoverItem(buttonID,
    this.templateHoverErrorFrameCloseButton.className, this.templateHoverErrorFrameCloseButton.cssText,
    this.templateHoverErrorFrameCloseButton.postfixes, this.templateHoverErrorFrameCloseButton.imageUrls,
    this.templateHoverErrorFrameCloseButton.imagePostfixes);
  }
 },
 GetIsValid: function(){
  return this.isValid;
 },
 GetErrorText: function(){
  return this.errorText;
 },
 SetIsValid: function(isValid, validating){
  if(this.clientValidationEnabled) {
   this.isValid = isValid;
   this.UpdateErrorFrame();
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
  }
 },
 SetErrorText: function(errorText, validating){
  if(this.clientValidationEnabled) {
   this.errorText = errorText;
   this.UpdateErrorFrame();
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
  }
 },
 Validate: function() {
  this.OnValidation(ASPxValidationType.PersonalViaScript);
 },
 BeginErrorFrameUpdate: function() {
  if(!this.errorFrameUpdateLocked)
   this.errorFrameUpdateLocked = true;
 },
 EndErrorFrameUpdate: function() {
  this.errorFrameUpdateLocked = false;
  this.UpdateErrorFrame();
 },
 OnValidation: function(validationType) {
  if(this.clientValidationEnabled && this.isInitialized) {
   this.BeginErrorFrameUpdate();
   this.SetIsValid(true, true );
   this.SetErrorText(this.initialErrorText, true );
   this.isValid = this.ValidateWithPatterns();
   if(this.isValid) {
    var currentHtml = this.GetHtml();
    var args = this.RaiseValidation(currentHtml, this.isValid, this.errorText);
    if(currentHtml != args.html)
     this.SetHtml(args.html);
    this.SetIsValid(args.isValid, true );
    this.SetErrorText(args.errorText, true );
   }
   this.EndErrorFrameUpdate();
   this.UpdateClientValidationState();
   this.UpdateValidationSummaries(validationType);
   return this.isValid;
  }
  else
   return true;
 },
 ValidateWithPatterns: function() {
  if(this.validationPatterns.length > 0) {
   var html = this.GetHtml();
   for(var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if (!validator.EvaluateIsValid(html)) {
     this.SetIsValid(false, true );
     this.SetErrorText(validator.errorText, true );
     return false;
    }
   }
  }
  return true;
 },
 UpdateErrorFrame: function() {
  if(this.errorFrameUpdateLocked)
   return;
  if(!this.IsIFrameReady()) {
   this.needUpdateErrorFrame = true;
   return;
  }
  this.needUpdateErrorFrame = false;
  this.SaveCurrentSize(false, true);
  var errorTextCell = this.GetErrorTextCell(this.activeView);
  if(errorTextCell != null)
   errorTextCell.innerHTML = this.errorText;
  if(!this.isValid)
   this.ShowErrorFrame();
  else
   this.HideErrorFrame();
  this.SetHeightInternal(this.currentHeight);
 },
 ShowErrorFrame: function() {
  this.SetErrorFrameVisibility(true);
 },
 HideErrorFrame: function() {
  this.SetErrorFrameVisibility(false);
 },
 SetErrorFrameVisibility: function(visible) {
  var errorFrame = this.GetErrorFrame(this.activeView);
  if(errorFrame != null)
   _aspxSetElementDisplay(errorFrame, visible);
 },
 UpdateClientValidationState: function() {
  var hfValidationState = this.GetValidationStateHiddenField();
  if(typeof(hfValidationState) != "undefined" && hfValidationState != null)
   hfValidationState.value = _aspxEncodeHtml(!this.isValid ? this.errorText : "");
 },
 UpdateValidationSummaries: function(validationType, initializing) {
  if(typeof(ASPxClientValidationSummary) != "undefined") {
   var summaryCollection = aspxGetClientValidationSummaryCollection();
   if(summaryCollection != null)
    summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
  }
 },
 OnSizeGripMouseDown: function(evt) {
  this.resizeTempVars.isInResize = false;
  if(this.GetEnabled()) {
   this.SetResizingPanelVisibility(true);
   this.SaveCurrentSizeGripPosition(evt, true);
   this.SaveStartSize();
   _aspxChangeStyleAttribute(this.resizingPanel, "cursor", this.rtl ? "ne-resize" : "se-resize");
   this.resizeTempVars.isInMove = true;
  }
 },
 OnSizeGripMouseUp: function(evt) {
  if(!this.resizeTempVars.isInMove)
   return;
  this.SetResizingPanelVisibility(false);
  _aspxRestoreStyleAttribute(this.resizingPanel, "cursor");
  this.SaveCurrentSize(true, true, true, true);
  this.resizeTempVars.isInMove = false;
  this.resizeTempVars.isInResize = false;
  this.resizeTempVars = {};
 },
 OnSizeGripMouseMove: function(evt) {
  if(!this.resizeTempVars.isInMove || this.resizeTempVars.isInResize)
   return;
  if(__aspxIE && !_aspxGetIsLeftButtonPressed(evt)) {
   this.OnSizeGripMouseUp(evt);
   return;
  }
  this.isWidthDefinedInPercent = false;
  this.resizeTempVars.isInResize = true;
  this.SaveCurrentSizeGripPosition(evt);
  this.SetDeltaSize();
  this.resizeTempVars.isInResize = false;
 },
 SetDeltaSize: function() {
  this.SetDeltaWidthInternal(this.rtl 
   ? this.resizeTempVars.startSizeGripXPos - this.resizeTempVars.currentSizeGripXPos 
   : this.resizeTempVars.currentSizeGripXPos - this.resizeTempVars.startSizeGripXPos
  );
  this.SetDeltaHeightInternal(this.resizeTempVars.currentSizeGripYPos - this.resizeTempVars.startSizeGripYPos);
 },
 SetDeltaWidthInternal: function(delta, isCheckRanges) {
  isCheckRanges = _aspxIsExists(isCheckRanges) ? isCheckRanges : true;
  var lastMainElementHeight = this.GetMainElement().offsetHeight;
  if(isCheckRanges)
   var width = this.GetSizeInRanges(this.minWidth, this.maxWidth, this.resizeTempVars.startMainWidth, this.resizeTempVars.startResizeElWidth, delta);
  else
   var width = this.resizeTempVars.startResizeElWidth + delta;
  this.GetMainElement().style.width = "";
  this.GetCurrentEditElement().style.width = "100%";
  this.GetMainCell().firstChild.style.width = Math.max(width, 1) + "px";
  this.AdjustInnerControls();
  var mainElementDeltaHeight = this.GetMainElement().offsetHeight - lastMainElementHeight;
  if(mainElementDeltaHeight != 0){
   this.SetDeltaHeightInternal(-mainElementDeltaHeight);
   this.resizeTempVars.startResizeElHeight -= mainElementDeltaHeight;
  }
 },
 SetDeltaHeightInternal: function(delta, isCheckRanges) {
  isCheckRanges = _aspxIsExists(isCheckRanges) ? isCheckRanges : true;
  if(isCheckRanges)
   var height = this.GetSizeInRanges(this.minHeight, this.maxHeight, this.resizeTempVars.startMainHeight, this.resizeTempVars.startResizeElHeight, delta);
  else
   var height = this.resizeTempVars.startResizeElHeight + delta;
  this.GetMainElement().style.height = "";
  this.GetEditAreaCell().style.height = "";
  this.SetEditElementHeight(this.GetCurrentEditElement(), Math.max(height, 5));
  if(!this.resizeTempVars.isInResize)
   this.AdjustInnerControls();
 },
 GetSizeInRanges: function(minSize, maxSize, startMainElementSize, startResizeElementSize, delta) {
  var size = startResizeElementSize + delta;
  if(maxSize > 0 && delta > 0 && startMainElementSize + delta > maxSize){
   size = (maxSize - startMainElementSize + startResizeElementSize);
  }
  if(minSize > 0 && delta < 0 && startMainElementSize + delta < minSize){
   size = (minSize - startMainElementSize + startResizeElementSize);
  }
  return size;
 },
 SaveCurrentSizeGripPosition: function(evt, isSaveStart) {
  this.resizeTempVars.currentSizeGripXPos = _aspxGetEventX(evt);
  this.resizeTempVars.currentSizeGripYPos = _aspxGetEventY(evt);
  if(isSaveStart) {
   this.resizeTempVars.startSizeGripXPos = this.resizeTempVars.currentSizeGripXPos;
   this.resizeTempVars.startSizeGripYPos = this.resizeTempVars.currentSizeGripYPos;
  }
 },
 SaveStartSize: function() {
  this.resizeTempVars.startResizeElWidth = _aspxGetClearClientWidth(this.GetMainCell().firstChild);
  var resizeElStyleHeight = _aspxPxToInt(this.GetCurrentEditElement().style.height);
  var resizeElClientHeight = this.GetCurrentEditElement().clientHeight;
  this.resizeTempVars.startResizeElHeight = (resizeElStyleHeight < 1 && resizeElClientHeight >= 0) ? resizeElClientHeight : resizeElStyleHeight;
  this.resizeTempVars.startMainWidth = this.GetMainElement().offsetWidth;
  this.resizeTempVars.startMainHeight = this.GetMainElement().offsetHeight;
 },
 SetResizingPanelVisibility: function(visible) {
  if(!this.resizingPanel) {
   var html = "<div style='overflow:hidden; position: ";
   html += (__aspxIE && __aspxBrowserMajorVersion < 7 ? "absolute" : "fixed") +"; "; 
   if(__aspxIE ){
    html += "background-color: White; "
    html += __aspxBrowserMajorVersion < 10 ? "filter: alpha(opacity=0.1);" : "opacity: 0.01";
   }
   html += "'></div>";
   this.resizingPanel = _aspxCreateHtmlElementFromString(html);
   this.GetStatusBarCell().appendChild(this.resizingPanel);
  }
  if(visible) {
   _aspxSetAbsoluteX(this.resizingPanel, 0);
   _aspxSetAbsoluteY(this.resizingPanel, 0);
   _aspxSetStyles(this.resizingPanel, {
    width: _aspxGetDocumentWidth(),
    height: _aspxGetDocumentHeight()
   });
  }
  _aspxSetElementDisplay(this.resizingPanel, visible);
 },
 GetCurrentEditElement: function() {
  if(this.IsDesignView())
   return this.GetDesignViewCell();
  if(this.IsHtmlView())
   return this.GetHtmlViewEdit().GetInputElement();
  return this.GetPreviewCell();
 },
 SetEditElementHeight: function(element, value) {
  element.style.height = value + "px";
  if(__aspxIE && __aspxBrowserMajorVersion >= 11 && (this.IsDesignView() || this.IsPreview()))
   _aspxSetOffsetHeight(this.GetIFrameWindow().frameElement, value);
 },
 SetResizeRanges: function(minWidth, minHeight, maxWidth, maxHeight) {
  this.minWidth = minWidth;
  this.minHeight = minHeight;
  this.maxWidth = maxWidth;
  this.maxHeight = maxHeight;
 },
 RaiseCommandExecuted: function(commandName, parameter, isSuccessful) {
  this.RaiseEventWithArgsInternal(
   "CommandExecuted",
   new ASPxClientHtmlEditorCommandEventArgs(commandName, parameter, isSuccessful, this)
  );
 },
 RaiseCustomCommand: function(commandName, parameter) {
  if (!this.CustomCommand.IsEmpty()) {
   var args = new ASPxClientHtmlEditorCommandEventArgs(commandName, parameter, true, this);
   this.CustomCommand.FireEvent(this, args);
   return args.isSuccessful;
  }
  return true;
 },
 RaiseEventWithArgsInternal: function(eventName, args) {
  var evt = this[eventName];
  if(!evt.IsEmpty())
   evt.FireEvent(this, args);
  return args;
 },
 RaiseEventInternal: function(eventName) {
  this.RaiseEventWithArgsInternal(eventName, new ASPxClientEventArgs());
 },
 RaiseFocus: function() {
  this.RaiseEventInternal("GotFocus");
 },
 RaiseLostFocus: function() {
  this.RaiseEventInternal("LostFocus");
 },
 RaiseHtmlChanged: function() {
  this.RaiseEventInternal("HtmlChanged");
 },
 RaiseSelectionChanged: function() {
  this.RaiseEventInternal("SelectionChanged");
 },
 RaiseCustomDialogOpened: function(name) {
  this.RaiseEventWithArgsInternal(
   "CustomDialogOpened",
   new ASPxClientHtmlEditorCustomDialogEventArgs(name)
  );
 },
 RaiseCustomDialogClosing: function(name, status) {
  return this.RaiseEventWithArgsInternal(
   "CustomDialogClosing",
   new ASPxClientHtmlEditorCustomDialogClosingEventArgs(name, status)
  ).handled;
 },
 RaiseCustomDialogClosed: function(name, status, data) {
  this.RaiseEventWithArgsInternal(
   "CustomDialogClosed",
   new ASPxClientHtmlEditorCustomDialogClosedEventArgs(name, status, data)
  );
 },
 RaiseValidation: function(html, isValid, errorText) {
  return this.RaiseEventWithArgsInternal(
   "Validation",
   new ASPxClientHtmlEditorValidationEventArgs(html, isValid, errorText)
  );
 },
 RaiseContextMenuShowing: function() {
  this.RaiseEventInternal("ContextMenuShowing");
 },
 raiseSpellingChecked: function() {
  this.RaiseEventInternal("SpellingChecked");
 },
 RaiseActiveTabChanged: function(name) {
  this.RaiseEventWithArgsInternal(
   "ActiveTabChanged",
   new ASPxClientHtmlEditorTabEventArgs(name)
  );
 },
 RaiseActiveTabChanging: function(arg) {
  this.RaiseEventWithArgsInternal("ActiveTabChanging", arg);
 },
 SetHeight: function(height) {
  if(this.inAdjusting) return;
  if(this.isFullscreenMode) {
   this.fullscreenTempVars.savedCurrentHeight = height;
  }
  else {
   this.SetHeightInternal(height, true);
   this.resizeTempVars = {};
  }
 },
 SetWidth: function(width) {
  this.isWidthDefinedInPercent = false;
  if(this.inAdjusting) return;
  if(this.isFullscreenMode) {
   this.fullscreenTempVars.savedCurrentWidth = width;
  }
  else {
   this.SetWidthInternal(width, true);
   this.resizeTempVars = {};
  }
 },
 SetHeightInternal: function(height, isCheckRanges, isSaveSize) {
  if(this.currentHeight == 0 && this.currentWidth == 0)
   return;
  if(this.GetCurrentEditElement().offsetHeight < 5)
   this.SetEditElementHeight(this.GetCurrentEditElement(), 5);
  isSaveSize = _aspxIsExists(isSaveSize) ? isSaveSize : true;
  this.SaveStartSize();
  this.SetDeltaHeightInternal(height - this.resizeTempVars.startMainHeight, isCheckRanges);
  if(isSaveSize)
   this.SaveCurrentSize(false, true, true);
 },
 SetWidthInternal: function(width, isCheckRanges, isSaveSize) {
  if(this.currentHeight == 0 && this.currentWidth == 0)
   return;
  isSaveSize = _aspxIsExists(isSaveSize) ? isSaveSize : true;
  this.SaveStartSize();
  this.SetDeltaWidthInternal(width -  this.resizeTempVars.startMainWidth, isCheckRanges);
  if(isSaveSize)
   this.SaveCurrentSize(true, false, true);
 },
 SaveCurrentSize: function(saveWidth, saveHeight, updateClientState, saveToCookie) {
  var mainElement = this.GetMainElement();
  if(saveWidth){
   var currentWidth = mainElement.offsetWidth;
   if(currentWidth > 0){
    this.currentWidth = currentWidth;
    if(updateClientState){
     this.SetClientStateFieldValue("CurrentWidth", this.isWidthDefinedInPercent 
      ? Math.round(_aspxPercentageToFloat(this.initialMainElementWidth)*100) 
      : this.currentWidth, saveToCookie);
     this.SetClientStateFieldValue("IsPercentWidth", this.isWidthDefinedInPercent ? 1 : 0, saveToCookie);
    }
   }
  }
  if(saveHeight){
   var currentHeight = mainElement.offsetHeight;
   if(currentHeight > 0){
    this.currentHeight = currentHeight;
    if(updateClientState){
     this.SetClientStateFieldValue("CurrentHeight", this.currentHeight, saveToCookie);
    }
   }
  }
 },
 SetFullscreenMode: function(enable) {
  enable = _aspxIsExists(enable) ? enable : !this.isFullscreenMode;
  var sizeGrip = this.GetSizeGrip();
  this.isFullscreenMode = enable;
  if(enable){
   _aspxChangeStyleAttribute(this.GetMainElement(), __aspxIE ? "borderTopWidth" : "border-top-width", "0px");
   _aspxChangeStyleAttribute(this.GetMainElement(), __aspxIE ? "borderLeftWidth" : "border-left-width", "0px");
   _aspxChangeStyleAttribute(this.GetMainElement(), __aspxIE ? "borderRightWidth" : "border-right-width", "0px");
   _aspxChangeStyleAttribute(this.GetMainElement(), __aspxIE ? "borderBottomWidth" : "border-bottom-width", "0px");
   this.fullscreenTempVars.savedBodyScrollTop = _aspxGetDocumentScrollTop();
   this.fullscreenTempVars.savedBodyScrollLeft = _aspxGetDocumentScrollLeft();
   this.ShowPlaceholderDiv(true);
   if(__aspxIE && __aspxBrowserMajorVersion < 7){
    _aspxChangeStyleAttribute(this.GetMainElement(), "position", "absolute");
    _aspxChangeStyleAttribute(this.GetMainElement(), "top", -_aspxGetPositionElementOffset(this.GetMainElement(), false) + "px");
    _aspxChangeStyleAttribute(this.GetMainElement(), "left", -_aspxGetPositionElementOffset(this.GetMainElement(), true) + "px");
   }
   else {
    _aspxChangeStyleAttribute(this.GetMainElement(), "position", "fixed");
    _aspxChangeStyleAttribute(this.GetMainElement(), "top", "0px");
    _aspxChangeStyleAttribute(this.GetMainElement(), "left", "0px");
   }
   _aspxChangeStyleAttribute(this.GetMainElement(), __aspxIE ? "zIndex" : "z-index", 10001);
   _aspxChangeStyleAttribute(document.documentElement, "position", "static");
   _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
   this.fullscreenTempVars.savedBodyMargin = document.body.style.margin;
   document.body.style.margin = 0;
   if(__aspxIE && __aspxBrowserMajorVersion < 7)
    _aspxChangeAttribute(document.body, "scroll", "no");
   if(__aspxIE && __aspxBrowserMajorVersion < 8){
    document.documentElement.scrollTop = 0;
    document.documentElement.scrollLeft = 0;
   }
   this.fullscreenTempVars.savedCurrentWidth = this.currentWidth;
   this.fullscreenTempVars.savedCurrentHeight = this.currentHeight;
   if(sizeGrip)
    sizeGrip.style.visibility = "hidden";
   this.ShowCoverDiv(true);
   var toolbar = this.GetToolbar();
   if(toolbar && this.activeView == ASPxClientHtmlEditorView.Design)
    toolbar.setExternalRibbonPositionOnPageTop(this);
   this.AdjustSizeInFullscreen();
  }
  else {
   this.ShowCoverDiv(false);
   _aspxRestoreStyleAttribute(this.GetMainElement(), "left");
   _aspxRestoreStyleAttribute(this.GetMainElement(), "top");
   _aspxRestoreStyleAttribute(document.documentElement, "overflow");
   _aspxRestoreStyleAttribute(document.documentElement, "position");
   _aspxRestoreStyleAttribute(this.GetMainElement(), __aspxIE ? "zIndex" : "z-index");
   document.body.style.margin = this.fullscreenTempVars.savedBodyMargin;
   _aspxRestoreStyleAttribute(this.GetMainElement(), "position");
   _aspxRestoreStyleAttribute(this.GetMainElement(), __aspxIE ? "borderTopWidth" : "border-top-width");
   _aspxRestoreStyleAttribute(this.GetMainElement(), __aspxIE ? "borderLeftWidth" : "border-left-width");
   _aspxRestoreStyleAttribute(this.GetMainElement(), __aspxIE ? "borderRightWidth" : "border-right-width");
   _aspxRestoreStyleAttribute(this.GetMainElement(), __aspxIE ? "borderBottomWidth" : "border-bottom-width");
   this.SetHeightInternal(this.fullscreenTempVars.savedCurrentHeight, false, false);
   this.SetWidthInternal(this.fullscreenTempVars.savedCurrentWidth, false, false);
   this.currentWidth = this.fullscreenTempVars.savedCurrentWidth;
   this.currentHeight = this.fullscreenTempVars.savedCurrentHeight;
   document.body.style.margin = this.fullscreenTempVars.savedBodyMargin;
   if(__aspxIE && __aspxBrowserMajorVersion < 7)
    _aspxRestoreAttribute(document.body, "scroll");
   document.documentElement.scrollTop = this.fullscreenTempVars.savedBodyScrollTop;
   document.documentElement.scrollLeft = this.fullscreenTempVars.savedBodyScrollTop;
   this.ShowPlaceholderDiv(false);
   var toolbar = this.GetToolbar();
   if(toolbar)
    toolbar.restoreExternalRibbonPositionOnPage(this);
   if(sizeGrip)
    sizeGrip.style.visibility = "";
  }
  this.RemoveFocus(true);
  this.SetFocus();
  return enable;
 },
 AdjustSizeInFullscreen: function() {
  this.SetWidthInternal(_aspxGetDocumentClientWidth(), false, false);
  var toolbar = this.GetToolbar();
  var height = 0;
  if(toolbar && toolbar.extToolbarID && toolbar.toolbars.length > 0 && this.isFullscreenMode && this.activeView == ASPxClientHtmlEditorView.Design)
   height = toolbar.toolbars[0].GetMainElement().offsetHeight;
  this.SetHeightInternal(_aspxGetDocumentClientHeight() - height, false, false);
 },
 ShowCoverDiv: function(isShow) {
  if(!this.coverDiv) {
   this.coverDiv = _aspxCreateHtmlElementFromString(
    "<div style='overflow:hidden; position: fixed; background-color: White; display:none; z-index:10000; width:10000px; height:10000px; top:0px; left:0px;'></div>"
   );
   this.GetMainElement().parentNode.insertBefore(this.coverDiv, this.GetMainElement());
  }
  this.coverDiv.style.display = isShow ? "block" : "none";
  if(__aspxIE && __aspxBrowserMajorVersion < 7){
   this.coverDiv.style.position = "absolute";
   _aspxSetAbsoluteX(this.coverDiv, 0);
   _aspxSetAbsoluteY(this.coverDiv, 0);
  }
 },
 ShowPlaceholderDiv: function(isShow) {
  if(!this.placeholderDiv) {
   this.placeholderDiv = _aspxCreateHtmlElementFromString("<div style='background-color: White; display:none;'></div>");
   _aspxInsertElementAfter(this.placeholderDiv, this.GetMainElement());
   _aspxSetStyles(this.placeholderDiv, {
    width: this.GetWidth(),
    height: this.GetHeight()
   });
  }
  this.placeholderDiv.style.display = isShow ? "block" : "none";
 },
 OnBrowserWindowResizeInternal: function(evt) {
  if(this.isInitialized && (this.isLoaded || !this.NeedToolbarRtlPrecorrection()))
   this.AdjustControlCore();
 },
 Export: function(format) {
  this.SendPostBack("Export_" + format);
 },
 NeedToolbarRtlPrecorrection: function() {
  return __aspxIE && __aspxBrowserMajorVersion < 8 && this.rtl;
 },
 GetFullViewName: function(shortName) {
  shortName = shortName.toUpperCase();
  switch (shortName) {
   case ASPxClientHtmlEditorView.Design:
    return "Design";
   case ASPxClientHtmlEditorView.Html:
    return "HTML";
   case ASPxClientHtmlEditorView.Preview:
    return "Preview";
  }
  return "";
 },
 SetActiveTabByName: function(name) {
  var equal = function(source, res) {
   source = source.toLowerCase();
   res = res.toLowerCase();
   return source == res || source == res.substr(0, 1);
  };
  if(name && typeof name == "string") {
   var tabControl = this.GetTabControl();
   if(tabControl) {
    var viewName = equal(name, this.GetFullViewName(ASPxClientHtmlEditorView.Design)) ? ASPxClientHtmlEditorView.Design :
          equal(name, this.GetFullViewName(ASPxClientHtmlEditorView.Html)) ? ASPxClientHtmlEditorView.Html :
          equal(name, this.GetFullViewName(ASPxClientHtmlEditorView.Preview)) ? ASPxClientHtmlEditorView.Preview : "";
    if(viewName) {
     var tab = tabControl.GetTabByName(viewName);
     if(tab)
      tabControl.SetActiveTab(tab);
    }
   }
  }
 },
 GetActiveTabName: function() {
  return this.GetFullViewName(this.activeView);
 }
});
ASPxClientHtmlEditor.Cast = ASPxClientControl.Cast;
ASPxClientHtmlEditor.SpellCheckerHelper = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
  this.scInitialized = false;
  this.scStartOptions = "";
  this.scCallbackResult = "";
  this.scCallbackSpellCheckResult = "";
  this.areDictionariesAssigned = true; 
 },
 GetSpellCheckerClientInstance: function(checkExistance) {
  var collection = aspxGetControlCollection();
  var instanceName = this.htmlEditor.name + ASPxClientHtmlEditorIDSuffix.SpellChecker;
  var instance = collection.Get(instanceName);
  if(instance) {
   if(!checkExistance || _aspxIsExistsElement(instance.GetOptionsHiddenField()))
    return instance;
   collection.Remove(instance);
  }
  return null;
 },
 InitializeSpellChecker: function() {
  var spellChecker = this.GetSpellCheckerClientInstance();
  if (spellChecker && !this.scInitialized) {
   var he = this.htmlEditor;
   spellChecker.WordChanged.AddHandler(function(sender, args) {
    aspxHESpellCheckerWordChanged(he.name, sender, args);
   });
   spellChecker.ReCheck = function(text) {
    he.SendCallback(__aspxHESpellCheckingCallbackPrefix, spellChecker.CreateCallbackArgumentToCheckText(""), false);
    spellChecker.ShowLoadingElements();
   }
   spellChecker.htmlEditor = he;
   this.scInitialized = true;
  }
 },
 CheckSpelling: function() {
  var spellChecker = this.GetSpellCheckerClientInstance(true);
  var htmlEditor = this.htmlEditor;
  if (!this.areDictionariesAssigned)
   alert("No dictionaries are specified for the built-in spell checker.");
  if (!spellChecker)
   htmlEditor.SendCallback(__aspxHESpellCheckingLoadControlCallbackPrefix, ASPxClientSpellChecker.GetCallbackArgumentToCheckText("", this.scStartOptions), true);
  else
   htmlEditor.SendCallback(__aspxHESpellCheckingCallbackPrefix, spellChecker.CreateCallbackArgumentToCheckText(""), true);
 },
 OnWordChanged: function(sender, args) {
  this.htmlEditor.ExecuteCommand(ASPxClientCommandConsts.CheckSpellingCore_COMMAND, args.checkedText);
 },
 DoInitOnCallback: function() {
  var spellChecker = this.GetSpellCheckerClientInstance();
  var he = this.htmlEditor;
  if (spellChecker) {
   this.InitializeSpellChecker();
   spellChecker.CheckByCallbackResult(this.scCallbackResult, this.scCallbackSpellCheckResult, he.GetMainElement());
   spellChecker.HideLoadingPanelCore();
   _aspxProcessScriptsAndLinks(spellChecker.name);
   he.RemoveFocus();
  }
 },
 OnHtmlEditorCallback: function(prefix, result, spellCheckResult, allowScripts, spellcheckerloadcontrol) {
  this.allowScripts = Boolean(allowScripts);
  var he = this.htmlEditor;
  switch (prefix) {
   case __aspxHESpellCheckingLoadControlCallbackPrefix:
    var scDiv = _aspxCreateHtmlElementFromString("<div id='" + he.name + "_SpellCheckerContainer" + "'></div>");
    he.GetMainElement().parentNode.appendChild(scDiv);
    scDiv.innerHTML = spellcheckerloadcontrol;
    this.UpdatePopupControlBackground(scDiv);
    _aspxProcessScriptsAndLinks(he.name);
    prefix = __aspxHESpellCheckingCallbackPrefix;
   case __aspxHESpellCheckingCallbackPrefix:
    he.ClearUndoHistory();
    he.SetHtmlInternal(result);
    this.scCallbackResult = result;
    this.scCallbackSpellCheckResult = spellCheckResult;
    var _this = this;
    window.setTimeout(function() {
     _this.DoInitOnCallback();
    }, 0);
    break; 
   case __aspxHESpellCheckerOptionsCallbackPrefix:
    var spellChecker = this.GetSpellCheckerClientInstance();
    if (spellChecker) {
     spellChecker.ProcessCallbackResult(spellCheckResult);
     spellChecker.HideLoadingPanelCore();
    }
    break;
  }
 },
 UpdatePopupControlBackground: function(container) { 
  var winContentElements = _aspxGetDescendantNodes(container, function(el) {
   return el.id.indexOf("CLW-1") > -1;
  });
  for(var i = 0, wce; wce = winContentElements[i]; i++)
   wce.style.backgroundColor = "White";
 }
});
ASPxClientHtmlEditor.OnCustomDialogClosing = function(sender) {
 var buttonName = sender.name.substr(sender.name.length - 2) == "Ok" ? "ok" : "cancel";
 var htmlEditor = ASPxDialog.GetOwnerControl();
 var dialog = ASPxDialog.GetCurrentDialog();
 if(htmlEditor && dialog) {
  if(!htmlEditor.RaiseCustomDialogClosing(dialog.publicName, buttonName))
   ASPxClientHtmlEditor.CustomDialogComplete(buttonName, null);
 }
};
ASPxClientHtmlEditor.CustomDialogComplete = function(status, data) {
 aspxDialogComplete(status, data);
};
ASPxClientHtmlEditor.AreEditorsValidInContainer = function(containerOrContainerId, validationGroup, checkInvisibleEditors) {
 var container = typeof(containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 return ASPxHtmlEditorsCollection.Get().AreEditorsValidInContainer(container, validationGroup, checkInvisibleEditors);
}
ASPxClientHtmlEditor.ClearEditorsInContainer = function(containerOrContainerId, validationGroup, clearInvisibleEditors) {
 var container = typeof(containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 return ASPxHtmlEditorsCollection.Get().ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientHtmlEditor.ValidateEditorsInContainer = function(containerOrContainerId, validationGroup, validateInvisibleEditors) {
 var container = typeof (containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 var validationGroup = !!validationGroup == false ? "" : validationGroup;
 return ASPxHtmlEditorsCollection.Get().ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
}
ASPxClientHtmlEditor.SetInnerHtml = function(element, html) {
 if(__aspxIE)
  html = ASPxClientHtmlEditor.ProtectUrlsInHTML(html);
 _aspxSetInnerHtml(element, html);
 if(__aspxIE)
  ASPxClientHtmlEditor.RestoreUrlsInDOM(element);
};
ASPxClientHtmlEditor.ProtectUrlsInHTML = function(html) {
 html = ASPxClientHtmlEditor.RemoveSavedUrlsInHTML(html);
 html = html.replace(__aspxProtectUrlsARegExpPattern, '$& savedurl=$1');
 html = html.replace(__aspxProtectUrlsImgRegExpPattern, '$& savedurl=$1');
 html = html.replace(__aspxProtectUrlsAreaRegExpPattern, '$& savedurl=$1');
 return html;
};
ASPxClientHtmlEditor.RestoreUrlsInDOM = function(element) {
 ASPxClientHtmlEditor.RestoreElementsUrlsInDOM(_aspxGetElementsByTagName(element, 'A'), 'A');
 ASPxClientHtmlEditor.RestoreElementsUrlsInDOM(_aspxGetElementsByTagName(element, 'IMG'), 'IMG');
 ASPxClientHtmlEditor.RestoreElementsUrlsInDOM(_aspxGetElementsByTagName(element, 'AREA'), 'AREA');
};
ASPxClientHtmlEditor.RestoreElementsUrlsInDOM = function(elements, tagName) {
 var attributeName = tagName == 'IMG' ? 'src' : 'href';
 var savedAttributeName = 'savedurl';
 for(var i = 0; i < elements.length; i++) {
  var url = _aspxGetAttribute(elements[i], savedAttributeName);
  if(url != null) {
   var savedInnerHTML = elements[i].innerHTML;
   _aspxSetAttribute(elements[i], attributeName, url);
   if(__aspxIE && tagName == 'A' && elements[i].innerHTML != savedInnerHTML) 
    elements[i].innerHTML = savedInnerHTML;
  }
 }
};
ASPxClientHtmlEditor.RemoveSavedUrlsInHTML = function(html) {
 return html.replace(__aspxRemoveSavedUrlsRegExpPattern, '');
};
ASPxClientHtmlEditor.CleanHtmlScripts = function(html) {
 var ret = ASPxClientHtmlEditor.RemoveScriptTags(html);
 return ASPxClientHtmlEditor.RemoveScriptEventHandlers(ret);
};
ASPxClientHtmlEditor.RemoveScriptTags = function(html) {
 var ret = html;
 var rx = new RegExp(__aspxJSTagsRegExpPattern, "gi");
 if (ret != "")
  ret = ret.replace(rx, "");
 return ret;
};
ASPxClientHtmlEditor.PreserveTagsByName = function(tagName, html) {
 var openReg = new RegExp("<" + tagName, "gi");
 var closeReg = new RegExp("<" + "/" + tagName + ">", "gi");
 return _aspxApplyReplacement(html, [
  [openReg, "<" + "!--" + __aspxHEPreservedTagNamePrefix + tagName],
  [closeReg, "</" + __aspxHEPreservedTagNamePrefix + tagName + "--" + ">"]
 ]); 
};
ASPxClientHtmlEditor.DepreserveTagsByName = function(tagName, html) {
 var openReg = new RegExp("<!--" + __aspxHEPreservedTagNamePrefix + tagName, "gi");
 var closeReg = new RegExp("</" + __aspxHEPreservedTagNamePrefix + tagName + "--" + ">", "gi");
 return _aspxApplyReplacement(html, [
  [openReg, "<" + tagName],
  [closeReg, "<" + "/" + tagName + ">"]
 ]); 
};
ASPxClientHtmlEditor.ProcessHtmlByBrowser = function(html) {
 var container = document.createElement("DIV");
 _aspxSetInnerHtml(container, html);
 return container.innerHTML;
};
ASPxClientHtmlEditor.PreserveButtonTags = function(container) {
 if(!__aspxWebKitFamily && !__aspxFirefox) return;
 for(var child = container.firstChild; child; child = child.nextSibling) {
  if(child.nodeType != 1) continue;
  if(child.tagName == "BUTTON") {
   var safeNode = document.createElement("INPUT");
   _aspxCopyAllAttributes(child, safeNode);
   var savedData = "dx_savedButton:" + JSON.stringify({ dx_savedContent: child.innerHTML || "", dx_savedValue: child.value, dx_savedType: child.type, dx_savedName: child.name });
   safeNode.value = _aspxGetInnerText(child);
   safeNode.type = "button";
   safeNode.name = savedData;
   child.parentNode.replaceChild(safeNode, child);
   child = safeNode;
  }
  else if(child.childNodes.length > 0)
   ASPxClientHtmlEditor.PreserveButtonTags(child);
 }
};
ASPxClientHtmlEditor.DepreserveButtonTags = function(content) {
 if(!__aspxWebKitFamily && !__aspxFirefox) 
  return content;
 var container = content;
 if(typeof content === "string") {
  var container = document.createElement("DIV");
  container.innerHTML = content;
 }
 for(var child = container.firstChild; child; child = child.nextSibling) {
  if(child.nodeType != 1) continue;
  if(child.tagName == "INPUT" && child.name.indexOf("dx_savedButton:") === 0) {
   var node = document.createElement("BUTTON");
   _aspxCopyAllAttributes(node, child);
   try {
    var savedData = eval("(" + child.name.substr("dx_savedButton:".length) + ")");
    node.innerHTML = savedData.dx_savedContent;
    node.value = savedData.dx_savedValue;
    node.type = savedData.dx_savedType;
    node.name = savedData.dx_savedName;
   } catch (e) { 
    node.innerHTML = child.value;
   }
   child.parentNode.replaceChild(node, child);
   child = node;
  }
  else if(child.childNodes.length > 0)
   ASPxClientHtmlEditor.DepreserveButtonTags(child);
 }
 return container.innerHTML;
};
ASPxClientHtmlEditor.PreserveAttribute = function(html, attributeNameRegExp) {
 return _aspxCompleteReplace(html, ASPxClientHtmlEditor.GetAttributePreserveRegExp(attributeNameRegExp), "$1" + __aspxHEPreservedAttributeNamePrefix + "$2$3");
};
ASPxClientHtmlEditor.DepreserveAttribute = function(html, attributeNameRegExp) {
 return _aspxCompleteReplace(html, ASPxClientHtmlEditor.GetAttributeDepreserveRegExp(attributeNameRegExp), "$1$2$3");
};
ASPxClientHtmlEditor.GetAttributePreserveRegExp = function(attributeNameRegExp) {
 return new RegExp("(" + __aspxHETagsWithAttributeRegExpPattern + "\\s+)(" + attributeNameRegExp + ")(\\s*=)*", "gi");
};
ASPxClientHtmlEditor.GetAttributeDepreserveRegExp = function(attributeNameRegExp) {
 return new RegExp("(" + __aspxHETagsWithAttributeRegExpPattern + "\\s+)" + __aspxHEPreservedAttributeNamePrefix + "(" + attributeNameRegExp + ")(\\s*=)*", "gi");
};
ASPxClientHtmlEditor.RemoveScriptEventHandlers = function(html) {
 return _aspxCompleteReplace(html, __aspxJSEventHandlersRegExp, "$1");
};
ASPxClientHtmlEditor.PreventEventIE = function(evt) { 
 evt.keyCode = 123;
 evt.returnValue = false;
 if(__aspxIE && __aspxBrowserMajorVersion > 8)
  _aspxPreventEvent(evt);
 return false;
}
EventListener = _aspxCreateClass(null, {
 constructor: function(htmlEditor) {
  this.htmlEditor = htmlEditor;
  this.AttachEventsToEditor();
  this.selectedChangedTimerId = -1;
 },
 AttachEventsToEditor: function() {
  var previewDoc = this.htmlEditor.GetPreviewDocument();
  if(this.htmlEditor.allowPreview && previewDoc)
   _aspxAttachEventToElement(previewDoc, "keydown", this.CreateEventHandlerFunction("aspxHEEditAreaKeyDown", true));
  if(!this.htmlEditor.allowDesignView)
   return;
  var toolbar = this.htmlEditor.GetToolbar();
  if(toolbar)
   toolbar.attachExternalToolbarEvents(this.htmlEditor);
  var doc = this.htmlEditor.GetDesignViewDocument();
  if(__aspxIE)
   _aspxAttachEventToElement(doc.body, "paste", this.CreateEventHandlerFunction("aspxHEDesignViewIframeOnPasteIE", true));
  if(__aspxWebKitFamily) {
   _aspxAttachEventToElement(doc.body, "paste", this.CreateEventHandlerFunction("aspxHEDesignViewIframeOnPasteWebKit", true));
  }
  _aspxAttachEventToElement(doc, "keydown", this.CreateEventHandlerFunction("aspxHEEditAreaKeyDown", true));
  _aspxAttachEventToElement(doc, "keyup", this.CreateEventHandlerFunction("aspxHEEditAreaKeyUp", true));
  if (!__aspxIE) 
   _aspxAttachEventToElement(doc, "keypress", this.CreateEventHandlerFunction("aspxHEEditAreaKeyPress", true));
  _aspxAttachEventToElement(doc, "mousedown", this.CreateEventHandlerFunction("aspxHEEditAreaMouseDown", true));
  _aspxAttachEventToElement(doc, "mouseup", this.CreateEventHandlerFunction("aspxHEEditAreaMouseUp", true));
  if(__aspxWebKitTouchUI)
   this.eventEndlerTouchMouseUp = this.CreateEventHandlerFunction("aspxHEEditAreaTouchMouseUp", true);
  if(__aspxMSTouchUI || __aspxWebKitTouchUI){
   _aspxAttachEventToElement(doc, "selectionchange", function(){
    _aspxClearTimer(this.selectedChangedTimerId);
    this.selectedChangedTimerId = window.setTimeout(function(){
     this.htmlEditor.selectionChange();
    }.aspxBind(this), 100);
   }.aspxBind(this));
  }
  var designViewIFrame = this.htmlEditor.GetDesignViewIFrameWindow();
  _aspxAttachEventToElement(designViewIFrame, "focus", this.CreateEventHandlerFunction("aspxHEEditAreaOnFocus", false));
  _aspxAttachEventToElement(designViewIFrame, "blur", this.CreateEventHandlerFunction("aspxHEEditAreaOnLostFocus", false));
  if (!__aspxOpera)
   _aspxAttachEventToElement(doc, "dblclick", this.CreateEventHandlerFunction("aspxHEEditAreaDblClick", true));
  if (__aspxNetscapeFamily) {
   this.htmlEditor.GetDesignViewIFrameWindow().captureEvents(Event.DRAGDROP | Event.DBLCLICK);
   _aspxAttachEventToElement(this.htmlEditor.GetDesignViewIFrameWindow(), __aspxBrowserVersion < 3.5 ? "dragdrop" : "dragend", 
    this.CreateEventHandlerFunction("aspxHEEditObjectDrop", true));
   _aspxAttachEventToElement(this.htmlEditor.GetDesignViewIFrameWindow(), "dragover",
    this.CreateEventHandlerFunction("aspxHEEditObjectDragStart", true));
  }
  else {
   _aspxAttachEventToElement(doc.body, "resizestart",
    this.CreateEventHandlerFunction("aspxHEEditObjectResizeStart", true));
   _aspxAttachEventToElement(doc.body, "resizeend",
    this.CreateEventHandlerFunction("aspxHEEditObjectResizeEnd", true));
   _aspxAttachEventToElement(document.body, "dragend", 
    this.CreateEventHandlerFunction("aspxHEDocumentObjectDragEnd", true));
   _aspxAttachEventToElement(doc.body, "dragstart",
    this.CreateEventHandlerFunction("aspxHEEditObjectDragStart", true));
   _aspxAttachEventToElement(doc.body, "drop",
    this.CreateEventHandlerFunction("aspxHEEditObjectDrop", true));
   _aspxAttachEventToElement(doc.body, "dragend",
    this.CreateEventHandlerFunction("aspxHEEditObjectDragEnd", true));
  }
  if (this.htmlEditor.allowContextMenu != "default") {
   if (__aspxSafari  || (__aspxWebKitFamily && __aspxMacOSPlatform)) 
    _aspxAttachEventToElement(doc, "contextmenu", function (evt) { evt.preventDefault(); });
   else
    _aspxAttachEventToElement(doc, "contextmenu", this.CreateEventHandlerFunction("aspxHEEditAreaContextMenu", true));
  }
  if (__aspxFirefox) { 
   var he = this.htmlEditor;
   _aspxAttachEventToDocument("click", function(evt) {
    if(he.GetMainElement() != null) { 
     var clickOutside = !_aspxGetParentByPartialId(_aspxGetEventSource(evt), he.GetMainElement().id);
     setTimeout(function() {
      if(clickOutside && he.isInFocus && !he.IsVisible())
       he.OnLostFocus();
     }, 0);
    }
   });
  }
 },
 AttachEventTouchMouseUpToEditor: function() {
  if(!this.isAttachedEventTouchMouseUp) {
   _aspxAttachEventToElement(this.htmlEditor.GetDesignViewDocument(), ASPxClientTouchUI.touchMouseUpEventName, this.eventEndlerTouchMouseUp);
   this.isAttachedEventTouchMouseUp = true;
  }
 },
 DetachEventTouchMouseUpToEditor: function() {
  if(this.isAttachedEventTouchMouseUp) {
   _aspxDetachEventFromElement(this.htmlEditor.GetDesignViewDocument(), ASPxClientTouchUI.touchMouseUpEventName, this.eventEndlerTouchMouseUp);
   this.isAttachedEventTouchMouseUp = false;
  }
 },
 CreateEventHandlerFunction: function(funcName, withHTMLEventArg) {
  return withHTMLEventArg ? new Function("event", funcName + "('" + this.htmlEditor.name + "', event);") :
   new Function(funcName + "('" + this.htmlEditor.name + "');");
 }
});
ASPxClientPath = {
 DirectorySeparatorChar: "\\",
 AltDirectorySeparatorChar: "/",
 VolumeSeparatorChar: ":",
 GetBaseUrlPath: function() {
  return window.location.protocol + "//" +  window.location.host;
 },
 GetFileName: function(path) {
  if (path) {
   var length = path.length;
   var index = length;
   while (--index >= 0) {
    var ch = path.charAt(index);
    if (((ch == ASPxClientPath.DirectorySeparatorChar) || (ch == ASPxClientPath.AltDirectorySeparatorChar)) || 
      (ch == ASPxClientPath.VolumeSeparatorChar))
     return path.substr(index + 1, (length - index) - 1);
   }
  }
  return "";
 },
 GetFileNameWithoutExtension: function(path) {
  path = ASPxClientPath.GetFileName(path);
  if (!path)
   return "";
  var length = path.lastIndexOf('.');
  if (length == -1)
   return path;
  return path.substr(0, length);
 }
};
var __aspxStyleAttributeRegEx = new RegExp("style=\"[^\"]*\"|'[^']*'", "ig");
var __aspxRGBColorCssAttrRegExp = new RegExp("rgb\\((\\d+)\\,(\\s)?(\\d+)\\,(\\s)?(\\d+)\\)", "ig");
var __aspxDefaultSafariFontSizes = ["x-small", "small", "medium", "large", "x-large", "xx-large", "-webkit-xxx-large"];
var __aspxDefaultSafariFontSizesInPixel = ["11px", "13px", "16px", "19px", "24px", "32px", "48px"];
var __aspxDefaultFontSizes = ["8pt", "10pt", "12pt", "14pt", "18pt", "24pt", "36pt"];
var __aspxDefaultFontNames = ["Times New Roman", "Tahoma", "Verdana", "Arial", "MS Sans Serif", "Courier", "Helvetica"];
var __aspxDefaultSafariFontSizesHashTable = null;
var __aspxDefaultSafariFontSizesInPixelHashTable = _aspxCreateIndexHashTableFromArray(__aspxDefaultSafariFontSizesInPixel);
var __aspxDefaultFontSizesHashTable = null;
function _aspxGetDefaultSafariFontSizesHashTable() {
 if (!__aspxDefaultSafariFontSizesHashTable)
  __aspxDefaultSafariFontSizesHashTable = _aspxCreateIndexHashTableFromArray(__aspxDefaultSafariFontSizes);
 return __aspxDefaultSafariFontSizesHashTable;
}
function _aspxGetDefaultSafariFontSizesInPixelHashTable() {
 if (!__aspxDefaultSafariFontSizesInPixelHashTable)
  __aspxDefaultSafariFontSizesInPixelHashTable = _aspxCreateIndexHashTableFromArray(__aspxDefaultSafariFontSizesInPixel);
 return __aspxDefaultSafariFontSizesInPixelHashTable;
}
function _aspxGetDefaultFontSizesHashTable() {
 if (!__aspxDefaultFontSizesHashTable)
  __aspxDefaultFontSizesHashTable = _aspxCreateIndexHashTableFromArray(__aspxDefaultFontSizes);
 return __aspxDefaultFontSizesHashTable;
}
ASPxClientHtmlProcessingUtils = {
 AddEmptyBorderClassInTables: function(parentElem) {
  var tables = _aspxGetElementsByTagName(parentElem, "TABLE");
  for (var i = 0; i < tables.length; i++) {
   if (_aspxHETableHelper.IsEmptyBorder(tables[i]))
    _aspxHETableHelper.AppendEmptyBorderClassName(tables[i]);
  }
 },
 RemoveEmptyBorderClassName: function(html) {
  var reg = new RegExp("\\s*\\b" + __aspxEmptyBorderTableClassName + "\\b", "ig"); 
  html = html.replace(reg, ""); 
  return html.replace(/class=["']\s*["']\s*/ig, ""); 
 },
 ReplaceFontWithSpanTag: function(html) {
  html = _aspxApplyReplacement(html, [
   [/<font/ig, "<span"],
   [/<\/font>/ig, "</span>"]
  ]);
  var containerElement = document.createElement("DIV");
  ASPxClientHtmlEditor.SetInnerHtml(containerElement, html);
  var spans = _aspxGetElementsByTagName(containerElement, "SPAN");
  for (var i = 0; i < spans.length; i++) {
   var curSpan = spans[i];
   var curSpanFace = _aspxGetAttribute(curSpan, "face");
   if (_aspxIsExists(curSpanFace)) { 
    if (curSpanFace != "null")
     if(!__aspxOpera)
      curSpan.style.fontFamily = curSpanFace;
     else
      this.SetStylePropForOpera(curSpan, "font-family", curSpanFace);
    _aspxRemoveAttribute(curSpan, "face");
   }
   var size = 0;
   if (!isNaN(size = parseInt(_aspxGetAttribute(curSpan, "size")))) {
    try {
     curSpan.style.fontSize = __aspxDefaultFontSizes[size - 1];
    }
    catch (ex) { }
   }
   else {
    if (__aspxWebKitFamily) {
     var index = _aspxGetDefaultSafariFontSizesHashTable()[curSpan.style.fontSize.toLowerCase()]; ;
     if (index > -1)
      curSpan.style.fontSize = __aspxDefaultFontSizes[index];
    }
   }
   _aspxRemoveAttribute(curSpan, "size");
   if (this.IsExistAttribute(curSpan, "color")) {
    var correctColor = this.CorrectColorValue(_aspxGetAttribute(curSpan, "color"));
    if(!__aspxOpera)
     curSpan.style.color = correctColor;
    else
     this.SetStylePropForOpera(curSpan, "color", correctColor);
    _aspxRemoveAttribute(curSpan, "color");
   }
  }
  var retHtml = containerElement.innerHTML;
  containerElement = null;
  return retHtml;
 },
 SetStylePropForOpera: function(element, name, value) { 
  var oldStyle = element.getAttribute("style");
  var newStyle = oldStyle + "; " + name + ": " + value;
  element.setAttribute("style", newStyle);
 },
 ReplaceSpanWithFontTag: function(html) {
  html = _aspxApplyReplacement(html, [
   [/<span/ig, "<font"],
   [/<\/span>/ig, "</font>"]
  ]);
  var defaultFontSizeReverseArray = [];
  for (var i = 0; i < __aspxDefaultFontSizes.length; i++)
   defaultFontSizeReverseArray[parseInt(__aspxDefaultFontSizes[i])] = i;
  var containerElement = document.createElement("DIV");
  ASPxClientHtmlEditor.SetInnerHtml(containerElement, html);
  var fonts = _aspxGetElementsByTagName(containerElement, "FONT");
  for (var i = 0; i < fonts.length; i++) {
   var curFont = fonts[i];
   if (curFont.style.fontFamily) {
    var fontFamily = curFont.style.fontFamily;
    if(__aspxOpera) 
     fontFamily = fontFamily.replace(/^"(.*)"$/, "$1");
    curFont.face = fontFamily;
    _aspxRemoveStyleAttribute(curFont, "font-family");
   }
   if (curFont.style.fontSize) {
    _aspxRemoveAttribute(curFont, "size");
    if(curFont.style.fontSize.indexOf("px") == -1) {
     var size = defaultFontSizeReverseArray[parseInt(curFont.style.fontSize)];
     if (typeof (size) != 'undefined') {
      curFont.size = size + 1;
      _aspxRemoveStyleAttribute(curFont, "fontSize");
     }
    }
   }
   if (curFont.style.color) {
    var newColor = this.CorrectColorValue(curFont.style.color);
    curFont.color = newColor;
    _aspxRemoveStyleAttribute(curFont, "color");
   }
  }
  html = containerElement.innerHTML;
  containerElement = null;
  html = html.replace(/\s*style="\s*"/gi, '');
  html = html.replace(/style=""/ig, "");
  html = html.replace(/style=''/ig, "");
  return html;
 },
 ReplaceUnderlineSpanWithUTag: function(html) {
  var containerElement = document.createElement("DIV");
  ASPxClientHtmlEditor.SetInnerHtml(containerElement, html);
  var curSpan;
  while(curSpan = this.GetUnderlineSpanElements(containerElement)[0]) {
   var newUELement = document.createElement("U");
   newUELement.id = curSpan.id;
   newUELement.style.cssText = curSpan.style.cssText;
   _aspxRemoveAttribute(newUELement.style, "textDecoration");
   if(curSpan.className)
    newUELement.className = curSpan.className;
   ASPxClientHtmlEditor.SetInnerHtml(newUELement, curSpan.innerHTML);
   curSpan.parentNode.replaceChild(newUELement, curSpan);
  }
  return containerElement.innerHTML;
 },
 CloseTags: function(html) {
  var unclosedTagNames = ["img", "br", "input", "hr", "area", "colgroup", "col"];
  for(var i = 0, tagName; tagName = unclosedTagNames[i]; i++) {
   var re = new RegExp("<" + tagName + "(.*?)\/*>", "gi");
   html = html.replace(re, "<"+ tagName +"$1/>");
  }
  return html;
 },
 ReplaceLinkTargetWithBlank: function(parentElem) {
  var linkArray = _aspxGetElementsByTagName(parentElem, "A");
  for (var i = 0; i < linkArray.length; i++)
   _aspxSetAttribute(linkArray[i], "target", "_blank");
 },
 ReplaceRGBToHex: function(html) {
  return html.replace(__aspxStyleAttributeRegEx,
        function(cssStyleString) {
         return cssStyleString.replace(__aspxRGBColorCssAttrRegExp, _aspxColorToHexadecimal);
        }
       );
 },
 FilterHtmlToGetHtml: function(html) {
  if (__aspxNetscapeFamily || __aspxWebKitFamily)
   html = this.ReplaceRGBToHex(html);
  return html;
 },
 CorrectColorValue: function(colorValue) {
  if (!colorValue) return null;
  var retColorValue = colorValue;
  if (typeof (colorValue) == "number" || colorValue.substr(0, 3) == "rgb")
   retColorValue = _aspxColorToHexadecimal(colorValue);
  return retColorValue;
 },
 CleanWrongSizeAttribute: function(element) {
  var fonts = _aspxGetElementsByTagName(element, "font");
  for (var i = 0; i < fonts.length; i++)
   if (fonts[i].size == "+0")
   _aspxRemoveAttribute(fonts[i], "size");
 },
 IsExistAttribute: function(element, attrName) {
  var attrObj = _aspxGetAttribute(element, attrName);
  return _aspxIsExists(attrObj) && attrObj != "null";
 },
 IsUnderlineSpan: function(element) {
  return (element.tagName.toLowerCase() == "span") &&
    (element.style.textDecoration.toLowerCase() == "underline") &&
    (element.style.fontFamily == "") &&
    (element.style.fontSize == "");
 },
 GetUnderlineSpanElements: function(element) {
  var spans = element.getElementsByTagName("SPAN");
  var ret = [ ];
  for (var i = spans.length - 1; i >= 0; i--) {
   if (this.IsUnderlineSpan(spans[i]))
    ret.push(spans[i]);
  }
  return ret;
 },
 ReplaceNbspWithEmptyText: function(element) {
  if(__aspxIE && __aspxBrowserMajorVersion < 11 && element && element.nodeType == 1) {
   var textNodes = [];
   _aspxGetChildTextNodeCollection(element, textNodes);
   for(var i = 0, node; node = textNodes[i]; i++) {
    var parent = node.parentNode;
    if(parent.innerHTML == "&nbsp;" && parent.nodeName != "TD")
     parent.innerText = "";
   }
  }
 },
 RemoveEmptyInlineElements: function(element) {
  if(!element || element.nodeType == 3) return;
  var expr = /IFRAME|IMG|SCRIPT|AREA|MAP|INPUT|SELECT|OPTION|OPTGROUP|TEXTAREA|DATALIST/;
  for(var i = 0, childNode; childNode = element.childNodes[i]; i++) {
   if(childNode.nodeType != 1 || expr.test(childNode.nodeName) || childNode.nodeName == "BR") continue;
   if(_aspxGetCurrentStyle(childNode)["display"] == "inline") {
    if((!childNode.textContent && !childNode.innerText) && !expr.test(childNode.innerHTML.toUpperCase())) {
     var brElements = _aspxGetElementsByTagName(childNode, "BR");
     if(brElements.length > 0) {
      for(var i = 0, brElement; brElement = brElements[i]; i++)
       childNode.parentNode.insertBefore(brElement.cloneNode(false), childNode);
     }
     _aspxRemoveElement(childNode);
    }
   }
   else { 
    this.RemoveEmptyInlineElements(childNode);
    if(childNode.childNodes.length == 0 && (childNode.nodeName == "P" || parent.nadeName == "DIV")) {
     if(__aspxIE && __aspxBrowserMajorVersion < 11) {
      childNode.innerHTML = "&nbsp;";
      childNode.innerText = "";
     }
     else 
      childNode.appendChild(childNode.ownerDocument.createElement("BR"));
    }
   } 
  }
 },
 ProcessingEmptyElements: function(element) {
  this.ReplaceNbspWithEmptyText(element);
  this.RemoveEmptyInlineElements(element);
 },
 ClearFakeBrElements: function(element, html) {
  var outerHTML = element.ownerDocument.createElement("BR").outerHTML;
  var replacedHtml = (html + outerHTML).replace(/<br[^>]*>(?!(<br[^>]*>)*<br[^>]*>$)/gi, "");
  var existingBrElementsCount = 0;
  var childElement = element.lastChild;
  while(childElement && childElement.nodeName == "BR") {
   childElement = childElement.previousSibling;
   existingBrElementsCount++;
  }
  var brElements = replacedHtml.match(/<br[^>]*>/gi);
  if(brElements && brElements.length > existingBrElementsCount)
   html = html.substring(0, html.length - outerHTML.length * (brElements.length - existingBrElementsCount));
  return html;
 },
 SetTextInputUnselectable: function(html) {
  return html.replace(/(<input(?:(?![^>]*type[^>]*>)|(?=[^>]*type\s*=\s*['|\"](?:text)*['|\"][^>]*>)).*?)(?:\sstyle\s*=\s*(?:(?:\"([^\"]*)\")|(?:'([^']*)')))*([^>]*)/gi,"$1 style=\"-moz-user-select:none; $2$3\"$4");
 },
 RemoveMozUserSelectStyleAttribute: function(html) {
  return html.replace(/(<[a-zA-z][a-z\\d]*.*?)-moz-user-select:\s*none;\s*([^>]*)/gi,"$1$2");
 },
 SplitNode: function(parent, params) {
  var separators = [];
  var parts = [];
  if(this.IsArray(params))
   separators = separators.concat(params);
  else if(params instanceof Object)
   separators.push(params);
  var fullPathSeparators = this.GetFullPathSeparators(parent, separators);
  if(fullPathSeparators.length > 0) {
   var count = fullPathSeparators.length;
   parts.push(this.GetPart(parent, null, fullPathSeparators[0]));
   for(var i = 0; i < count - 1; i++) {
    parts.push(this.GetPart(parent, fullPathSeparators[i], fullPathSeparators[i+1]));
   }
   parts.push(this.GetPart(parent, fullPathSeparators[count - 1], null));
   return parts;
  }
  return [ parent ];
 },
 GetFullPathSeparators: function(parent, separators) {
  var paths = [];
  var path = [];
  for(var i = 0; i < separators.length; i++) {
   var element = separators[i];
   if(_aspxGetIsParent(parent, element)) {
    while(element != null && element != parent.parentNode) {
     path.push(element);
     element = element.parentNode;
    }
    path = path.reverse();
    paths.push(path);
   }
   path = [];
  }
  return paths;
 },
 GetPart: function(parent, prevBound, nextBound) {
  var dest = parent.cloneNode(false);
  this.CreateBranch(parent, dest, 1, prevBound, nextBound);
  return dest;
 },
 CreateBranch: function(srcNode, dstNode, nestingIndex, prevBound, nextBound) {
  var prevLimitElement = (prevBound && nestingIndex < prevBound.length) ? prevBound[nestingIndex] : null;
  var nextLimitElement = (nextBound && nestingIndex < nextBound.length) ? nextBound[nestingIndex] : null;
  var nodes = _aspxGetChildNodes(srcNode, function(element) { return element == prevLimitElement; });
  var child = (nodes.length > 0) ? nodes[0] : srcNode.firstChild;
  var isNeedBreak = (child == nextLimitElement);
  while(child) {
   dstNode.appendChild(child.cloneNode(false));
   if(child.hasChildNodes())
    this.CreateBranch(child, dstNode.lastChild, nestingIndex + 1, prevBound, nextBound);
   if(isNeedBreak)
    break;
   child = child.nextSibling;
   isNeedBreak = (child == nextLimitElement);
  }
 },
 IsArray: function(object) {
  return (typeof object == "object") && (object instanceof Array);
 }
};
function aspxHEChangeActiveView(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.ChangeActiveView(evt.tab.name);
}
function aspxHEChangingActiveView(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null) {
  var arg = new ASPxClientHtmlEditorTabCancelEventArgs(htmlEdit.GetFullViewName(evt.tab.name));
  htmlEdit.RaiseActiveTabChanging(arg);
  evt.cancel = arg.cancel;
 }
}
window.FocusActiveEditorToolbar = function() {
 ASPxHtmlEditorsCollection.Get().FocusActiveEditorToolbar();
}
function aspxHEEditAreaKeyDown(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnKeyDown(evt);
}
function aspxHEEditAreaKeyUp(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name); 
 if (htmlEdit != null)
  return htmlEdit.OnKeyUp(evt);
}
function aspxHEEditAreaKeyPress(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnKeyPress(evt);
}
function aspxHEEditAreaMouseDown(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.OnMouseDown(evt);
}
function aspxHEEditAreaTouchMouseUp(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.OnTouchMouseUp();
}
function aspxHEEditAreaMouseUp(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null) {
  htmlEdit.OnMouseUp(evt);
  if ((__aspxSafari || (__aspxWebKitFamily && __aspxMacOSPlatform)) && evt.button == 2)
   htmlEdit.OnContextMenu(evt);
 }
}
function aspxHEEditAreaContextMenu(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.OnContextMenu(evt);
}
function aspxHEEditAreaDblClick(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.OnDblClick(evt);
}
function aspxHEEditAreaOnFocus(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnFocus();
}
function aspxHEEditAreaOnLostFocus(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnLostFocus();
}
function aspxHEEFCBClick(evt, name){
 var htmlEdit = aspxGetControlCollection().Get(name);
 if(htmlEdit != null) htmlEdit.OnErrorFrameCloseButtonClick();
}
function aspxHEEditObjectResizeStart(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnObjectResizeStart(evt);
}
function aspxHEEditObjectResizeEnd(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnObjectResizeEnd(evt);
}
function aspxHEAfterDocumentObjectDragEnd(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnAfterDocumentObjectDragEnd();
}
function aspxHEAfterObjectDragEnd(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnAfterObjectDragEnd();
}
function aspxHEEditObjectDragStart(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnObjectDragStart(evt);
}
function aspxHEEditObjectDragEnd(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnObjectDragEnd();
}
function aspxHEEditObjectDrop(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnObjectDrop(evt);
}
function aspxHEDocumentObjectDragEnd(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnDocumentObjectDragEnd();
}
function aspxHESpellCheckerWordChanged(name, sender, args) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.spellCheckerHelper.OnWordChanged(sender, args);
}
function aspxHEDesignViewIframeOnLoad(name, iframe) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.OnDesignViewIframeLoad();
 iframe.loadUnhandled = !htmlEdit;
}
function aspxHEDesignViewIframeOnPasteIE(name, evt) {
 if (aspxGetControlCollection().Get(name) != null)
  window.setTimeout("aspxGetControlCollection().Get('" + name + "').OnPasteIE()", 0);
}
function aspxHEDesignViewIframeOnPasteWebKit(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null) {
  htmlEdit.OnPasteWebKit(evt);
 }
}
function aspxHEHtmlViewHtmlChanged(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  htmlEdit.OnHtmlChanged();
}
function aspxHEHtmlViewKeyDown(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null)
  return htmlEdit.OnKeyDown(evt.htmlEvent);
}
function aspxHEDocumentDragOver(evt) {
 __aspxHEIsDocumentDragOver = true;
}
function aspxHEDocumentDragDrop() {
 __aspxHEIsDocumentDragOver = false;
}
function aspxHERibbonMinimizationStateChanged(name, evt) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if(htmlEdit) {
  var toolbar = htmlEdit.GetToolbar();
  if(toolbar && toolbar.extToolbarID && toolbar.toolbars.length > 0) {
   if(!htmlEdit.isFullscreenMode || htmlEdit.activeView != ASPxClientHtmlEditorView.Design)
    return;
   else {
    var height = toolbar.toolbars[0].GetMainElement().offsetHeight;
    _aspxChangeStyleAttribute(htmlEdit.GetMainElement(), "top", height + "px");
   }
  }
  if(htmlEdit.isFullscreenMode)
   htmlEdit.AdjustSizeInFullscreen();
  else
   htmlEdit.SetHeightInternal(htmlEdit.currentHeight);
 }
}
function aspxHERibbonActiveTabChanged(name, e) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if(htmlEdit)
  htmlEdit.OnRibbonActiveTabChanged();
}
if (__aspxNetscapeFamily)
 _aspxAttachEventToDocument("dragover", aspxHEDocumentDragOver);
if (__aspxNetscapeFamily)
 _aspxAttachEventToDocument("dragdrop", aspxHEDocumentDragDrop);
function aspxHEContextMenuCloseUp(name) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null) return htmlEdit.OnContextMenuCloseUp();
}
function aspxHEContextMenuItemClick(name, args) {
 var htmlEdit = aspxGetControlCollection().Get(name);
 if (htmlEdit != null) return htmlEdit.OnContextMenuItemClick(args.item);
}
MVCxClientHtmlEditor = _aspxCreateClass(ASPxClientHtmlEditor, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.customDataActionUrl = "";
  this.callbackCustomArgs = {};
  this.customDataActionCallback;
 },
 PerformDataCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientHtmlEditor.prototype.PerformDataCallback.call(this, _aspxToJson(this.callbackCustomArgs));
 },
 CreateCustomDataCallback: function(arg, command, handler) {
  ASPxClientHtmlEditor.prototype.CreateCustomDataCallback.call(this, arg, "CUSTOMDATACALLBACK", handler);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  if(this.customDataActionUrl != "")
   this.customDataActionCallback = function(arg) { MVCx.PerformControlCallback(this.name, this.customDataActionUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  var element = this.GetMainElement();
  if(element)
   element.appendChild(_aspxCreateHiddenField(this.name + "_DXMVCHtmlEditor"));
  ASPxClientHtmlEditor.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command){
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientHtmlEditor.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientHtmlEditor.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 GetCallbackParams: function() {
  var params = {};
  var heMainEl = this.GetMainElement();
  $(heMainEl).parent().find("input").each(function(){
   params[this.name] = this.value;
  });
  return params;
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; } .aspxBind(this), 0);
  ASPxClientHtmlEditor.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackMethod: function(command) {
  if(MVCx.IsCustomDataCallback(command))
   return this.customDataActionCallback;
  return this.callBack;
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2 && resultStringParts[1] != ""){
   var resultObj = ASPxClientHtmlEditor.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result = resultObj.result.replace(MVCx.CallbackHtmlContentPlaceholder, resultStringParts[1]);
   return resultObj;
  }
  return ASPxClientHtmlEditor.prototype.EvalCallbackResult.call(this, resultString);
 },
 Export: function(format) {
  this.Synchronize();
  var form = _aspxCreateHtmlElementFromString("<form method='post' action='" + this.exportUrl + "?format=" + format + "'> </form>");
  var heMainEl = this.GetMainElement();
  $(heMainEl).parent().find("input").each(function() {
   form.appendChild(this.cloneNode(true));
  });
  document.body.appendChild(form);
  form.submit();
  document.body.removeChild(form);
 }
});
(function () {
 var __aspxBarDockItemPickerButtonClassName = "dxhetipControl";
 var __aspxHEItemPickerImageMode = {
  ShowDropDown:      0,
  ExecuteAction:     1,
  ExecuteSelectedItemAction:  2
 }
 var ASPxClientToolbarConsts = {};
 ASPxClientToolbarConsts.ClassNames = {
  CustomDropDownImageItem: "dxtb-cddi",
  CustomDropDownTextItem: "dxtb-cddt"
 };
 var ASPxClientToolbarItem = _aspxCreateClass(ASPxClientMenuItem, {
  constructor: function(menu, parent, index, name){
   this.constructor.prototype.constructor.call(this, menu, parent, index, name);
   this.itemTemplateControl = null;
   this.itemTextTemplateControl = null;
  },
  setValue: function(value){
   var templateControl = this.getTemplateControl();
   if(templateControl)
    templateControl.SetValue(value);
  },
  getTemplateControl: function(){
   var itemTemplate = this.getItemTemplateControl();
   if(itemTemplate)
    return itemTemplate;
   return this.getItemTextTemplateControl();
  },
  getItemTemplateControl: function(){
   if(this.itemTemplateControl === null){
    var templateContainer = this.menu.GetItemTemplateContainer(this.GetIndexPath());
    this.itemTemplateControl = this.getControlFromParentElement(templateContainer);
   }
   return this.itemTemplateControl;
  },
  getItemTextTemplateControl: function(){
   if(this.itemTextTemplateControl === null){
    var templateContainer = this.menu.GetItemTextTemplateContainer(this.GetIndexPath());
    this.itemTextTemplateControl = this.getControlFromParentElement(templateContainer);
   }
   return this.itemTextTemplateControl;
  },
  getControlFromParentElement: function(element){
   if(element) {
    for(var i = 0, childNode; childNode = element.childNodes[i]; i ++) {
     if(!childNode.id) continue;
     var control = aspxGetControlCollection().Get(childNode.id);
     if(control)
      return control;
    }
   }
   return null;
  }
 });
 var ASPxClientToolbar = _aspxCreateClass(ASPxClientMenu, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.barDockControlName = "";
   this.barDockControl = null;
   this.DropDownItemBeforeFocus = new ASPxClientEvent();
   this.DropDownItemCloseUp = new ASPxClientEvent();
   this.Command = new ASPxClientEvent();
   this.CustomComboBoxInit = new ASPxClientEvent();
   this.customDropDownItemsParams = {};
  },
  Initialize: function() {
   ASPxClientMenu.prototype.Initialize.call(this);
   if(this.NeedCorrectionForRtl())
    this.rtlWidthCorrected = true;
   this.SetMenuUnselectable();
   this.InitializeItemState();
  },
  NeedCorrectionForRtl: function() {
   return __aspxIE && __aspxBrowserMajorVersion < 8 && this.rtl;
  },
  SetLightweightMenuHeightInIE7IfDisplayed: function() {
   if(this.NeedCorrectionForRtl() && !this.rtlWidthCorrected)
    return;
   ASPxClientMenu.prototype.SetLightweightMenuHeightInIE7IfDisplayed.call(this);
  },
  InitializeItemState: function() {
   var element = this.GetItemContentElement(this.GetItem(0).GetIndexPath());
   this.SetHoverElement(element);
   this.SetHoverElement(null);
   if (this.itemCheckedGroups[0]) {
    this.SetItemChecked(this.itemCheckedGroups[0][0].toString(), true);
    this.SetItemChecked(this.itemCheckedGroups[0][0].toString(), false);
   }
  },
  SetMenuUnselectable: function() {
   _aspxSetTimeout("aspxSetToolbarUnselectableByTimer('" + this.name + "')", 0);
  },
  GetToolbarDockControl: function() {
   if (this.barDockControl == null)
    this.barDockControl = aspxGetControlCollection().Get(this.barDockControlName);
   return this.barDockControl;
  },
  GetToolbatItemTemplateID: function(indexPath) {
   return this.GetItemByIndexPath(indexPath).name;
  },
  GetToolbarItemTemplateId: function(indexPath) {
   var templateName = this.GetToolbatItemTemplateID(indexPath);
   return this.name + "_ITTCNT" + indexPath + "_" + templateName;
  },
  GetToolbarItemTemplateElement: function(indexPath) {
   return _aspxGetElementById(this.GetToolbarItemTemplateId(indexPath));
  },
  GetToolbarItemTemplateControl: function(indexPath) {
   var templateElement = this.GetToolbarItemTemplateElement(indexPath);
   return templateElement ? aspxGetControlCollection().Get(this.GetToolbarItemTemplateId(indexPath)) : null;
  },
  GetClientItemType: function() {
   return ASPxClientToolbarItem;
  },
  SetItemEnabled: function(indexPath, enabled) {
   ASPxClientMenu.prototype.SetItemEnabled.call(this, indexPath, enabled);
   var item = this.GetItemByIndexPath(indexPath);
   var templateControl = item.getTemplateControl();
   if (templateControl) {
    var templateElement = templateControl.GetMainElement();
    if (enabled)
     aspxGetStateController().EnableElement(templateElement);
    else
     aspxGetStateController().DisableElement(templateElement);
   }
  },
  OnTemplateItemValueChanged: function(itemName, itemValue, menuIndex) {
   var item = menuIndex ? this.GetItem(menuIndex) : this.GetItemByName(itemName);
   this.DoRaiseCommand(item.GetIndexPath(), itemValue);
  },
  OnTemplateItemClick: function(itemName, itemValue) {
   var item = this.GetItemByName(itemName);
   this.DoRaiseCommand(item.GetIndexPath(), itemValue);
  },
  OnDropDownItemBeforeFocus: function(itemName) {
   var item = this.GetItemByName(itemName);
   this.RaiseDropDownItemBeforeFocus(item);
  },
  OnDropDownItemCloseUp: function(itemName) {
   var item = this.GetItemByName(itemName);
   this.RaiseDropDownItemCloseUp(item);
  },
  DoRaiseCommand: function(indexPath, value) {
   var item = this.GetItemByIndexPath(indexPath);
   if(typeof(ASPxClientToolbarItemPicker) != "undefined") { 
    var itemPicker = ASPxClientToolbarItemPicker.FindControlByMenuItem(item);
    if(itemPicker)
     if(itemPicker.useItemPickerImageMode == __aspxHEItemPickerImageMode.ExecuteSelectedItemAction) {
      if(value == null) {
       value = itemPicker.GetValue();
       aspxGetMenuCollection().HideAll();
       if(!value)
        return;
      }
      else
       this.UpdateMenuItem(item, itemPicker.GetText(), itemPicker.GetImage(), itemPicker.GetTooltip());
     }
     else if(itemPicker.useItemPickerImageMode == __aspxHEItemPickerImageMode.ShowDropDown) {
      if(value == null)
       return;
     }
   }
   if(value == null)
    var customMenuItemParams = this.TryGetCustomMenuItemParams(item); 
   if(customMenuItemParams) {
    this.DoRaiseCustomDropDownMenuCommand(item, customMenuItemParams);
    return;
   }
   this.RaiseCommand(item, value);
  },
  DoRaiseCustomDropDownMenuCommand: function(item, customMenuItemParams) {
   if(this.IsFirstLevelItem(item)) {
    var valueItem = item.GetItem(customMenuItemParams.selectedItemIndex);
    if(customMenuItemParams.itemPickerMode == __aspxHEItemPickerImageMode.ExecuteSelectedItemAction)
     this.RaiseCommand(item, valueItem ? valueItem.name : null);
    else if(customMenuItemParams.itemPickerMode == __aspxHEItemPickerImageMode.ExecuteAction)
     this.RaiseCommand(item, null);
   }
   else {
    if(customMenuItemParams.itemPickerMode == __aspxHEItemPickerImageMode.ExecuteSelectedItemAction) {
     customMenuItemParams.selectedItemIndex = item.index;
     this.UpdateMenuItem(item.parent, item.GetText(), item.GetImage(), item.menu.GetItemElement(item.GetIndexPath()).title);
    }
    this.RaiseCommand(item.parent, item.name);
   }
  },
  UpdateMenuItem: function(item, text, image, tooltip) {
   var itemElement = item.menu.GetItemElement(item.indexPath);
   var menuButtonCell = item.menu.GetItemContentElement(item.indexPath);
   if(!menuButtonCell) 
    return;
   var menuButtonCellChilds = _aspxGetChildrenByPartialClassName(menuButtonCell, __aspxBarDockItemPickerButtonClassName);
   if(!menuButtonCellChilds || menuButtonCellChilds.length  < 1) 
    return;
   var menuButtonContainer = menuButtonCellChilds[0];
   menuButtonContainer.title = tooltip;
   var menuButtonImg = _aspxGetChildByTagName(menuButtonContainer, "IMG", 0);
   if(item.indexPath == "0")
    var itemStartHeight = menuButtonCell.offsetHeight;
   tooltip = tooltip ? tooltip : text;
   if(image && image.src && menuButtonImg) {
    menuButtonContainer.innerHTML = "";
    menuButtonContainer.appendChild(menuButtonImg);
    menuButtonImg.src = image.src;
    menuButtonImg.className = image && image.className || "";
    menuButtonImg.alt = tooltip;
    menuButtonImg.title = tooltip;
    this.UpdateCustomDropDownItemClassName(itemElement, ASPxClientToolbarConsts.ClassNames.CustomDropDownImageItem);
    _aspxSetElementDisplay(menuButtonImg, true);
   }
   else {
    menuButtonContainer.innerHTML = text;
    this.UpdateCustomDropDownItemClassName(itemElement, ASPxClientToolbarConsts.ClassNames.CustomDropDownTextItem);
    if(menuButtonImg) {
     menuButtonContainer.appendChild(menuButtonImg);
     _aspxSetElementDisplay(menuButtonImg, false);
    }
   }
   if(itemStartHeight && itemStartHeight != menuButtonCell.offsetHeight)
    ASPxClientMenuLiteRenderHelper.CalculateMenuElements(item.menu, item.menu.GetMainElement());
  },
  UpdateCustomDropDownItemClassName: function(element, className) {
   if(!_aspxElementCssClassContains(element, className)) {
    var oppositeClassName = className == ASPxClientToolbarConsts.ClassNames.CustomDropDownImageItem 
     ? ASPxClientToolbarConsts.ClassNames.CustomDropDownTextItem
     : ASPxClientToolbarConsts.ClassNames.CustomDropDownImageItem;
    element.className = element.className.replace(oppositeClassName, className);
   }
  },
  IsFirstLevelItem: function(item) {
   return (item.parent && item.parent.GetIndexPath() == "");
  },
  TryGetCustomMenuItemParams: function(item) {
   if(this.IsFirstLevelItem(item))
    return this.GetCustomMenuItemParams(item);
   else
    return this.GetCustomMenuItemParams(item.parent);
  },
  GetCustomMenuItemParams: function(item) {
   var indexPath = item.GetIndexPath();
   return this.customDropDownItemsParams[indexPath];
  },
  RaiseItemClick: function(indexPath, htmlEvent) {
   this.DoRaiseCommand(indexPath, null);
   if (ASPxClientMenu.prototype.RaiseItemClick)
    ASPxClientMenu.prototype.RaiseItemClick.call(this, indexPath, htmlEvent);
  },
  RaiseCommand: function(item, value) {
   if (!this.Command.IsEmpty()) {
    var args = new ASPxClientToolbarEventArgs(item, value);
    this.Command.FireEvent(this, args);
   }
  },
  RaiseDropDownItemBeforeFocus: function(item) {
   if (!this.DropDownItemBeforeFocus.IsEmpty()) {
    var args = new ASPxClientToolbarEventArgs(item, null);
    this.DropDownItemBeforeFocus.FireEvent(this, args);
   }
  },
  RaiseDropDownItemCloseUp: function(item) {
   if (!this.DropDownItemCloseUp.IsEmpty()) {
    var args = new ASPxClientToolbarEventArgs(item, null);
    this.DropDownItemCloseUp.FireEvent(this, args);
   }
  },
  InitCustomComboBox: function(combobox) {
   this.RaiseCustomComboBoxInit(combobox);
  },
  RaiseCustomComboBoxInit: function(combobox) {
   var args = new ASPxClientToolbarEventArgs(combobox, null);
   this.CustomComboBoxInit.FireEvent(this, args);
  }
 });
 var ASPxClientToolbarEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function(item, value){
   this.constructor.prototype.constructor.call(this);
   this.item = item;
   this.value = value;
  }
 });
 var ASPxClientToolbarColorButton = _aspxCreateClass(ASPxClientControl, {
  constructor: function(name){
   this.constructor.prototype.constructor.call(this, name);
   this.colorDiv = null;
   this.colorPicker = null;
   this.colorPickerName = "";
   this.colorPickerLockCount = 0;
   this.defaultColor = "";
   this.ColorChanged = new ASPxClientEvent();
   this.isEmptyColor = false;
  },
  Initialize: function(){
   this.constructor.prototype.Initialize.call(this);
   _aspxSetElementAsUnselectable(this.GetColorDiv());
  },
  GetColorDiv: function(){
   if(this.colorDiv == null)
    this.colorDiv = _aspxGetElementById(this.name + "_CD");
   return this.colorDiv;
  },
  ColorDegToHex: function(color){
   var str = color.toString(16);
   var length = str.length;
   for (var i = str.length; i < 6; i ++ )
    str = "0" + str;
   return "#" + str;
  },
  GetColor: function(){
   var colorDiv = this.GetColorDiv();
   var color = null;
   if(!this.isEmptyColor){
    var currStyle = _aspxGetCurrentStyle(colorDiv);
    color = currStyle ? currStyle.backgroundColor : colorDiv.style.backgroundColor;
   }
   return _aspxColorToHexadecimal(color);
  },
  SetColor: function(color){
   this.isEmptyColor = false;
   if(color == null) {
    this.isEmptyColor = true;
    color = this.defaultColor;
   }
   var colorDiv = this.GetColorDiv();
   colorDiv.style.backgroundColor = color;
   this.SetColorPickerColor();
  },
  SetColorPickerColor: function(){
   if(this.colorPickerLockCount == 0){
    var colorPicker = this.GetColorPicker();
    if(colorPicker)
     colorPicker.SetColor(this.GetColor());
   }
  },
  GetValue: function(){
   return this.GetColor();
  },
  SetValue: function(color){
   this.SetColor(color);
  },
  GetColorPicker: function(){
   if(!this.colorPicker)
    this.colorPicker = aspxGetControlCollection().Get(this.colorPickerName);
   return this.colorPicker;
  },
  OnColorPickerInit: function (colorPicker){
   this.colorPicker = colorPicker;
   this.colorPickerName = colorPicker.name;
   colorPicker.SetColor(this.GetColor());
   colorPicker.ColorChanged.AddHandler(this.OnColorPickerColorChanged.aspxBind(this));
   var method = new Function("sender", "args", "aspxTBCPColorItemClick(\"" + this.name + "\", sender, args);");
   colorPicker.ShouldBeClosed.AddHandler(method);
  },
  OnColorPickerColorItemClick: function(){
   aspxGetMenuCollection().HideAll();
   this.RaiseColorChanged();
  },
  OnColorPickerColorChanged: function (s, e){
   this.colorPickerLockCount ++;
   this.SetValue(s.GetColor());
   this.colorPickerLockCount --;
  },
  RaiseColorChanged: function(){
   if(!this.ColorChanged.IsEmpty()){
    var args = new ASPxClientEventArgs();
    this.ColorChanged.FireEvent(this, args);
   }
  }
 });
 function aspxSetMenuItemUnselectable(parent, indexPath) {
  _aspxSetElementAsUnselectable(parent.GetItemContentElement(indexPath), true, true);
  _aspxSetElementAsUnselectable(parent.GetItemTemplateElement(indexPath));
  _aspxSetElementAsUnselectable(parent.GetItemPopOutElement(indexPath));
  _aspxSetElementAsUnselectable(parent.GetMenuBorderCorrectorElement(indexPath));
  _aspxSetElementAsUnselectable(parent.GetItemIndentElement(indexPath), true, true);
  _aspxSetElementAsUnselectable(parent.GetItemSeparatorElement(indexPath), true, true);
  _aspxSetElementAsUnselectable(parent.GetItemSeparatorIndentElement(indexPath), true, true);
 }
 function aspxToolbarCommand(toolbar, item, value){
  var control = toolbar.GetToolbarDockControl();
  if(control)
   control.OnCommand(toolbar, item, value);
 }
 function aspxToolbarItemMouseOver(toolbar, item){
  var control = toolbar.GetToolbarItemTemplateControl(item.index.toString());
  if(control instanceof ASPxClientToolbarColorButton) {
   var colorPicker = control.GetColorPicker();
   if(__aspxIE && __aspxBrowserVersion < 8)
    colorPicker.SetOwner(item);
   colorPicker.SetColorSelectorDisplay(false);
   colorPicker.SetColorTablesDisplay(true);
  }
 }
 function aspxToolbarDropDownItemBeforeFocus(toolbar, item){
  var control = toolbar.GetToolbarDockControl();
  if(control)
   control.OnDropDownItemBeforeFocus(toolbar, item);
 }
 function aspxToolbarDropDownItemCloseUp(toolbar, item){
  var control = toolbar.GetToolbarDockControl();
  if(control)
   control.OnDropDownItemCloseUp(toolbar, item);
 }
 function aspxToolbarCustomComboBoxInit(toolbar, e) {
  var control = toolbar.GetToolbarDockControl();
  if(control)
   control.OnToolbarCustomComboBoxInit(toolbar, e.item);
 }
 function aspxTBCPInit(name, s){
  var control = aspxGetControlCollection().Get(name);
  if(control != null) control.OnColorPickerInit(s);
 }
 function aspxTBCPColorItemClick(name){
  var control = aspxGetControlCollection().Get(name);
  if(control != null) control.OnColorPickerColorItemClick();
 }
 function aspxTBCBBeforeFocus(toolbarName, itemName){
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.OnDropDownItemBeforeFocus(itemName);
 }
 function aspxTBCBCloseUp(toolbarName, itemName){
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.OnDropDownItemCloseUp(itemName);
 }
 function aspxTBCBValueChanged(toolbarName, itemName, itemValue){
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.OnTemplateItemValueChanged(itemName, itemValue);
 }
 function aspxTBCBItemClick(toolbarName, itemName, itemValue){
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.OnTemplateItemClick(itemName, itemValue);
 }
 function aspxTBColorButtonValueChanged(toolbarName, itemName, itemValue){
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.OnTemplateItemValueChanged(itemName, itemValue);
 }
 function aspxTBItemPickerItemClick(toolbarName, itemName, itemValue, menuIndex){
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.OnTemplateItemValueChanged(itemName, itemValue, menuIndex);
 }
 function aspxTBCCBInit(toolbarName, combobox) {
  var bar = aspxGetControlCollection().Get(toolbarName);
  if(bar)
   bar.InitCustomComboBox(combobox);
 }
 function aspxHEToolbarColorPickerCustomColorTableUpdated(heControlName, colorPicker, itemName){
  var heControl = aspxGetControlCollection().Get(heControlName);
  if(heControl != null)
   heControl.OnToolbarColorPickerCustomColorTableUpdated(colorPicker, itemName);
 }
 function aspxHEToolbarDropDownItemBeforeFocus(heControlName, toolbar, item){
  if(item == "") return; 
  var heControl = aspxGetControlCollection().Get(heControlName);
  if(heControl != null)
   heControl.SaveSelectionForPopup();
 }
 function aspxHEToolbarDropDownItemCloseUp(heControlName, toolbar, item){
  if(item == "") return; 
  var heControl = aspxGetControlCollection().Get(heControlName);
  if(heControl != null)
   heControl.OnToolbarDropDownItemCloseUp();
 }
 function aspxHEToolbarCustomComboBoxInit(heControlName, toolbar, item) {
  if(item == "") return; 
  var heControl = aspxGetControlCollection().Get(heControlName);
  if(heControl != null)
   heControl.OnToolbarCustomComboBoxInit(item);
 }
 window.ASPxClientToolbar = ASPxClientToolbar;
 window.ASPxClientToolbarColorButton = ASPxClientToolbarColorButton;
 window.__aspxHEItemPickerImageMode = __aspxHEItemPickerImageMode;
 window.aspxSetMenuItemUnselectable = aspxSetMenuItemUnselectable;
 window.aspxToolbarCommand = aspxToolbarCommand;
 window.aspxToolbarItemMouseOver = aspxToolbarItemMouseOver;
 window.aspxToolbarDropDownItemBeforeFocus = aspxToolbarDropDownItemBeforeFocus;
 window.aspxToolbarDropDownItemCloseUp = aspxToolbarDropDownItemCloseUp;
 window.aspxToolbarCustomComboBoxInit = aspxToolbarCustomComboBoxInit;
 window.aspxTBCPInit = aspxTBCPInit;
 window.aspxTBCPColorItemClick = aspxTBCPColorItemClick;
 window.aspxTBCBBeforeFocus = aspxTBCBBeforeFocus;
 window.aspxTBCBCloseUp = aspxTBCBCloseUp;
 window.aspxTBCBValueChanged = aspxTBCBValueChanged;
 window.aspxTBCBItemClick = aspxTBCBItemClick;
 window.aspxTBColorButtonValueChanged = aspxTBColorButtonValueChanged;
 window.aspxTBItemPickerItemClick = aspxTBItemPickerItemClick;
 window.aspxTBCCBInit = aspxTBCCBInit;
 window.aspxHEToolbarColorPickerCustomColorTableUpdated = aspxHEToolbarColorPickerCustomColorTableUpdated;
 window.aspxHEToolbarDropDownItemBeforeFocus = aspxHEToolbarDropDownItemBeforeFocus;
 window.aspxHEToolbarDropDownItemCloseUp = aspxHEToolbarDropDownItemCloseUp;
 window.aspxHEToolbarCustomComboBoxInit = aspxHEToolbarCustomComboBoxInit;
})();
var __aspxLoadFilteredItemsCallbackPrefix = "CBLF";
var __aspxCorrectFilterCallbackPrefix = "CBCF";
var __aspxtCurrentSelectedItemCallbackPrefix = "CBSI";
var __aspxLoadDropDownOnDemandCallbackPrefix = "CBLD";
var __aspxDropDownNameSuffix = "_DDD";
var __aspxCalendarNameSuffix = "_C";
var __aspxTimeEditNameSiffix = __aspxCalendarNameSuffix + "_TE";
var __aspxClockNameSiffix= __aspxCalendarNameSuffix + "_CL";
var __aspxListBoxNameSuffix = "_L";
var __aspxItemImageCellClassName = "dxeIIC";
var __aspxTokensHiddenFieldSuffix = "TK";
var __aspxTokensValuesHiddenFieldSuffix = "TKV";
var __aspxTokenBoxTokenSuffix = "Token";
var __aspxTokenBoxTokenTextSuffix = "TokenT";
var __aspxTokenBoxTokenRemoveButtonSuffix = "TokenRB";
var __aspxTokenBoxInputMinWidth = 30;
var __aspxGreekSLFSigmaChar = String.fromCharCode(962);
var __aspxGreekSLSigmaChar = String.fromCharCode(963);
ASPxClientDropDownEditBase = _aspxCreateClass(ASPxClientButtonEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.DropDown = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.ddHeightCache = __aspxInvalidDimension;
  this.ddWidthCache = __aspxInvalidDimension;
  this.mainElementWidthCache = __aspxInvalidDimension;
  this.dropDownButtonIndex = -1;
  this.droppedDown = false;
  this.ddButtonPushed = false;
  this.lastSuccessText = "";
  this.isToolbarItem = false;
  this.allowFocusDropDownWindow = false;
  this.pcIsShowingNow = false;
  this.needTimeoutForInputElementFocusEvent = false;
  aspxGetDropDownCollection().Add(this);
 },
 Initialize: function(){
  var pc = this.GetPopupControl();
  if(pc) {
   pc.allowCorrectYOffsetPosition = false;
   pc.dropDownEditName = this.name;
  }
  this.AssignClientAttributes();
  this.InitLastSuccessText();
  if(this.RefocusOnClickRequired()){ 
   var clickFunc = new Function("aspxDDRefocusClick('" + this.name + "', event);");
   _aspxAttachEventToElement(this.GetMainElement(), "click", clickFunc);
  }
  ASPxClientButtonEditBase.prototype.Initialize.call(this);
 },
 InitLastSuccessText: function(){
  var rawText = this.GetTextInternal();
  this.SetLastSuccessTest(rawText);
 },
 AssignClientAttributes: function(){
  var element = this.GetDropDownButton();
  if(_aspxIsExistsElement(element))
   _aspxPreventElementDragAndSelect(element, true);
 },
 RefocusOnClickRequired: function(){
  return false;
 },
 GetDropDownButton: function(){
  return this.GetButton(this.dropDownButtonIndex);
 },
 GetPopupControl: function(){
  var pc = aspxGetControlCollection().Get(this.name + __aspxDropDownNameSuffix);
  if(pc && pc.GetWindowElement(-1))
   return pc;
  else
   return null;
 },
 GetDropDownInnerControlName: function(suffix){
  var pc = this.GetPopupControl();
  if(pc)
   return this.GetPopupControl().name + suffix;
  return "";
 },
 GetDropDownItemImageCell: function() {
  return _aspxGetChildrenByPartialClassName(this.GetMainElement(), __aspxItemImageCellClassName)[0];
 },
 GetIsControlWidthWasChanged: function(){
  return this.mainElementWidthCache == __aspxInvalidDimension || this.mainElementWidthCache != this.GetMainElement().clientWidth;
 },
 GetDropDownHeight: function(){
  return 0;
 },
 GetDropDownWidth: function(){
  return 0;
 },
 GetDropDownIsWindowElement: function(id, pcPostfix) {
  var pos = id.lastIndexOf(pcPostfix);
  if(pos != -1) {
   var name = id.substring(0, pos);
   var pc = aspxGetPopupControlCollection().Get(name);
   if(pc && pc.dropDownEditName)
    return aspxGetDropDownCollection().Get(pc.dropDownEditName);
  }
  return null;
 },
 GetDropDownParents: function() {
  var parents = [ ];
  var mainElement = this.GetMainElement();
  var pcPostfix = __aspxPCWIdSuffix + "-1";
  var element = mainElement.parentNode;
  while(element != null){
   if(element.tagName == "BODY")
    break;
   if(element.id) {
    var dropDown = this.GetDropDownIsWindowElement(element.id, pcPostfix);
    if(dropDown != null)
     parents.push(dropDown);
   }
   element = element.parentNode;
  }
  return parents.reverse();
 },
 BeforePopupControlResizing: function() {
 },
 AfterPopupControlResizing: function() {
 },
 ShowDropDownArea: function(isRaiseEvent){
  this.SetPCIsShowingNow(true);
  aspxGetDropDownCollection().RegisterDroppedDownControl(this, this.GetDropDownParents());
  if(!this.droppedDown) 
   this.lockListBoxClick = true;
  this.lockClosing = true; 
  var pc = this.GetPopupControl();
  var element = this.GetMainElement();
  var pcwElement = pc.GetWindowElement(-1);
  if (!_aspxGetElementDisplay(pcwElement)) 
   pcwElement.style.visibility = "hidden";
  _aspxSetElementDisplay(pcwElement, true);
  var height = this.GetDropDownHeight();
  var width = this.GetDropDownWidth();
  this.BeforePopupControlResizing();
  if(this.ddHeightCache != height || this.ddWidthCache != width){
   pc.SetSize(width, height);
   this.ddHeightCache = height;
   this.ddWidthCache = width;
  }
  this.AfterPopupControlResizing();
  pc.popupVerticalOffset = - _aspxGetClientTop(element);
  this.RaiseDropDownEventRequired = isRaiseEvent;
  pc.ShowAtElement(element);
  this.droppedDown = true;
  this.lockClosing = false;
 },
 HideDropDownArea: function(isRaiseEvent){
  if(this.lockClosing || !this.droppedDown) return;
  this.DropDownButtonPop();
  var pc = this.GetPopupControl();
  if (pc){
   aspxGetDropDownCollection().UnregisterDroppedDownControl(this);
   pc.Hide();
   if(isRaiseEvent)
    this.RaiseCloseUp();
   this.droppedDown = false;
  }
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return this.dropDownButtonIndex == buttonIndex;
 },
 ToggleDropDown: function(){
  this.OnApplyChanges();
  if(this.droppedDown)
   this.HideDropDownArea(true);
  else
   this.ShowDropDownArea(true);  
 },
 GetTextInternal: function(){
  var text = ASPxClientButtonEditBase.prototype.GetValue.call(this);
  return text != null ? text : "";
 },
 SetTextInternal: function(text){
  if(!this.readOnly)
   this.SetTextBase(text);
 },
 SetTextBase: function(text) {
  ASPxClientButtonEditBase.prototype.SetValue.call(this, text);
 },
 SetLastSuccessTest: function(text){
  if(text == null) text = "";
  this.lastSuccessText = text;
 },
 RollbackTextInputValue: function () {
  this.SetTextBase(this.lastSuccessText);
 },
 SetPCIsShowingNow: function(value){
  this.pcIsShowingNow = value;
 },
 OnValueChanged: function() {
  this.SetLastSuccessTest(this.GetTextInternal());
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 OnApplyChanges: function(){
 },
 OnCancelChanges: function(){
  var isCancelProcessed = (this.GetTextInternal() != this.lastSuccessText);
  this.SetTextInternal(this.lastSuccessText);
  return isCancelProcessed;
 },
 OnFocus: function () {
  if(this.CorrectFocusWhenDisabled())
   return;
  if (__aspxIE && this.needTimeoutForInputElementFocusEvent) {
   setTimeout(function () {
    this.OnSetFocus(true);
    ASPxClientButtonEditBase.prototype.OnFocus.call(this);
    this.needTimeoutForInputElementFocusEvent = false;
   }.aspxBind(this), 0);
  } else {
   this.OnSetFocus(true);
   ASPxClientButtonEditBase.prototype.OnFocus.call(this);
  }
 },
 OnLostFocus: function(){
  this.OnSetFocus(false);
  ASPxClientButtonEditBase.prototype.OnLostFocus.call(this);
 },
 OnSetFocus: function(isFocused){
  aspxGetDropDownCollection().SetFocusedDropDownName(isFocused ? this.name : "");
 },
 IsEditorElement: function(element) {
  if(ASPxClientButtonEditBase.prototype.IsEditorElement.call(this, element))
   return true;
  if(this.allowFocusDropDownWindow)
   return false;
  var pc = this.GetPopupControl();
  if(pc != null) {
   var windowElement = pc.GetWindowElement(-1);
   return windowElement == element || _aspxGetIsParent(windowElement, element);
  }
  return false;
 },
 OnPopupControlShown: function(){
  this.SetPCIsShowingNow(false);
  if(this.RaiseDropDownEventRequired){
   this.RaiseDropDownEventRequired = false;
   _aspxSetTimeout("aspxDDBRaiseDropDownByTimer(\"" + this.name + "\")", 0);
  }
 },
 IsCanToDropDown: function(){
  return true;
 },
 OnDropDown: function(evt) { 
  if(!this.isInitialized) 
   return true;
  if(!this.IsCanToDropDown()) {
   this.ForceRefocusEditor();
   return true;
  }
  if(__aspxIE || __aspxOpera){
   if(!this.droppedDown) {
    _aspxEmulateOnMouseDown(this.GetMainElement(), evt);
    aspxGetStateController().ClearSavedCurrentPressedElement();
   }
  }
  this.OnDropDownCore(evt);
  return _aspxCancelBubble(evt); 
 },
 OnDropDownCore: function(evt) {
  if(!this.droppedDown)
   this.DropDownButtonPush();
  this.ToggleDropDown();
  this.ForceRefocusEditor();
 },
 DropDownButtonPush: function(){
  if(this.droppedDown || this.ddButtonPushed) return;
  this.ddButtonPushed = true;
  if(__aspxIE || __aspxOpera) 
   this.DropDownButtonPushPop(true);
  else
   this.DropDownButtonPushMozilla();
 }, 
 DropDownButtonPop: function(force){
  if((!this.droppedDown || !this.ddButtonPushed) && !force) return;
  this.ddButtonPushed = false;
  if(__aspxIE || __aspxOpera) 
   this.DropDownButtonPushPop(false);
  else
   this.DropDownButtonPopMozilla();
 },
 DropDownButtonPushPop: function(isPush){
  var buttonElement = this.GetDropDownButton();
  if(buttonElement){
   var controller = aspxGetStateController();
   var element = controller.GetPressedElement(buttonElement);
   if(element){
    if(isPush){
     controller.SetCurrentHoverElement(null);
     controller.DoSetPressedState(element);
    } else {
     controller.DoClearPressedState(element);
     controller.SetCurrentPressedElement(null);
     controller.SetCurrentHoverElement(element);
    }
   }
  }
 },
 DropDownButtonPushMozilla: function(){
  this.DisableStyleControllerForDDButton();
  var controller = aspxGetStateController();
  controller.savedCurrentPressedElement = null;
 },
 DropDownButtonPopMozilla: function(){
  this.EnableStyleControllerForDDButton();
  var controller = aspxGetStateController();
  var buttonElement = this.GetDropDownButton();
  if(buttonElement){
   var element = controller.GetPressedElement(buttonElement);
   if(element)
    controller.DoClearPressedState(element);
   controller.currentPressedElement = null;
   element = controller.GetHoverElement(buttonElement);
   if(element)
    controller.SetCurrentHoverElement(element);
  }
 },
 EnableStyleControllerForDDButton: function(){
  var element = this.GetDropDownButton();
  if(element){
   var controller = aspxGetStateController();
   this.ReplaceElementControlStyleItem(controller.hoverItems, __aspxHoverItemKind, element, this.ddButtonHoverStyle);
   this.ReplaceElementControlStyleItem(controller.pressedItems, __aspxPressedItemKind, element, this.ddButtonPressedStyle);
   this.ReplaceElementControlStyleItem(controller.selectedItems, __aspxSelectedItemKind, element, this.ddButtonSelectedStyle);
  }
 },
 DisableStyleControllerForDDButton: function(){
  var element = this.GetDropDownButton();
  if(element){
   var controller = aspxGetStateController();
   this.ddButtonHoverStyle = this.ReplaceElementControlStyleItem(controller.hoverItems, __aspxHoverItemKind, element, null);
   this.ddButtonPressedStyle = this.ReplaceElementControlStyleItem(controller.pressedItems, __aspxPressedItemKind, element, null);
   this.ddButtonSelectedStyle = this.ReplaceElementControlStyleItem(controller.selectedItems, __aspxSelectedItemKind, element, null);
  }
 },
 ReplaceElementControlStyleItem: function(items, kind, element, newStyleItem){
  var styleItem = items[element.id];
  items[element.id] = newStyleItem;
  element[kind] = newStyleItem;
  return styleItem;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  if(!causedByWindowResizing || !this.pcIsShowingNow)
   this.HideDropDownArea(true);
 },
 OnDocumentMouseUp: function() {
  this.DropDownButtonPop();
 },
 OnDDButtonMouseMove: function(evt){
 },
 ShouldCloseOnMCMouseDown: function () {
  return true;
 },
 OnMainCellMouseDown: function (evt) {
  if (this.ShouldCloseOnMCMouseDown())
   this.OnCloseUp(evt);
 },
 OnCloseUp: function (evt) {
  if (__aspxIE) {
   this.needTimeoutForInputElementFocusEvent = true;
   setTimeout(function () { this.HideDropDownArea(true); }.aspxBind(this), 0);
  } else {
   this.HideDropDownArea(true);
  }
 },
 OnOpenAnotherDropDown: function(){
  this.HideDropDownArea(true);
 },
 OnTextChanged: function() {
  if(!this.ChangedByEnterKeyPress())
   this.OnTextChangedInternal();
 },
 OnTextChangedInternal: function() {
  this.ParseValue();
 },
 ChangedByEnterKeyPress: function() {
  if(__aspxFirefox || __aspxWebKitFamily) 
   if(this.enterKeyPressed) {
    this.enterKeyPressed = false;
    return true;
   } 
  return false;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientButtonEditBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  var inputElement = this.GetInputElement();
  if(inputElement)
   this.ChangeInputCellEnabledAttributes(inputElement.parentNode, _aspxChangeAttributesMethod(enabled));
  var imageCell = this.GetDropDownItemImageCell();
  if(_aspxIsExists(imageCell))
   this.ChangeImageCellEnabledAttributes(imageCell, _aspxChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientButtonEditBase.prototype.ChangeEnabledStateItems.call(this, enabled);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
 },
 ChangeInputCellEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "onkeyup");
  method(element, "onmousedown");
  method(element, "onmouseup");
 },
 ChangeImageCellEnabledAttributes: function(imageCell, method){
  method(imageCell, "onmousedown");
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler(ASPxKey.Enter, "OnEnter");
  this.AddKeyDownHandler(ASPxKey.Esc, "OnEscape");
  this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
  this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
  this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
  this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
  this.AddKeyDownHandler(ASPxKey.Left, "OnArrowLeft");
  this.AddKeyDownHandler(ASPxKey.Right, "OnArrowRight");
  this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
  this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
  this.AddKeyDownHandler(ASPxKey.Tab, "OnTab");
 },
 OnArrowUp: function(evt){
  if(evt.altKey) {
   this.ToggleDropDown();
   return true;
  }
  return false;
 },
 OnArrowDown: function(evt){
  if(evt.altKey) {
   this.ToggleDropDown();
   return true;
  }
  return false;
 },
 OnPageUp: function(evt){
  return false;
 }, 
 OnPageDown: function(evt){
  return false;
 },
 OnEndKeyDown: function(evt){
  return false;
 },
 OnHomeKeyDown: function(evt){
  return false;
 },
 OnArrowLeft: function(evt){
  return false;
 },
 OnArrowRight: function(evt){
  return false;
 },
 OnEscape: function(evt){
  if(__aspxFirefox &&  __aspxBrowserVersion >= 4) { 
   var instance = this;
   window.setTimeout(function() { instance.OnEscapeInternal(); }, 0);
  }
  else
   this.OnEscapeInternal();
 },
 OnEscapeInternal: function() {
  var isCancelProcessed = this.OnCancelChanges() || this.droppedDown;
  this.HideDropDownArea(true);
  return isCancelProcessed;
 },
 OnEnter: function(evt){
  return false;
 },
 OnTab: function(evt){
  return false;
 },
 RaiseCloseUp: function(){
  if(!this.CloseUp.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaiseDropDown: function(){
  if(!this.DropDown.IsEmpty() && this.isInitialized){
   var args = new ASPxClientEventArgs();
   this.DropDown.FireEvent(this, args);
  }
 },
 AdjustDropDownWindow: function(){
  var pc = this.GetPopupControl();
  if(pc) {
   if(__aspxIE && __aspxBrowserVersion >= 8)
    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
   pc.AdjustSize();
   pc.UpdatePositionAtElement(this.GetMainElement());
   if(__aspxIE && __aspxBrowserVersion >= 8)
    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 ResetDropDownSizeCache: function(){
  this.ddHeightCache = __aspxInvalidDimension;
  this.ddWidthCache = __aspxInvalidDimension;
 },
 ShowDropDown: function(){
  this.ShowDropDownArea(false);
 },
 HideDropDown: function(){
  this.HideDropDownArea(false);
 }
});
ASPxClientDropDownEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.dropDownWindowHeight = "";
  this.dropDownWindowWidth = "";
  this.allowFocusDropDownWindow = true;
  this.needAdjustControlsInDropDownWindow = true;
 },
 InlineInitialize: function(){
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
 },
 RefocusOnClickRequired: function(){
  return __aspxIE;
 },
 BeforePopupControlResizing: function() {
  var divContainer = this.GetDropDownDivContainer();
  if(divContainer && this.needAdjustControlsInDropDownWindow) {
   this.AdjustControlsInDropDownWindow();
   _aspxSetElementDisplay(divContainer, false);
  }
 },
 AfterPopupControlResizing: function() {
  var divContainer = this.GetDropDownDivContainer();
  if(divContainer && this.needAdjustControlsInDropDownWindow) {
   _aspxSetElementDisplay(divContainer, true);
   this.AdjustControlsInDropDownWindow();
   this.needAdjustControlsInDropDownWindow = false;
  }
 },
 AdjustControlsInDropDownWindow: function() {
  var pc = this.GetPopupControl();
  var pcwElement = pc.GetWindowElement(-1);
  aspxGetControlCollection().ProcessControlsInContainer(pcwElement, function(control) {
   control.AdjustControl(false);
  });
 },
 GetDropDownDivContainer: function() {
  return _aspxGetElementById(this.name + __aspxDropDownNameSuffix + "_DDDC");
 },
 GetKeyValueInputElement: function(){
  return _aspxGetElementById(this.name + "KV");
 },
 GetDropDownHeight: function(){
  if(this.dropDownWindowHeight != "")
   return this.dropDownWindowHeight;
  return ASPxClientDropDownEditBase.prototype.GetDropDownHeight.call(this);
 },
 GetDropDownWidth: function(){
  if(this.dropDownWindowWidth != "")
   return this.dropDownWindowWidth;
  return this.GetMainElement().offsetWidth;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  if(!aspxGetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked())
   ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 OnBrowserWindowResize: function(evt){
  this.needAdjustControlsInDropDownWindow = true;
 },
 OnEnter: function(evt){
  return this.droppedDown;
 },
 OnEscape: function(evt){
  this.HideDropDownArea(true);
  return this.droppedDown;
 },
 OnTextChanged: function() {
  this.OnValueChanged();
 },
 GetKeyValueInternal: function(){
  var element = this.GetKeyValueInputElement();
  if(element != null && element.value != "")
   return element.value;
  else
   return null;
 },
 SetKeyValueInternal: function(keyValue){
  var element = this.GetKeyValueInputElement();
  if (element != null) element.value = keyValue == null ? "" : keyValue;
 },
 GetKeyValue: function(){
  return this.GetKeyValueInternal();
 },
 SetKeyValue: function(keyValue){
  this.SetKeyValueInternal(keyValue);
 }
});
ASPxClientDropDownEdit.Cast = ASPxClientControl.Cast;
ASPxClientDropDownCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.droppedControlName = "";
  this.droppedParentNames = [ ];
  this.focusedControlName = "";
 },
 SetFocusedDropDownName: function(name){
  this.focusedControlName = name;
 },
 ResetDroppedDownControl: function(){
  this.droppedControlName = "";
 },
 ResetDroppedDownParentCollection: function(startDroppedDownControlName) {
  var regArray = [ ];
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == startDroppedDownControlName)
    break;
   regArray.push(this.droppedParentNames[i]);
  }
  this.droppedParentNames = regArray;
  if(this.droppedParentNames.length > 0) {
   this.droppedControlName = this.droppedParentNames[this.droppedParentNames.length - 1];
   _aspxArrayRemoveAt(this.droppedParentNames, this.droppedParentNames.length - 1);
  }
 },
 ResetFocusedControl: function(){
  this.focusedControlName = "";
 },
 GetFocusedDropDown: function(){
  var control = this.GetDropDownControlInternal(this.focusedControlName);
  if(control == null) this.ResetFocusedControl();
  return control;
 },
 GetDroppedDropDown: function(){
  var control = this.GetDropDownControlInternal(this.droppedControlName);
  if(control == null) this.ResetDroppedDownControl();
  return control;
 },
 GetDroppedDropDownParents: function(startDroppedDownControlName) {
  var dropDownArray = [ ];
  var isNeedGetControl = false;
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == startDroppedDownControlName) isNeedGetControl = true;
   if(isNeedGetControl)
    var control = this.GetDropDownControlInternal(this.droppedParentNames[i]);
    if(control != null)
     dropDownArray.push(control);
  }
  return dropDownArray;
 },
 FindFirstNameForClose: function(newDroppedDownParentArray) {
  var firstNameToClose = newDroppedDownParentArray.length > 0 ? "" : this.droppedParentNames[i];
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(_aspxArrayIndexOf(newDroppedDownParentArray, this.Get(this.droppedParentNames[i])) == -1) {
    firstNameToClose = this.droppedParentNames[i];
    break;
   }
  }
  return firstNameToClose;
 },
 GetDropDownControlInternal: function(name){
  var control = this.Get(name);
  var isControlExists = control && control.RenderExistsOnPage();
  if(!isControlExists)
   control = null;
  return control;
 },
 IsDroppedDropDownParentExist: function(name) {
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == name)
    return true;
  }
  return false;
 },
 OnDDButtonMouseMove: function(evt){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null)
   dropDownControl.OnDDButtonMouseMove(evt);
 },
 OnDocumentMouseDown: function(evt){
  if(!ASPxClientTouchUI.handleFastTapIfRequired(evt, function(){ this.CloseDropDownByDocumentOrWindowEvent(evt, false); }.aspxBind(this), false))
   this.CloseDropDownByDocumentOrWindowEvent(evt, false);
 },
 OnDocumentMouseUp: function(evt){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null)
   dropDownControl.OnDocumentMouseUp();
 },
 OnBrowserWindowResize: function(evt){
  if(typeof(aspxGetPopupControlCollection) != "undefined" && !aspxGetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked()){
   this.CloseDropDownByDocumentOrWindowEvent(evt, true);
   this.AdjustControls();
  }
 },
 CloseDropDownByDocumentOrWindowEvent: function(evt, causedByWindowResizing){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null && (this.IsEventNotFromControlSelf(evt, dropDownControl) || causedByWindowResizing))
   dropDownControl.CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
  var childrenDropDownsToClose = this.GetDroppedDropDownParents(this.droppedParentNames[0]);
  if(childrenDropDownsToClose.length != 0) {
   childrenDropDownsToClose = childrenDropDownsToClose.reverse();
   this.ResetDroppedDownParentCollection(this.droppedParentNames[0]);
   var rollbackDroppedDownNames = [ ];
   for(var c = 0; c < childrenDropDownsToClose.length; c++) {
    if(this.IsEventNotFromControlSelf(evt, childrenDropDownsToClose[c]))
     childrenDropDownsToClose[c].CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
    else
     rollbackDroppedDownNames.push(childrenDropDownsToClose[c].name);
   }
   if(rollbackDroppedDownNames != 0) {
    rollbackDroppedDownNames = rollbackDroppedDownNames.reverse();
    this.droppedParentNames = rollbackDroppedDownNames;
   }
  }
 },
 AdjustControls: function(){
  this.ForEachControl(function(control) {
   control.AdjustControl(false);
  });
 },
 IsEventNotFromControlSelf: function(evt, control){
  var srcElement = _aspxGetEventSource(evt);
  var mainElement = control.GetMainElement();
  var popupControl = control.GetPopupControl();
  if(!srcElement || !mainElement || !popupControl) return true;
  return (!_aspxGetIsParent(mainElement, srcElement) &&
   !_aspxGetIsParent(popupControl.GetWindowElement(-1), srcElement) &&
   !this.IsEventFromSharedPopupOfInnerEditor(popupControl, srcElement));
 },
 IsEventFromSharedPopupOfInnerEditor: function(popupControl, srcElement) {
  var eventFromPopupOfInnerEditor = false;
  aspxGetControlCollection().ProcessControlsInContainer(popupControl.GetWindowElement(-1),
   function(control){
    if(control.calendarOwnerName) {
     var sharedCalendarPopup = control.GetCalendarOwner().GetPopupControl().GetWindowElement(-1);
     if(_aspxGetIsParent(sharedCalendarPopup, srcElement))
      eventFromPopupOfInnerEditor = true;
    }
  });
  return eventFromPopupOfInnerEditor;
 },
 RegisterDroppedDownControl: function(dropDownControl, droppedDownParentArray){
  var prevDropDownControl = this.GetDroppedDropDown();
  var areDroppedDownsCollectionParents = _aspxArrayIndexOf(droppedDownParentArray, prevDropDownControl) != -1;
  if(prevDropDownControl != null && prevDropDownControl != dropDownControl && !areDroppedDownsCollectionParents)
   prevDropDownControl.OnOpenAnotherDropDown();
  if(this.droppedParentNames.length > 0) {
   var firstDropDownsNameToClose = this.FindFirstNameForClose(droppedDownParentArray);
   if(firstDropDownsNameToClose != "") {
    var childrenDropDownsToClose = this.GetDroppedDropDownParents(firstDropDownsNameToClose);
    this.ResetDroppedDownParentCollection(firstDropDownsNameToClose);
    this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
   }
  }
  this.droppedControlName = dropDownControl.name;
  this.droppedParentNames = [ ];
  for(var i = 0; i < droppedDownParentArray.length; i++)
   this.droppedParentNames.push(droppedDownParentArray[i].name);
 },
 UnregisterDroppedDownControl: function(dropDownControl){
  if(this.droppedControlName == dropDownControl.name)
   this.ResetDroppedDownControl();
  if(this.IsDroppedDropDownParentExist(dropDownControl.name)) {
   var prevDropDownControl = this.GetDroppedDropDown();
   if(prevDropDownControl != null)
    prevDropDownControl.OnOpenAnotherDropDown();
   var childrenDropDownsToClose = this.GetDroppedDropDownParents(dropDownControl.name);
   this.ResetDroppedDownParentCollection(dropDownControl.name);
   _aspxArrayRemoveAt(childrenDropDownsToClose, 0);
   this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
  }
 },
 CloseDroppedDownCollection: function(dropDownParentArray) {
  for(var c = 0; c < dropDownParentArray.length; c++)
   dropDownParentArray[c].OnOpenAnotherDropDown();
 }
});
ASPxClientDateEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.dateFormatter = null;
  this.date = null;
  this.dateOnError = "u";
  this.allowNull = true;
  this.calendarOwnerName = null;
  this.calendarConsumerName = null;
  this.textWasLastTemporaryChanged = false;
  this.showTimeSection = false;
  this.adjustInnerControls = true;
  this.DateChanged = new ASPxClientEvent();
  this.ParseDate = new ASPxClientEvent();
  this.CalendarCustomDisabledDate = new ASPxClientEvent();
 },
 Initialize: function() {
  if(this.calendarOwnerName == null) {
   var calendar = this.GetCalendar();
   if(calendar) {
    calendar.SelectionChanging.AddHandler(ASPxClientDateEdit.HandleCalendarSelectionChanging);
    calendar.MainElementClick.AddHandler(ASPxClientDateEdit.HandleCalendarMainElementClick);
    calendar.CustomDisabledDate.AddHandler(ASPxClientDateEdit.HandleCalendarCustomDisabledDate.aspxBind(this));
    if(!this.CalendarCustomDisabledDate.IsEmpty())
     calendar.Update();
    var calendarMainElement = calendar.GetMainElement();
    if (__aspxNetscapeFamily && _aspxIsExistsElement(calendarMainElement))
     calendarMainElement.style.borderCollapse = "separate";
   }
   var timeEdit = this.GetTimeEdit();
   if(timeEdit) {
    timeEdit.InternalValueChanging.AddHandler(ASPxClientDateEdit.HandleTimeEditInternalValueChanging);
    timeEdit.OwnerDateEdit = this;
   }
  }
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
  if(!this.date && this.maskInfo && this.GetMinDate())
   _aspxMaskDateTimeHelper.SetDate(this.maskInfo, this.GetMinDate());
 },
 InlineInitialize: function(){
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing) {
  if((!causedByWindowResizing || !this.pcIsShowingNow) && this.GetShowTimeSection())
   this.ApplyTimeSectionDateChanges();
  ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },  
 OnDropDownCore: function(evt) {
  ASPxClientDropDownEditBase.prototype.OnDropDownCore.call(this, evt);
  if(this.droppedDown) {
   var cal = this.GetCalendar();
   if(cal)
    cal.forceMouseDown = true;
  }
 },
 ShowDropDownArea: function(isRaiseEvent){
  var cal = this.GetCalendar();
  if(cal) {
   if(!this.date) {
    var currentDate = new Date();
    cal.SetVisibleDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()));
   }
   cal.SetValue(this.date);
  }
  __aspxActiveCalendar = cal;
  ASPxClientDateEdit.active = this;
  var timeEdit = this.GetTimeEdit();
  if(timeEdit)
   timeEdit.SetValue(this.date);
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner != null)
   calendarOwner.calendarConsumerName = this.name;
  this.calendarConsumerName = null;
 },    
 BeforePopupControlResizing: function() {
  var calendarOwner = this;
  if(this.calendarOwnerName)
   calendarOwner = this.GetCalendarOwner();
  if(calendarOwner.adjustInnerControls && calendarOwner.GetTimeEdit()){
   calendarOwner.GetClock().AdjustControl();
   calendarOwner.GetTimeEdit().AdjustControl();
   calendarOwner.adjustInnerControls = false;
  }
 },
 GetPopupControl: function() { 
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner != null)
   return calendarOwner.GetPopupControl();
  return ASPxClientDropDownEditBase.prototype.GetPopupControl.call(this);
 },
 OnPopupControlShown: function() {
  if(this.calendarConsumerName != null)
   aspxGetControlCollection().Get(this.calendarConsumerName).OnPopupControlShown();
  else  
   ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
 },
 GetCalendar: function() { 
  var name = this.GetDropDownInnerControlName(__aspxCalendarNameSuffix);
  return aspxGetControlCollection().Get(name);
 },
 GetTimeEdit: function() { 
  var name = this.GetDropDownInnerControlName(__aspxTimeEditNameSiffix);
  return aspxGetControlCollection().Get(name);
 },
 GetClock: function() {
  var name = this.GetDropDownInnerControlName(__aspxClockNameSiffix);
  return aspxGetControlCollection().Get(name);
 },
 GetCalendarOwner: function() {
  if(!this.calendarOwnerName)
   return null;
  return aspxGetControlCollection().Get(this.calendarOwnerName);
 },
 GetShowTimeSection: function(){
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner)
   return calendarOwner.showTimeSection;
  return this.showTimeSection;
 },
 GetFormattedDate: function() {
  if(this.maskInfo != null)
   return this.maskInfo.GetValue();
  if(this.date == null)
   return this.focused ? "" : this.nullText;
  return this.dateFormatter.Format(this.date);
 },
 SetTextWasLastTemporaryChanged: function(value){
  this.textWasLastTemporaryChanged = value;
 },
 GetTextWasLastTemporaryChanged: function(){
  return this.textWasLastTemporaryChanged;
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseDateChanged(processOnServer);
  return processOnServer;
 },
 OnApplyChanges: function(){
  if(this.focused)
   this.OnTextChanged();
 },
 OnCalendarSelectionChanging: function(date, select) {
  if(this.GetShowTimeSection())
   return;
  if(!this.GetCalendar().isDateChangingByKeyboard) {
   this.HideDropDownArea(true);
   if(date != null)
    this.ApplyExistingTime(date);
   this.ChangeDate(date);
   if(select)
    _aspxSetSelection(this.GetInputElement());
  }
 },
 OnCalendarCustomDisabledDate: function(e) {
  this.RaiseCalendarCustomDisabledDate(e);
 },
 ForceRefocusTimeSectionTimeEdit: function(mouseDownSource) {
  var dateEdit = this;
  if(this.calendarConsumerName)
   dateEdit = aspxGetControlCollection().Get(this.calendarConsumerName);
  var timeEdit = dateEdit.GetTimeEdit();
  if(timeEdit.IsEditorElement(mouseDownSource) && !timeEdit.IsElementBelongToInputElement(mouseDownSource)) {
   timeEdit.ForceRefocusEditor();
   return;
  }
  if(!dateEdit.IsEditorElement(mouseDownSource))
   return;
  dateEdit.ForceRefocusEditor();
  var input = timeEdit.GetInputElement();
  if(input)
   input.blur();
  window.setTimeout(function() { ASPxClientEdit.SetFocusedEditor(dateEdit); }, 0);
 },
 ApplyTimeSectionDateChanges: function() {
  var hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
  var date = this.GetCalendar().GetSelectedDate();
  this.GetTimeEdit().ParseValue();
  var timeEditDate = this.GetTimeEdit().GetDate();
  if(timeEditDate) {
   hours = timeEditDate.getHours();
   minutes = timeEditDate.getMinutes();
   seconds = timeEditDate.getSeconds();
   milliseconds = timeEditDate.getMilliseconds();
  }
  if(date) {
   date.setHours(hours);
   date.setMinutes(minutes);
   date.setSeconds(seconds);
   date.setMilliseconds(milliseconds);
  }
  this.ApplyParsedDate(date, true);
 },
 IsEditorElement: function(element) {
  if(this.GetShowTimeSection() && _aspxGetIsParent(this.GetTimeEdit().GetMainElement(), element)) {
   this.lockLostFocus = true;
   return false;
  }
  return ASPxClientDropDownEditBase.prototype.IsEditorElement.call(this, element);
 },
 OnLostFocusCore: function() {
  if(this.GetShowTimeSection() && this.lockLostFocus) {
   this.lockLostFocus = false;
   return;
  }
  ASPxClientDropDownEditBase.prototype.OnLostFocusCore.call(this);
 },
 OnTimeEditLostFocus: function() {
  this.OnLostFocusCore();
 },
 OnTimeEditEnter: function() {
  this.ForceRefocusEditor();
  this.ApplyTimeSectionDateChanges();
  this.HideDropDownArea(true);
  _aspxSetSelection(this.GetInputElement());
 },
 OnTimeEditEsc: function() {
  this.ForceRefocusEditor();
  this.HideDropDownArea(true);
 },
 OnTimeEditTab: function(shiftKey) {
  if(shiftKey && !this.GetCalendarOwner())
   this.ForceRefocusEditor();
  this.ApplyTimeSectionDateChanges();
  this.HideDropDownArea(true);
 },
 OnTimeSectionOkClick: function() {
  this.ApplyTimeSectionDateChanges();
  this.HideDropDownArea(true);
 },
 OnTimeSectionCancelClick: function() {
  this.HideDropDownArea(true);
 },
 OnTimeSectionClearClick: function() {
  this.ChangeDate(null);
  this.HideDropDownArea(true);
 },
 OnTimeEditInternalValueChanging: function(date) {
  var clock = this.GetClock();
  if(clock)
   clock.SetDate(date);
 },
 OnArrowUp: function(evt){ 
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
  if(!isProcessed && this.droppedDown)
   return this.OnCalendarMethod("OnArrowUp", evt);       
  return false;
 },
 OnArrowDown: function(evt){
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
  if(!isProcessed && this.droppedDown)
   return this.OnCalendarMethod("OnArrowDown", evt);
  return false;
 },
 OnArrowLeft: function(evt){
  if (this.droppedDown) {
   this.OnCalendarMethod("OnArrowLeft", evt);
   return true;
  }
  return false;
 },
 OnArrowRight: function(evt){
  if (this.droppedDown) { 
   this.OnCalendarMethod("OnArrowRight", evt);
   return true;
  }
  return false;
 },
 OnPageUp: function(evt){
  if (this.droppedDown) { 
   this.OnCalendarMethod("OnPageUp", evt);
   return true;
  }
  return false;  
 },
 OnPageDown: function(evt){
  if (this.droppedDown) {
   this.OnCalendarMethod("OnPageDown", evt);
   return true;
  }
  return false;  
 },
 OnEndKeyDown: function(evt) {
  if (this.droppedDown) {
   this.OnCalendarMethod("OnEndKeyDown", evt);
   return true;
  }
  return false;
 },
 OnHomeKeyDown: function(evt) {
  if (this.droppedDown) {
   this.OnCalendarMethod("OnHomeKeyDown", evt);
   return true;
  }
  return false; 
 },
 OnCalendarMethod: function(methodName, evt){
  var calendar = this.GetCalendar();
  if(!calendar.IsFastNavigationActive())
   this.SetTextWasLastTemporaryChanged(false);
  return calendar[methodName](evt);
 },
 OnKeyUp: function(evt){
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)){
   this.SetTextWasLastTemporaryChanged(true);
  }
 },
 OnEnter: function() {
  this.enterProcessed = false; 
  if (this.droppedDown) {
   var calendar = this.GetCalendar();
   if (calendar.IsFastNavigationActive())
    calendar.GetFastNavigation().OnEnter();
   else if(this.GetTextWasLastTemporaryChanged()){
    this.ParseValue();
    this.HideDropDownArea(true);
   } else {
    var calendarSelection = this.GetCalendar().GetValue();
    if(this.GetShowTimeSection()) {
     if(calendarSelection) {
      this.ApplyTimeSectionDateChanges();
      _aspxSetSelection(this.GetInputElement());
     } 
     this.HideDropDownArea(true);
    } else
     this.OnCalendarSelectionChanging(calendarSelection, true);
   }
   this.enterProcessed = true;
  }
  else
   this.OnApplyChanges();
  this.SetTextWasLastTemporaryChanged(false);
  return this.enterProcessed;
 },
 OnEscape: function() {
  if (this.droppedDown){
   if (this.GetCalendar().IsFastNavigationActive())
    this.GetCalendar().OnEscape();
   else
    this.HideDropDownArea(true);
  } else {
   this.ChangeDate(this.date);  
  }
  this.SetTextWasLastTemporaryChanged(false);
  return true;
 },
 OnTab: function(evt){
  if(!this.droppedDown) return;
  var calendar = this.GetCalendar();
  if (calendar.IsFastNavigationActive()) 
   calendar.GetFastNavigation().Hide();
  if(this.GetShowTimeSection()) {
   this.lockLostFocus = true;
   if(this.GetCalendarOwner()) {
    _aspxPreventEvent(evt);  
    this.GetTimeEdit().SetFocus();
   }
   return;
  }
  if(this.GetTextWasLastTemporaryChanged()){
   this.ParseValue();
   this.HideDropDownArea(true);
  } else 
   this.OnCalendarSelectionChanging(this.GetCalendar().GetValue(), false);
  this.SetTextWasLastTemporaryChanged(false);
 },
 OnTextChanged: function() {
  if(!this.IsFocusEventsLocked())
   ASPxClientDropDownEditBase.prototype.OnTextChanged.call(this);
 },
 ParseValue: function() { 
  this.ParseValueCore(true);
 },
 ParseValueCore: function(raiseChangedEvent) {
  var date;
  if(this.maskInfo != null) {
   date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo);   
  } else {
   var text = this.GetInputElement().value;
   var userParseResult = this.GetUserParsedDate(text);
   if(userParseResult !== false) {
    date = userParseResult;
   } else {
    if(text == null || text == "")
     date = null;
    else
     date = this.dateFormatter.Parse(text);
   }   
  }
  if(this.GetShowTimeSection() && !this.HasTimeInEditFormat() && date)
   this.ApplyExistingTime(date);
  this.ApplyParsedDate(date, raiseChangedEvent);
 },
 GetUserParsedDate: function(text) {
  if(!this.ParseDate.IsEmpty()) {
   var args = new ASPxClientParseDateEventArgs(text);
   this.ParseDate.FireEvent(this, args);
   if(args.handled)
    return args.date;
  }
  return false;
 },
 ApplyParsedDate: function(date, raiseChangedEvent) {
  if(date === false || !this.GetCalendar().IsDateInRange(date) || this.GetCalendar().IsDateDisabled(date)) {
   switch(this.dateOnError) {
    case "n":
     date = null;
     break;
    case "t":
     date = new Date();
     break;
    default:
     date = this.date;
     break;
   }
  }
  if(!this.allowNull && date == null)
   date = this.date;
  if(raiseChangedEvent)
   this.ChangeDate(date);  
  else
   this.SetValue(date);
 },
 HasTimeInEditFormat: function() {
  if(this.maskInfo) {
   for(var i = 0; i < this.maskInfo.parts.length; i++) {
    var part = this.maskInfo.parts[i];
    if(part.dateTimeRole && part.dateTimeRole.toLowerCase() == "h")
     return true;
   }
   return false;
  }
  return this.dateFormatter.mask.toLowerCase().indexOf("h") != -1;
 },
 ApplyExistingTime: function(date) {
  if(this.date == null)  return;  
  var savedDay = date.getDate();
  date.setHours(this.date.getHours());
  var diff = date.getDate() - savedDay;
  if(diff != 0) {
   var sign = (diff == 1 || date.getDate() == 1) ? -1 : 1;
   date.setTime(date.getTime() + sign * 3600000);
  }
  date.setMinutes(this.date.getMinutes());
  date.setSeconds(this.date.getSeconds());
  date.setMilliseconds(this.date.getMilliseconds());
 },
 GetValue: function() {
  return this.date;
 }, 
 GetValueString: function() {
  return this.date != null ? _aspxGetInvariantDateTimeString(this.date) : null;
 },
 SetValue: function(date) {  
  this.date = date;
  if(this.maskInfo != null) {
   _aspxMaskDateTimeHelper.SetDate(this.maskInfo, date);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } else {
   this.GetInputElement().value = this.GetFormattedDate();
   this.SyncRawInputValue();
   if(this.CanApplyTextDecorators())
    this.ToggleTextDecoration();
  }
  if(this.styleDecoration)
   this.styleDecoration.Update();
 },
 ChangeDate: function(date) { 
  var changed = !_aspxAreDatesEqualExact(this.date, date);
  this.SetValue(date);  
  if(changed) {
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
 },
 GetText: function() {
  return this.GetFormattedDate();
 },
 SetText: function(value) {
  ASPxClientTextEdit.prototype.SetValue.call(this, value);
  if(this.maskInfo == null)
   this.ParseValueCore(false);
 },
 GetFormattedText: function() {
  if(this.maskInfo != null)
   return this.GetMaskDisplayText();
  if(this.date == null)
   return this.nullText;
  if(this.displayFormat != null)
   return ASPxFormatter.Format(this.displayFormat, this.date);
  return this.GetFormattedDate();
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  if(htmlEvent.altKey)
   return true;
  if(ASPxClientDropDownEditBase.prototype.ShouldCancelMaskKeyProcessing.call(this, htmlEvent, keyDownInfo))
   return true;  
  if(!this.droppedDown)
   return false;
  if(this.GetShowTimeSection() && htmlEvent.keyCode == ASPxKey.Tab)
   return false;
  return !_aspxMaskManager.IsPrintableKeyCode(keyDownInfo) 
   && keyDownInfo.keyCode != ASPxKey.Backspace
   && keyDownInfo.keyCode != ASPxKey.Delete;
 },
 DecodeRawInputValue: function(value) {
  if(value == "N") return null;
  var date = new Date();
  date.setTime(Number(value));
  var result = _aspxToUtcTime(date);
  var offsetDiff = result.getTimezoneOffset() - date.getTimezoneOffset();
  if(offsetDiff !== 0)
   result.setTime(result.valueOf() + offsetDiff * 60000);
  return result;
 },
 SyncRawInputValue: function() {
  this.GetRawInputElement().value = this.date == null ? "N" : _aspxToLocalTime(this.date).valueOf();
 }, 
 HasTextDecorators: function() {
  return (this.maskInfo != null && this.date == null) || ASPxClientDropDownEditBase.prototype.HasTextDecorators.call(this);
 },
 GetMaskDisplayText: function() {
  if(!this.focused) {
   if(this.date == null)
    return this.nullText;
   if(this.HasTextDecorators())
    return this.GetDecoratedText(this.date);
  }
  return this.maskInfo.GetText();
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {
   this.ApplyMaskInfo(false);
  } else {
   var text = this.focused ? this.GetFormattedDate() : this.GetFormattedText();
   var input = this.GetInputElement();
   if(input.value != text)
    input.value = text;
  }
 },
 BeginShowMaskHint: function() {
 },
 RaiseDateChanged: function(processOnServer) {
  if(!this.DateChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.DateChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseCalendarCustomDisabledDate: function(e) {
  this.CalendarCustomDisabledDate.FireEvent(this, e);
 },
 SetDate: function(date) {
  this.SetValue(date);
 },
 GetDate: function() {
  return this.date ? new Date(this.date.valueOf()) : null;
 },
 GetMinDate: function() {
  var cal = this.GetCalendar();
  if(cal)
   return cal.GetMinDate();
  return null;
 },
 SetMinDate: function(date) {
  var cal = this.GetCalendar();
  if(cal)
   cal.SetMinDate(date);
 },
 GetMaxDate: function() {
  var cal = this.GetCalendar();
  if(cal)
   return cal.GetMaxDate();
  return null;
 },
 SetMaxDate: function(date) {
  var cal = this.GetCalendar();
  if(cal)
   cal.SetMaxDate(date); 
 } 
});
ASPxClientDateEdit.Cast = ASPxClientControl.Cast;
ASPxClientDateEdit.active = null;
ASPxClientDateEdit.HandleCalendarSelectionChanging = function(s, e) {
 if(ASPxClientDateEdit.active == null) return;
 ASPxClientDateEdit.active.OnCalendarSelectionChanging(e.selection.GetFirstDate(), true);
};
ASPxClientDateEdit.HandleCalendarCustomDisabledDate = function(s, e) {
 this.OnCalendarCustomDisabledDate(e);
};
ASPxClientDateEdit.HandleTimeEditInternalValueChanging = function(s, date) {
 if(ASPxClientDateEdit.active == null) return;
 ASPxClientDateEdit.active.OnTimeEditInternalValueChanging(date);
};
ASPxClientDateEdit.HandleCalendarMainElementClick = function(s, e) {
 var dateEdit = ASPxClientDateEdit.active;
 if(dateEdit == null) 
  return;
 var focusEditor = true;
 if(dateEdit.GetShowTimeSection())
  focusEditor = !_aspxGetIsParent(dateEdit.GetTimeEdit().GetMainElement(), _aspxGetEventSource(e));
 if(focusEditor)
  dateEdit.SetFocus();
};
ASPxClientParseDateEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(value) {
  this.constructor.prototype.constructor.call(this);
  this.value = value;
  this.date = null;
  this.handled = false;
 } 
});
__aspxCCValueInputSuffix = "VI";
ASPxClientComboBoxBase = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.lbEventLockCount = 0;
  this.receiveGlobalMouseWheel = false;
  this.listBox = null;
  this.lastSuccessValue = "";
  this.islastSuccessValueInit = false;
  this.SelectedIndexChanged = new ASPxClientEvent();
 },
 Initialize: function(){
  this.InitializeListBoxOwnerName();
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
  this.InitLastSuccessValue();
 },
 InitializeListBoxOwnerName: function(){
  var lb = this.GetListBoxControl();
  if(lb)
   lb.ownerName = this.name;
 },
 InitLastSuccessValue: function(){
  this.SetLastSuccessValue(this.GetValue());
 },
 SetLastSuccessValue: function (value) {
  if(this.convertEmptyStringToNull && value === "")
   value = null;
  this.lastSuccessValue = value;
  this.islastSuccessValueInit = true;
 },
 GetDropDownInnerControlName: function(suffix){
  return "";
 },
 GetListBoxControl: function(){
  if(!_aspxIsExists(this.listBox)){
   var name = this.GetDropDownInnerControlName(__aspxListBoxNameSuffix);
   this.listBox = aspxGetControlCollection().Get(name);
  }
  if(this.isNative || (this.listBox && !!this.listBox.GetMainElement()))
   return this.listBox;
  return null;
 },
 GetCallbackArguments: function(){
  return this.GetListBoxCallbackArguments();
 },
 GetListBoxCallbackArguments: function(){
  var lb = this.GetListBoxControl();
  return lb.GetCallbackArguments();
 },
 SendCallback: function(){
  this.CreateCallback(this.GetCallbackArguments());
 },
 SendSpecialCallback: function(args){
  this.CreateCallback(args);
 },
 SetText: function (text){
  var lb = this.GetListBoxControl();
  var index = this.GetAdjustedSelectedIndexByText(lb, text);
  this.SelectIndex(index, false);
  this.SetTextBase(text);
  this.SetLastSuccessTest(text);
  this.SetLastSuccessValue(index >= 0 ? lb.GetValue() : text);
 },
 GetValue: function(){
  var value = this.islastSuccessValueInit ? this.lastSuccessValue : this.GetValueInternal();
  if(this.convertEmptyStringToNull && value === "")
   value = null;
  return value;
 },
 GetValueInternal: function(){
  var text = this.GetTextInternal();
  var textChanges = text != this.lastSuccessText;
  if(textChanges){
   var lb = this.GetListBoxControl();
   if (lb){
    var index = this.GetAdjustedSelectedIndexByText(lb, text);
    this.SelectIndexSilent(lb, index); 
    if(index != -1)
     return lb.GetValue();
   }
  }
  return ASPxClientDropDownEditBase.prototype.GetValue.call(this);
 },
 SetValue: function(value){
  var lb = this.GetListBoxControl();
  if(lb){
   lb.SetValue(value);
   var item = lb.GetSelectedItem();
   var text = item ? item.text : value;
   this.OnSelectionChangedCore(text, item, false);
   this.UpdateValueInput();
  }
 },
 GetFormattedText: function() {
  return this.GetText();
 },
 GetAdjustedSelectedIndexByText: function(lb, text){
  var lbSelectedItem = lb.GetSelectedItem();
  if(lbSelectedItem != null && lbSelectedItem.text == text)
   return lbSelectedItem.index;
  return this.FindItemIndexByText(lb, text);
 },
 FindItemIndexByText: function(lb, text){
  if (lb)
   return lb.FindItemIndexByText(text);
 },
 CollectionChanged: function(){
 },
 SelectIndex: function(index, initialize){
  var lb = this.GetListBoxControl();
  var isSelectionChanged = lb.SelectIndexSilentAndMakeVisible(index, initialize);
  var item = lb.GetSelectedItem();
  var text = item != null ? item.text : "";
  if(isSelectionChanged)
   this.OnSelectionChangedCore(text, item, false);
  this.UpdateValueInput();
  return isSelectionChanged;
 },
 OnSelectChanged: function(){
  if(this.lbEventLockCount > 0) return;
  var lb = this.GetListBoxControl();
  var item = lb.GetSelectedItem();
  var text = item != null ? item.text : "";
  this.OnSelectionChangedCore(text, item, false);
  this.OnChange();
 },
 OnSelectionChangedCore: function(text, item, canBeRolledBack){
  this.SetTextBase(text);
  this.ShowItemImage(item);
  if(!canBeRolledBack){
   this.SetLastSuccessTest(text);
   this.SetLastSuccessValue(item != null ? item.value : text);
  }
  if(this.filterStrategy) {
   if(!canBeRolledBack)
    this.filterStrategy.OnSelectionChanged();
   if(__aspxIE) { 
    var inputElement = this.GetInputElement();
    if(_aspxGetActiveElement() == inputElement)
     _aspxSetInputSelection(inputElement, inputElement.value.length, inputElement.value.length);
   }
  }
 },
 ShowItemImageByIndex: function(index){
  var item = this.GetItem(index);
  this.ShowItemImage(item);
 },
 ShowItemImage: function(item){
  var imageUrl = item != null ? item.imageUrl : "";
  this.SetSelectedImage(imageUrl);
 },
 GetDropDownImageElement: function(){
  var itemImageCell = this.GetDropDownItemImageCell();
  if(itemImageCell != null)
   return _aspxGetChildByTagName(itemImageCell, "IMG", 0);
  return null;
 },
 SetSelectedImage: function(imageUrl) {
  var imgElement = this.GetDropDownImageElement();
  if(imgElement != null) {
   var imageExists = imageUrl != "";
   imageUrl = imageExists ? imageUrl : ASPx.EmptyImageUrl;
   imgElement.src = imageUrl;
   var itemImageCell = this.GetDropDownItemImageCell();
   if(_aspxGetElementDisplay(itemImageCell) != imageExists)
    _aspxSetElementDisplay(itemImageCell, imageExists);
   if(__aspxIE) {
    this.AdjustControl();
   }
  }
 },
 OnCallback: function(result) {
 },
 OnChange: function(){
  this.UpdateValueInput();
  this.RaisePersonalStandardValidation();
  this.OnValueChanged();
 },
 UpdateValueInput: function() {
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return;
  var processOnServer = ASPxClientTextEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseSelectedIndexChanged(processOnServer);
  return processOnServer;
 },
 RaiseSelectedIndexChanged: function(processOnServer) {
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 AddItem: function(text, value, imageUrl){
  var index = this.GetListBoxControl().AddItem(text, value, imageUrl);
  this.CollectionChanged();
  return index;
 },
 InsertItem: function(index, text, value, imageUrl){
  this.GetListBoxControl().InsertItem(index, text, value, imageUrl);
  this.CollectionChanged();
 },
 RemoveItem: function(index){
  this.GetListBoxControl().RemoveItem(index);
  this.CollectionChanged();
 },
 ClearItems: function(){
  this.GetListBoxControl().ClearItems();
  this.ClearItemsInternal();
 },
 BeginUpdate: function(){
   this.GetListBoxControl().BeginUpdate();
 },
 EndUpdate: function(){
  this.GetListBoxControl().EndUpdate();
  this.CollectionChanged();
 },
 MakeItemVisible: function(index){
 },
 GetItem: function(index){
  var lb = this.GetListBoxControl();
  if(lb)
   return this.GetListBoxControl().GetItem(index);
  else
   return null;
 },
 FindItemByText: function(text) {
  var lb = this.GetListBoxControl();
  if(lb)
   return lb.FindItemByText(text);
  return null;
 },
 FindItemByValue: function(value){
  return this.GetListBoxControl().FindItemByValue(value);
 },
 GetItemCount: function(){
  return this.GetListBoxControl().GetItemCount(); 
 },
 GetSelectedIndex: function(){
  var lb = this.GetListBoxControl();
  if(lb)
   return lb.GetSelectedIndex();
  else
   return -1;
 },
 SetSelectedIndex: function(index){
  this.SelectIndex(index, false);
 },
 GetSelectedItem: function(){
  var lb = this.GetListBoxControl();
  var index = lb.GetSelectedIndex();
  return lb.GetItem(index);
 },
 SetSelectedItem: function(item){
  var index = (item != null) ? item.index : -1;
  this.SelectIndex(index, false);
 },
 GetText: function(){
  return this.lastSuccessText;
 },
 PerformCallback: function(arg) {
 },
 ClearItemsInternal: function(){
  this.SetValue(null);
  this.CollectionChanged();
 }
});
ASPxClientComboBox = _aspxCreateClass(ASPxClientComboBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.allowMultipleCallbacks = false;
  this.isCallbackMode = false;
  this.loadDropDownOnDemand = false;
  this.needToLoadDropDown = false;
  this.isPerformCallback = false;
  this.changeSelectAfterCallback = 0;
  this.incrementalFilteringMode = "None";
  this.filterStrategy = null;
  this.filterTimer = __aspxWebKitTouchUI ? 300 : 100; 
  this.filterMinLength = 0;
  this.initTextCorrectionRequired = false;
  this.isDropDownListStyle = true;
  this.defaultDropDownHeight = "";
  this.dropDownHeight = "";
  this.dropDownWidth = "";
  this.dropDownRows = 7;
  this.enterKeyPressed = false;
  this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = null;
  this.callBackCoreComplete = false; 
 },
 Initialize: function(){
  this.needToLoadDropDown = this.loadDropDownOnDemand;
  var lb = this.GetListBoxControl();
  this.InitializeListBoxOwnerName();
  this.FilterStrategyInitialize();
  var mainElement = this.GetMainElement();
  var input = this.GetInputElement();    
  var ddbutton = this.GetDropDownButton();
  if(this.isDropDownListStyle && __aspxIE){
   _aspxPreventElementDragAndSelect(mainElement, true, true);
   _aspxPreventElementDragAndSelect(input, true, true);
   if(ddbutton)
    _aspxPreventElementDragAndSelect(ddbutton, true);
  }
  if(this.isToolbarItem){
   if(__aspxIE && __aspxBrowserVersion == 9)
    input.onmousedown = function(evt) { _aspxPreventEvent(evt); };
   else {
    mainElement.unselectable="on";
    input.unselectable="on";
    if(input.offsetParent)
     input.offsetParent.unselectable="on";
    if(ddbutton)
     ddbutton.unselectable="on";
    if(lb){
     var table = lb.GetListTable();
     for(var i = 0; i < table.rows.length; i ++){
      for(var j = 0; j < table.rows[i].cells.length; j ++)
       _aspxSetElementAsUnselectable(table.rows[i].cells[j], true);
     }
    }
   }
  }
  this.RemoveRaisePSValidationFromListBox();
  this.RedirectStandardValidators();
  this.InitListBoxScrollStyle();
  ASPxClientComboBoxBase.prototype.Initialize.call(this);
 },
 FilterStrategyInitialize: function() {
  if(this.incrementalFilteringMode == "Contains")
   this.filterStrategy = new ASPxContainsFilteringStrategy(this);
  else if(this.incrementalFilteringMode == "StartsWith")
   this.filterStrategy = new ASPxStartsWithFilteringStrategy(this);
  else if(this.incrementalFilteringMode == "None")
   this.filterStrategy = new ASPxComboBoxDisableFilteringStrategy(this);
  this.filterStrategy.Initialize();
 },
 InlineInitialize: function () {
  this.lastSuccessValue = this.GetDecodeValue(this.lastSuccessValue);
  this.InsureInputValueCorrect();
  this.InitSpecialKeyboardHandling();
  ASPxClientComboBoxBase.prototype.InlineInitialize.call(this);
 },
 InsureInputValueCorrect: function(){ 
  if(this.initTextCorrectionRequired){
   var lb = this.GetListBoxControl();
   if(lb){
    var initSelectedIndex = lb.GetSelectedIndexInternal();
    if(initSelectedIndex >= 0){
     var initSelectedText = lb.GetItem(initSelectedIndex).text;
     var input = this.GetInputElement();
     var rawInput = this.GetRawInputElement();
     if(rawInput && rawInput.value != initSelectedText){
      rawInput.value = initSelectedText;
      input.value = this.GetDecoratedText(initSelectedText);
     } else if(input.value != initSelectedText)
      input.value = initSelectedText;
    }
   }
  }
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientComboBoxBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var changeEventsMethod = _aspxChangeEventsMethod(enabled);
  var mainElement = this.GetMainElement();
  if(mainElement)
   changeEventsMethod(mainElement, _aspxGetMouseWheelEventName(), aspxCBMouseWheel);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   changeEventsMethod(btnElement, "onmousemove", aspxCBDDButtonMMove);
 },
 GetDropDownInnerControlName: function(suffix){
  return ASPxClientDropDownEditBase.prototype.GetDropDownInnerControlName.call(this, suffix);
 },
 AdjustControlCore: function() {
  ASPxClientEdit.prototype.AdjustControlCore.call(this);
  this.ResetDropDownSizeCache();
 },
 RemoveRaisePSValidationFromListBox: function() {
  var listBox = this.GetListBoxControl();
  if (listBox)
   listBox.RaisePersonalStandardValidation = function() { };
 },
 RedirectStandardValidators: function() {
  var valueInput = this.GetValueInput();
  if(_aspxIsExistsElement(valueInput) && valueInput.Validators) {
   for(var i = 0; i < valueInput.Validators.length; i++)
    valueInput.Validators[i].controltovalidate = valueInput.id;
  }
 },
 GetValueInputToValidate: function(){
  return this.GetValueInput();
 },
 GetValueInput: function(){
  return document.getElementById(this.name + "_" + __aspxCCValueInputSuffix);
 },
 GetListBoxScrollDivElement: function(){
  return this.GetListBoxControl().GetScrollDivElement();
 },
 RollbackValueInputValue: function(){
  var inputElement = this.GetValueInput();
  if(inputElement){
   inputElement.value = this.lastSuccessValue;
  }
 },
 UpdateValueInput: function() {
  var inputElement = this.GetValueInput();
  if(inputElement){
   var value = this.GetValue();
   inputElement.value = value != null ? value : "";
  }
 },
 VisibleCollectionChanged: function(){
  this.CollectionChangedCore();
 },
 CollectionChanged: function(){
  this.CollectionChangedCore();
 },
 CollectionChangedCore: function(byTimer){
  if(this.GetListBoxControl().APILockCount == 0){
   this.UpdateDropDownPositionAndSize();
   if(__aspxIE){ 
    var lb = this.GetListBoxControl();
    var selectedIndex = lb.GetSelectedIndex();
    if(selectedIndex > -1){
     var selectedItemTextCell = lb.GetItemFirstTextCell(selectedIndex);
     var controller = aspxGetStateController();
     controller.DeselectElementBySrcElement(selectedItemTextCell);
     controller.SelectElementBySrcElement(selectedItemTextCell);
    }
   }
  }
 },
 UpdateDropDownPositionAndSize: function(){
  this.InitDropDownSize();
  if(this.droppedDown){
   var pc = this.GetPopupControl();
   var element = this.GetMainElement();
   pc.UpdatePositionAtElement(element);
  }
  if (!this.clientVisible)
   this.ResetControlAdjustment();
 },
 InitListBoxScrollStyle: function(){
  this.PreventScrollSpoilDDShowing();
 },
 GetDropDownHeight: function(){
  return (this.ddHeightCache != __aspxInvalidDimension) ? this.ddHeightCache : this.InitListBoxHeight();
 },
 GetDropDownWidth: function(){
  return (this.ddWidthCache != __aspxInvalidDimension && !this.GetIsControlWidthWasChanged()) ? this.ddWidthCache : this.InitListBoxWidth();
 },
 InitDropDownSize: function(){
  if(!this.enabled || this.GetItemCount() == 0) return; 
  var pc = this.GetPopupControl();
  if(pc && this.IsDisplayed()) {
   var pcwElement = pc.GetWindowElement(-1);
   if(_aspxIsExistsElement(pcwElement)){
    var isPcwDisplayed = _aspxGetElementDisplay(pcwElement);
    if(!isPcwDisplayed)
     pc.SetWindowDisplay(-1, true);
    var listBoxHeight = this.InitListBoxHeight();
    var listBoxWidth = this.InitListBoxWidth();
    if(listBoxHeight != this.ddHeightCache || listBoxWidth != this.ddWidthCache){
     this.ddHeightCache = listBoxHeight;
     this.ddWidthCache = listBoxWidth;
     pc.SetSize(this.ddWidthCache, this.ddHeightCache);
    }
    if(!isPcwDisplayed)
     pc.SetWindowDisplay(-1, false);
   }
  }
 },
 InitMainElementCache: function(){
  this.mainElementWidthCache = this.GetMainElement().clientWidth;
 },
 GetVisibleItemCount: function(lb){  
  var lbTable = lb.GetListTable();
  var count = this.GetItemCount();
  var visibleItemCount = 0;
  for(var i = 0; i < count; i ++){
   if(_aspxGetElementDisplay(lbTable.rows[i]))
    visibleItemCount++;
  }
  return visibleItemCount;
 },
 GetDefaultDropDownHeight: function(listHeight, count){
  if(this.defaultDropDownHeight == ""){
   this.defaultDropDownHeight = ((listHeight / count) * this.dropDownRows) + "px";
  }
  return this.defaultDropDownHeight;
 },
 InitListBoxHeight: function () {
  var lb = this.GetListBoxControl();
  lb.GetMainElement().style.height = "0px";
  var lbHeight = 0;
  if (this.dropDownHeight == "") {
   lbHeight = this.GetListBoxHeightByContent();
  } else {
   lbHeight = this.GetListBoxHeightByServerValue();
  }
  lb.InitializePageSize();
  return lbHeight;
 },
 GetListBoxHeightByContent: function () {  
  var lb = this.GetListBoxControl();
  var lbMainElement = lb.GetMainElement();
  var lbScrollDiv = lb.GetScrollDivElement()
  var height = lb.GetListTableHeight();
  var itemCount = this.GetVisibleItemCount(lb);
  if (itemCount > this.dropDownRows)
   height = this.GetDefaultDropDownHeight(height, itemCount);
  else
   height = itemCount == 0 ? "0px" : height + "px";
  lbScrollDiv.style.height = height;
  height = lbScrollDiv.offsetHeight;
  height += _aspxGetTopBottomBordersAndPaddingsSummaryValue(lbMainElement);
  var lbHeaderDiv = lb.GetHeaderDivElement();
  if (_aspxIsExists(lbHeaderDiv))
   height += lbHeaderDiv.offsetHeight;
  return height;
 },
 GetListBoxHeightByServerValue: function () {
  var lb = this.GetListBoxControl();
  var lbMainElement = lb.GetMainElement();
  var lbScrollDiv = lb.GetScrollDivElement()
  var height = this.dropDownHeight;
  lbMainElement.style.height = "0px";
  lbScrollDiv.style.height = "0px";
  lbMainElement.style.height = height;
  var trueLbOffsetHeight = lbMainElement.offsetHeight;
  var trueLbClientHeight = lbMainElement.clientHeight;
  lbScrollDiv.style.height = lbMainElement.clientHeight + "px";
  var lbHeightCorrection = lbMainElement.offsetHeight - trueLbOffsetHeight;
  lbScrollDiv.style.height = (trueLbClientHeight - lbHeightCorrection) + "px";
  height = lbMainElement.offsetHeight;
  return height;
 },
 InitListBoxWidth: function(){
  this.InitMainElementCache();
  var mainElement = this.GetMainElement();
  var lbScrollDiv = this.GetListBoxScrollDivElement();
  var lb = this.GetListBoxControl();
  var lbMainElement = lb.GetMainElement();
  var lbTable = lb.GetListTable();
  var scrollWidth = 0;
  lbMainElement.style.width = "";
  lbScrollDiv.style.paddingRight = "0px";
  lbScrollDiv.style.width = "100%";
  if(this.dropDownWidth != ""){
   lbMainElement.style.width = this.dropDownWidth;
   var width = lbMainElement.clientWidth;
   var scrollInfo = this.SetLbScrollDivAndCorrectionForScroll(lb, width, false);
   width = scrollInfo.scrollDivWidth;
   scrollWidth = scrollInfo.scrollWidth;
   if(!__aspxIE) {
    var difference = lbTable.offsetWidth - lbScrollDiv.clientWidth;
    if(difference > 0){
     lbMainElement.style.width = (lbMainElement.offsetWidth + difference) + "px";
     lbScrollDiv.style.width = (lbMainElement.clientWidth)  + "px";
    }
   }
  } else {
   var width = lbTable.offsetWidth;
   var scrollInfo = this.SetLbScrollDivAndCorrectionForScroll(lb, width, true);
   width = scrollInfo.scrollDivWidth;
   scrollWidth = scrollInfo.scrollWidth;
   if(__aspxFirefox && lbMainElement.offsetWidth < lbScrollDiv.offsetWidth)
    lbMainElement.style.width = "0%"; 
   var widthDifference = mainElement.offsetWidth - lbMainElement.offsetWidth;
   if(widthDifference > 0){
    lbScrollDiv.style.width = (width + widthDifference) + "px";
    var twoBorderSize = (lbMainElement.offsetWidth - lbMainElement.clientWidth);
    lbMainElement.style.width = (width + widthDifference + twoBorderSize) + "px"; 
   }
  }
  if(lb.IsMultiColumn())
   lb.CorrectMultiColumnHeaderWidth(scrollWidth);
  return lbScrollDiv.offsetWidth;
 },
 SetLbScrollDivAndCorrectionForScroll: function(lb, width, widthByContent){
  var lbScrollDiv = this.GetListBoxScrollDivElement();
  var scrollWidth = lb.GetVerticalScrollBarWidth();
  var browserPutsScrollBarOnContent = __aspxIE && __aspxBrowserVersion < 8;
  var browserCanHaveScroll = lb.GetVerticalOverflow(lbScrollDiv) == "auto" || this.IsScrollSpoilDDShowing();
  if(browserPutsScrollBarOnContent) {
   width -= scrollWidth;
   lbScrollDiv.style.paddingRight = scrollWidth + "px";
  } else if(widthByContent && browserCanHaveScroll)
   width += scrollWidth;
  lbScrollDiv.style.width = width + "px";
  return {scrollDivWidth: width, scrollWidth: scrollWidth};
 },
 SelectIndexSilent: function(lb, index){
  this.lbEventLockCount ++;
  lb.SelectIndexSilentAndMakeVisible(index);
  this.ShowItemImageByIndex(index);
  this.lbEventLockCount --;
 },
 GetDecoratedText: function (text) {
  var lb = this.GetListBoxControl();
  var selectedItem = this.GetSelectedItem();
  var decoratedText = text;
  if(this.displayFormat != null && lb.IsMultiColumn() && selectedItem != null){
   var textColumnCount = lb.GetItemTextCellCount();
   var texts = [textColumnCount];
   for(var i = 0; i < textColumnCount; i++){
    texts[i] = selectedItem.GetColumnTextByIndex(i)
   }
   decoratedText = ASPxFormatter.Format(this.displayFormat, texts);
  } else
   decoratedText = ASPxClientComboBoxBase.prototype.GetDecoratedText.call(this, text);
  return (selectedItem != null && decoratedText === this.nullText) ? "" : decoratedText;
 },
 CanApplyNullTextDecoration: function () {
  if (this.listBox || !this.loadDropDownOnDemand) {
   var value = this.GetRawInputElement().value;
   var isValueNull = this.convertEmptyStringToNull && value === "" ? true : value === null;
   return (this.GetSelectedIndex() == -1 && isValueNull);
  } else
   return (this.GetValue() != null || this.GetText() != "");
 },
 ShowDropDownArea: function(isRaiseEvent){
  if(this.needToLoadDropDown) {
   this.EnsureDropDownLoaded();
   return;
  }
  var lb = this.GetListBoxControl();
  if(!lb || lb.GetItemCount() == 0) 
   return;
  if(!this.filterStrategy.IsShowDropDownAllowed()) {
   this.DropDownButtonPop(true); 
   return;
  }
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
  var rawText = this.GetTextInternal();
  var lbItem = lb.GetSelectedItem();
  var lbText = lbItem != null ? lbItem.text : "";
  if(rawText != lbText && rawText != null && lbText != ""){
   var newSelectedIndex = this.GetAdjustedSelectedIndexByText(lb, rawText);
   lb.SelectIndexSilent(newSelectedIndex, false);
  }
  this.EnsureSelectedItemVisibleOnShow(lb);
  lb.CallbackSpaceInit();
 },
 FireFoxRequiresCacheScrollBar: function(){
  return __aspxFirefox && __aspxBrowserVersion >= 3.6; 
 },
 BrowserRequiresCacheScrollBar: function(){
  return __aspxWebKitFamily || __aspxOpera || this.FireFoxRequiresCacheScrollBar(); 
 },
 HideDropDownArea: function(isRaiseEvent){
  if(this.filterStrategy)
   this.filterStrategy.OnBeforeHideDropDownArea();
  if(this.BrowserRequiresCacheScrollBar())
   this.CachedScrollTop();
  ASPxClientDropDownEditBase.prototype.HideDropDownArea.call(this, isRaiseEvent);
  this.PreventScrollSpoilDDShowing();
 },
 EnsureSelectedItemVisibleOnShow: function(listBox){
  if(this.BrowserRequiresCacheScrollBar()) 
   listBox.RestoreScrollTopFromCache();
  listBox.EnsureSelectedItemVisible();
 },
 CachedScrollTop: function(){
  this.GetListBoxControl().CachedScrollTop();
  if(this.BrowserRequiresCacheScrollBar()){ 
   var scrollDiv = this.GetListBoxScrollDivElement();
   if(scrollDiv != null)
    scrollDiv.scrollTop = 0;
  }
 },
 IsScrollSpoilDDShowing: function (){
  var pc = this.GetPopupControl();
  if(pc)
   return (__aspxNetscapeFamily && pc.enableAnimation); 
 },
 EnableLBDivOverflow: function(){
  var divElement = this.GetListBoxScrollDivElement();
  divElement.style.overflow = "auto";
 },
 DisableLBDivOverflow: function(){
  var divElement = this.GetListBoxScrollDivElement();
  if(divElement)
   divElement.style.overflow = "hidden";
 },
 PreventScrollSpoilDDShowing: function(){
  if(this.IsScrollSpoilDDShowing())
   this.DisableLBDivOverflow();
 },
 IsFilterEnabled: function() {
  return this.incrementalFilteringMode != "None";
 },
 ChangeInputEnabled: function(element, enabled, readOnly){
  ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || (this.isDropDownListStyle && !this.IsFilterEnabled()));
 },
 GetCallbackArguments: function(){
  var args = ASPxClientComboBoxBase.prototype.GetCallbackArguments.call(this);
  args += this.GetCallbackArgumentsInternal();
  return args;
 },
 GetCallbackArgumentsInternal: function(){
  var args = "";
  args = this.filterStrategy.GetCallbackArguments();
  return args;
 },
 ShowLoadingPanel: function() { 
  var lb = this.GetListBoxControl();
  var loadingParentElement = lb.GetScrollDivElement().parentNode;
  if(!this.loadingPanelElement)
   this.CreateLoadingPanelWithAbsolutePosition(loadingParentElement, loadingParentElement);
 },
 ShowLoadingDiv: function () {
  var lb = this.GetListBoxControl();
  var loadingParentElement = lb.GetScrollDivElement().parentNode;
  if(!this.loadingDivElement)
   this.CreateLoadingDiv(loadingParentElement);
 },
 HideLoadingPanelOnCallback: function(){
  return false;
 },
 OnCallback: function(result) {
  if(__aspxWebKitTouchUI) { 
   if(this.needToLoadDropDown)
    this.OnLoadDropDownOnDemandCallback(result);
   window.setTimeout(function() {
    this.OnCallbackCore(result);
    this.DoEndCallback();
   }.aspxBind(this), 300);
  } else
   this.OnCallbackCore(result);
 },
 OnCallbackCore: function(result) {
  if(this.needToLoadDropDown) {
   if(!__aspxWebKitTouchUI)
    this.OnLoadDropDownOnDemandCallback(result);
  } else if(this.filterStrategy.IsCallbackResultNotDiscarded()) {
   this.OnCallbackBeforeListBox();
   this.GetListBoxControl().OnCallback(result);
   this.OnCallbackInternal(result);
   this.OnCallbackFinally(true);
  }
  this.callBackCoreComplete = true;
 },
 OnLoadDropDownOnDemandCallbackFinalized: function() {
  this.DoReInitializeAfterLoadDropDownOnDemand();
  this.HideLoadingPanel();
  this.HideLoadingDiv();
  var isCallbackForShowDropDownArea = !this.onLoadDropDownOnDemandCallbackFinalizedEventHandler;
  if(isCallbackForShowDropDownArea) {
   if(this.filterStrategy.IsShowDropDownAllowed())
    this.ShowDropDown();
  } else
   this.onLoadDropDownOnDemandCallbackFinalizedEventHandler();
  this.FixButtonState();
 },
 OnCallbackFinalized: function() {
  if(this.needToLoadDropDown)
   this.OnLoadDropDownOnDemandCallbackFinalized();
 },
 OnLoadDropDownOnDemandCallback: function(result) {
  var node = this.GetMainElement();
  var tempDiv = node.ownerDocument.createElement('div');
  tempDiv.innerHTML = eval(result);
  var len = tempDiv.childNodes.length;
  for(ind = 0; ind < len; ind++) {
   _aspxInsertElementAfter(tempDiv.childNodes.item(0), node);
  }
 },
 ProcessCallbackError: function(errorObj){
  this.callBackCoreComplete = true;
  ASPxClientDropDownEditBase.prototype.ProcessCallbackError.call(this, errorObj);
 },
 DoEndCallback: function(){ 
  if(!this.callBackCoreComplete && __aspxWebKitTouchUI) return;
  this.filterStrategy.BeforeDoEndCallback();
  ASPxClientDropDownEditBase.prototype.DoEndCallback.call(this); 
  this.filterStrategy.AfterDoEndCallback();
  this.callBackCoreComplete = false; 
 },
 RaiseEndCallback: function(){
  if(this.preventEndCallbackRising)
   this.preventEndCallbackRising = false;
  else
   ASPxClientDropDownEditBase.prototype.RaiseEndCallback.call(this);
 },
 OnCallbackError: function(result, data){
  this.GetListBoxControl().OnCallbackError(result);
  this.OnCallbackFinally(false);
 },
 OnCallbackFinally: function(isSuccessful){
  this.filterStrategy.OnBeforeCallbackFinally();
  this.CollectionChanged();
  this.HideLoadingElements();
  this.isPerformCallback = false;
  this.changeSelectAfterCallback = 0;
  if(isSuccessful)
   this.filterStrategy.OnAfterCallbackFinally();
 },
 OnCallbackBeforeListBox: function(){
  var lb = this.GetListBoxControl();
  this.changeSelectAfterCallback = lb.changeSelectAfterCallback;
 },
 OnCallbackCorrectSelectedIndex: function(){
  var lb = this.GetListBoxControl();
  if(this.changeSelectAfterCallback != 0)
   this.SetTextInternal(lb.GetSelectedItem().text);
 },
 OnCallbackInternal: function(result){
  this.OnCallbackCorrectSelectedIndex();
  if(this.isPerformCallback) {
   var lb = this.GetListBoxControl();
   var resultIsEmpty = lb.GetItemCount() == 0;
   if(resultIsEmpty)
    this.HideDropDownArea(true);
  } 
  this.filterStrategy.OnCallbackInternal(result);
 },
 DoReInitializeAfterLoadDropDownOnDemand: function() {
  this.InitializeListBoxOwnerName();
  this.needToLoadDropDown = false;
 },
 EnsureDropDownLoaded: function(callbackFunction) {
  if(this.needToLoadDropDown) {
   this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = callbackFunction ? function() {
    callbackFunction();
   } : null;
   var args = this.FormatLoadDropDownOnDemandCallbackArguments();
   this.SendLoadDropDownOnDemandCallback(args);
  }
 },
 IsDropDownButtonClick: function(evt) {
  return _aspxGetIsParent(this.GetDropDownButton(), _aspxGetEventSource(evt));
 },
 OnDropDown: function(evt) {
  var returnValue = ASPxClientDropDownEditBase.prototype.OnDropDown.call(this, evt);
  if(this.IsDropDownButtonClick(evt) && this.IsCanToDropDown()) {
   this.OnDropDownButtonClick();
   return returnValue;
  }
  return true;
 },
 OnDropDownButtonClick: function() {
  if(this.filterStrategy != null)
   this.filterStrategy.OnDropDownButtonClick();     
  this.ForceRefocusEditor();
 },
 SendCallback: function(){
  if(!this.pcIsShowingNow)
   this.ShowLoadingElements();
  ASPxClientComboBoxBase.prototype.SendCallback.call(this);
 },
 SelectNeighbour: function (step){
  if((this.isToolBarItem && !this.droppedDown) || this.readOnly) return;
  var lb = this.GetListBoxControl();
  var step = this.filterStrategy.GetStepForClientFiltrationEnabled(lb, step);
  this.SelectNeighbourInternal(lb, step);
 },
 SelectNeighbourInternal: function(lb, step){
  if(this.droppedDown)
   this.lbEventLockCount ++;
  lb.SelectNeighbour(step);
  if(this.droppedDown){
   var selectedItem = lb.GetSelectedItem();
   this.OnSelectionChangedCore(selectedItem.text, selectedItem, true);
   this.lbEventLockCount --;
  } 
 },
 GetFocusSelectAction: function() {
  return this.isToolbarItem ? null : "all";
 },
 OnSpecialKeyDown: function(evt){
  if(this.filterStrategy)
   this.filterStrategy.OnSpecialKeyDown(evt);
  return ASPxClientEdit.prototype.OnSpecialKeyDown.call(this, evt);
 },
 OnArrowUp: function(evt){
  if(!this.isInitialized) return true;
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
  if (!isProcessed && this.filterStrategy.IsFilterMeetRequirementForMinLength())
   this.SelectNeighbour(-1);
  return true;
 },
 OnTextChanged: function(){
  if(!this.IsFocusEventsLocked())
   ASPxClientComboBoxBase.prototype.OnTextChanged.call(this);
 },
 OnTextChangedInternal: function() {
  ASPxClientComboBoxBase.prototype.OnTextChangedInternal.call(this);
  this.filterStrategy.OnTextChanged();
 },
 OnArrowDown: function(evt){
  if(!this.isInitialized) return true;
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
  if (!isProcessed && this.filterStrategy.IsFilterMeetRequirementForMinLength())
   this.SelectNeighbour(1);
  return true;
 },
 OnPageUp: function(){
  if(!this.isInitialized || !this.filterStrategy.IsFilterMeetRequirementForMinLength()) return true;
  return this.OnPageButtonDown(false);
 },
 OnPageDown: function(){
  if(!this.isInitialized || !this.filterStrategy.IsFilterMeetRequirementForMinLength()) return true;
  return this.OnPageButtonDown(true);
 },
 OnPageButtonDown: function(isDown){
  if(!this.isInitialized) return true;
  var lb = this.GetListBoxControl();
  if(lb){
   var direction = isDown ? 1 : -1;
   this.SelectNeighbour(lb.scrollPageSize * direction);
  }
  return true;
 },
 OnHomeKeyDown: function(evt){
  if(!this.isInitialized) return true;
  return this.OnHomeEndKeyDown(evt, true);
 },
 OnEndKeyDown: function(evt){
  if(!this.isInitialized) return true;
  return this.OnHomeEndKeyDown(evt, false);
 },
 OnHomeEndKeyDown: function(evt, isHome){
  if(!this.isInitialized) return true;
  var input = this.GetValueInput();
  if(input.readOnly || evt.ctrlKey){
   var lb = this.GetListBoxControl();
   var count = lb.GetItemCount();
   this.SelectNeighbour(isHome ? -count : count);
   return true;
  }
  return false;
 },
 OnEscape: function() {
  this.filterStrategy.OnEscape();
  ASPxClientComboBoxBase.prototype.OnEscape.call(this);
 },
 OnEnter: function(){
  if(!this.isInitialized) return true;
  if(this.isDropDownListStyle) this.enterKeyPressed = true;
  if(this.filterStrategy.IsCloseByEnterLocked()) return;
  this.enterProcessed = this.droppedDown; 
  if(!this.isEnterLocked) { 
   this.OnApplyChangesAndCloseWithEvents(false);
   this.filterStrategy.OnAfterEnter();
  }
  return this.enterProcessed;
 },
 OnTab: function(evt){
  if(!this.isInitialized) 
   return true;
  this.filterStrategy.OnTab();
 },
 OnApplyChanges: function(){
  if(!this.focused || (this.isDropDownListStyle && !this.IsFilterEnabled())) return;
  this.OnApplyChangesInternal();
 },
 OnApplyChangesAndCloseWithEvents: function (withoutCallback) {
  this.OnApplyChangesInternal(withoutCallback);
  this.HideDropDownArea(true);
 },
 OnApplyChangesInternal: function(withoutCallback){
  var inCallback = this.InCallback();
  var lb = this.GetListBoxControl();
  var text = this.GetInputElement().value;
  var value = this.listBox.GetSelectedItem() ? this.listBox.GetSelectedItem().value : this.GetValue();
  var isChanged = this.lastSuccessText != text || this.lastSuccessValue != value;
  var isRollback = false;
  if(isChanged){
   var rollbackRequired = this.isDropDownListStyle && this.GetAdjustedSelectedIndexByText(lb, text) < 0;
   if(rollbackRequired) {
    var rollbackToItem = lb.GetSelectedItem();
    isRollback = rollbackToItem == null && this.isCallbackMode; 
    if(isRollback) {
     this.RollbackValueInputValue();
     this.RollbackTextInputValue();
    }
    text = rollbackToItem != null ? rollbackToItem.text : this.lastSuccessText;
   } 
   if(!isRollback)
    this.SetText(text);
   this.OnChange();
   this.filterStrategy.OnApplyChanges(withoutCallback); 
  } 
 },
 OnButtonClick: function(number){
  if(number != this.dropDownButtonIndex && this.droppedDown)
   this.HideDropDownArea(true);
  ASPxClientButtonEditBase.prototype.OnButtonClick.call(this, number);
 },
 OnCancelChanges: function(){
  var isCancelProcessed = ASPxClientDropDownEditBase.prototype.OnCancelChanges.call(this);
  this.filterStrategy.OnCancelChanges();
  var lb = this.GetListBoxControl();
  if (_aspxIsExists(lb)) {
   var index = this.GetAdjustedSelectedIndexByText(lb, this.lastSuccessText);
   this.SelectIndexSilent(lb, index);
  }
  return isCancelProcessed;
 },
 ShouldCloseOnMCMouseDown: function () {
  return this.GetInputElement().readOnly;
 },
 OnCloseUp: function(evt){
  var evt = _aspxGetEvent(evt);
  if (__aspxFirefox && evt.type == "mouseup" && _aspxGetEventSource(evt).tagName == "DIV") { 
   var scrollDiv = this.GetListBoxControl().GetScrollDivElement();
   var scrollDivID = scrollDiv ? scrollDiv.id : "";
   if (scrollDivID == _aspxGetEventSource(evt).id) 
    return;
  }
  ASPxClientDropDownEditBase.prototype.OnCloseUp.call(this, evt);
 },
 OnDDButtonMouseMove: function(evt){
  return (this.droppedDown ? _aspxCancelBubble(evt) : true);
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  this.OnApplyChangesInternal();
  ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 IsCanToDropDown: function() {
  if(this.loadDropDownOnDemand) {
   var lb = this.GetListBoxControl();
   var itemCount = lb ? lb.GetItemCount() : 0;
   return (!this.needToLoadDropDown && itemCount > 0);
  }
  return ASPxClientDropDownEditBase.prototype.IsCanToDropDown.call(this);
 },
 OnPopupControlShown: function(){
  if(!this.isInitialized) return;
  if(__aspxOpera) 
   this.GetListBoxControl().RestoreScrollTopFromCache();
  if(this.IsScrollSpoilDDShowing())
   _aspxSetTimeout("aspxCBMozillaOverflowOn(\"" + this.name + "\")", 100);
  if(this.lockListBoxClick)
   delete this.lockListBoxClick;
  if(this.InCallback()) 
   this.ShowLoadingDivAndPanel();
  ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
 },
 OnLBSelectedIndexChanged: function(){
  if(!this.lockListBoxClick) {
   this.OnSelectChanged();
   if(this.IsNavigationOnKeyPress()){
    if(!this.droppedDown) {
     _aspxSetSelection(this.GetInputElement());
    }
   } else
    this.ForceRefocusEditor();
  }
 },
 IsNavigationOnKeyPress: function() {
  var lb = this.GetListBoxControl();
  return lb.IsScrollOnKBNavigationLocked();
 },
 OnListBoxItemMouseUp: function(evt){
  if(!this.lockListBoxClick && !this.InCallback()){
   this.OnApplyChangesInternal();
   this.OnCloseUp(evt);
  }
 },
 OnMouseWheel: function(evt){
  if (this.allowMouseWheel && !this.droppedDown && this.filterStrategy.IsFilterMeetRequirementForMinLength()) {
   var wheelDelta = _aspxGetWheelDelta(evt);
   if(wheelDelta > 0)
    this.SelectNeighbour(-1);
   else  if(wheelDelta < 0)
    this.SelectNeighbour(1);
   return _aspxPreventEvent(evt);
  }
 },
 OnOpenAnotherDropDown: function(){
  this.OnApplyChangesAndCloseWithEvents();
 },
 ParseValue: function() {
  var newText = this.GetInputElement().value;
  var oldText = this.GetText();
  var oldValue = this.GetValue();
  var isNeedToParseValue = oldText != newText;
  if (isNeedToParseValue) {
   if(this.CanTextBeAccepted(newText, oldText)){
    this.SetText(newText);
    this.OnChange();
   } else
    this.SetTextInternal(oldText);
  }
 },
 CanTextBeAccepted: function(newText, oldText){
  var notAnyTextCanBeAccepted = this.isDropDownListStyle;
  if(notAnyTextCanBeAccepted){
   var lb = this.GetListBoxControl();
   var newTextPresentInItemCollection = this.GetAdjustedSelectedIndexByText(lb, newText) != -1;
   return newTextPresentInItemCollection;
  }
  var wasTextErased = !newText && oldText;
  if((!wasTextErased) && this.nullText && this.CanApplyNullTextDecoration()) {
    return false;
  }
  return true;
 },
 MakeItemVisible: function(index){
  var lb = this.GetListBoxControl();
  lb.MakeItemVisible(index);
 },
 PerformCallback: function(arg) {
  this.isPerformCallback = true;
  this.filterStrategy.PerformCallback();
  if(this.needToLoadDropDown) {
   var formatCallbackArg = function(prefix, arg) {  
    arg = arg.toString();
    return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
   };
   if(arg === undefined || arg == null)
    arg = "";
   var performArgs = formatCallbackArg("LECC", arg);
   this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = function() {
    var selectedItem = this.listBox.GetSelectedItem();
    if(selectedItem != null)
     this.SetTextInternal(selectedItem.text);
    var lb = this.GetListBoxControl();
    if(lb)
     lb.SetCustomCallbackArg(performArgs);
   };
   var loadItemsRangeArgs = formatCallbackArg("LBCRI", "0:-2");
   var args = this.FormatLoadDropDownOnDemandCallbackArguments(performArgs + loadItemsRangeArgs);
   this.SendLoadDropDownOnDemandCallback(args);
  } else {
   this.ClearItemsInternal();
   this.GetListBoxControl().PerformCallback(arg);
  }
 },
 ClearItemsInternal: function(){
  ASPxClientComboBoxBase.prototype.ClearItemsInternal.call(this);
  var lbScrollDiv = this.GetListBoxScrollDivElement();
  if(lbScrollDiv)
   lbScrollDiv.scrollTop = "0px";
 },
 SendLoadDropDownOnDemandCallback: function(args) {
  this.ShowInputLoadingPanel();
  this.SendSpecialCallback(args);
 },
 ShowInputLoadingPanel: function() {
  var inputElement = this.GetInputElement();
  var parentElement = inputElement.parentNode;
  this.CreateLoadingDiv(parentElement, inputElement);
  this.CreateLoadingPanelWithAbsolutePosition(parentElement, inputElement);
 },
 FormatLoadDropDownOnDemandCallbackArguments: function(arguments) {
  var internalArgs = _aspxIsExists(arguments) ? arguments.toString() : "";
  var resultArgs = __aspxLoadDropDownOnDemandCallbackPrefix + "|0;;";
  return resultArgs + internalArgs;
 },
 CorrectCaretPositionInChrome: function(){
  if(__aspxChrome) _aspxSetCaretPosition(this.GetInputElement(), 0);
 },
 ForceRefocusEditor: function(){
  this.CorrectCaretPositionInChrome();
  ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
 },
 OnFocus: function () {
  if(this.needToLoadDropDown) {
   var args = this.FormatLoadDropDownOnDemandCallbackArguments();
   this.SendLoadDropDownOnDemandCallback(args);
  } else
   this.FixButtonState();
  ASPxClientDropDownEditBase.prototype.OnFocus.call(this);
 },
 FixButtonState: function() {
  var lb = this.GetListBoxControl();
  if(lb && this.ddButtonPushed) {
   this.DropDownButtonPop(true);
  }
 }
});
ASPxClientComboBox.Cast = ASPxClientControl.Cast;
ASPxComboBoxDisableFilteringStrategy = _aspxCreateClass(null, {
 constructor: function(comboBox) {
  this.comboBox = comboBox;
  this.isDropDownListStyle = this.comboBox.isDropDownListStyle;
  this.isApplyAndCloseAfterFiltration = false;
 },
 Initialize: function() {},
 AfterDoEndCallback: function() {},
 BeforeDoEndCallback: function() {},
 IsCallbackResultNotDiscarded: function() { return true; },
 IsCloseByEnterLocked: function() { return false; },
 OnAfterCallbackFinally: function() {
  if(this.isApplyAndCloseAfterFiltration){
   this.comboBox.OnApplyChangesAndCloseWithEvents();
   this.isApplyAndCloseAfterFiltration = false;
  }
 },
 OnAfterEnter: function() {}, 
 OnApplyChanges: function() {},
 OnBeforeCallbackFinally: function() {},
 OnBeforeHideDropDownArea: function() {},
 OnCallbackInternal: function(result) {},
 OnCancelChanges: function () {
  this.OnFilterRollback();
 },
 OnFilterRollback: function() {},
 OnDropDownButtonClick: function() {},
 OnEscape: function() {},
 OnFilteringKeyUp: function (evt) { },
 OnFilterRollback: function (withoutCallback) { },
 SetFilter: function (value) {},
 Filtering: function() {},
 OnSelectionChanged: function() {},
 OnSpecialKeyDown: function(evt) {},
 OnTab: function() {
  if(this.comboBox.InCallback())
   this.isApplyAndCloseAfterFiltration = true;
  else
   this.comboBox.OnApplyChangesAndCloseWithEvents();
 },
 OnTextChanged: function() {},
 PerformCallback: function() {},
 GetCallbackArguments: function() { return ""; },
 GetInputElement: function() {
  return this.comboBox.GetInputElement();
 },
 GetListBoxControl: function() {
  return this.comboBox.GetListBoxControl();
 },
 GetCurrentSelectedItemCallbackArguments: function () {
  return ASPxFilteringUtils.FormatCallbackArg(__aspxtCurrentSelectedItemCallbackPrefix, "");
 },
 GetStepForClientFiltrationEnabled: function(lb, step) {
  return step;
 },
 IsFilterMeetRequirementForMinLength: function() {
  return true;   
 },
 IsShowDropDownAllowed: function() {
  return this.IsFilterMeetRequirementForMinLength();
 }
});
ASPxComboBoxIncrementalFilteringStrategy = _aspxCreateClass(ASPxComboBoxDisableFilteringStrategy, {
 constructor: function(comboBox) {
  this.constructor.prototype.constructor.call(this, comboBox);
  this.currentCallbackIsFiltration = false;
  this.refiltrationRequired = false;
  this.isEnterLocked = false;
  this.isLastFilteredKeyWasTab = false; 
  this.filter = "";
  this.filterInitialized = false;
  this.filterTimerId = -1;
  this.filterTimer = comboBox.filterTimer;
  this.hasInputBeenChanged = false;
 },
 Initialize: function() {
   var input = this.GetInputElement();
   _aspxAttachEventToElement(input, "keyup", aspxCBKeyUp);
 },
 ClearFilter: function() {
  this.filter = "";
  this.filterInitialized = false;
 },
 ClearFilterApplied: function() {
  this.filterInitialized = false;
 },
 FilterApplied: function() {
  return this.filterInitialized;
 },
 SetFilter: function(value){
  this.filter = value;
  this.filterInitialized = true;
 },
 FilterCompare: function(value){
  if(!this.filterInitialized && this.hasInputBeenChanged)
   return false;
  return this.filter == value;
 },
 FilterCompareLower: function(value){
  if(!this.filterInitialized)
   return false;
  return _aspxPrepareStringForFilter(this.filter) == value;
 },
 OnCallbackInternal: function(result){
  if(!this.currentCallbackIsFiltration)
   return;
  var lb = this.GetListBoxControl();
  if(lb.GetItemCount() == 0)
   this.comboBox.HideDropDownArea(true);
  else 
   this.OnFilterCallbackWithResult(lb);  
  this.isEnterLocked = false;
 },
 OnBeforeCallbackFinally: function() {
  this.currentCallbackIsFiltration = false;
 },
 OnEndFiltering: function(visibleCollectionChanged) {
  if(visibleCollectionChanged) 
   this.comboBox.VisibleCollectionChanged();
 },
 OnFilteringKeyUp: function(evt){
  if(this.comboBox.InCallback() || !this.comboBox.GetEnabled()) return;
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)){
   this.FilterStopTimer();
   var input = this.GetInputElement();
   var newFilter = _aspxPrepareStringForFilter(input.value);
   if(evt.keyCode == ASPxKey.Backspace && this.FilterCompareLower(newFilter))
    this.FilteringBackspace();
   else
    this.FilterStartTimer();
  }
 },
 OnFilterCallbackHighlightAndSelect: function(lb){
  var firstItemText = lb.GetItem(0).text;
  var isTextClearing = !this.isDropDownListStyle && this.FilterCompare("") && !this.FilterCompare(firstItemText);
  if(!isTextClearing){
   var isFilterRollBack = this.CheckForFilterRollback(lb, firstItemText);
   var isNonFilterChangingCallback = (lb.GetSelectedItem() == null);
   if(isFilterRollBack || isNonFilterChangingCallback) {
    if(this.isLastFilteredKeyWasTab){
     this.isLastFilteredKeyWasTab = false;
     this.comboBox.SelectIndex(0);
     this.comboBox.OnChange(); 
    } else 
     this.HighlightTextAfterCallback(firstItemText);
   }
  }
 },
 OnFilterCallbackWithResult: function(lb) {
  this.OnFilterCallbackHighlightAndSelect(lb);
  var isNeedToKeepDropDownVisible = !this.comboBox.isPerformCallback && !this.isLastFilteredKeyWasTab;
  if(isNeedToKeepDropDownVisible)
   this.EnsureShowDropDownArea();
  this.OnEndFiltering();
 },
 OnSpecialKeyDown: function(evt) {
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)) {
   this.FilterStopTimer();
   this.hasInputBeenChanged = true;
  }
 },
 OnFilterRollback: function (withoutCallback) {
  if (this.comboBox.InCallback() && this.currentCallbackIsFiltration)
   return;
  if (this.comboBox.isCallbackMode && this.FilterApplied()) {
   if (!withoutCallback) {
    this.isApplyAndCloseAfterFiltration = true;
    if (this.comboBox.GetText() != "" && this.isDropDownListStyle) {
     this.comboBox.GetListBoxControl().ClearItems();
     this.comboBox.SendSpecialCallback(this.GetCurrentSelectedItemCallbackArguments());
    } else
     this.Filtering();
   }
   this.SetFilter(this.comboBox.GetText());
   this.ClearFilterApplied();
  }
 },
 AfterDoEndCallback: function() {
  if(this.refiltrationRequired){
   this.refiltrationRequired = false;
   _aspxSetTimeout("aspxCBFilterByTimer('" + this.comboBox.name + "')", 0);
  }
 },
 BeforeDoEndCallback: function() {
  if(this.refiltrationRequired)
   this.comboBox.preventEndCallbackRising = true;
 },
 GetCallbackArguments: function() { 
  var args = "";
  if(!this.FilterCompare(""))
   args = this.GetCallbackArgumentFilter(this.filter);
  return args;
 }, 
 GetCallbackArgumentFilter: function(value){
  var callbackPrefix = this.isDropDownListStyle ? __aspxCorrectFilterCallbackPrefix : __aspxLoadFilteredItemsCallbackPrefix;
  return ASPxFilteringUtils.FormatCallbackArg(callbackPrefix, value);
 },
 PerformCallback: function() {
   this.ClearFilter();
 },
 SendFilteringCallback: function(){
  this.currentCallbackIsFiltration = true;
  this.comboBox.SendCallback();
 },
 IsCallbackResultNotDiscarded: function(){
  var result = !this.FilterChanged() || !this.currentCallbackIsFiltration;
  if(!result)
    this.refiltrationRequired = true;
  return result;
 },
 IsFilterTimerActive: function() {
  return (this.filterTimerId != -1);
 },
 FilterStopTimer: function() {
  this.filterTimerId = _aspxClearTimer(this.filterTimerId);
 },
 FilterStartTimer: function(){
  this.isEnterLocked = true;
  this.filterTimerId = _aspxSetTimeout("aspxCBFilterByTimer('" + this.comboBox.name + "')", this.filterTimer);
 },
 CheckForFilterRollback: function(lb, firstItemText){
  var isHasCorrection = false;
  var filter = _aspxPrepareStringForFilter(this.filter);
  firstItemText = _aspxPrepareStringForFilter(firstItemText);
  while(!this.IsSatisfy(firstItemText, filter)){
   filter = filter.slice(0, -1);
   isHasCorrection = true;
  }
  if(isHasCorrection){
   this.SetFilter(this.filter.substring(0, filter.length));
   this.GetInputElement().value = this.filter;
  } 
  return isHasCorrection;
 },
 EnsureShowDropDownArea: function(){
  if(!this.comboBox.droppedDown && !this.isApplyAndCloseAfterFiltration)
   this.comboBox.ShowDropDownArea(true);
 },
 FilterChanged: function(){
  return !this.FilterCompareLower(_aspxPrepareStringForFilter(this.GetInputElement().value));
 },
 FilteringStop: function(){
  this.isEnterLocked = false;
  if(!this.comboBox.isCallbackMode)
   this.FilteringStopClient();
 },
 FilteringStopClient: function(){
  var lb = this.GetListBoxControl();
  var listTable = lb.GetListTable();
  var count = lb.GetItemCount();
  for(var i = 0; i < count; i ++)
   _aspxSetElementDisplay(listTable.rows[i], true);
  this.comboBox.VisibleCollectionChanged();
  this.ClearFilter();
 },
 FilteringBackspace: function(){
  var input = this.GetInputElement();
  ASPxStartWithFilteringUtils.RollbackOneSuggestedChar(input);
  this.FilterStartTimer();
 },
 CheckFilterLength: function() {
  if(!this.IsFilterMeetRequirementForMinLength()) {
   this.comboBox.HideDropDownArea(true);
   var lb = this.GetListBoxControl();
   this.isApplyAndCloseAfterFiltration = false;
   lb.SelectIndexSilent(-1, false); 
   return true;
  }
  return false;
 },
 Filtering: function(){
  this.FilterStopTimer();
  var input = this.comboBox.GetRawInputElement() || this.comboBox.GetInputElement();
  if(!input) return;
  var newFilter = input.value;
  if(!this.FilterCompare(newFilter)){
   this.SetFilter(newFilter);
   if(this.CheckFilterLength())
    return;
   this.EnsureShowDropDownArea();
   if(this.comboBox.isCallbackMode)
    this.FilteringOnServer();
   else {
    this.FilteringOnClient(input); 
    this.isApplyAndCloseAfterFiltration = false;
   }
  } else {
   this.isEnterLocked = false;
   this.isApplyAndCloseAfterFiltration = false;
  }
 },
 FilteringOnServer: function(){
  if(!this.comboBox.InCallback()){
   var listBox = this.GetListBoxControl();
   listBox.ClearItems(); 
   listBox.serverIndexOfFirstItem = 0;
   listBox.SetScrollSpacerVisibility(true, false);
   listBox.SetScrollSpacerVisibility(false, false);
   this.SendFilteringCallback();
  }
 },
 FilteringOnClient: function (input) {
  var filter = _aspxPrepareStringForFilter(this.filter);
  var lb = this.GetListBoxControl();
  var listTable = lb.GetListTable();
  var count = lb.GetItemCount();
  var text = "";
  var isSatisfy = false;
  var firstSatisfyItemIndex = -1;
  if(this.isDropDownListStyle){
   var coincide = new Array(count);
   var maxCoincide = 0;
   for(var i = count - 1; i >= 0; i--){
    coincide[i] = this.GetCoincideCharCount(_aspxPrepareStringForFilter(lb.GetItem(i).text), filter);
    if(coincide[i] > maxCoincide)
     maxCoincide = coincide[i];
   }
   filter = this.filter.substr(0, maxCoincide);
   input.value = filter;
  }
  for(var i = 0; i < count; i ++){
   text = lb.GetItem(i).text; 
   if(this.isDropDownListStyle) isSatisfy = coincide[i] == maxCoincide;
   else isSatisfy = this.IsSatisfy(text, filter);
   _aspxSetElementDisplay(listTable.rows[i], isSatisfy);
   if(firstSatisfyItemIndex == -1 && isSatisfy) {
    var isTextClearing = !this.isDropDownListStyle && this.FilterCompare("") && this.filter != text;
    this.OnFirstSatisfiedItemFound(i, text, isTextClearing);
    firstSatisfyItemIndex = i;
   }
  }
  if(this.isDropDownListStyle)
   this.SetFilter(filter);
  var visibleCollectionChanged = firstSatisfyItemIndex != -1;
  if(visibleCollectionChanged)
   lb.CopyCellWidths(0, firstSatisfyItemIndex);  
  else 
   this.comboBox.HideDropDownArea(true);
  this.isEnterLocked = false;
  this.OnEndFiltering(visibleCollectionChanged);
 },
 GetFirstVisibleItem: function(lb, listTable) {
  var itemCount = lb.GetItemCount();
  for(var i = 0; i < itemCount; i++)
   if(_aspxGetElementDisplay(listTable.rows[i]))
    return i;
  return -1;
 },
 GetVisibleItemsCount: function() {
  var visibleItemCount = 0;  
  var lb = this.GetListBoxControl();
  if (_aspxIsExists(lb)) {
   var listTable = lb.GetListTable();
   var itemCount = lb.GetItemCount();
   for(var i = 0; i < itemCount; i++)
    if(_aspxGetElementDisplay(listTable.rows[i]))
     visibleItemCount++;
  }
  return visibleItemCount;   
 },
 IsSelectedElementVisible: function(listTable, selectedIndex) {
  return _aspxGetElementDisplay(listTable.rows[selectedIndex]);
 },
 GetStepForClientFiltrationEnabled: function(lb, step) {
  if(this.comboBox.isCallbackMode) return step;
  var listTable = lb.GetListTable();
  var startIndex = this.comboBox.GetSelectedIndex();
  var firstVisibleElementIndex = this.GetFirstVisibleItem(lb, listTable);
  if(startIndex > -1) {
   if(!this.IsSelectedElementVisible(listTable, startIndex))
    return firstVisibleElementIndex - startIndex;
  } else return firstVisibleElementIndex + 1;
  var stepDirection = step > 0 ? 1 : -1;
  var count = lb.GetItemCount();
  var needVisibleItemCount = Math.abs(step);
  var outermostVisibleIndex = startIndex;
  for(var index = startIndex + stepDirection; needVisibleItemCount > 0; index += stepDirection){
   if(index < 0 || count <= index) break;
   if(_aspxGetElementDisplay(listTable.rows[index])) {
    outermostVisibleIndex = index;
    needVisibleItemCount--;
   }
  }
  step = outermostVisibleIndex - this.comboBox.GetSelectedIndex();
  return step;
 },
 GetCoincideCharCount: function(text, filter) {
  while(filter != "" && !this.IsSatisfy(text, filter)) {
   filter = filter.slice(0, -1);
  }
  return filter.length;
 },
 OnSelectionChanged: function() {
 },
 IsFilterMeetRequirementForMinLength: function() {
  var inputElement = this.GetInputElement();
  var isFilterExists = inputElement && (inputElement.value || inputElement.value == "");
  return isFilterExists ? inputElement.value.length >= this.comboBox.filterMinLength : true;
 },
 IsSatisfy: function(text, filter) {},
 OnFirstSatisfiedItemFound: function(index, text, isTextClearing) {},   
 HighlightTextAfterCallback: function() {}
});
ASPxContainsFilteringStrategy = _aspxCreateClass(ASPxComboBoxIncrementalFilteringStrategy, {
 constructor: function(comboBox) {
  this.constructor.prototype.constructor.call(this, comboBox);
 },
 IsSatisfy: function(text, filter) {
  return _aspxPrepareStringForFilter(text).indexOf(filter) != -1;
 },
 IsCloseByEnterLocked: function() {
  if(this.isDropDownListStyle) {
   if(this.GetVisibleItemsCount() == 1) return false;
   var selectedItem = this.comboBox.GetSelectedItem();
   if(selectedItem)
    if(this.GetInputElement().value == selectedItem.text)
     return false;
   return true;
  }
  return false;
 },
 FilteringOnClient: function(input) {
  this.UnselectContainsTextInItems();
  ASPxComboBoxIncrementalFilteringStrategy.prototype.FilteringOnClient.call(this, input);
 },
 OnApplyChanges: function (withoutCallback) {
  this.OnFilterRollback(withoutCallback);
 },
 OnBeforeCallbackFinally: function() {
  ASPxComboBoxIncrementalFilteringStrategy.prototype.OnBeforeCallbackFinally.call(this);   
  this.ReselectContainsTextInItems();
  this.SetDefautSelection();
 },
 OnDropDownButtonClick: function() {
  if(this.GetVisibleItemsCount() == 0 && this.isDropDownListStyle) 
   this.comboBox.OnCancelChanges();
 },
 OnTextChanged: function() {
  if(!this.comboBox.IsFocusEventsLocked())
   if(!this.comboBox.ChangedByEnterKeyPress())
    this.OnFilterRollback();
 },
 OnEndFiltering: function(visibleCollectionChanged) {
  this.SelectContainsTextInItems();
  this.SetDefautSelection();
  ASPxComboBoxIncrementalFilteringStrategy.prototype.OnEndFiltering.call(this, visibleCollectionChanged);  
 },
 OnBeforeHideDropDownArea: function(){
  if(!this.comboBox.isCallbackMode)
   this.FilteringStopClient();
 },
 FilteringStopClient: function(){
  ASPxComboBoxIncrementalFilteringStrategy.prototype.FilteringStopClient.call(this);
  this.UnselectContainsTextInItems();
 },
 OnCallbackInternal: function() {
  if(!this.comboBox.isPerformCallback) 
   this.ReselectContainsTextInItems();
  ASPxComboBoxIncrementalFilteringStrategy.prototype.OnCallbackInternal.call(this); 
 },
 OnFirstSatisfiedItemFound: function() {
 },
 SetDefautSelection: function() {
  var visibleItemsCount = this.GetVisibleItemsCount();
  if(this.isDropDownListStyle && visibleItemsCount == 1) {
   var lb = this.GetListBoxControl();
   var listTable = lb.GetListTable();
   this.comboBox.SelectIndexSilent(lb, this.GetFirstVisibleItem(lb,listTable));
  }
 },
 UnselectContainsTextInItems: function() {
  this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.UnselectContainsTextInElement, true);
 },
 ReselectContainsTextInItems: function() {
  if(this.filter != "")
   this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.ReselectContainsTextInElement, false);
 },
 SelectContainsTextInItems: function() {
  if(this.filter != "")
   this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.SelectContainsTextInElement, false);
 },
 ApplySelectionFunctionToItems: function(selectionFunction, applyToAllColumns) {
  var lb = this.GetListBoxControl();
  var count = lb.GetItemCount();
  for(var i = 0; i < count; i ++) {
   var item = lb.GetItemRow(i);
   if(applyToAllColumns || (!applyToAllColumns && _aspxGetElementDisplay(item))) 
    this.ApplySelectionFunctionToItem(item, selectionFunction, applyToAllColumns);     
  }
 },
 GetFirstTextCellIndex: function () {
  return this.GetListBoxControl().GetItemFirstTextCellIndex();
 },
 ApplySelectionFunctionToItem: function(item, selectionFunction, applyToAllColumns) {
  var itemValues = this.GetItemValuesByItem(item);
  var itemSelection = ASPxContainsFilteringUtils.GetColumnSelectionsForItem(itemValues, this.GetListBoxControl().textFormatString, this.filter);
  var firstTextCellIndex = this.GetFirstTextCellIndex();
  if(applyToAllColumns) {
   for(var i = 0; i < item.cells.length; i++)
    selectionFunction(item.cells[i], itemSelection[i]);
  } else {
   for(var i = 0; i < itemSelection.length; i++)
    selectionFunction(item.cells[itemSelection[i].index + firstTextCellIndex], itemSelection[i]);
  }
 },
 GetItemValuesByItem: function(item) {
  var result = [];
  for (var i = this.GetFirstTextCellIndex(); i < item.cells.length; i++)
   result.push(_aspxGetInnerText(item.cells[i]));
  return result;
 }
});
ASPxFilteringUtils = {
 EventKeyCodeChangesTheInput: function(evt){
  if(_aspxIsPasteShortcut(evt))
   return true;
  else if(evt.ctrlKey && !evt.altKey)
   return false;
  if(__aspxAndroidMobilePlatform || __aspxMacOSMobilePlatform) return true; 
  var keyCode = _aspxGetKeyCode(evt);
  var isSystemKey = ASPxKey.Windows <= keyCode && keyCode <= ASPxKey.ContextMenu;
  var isFKey = ASPxKey.F1 <= keyCode && keyCode <= 127; 
  return ASPxKey.Delete <= keyCode && !isSystemKey && !isFKey || keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Space;
 },
 FormatCallbackArg: function(prefix, arg) {
  return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
 }
};
ASPxFormatStringHelper = {
 PlaceHolderTemplateStruct: function(startIndex, length, index, placeHolderString){
  this.startIndex = startIndex;
  this.realStartIndex = 0;
  this.length = length;
  this.realLength = 0;
  this.index = index;
  this.placeHolderString = placeHolderString;
 },
 GetPlaceHolderTemplates: function(formatString){
  formatString = this.CollapseDoubleBrackets(formatString);
  var templates = this.CreatePlaceHolderTemplates(formatString);
  return templates;
 },
 CreatePlaceHolderTemplates: function(formatString){
  var templates = [];
  var templateStrings = formatString.match(/{[^}]+}/g);
  if(templateStrings != null){
   var pos = 0;
   for(var i = 0; i < templateStrings.length; i++){
    var tempString = templateStrings[i];
    var startIndex = formatString.indexOf(tempString, pos);
    var length = tempString.length;
    var indexString = tempString.slice(1).match(/^[0-9]+/);
    var index = parseInt(indexString);
    templates.push(new this.PlaceHolderTemplateStruct(startIndex, length, index, tempString));
    pos = startIndex + length;
   }
  }
  return templates;
 },
 CollapseDoubleBrackets: function(formatString){
  formatString = this.CollapseOpenDoubleBrackets(formatString);
  formatString = this.CollapseCloseDoubleBrackets(formatString);
  return formatString;
 },
 CollapseOpenDoubleBrackets: function(formatString){
  return formatString.replace(/{{/g, "_");
 },
 CollapseCloseDoubleBrackets: function(formatString){
  while(true){
   var index = formatString.lastIndexOf("}}");
   if(index == -1) 
    break;
   else
    formatString = formatString.substr(0, index) + "_" + formatString.substr(index + 2);
  }
  return formatString;
 }
};
ASPxStartWithFilteringUtils = {
 HighlightSuggestedText: function(input, suggestedText){
  var currentTextLenght = input.value.length;
  var suggestedTextLenght = suggestedText.length;
  input.value = suggestedText;
  if(currentTextLenght < suggestedTextLenght)
   _aspxSetInputSelection(input, currentTextLenght, suggestedTextLenght);
 },
 RollbackOneSuggestedChar: function(input){
  var currentText = input.value;
  var cutText = currentText.slice(0, -1);
  if(cutText != currentText)
   input.value = cutText;
 }
};
ASPxContainsFilteringUtils = {
 ColumnSelectionStruct: function(index, startIndex, length){
  this.index = index;
  this.length = length;
  this.startIndex = startIndex;
 },
 IsFilterCrossPlaseHolder: function(filterStartIndex, filterEndIndex, template) {
  var left = Math.max(filterStartIndex, template.realStartIndex);
  var right = Math.min(filterEndIndex,  template.realStartIndex + template.realLength);
  return left < right;
 },
 GetColumnSelectionsForItem: function(itemValues, formatString, filterString) {
  if(formatString == "") 
   return this.GetSelectionForSingleColumnItem(itemValues, filterString); 
  var result = [];
  var formatedString = ASPxFormatter.Format(formatString, itemValues);
  var filterStartIndex = _aspxPrepareStringForFilter(formatedString).indexOf(_aspxPrepareStringForFilter(filterString));
  if(filterStartIndex == -1) return result;
  var filterEndIndex = filterStartIndex + filterString.length;
  var templates = ASPxFormatStringHelper.GetPlaceHolderTemplates(formatString);
  this.SupplyTemplatesWithRealValues(itemValues, templates);
  for(var i = 0; i < templates.length ; i++) {
   if(this.IsFilterCrossPlaseHolder(filterStartIndex, filterEndIndex, templates[i])) 
    result.push(this.GetColumnSelectionsForItemValue(templates[i], filterStartIndex, filterEndIndex));
  }
  return result;
 },
 GetColumnSelectionsForItemValue: function(template, filterStartIndex, filterEndIndex) {
  var selectedTextStartIndex = filterStartIndex < template.realStartIndex ? 0 :
   filterStartIndex - template.realStartIndex;
  var selectedTextEndIndex = filterEndIndex >  template.realStartIndex + template.realLength ? template.realLength :
   filterEndIndex - template.realStartIndex;
  var selectedTextLength = selectedTextEndIndex - selectedTextStartIndex;
   return new this.ColumnSelectionStruct(template.index, selectedTextStartIndex, selectedTextLength);
 },
 GetSelectionForSingleColumnItem: function(itemValues, filterString) {
  var selectedTextStartIndex = _aspxPrepareStringForFilter(itemValues[0]).indexOf(_aspxPrepareStringForFilter(filterString));
  var selectedTextLength = filterString.length;
  return [new this.ColumnSelectionStruct(0, selectedTextStartIndex, selectedTextLength)];
 },
 ResetFormatStringIndex: function(formatString, index) {
  if(index != 0)
   return formatString.replace(index.toString(), "0");
  return formatString;
 },
 SupplyTemplatesWithRealValues: function(itemValues, templates) {
  var shift = 0;
  for(var i = 0; i < templates.length; i++) {
   var formatString = this.ResetFormatStringIndex(templates[i].placeHolderString, templates[i].index);
   var currentItemValue = itemValues[templates[i].index];
   templates[i].realLength = ASPxFormatter.Format(formatString, currentItemValue).length;
   templates[i].realStartIndex  += templates[i].startIndex + shift; 
   shift += templates[i].realLength - templates[i].placeHolderString.length; 
  }
 },
 PrepareElementText: function(itemText) {
  return itemText ? itemText.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
 },
 UnselectContainsTextInElement: function(element, selection) {
  var currentText =  _aspxGetAttribute(element, "DXText");
  if (_aspxIsExists(currentText)) {
   currentText = ASPxContainsFilteringUtils.PrepareElementText(currentText);
   _aspxSetInnerHtml(element, currentText === "" ? "&nbsp;" : currentText);
  }
 },
 ReselectContainsTextInElement: function(element, selection) {
  var currentText = _aspxGetInnerText(element);
  if(currentText.indexOf("</em>") != -1)
   ASPxContainsFilteringUtils.UnselectContainsTextInElement(element, selection);
  return ASPxContainsFilteringUtils.SelectContainsTextInElement(element, selection);
 },
 SelectContainsTextInElement: function(element, selection) {
  if(selection.startIndex == -1) return;
  var currentText =  _aspxGetAttribute(element, "DXText");
  if (!_aspxIsExists(currentText)) _aspxSetAttribute(element, "DXText", _aspxGetInnerText(element));
  var oldInnerText = _aspxGetInnerText(element);
  var newInnerText = ASPxContainsFilteringUtils.PrepareElementText(oldInnerText.substr(0, selection.startIndex)) + "<em>" + 
         oldInnerText.substr(selection.startIndex, selection.length) + "</em>" + 
         ASPxContainsFilteringUtils.PrepareElementText(oldInnerText.substr(selection.startIndex + selection.length));
  _aspxSetInnerHtml(element, newInnerText);
 }
};
ASPxStartsWithFilteringStrategy = _aspxCreateClass(ASPxComboBoxIncrementalFilteringStrategy, {
 constructor: function(comboBox) {
  this.constructor.prototype.constructor.call(this, comboBox);
 },
 IsSatisfy: function(text, filter) {
  return _aspxPrepareStringForFilter(text).indexOf(filter) == 0;
 },
 FilteringHighlightCompletedText: function(filterItemText){
  var input = this.GetInputElement();
  ASPxStartWithFilteringUtils.HighlightSuggestedText(input, filterItemText);
 },
 HighlightTextAfterCallback: function(firstItemText) {
  var lb = this.GetListBoxControl();
  this.FilteringHighlightCompletedText(firstItemText);
  if(!this.comboBox.isPerformCallback )
   this.comboBox.SelectIndexSilent(lb, 0);
 },
 OnAfterEnter: function() {
  this.ClearInputSelection();
 },
 OnBeforeHideDropDownArea: function() {
  this.FilteringStop();
 },
 OnFirstSatisfiedItemFound: function(index, text, isTextClearing) {
  var lb = this.GetListBoxControl();
  if(!isTextClearing) 
   this.FilteringHighlightCompletedText(text);
  this.comboBox.SelectIndexSilent(lb, isTextClearing ? -1 : index);
 },
 OnTab: function() {
  if(this.IsFilterTimerActive() || this.currentCallbackIsFiltration){
   this.isLastFilteredKeyWasTab = true;
   this.Filtering(); 
  }
     ASPxComboBoxDisableFilteringStrategy.prototype.OnTab.call(this);
 },
 ClearInputSelection: function() {
  var inputElement = this.comboBox.GetInputElement();
  _aspxClearInputSelection(inputElement);
 }
});
ASPxClientNativeComboBox = _aspxCreateClass(ASPxClientComboBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.initSelectedIndex = -1;
  this.raiseValueChangedOnEnter = false;
 },
 Initialize: function(){
  var lb = this.GetListBoxControl();
  if(lb != null) lb.SetMainElement(this.GetMainElement());
  ASPxClientComboBoxBase.prototype.Initialize.call(this);
 },
 InitLastSuccessText: function(){
  this.SelectIndex(this.initSelectedIndex, true);
 },
 FindInputElement: function(){
  return this.GetMainElement();
 }, 
 GetDropDownInnerControlName: function(suffix){
  return this.name + suffix;
 },
 PerformCallback: function(arg) {
  this.GetListBoxControl().PerformCallback(arg);
 },
 GetTextInternal: function(){
  var selectedItem = this.GetSelectedItem();
  return (selectedItem != null) ? selectedItem.text : "";
 },
 HasTextDecorators: function() {
  return false;
 },
 SetText: function (text){
  var lb = this.GetListBoxControl();
  var index = this.FindItemIndexByText(lb, text);
  this.SelectIndex(index, false);
  this.SetLastSuccessTest((index > -1) ? text : "");
  this.SetLastSuccessValue((index > -1) ? lb.GetValue() : null);
 },
 GetValue: function(){
  var selectedItem = this.GetSelectedItem();
  return (selectedItem != null) ? selectedItem.value : null;
 },
 SetValue: function(value){
  var lb = this.GetListBoxControl();
  if(lb){
   lb.SetValue(value);
   var item = lb.GetSelectedItem();
   var text = item ? item.text : value;
   this.SetLastSuccessTest((item != null) ? text : "");
   this.SetLastSuccessValue(item != null) ? item.value : null;
  }
 },
 ForceRefocusEditor: function(){
 },
 OnCallback: function(result) {
  this.GetListBoxControl().OnCallback(result);
  if(this.GetItemCount() > 0)
   this.SetSelectedIndex(0);
 },
 OnTextChanged: function() {
  this.OnChange();
 },
 SetTextInternal: function(text){
 },
 SetTextBase: function(text){
 },
 ChangeEnabledAttributes: function(enabled){
  this.GetMainElement().disabled = !enabled;
 }
});
ASPxClientTokenBox = _aspxCreateClass(ASPxClientComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.hoverTokenClasses = [""];
  this.hoverTokenCssArray = [""];
  this.hoverTokenRemoveButtonClasses = [""];
  this.hoverTokenRemoveButtonCssArray = [""];
  this.valueSeparator = ',';
  this.textSeparator = ',';
  this.showDropDownOnFocus = "Auto";
  this.allowDuplicateTokens = false;
  this.editorTimer = null;
  this.encodeHtml = true;
  this.TokensChanged = new ASPxClientEvent();
  this.lastInputText = "";
  this.isTokensAdjusted = false;
 },
 Initialize: function() {
  if(this.IsVisible())
   this.InternalInitialize();
  ASPxClientComboBox.prototype.Initialize.call(this);
 },
 InternalInitialize: function() {
  this.InitializeSampleToken();
  this.InitializeTokens();
  this.AdjustInput(false);
  this.isTokensAdjusted = true;
 },
 InlineInitialize: function() {
  this.initSelectedIndex = -1;
  this.initTextCorrectionRequired = false;
  ASPxClientComboBox.prototype.InlineInitialize.call(this);
 },
 InitializeSampleToken: function() {
  var sizes = this.GetTokenAndTokenTextMaxWidth();
  var sampleToken = this.GetSampleTokenElement();
  this.SetTokenElementStylesInternal(sampleToken, sizes);
 },
 InitializeTokens: function() {
  var sizes = this.GetTokenAndTokenTextMaxWidth();
  var tokens = this.GetTokenCollection();
  for(var i = 0; i < tokens.length; i++) {
   var tokenElement = this.GetTokenHtmlElement(i);
   this.SetTokenElementStylesInternal(tokenElement, sizes);
   this.SetTokenHover(tokenElement, true);
  }
 },
 AdjustControl: function() {  
  ASPxClientComboBox.prototype.AdjustControl.call(this);
  if(this.IsVisible() && !this.isTokensAdjusted && this.isInitialized)
   this.InternalInitialize();
 },
 SetTokenElementStylesInternal: function(tokenElement, sizes) {
  tokenElement.childNodes[0].style.maxWidth = sizes.tokenTextMaxWidth + "px";
  tokenElement.style.maxWidth = sizes.tokenMaxWidth + "px";
  _aspxSetStyles(tokenElement.childNodes[0], {
   textOverflow: "ellipsis",
   whiteSpace: "nowrap",
   overflow: "hidden"
  });
 },
 SetTokenHover: function(tokenElement, state) {
  var controller = aspxGetStateController();
  if(state) {
   controller.AddHoverItem(tokenElement.id, this.hoverTokenClasses, this.hoverTokenCssArray, "", null, null, true);
   controller.AddHoverItem(tokenElement.childNodes[1].id, this.hoverTokenRemoveButtonClasses, this.hoverTokenRemoveButtonCssArray, "", null, null, true);
  } else {
   controller.RemoveHoverItem(tokenElement.id);
   controller.RemoveHoverItem(tokenElement.childNodes[1].id);
  }
 },
 GetTokenHtmlElement: function(index) {
  return document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + index);
 },
 GetTokenTextHtmlElement: function(index) {
  return document.getElementById(this.name + "_" + __aspxTokenBoxTokenTextSuffix + index)
 },
 GetTokenRemoveButtonHtmlElement: function(index) {
  return document.getElementById(this.name + "_" + __aspxTokenBoxTokenRemoveButtonSuffix + index)
 },
 GetTokenAndTokenTextMaxWidth: function() {
  var sampleToken = this.GetSampleTokenElement();
  var input = this.GetInputElement();
  var inputParentWidth = _aspxGetClearClientWidth(input.parentElement);
  var testSampleToken = sampleToken.cloneNode(true);
  testSampleToken.style.position = "absolute";
  testSampleToken.style.top = __aspxInvalidPosition + "px";
  testSampleToken.style.left = __aspxInvalidPosition + "px";
  testSampleToken.childNodes[0].innerHTML = "";
  testSampleToken.id += "_testSampleToken";
  document.body.appendChild(testSampleToken);
  testSampleToken.style.display = "";
  var testSampleTokenFullNullWidth = _aspxGetLeftRightBordersAndPaddingsSummaryValue(testSampleToken) + _aspxGetLeftRightMargins(testSampleToken);
  var testSampleTokenTextSpanFullNullWidth = _aspxGetLeftRightBordersAndPaddingsSummaryValue(testSampleToken.childNodes[0]) + _aspxGetLeftRightMargins(testSampleToken.childNodes[0]);
  var testSampleTokenRBFullWidth = testSampleToken.childNodes[1].offsetWidth + _aspxGetLeftRightMargins(testSampleToken.childNodes[1]);
  var tokenMaxWidth = inputParentWidth - testSampleTokenFullNullWidth;
  var tokenTextMaxWidth = tokenMaxWidth - (testSampleTokenTextSpanFullNullWidth + testSampleTokenRBFullWidth);
  document.body.removeChild(testSampleToken);
  return {"tokenMaxWidth": tokenMaxWidth, "tokenTextMaxWidth": tokenTextMaxWidth};
 },
 GetTokensHiddenField: function() {
  return document.getElementById(this.name + "_" + __aspxTokensHiddenFieldSuffix);
 },
 GetTokensValuesHiddenField: function() {
  return document.getElementById(this.name + "_" + __aspxTokensValuesHiddenFieldSuffix);
 },
 GetTokenCollection: function() {
  var tokensHiddenField = this.GetTokensHiddenField();
  return _aspxEvalJSON(tokensHiddenField.value.toString(), this.name);
 },
 GetTokenValuesCollection: function() {
  var tokensValuesHiddenField = this.GetTokensValuesHiddenField();
  return _aspxEvalJSON(tokensValuesHiddenField.value.toString(), this.name);
 },
 SetTokenCollection: function(collection) {
  this.ClearTokenCollection();
  for(var i = 0; i < collection.length; i++) {
   this.AddTokenInternal(collection[i], true);
  }
 },
 SetTokenCollectionInternal: function(tokenCollection, tokenValueCollection, callByApi) {
  var tokenCollectionString = _aspxToJson(_aspxGetDistinctArray(tokenCollection));
  var tokenValueCollectionString = _aspxToJson(_aspxGetDistinctArray(tokenValueCollection));
  var tokensHiddenField = this.GetTokensHiddenField();
  var tokensValueHiddenField = this.GetTokensValuesHiddenField();
  tokensHiddenField.value = tokenCollectionString;
  tokensValueHiddenField.value = tokenValueCollectionString;
  if(!callByApi)
   this.OnTokensChanged()
  if(this.HasTextDecorators()) {
   this.ToggleTextDecoration();
   if(this.styleDecoration) {
    this.styleDecoration.Update();
   }
  }
 },
 ClearTokenCollection: function() {
  var count = this.GetTokenCollection().length;
  for(var i = 0; i < count; i++) {
   this.RemoveToken(0, true);
  }
 },
 AddToken: function(text) {
  this.AddTokenInternal(text, true);
 },
 AddTokenInternal: function(text, callByApi) {
  var item = this.FindItemByText(text);
  var value = item ? item.value : text;
  var input = this.GetTokensHiddenField();
  var tokens = this.GetTokenCollection();
  var tokensValue = this.GetTokenValuesCollection();
  var lb = this.GetListBoxControl();
  if(this.incrementalFilteringMode != "None" && !(text == null || text == "")) {
   if(lb && !(callByApi || this.AllowCustomToken())) {
    var selectedItem = lb.GetSelectedItem();
    if(selectedItem != null && !lb.FindItemByText(text) && selectedItem.text.toLowerCase().indexOf(text.toLowerCase()) != -1) {
     text = selectedItem.text;
     value = selectedItem.value;
    }
   }
  }
  var allowAddToken = !this.IsCustomToken(text) || this.AllowCustomToken();
  if(this.incrementalFilteringMode != "None")
   this.ClearFilterInternal();
  if((allowAddToken || callByApi) && _aspxArrayIndexOf(tokens, text) == -1 && text != "") {
   var tokenText = this.encodeHtml ? _aspxEncodeHtml(text) : text;
   var tokenElement = this.GetNewHtmlTokenItem(tokenText);
   tokens.push(text);
   tokensValue.push(value);
   this.ResetInputSize();
   input.parentNode.insertBefore(tokenElement, input);
   this.SetTokenHover(tokenElement, true);
   this.SetTokenCollectionInternal(tokens, tokensValue, !!callByApi);
  }
  if(lb)
   lb.SetSelectedIndex(-1);
  if(this.IsCanToDropDown()) {
   if(!this.droppedDown && this.IsFocusEventsLocked() && !callByApi) 
    this.ShowDropDown();
  } else {
   if(this.droppedDown)
    this.HideDropDown();
  }
 },
 IsCustomToken: function(text) {
  return !this.GetListBoxControl().FindItemByText(text);
 },
 AllowCustomToken: function() {
  return !this.isDropDownListStyle;
 },
 GetTokenIndexByText: function(text) {
  var tokens = this.GetTokenCollection();
  for(var i = 0; i < tokens.length; i++) {
   if(tokens[i].toString() == text)
    return i;
  }
  return -1;
 },
 OnTokensChanged: function() {
  this.AdjustInput(false);
  var processOnServer = this.RaiseTokensChanged();
  processOnServer = ASPxClientTextEdit.prototype.RaiseValueChangedEvent.call(this);
  return processOnServer;
 },
 RaiseTokensChanged: function() {
  if(!this.TokensChanged.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.TokensChanged.FireEvent(this, args);
  }
  return this.autoPostBack;
 },
 OnListBoxItemMouseUp: function(evt) {
  var index = this.GetSelectedIndex();
  this.GetInputElement().value = "";
  this.AddTokenInternal(this.GetItem(index).text);
  return false;
 },
 ShouldCloseOnMCMouseDown: function(evt) {
  return false;
 },
 OnFocus: function() {
  if(this.CorrectFocusWhenDisabled())
   return;
  if(this.editorTimer)
   clearTimeout(this.editorTimer);
  this.editorTimer = setTimeout(function() { this.AdjustInput(true); }.aspxBind(this), 0);
  ASPxClientComboBox.prototype.OnFocus.call(this);
  if(this.IsCanToDropDown())
   this.ToggleDropDown();
 },
 IsCanToDropDown: function() {
  var result = this.showDropDownOnFocus == "Always" || (this.showDropDownOnFocus == "Auto" && this.incrementalFilteringMode == "None");
  return result && ASPxClientComboBox.prototype.IsCanToDropDown.call(this);
 },
 ValidateWithPatterns: function() {
  if(this.validationPatterns.length > 0) {
   var validate = function(tokenBox, validator, value) {
    if(!validator.EvaluateIsValid(value)) {
     tokenBox.SetIsValid(false, true );
     tokenBox.SetErrorText(validator.errorText, true );
     return;
    }
   };
   var coll = this.GetValue().split(this.valueSeparator);
   for(var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if(coll.length > 1) {
     for(var vi = 0; vi < coll.length; vi++) {
      validate(this, validator, coll[vi]);
     }
    } else {
     validate(this, validator, this.GetValue());
    }
   }
  }
 },
 RemoveTokenByText: function(text) {
  var index = this.GetTokenIndexByText(text);
  if(index != -1)
   this.RemoveToken(index, true);
 },
 RemoveToken: function(index, callByApi) {
  var tokens = this.GetTokenCollection();
  var tokensValue = this.GetTokenValuesCollection();
  if(tokens.length > 0) {
   tokens.splice(index, 1);
   tokensValue.splice(index, 1);
   this.SetTokenCollectionInternal(tokens, tokensValue, !!callByApi);
   var tokenElement = this.GetTokenHtmlElement(index);
   var tokensParent = tokenElement.parentNode;
   this.SetTokenHover(tokenElement, false);
   tokensParent.removeChild(tokenElement);
   this.RefreshHtmlTokenIndices();
  }
 },
 RefreshHtmlTokenIndices: function() {
  var parent = this.GetTokensHiddenField().parentNode;
  var ind = 0;
  for(var i = 0; i < parent.childNodes.length; i++) {
   var tokenElement = parent.childNodes[i];
   var indexOfTokenId = tokenElement.id.indexOf(this.name + "_" + __aspxTokenBoxTokenSuffix);
   if(indexOfTokenId >= 0) {
    this.SetTokenHover(tokenElement, false);
    tokenElement.id = this.name + "_" + __aspxTokenBoxTokenSuffix + ind.toString();
    this.SetTokenHover(tokenElement, true);
    ind++;
   }
  }
 },
 GetNewHtmlTokenItem: function(text) {
  var tokenElement = this.GetSampleTokenElement().cloneNode(true);
  var newTokenIndex = this.GetTokenCollection().length.toString();
  tokenElement.childNodes[0].innerHTML = text;
  tokenElement.childNodes[0].id = this.name + "_" + __aspxTokenBoxTokenTextSuffix + newTokenIndex;
  tokenElement.childNodes[1].id = this.name + "_" + __aspxTokenBoxTokenRemoveButtonSuffix + newTokenIndex;
  tokenElement.id = this.name + "_" + __aspxTokenBoxTokenSuffix + newTokenIndex;
  tokenElement.style.display = "";
  return tokenElement;
 },
 GetSampleTokenElement: function() {
  return document.getElementById(this.name + "_" +  __aspxTokenBoxTokenSuffix + "-1");
 },
 GetText: function() {
  var tokens = this.GetTokenCollection();
  return tokens.join(this.textSeparator);
 },
 SetText: function(text) {
  this.ClearTokenCollection();
  if(text != null && text != "") {
   var tokens = text.split(this.textSeparator);
   if(tokens.length > 0) {
    for(var i = 0; i < tokens.length; i++) {
     this.AddTokenInternal(tokens[i], true);
    }
   }
  }
 },
 GetValue: function() {
  var tokensValues = this.GetTokenValuesCollection();
  return tokensValues.join(this.valueSeparator);
 },
 SetValue: function(value) {
  this.ClearTokenCollection();
  if(value != null && value != "") {
   var values = value.split(this.valueSeparator);
   for(var i = 0; i < values.length; i++) {
    var item = this.FindItemByValue(values[i]);
    this.AddTokenInternal(item != null ? item.text : values[i].toString(), true);
   }
  }
 },
 OnTextChanged: function() { },
 OnValueChanged: function() { },
 OnApplyChangesInternal: function() { },
 ParseValue: function() { },
 CanApplyNullTextDecoration: function () { return this.GetTokenCollection().length == 0; },
 ToggleTextDecorationCore: function() {
  var input = this.GetInputElement();
  var value = this.CanApplyTextDecorators() && (this.GetTokenCollection().length == 0) ? this.nullText : "";
  if(input.value != value)
   input.value = value;
  this.AdjustInput();
 },
 ClearFilterInternal: function() {
  this.filterStrategy.ClearFilter();
  this.filterStrategy.FilteringStop();
  this.filterStrategy.FilteringStopClient();
 },
 OnEnter: function() {
  var inputValue = this.GetInputElement().value;
  if(inputValue){
   this.GetInputElement().value = "";
   this.AddTokenInternal(inputValue);
  }
  if(this.autoPostBack)
   this.SendPostBackInternal("");
  return true;
 },
 EnsureSelectedItemVisibleOnShow: function() {},
 RaiseValueChangedEvent: function() { return false; },
 OnSpecialKeyDown: function(evt){
  if(_aspxGetKeyCode(evt) == ASPxKey.Backspace && this.GetInputElement().value == "") {
   var tokens = this.GetTokenCollection()
   if(tokens.length > 0) {
    var index = tokens.length - 1;
    var text = tokens[index];
    this.RemoveToken(index, false);
    if(this.AllowCustomToken() || this.IsFilterEnabled()){
     this.GetInputElement().value = text;
     _aspxSetSelection(this.GetInputElement());
    }
   }
   return true;
  } else
   return ASPxClientComboBox.prototype.OnSpecialKeyDown.call(this, evt);
 },
 ContainsSeparator: function(text) {
  var delimiters = [',', ';', this.textSeparator];
  var delimiterPosition = -1;
  if(this.AllowCustomToken())
   delimiters.push(this.valueSeparator);
  delimiters = _aspxGetDistinctArray(delimiters);
  for(var i = 0; i < delimiters.length; i++) {
   if(text.indexOf(delimiters[i]) >= 0)
    delimiterPosition = delimiterPosition == -1 ? text.indexOf(delimiters[i]) : Math.min(text.indexOf(delimiters[i]), delimiterPosition);
  }
  return delimiterPosition;
 },
 OnLostFocus: function() {
  var focusLockedOrCorrected = this.IsFocusEventsLocked() || this.NeedFocusCorrectionWhenDisabled() && !this.GetEnabled();
  if(!focusLockedOrCorrected) {
   var lb = this.GetListBoxControl();
   if(lb)
    lb.SetSelectedIndex(-1);
   this.AddTokenInternal(this.GetInputElement().value, false);
   this.GetInputElement().value = "";
   if(this.droppedDown)
    this.HideDropDown();
  }
  ASPxClientComboBox.prototype.OnLostFocus.call(this);
  if(this.IsVisible())
   this.AdjustInput(false);
  clearTimeout(this.editorTimer);
  this.editorTimer = null;
  if(this.incrementalFilteringMode != "None" && !focusLockedOrCorrected)
   this.ClearFilterInternal();
  if(!focusLockedOrCorrected && this.autoPostBack)
   this.SendPostBackInternal("");
 },
 ToggleDropDown: function() {
  this.OnApplyChanges();
  if(!this.droppedDown)
   this.ShowDropDownArea(true);
 },
 ResetInputSize: function() {
  this.GetInputElement().style.width = __aspxTokenBoxInputMinWidth + "px";
 },
 AdjustInput: function(startTimer) {
  this.AdjustInputInternal(!startTimer);
  if(this.droppedDown)
   this.RelocationPopup();
  if(startTimer) {
   this.SplitInputTextAndAddTokenInternal();
   this.editorTimer = setTimeout(function() { this.AdjustInput(startTimer); }.aspxBind(this), 0);
  }
 },
 AdjustInputInternal: function(force) {
  var input = this.GetInputElement();
  if(force || this.lastInputText != input.value.toString()) {
   this.lastInputText = input.value.toString();
   var lastToken = document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + (this.GetTokenCollection().length - 1));
   var tokensOffset = 0;
   if(lastToken) {
    var lastTokenCss = _aspxGetCurrentStyle(lastToken);
    if(this.rtl)
     tokensOffset = lastToken.offsetLeft - _aspxPxToInt(lastTokenCss.marginLeft);
    else
     tokensOffset = lastToken.offsetLeft + lastToken.offsetWidth + _aspxPxToInt(lastTokenCss.marginRight);
   }
   var parentElementFW = Math.max(_aspxGetLeftRightMargins(input.parentElement), 0) + input.parentElement.offsetWidth;
   var inputLRMBPSV = _aspxGetLeftRightMargins(input) + _aspxGetLeftRightBordersAndPaddingsSummaryValue(input);
   var maxInputWidthWT = this.rtl ? tokensOffset - inputLRMBPSV : (_aspxGetClearClientWidth(input.parentElement) - tokensOffset) - inputLRMBPSV;
   var maxInputWidth = _aspxGetClearClientWidth(input.parentElement) - inputLRMBPSV;
   var textWidth = _aspxGetSizeOfText(input.value.toString(), _aspxGetCurrentStyle(input)).width;
   var inputWidth = Math.max(__aspxTokenBoxInputMinWidth, textWidth) > maxInputWidthWT ? maxInputWidth : maxInputWidthWT;
   input.style.width = ((inputWidth / parentElementFW) * 100) + "%";
  }
 },
 SplitInputTextAndAddTokenInternal: function() {
  var input = this.GetInputElement();
  var text = input.value.toString();
  var delimiterPosition = this.ContainsSeparator(text);
  if(delimiterPosition >= 0) {
   var texts = [text.substr(0, delimiterPosition), text.substr(delimiterPosition + 1)];
   var tokenText = texts[0];
   var inputText = texts[1];
   input.value = inputText;
   if(texts[0] != "") {
    this.AddTokenInternal(tokenText);
    if(this.incrementalFilteringMode != "None") {
     this.filterStrategy.isApplyAndCloseAfterFiltration = true;
    }
   }
  }
 },
 RelocationPopup: function() {
  var pc = this.GetPopupControl();
  var element = pc.GetWindowElement(-1);
  var popupElement = this.GetMainElement();
  var horizontalPopupPosition = pc.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, true, false);
  var verticalPopupPosition = pc.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, false, false);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  pc.SetWindowPos(-1, element, clientX, clientY); 
 }
});
var __aspxDropDownCollection = null;
function aspxGetDropDownCollection(){
 if(__aspxDropDownCollection == null)
  __aspxDropDownCollection  = new ASPxClientDropDownCollection();
 return __aspxDropDownCollection;
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxDropDownDocumentMouseDown);
function aspxDropDownDocumentMouseDown(evt){
 return aspxGetDropDownCollection().OnDocumentMouseDown(evt);
}
_aspxAttachEventToDocument("mouseup", aspxDropDownDocumentMouseUp);
function aspxDropDownDocumentMouseUp(evt){
 return aspxGetDropDownCollection().OnDocumentMouseUp(evt);
}
function aspxDDDropDown(name, evt){
 if(_aspxGetIsLeftButtonPressed(evt)){
  var dd = aspxGetControlCollection().Get(name);
  if(dd)
   return dd.OnDropDown(evt);
 }
}
function aspxDDMC_MD(name, evt) {
 var dd = aspxGetControlCollection().Get(name);
 if(dd)
  dd.OnMainCellMouseDown(evt);
}
function aspxDDRefocusClick(name, evt) {
 var dd = aspxGetControlCollection().Get(name);
 if (dd && dd.GetInputElement() && _aspxGetEventSource(evt).id != dd.GetInputElement().id) 
  dd.ForceRefocusEditor(evt);
}
function aspxDDBPCShown(name){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.OnPopupControlShown();
}
function aspxDDBRaiseDropDownByTimer(name){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.RaiseDropDown();
}
function aspxCBLBSelectedIndexChanged(name, evt){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.OnLBSelectedIndexChanged();
}
function aspxCBLBItemMouseUp(name, evt){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.OnListBoxItemMouseUp(evt);
}
function aspxCBMozillaOverflowOn(name){
 var cb = aspxGetControlCollection().Get(name);
 cb.EnableLBDivOverflow();
}
function aspxCBDDButtonMMove(evt){
 return aspxGetDropDownCollection().OnDDButtonMouseMove(evt);
}
function aspxCBMouseWheel(evt){
 var srcElement = _aspxGetEventSource(evt);
 var focusedCB = aspxGetDropDownCollection().GetFocusedDropDown();
 if(focusedCB != null && _aspxGetIsParent(focusedCB.GetMainElement(), srcElement))
  return focusedCB.OnMouseWheel(evt);
}
function aspxCBKeyUp(evt){
 var cb = aspxGetDropDownCollection().GetFocusedDropDown();
 if (cb != null) 
  cb.filterStrategy.OnFilteringKeyUp(evt);
}
function aspxCBFilterByTimer(name){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.filterStrategy.Filtering();
}
function aspxDECalOkClick() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionOkClick();
}
function aspxDECalCancelClick() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionCancelClick();
}
function aspxDECalClearClick() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionClearClick();
}
function aspxDETimeEditKeyDown(s,e) {
 var edit = ASPxClientDateEdit.active;
 if(!edit) return;
 switch(e.htmlEvent.keyCode) {
  case ASPxKey.Enter:
   edit.OnTimeEditEnter();
   break;
  case ASPxKey.Esc:
   edit.OnTimeEditEsc();
   break;
  case ASPxKey.Tab:
   edit.OnTimeEditTab(e.htmlEvent.shiftKey);
   break;
 }
}
function aspxDETimeEditLostFocus() {
 var edit = ASPxClientDateEdit.active;
 if(!edit) return;
 edit.OnTimeEditLostFocus();
}
function aspxTBIKeyUp(name, evt) {
 aspxEKeyUp(name, evt);
}
function aspxTRBClick(name, evt) {
 var tokenElement = _aspxGetEventSource(evt).parentElement;
 var tb = aspxGetControlCollection().Get(name);
 if(tb) {
  var index = tokenElement.id.substring((tb.name + "_" + __aspxTokenBoxTokenSuffix).length);
  tb.RemoveToken(index, false);
 }
 return _aspxCancelBubble(evt);
}
function aspxME_MD(name, evt) {
 var tb = aspxGetControlCollection().Get(name);
 if(tb && !tb.focused)
  tb.SetFocus();
}
var __aspxLBSerializingSeparator = "|";
var __aspxLBSerializingSeparatorLength = __aspxLBSerializingSeparator.length;
var __aspxLoadRangeItemsCallbackPrefix = "LBCRI";
var __aspxLBIPostfixes = ['C', 'I', 'T'];
var __aspxLBIIdSuffix = "LBI";
var __aspxLBSIIdSuffix = __aspxLBIIdSuffix + "-1";
var __aspxLBTSIdSuffix = "_TS";
var __aspxLBBSIdSuffix = "_BS";
var __aspxLBHeaderDivIdSuffix = "_H";
var __aspxLTableIdSuffix = "_LBT";
var __aspxLEVISuffix = "_VI";
var __aspxLBDSuffix = "_D";
var __aspxEmptyItemsRange = "0:-1";
var __aspxNbsp = "&nbsp;";
var __aspxNameSeparator = "_";
var __aspxNbspChar = String.fromCharCode(160);
var ListBoxSelectionMode = { Single : 0, Multiple : 1, CheckColumn : 2 };
ASPxClientListEdit = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.SelectedIndexChanged = new ASPxClientEvent();
  this.savedSelectedIndex = -1;
 },
 FindInputElement: function() {
  return this.FindStateInputElement();
 },
 FindStateInputElement: function(){
  return document.getElementById(this.name + __aspxLEVISuffix);
 },
 GetItem: function(index) {
  throw "Not implemented";
 },
 GetItemValue: function(index) {
  throw "Not implemented";
 },
 GetValue: function(){
  return this.GetItemValue(this.GetSelectedIndex());
 }, 
 GetSelectedIndexInternal: function(){
  return this.savedSelectedIndex;
 }, 
 SetSelectedIndexInternal: function(index){
  this.savedSelectedIndex = index;
 },
 FindItemIndexByValue: function(value){
  for(var i = 0; i < this.GetItemCount(); i++){
   if(this.GetItemValue(i) == value)
    return i;
  }
  return -1;
 },
 RaiseItemClick: function() {
  var processOnServer = this.autoPostBack;
  if(!this.ItemClick.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseItemDoubleClick: function() {
  var processOnServer = this.autoPostBack;
  if(!this.ItemDoubleClick.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ItemDoubleClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseValueChangedAdditionalEvents(processOnServer);
  return processOnServer;
 },
 RaiseValueChangedAdditionalEvents: function(processOnServer){
  return this.RaiseSelectedIndexChanged(processOnServer);
 },
 RaiseSelectedIndexChanged: function (processOnServer) {
  this.RaiseValidationInternal();
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 UpdateHiddenInputs: function(){
  var element = this.FindStateInputElement();
  if(_aspxIsExistsElement(element)) {
   var value = this.GetValue();
   if (value == null)
    value = "";
   element.value = value;
  }
 },
 GetSelectedItem: function(){
  var index = this.GetSelectedIndexInternal();
  return this.GetItem(index);
 },
 GetSelectedIndex: function(){
  return this.GetSelectedIndexInternal();
 },
 SetSelectedItem: function(item){
  var index = (item != null) ? item.index : -1;
  this.SetSelectedIndex(index);
 },
 SetSelectedIndex: function(index){
  this.SelectIndexSilent(index);
 },
 SelectIndexSilent: function(index){
  throw "Not implemented";
 },
 OnValueChanged: function () {
  var processOnServer = this.RaiseValueChangedEvent() && this.GetIsValid();
  if (processOnServer)
   this.SendPostBackInternal("");
 }
});
ASPxClientListEditItem = _aspxCreateClass(null, {
 constructor: function(listEditBase, index, text, value, imageUrl){
  this.listEditBase = listEditBase;
  this.index = index;
  this.imageUrl = imageUrl;
  this.text = text;
  this.value = value;
 }
});
ASPxClientListBoxItem = _aspxCreateClass(ASPxClientListEditItem, {
 constructor: function(listEditBase, index, texts, value, imageUrl, selected){
  this.constructor.prototype.constructor.call(this, listEditBase, index, null, value, imageUrl);
  this.selected = selected ? selected : false;
  this.texts = texts;
  this.text = listEditBase.FormatText(texts);
 },
 GetColumnText: function(columnIndexOrFieldName){
  var columnIndex = -1;
  if(typeof(columnIndexOrFieldName) == "string")
   columnIndex = _aspxArrayIndexOf(this.listEditBase.columnFieldNames, columnIndexOrFieldName);
  else if(typeof(columnIndexOrFieldName) == "number")
   columnIndex = columnIndexOrFieldName;
  return this.GetColumnTextByIndex(columnIndex);
 },
 GetColumnTextByIndex: function(columnIndex){
  if(0 <= columnIndex && columnIndex < this.texts.length)
   return this.texts[columnIndex];
  else
   return null;
 }
});
_aspxListBoxScrollCallbackHelperBase = _aspxCreateClass(null, {
 constructor: function(listBoxControl) {
  this.listBoxControl = listBoxControl;
  this.itemsRange = "";
  this.defaultItemsRange = "0:" + (this.listBoxControl.callbackPageSize - 1);
 },
 OnScroll: function(){ },
 Reset: function(){ },
 IsScrolledToTopSpacer: function(){ return false; },
 IsScrolledToBottomSpacer: function(){ return false; },
 GetIsNeedToHideTopSpacer: function(){ return false; },
 GetIsNeedCallback: function(){ return false; },
 GetItemsRangeForLoad: function(){ return this.defaultItemsRange; },
 SetItemsRangeForLoad: function(){}
});
_aspxListBoxScrollCallbackHelper = _aspxCreateClass(_aspxListBoxScrollCallbackHelperBase, {
 constructor: function(listBoxControl) {
  this.constructor.prototype.constructor.call(this, listBoxControl);
  this.isScrolledToTopSpacer = false;
  this.isScrolledToBottomSpacer = false;
 },
 OnScroll: function(){
  this.DetectScrollDirection();
  this.ResetItemsRange();
  if(this.GetIsAnySpacerVisible())
   this.RecalcItemsRangeForLoad();
 },
 DetectScrollDirection: function(){
  var listBoxControl = this.listBoxControl;
  var divElement = listBoxControl.GetScrollDivElement();
  var listTable = listBoxControl.GetListTable();
  var scrollTop = divElement.scrollTop;
  var scrollBottom = divElement.scrollTop + divElement.clientHeight;
  var isTopSpacerVisible = listBoxControl.GetScrollSpacerVisibility(true);
  var isBottomSpacerVisible = listBoxControl.GetScrollSpacerVisibility(false);
  var topSpacerHeight = listBoxControl.GetScrollSpacerVisibility(true) ? parseInt(listBoxControl.GetScrollSpacerElement(true).clientHeight) : 0;
  this.isScrolledToTopSpacer = (scrollTop < topSpacerHeight) && isTopSpacerVisible;
  this.isScrolledToBottomSpacer = (scrollBottom >= topSpacerHeight + listTable.clientHeight) && isBottomSpacerVisible;
 },
 Reset: function(){
  this.ResetItemsRange();
  this.isScrolledToTopSpacer = false;
  this.isScrolledToBottomSpacer = false;
 },
 ResetItemsRange: function(){
  this.itemsRange = "";
 },
 RecalcItemsRangeForLoad: function(){
  if(this.listBoxControl.isCallbackMode) {
   if(this.isScrolledToTopSpacer || this.isScrolledToBottomSpacer)
    this.SetItemsRangeForLoad(this.isScrolledToTopSpacer);
  }
 },
 IsScrolledToTopSpacer: function(){
  return this.isScrolledToTopSpacer;
 },
 IsScrolledToBottomSpacer: function(){
  return this.isScrolledToBottomSpacer;
 },
 GetIsAnySpacerVisible: function(){
  return this.isScrolledToTopSpacer || this.isScrolledToBottomSpacer;
 },
 GetIsNeedCallback: function(){
  return !this.GetIsItemsRangeEmpty();
 },
 GetIsNeedToHideTopSpacer: function(){
  return this.isScrolledToTopSpacer && this.GetIsItemsRangeEmpty();
 },
 GetItemsRangeForLoad: function(){
  return (!this.GetIsItemsRangeEmpty() ? this.itemsRange : this.defaultItemsRange);
 },
 SetItemsRangeForLoad: function(isForTop){
  var listbox = this.listBoxControl;
  var beginIndex = isForTop ? 
   listbox.serverIndexOfFirstItem - listbox.callbackPageSize : 
   listbox.serverIndexOfFirstItem + listbox.GetItemCount();
  beginIndex = beginIndex < 0 ? 0 : beginIndex;
  var endIndex = isForTop ? 
   listbox.serverIndexOfFirstItem - 1 : 
   beginIndex + listbox.callbackPageSize - 1;
  this.itemsRange = beginIndex + ":" + endIndex;
  this.isScrolledToTopSpacer = isForTop;
  this.isScrolledToBottomSpacer = !isForTop;
 },
 GetIsItemsRangeEmpty: function(){
  return (this.itemsRange == "" || this.itemsRange == __aspxEmptyItemsRange);
 }
});
ASPxClientListBoxBase = _aspxCreateClass(ASPxClientListEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.APILockCount = 0;
  this.enableSyncOnPerfCallback = false;
  this.scrollOnKBNavigationLockCount = 0;
  this.isComboBoxList = false;
  this.isSyncEnabled = true;
  this.ownerName = "";
  this.selectionEventsLockCount = 0;
  this.syncLockCount = 0;
  this.encodeHtml = true;
  this.serializingHelper = null;
  this.deletedItems = [];
  this.insertedItems = [];
  this.itemsValue = [];
  this.ItemDoubleClick = new ASPxClientEvent();
  this.ItemClick = new ASPxClientEvent();
 },
 InlineInitialize: function () {
  ASPxClientListEdit.prototype.InlineInitialize.call(this);
  for (var i = 0; i < this.itemsValue.length; i++)
   this.itemsValue[i] = this.GetDecodeValue(this.itemsValue[i]);
 },
 LockScrollOnKBNavigation: function(){
  this.scrollOnKBNavigationLockCount++;
 },
 UnlockScrollOnKBNavigation: function(){
  this.scrollOnKBNavigationLockCount--;
 },
 IsScrollOnKBNavigationLocked: function() {
  return this.scrollOnKBNavigationLockCount > 0;
 },
 LockSelectionEvents: function(){
  this.selectionEventsLockCount++;
 },
 UnlockSelectionEvents: function(){
  this.selectionEventsLockCount--;
 },
 IsSelectionEventsLocked: function(){
  return this.selectionEventsLockCount > 0;
 },
 LockSynchronizationOnInternalCallback: function(){
  if(!this.enableSyncOnPerfCallback)
   this.LockSynchronization();
 },
 UnlockSynchronizationOnInternalCallback: function (){
  if(!this.enableSyncOnPerfCallback)
   this.UnlockSynchronization();
 },
 GetItemCount: function(){
  return 0;
 },
 GetItemValue: function(index){
  if(0 <= index && index < this.GetItemCount())
   return this.PrepareItemValue(this.itemsValue[index]);
  return null;
 },
 GetItemTexts: function(item) {
  return item.text;
 },
 PrepareItemValue: function(value) {
  return (typeof(value) == "string" && value == "" && this.convertEmptyStringToNull) ? null : value;
 },
 LoadItemsFromCallback: function(isToTop, itemStrings){
 },
 SetValue: function(value){
  var index = this.FindItemIndexByValue(value);
  this.SelectIndexSilentAndMakeVisible(index);
 },
 FindItemIndexByText: function(text){
  for(var i = 0; i < this.GetItemCount(); i ++){
   if(this.GetItem(i).text == text)
    return i;
  }
  return -1;
 },
 SelectIndex: function (index){ 
  if(this.SelectIndexSilentAndMakeVisible(index, false)){
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
 },
 SelectIndexSilentAndMakeVisible: function(index){
  var selectionChanged = this.SelectIndexSilent(index);
  if(!this.IsScrollOnKBNavigationLocked())
   this.MakeItemVisible(index);
  return selectionChanged;
 },
 FormatText: function (texts) {
  return texts;
 },
 MakeItemVisible: function(index){
 },
 InitOnContainerMadeVisible: function(){
 },
 AddItem: function(texts, value, imageUrl){
  var index = this.GetItemCount();
  this.InsertItemInternal(index, texts, value, imageUrl);
  return index;
 },
 InsertItem: function(index, texts, value, imageUrl){
  this.InsertItemInternal(index, texts, value, imageUrl);
 },
 InsertItemInternal: function(index, text, value, imageUrl){
 },
 BeginUpdate: function(){
  this.APILockCount ++;
 },
 EndUpdate: function(){
  this.APILockCount --;
  this.Synchronize();
 },
 ClearItems: function(){
  this.BeginUpdate();
  this.UpdateArraysItemsCleared();
  this.ClearItemsCore();
  this.EndUpdate();
 },
 ClearItemsCore: function(){
 },
 ClearItemsForPerformCallback: function(){
  this.itemsValue = [];
  this.ClearItemsCore();
 },
 RemoveItem: function(index){
 },
 FindItemByText: function(text){
  var index = this.FindItemIndexByText(text);
  return this.GetItem(index);
 },
 FindItemByValue: function(value){
  var index = this.FindItemIndexByValue(value);
  return this.GetItem(index);
 },
 PerformCallback: function(arg) {
 },
 GetCallbackArguments: function(){
  var args = this.GetCustomCallbackArg();
  args += this.GetLoadItemsRangeCallbackArg();
  return args;
 },
 GetLoadItemsRangeCallbackArg: function(){
  return this.FormatCallbackArg(__aspxLoadRangeItemsCallbackPrefix, this.GetItemsRangeForLoad());
 },
 FormatCallbackArg: function(prefix, arg) { 
  arg = arg.toString();
  return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
 },
 GetItemsRangeForLoad: function(){
  return __aspxEmptyItemsRange;
 },
 GetCallbackOwnerControl: function(){
  if(this.ownerName && !this.ownerControl)
   this.ownerControl = aspxGetControlCollection().Get(this.ownerName);
  return this.ownerControl;
 },
 GetCustomCallbackArg: function(){
  return this.GetSyncHiddenInput("CustomCallback").value;
 },
 SetCustomCallbackArg: function(arg){
  this.GetSyncHiddenInput("CustomCallback").value = arg;
 },
 FormatAndSetCustomCallbackArg: function(arg){
  arg = _aspxIsExists(arg) ? arg.toString() : ""
  var formatArg = this.FormatCallbackArg("LECC", arg);
  this.SetCustomCallbackArg(formatArg);
 },
 SendCallback: function(){
 },
 LockSynchronization: function(){
  this.syncLockCount++;
 },
 UnlockSynchronization: function(){
  this.syncLockCount--;
 },
 IsSyncLocked: function(){
  return this.syncLockCount > 0;
 },
 IsSyncEnabled: function(){
  return this.isSyncEnabled && !this.IsSyncLocked();
 },
 RegisterInsertedItem: function(index, text, value, imageUrl){
  if(this.IsSyncEnabled()){
   this.RefreshSynchroArraysIndex(index, true);
   var item = this.CreateItem(index, text, value, imageUrl);
   this.insertedItems.push(item);
   this.Synchronize();
  }
 },
 CreateItem: function(index, text, value, imageUrl, selected){
  return new ASPxClientListBoxItem(this, index, text, value, imageUrl, selected);
 },
 UpdateSyncArraysItemDeleted: function(item, isValueRemovingRequired){
  if(isValueRemovingRequired)
   _aspxArrayRemoveAt(this.itemsValue, item.index);
  if(this.IsSyncEnabled()){
   var index = this.FindItemInArray(this.insertedItems, item);
   if(index == -1){
    this.RefreshSynchroArraysIndex(item.index, false);
    this.deletedItems.push(item);
   } else {
    this.RefreshSynchroArraysIndex(item.index, false);
    _aspxArrayRemoveAt(this.insertedItems, index);
   }
   this.Synchronize();
  }
 },
 UpdateArraysItemsCleared: function(){
  if(this.IsSyncEnabled()){
   for(var i = this.GetItemCount() - 1; i >= 0; i --)
    this.UpdateSyncArraysItemDeleted(this.GetItem(i), false);
  } 
  this.itemsValue = [];
 },
 RefreshSynchroArraysIndex: function(startIndex, isIncrease){
  this.RefreshSynchroArrayIndexIndex(this.deletedItems, startIndex, isIncrease);
  this.RefreshSynchroArrayIndexIndex(this.insertedItems, startIndex, isIncrease);
 },
 RefreshSynchroArrayIndexIndex: function(array, startIndex, isIncrease){
    var delta = isIncrease ? 1 : -1;
    for(var i = 0; i < array.length; i ++){
   if(array[i].index >= startIndex)
    array[i].index += delta;
  }   
 },
 FindItemInArray: function(array, item){
  for(var i = array.length - 1; i >= 0; i--){
   var currentItem = array[i];
   if ((!this.encodeHtml || currentItem.text == item.text) && currentItem.value == item.value &&
    currentItem.imageUrl == item.imageUrl)
    break;
  }
  return i;
 },
 GetSyncHiddenInput: function(syncType){
  return _aspxGetElementById(this.name + syncType);
 },
 Synchronize: function(){
  if(this.APILockCount == 0){
   if(this.IsSyncEnabled()){
    this.SynchronizeItems(this.deletedItems, "DeletedItems");
    this.SynchronizeItems(this.insertedItems, "InsertedItems");
   }
   this.CorrectSizeByTimer();
  }
 },
 CorrectSizeByTimer: function(){
 },
 SynchronizeItems: function(items, syncType){
  var inputElement = this.GetSyncHiddenInput(syncType);
  if(!_aspxIsExistsElement(inputElement))
   return;
  inputElement.value = _aspxEncodeHtml(this.SerializeItems(items));
 },
 GetSerializingHelper: function(){ 
  if(this.serializingHelper == null)
   this.serializingHelper = this.CreateSerializingHelper();
  return this.serializingHelper;
 },
 CreateSerializingHelper: function(){
  return new _aspxListBoxBaseItemsSerializingHelper(this);
 },
 SerializeItems: function(items){
  var serialiser = this.GetSerializingHelper();
  return serialiser.SerializeItems(items);
 },
 DeserializeItems: function(serializedItems){
  var serialiser = this.GetSerializingHelper();
  return serialiser.DeserializeItems(serializedItems);
 }
});
_aspxListBoxBaseItemsSerializingHelper = _aspxCreateClass(null, {
 constructor: function(listBoxControl) {
  this.listBoxControl = listBoxControl;
  this.startPos = 0;
 },
 SerializeItems: function(items){
  var sb = [ ];
  for(var i = 0; i < items.length; i++)
   this.SerializeItem(sb, items[i]);
  return sb.join("");
 },
 SerializeItem: function(sb, item) {
  if(!item)
   return;
  this.SerializeAtomValue(sb, item.index);
  this.SerializeAtomValue(sb, item.value);
  this.SerializeAtomValue(sb, item.imageUrl);
  var texts = this.listBoxControl.GetItemTexts(item);
  if(typeof(texts) == "string")
   this.SerializeAtomValue(sb, texts);
  else {
   for(var i = 0; i < texts.length; i++)
    this.SerializeAtomValue(sb, texts[i]);
  }
 },
 SerializeAtomValue: function(sb, value) {
  var valueStr = _aspxIsExists(value) ? value.toString() : "";
  sb.push(valueStr.length);
  sb.push('|');
  sb.push(valueStr);
 },
 DeserializeItems: function(serializedItems){
  var deserializedItems = [];
  var evalItems = _aspxEvalJSON(serializedItems, this.listBoxControl.name);
  if(evalItems.length > 0) {
   var textsCount = this.listBoxControl.isNative ? 1 : this.listBoxControl.GetItemTextCellCount();
   var itemLength = (this.listBoxControl.imageCellExists ? 1 : 0) + 1 + textsCount;
   var index = 0, selected, value, texts, imageUrl, item;
   for (var i = 0; i < evalItems.length; i += itemLength, index ++) {
    selected = typeof (evalItems[i]) == "object";
    value = selected ? evalItems[i][0] : evalItems[i];
    texts = textsCount > 0 ? evalItems.slice(i + 1, i + 1 + textsCount) : evalItems[i + 1];
    imageUrl = this.listBoxControl.imageCellExists ? evalItems[i + itemLength - 1] : "";
    item = this.listBoxControl.CreateItem(index, texts, value, imageUrl, selected);
    deserializedItems.push(item);
   }
   return deserializedItems;
  }
 },
 ParseItemIndex: function(serializedItem){
  return parseInt(this.ParseString(serializedItem));
 },
 ParseItemValue: function(serializedItem){
  return this.ParseString(serializedItem);
 },
 ParseString: function(str){
  var indexOfSeparator = str.indexOf(__aspxLBSerializingSeparator, this.startPos);
  var strLength = parseInt(str.substring(this.startPos, indexOfSeparator));
  var strStartPos = indexOfSeparator + __aspxLBSerializingSeparatorLength;
  this.startPos = strStartPos + strLength;
  return str.substring(strStartPos, strStartPos + strLength);
 },
 ParseTexts: function(serializedItems){
  return this.ParseString(serializedItems);
 },
 DeserializeValues: function(serializedValues){
  var deserializedValues = [];
  this.startPos = 0;
  while(this.startPos < serializedValues.length){
   deserializedValues.push(this.ParseItemValue(serializedValues));
  }
  return deserializedValues;
 }
});
_aspxListBoxItemsSerializingHelper = _aspxCreateClass(_aspxListBoxBaseItemsSerializingHelper, {
 constructor: function(listBoxControl) {
  this.constructor.prototype.constructor.call(this, listBoxControl);
 },
 ParseTexts: function(serializedItems){
  var textColumnCount = this.listBoxControl.GetItemTextCellCount();
  return (textColumnCount > 1) ? this.DeserializeItemTexts(serializedItems, textColumnCount) 
   : this.constructor.prototype.ParseTexts.call(this, serializedItems);
 },
 DeserializeItemTexts: function(serializedItem, textColumnCount){
  var text = "";
  var texts = [];
  for(var i = 0; i < textColumnCount; i++)
   texts.push(this.ParseString(serializedItem));
  return texts;
 }
});
_aspxListBoxSingleSelectionHelper = _aspxCreateClass(null, {
 constructor: function(listBoxControl) {
  this.listBoxControl = listBoxControl;
  this.savedSelectedIndex = -1;
  this.updateHiddenInputsLockCount = 0;
  this.cachedSelectionChangedArgs = [];
 },
 ClearSelection: function(){
  this.SetSelectedIndexCore(-1);
  this.OnSelectionCleared();
 },
 OnSelectionCleared: function(){
  this.cachedSelectionChangedArgs = [];
 },
 GetSelectedIndexInternal: function(){
  return this.savedSelectedIndex;
 }, 
 SetSelectedIndexInternal: function(index){
  this.savedSelectedIndex = index;
 }, 
 SetSelectedIndexCore: function(index){
  if(index != this.savedSelectedIndex && -1 <= index && index < this.GetItemCount()){
   this.BeginSelectionUpdate();
   this.SetSelectedIndexInternal(index);
   this.EndSelectionUpdate();
   return true;
  }
  return false;
 },
 GetSelectedIndex: function(){
  return this.GetSelectedIndexInternal();
 },
 SetSelectedIndex: function(index){
  this.ChangeSelectedItem(index);
  this.SetSelectedIndexCore(index);
  this.OnItemSelectionChanged(index, true);
 },
 GetSelectedIndices: function(){ 
  var selectedIndex = this.GetSelectedIndexInternal();
  return selectedIndex != -1 ? [selectedIndex] : [];
 },
 GetSelectedValues: function(){ 
  var selectedValue =  this.listBoxControl.GetValue();
  return selectedValue != null ? [selectedValue] : [];
 },
 GetSelectedItems: function(){ 
  var selectedItem = this.listBoxControl.GetSelectedItem();
  return selectedItem != null? [selectedItem] : [];
 },
 SelectIndices: function(indices){},
 SelectItems: function(items){},
 SelectValues: function(values){},
 UnselectIndices: function (selected) { this.SetSelectedIndex(-1); },
 UnselectItems: function(items){},
 UnselectValues: function(values){},
 GetIsItemSelected: function(index){ return index == this.GetSelectedIndexInternal(); },
 ResetSelectionCollectionsCache: function(){ },
 OnItemClick: function(index, evt){
  var selected = true;
  this.BeginSelectionUpdate();
  this.ChangeSelectedItem(index);
  var selectedIndexChanged = this.SetSelectedIndexCore(index);
  this.EndSelectionUpdate();
  if(selectedIndexChanged)
   this.OnItemSelectionChanged(index, selected);
 },
 ChangeSelectedItem: function(newSelectedIndex){
  var selected = true;
  var oldSelectedIndex = this.GetSelectedIndexInternal();
  this.BeginSelectionUpdate();
  this.SetItemSelectionState(oldSelectedIndex, !selected);
  this.SetItemSelectionState(newSelectedIndex, selected);
  this.EndSelectionUpdate();
 },
 SetItemSelectionState: function(itemIndex, selected, controller){
  this.BeginSelectionUpdate();
  this.listBoxControl.SetItemSelectionAppearance(itemIndex, selected, controller);
  this.EndSelectionUpdate();
 },
 GetFocusedIndex: function(){
  return this.GetSelectedIndexInternal();
 },
 BeginSelectionUpdate: function(){
  this.updateHiddenInputsLockCount++;
 },
 EndSelectionUpdate: function(){
  this.updateHiddenInputsLockCount--;
  if(!this.IsUpdateInternalSelectionStateLocked()){
   this.listBoxControl.UpdateInternalState();
   this.FlushSelectionChanged();
  }
 },
 IsUpdateInternalSelectionStateLocked: function(){
  return this.updateHiddenInputsLockCount > 0;
 },
 GetItemCount: function(){
  return this.listBoxControl.GetItemCount();
 },
 OnItemSelectionChanged: function(index, selected){
  if(this.IsUpdateInternalSelectionStateLocked()){
   var a = {Index: index, Selected: selected};
   this.cachedSelectionChangedArgs.push(a);
  }
  else 
   this.listBoxControl.OnItemSelectionChanged(index, selected);
 },
 FlushSelectionChanged: function(){
  if(this.IsUpdateInternalSelectionStateLocked()) 
   return;
  for(var i = 0; i < this.cachedSelectionChangedArgs.length; i++)
   this.listBoxControl.OnItemSelectionChanged(this.cachedSelectionChangedArgs[i].Index, this.cachedSelectionChangedArgs[i].Selected);
  this.cachedSelectionChangedArgs = [];
 },
 OnItemInserted: function(index){
  if(index <= this.savedSelectedIndex && this.savedSelectedIndex != -1)
   this.SetSelectedIndexInternal(this.savedSelectedIndex + 1);
 },
 OnItemRemoved: function(index){
  var selectedIndex = this.GetSelectedIndex();
  if(index < this.savedSelectedIndex)
   this.SetSelectedIndexInternal( this.savedSelectedIndex - 1);
  else if(index == this.savedSelectedIndex)
   this.SetSelectedIndexInternal(-1);
 },
 OnItemsCleared: function(){
  this.ClearSelection();
 }
});
_aspxListBoxMultiSelectionHelper = _aspxCreateClass(_aspxListBoxSingleSelectionHelper, {
 constructor: function(listBoxControl) {
  this.constructor.prototype.constructor.call(this, listBoxControl);
  this.selectedValuesCache = [];
  this.selectedItemsCache = [];
  this.savedSelectedIndices = [];
  this.selectedIndicesSortingRequired = false;
  this.focusedIndex = -1;
  this.lastIndexFocusedWithoutShift = -1;
 },
 SetSelectedIndex: function(index){
  this.SingleIndexSelection(index);
 },
 ResetSelectionCollectionsCache: function(){
  this.selectedIndicesSortingRequired = true;
  this.selectedItemsCache = [];
  this.selectedValuesCache = [];
 },
 GetSelectedIndices: function(){
  return this.GetSortedSelectedIndices().slice();
 },
 GetSortedSelectedIndices: function() {
  if(this.savedSelectedIndices.length > 1 && this.selectedIndicesSortingRequired)
   this.SortSelectedIndices();
  return this.savedSelectedIndices;
 },
 GetSelectedValues: function(){ 
  if(this.savedSelectedIndices.length == 0)
   return [];
  if(this.selectedValuesCache.length == 0)
   this.selectedValuesCache = this.GetSelectedValuesCore();
  return this.selectedValuesCache;
 },
 GetSelectedValuesCore: function(){
  var selectedValues = [];
  var selectedIndices = this.GetSortedSelectedIndices();
  if(selectedIndices.length == 0)
   return selectedValues;
  for(var i = 0; i < selectedIndices.length; i++)
   selectedValues.push(this.listBoxControl.GetItemValue([selectedIndices[i]]));
  return selectedValues;
 },
 GetSelectedItems: function(){
  if(this.savedSelectedIndices.length == 0)
   return [];
  if(this.selectedItemsCache.length == 0)
   this.selectedItemsCache = this.GetSelectedItemsCore();
  return this.selectedItemsCache;
 },
 GetSelectedItemsCore: function(){
  var selectedItems = [];
  for(var i = 0; i < this.savedSelectedIndices.length; i++)
   selectedItems.push(this.listBoxControl.GetItem(this.savedSelectedIndices[i]));
  return selectedItems;
 },
 SetIndicesSelectionState: function(indices, selected){
  this.BeginSelectionUpdate();
  var controller = typeof(aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
  var itemCount = this.listBoxControl.GetItemCount();
  if(indices){
   for(var i = 0; i < indices.length; i++){
    var index = indices[i];
    if(index >= 0 && index < itemCount)
     this.SetItemSelectionState(indices[i], selected, controller);
   }
  } else
   this.SetAllItemsSelectionState(selected, controller);
  this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
  this.EndSelectionUpdate();
 },
 SetItemsSelectionState: function(items, selected){
  var indices = items ? this.ConvertItemsToIndices(items) : null;
  this.SetIndicesSelectionState(indices, selected);
 },
 SetValuesSelectionState: function(values, selected){
  var indices = values ? this.ConvertValuesToIndices(values)  : null;
  this.SetIndicesSelectionState(indices, selected);
 },
 ConvertValuesToIndices: function(values){
  var indices = [];
  for(var i = 0; i < values.length; i++)
   indices.push(this.listBoxControl.FindItemIndexByValue(values[i]));
  return indices;
 },
 ConvertItemsToIndices: function(items){
  var indices = [];
  for(var i = 0; i < items.length; i++)
   indices.push(items[i].index);
  return indices;
 },
 SelectIndices: function(indices){
  this.SetIndicesSelectionState(indices, true);
 },
 SelectItems: function(items){
  this.SetItemsSelectionState(items, true);
 },
 SelectValues: function(values){
  this.SetValuesSelectionState(values, true);
 },
 UnselectIndices: function(indices){
  this.SetIndicesSelectionState(indices, false);
 },
 UnselectItems: function(items){
  this.SetItemsSelectionState(items, false);
 },
 UnselectValues: function(values){
  this.SetValuesSelectionState(values, false);  
 },
 GetIsItemSelected: function(index){ 
  return _aspxArrayBinarySearch(this.GetSortedSelectedIndices(), index) > -1;
 },
 OnItemClick: function(index, evt){
  this.BeginSelectionUpdate();
  var ctrlKey = evt.ctrlKey || evt.metaKey;
  var shift = evt.shiftKey;
  if(ctrlKey)
   this.AddSelectedIndex(index);
  else if(shift){
   var startIndex = index > this.lastIndexFocusedWithoutShift ? this.lastIndexFocusedWithoutShift + 1 : index;
   var endIndex = index > this.lastIndexFocusedWithoutShift ? index : this.lastIndexFocusedWithoutShift - 1;
   this.SelectRangeIndicesOnly(startIndex, endIndex);
   this.SetFocusedIndexInternal(index, true);
  }else 
   this.SingleIndexSelection(index);
  this.EndSelectionUpdate();
 },
 OnItemCheckBoxClick: function(index, evt){
  this.BeginSelectionUpdate();
  this.AddSelectedIndex(index);
  this.EndSelectionUpdate();
 },
 AddSelectedIndex: function(index){
  this.SetFocusedIndexInternal(index, false);
  var indexInSelectedIndices = _aspxArrayIndexOf(this.savedSelectedIndices, index);
  var selectionOperation = indexInSelectedIndices == -1;
  this.SetItemSelectionState(index, selectionOperation);
  this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
 },
 SelectRangeIndicesOnly: function(startIndex, endIndex){
  this.BeginSelectionUpdate();
  var controller = typeof(aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
  var itemCount = this.GetItemCount();
  for(var i = 0; i < itemCount; i ++) {
   if(i == this.lastIndexFocusedWithoutShift) 
    continue;
   this.SetItemSelectionState(i, i >= startIndex && i <= endIndex, controller);
  }
  this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
  this.EndSelectionUpdate();
 },
 SingleIndexSelection: function(index){
  this.SetFocusedIndexInternal(-1, false);
  this.SelectRangeIndicesOnly(index, index);
  this.SetFocusedIndexInternal(index, false);
 },
 SetAllItemsSelectionState: function(selected, controller){
  this.BeginSelectionUpdate();
  this.savedSelectedIndices = [ ];
  var itemCount = this.GetItemCount();
  for(var i = 0; i < itemCount; i ++) {
   this.SetItemSelectionStateCore(i, selected, controller);
   if(selected)
    this.PushSelectedIndex(i);
   this.OnItemSelectionChanged(i, selected);
  }
  this.ResetSelectionCollectionsCache();
  this.EndSelectionUpdate();
 },
 SetItemSelectionState: function(itemIndex, selected, controller){
  this.SetItemSelectionStateCore(itemIndex, selected, controller);
  this.ResetSelectionCollectionsCache();
  var indexInSelectionArray = _aspxArrayIndexOf(this.savedSelectedIndices, itemIndex);
  if(selected && indexInSelectionArray == -1){
   this.PushSelectedIndex(itemIndex);
   this.OnItemSelectionChanged(itemIndex, true);
  }
  if(!selected && indexInSelectionArray != -1){
   this.RemoveSelectedIndexAt(indexInSelectionArray);
   this.OnItemSelectionChanged(itemIndex, false);
  }
 },
 GetFirstSelectedIndex: function(){
  var selectedIndices = this.GetSelectedIndices();
  var selectedIndicesCount = selectedIndices.length;
  var firstSelectedIndex = -1;
  if(selectedIndicesCount > 0){
   firstSelectedIndex = selectedIndices[0];
   for(var i = 1; i < selectedIndices.length; i++){
    if(firstSelectedIndex > selectedIndices[i])
     firstSelectedIndex = selectedIndices[i];
   }
  }
  return firstSelectedIndex;
 },
 PushSelectedIndex: function(index){
  this.savedSelectedIndices.push(index);
 },
 RemoveSelectedIndex: function(index){
  _aspxArrayRemove(this.savedSelectedIndices, index);
 },
 RemoveSelectedIndexAt: function(indexInArray){
  _aspxArrayRemoveAt(this.savedSelectedIndices, indexInArray);
 },
 SortSelectedIndices: function(){
  _aspxArrayIntegerAscendingSort(this.savedSelectedIndices);
  this.selectedIndicesSortingRequired = false;
 },
 SetItemSelectionStateCore: function(itemIndex, selected, controller){
  _aspxListBoxSingleSelectionHelper.prototype.SetItemSelectionState.call(this, itemIndex, selected, controller);
 },
 GetFocusedIndex: function(){
  return this.focusedIndex;
 },
 SetFocusedIndexInternal: function(index, isShiftPressed){
  if(!isShiftPressed)
   this.lastIndexFocusedWithoutShift = index;
  this.focusedIndex = index;
 },
 OnItemInserted: function(index){
  this.ResetSelectionCollectionsCache();
  _aspxListBoxSingleSelectionHelper.prototype.OnItemInserted.call(this, index);
  if(this.focusedIndex >= index)
   this.focusedIndex ++;
  for(var i = 0; i < this.savedSelectedIndices.length; i++){
   if(this.savedSelectedIndices[i] >= index)
    this.savedSelectedIndices[i]++;
  }
 },
 OnItemRemoved: function(index){
  this.ResetSelectionCollectionsCache();
  _aspxListBoxSingleSelectionHelper.prototype.OnItemRemoved.call(this, index);
  if(this.focusedIndex == index)
   this.focusedIndex = -1;
  else if(this.focusedIndex > index)
   this.focusedIndex --;
  if(this.GetIsItemSelected(index))
   this.RemoveSelectedIndex(index);
  for(var i = 0; i < this.savedSelectedIndices.length; i++){
   if(this.savedSelectedIndices[i] > index)
    this.savedSelectedIndices[i]--;
  }
  if(this.GetSelectedIndex() == -1)
   this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
 },
 ClearSelection: function(){
  this.ResetSelectionCollectionsCache();
  _aspxArrayClear(this.savedSelectedIndices);
  this.OnSelectionCleared();
  this.SetSelectedIndexCore(-1);
 }
});
_aspxCheckBoxListMultiSelectionHelper = _aspxCreateClass(_aspxListBoxMultiSelectionHelper, {
 OnItemClick: function(index){
  this.BeginSelectionUpdate();
  this.AddSelectedIndex(index);
  this.EndSelectionUpdate();
 },
 GetFocusedItemIndex: function(){
  return this.lastIndexFocusedWithoutShift;
 }
});
_aspxListBoxCheckSelectionHelper = _aspxCreateClass(_aspxListBoxMultiSelectionHelper, {
 OnItemClick: function(index, evt){
  this.BeginSelectionUpdate();
  if(evt.shiftKey)
   _aspxListBoxMultiSelectionHelper.prototype.OnItemClick.call(this, index, evt);
  else
   this.AddSelectedIndex(index);
  this.EndSelectionUpdate();
 }
});
ASPxClientListBox = _aspxCreateClass(ASPxClientListBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.freeUniqIndex = -1;
  this.isHasFakeRow = false;
  this.headerDiv = null;
  this.headerTable = null;
  this.listTable = null;
  this.sampleItemFirstTextCell = null;
  this.width = "";
  this.hasSampleItem = false;
  this.hoverClasses = [""];
  this.hoverCssArray = [""];
  this.selectedClasses = [""];
  this.selectedCssArray = [""];
  this.disabledClasses = [""];
  this.disabledCssArray = [""];
  this.imageCellExists = false;
  this.scrollHandlerLockCount = 0;
  this.columnFieldNames = [];
  this.textFormatString = "";
  this.defaultImageUrl = "";
  this.selectionMode = 0;
  this.initSelectedIndices = [];
  this.itemHorizontalAlign = "";
  this.emptyTextRowCellIndices = null;
  this.allowMultipleCallbacks = false;
  this.isCallbackMode = false;
  this.callbackPageSize = -1;
  this.isTopSpacerVisible = false;
  this.isBottomSpacerVisible = false;
  this.serverIndexOfFirstItem = 0;
  this.scrollHelper = null;
  this.changeSelectAfterCallback = 0;
  this.ownerControl = null;
  this.SampleItem = null;
  this.scrollDivElement = null;
  this.scrollPageSize = 4;
  this.itemsValue = [];
  this.cachedValue = null;
  this.tempCache = new ASPxClientTemporaryCache();
  this.sizingConfig.adjustControl = true;
  this.disableScrolling = false;
  this.icbFocusedStyle = null;
  this.icbImageProperties = null;
  this.internalCheckBoxCollection = null;
  this.focusableCheckInput = null;
  this.nativeCheckOnFocusHandler = null;
 },
 Initialize: function() {   
  this.LockScrollHandler();
  this.InitDXTextAttributes();
  this.InitScrollPos();
  if(__aspxWebKitTouchUI && !this.disableScrolling)
   ASPxClientTouchUI.MakeScrollable(this.GetScrollDivElement(), {showHorizontalScrollbar: false});
  this.CreateInternalCheckBoxCollection();
  this.InitSelection();
  this.AdjustControl();
  this.InitializeLoadOnDemand();
  this.UnlockScrollHandler();
  this.freeUniqIndex = this.GetItemCount();
  ASPxClientEdit.prototype.Initialize.call(this);
  if(__aspxFirefox)
   _aspxSetAttribute(this.GetScrollDivElement(), "tabIndex", "-1");
 },
 InitDXTextAttributes: function(){
  if(this.emptyTextRowCellIndices != null){
   var itemWithDXTextCount = this.emptyTextRowCellIndices.length;
   for(var i = 0; i < itemWithDXTextCount; i++){
    var itemIndex = this.emptyTextRowCellIndices[i][0];
    var cellIndices = this.emptyTextRowCellIndices[i][1];
    var itemRow = this.GetItemRow(itemIndex);
    for(var j = 0; j < cellIndices.length; j++){
     _aspxSetAttribute(itemRow.cells[cellIndices[j]], "DXText", "");
    }
   }
  }
 },
 InitSelection: function(){
  var valueFromLastTime = this.GetValueFromValueInput();
  if(this.MultiSelectionMode()){
   if(valueFromLastTime != ""){
    var serialiser = this.GetSerializingHelper();
    var selectedValuesFromLastTime = serialiser.DeserializeValues(valueFromLastTime);
    var selectedIdicesFromLastTime = [];
    for(var i = 0; i < selectedValuesFromLastTime.length; i++)
     selectedIdicesFromLastTime.push(this.FindItemIndexByValue(selectedValuesFromLastTime[i]));
    this.SelectIndices(selectedIdicesFromLastTime);
   } else
    this.SelectIndices(this.initSelectedIndices);
  } else {
   var selectedIndex = (valueFromLastTime != "") ? 
    this.FindItemIndexByValue(valueFromLastTime) : this.GetSelectedIndexInternal();
   this.SetSelectedIndexInternal(selectedIndex);
   this.SelectIndexSilent(selectedIndex);
  }
  this.CacheValue();
 },
 CreateInternalCheckBoxCollection: function() {
  if (this.IsNativeCheckBoxes() || this.internalCheckBoxCollection)
   return;
  this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.icbImageProperties, false, false, null, true);
  var count = this.GetItemCount();
  var enabled = this.GetEnabled();
  var changeEventMethod = _aspxChangeEventsMethod(enabled);
  for(var i = 0; i < count; i++)
   this.AddInternalCheckBoxToCollectionCore(i, enabled, changeEventMethod);
 },
 AddInternalCheckBoxToCollection: function(index) {
  if(!this.internalCheckBoxCollection)
   return;
  var enabled = this.GetEnabled();
  var changeEventMethod = _aspxChangeEventsMethod(enabled);
  this.AddInternalCheckBoxToCollectionCore(index, enabled, changeEventMethod);
 },
 AddInternalCheckBoxToCollectionCore: function(index, enabled, changeEventMethod) {
  var inputElement = this.GetItemCheckBoxInput(index)
  if(inputElement) {
   var internalCheckBox = this.internalCheckBoxCollection.Add(this.GetInternalCheckBoxKey(index), inputElement);
   internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
   internalCheckBox.SetEnabled(enabled);
   internalCheckBox.autoSwitchEnabled = false;
   this.ChangeSpecialInputEnabledAttributes(inputElement, changeEventMethod, true);
   internalCheckBox.CheckedChanged.AddHandler(
    function(s, e) {
     if(_aspxGetKeyCode(e) == ASPxKey.Space) {
      var element = _aspxGetEventSource(e);
      this.GetItemSelectionHelper().OnItemCheckBoxClick(this.FindInternalCheckBoxIndex(element), e);
     }
    }.aspxBind(this)
   );
   internalCheckBox.Focus.AddHandler(
    function(s, e) {
     var index = this.FindInternalCheckBoxIndex(s.mainElement);
     window.setTimeout(function() { this.ScrollToItemVisible(index); }.aspxBind(this), 50);
    }.aspxBind(this)
   );
  }
 },
 ClearInternalCheckBoxCollection: function() {
  if(this.internalCheckBoxCollection)
   this.internalCheckBoxCollection.Clear();
 },
 RemoveInternalCheckBoxFromCollecntion: function(index) {
  if(this.internalCheckBoxCollection)
   this.internalCheckBoxCollection.Remove(this.GetItemValue(index));
 },
 GetInternalCheckBoxKey: function(index) {
  return this.name + __aspxNameSeparator + this.GetItemValue(index);
 },
 GetInternalCheckBox: function (index) {
  if (this.internalCheckBoxCollection == null)
   this.CreateInternalCheckBoxCollection()
  if(this.internalCheckBoxCollection)
   return this.internalCheckBoxCollection.Get(this.GetInternalCheckBoxKey(index));
  return null;
 },
 IsNativeCheckBoxes: function() {
  return !this.icbImageProperties;
 },
 SetCheckBoxChecked: function(index, checked) {
  if(this.IsNativeCheckBoxes()) {
   var checkBox = this.GetItemCheckBoxInput(index);
   checkBox.checked = checked;
  }
  else {
   var internalCheckBox = this.GetInternalCheckBox(index);
   internalCheckBox.SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
  }
 },
 SetCheckBoxEnabled: function(index, enabled) {
  var inputElement; 
  if(this.IsNativeCheckBoxes()) {
   var checkbox = this.GetItemCheckBoxInput(index);
   checkbox.disabled = !enabled;
   this.ChangeNativeCheckEnabledAttributes(checkbox, _aspxChangeEventsMethod(this.GetEnabled()));
   inputElement = checkbox;
  }
  else {
   var internalCheckBox = this.GetInternalCheckBox(index);
   internalCheckBox.SetEnabled(enabled);
   inputElement = internalCheckBox.inputElement;
  }
  this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
 },
 ClearItems: function() {
  ASPxClientListBoxBase.prototype.ClearItems.call(this);
  this.ClearInternalCheckBoxCollection();
 },
 OnDelayedSpecialFocusMouseDown: function(evt) {
  if(this.GetIsCheckColumnExists())
   this.SetFocusableCheckInput(this.GetCheckBoxInputFromEvent(evt));
  ASPxClientListBoxBase.prototype.OnDelayedSpecialFocusMouseDown.call(this, evt);
 },
 GetCheckBoxInputFromEvent: function(evt) {
  var element = _aspxGetEventSource(evt);
  if(this.IsNativeCheckBoxes())
   return element.type == "checkbox" ? element : null;
  var index = this.FindInternalCheckBoxIndex(element);
  return index > -1 ? this.GetInternalCheckBox(index).inputElement : null;
 },
 FindInternalCheckBoxIndex: function(element) {
  var level = 5;
  while(level > 0) {
   var id = element.id;
   if(id && element.tagName == "TD" && id.slice(-1) == __aspxLBIPostfixes[0])
    return element.parentNode.rowIndex;
   element = element.parentNode;
   level--;
  }
  return -1;
 },
 IsCheckBoxClicked: function(evt) {
  return !!this.GetCheckBoxInputFromEvent(evt);
 },
 GetFocusableInputElement: function() {
  return this.focusableCheckInput || this.GetInputElement();
 },
 SetFocusableCheckInput: function(element) {
  this.focusableCheckInput = element;
 },
 OnFocusCore: function() {
  if(this.UseDelayedSpecialFocus())
   window.clearTimeout(this.specialFocusTimer);
  if(this.focused) {
   this.UnlockFocusEvents();
   return;
  }
  ASPxClientListBoxBase.prototype.OnFocusCore.call(this);
 },
 OnLostFocusCore: function() {
  if(!this.IsFocusEventsLocked())
   this.SetFocusableCheckInput(null);
  ASPxClientListBoxBase.prototype.OnLostFocusCore.call(this);
 },
 GetValueFromValueInput: function(){
  if(this.ShouldRestoreSelectionAfterBackPressed()){
   var valueInput = this.FindStateInputElement();
   if(_aspxIsExistsElement(valueInput))
      return valueInput.value;
  }
  return "";
 },
 ShouldRestoreSelectionAfterBackPressed: function(){
  return __aspxIE || __aspxChrome;
 },
 GetInitSelectedIndex: function(){
  return this.savedSelectedIndex;
 },
 CacheValue: function(){
  this.cachedValue = this.GetValue();
 },
 InitScrollPos: function(){ 
  if(!this.isComboBoxList && this.isCallbackMode && this.GetInitSelectedIndex() == -1)
   this.GetScrollDivElement().scrollTop = 0;
 },
 InitializeLoadOnDemand: function(){
  var loadOnDemandRequired = this.isCallbackMode && this.GetEnabledByServer();
  this.scrollHelper = loadOnDemandRequired ? new _aspxListBoxScrollCallbackHelper(this) : new _aspxListBoxScrollCallbackHelperBase(this);
 },
 InlineInitialize: function(){
  this.InitializeNativeCheckHandlers();
  this.LockScrollHandler();
  if(!this.disableScrolling)
   this.InitSpecialKeyboardHandling();
  this.InitializeItemsAttributes();
  this.GenerateStateItems();
  this.UnlockScrollHandler();
  ASPxClientListBoxBase.prototype.InlineInitialize.call(this);
 },
 InitializeNativeCheckHandlers: function() {
  this.nativeCheckOnFocusHandler = function(evt) {
   this.SetFocusableCheckInput(_aspxGetEventSource(evt));
  }.aspxBind(this);
 },
 ChangeNativeCheckEnabledAttributes: function(element, method) {
  if(this.nativeCheckOnFocusHandler)
   method(element, "focus", this.nativeCheckOnFocusHandler);
 },
 InitializeItemsAttributes: function() { 
  var listTable = this.GetListTable();
  if(this.isHasFakeRow){
   this.LockSynchronization();
   this.ClearItems();
   this.UnlockSynchronization();
  }
  listTable.ListBoxId = this.name;  
  var rows = listTable.rows;
  var count = rows.length;
  var rowIdConst = this.name + "_";
  if(this.hasSampleItem)
   this.InitializeItemAttributes(this.GetSampleItemRow(), rowIdConst + __aspxLBSIIdSuffix);
  rowIdConst += __aspxLBIIdSuffix;
  for(var i = 0; i < count; i ++)
   this.InitializeItemAttributes(rows[i], rowIdConst + i);
 },
 InitializeItemAttributes: function(row, rowId) {
  var cells = row.cells;
  var itemCellsIdSuffixes = this.GetItemCellsIdPostfixes();
  for(var i = 0; i < row.cells.length; i++) {
   cells[i].style.textAlign = this.itemHorizontalAlign;
   cells[i].id = rowId + itemCellsIdSuffixes[i];
  }
  if(this.GetIsCheckColumnExists() && this.IsNativeCheckBoxes() && rowId != this.GetSampleItemRowID()) {
   var input = this.GetItemCheckBoxInput(row.rowIndex);
   this.ChangeNativeCheckEnabledAttributes(input, _aspxChangeEventsMethod(this.GetEnabled()));
   this.ChangeSpecialInputEnabledAttributes(input, _aspxChangeEventsMethod(this.GetEnabled()));
  }
 },
 InitializePageSize: function(){
  var divElement = this.GetScrollDivElement();
  var listTable = this.GetListTable();
  var rows = listTable.rows;
  var count = rows.length;
  if(divElement && count > 0)
   this.scrollPageSize = Math.round(divElement.clientHeight / rows[0].offsetHeight) - 1;
 },
 GenerateStateItems: function() {
  if(typeof(aspxGetStateController) == "undefined") return;
  var itemCellsIdSuffixes = this.GetItemCellsIdPostfixes();
  var count = this.GetItemCount();
  var constName = this.name + "_" + __aspxLBIIdSuffix;
  var name = "";
  var controller = aspxGetStateController();
  var i = this.hasSampleItem ? -1 : 0 ;
  for(; i < count; i ++){
   name = constName + i;
   if(!__aspxWebKitTouchUI)
    controller.AddHoverItem(name, this.hoverClasses, this.hoverCssArray, itemCellsIdSuffixes, null, null, true);
   controller.AddSelectedItem(name, this.selectedClasses, this.selectedCssArray, itemCellsIdSuffixes, null, null, true);
   controller.AddDisabledItem(name, this.disabledClasses, this.disabledCssArray, itemCellsIdSuffixes, null, null, true);
  }
 },
 AfterInitialize: function() {
  if(this.disableScrolling) {
   var scrollDiv = this.GetScrollDivElement();
   var mainElement = this.GetMainElement();
   scrollDiv.style.height = mainElement.style.height = _aspxGetClearClientHeight(this.GetListTable()) + "px";
  }
  this.CallbackSpaceInit(true);
  this.constructor.prototype.AfterInitialize.call(this);
 },
 GetEnabledByServer: function(){
  return this.enabled;
 },
 SetEnabled: function(enabled){  
  ASPxClientListBoxBase.prototype.SetEnabled.call(this, enabled);
  this.CallbackSpaceInit(false);
 },
 CallbackSpaceInit: function(isInitialization){
  if(this.isCallbackMode){
   this.SetBottomScrollSpacerVisibility(this.GetScrollSpacerVisibility(false));
   this.SetTopScrollSpacerVisibility(this.GetScrollSpacerVisibility(true));
   if(isInitialization || this.isComboBoxList){
    this.EnsureSelectedItemVisible();
    _aspxAttachEventToElement(this.GetScrollDivElement(), "scroll", aspxLBScroll);
   }
  }
 },
 GetListTable: function() {
  return this.tempCache.Get("ListTable", this.GetListTableCore, this);
 },
 GetListTableCore: function(){
  if(!_aspxIsExistsElement(this.listTable))
   this.listTable = _aspxGetElementById(this.name + __aspxLTableIdSuffix);
  return this.listTable;
 },
 GetListTableHeight: function(){
  return this.GetListTable().offsetHeight;
 },
 GetHeaderDivElement: function(){
  if(!_aspxIsExistsElement(this.headerDiv))
   this.headerDiv = _aspxGetElementById(this.name + __aspxLBHeaderDivIdSuffix);
  return this.headerDiv;
 },
 GetHeaderTableElement: function(){
  if(!_aspxIsExistsElement(this.headerTable)){
   var headerDiv = this.GetHeaderDivElement();
   this.headerTable = _aspxGetChildByTagName(headerDiv, "table", 0);
  }
  return this.headerTable;
 },
 GetScrollDivElement: function(){
  if(!_aspxIsExistsElement(this.scrollDivElement))
   this.scrollDivElement = document.getElementById(this.name + __aspxLBDSuffix);
  return this.scrollDivElement;
 },
 GetItemElement: function(index){
  var itemElement = this.GetItemRow(index);
  return __aspxWebKitFamily && itemElement != null ? itemElement.cells[0] : itemElement;
 },
 GetItemRow: function(index){
  var listTable = this.GetListTable();
  if(listTable && index >= 0)
   return listTable.rows[index] || null;
  return null;
 },
 GetItemTexts: function(item) {
  return item.texts ? item.texts : [ item.text ];
 },
 GetItemCount: function(){
  var lbt = this.GetListTable();
  if(lbt)
   return this.GetListTable().rows.length;
  return 0;
 },
 GetItemCellCount: function(){
  if(this.hasSampleItem)
   return this.GetSampleItemRow().cells.length;
  else if(this.GetItemCount() > 0){
   var listTable = this.GetListTable();
   return listTable.rows[0].cells.length;
  }
  return 0;
 },
 GetItemTextCellCount: function(){
  return this.GetItemCellCount() - this.GetItemFirstTextCellIndex();
 },
 GetItemFirstTextCellIndex: function(){
    var itemFirstTextCellIndex  = 0;
  if(this.GetIsCheckColumnExists())
   itemFirstTextCellIndex++;
  if(this.imageCellExists)
   itemFirstTextCellIndex++;
  return itemFirstTextCellIndex;
 },
 GetItemFirstTextCell: function(index){
  var rowElement = this.GetItemRow(index);
  if(rowElement == null) 
   return null;
   return rowElement.cells[this.GetItemFirstTextCellIndex()];
 },
 GetItemTopOffset: function(index){
  var itemElement = this.GetItemElement(index);
  return (itemElement != null) ? itemElement.offsetTop + this.GetTopScrollSpacerHeight() : 0;
 },
 GetItemHeight: function(index){
  var itemElement = this.GetItemElement(index);
  return (itemElement != null) ? itemElement.offsetHeight : 0;
 },
 GetItemCheckBoxInput: function(index){
  var itemRow = this.GetItemRow(index);
  var checkBoxCell = itemRow.cells[this.GetCheckBoxCellIndex()];
  return _aspxGetElementsByTagName(checkBoxCell, "input")[0];
 },
 GetIsCheckColumnExists: function(){
  if(!this.checkCellExists)
   this.checkCellExists = this.CheckColumnSelectionMode();
  return this.checkCellExists;
 },
 GetCheckBoxCellIndex: function(){
  return 0;
 },
 GetImageCellIndex: function(){
  return this.GetIsCheckColumnExists() ? 1 : 0;
 },
 GetItemCellsIdPostfixes: function(){
  if(this.itemCellsIdPostfixes == null){
   this.itemCellsIdPostfixes = [];
   var i = 0;
   if(this.GetIsCheckColumnExists()) {
    this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[0]);
    i++;
   }
   if(this.imageCellExists){
    this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[1]);
    i++;
   }
   var cellCount = this.GetItemCellCount();
   for(; i < cellCount; i++) 
    this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[2] + i);
  }
  return this.itemCellsIdPostfixes;
 },
 AdjustControl: function (nestedCall) {
  if(this.IsAdjustmentRequired()) 
   this.heightCorrected = false;
  ASPxClientEdit.prototype.AdjustControl.call(this, nestedCall);
 },
 AdjustControlCore: function(){
  if(this.disableScrolling)
   return;
  ASPxClientEdit.prototype.AdjustControlCore.call(this);
  this.CorrectSize();
  this.EnsureSelectedItemVisible();
  if(!this.isComboBoxList && __aspxIE && __aspxBrowserVersion >= 7) 
   this.CorrectWidth();
 },
 CorrectSize: function() {
  if(this.isComboBoxList || this.disableScrolling)
   return;
  this.LockScrollHandler();
  this.CorrectHeight();
  this.CorrectWidth();
  this.InitializePageSize();
  this.UnlockScrollHandler();
 },
 OnCorrectSizeByTimer: function() {
  if(this.IsVisible())
   this.CorrectSize();
 }, 
 SetProtectionFromFlick_inFF: function(changeVisibility, changeDisplay){
  if(!__aspxFirefox) return;
  var listTable = this.GetListTable();
  if(changeVisibility)
   listTable.style.visibility = "hidden";
  if(changeDisplay)
   listTable.style.display = "none";
 },
 ResetProtectionFromFlick_inFF: function(){
  if(!__aspxFirefox) return;
  var listTable = this.GetListTable();
  listTable.style.visibility = "";
  listTable.style.display = "";
 },
 CorrectHeight: function(){
  if(__aspxFirefox && this.heightCorrected) return; 
  this.heightCorrected = true;
  var mainElement = this.GetMainElement();
  var divElement = this.GetScrollDivElement();
  divElement.style.height = "0px";
  var height = mainElement.offsetHeight;
  divElement.style.height = height + "px";
  var extrudedHeight = mainElement.offsetHeight;
  var heightCorrection = extrudedHeight - height;
  if(heightCorrection > 0){
   var divHeight = divElement.offsetHeight;
   this.SetProtectionFromFlick_inFF(true, false);
   divElement.style.height = (divHeight - heightCorrection) + "px";
   this.ResetProtectionFromFlick_inFF(); 
   extrudedHeight = mainElement.offsetHeight;
   var paddingsHeightCorrection = extrudedHeight - height;
   if(paddingsHeightCorrection > 0)
    divElement.style.height = (divHeight - heightCorrection - paddingsHeightCorrection) + "px";
  } 
 },
 IsMultiColumn: function(){
  return this.columnFieldNames.length > 0;
 },
 CorrectWidth: function(){
  if(this.IsMultiColumn())
   this.CorrectMultiColumnWidth();
  else
   this.CorrectNonMultiColumnWidth();
 },
 CorrectMultiColumnWidth: function(){
  var scrollDivElement = this.GetScrollDivElement();
  var scrollBarWidth = this.GetVerticalScrollBarWidth(); 
  var browserPutsScrollBarOnContent = __aspxIE && __aspxBrowserVersion < 8;
  if(browserPutsScrollBarOnContent)
   scrollDivElement.style.paddingRight = scrollBarWidth + "px";
  if(__aspxIE && (__aspxBrowserVersion == 6 || __aspxBrowserVersion == 7)){
   this.CollapseMultiColumnHeaderWidth();
   var listTable = this.GetListTable();
   var mainElement = this.GetMainElement();
   listTable.style.width = "";
   scrollDivElement.style.width = (mainElement.clientWidth - scrollBarWidth) + "px";
   listTable.style.width = "100%";
  }
  this.CorrectMultiColumnHeaderWidth(scrollBarWidth);
  if(this.rtl && __aspxIE && __aspxBrowserVersion < 8)
   this.FixIE7MultiColumnRtl();   
 },
 CollapseMultiColumnHeaderWidth:function(){
  var headerDivElement = this.GetHeaderDivElement();
  headerDivElement.style.width = "0px";
 },
 CorrectMultiColumnHeaderWidth: function(scrollBarWidth){
  var scrollDivElement = this.GetScrollDivElement();
  var headerDivElement = this.GetHeaderDivElement();
  if(_aspxIsExistsElement(headerDivElement)){
   var headerTable;
   if(__aspxWebKitFamily){
    headerTable = this.GetHeaderTableElement();
    if(!_aspxIsExistsElement(headerTable))
     headerTable = null;
   }
   if(headerTable)
    headerTable.style.width = "0";
   if(__aspxIE && __aspxBrowserVersion < 8)
    headerDivElement.style.width = scrollDivElement.style.width;
   headerDivElement.style.paddingRight = scrollBarWidth + "px";
   if(headerTable)
    window.setTimeout(function() { headerTable.style.width = "100%"; }, 0);
  }
 },
 FixIE7MultiColumnRtl: function() {
  var tables = [ this.GetHeaderTableElement(), this.GetListTable() ];
  for(var i = 0; i < tables.length; i++) {
   var table = tables[i];   
   if(!table) continue;
   var backup = table.style.tableLayout;
   table.style.tableLayout = "auto";   
   table.offsetWidth;
   table.style.tableLayout = backup;
  }
 },
 CorrectNonMultiColumnWidth: function(){
  var divElement = this.GetScrollDivElement();
  if(__aspxIE && __aspxBrowserMajorVersion < 8) {
   var mainElement = this.GetMainElement();
   var scrollBarWidth = this.GetVerticalScrollBarWidth(); 
   mainElement.style.width = "";
   divElement.style.width = "100%";
   if(__aspxIE)
    divElement.style.paddingRight = "0px";
   if(this.width != ""){
    mainElement.style.width = this.width;
    if (this.width !== "100%") {
     divElement.style.width = "0px";
     var widthCorrectrion = scrollBarWidth;
     var correctedWidth = mainElement.clientWidth - widthCorrectrion;
     if (correctedWidth >= 0)
      divElement.style.width = correctedWidth + "px";
    }
   } else {
    var widthCorrectrion = 0;
    if(this.IsListBoxWidthLessThenList())
     widthCorrectrion -= scrollBarWidth;
    divElement.style.width = (mainElement.clientWidth + widthCorrectrion) + "px";
   }
   if(__aspxIE)
    divElement.style.paddingRight = scrollBarWidth + "px";
  } else {
   if(this.width == ""){
    var listTable = this.GetListTable();
    var mainElement = this.GetMainElement();
    if(listTable.offsetWidth != 0 || !__aspxNetscapeFamily){ 
     divElement.style.width = (listTable.offsetWidth + this.GetVerticalScrollBarWidth()) + "px";
     if(__aspxFirefox) 
      mainElement.style.width = divElement.offsetWidth + "px";
    }
   } else {  
    var mainElement = this.GetMainElement();  
    mainElement.style.width = this.width;
    if (this.width !== "100%") {
     divElement.style.width = __aspxWebKitFamily ? "1px" : "0px";
     divElement.style.width = mainElement.clientWidth + "px";
    }
   }
  }
 },
 UpdateAdjustmentFlags: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = _aspxGetCurrentStyle(mainElement);
   this.UpdatePercentSizeConfig([this.width], [mainElementStyle.height, mainElement.style.height]);
  }
 },
 EnsureSelectedItemVisible: function(){
  var index = this.GetSelectedIndex();
  if(index != -1)
   this.MakeItemVisible(index);
 },
 MakeItemVisible: function(index){
  if(!this.IsItemVisible(index))
   this.ScrollItemToTop(index);
 },
 IsItemVisible: function(index){
  var scrollDiv = this.GetScrollDivElement();
  var itemElement = this.GetItemElement(index);
  var topVisible = false;
  var bottomVisible = false;
  if(itemElement != null){
   var itemOffsetTop = itemElement.offsetTop + this.GetTopScrollSpacerHeight();
   topVisible = itemOffsetTop >= scrollDiv.scrollTop;
   bottomVisible = itemOffsetTop + itemElement.offsetHeight < scrollDiv.scrollTop + scrollDiv.clientHeight;
  }
  return (topVisible && bottomVisible);
 },
 ScrollItemToTop: function(index){
  this.LockScrollHandler();
  this.SetScrollTop(this.GetItemTopOffset(index));
  this.UnlockScrollHandler();
 },
 ScrollToItemVisible: function(index){
  if(!this.IsItemVisible(index)){
   var scrollDiv = this.GetScrollDivElement();
   var scrollTop = scrollDiv.scrollTop;
   var scrollDivHeight = scrollDiv.clientHeight;
   var itemOffsetTop = this.GetItemTopOffset(index);
   var itemHeight = this.GetItemHeight(index);
   var itemAbove = scrollTop > itemOffsetTop;
   var itemBelow = scrollTop  + scrollDivHeight < itemOffsetTop + itemHeight;
   if(itemAbove)
    scrollDiv.scrollTop = itemOffsetTop;
   else if(itemBelow){
    var scrollPaddings = scrollDiv.scrollHeight - this.GetListTable().offsetHeight - 
     this.GetTopScrollSpacerHeight() - this.GetBottomScrollSpacerHeight();
    scrollDiv.scrollTop = itemOffsetTop + itemHeight - scrollDivHeight + scrollPaddings;
   }
  }
 },
 SetScrollTop: function(scrollTop){
  var scrollDiv = this.GetScrollDivElement();
  if(scrollDiv){ 
   scrollDiv.scrollTop = scrollTop;
   if(__aspxOpera) 
    this.CachedScrollTop();
  }   
 },
 CachedScrollTop: function(){
  var scrollDiv = this.GetScrollDivElement();
  scrollDiv.cachedScrollTop = scrollDiv.scrollTop;
 },
 RestoreScrollTopFromCache: function(){
    var scrollDiv = this.GetScrollDivElement();
    if(scrollDiv && _aspxIsExists(scrollDiv.cachedScrollTop))
   scrollDiv.scrollTop = scrollDiv.cachedScrollTop;
 },
 IsListBoxWidthLessThenList: function(){
  var divElement = this.GetScrollDivElement();
  var listTable = this.GetListTable();
  var listTabelWidth = listTable.style.width;
  var isLess = false;
  listTable.style.width = "";
  isLess = listTable.offsetWidth < divElement.offsetWidth;
  listTable.style.width = listTabelWidth;
  return isLess;
 },
 GetVerticalScrollBarWidth: function(){
  var divElement = this.GetScrollDivElement(); 
  if(!this.verticalScrollBarWidth || this.verticalScrollBarWidth <= 0){
   this.verticalScrollBarWidth = this.GetVerticalScrollBarWidthCore(divElement);
   return this.verticalScrollBarWidth;
  } else
   return this.GetIsVerticalScrollBarVisible(divElement) ? this.verticalScrollBarWidth : 0;
 },
 GetIsVerticalScrollBarVisible: function(divElement){
  var verticalOverflow = this.GetVerticalOverflow(divElement);
  if(verticalOverflow != "auto"){ 
   var listTable = this.GetListTable();
   return divElement.clientHeight < listTable.offsetHeight;
  } else {
   var borderWidthWithScroll = divElement.offsetWidth - divElement.clientWidth;
   return borderWidthWithScroll == this.scrollDivBordersWidthWithScroll;
  }
 },
 GetVerticalScrollBarWidthCore: function(divElement){
  var overflowYReserv = this.GetVerticalOverflow(divElement);
  this.SetVerticalOverflow(divElement, "auto");
  this.scrollDivBordersWidthWithScroll = divElement.offsetWidth - divElement.clientWidth;
  if(__aspxIE && __aspxBrowserVersion >= 7)
   return this.scrollDivBordersWidthWithScroll; 
  this.SetProtectionFromFlick_inFF(false, true);
  this.SetVerticalOverflow(divElement, "hidden");
  var bordersWidthWithoutScroll = divElement.offsetWidth - divElement.clientWidth;
  this.SetVerticalOverflow(divElement, overflowYReserv);
  this.ResetProtectionFromFlick_inFF();
  return this.scrollDivBordersWidthWithScroll - bordersWidthWithoutScroll;
 },
 GetVerticalOverflow: function(element){
  if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
   return element.style.overflowY;
  return element.style.overflow;
 },
 SetVerticalOverflow: function(element, value){
  if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
   element.style.overflowY = value;
  else
   element.style.overflow = value;
 },
 MultiSelectionMode: function(){
  return this.selectionMode != ListBoxSelectionMode.Single;
 },
 CheckColumnSelectionMode: function(){
  return this.selectionMode == ListBoxSelectionMode.CheckColumn;
 },
 OnItemClick: function(index, evt){
  if(!this.isInitialized) 
   return;
  if(this.readOnly)
   return this.OnItemClickOrDblClickReadOnly();
  if(this.CheckColumnSelectionMode() && this.IsCheckBoxClicked(evt))
   this.GetItemSelectionHelper().OnItemCheckBoxClick(index, evt);
  else
   this.GetItemSelectionHelper().OnItemClick(index, evt);
  this.SetFocus();
  this.RaiseItemClick();
 },
 OnItemClickOrDblClickReadOnly: function(){
  return false;
 },
 OnItemDblClick: function(){
  if(this.readOnly)
   return this.OnItemClickOrDblClickReadOnly();
  return this.RaiseItemDoubleClick();
 },
 CanChangeSelection: function(){
  return !this.readOnly || !this.isInitialized;
 },
 SelectIndexSilent: function(index){ 
  return this.SetItemSelectionStateSilent(index);
 },
 SetItemSelectionStateSilent: function(index){
  if(!this.CanChangeSelection())
   return;
  var oldSelectionIndex = this.GetSelectedIndex();
  this.LockSelectionEvents();
  this.SetSelectedIndexCore(index);
  this.UnlockSelectionEvents();
  return index != oldSelectionIndex;
 },
 SetItemSelectionAppearance: function(index, selected, controller){
  if(!this.CanChangeSelection())
   return;
  if(!controller)
   controller = aspxGetStateController();
  if(!this.isInitialized)
   this.SetHoverElement(null);
  var itemFirstTextCell = this.GetItemFirstTextCell(index);
  if(selected)
   controller.SelectElementBySrcElement(itemFirstTextCell);
  else
   controller.DeselectElementBySrcElement(itemFirstTextCell);
  if(!this.isInitialized)
   this.SetHoverElement(itemFirstTextCell);
 },
 GetItemSelectionHelper: function(){
  if(!this.itemSelectionHelper)
   this.itemSelectionHelper = this.CreateItemSelectionHelper();
  return this.itemSelectionHelper;
 },
 CreateItemSelectionHelper: function(){
  if(this.selectionMode == ListBoxSelectionMode.Single)
   return new _aspxListBoxSingleSelectionHelper(this);
  else if(this.selectionMode == ListBoxSelectionMode.Multiple)
   return new _aspxListBoxMultiSelectionHelper(this);
  else if(this.selectionMode == ListBoxSelectionMode.CheckColumn)
   return new _aspxListBoxCheckSelectionHelper(this);
 },
 GetValue: function(){
  var index = this.GetSelectedIndex();
  if(0 <= index && index < this.itemsValue.length)
   return this.itemsValue[index];
  return null;
 },
 SetValue: function(value){
  var index = this.FindItemIndexByValue(value);
  this.SetSelectedIndex(index);
 },
 GetSelectedItem: function(){
  var index = this.GetSelectedIndex();
  return this.GetItem(index);
 },
 GetSelectedIndex: function(){
  if(!this.isInitialized)
   return this.GetSelectedIndexInternal();
  return this.GetItemSelectionHelper().GetSelectedIndex();
 },
 SetSelectedIndex: function(index){
  this.LockSelectionEvents();
  this.SetSelectedIndexCore(index);
  this.EnsureSelectedItemVisible(index);
  this.UnlockSelectionEvents();
 },
 SetSelectedIndexCore: function(index){
  this.GetItemSelectionHelper().SetSelectedIndex(index);
 },
 GetSelectedIndices: function(){
  return this.GetItemSelectionHelper().GetSelectedIndices();
 },
 GetSelectedValues: function(){ 
  return this.GetItemSelectionHelper().GetSelectedValues();
 },
 GetSelectedItems: function(){
  return this.GetItemSelectionHelper().GetSelectedItems();
 },
 SelectAll: function(){
  this.SelectIndices();
 },
 UnselectAll: function(){
  this.UnselectIndices();
 },
 SelectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectIndices(indices);
  this.UnlockSelectionEvents();
 },
 SelectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectItems(items);
  this.UnlockSelectionEvents();
 },
 SelectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectValues(values);
  this.UnlockSelectionEvents();
 },
 UnselectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectIndices(indices);
  this.UnlockSelectionEvents();
 },
 UnselectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectItems(items);
  this.UnlockSelectionEvents();
 },
 UnselectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectValues(values);
  this.UnlockSelectionEvents();
 },
 GetIsItemSelected: function(index){
  return this.GetItemSelectionHelper().GetIsItemSelected(index);
 },
 GetFocusedIndex: function(){
  return this.GetItemSelectionHelper().GetFocusedIndex();
 },
 UpdateInternalState: function(){
  this.UpdateHiddenInputs();
 },
 IsUpdateHiddenInputsLocked: function(){
  return this.GetItemSelectionHelper().IsUpdateInternalSelectionStateLocked();
 },
 UpdateHiddenInputs: function(){
  if(this.IsUpdateHiddenInputsLocked())
   return;
  if(this.MultiSelectionMode()){ 
   var element = this.FindStateInputElement();
   if(_aspxIsExistsElement(element)) {
    var sb = [ ];
    var serialiser = this.GetSerializingHelper();
    var selectedIndices = this.GetSelectedIndices();
    for(var i = 0; i < selectedIndices.length; i++)
     serialiser.SerializeAtomValue(sb, this.GetItemValue(selectedIndices[i]));
    element.value = sb.join("");
   }
  } else 
   ASPxClientListBoxBase.prototype.UpdateHiddenInputs.call(this);
 },
 UseDelayedSpecialFocus: function() { 
  return true;
 },
 ShowLoadingPanel: function() { 
  if(!this.isComboBoxList){
   var loadingParentElement = this.GetScrollDivElement().parentNode;
   this.CreateLoadingPanelWithAbsolutePosition(loadingParentElement);
  }
 },
 ShowLoadingDiv: function () {
  if(!this.isComboBoxList){
   var loadingParentElement = this.GetScrollDivElement().parentNode;
   this.CreateLoadingDiv(loadingParentElement);
  }
 },
 ParseCallbackResult: function(result){
  var gottenEgdeOfCollection = false;
  var nothingToLoad = result == "[]";
  var isLoadindToTopByScroll = this.scrollHelper.IsScrolledToTopSpacer();
  if(!nothingToLoad){
   var deserializedItems = this.DeserializeItems(result);
   this.LoadItemsFromCallback(isLoadindToTopByScroll, deserializedItems);
   gottenEgdeOfCollection = deserializedItems.length != this.callbackPageSize;
  }
  var noMoreItemsForLoadThisDirection = nothingToLoad || gottenEgdeOfCollection;
  this.SetScrollSpacerVisibility(isLoadindToTopByScroll, !noMoreItemsForLoadThisDirection);
  this.scrollHelper.Reset();
 },
 LoadItemsFromCallback: function(isToTop, deserializedItems){
  this.LockSynchronizationOnInternalCallback();
  this.BeginUpdate();
  var isMultiSelect = this.MultiSelectionMode();
  if(isToTop){
   var scrollHeightCorrection = 0;
   for(var i = deserializedItems.length - 1; i >= 0; i --){
    this.InsertItem(0, deserializedItems[i].texts, deserializedItems[i].value, deserializedItems[i].imageUrl);
    scrollHeightCorrection += this.GetItemHeight(0);
   } 
   this.GetScrollDivElement().scrollTop += scrollHeightCorrection;
   this.serverIndexOfFirstItem -= deserializedItems.length;
   if(this.serverIndexOfFirstItem < 0) this.serverIndexOfFirstItem = 0;
  } else {
   for(var i = 0; i < deserializedItems.length; i ++){
    var itemIndex = this.AddItem(deserializedItems[i].texts, deserializedItems[i].value, deserializedItems[i].imageUrl);
    this.SelectValueOnLoad(itemIndex, deserializedItems[i].selected, isMultiSelect);
   } 
  }
  if(this.changeSelectAfterCallback != 0) {
   var newIndex = this.GetSelectedIndex() + this.changeSelectAfterCallback;
   newIndex = this.GetAdjustedIndex(newIndex);
   this.SelectIndexSilent(newIndex);
   if(this.scrollHelper.isScrolledToTopSpacer)
    this.ScrollItemToTop(newIndex);
   else
    this.ScrollToItemVisible(newIndex);
  }
  this.EndUpdate();
  this.UnlockSynchronizationOnInternalCallback();
 },
 SelectValueOnLoad: function (index, selected, isMultiSelect) {
  if (selected && this.changeSelectAfterCallback == 0) {
   if (isMultiSelect) {
    this.SelectIndices([index]);
   } else {
    this.SelectIndex(index);
   }
  }
 },
 CreateSerializingHelper: function(){
  return new _aspxListBoxItemsSerializingHelper(this);
 },
 InCallback: function(){
  var callbackOwner = this.GetCallbackOwnerControl();
  if(callbackOwner != null)
   return callbackOwner.InCallback();
  return ASPxClientListEdit.prototype.InCallback.call(this);
 },
 GetItemsRangeForLoad: function(){
  return this.scrollHelper.GetItemsRangeForLoad();
 },
 GetScrollSpacerElement: function(isTop){
  return document.getElementById(this.name + (isTop ? __aspxLBTSIdSuffix : __aspxLBBSIdSuffix));
 },
 GetScrollSpacerVisibility: function(isTop){
  if(!this.clientEnabled)
   return false;
  return isTop ? this.isTopSpacerVisible : this.isBottomSpacerVisible;
 },
 SetScrollSpacerVisibility: function(isTop, visibility){
  this.LockScrollHandler();
  var spacer = this.GetScrollSpacerElement(isTop);
  if(spacer){
   if(visibility)
    spacer.style.height = this.GetScrollDivElement().clientHeight + "px";
   if(this.clientEnabled){
    if(isTop)
     this.isTopSpacerVisible = visibility;
    else
     this.isBottomSpacerVisible = visibility;
   }
   if(_aspxGetElementDisplay(spacer) != visibility){
    _aspxSetElementDisplay(spacer, visibility);
    _aspxGetElementVisibility(spacer, visibility);
   }
  }
  this.UnlockScrollHandler();
 },
 SetTopScrollSpacerVisibility: function(visibility){
  this.SetScrollSpacerVisibility(true, visibility);
 },
 SetBottomScrollSpacerVisibility: function(visibility){
  this.SetScrollSpacerVisibility(false, visibility);
 },
 GetTopScrollSpacerHeight: function(){
  return this.GetScrollSpacerVisibility(true) ? this.GetScrollSpacerElement(true).clientHeight : 0;
 },
 GetBottomScrollSpacerHeight: function(){
  return this.GetScrollSpacerVisibility(false) ? this.GetScrollSpacerElement(false).clientHeight : 0;
 },
 SendCallback: function(){
  if(!this.InCallback()){
   this.ShowLoadingElements();
   var callbackOwner = this.GetCallbackOwnerControl();
   if(callbackOwner != null)
    callbackOwner.SendCallback();
    else {
    var argument = this.GetCallbackArguments();
    this.CreateCallback(argument);
   }
  }
 },
 OnCallback: function(result) {
  this.ParseCallbackResult(result);
  this.OnCallbackFinally();
 },
 OnCallbackError: function(result){
  ASPxClientListBoxBase.prototype.OnCallbackError.call(this, result);
  this.OnCallbackFinally();
 },
 OnCallbackFinally: function(){
  this.HideLoadingPanel();
  this.changeSelectAfterCallback = 0;
 },
 LockScrollHandler: function(){
  this.scrollHandlerLockCount ++;
 },
 UnlockScrollHandler: function(){
  this.scrollHandlerLockCount --;
 },
 IsScrollHandlerLocked: function(){
  return this.scrollHandlerLockCount > 0;
 },
 OnScroll: function(){
  if(this.IsScrollHandlerLocked()) return;
  if(this.IsVisible() && !this.InCallback() && ( this.GetScrollSpacerVisibility(true) || this.GetScrollSpacerVisibility(false))) {
   this.scrollHelper.OnScroll();
   if(this.scrollHelper.GetIsNeedToHideTopSpacer())
    this.SetTopScrollSpacerVisibility(false);
   if(this.scrollHelper.GetIsNeedCallback())
    this.SendCallback();
  }
 },
 OnBrowserWindowResize: function(evt) {
    if (this.IsVisible())
     this.CorrectSize();
 },
 KeyboardSupportAllowed: function(){
  return !this.CheckColumnSelectionMode();
 },
 InitializeKeyHandlers: function() {
  if(this.KeyboardSupportAllowed()){
   this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
   this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
   this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
   this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
   this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
   this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
  }
 },
 OnArrowUp: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(-1);
  return true;
 },
 OnArrowDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(1);
  return true;
 },
 OnPageUp: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(-this.scrollPageSize);
  return true;
 },
 OnPageDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(this.scrollPageSize);
  return true;
 },
 OnHomeKeyDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(-this.GetItemCount());
  return true;
 },
 OnEndKeyDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(this.GetItemCount());
  return true;
 },
 GetAdjustedIndex: function(index){
  if(index < 0) index = 0;
  else{
   var itemCount = this.GetItemCount();
   if(index >= itemCount) index = itemCount - 1;
  }
  return index;
 },
 SelectNeighbour: function (step) {
  var itemCount = this.GetItemCount();
  if (itemCount > 0) {
   this.changeSelectAfterCallback = 0;
   var selectedIndex = this.GetFocusedIndex();
   var pageDownSize = step == 1 ? this.scrollPageSize + 1 : this.scrollPageSize; 
   var isFirstPageDown = selectedIndex == -1 && step == pageDownSize && step > 1;
   var newSelectedIndex = isFirstPageDown ? step : selectedIndex + step;
   newSelectedIndex = this.GetAdjustedIndex(newSelectedIndex);
   if (selectedIndex != newSelectedIndex) {
    this.LockScrollOnKBNavigation();
    this.SetSelectedIndexCore(newSelectedIndex);
    this.UnlockScrollOnKBNavigation();
   }
   if (this.GetIsNeedToCallbackLoadItemsToTop(newSelectedIndex, step, itemCount)) {
    this.LoadItemsOnCallback(true, newSelectedIndex);
   } else if (this.GetIsNeedToCallbackLoadItemsToBottom(newSelectedIndex, step, itemCount)) {
    this.LoadItemsOnCallback(false, newSelectedIndex);
   }
   this.ScrollToItemVisible(newSelectedIndex);
  }
 },
 GetIsNeedToCallbackLoadItemsToTop: function(selectedIndex, step, itemCount){
  return this.isCallbackMode && this.GetScrollSpacerVisibility(true) && 
   this.serverIndexOfFirstItem > 0 && ((step < 0 && selectedIndex <= 0) || step <= -itemCount);
 },
 GetIsNeedToCallbackLoadItemsToBottom: function(selectedIndex, step, itemCount){
  return this.isCallbackMode && this.GetScrollSpacerVisibility(false) && 
   ((step > 0 && selectedIndex >= itemCount - 1) || step >= itemCount);
 },
 LoadItemsOnCallback: function(isToTop, index){
  this.changeSelectAfterCallback = index - this.GetSelectedIndex();
  this.scrollHelper.SetItemsRangeForLoad(isToTop);
  this.SendCallback();
 },
 FindInputElement: function(){
  return document.getElementById(this.name + "_KBS");
 },
 SetHoverElement: function(element){
  aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
 },
 InitOnContainerMadeVisible: function(){
  this.AdjustControl();
 },
 ClearItemsCore: function(){
  this.ClearListTableContent();
  this.OnItemsCleared();
  this.SetValue(null);
 },
 OnItemsCleared: function(){
  this.GetItemSelectionHelper().OnItemsCleared();
 },
 CopyCellWidths: function(sourceRowIndex, destinationRowIndex){
  var cellCount = this.GetItemCellCount();
  var sourceRow = this.GetItemRow(sourceRowIndex);
  var destRow = this.GetItemRow(destinationRowIndex);
  for(var i = 0; i < cellCount; i++)
   destRow.cells[i].style.width = sourceRow.cells[i].style.width;
 },
 RemoveItem: function(index){
  if(index == 0 && this.GetItemCount() > 1)
   this.CopyCellWidths(0, 1);
  if(0 <= index && index < this.GetItemCount()){
   if(this.GetIsCheckColumnExists() && !this.IsNativeCheckBoxes())
    this.RemoveInternalCheckBoxFromCollecntion(index);
   this.UpdateSyncArraysItemDeleted(this.GetItem(index), true);
   var row = this.GetItemRow(index);
   if(_aspxIsExistsElement(row))
    row.parentNode.removeChild(row);
   this.OnItemRemoved(index);
  }
 },
 GetItem: function(index){
  var listTable = this.GetListTable();
  if(!listTable || index < 0 || index >= listTable.rows.length)
   return null;
  var row = listTable.rows[index];
  var image = this.imageCellExists ? _aspxGetChildByTagName(row.cells[this.GetImageCellIndex()], "IMG", 0) : null;
  var src = image == null ? "" : ASPxImageUtils.GetImageSrc(image);
  var i = this.GetItemFirstTextCellIndex();
  var texts = [];
  for(;i < row.cells.length; i ++){
   var textCell = row.cells[i];
   if(typeof(textCell.attributes["DXText"]) != "undefined")
    texts.push(_aspxGetAttribute(textCell, "DXText"));
   else {
    var text = _aspxGetInnerText(textCell);
    if(__aspxIE && __aspxBrowserVersion >= 9 && !this.encodeHtml)
     text = this.PrepareItemTextForIE(text); 
    text = text.replace(new RegExp(__aspxNbspChar, "g"), " ");
    texts.push(text);
   }
  }
  return new ASPxClientListBoxItem(this, index, texts, this.itemsValue[index], src, this.GetIsItemSelected(index));
 },
 PrepareItemTextForIE: function(text, index) {
  if (!index && index !== 0)
   return this.PrepareItemTextForIE(text, 0);
  if (text[index] === '\r' && text[index + 1] === '\n')
   return this.PrepareItemTextForIE(text, index + 2);
  return text.substr(index);
 },
 PerformCallback: function(arg) {
  this.SetScrollSpacerVisibility(true, false);
  this.SetScrollSpacerVisibility(false, false);
  this.ClearItemsForPerformCallback();
  this.serverIndexOfFirstItem = 0;
  this.SetScrollSpacerVisibility(true, false);
  this.SetScrollSpacerVisibility(false, false);
  this.FormatAndSetCustomCallbackArg(arg);
  this.SendCallback();
 },
 GetTableRowParent: function(table){
  if(table.tBodies.length > 0)
   return table.tBodies[0];
  return table;
 },
 ProtectWhitespaceSerieses: function(text){
  if(text == "") 
   text = __aspxNbsp;
  else {
    if(text.charAt(0) == ' ')
    text = __aspxNbsp + text.slice(1);
   if(text.charAt(text.length - 1) == ' ')
    text = text.slice(0, -1) + __aspxNbsp;
   text = text.replace(new RegExp("  ", "g"), " &nbsp;");
  }
  return text;
 },
 CreateItem: function(index, texts, value, imageUrl, selected){
  return new ASPxClientListBoxItem(this, index, texts, value, imageUrl, selected);
 },
 InsertItemInternal: function(index, texts, value, imageUrl){
  if(!texts || texts.length == 0)
   texts = [""];
  else if(typeof(texts) == "string")
   texts = [ texts ];
  if(typeof (value) == "undefined")
   value = texts[0];
  if(!_aspxIsExists(imageUrl))
   imageUrl = "";
  var newItemRow = this.CreateNewItem();
  _aspxRemoveAttribute(newItemRow, "id");
  var listTable = this.GetListTable();
  var tbody = this.GetTableRowParent(listTable);
  var isAdd = listTable.rows.length <= index;
  if(isAdd)
   tbody.appendChild(newItemRow);
  else
   tbody.insertBefore(newItemRow, this.GetItemRow(index));
  var newIndex = this.FindFreeIndex();
  var newId = this.CreateItemId(newIndex);
  var newClientId = this.CreateItemClientId(newIndex);
  this.InitializeItemAttributes(newItemRow, newClientId, true);
  var sampleItemFirstTextCell = this.GetSampleItemFirstTextCell();
  var itemCellsIdPostfixes = this.GetItemCellsIdPostfixes();
  var styleController = aspxGetStateController();
  aspxAddHoverItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes, 
   styleController.GetHoverElement(sampleItemFirstTextCell), __aspxHoverItemKind), true);
  aspxAddSelectedItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes, 
   styleController.GetSelectedElement(sampleItemFirstTextCell), __aspxSelectedItemKind), true);
  aspxAddDisabledItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes, 
   styleController.GetDisabledElement(sampleItemFirstTextCell), __aspxDisabledItemKind), true);
  _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxHoverItemKind);
  _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxSelectedItemKind);
  _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxDisabledItemKind);
  this.PrepareItem(newItemRow, texts, imageUrl); 
  _aspxArrayInsert(this.itemsValue, value, index);
  this.RegisterInsertedItem(index, texts, value, imageUrl);
  if(this.GetIsCheckColumnExists() && !this.IsNativeCheckBoxes())
   this.AddInternalCheckBoxToCollection(index);
  this.OnItemInserted(index);
 },
 PrepareItem: function(newItemRow, texts, imageUrl){ 
  var i = 0;
  if(this.GetIsCheckColumnExists())
   i ++;
  if(this.imageCellExists) {
   this.PrepareItemImage(newItemRow, i, imageUrl);
   i ++;
  }
  var cellCount = this.GetItemCellCount();
  for(var j = 0; i < cellCount; i++, j++)
   this.PrepareItemTextCell(newItemRow.cells[i], texts[j])
 },
 PrepareItemImage: function(newItemRow, imageCellIndex, imageUrl){
  var imageCell = newItemRow.cells[imageCellIndex];
  var image = _aspxGetChildByTagName(imageCell, "IMG", 0);
  if(!image){
   image = document.createElement("IMG");
   imageCell.innerHTML = "";
   imageCell.appendChild(image);
  }
  ASPxImageUtils.SetImageSrc(image, imageUrl);
 }, 
 PrepareItemTextCell: function(cell, text){
  if(!_aspxIsExists(text)) 
   text = "";
  if(this.encodeHtml)
   text = _aspxEncodeHtml(text);
  cell.innerHTML = this.ProtectWhitespaceSerieses(text);
  if(text == "")
   _aspxSetAttribute(cell, "DXText", text);
 },
 ClearListTableContent: function(){
  var tBody = this.GetTableRowParent(this.GetListTable());
  if(__aspxIE)
   tBody.innerText = "";
  else
   tBody.innerHTML = "";
 },
 FormatText: function(texts){
  if(typeof(texts) == "string")
   return texts;
  else if(!this.IsMultiColumn())
   return texts[0];
  else
   return this.FormatTextCore(texts);
 },
 FormatTextCore: function(texts){
  if(this.isComboBoxList)
   return ASPxFormatter.Format(this.textFormatString, texts);
  else
   return texts.join("; ");
 },
 OnItemInserted: function(index){
  this.GetItemSelectionHelper().OnItemInserted(index);
 },
 OnItemRemoved: function(index){
  this.GetItemSelectionHelper().OnItemRemoved(index);
 },
 CreateItemId: function(index){
  return __aspxLBIIdSuffix + index;
 },
 CreateItemClientId: function(index){
  return this.name + "_" + __aspxLBIIdSuffix + index;
 },
 CreateNewItem: function(){
  var newItemRow = this.GetSampleItemRow();
  if (_aspxIsExistsElement(newItemRow)) 
   newItemRow = newItemRow.cloneNode(true);
  return newItemRow;
 },
 CreateStyleClasses: function(id, postfixes, item, kind){
  var classes = [];
  if(item && item[kind]){
   classes[0] = [];
   classes[0][0] = item[kind].classNames;
   classes[0][1] = item[kind].cssTexts;
   classes[0][2] = [];
   classes[0][2][0] = id;
   classes[0][3] = postfixes;
  }
  return classes;
 },
 CorrectSizeByTimer: function(){
  if(this.APILockCount == 0 && this.IsDisplayed())
   _aspxSetTimeout("aspxLBCorrectSizeByTimer(\""+this.name+"\");", 0);
 },
 FindFreeIndex: function(){
  return this.freeUniqIndex ++;
 },
 GetSampleItemRowID: function(){
  return this.name + "_" + __aspxLBSIIdSuffix;
 },
 GetSampleItemRow: function(){
  if(this.SampleItem == null)
   this.SampleItem = _aspxGetElementById(this.GetSampleItemRowID());
  return this.SampleItem;
 },
 GetSampleItemFirstTextCell: function(){
  if(!_aspxIsExistsElement(this.sampleItemFirstTextCell)){
   var sampleItemRow = this.GetSampleItemRow();
   if(_aspxIsExistsElement(sampleItemRow))
    this.sampleItemFirstTextCell = sampleItemRow.cells[this.imageCellExists ? 1 : 0];
  }
  return this.sampleItemFirstTextCell;
 },
 ChangeEnabledAttributes: function(enabled){
  this.ChangeListTableEvents(this.GetListTable(), _aspxChangeEventsMethod(enabled));
  var inputElement = this.GetInputElement();
  if(inputElement) 
   this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  var controller = aspxGetStateController();
  controller.SetElementEnabled(this.GetMainElement(), enabled);
  var count = this.GetItemCount();
  var i = this.hasSampleItem ? -1 : 0 ;
  var checkColumnExists = this.GetIsCheckColumnExists();
  for(; i < count; i ++){
   var element = this.GetItemFirstTextCell(i);
   if(element)
    controller.SetElementEnabled(element, enabled);
   if(checkColumnExists && i >= 0)
    this.SetCheckBoxEnabled(i, enabled);
  }
 },
 ChangeListTableEvents: function(listTable, method){
  if(this.isComboBoxList){
   method(listTable, "mouseup", aspxLBIClick);
   if(__aspxFirefox)
    method(listTable, "mousedown", _aspxPreventEvent); 
  }
  else{
   method(listTable, "click", aspxLBIClick);   
   method(listTable, "dblclick", aspxLBIClick); 
   if(this.MultiSelectionMode())
    _aspxAttachEventToElement(listTable, "selectstart", aspxLBTSelectStart);
  }
 },
 IsValueChanged: function(){
  return this.cachedValue != this.GetValue();
 },
 OnItemSelectionChanged: function(index, selected){
  if(this.CheckColumnSelectionMode())
   this.SetCheckBoxChecked(index, selected);
  if (!this.IsSelectionEventsLocked()) {
   this.SetRaiseSelectedIndexChangedArguments(this.autoPostBack, index, selected);
   var valueChanged = this.IsValueChanged();
   if (valueChanged) {
    this.RaisePersonalStandardValidation();
    this.OnValueChanged();
   } else {
    if(this.RaiseSelectedIndexChanged())
     this.SendPostBackInternal("");
   }
  }
  this.CacheValue();
 },
 SetRaiseSelectedIndexChangedArguments: function(processOnServer, index, selected){
  this.selectedIndexChangedArguments = {
   processOnServer: processOnServer,
   index: index,
   selected: selected
  };
 },
 GetRaiseSelectedIndexChangedArguments: function(){
  if(!this.selectedIndexChangedArguments)
   this.SetRaiseSelectedIndexChangedArguments(false, this.GetSelectedIndex(), true);
  return this.selectedIndexChangedArguments;
 },
 RaiseSelectedIndexChanged: function (processOnServer) {
  this.RaiseValidationInternal();
  var savedArgs = this.GetRaiseSelectedIndexChangedArguments();
  processOnServer = savedArgs.processOnServer || processOnServer;
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientListEditItemSelectedChangedEventArgs(savedArgs.index, savedArgs.selected, processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 SetWidth: function(width) {
  this.width = width + "px";
   this.GetScrollDivElement().style.width = "100%";
   this.constructor.prototype.SetWidth.call(this, width);
 },
 SetHeight: function(height) {
  this.heightCorrected = false;
  this.constructor.prototype.SetHeight.call(this, height);
 }
});
ASPxClientNativeListBox = _aspxCreateClass(ASPxClientListBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 SetMainElement: function(mainElement){
  this.mainElement = mainElement;
 },
 FindInputElement: function(){
  return this.GetMainElement();
 }, 
 GetOptionCount: function(){
  return this.GetMainElement().options.length;
 },
 GetOption: function(index){
  return this.GetMainElement().options[index];
 },
 GetItemCount: function(){
  return this.GetOptionCount();
 },
 SelectIndexSilent: function(index){
  var selectedIndex = this.GetSelectedIndexInternal();
  var isValidIndex = (-1 <= index && index < this.GetItemCount());
  if((selectedIndex != index && isValidIndex) || !this.isInitialized){
   this.SetSelectedIndexInternal(index);
   return true;
  }
  return false;
 },
 GetSelectedIndexInternal: function(){
  return this.GetMainElement().selectedIndex; 
 },
 SetSelectedIndexInternal: function(index){
  this.GetMainElement().selectedIndex = index; 
 },
 ClearItemsCore: function(){
  this.GetMainElement().innerHTML = "";
 },
 RemoveItem: function(index){
  if(0 <= index && index < this.GetItemCount()){
   var oldSelectedIndex = this.GetSelectedIndexInternal();
   this.UpdateSyncArraysItemDeleted(this.GetItem(index), true);
   var option = this.GetOption(index);
   this.GetMainElement().removeChild(option);
   this.UpdateOptionValues();
   this.OnItemRemoved(oldSelectedIndex, index);
  }
 },
 OnItemRemoved: function(oldSelectedIndex, newSelectedIndex){
  if(newSelectedIndex == oldSelectedIndex && !this.MultiSelectionMode())
   this.SetSelectedIndexInternal(-1);
 },
 MultiSelectionMode: function(){
  return this.GetMainElement().multiple;
 },
 GetItem: function(index){
  if(0 <= index && index < this.GetOptionCount()) {
   var text = this.GetOption(index).text;
   var selected = this.GetMainElement().options[index].selected
   if(_aspxIsExists(text))
    return new ASPxClientListBoxItem(this, index, text, this.itemsValue[index], "", selected);
  }
  return null;
 },
 PerformCallback: function(arg) {
  this.ClearItemsForPerformCallback();
  this.FormatAndSetCustomCallbackArg(arg);
  this.SendCallback();
 },
 SendCallback: function(){
  if(!this.InCallback()){
   var callbackOwner = this.GetCallbackOwnerControl();
   if(callbackOwner != null)
    callbackOwner.SendCallback();
    else {
    var argument = this.GetCallbackArguments();
    this.CreateCallback(argument);
   }
  }
 },
 ParseCallbackResult: function(result){
  var deserializedItems = this.DeserializeItems(result);
  this.LoadItemsFromCallback(true, deserializedItems);
 },
 InsertItemInternal: function(index, text, value, imageUrl) {
  if(typeof (value) == "undefined")
   value = text;
  var oldSelectedIndex = this.GetSelectedIndexInternal();
  var isAdd = this.GetOptionCount() <= index;
  var newOption = document.createElement("OPTION");
  if(isAdd)
   this.GetMainElement().appendChild(newOption);
  else
   this.GetMainElement().insertBefore(newOption, this.GetOption(index));
  newOption.innerHTML = text;
  this.UpdateOptionValues();
  _aspxArrayInsert(this.itemsValue, value, index);
  this.RegisterInsertedItem(index, text, value, imageUrl); 
  if(index == oldSelectedIndex && index != -1)
   this.SetSelectedIndex(index + 1);
 },
 UpdateOptionValues: function() {
  if(this.APILockCount == 0){
   for(var i = 0; i < this.GetOptionCount(); i++)
    this.GetOption(i).value = i;
  }
 },
 ChangeEnabledAttributes: function(enabled){
  if(!this.isComboBoxList)
   this.GetMainElement().disabled = !enabled;
 },
 OnCallback: function(result) {
  this.ParseCallbackResult(result);
 },
 OnItemDblClick: function(){
  this.RaiseItemDoubleClick();
 },
 LoadItemsFromCallback: function(isToTop, deserializedItems){
  this.BeginUpdate();
  this.LockSynchronizationOnInternalCallback();
  var mainElement = this.GetMainElement();
  for (var i = deserializedItems.length - 1; i >= 0; i--) {
   this.InsertItemInternal(0, deserializedItems[i].text, deserializedItems[i].value, deserializedItems[i].imageUrl);
   if (deserializedItems[i].selected) {
    var index = deserializedItems[i].index;
    mainElement.options[0].selected = true;
   }
  }
  this.UnlockSynchronizationOnInternalCallback();
  this.EndUpdate();
 },
 EndUpdate: function(){
  ASPxClientListBoxBase.prototype.EndUpdate.call(this);
  this.UpdateOptionValues();
 },
 GetSelectedIndices: function(){
  var selectedIndices = [];
  var mainElement = this.GetMainElement();
  for(var i = 0; i < mainElement.options.length; i++){
   if(mainElement.options[i].selected)
    selectedIndices.push(i);
  }
  return selectedIndices;
 },
 GetSelectedValues: function(){ 
  var selectedValues = [];
  var selectedIndices = this.GetSelectedIndices();
  for(var i = 0; i < selectedIndices.length; i++)
   selectedValues.push(this.GetItemValue(selectedIndices[i]));
  return selectedValues;
 },
 GetSelectedItems: function(){
  var selectedItems = [];
  var selectedIndices = this.GetSelectedIndices();
  for(var i = 0; i < selectedIndices.length; i++)
   selectedItems.push(this.GetItem(selectedIndices[i]));
  return selectedItems;
 },
 SelectAll: function(){
  this.SetAllItemsSelectedValue(true);
 },
 UnselectAll: function(){
  this.SetAllItemsSelectedValue(false);
 },
 SetAllItemsSelectedValue: function(selected){
  var mainElement = this.GetMainElement();
  for(var i = 0; i < mainElement.options.length; i++)
   mainElement.options[i].selected = selected;
 },
 SelectIndices: function(indices){
  this.SetIndicesSelectionState(indices, true);
 },
 UnselectIndices: function(indices){
  this.SetIndicesSelectionState(indices, false);
 },
 SetIndicesSelectionState: function(indices, selected){
  var mainElement = this.GetMainElement();
  for(var i = 0; i < indices.length; i++){
   mainElement.options[indices[i]].selected = selected;
  }
 },
 SelectItems: function(items){
  if(_aspxIsExists(items))
   this.SetItemsSelectionState(items, true);
  else
   this.SelectAll();
 },
 UnselectItems: function(items){
  if(_aspxIsExists(items))
   this.SetItemsSelectionState(items, false);
  else
   this.UnselectAll();
 },
 SetItemsSelectionState: function(items, selected){
  var mainElement = this.GetMainElement();
  for(var i = 0; i < items.length; i++){
   mainElement.options[items[i].index].selected = selected;
  }
 },
 SelectValues: function(values){
  this.SetValuesSelectedState(values, true);
 },
 UnselectValues: function(values){
  this.SetValuesSelectedState(values, false);
 },
 SetValuesSelectedState: function(values, selected){
  var mainElement = this.GetMainElement();
  var index;
  for(var i = 0; i < values.length; i++){
   index = this.FindItemIndexByValue(values[i]);
   mainElement.options[index].selected = selected;
  }
 }
});
ASPxClientListBox.Cast = ASPxClientControl.Cast;
ASPxClientCheckListBase = _aspxCreateClass(ASPxClientListEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);          
  this.imageProperties = null;
  this.internalButtonCollection = null; 
  this.icbFocusedStyle = [];
  this.items = [];
 },
 Initialize: function() {
  ASPxClientListEdit.prototype.Initialize.call(this);
  this.UpdateInternalSelectedIndex(); 
 },
 UpdateInternalSelectedIndex: function() {
  var selectedIndexFromServer = this.GetSelectedIndex();
  if(__aspxIE) {
   var stateInput = this.FindStateInputElement();
   if(stateInput) {
    var restoredSelectedIndex = stateInput.value;
    if(restoredSelectedIndex != '' && restoredSelectedIndex != selectedIndexFromServer)
     this.SetSelectedIndex(restoredSelectedIndex);
   }
  }
 },
 CreateButtonInternalCollection: function() { 
  this.internalButtonCollection = new ASPxCheckBoxInternalCollection(this.imageProperties, false, true, ASPxCheckEditElementHelper.Instance);
  var instance = this;
  for(var i = 0; i < this.GetItemCount(); i++) {
   var icbInputElement = this.GetItemInput(i);
   var internalButton = this.internalButtonCollection.Add(icbInputElement.id, icbInputElement, this.GetItemElement(i));
   internalButton.CreateFocusDecoration(this.icbFocusedStyle);
   internalButton.SetEnabled(this.GetEnabled());
   internalButton.readOnly = this.readOnly;
   internalButton.CheckedChanged.AddHandler(function(s, e) { instance.OnItemClick(instance.GetItemIndexByElement(_aspxGetEventSource(e))); });
   internalButton.Focus.AddHandler(function(s, e) { instance.OnFocus(); });
   internalButton.LostFocus.AddHandler(function(s, e) { instance.OnLostFocus(); });
   this.attachToCellsClick(i);
   this.PrepareInternalButton(internalButton, i);
  }
 },
 CheckableElementsExist: function() {
  return !!this.imageProperties;
 },
 SetFocus: function() {
  this.UpdateFocus(); 
 },
 UpdateFocus: function() {
 },
 IsElementBelongToInputElement: function(element) {
  return this.GetItemIndexByElement(element) != -1;
 },
 attachToCellsClick: function(index) {
  var element = this.GetItemElement(index);
  _aspxAttachEventToElement(element, "click", function(evt) {
   var src = _aspxGetEventSource(evt);
   var label = ASPxCheckEditElementHelper.Instance.GetLabelElement(element);
   var button = this.internalButtonCollection.Get(this.GetItemInput(index).id);
   if (!_aspxGetIsParent(button.mainElement, src) && src !== label && src.parentElement !== label) {
    ASPxCheckEditElementHelper.Instance.InvokeClick(button, evt);
   }
  }.aspxBind(this));
 },
 GetItemIndexByElement: function(element) {
  for (var i = 0; i < this.GetItemCount(); i++) {
   var itemElement = this.GetItemElement(i);
   if (_aspxGetIsParent(itemElement, element))
    return i;
  }
  return -1;  
 },
 GetItemInput: function(index) {
  return this.GetChild("_RB" + index + "_I");
 },
 GetItemElement: function(index) {
  return this.GetChild("_RB" + index);
 },
 GetItemCount: function() {
  return this.items.length;
 },
 OnItemClick: function(index) {
 },
 OnItemClickReadonly: function() {
  var index = this.GetSelectedIndexInternal();
  this.SelectIndexSilent(index);
 },
 UpdateHiddenInputs: function(index) {
  var stateInput = this.FindStateInputElement();
  if(_aspxIsExistsElement(stateInput))
   stateInput.value = index;
  var valueInput = this.GetValueInputElement();
  if(_aspxIsExistsElement(valueInput)) {
   var value = this.GetValue();
   valueInput.value = _aspxIsExists(value) ? value : " ";
  }
 },
 GetItemValue: function(index){
  if (index > -1 && index < this.items.length) {
   if (typeof(this.items[index].value) == "string" && this.items[index].value == "" && this.convertEmptyStringToNull)
    return null;
   else
    return this.items[index].value;
  }
  return null;
 },
 SetValue: function(value) {
  for (var i = 0; i < this.items.length; i++) {
   if(this.GetItemValue(i) == value) {   
    this.SelectIndexSilent(i);
    return;
   }
  } 
  this.SelectIndexSilent(-1);    
 },
 CreateItems: function(itemsProperties){
  for (var i = 0; i < itemsProperties.length; i++)
   this.CreateItem(i, itemsProperties[i][0], this.GetDecodeValue(itemsProperties[i][1]), itemsProperties[i][2]);
 },
 CreateItem: function(index, text, value, imageUrl){
  var item = new ASPxClientListEditItem(this, index, text, value, imageUrl);
  this.items.push(item);
 },
 GetItem: function(index){
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 ChangeEnabledAttributes: function(enabled){
  if(!this.CheckableElementsExist()) {
   for(var i = 0; i < this.GetItemCount(); i++){
    var element = this.GetItemInput(i);
    if(element){
     this.ChangeItemEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
     element.disabled = !enabled;
    }
   }
  } else {
   var selectedIndex = this.GetSelectedIndexInternal();
   this.UpdateCheckableElementDecorations(selectedIndex, enabled);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  if(this.isNative){
   for(var i = 0; i < this.GetItemCount(); i++){
    var element = this.GetItemInput(i);
    if(element)
     aspxGetStateController().SetElementEnabled(element, enabled);
   }
  }
 },
 ChangeItemEnabledAttributes: function(element, method){
  method(element, "onclick");
 }
});
ASPxClientRadioButtonList = _aspxCreateClass(ASPxClientCheckListBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);          
  this.isASPxClientRadioButtonList = true;
 },
 InlineInitialize: function() {
  var selectedIndex = this.GetSelectedIndex();
  this.UpdateHiddenInputs(selectedIndex);
  if(this.CheckableElementsExist()) 
   this.CreateButtonInternalCollection();
  this.SetSelectedIndex(this.GetSelectedIndex()); 
  ASPxClientCheckListBase.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  ASPxClientCheckListBase.prototype.Initialize.call(this);
 },
 PrepareInternalButton: function(internalRadioButton){
  internalRadioButton.autoSwitchEnabled = false;
 },
 GetInputElement: function() {
  if(this.isNative) {
   var index = this.GetSelectedIndexInternal();
   return this.GetItemInput(index);
  } else 
   return this.GetValueInputElement();
 },
 GetValueInputElement: function() {
  if(this.valueInput == null) {
   this.valueInput = _aspxCreateHiddenField(null, this.name + "_ValueInput");
   var stateInput = this.FindStateInputElement();
   stateInput.parentNode.insertBefore(this.valueInput, stateInput);
  }
  return this.valueInput;
 },
 GetValueInputToValidate: function() {
  return this.GetValueInputElement();
 },
 SelectIndexSilent: function(index) {
  var itemCount = this.GetItemCount();
  var isValidIndex = (-1 <= index && index < itemCount);
  if(isValidIndex) {
   if(this.CheckableElementsExist()) 
    this.UpdateCheckableElementDecorations(index, this.GetEnabled());
   else {
    for(var i = 0; i < itemCount; i++) {
     var element = this.GetItemInput(i);
     if(element)
      element.checked = (i == index);
    }
   }
   this.SetSelectedIndexInternal(index);
   this.UpdateHiddenInputs(index);
  }
 },
 UpdateCheckableElementDecorations: function(selectedIndex, enabled) {
  if(this.CheckableElementsExist()) {
   for(var i = 0; i < this.items.length; i++) {
    var inputElement = this.GetItemInput(i);
    var internalButton = this.internalButtonCollection.Get(inputElement.id);
    internalButton.SetEnabled(enabled);
    internalButton.SetValue(i == selectedIndex ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
   }
  }
 },
 UpdateFocus: function() {
  var index = this.GetSelectedIndexInternal();
  if(index == -1)
   index = 0;
  var itemElement = this.GetItemInput(index);
  if (itemElement != null && _aspxGetActiveElement() != itemElement && _aspxIsEditorFocusable(itemElement)) 
   _aspxSetFocus(itemElement);
 },
 OnItemClick: function(index) {
  if(this.GetSelectedIndexInternal() != index) {
   this.SelectIndexSilent(index);
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
  this.UpdateFocus();
 }
});
ASPxClientRadioButtonList.Cast = ASPxClientControl.Cast;
ASPxClientCheckBoxList = _aspxCreateClass(ASPxClientCheckListBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);          
  this.selectionEventsLockCount = 0;
 },
 InlineInitialize: function() {
  if(this.CheckableElementsExist()) 
   this.CreateButtonInternalCollection();
  ASPxClientCheckListBase.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  ASPxClientCheckListBase.prototype.Initialize.call(this);
  this.InitSelection();
 },
 InitSelection: function() {
  this.SelectIndices(this.initSelectedIndices);
  this.CacheValue();
 },
 PrepareInternalButton: function(internalCheckBox, index){
  internalCheckBox.autoSwitchEnabled = true;
  internalCheckBox.SetChecked(this.GetItemSelectionHelper().GetIsItemSelected(index));
 },
 SelectIndexSilent: function(index) {
  var itemCount = this.GetItemCount();
  var isValidIndex = (-1 <= index && index < itemCount);
  if(isValidIndex) {
   this.UpdateHiddenInputs(index);
  }
 },
 UpdateCheckableElementDecorations: function(selectedIndex, enabled) {
  if(this.CheckableElementsExist()) {
   for(var i = 0; i < this.items.length; i++) {
    var inputElement = this.GetItemInput(i);
    var internalButton = this.internalButtonCollection.Get(inputElement.id);
    internalButton.SetEnabled(enabled);
   }
  }
 },
 SetSelectionDecoration: function(index, selected){ 
  if(this.CheckableElementsExist()){
   var inputElement = this.GetItemInput(index);
   var internalButton = this.internalButtonCollection.Get(inputElement.id);
   internalButton.SetValue(selected ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
  } else {
   var element = this.GetItemInput(index);
   if(element)
    element.checked = (selected); 
  }
 },
 OnItemClick: function(index) {
  this.GetItemSelectionHelper().OnItemClick(index);
 },
 UpdateFocus: function() {
  var index = this.GetItemSelectionHelper().GetFocusedItemIndex();
  if(index == -1)
   index = this.GetSelectedIndexInternal();
  if(index == -1)
   index = 0;
  var itemElement = this.GetItemInput(index);
  if (itemElement != null && _aspxGetActiveElement() != itemElement && _aspxIsEditorFocusable(itemElement)) 
   _aspxSetFocus(itemElement);
 },
 UpdateInternalState: function(){
  this.UpdateHiddenInputs();
 },
 IsUpdateHiddenInputsLocked: function(){
  return this.GetItemSelectionHelper().IsUpdateInternalSelectionStateLocked();
 },
 UpdateHiddenInputs: function(){
  if(this.IsUpdateHiddenInputsLocked()) 
   return;
  var element = this.FindStateInputElement();
  if(_aspxIsExistsElement(element)) { 
   var sb = [ ];
   var serialiser = this.GetSerializingHelper();
   var selectedIndices = this.GetSelectedIndices();
   for(var i = 0; i < selectedIndices.length; i++)
    serialiser.SerializeAtomValue(sb, selectedIndices[i]);
   element.value = sb.join("");
  }
 },
 GetSerializingHelper: function(){ 
  if(this.serializingHelper == null)
   this.serializingHelper = new _aspxListBoxBaseItemsSerializingHelper(this);
  return this.serializingHelper;
 },
 SetItemSelectionAppearance: function(index, selected, controller){
 },
 LockSelectionEvents: function(){
  this.selectionEventsLockCount++;
 },
 UnlockSelectionEvents: function(){
  this.selectionEventsLockCount--;
 },
 IsSelectionEventsLocked: function(){
  return this.selectionEventsLockCount > 0;
 },
 CacheValue: function(){
  this.cachedValue = this.GetValue();
 },
 IsValueChanged: function(){
  return this.cachedValue != this.GetValue();
 },
 OnItemSelectionChanged: function(index, selected){
  this.SetSelectionDecoration(index, selected);
  if (!this.IsSelectionEventsLocked()) {
   this.SetRaiseSelectedIndexChangedArguments(this.autoPostBack, index, selected);
   var valueChanged = this.IsValueChanged();
   if (valueChanged) {
    this.RaisePersonalStandardValidation();
    this.OnValueChanged();
   } else {
    if(this.RaiseSelectedIndexChanged())
     this.SendPostBackInternal("");
   }
  }
  this.CacheValue();
 },
 SetRaiseSelectedIndexChangedArguments: function(processOnServer, index, selected){
  this.selectedIndexChangedArguments = {
   processOnServer: processOnServer,
   index: index,
   selected: selected
  };
 },
 GetRaiseSelectedIndexChangedArguments: function(){
  if(!this.selectedIndexChangedArguments)
   this.SetRaiseSelectedIndexChangedArguments(false, this.GetSelectedIndex(), true);
  return this.selectedIndexChangedArguments;
 },
 RaiseSelectedIndexChanged: function (processOnServer) {
  this.RaiseValidationInternal();
  var savedArgs = this.GetRaiseSelectedIndexChangedArguments();
  processOnServer = savedArgs.processOnServer || processOnServer;
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientListEditItemSelectedChangedEventArgs(savedArgs.index, savedArgs.selected, processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetItemSelectionHelper: function(){
  if(!this.itemSelectionHelper)
   this.itemSelectionHelper = this.CreateItemSelectionHelper();
  return this.itemSelectionHelper;
 },
 CreateItemSelectionHelper: function(){
  return new _aspxCheckBoxListMultiSelectionHelper(this);
 },
 GetItem: function(index){
  var item = ASPxClientCheckListBase.prototype.GetItem.call(this, index);
  item.selected = this.GetItemSelectionHelper().GetIsItemSelected(index);
  return item;
 },
 SetValue: function(value){
  var index = this.FindItemIndexByValue(value);
  this.SetSelectedIndex(index);
 },
 GetSelectedIndexInternal: function(){
  if(!this.isInitialized)
   return ASPxClientCheckListBase.prototype.GetSelectedIndexInternal.call(this);
  return this.GetItemSelectionHelper().GetSelectedIndex();
 },
 SetSelectedIndex: function(index){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SetSelectedIndex(index);
  this.UnlockSelectionEvents();
 },
 GetSelectedIndices: function(){
  return this.GetItemSelectionHelper().GetSelectedIndices();
 },
 GetSelectedValues: function(){ 
  return this.GetItemSelectionHelper().GetSelectedValues();
 },
 GetSelectedItems: function(){
  return this.GetItemSelectionHelper().GetSelectedItems();
 },
 SelectAll: function(){
  this.SelectIndices();
 },
 UnselectAll: function(){
  this.UnselectIndices();
 },
 SelectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectIndices(indices);
  this.UnlockSelectionEvents();
 },
 SelectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectItems(items);
  this.UnlockSelectionEvents();
 },
 SelectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectValues(values);
  this.UnlockSelectionEvents();
 },
 UnselectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectIndices(indices);
  this.UnlockSelectionEvents();
 },
 UnselectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectItems(items);
  this.UnlockSelectionEvents();
 },
 UnselectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectValues(values);
  this.UnlockSelectionEvents();
 }
});
ASPxClientCheckBoxList.Cast = ASPxClientControl.Cast;
ASPxClientListEditItemSelectedChangedEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(index, isSelected, processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.index = index;
  this.isSelected = isSelected;
 }
});
function aspxLBTSelectStart(evt){
 var element = _aspxGetEventSource(evt);
 var shiftPressed = evt.shiftKey;
 var ctrlKey = evt.ctrlKey || evt.metaKey;
 if(shiftPressed || ctrlKey){
  _aspxClearSelection();
  _aspxPreventEventAndBubble(evt);
 }
}
function aspxLBIClick(evt){
 if(ASPxClientTouchUI.isMouseEventFromScrolling) return;
 var element = _aspxGetEventSource(evt);
 while(element != null && element.tagName != "BODY"){
  if(element.tagName == "TR"){
   var table = element.offsetParent;
   if(table && table.ListBoxId){
    var lb = aspxGetControlCollection().Get(table.ListBoxId);
    if(lb != null) {
     var retValue;
     if(evt.type == "dblclick") 
      retValue =lb.OnItemDblClick();
     else if(!lb.isComboBoxList || _aspxGetIsLeftButtonPressed(evt)) 
      retValue = lb.OnItemClick(element.rowIndex, evt);
     if(typeof(retValue) != "undefined")
      return retValue;
    }
    break;
   }
  }
  element = element.parentNode;
 }
}
function aspxNLBIDClick(evt){
 var element = _aspxGetEventSource(evt);
 if(element != null && element.tagName == "SELECT"){
  var lb = aspxGetControlCollection().Get(element.id);
  if(lb != null)
   lb.OnItemDblClick();
 }
}
function aspxLBScroll(evt){
 var sourceId = _aspxGetEventSource(evt).id;
 if(sourceId.slice(-__aspxLBDSuffix.length) == __aspxLBDSuffix){
  var name = sourceId.slice(0, -2);
  var lb = aspxGetControlCollection().Get(name);
  if(lb != null && lb.isInitialized) 
   lb.OnScroll();
 }
}
function aspxLBCorrectSizeByTimer(name){
 var lb = aspxGetControlCollection().Get(name);
 if(lb != null)
  lb.OnCorrectSizeByTimer();
}
function aspxERBLIClick(name, index) {
 var list = aspxGetControlCollection().Get(name);
 if(list != null)
  list.OnItemClick(index);
}
function aspxERBLICancel(name) {
 var list = aspxGetControlCollection().Get(name);
 if(list != null)
  list.OnItemClickReadonly();
}

ASPxClientToolbarComboBox = _aspxCreateClass(ASPxClientComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.defaultCaption = "";
  this.BeforeFocus = new ASPxClientEvent();
  this.ItemClick = new ASPxClientEvent();
  this.beforeFocusLockCount = 0;
  this.commandName = "";
 },
 SetValue: function(value) {
  var isValueEmpty = !value || value == "null"; 
  if (isValueEmpty && this.defaultCaption)
   value = this.defaultCaption;
  ASPxClientComboBox.prototype.SetValue.call(this, value);
  if (this.GetSelectedIndex() == -1) {
   ASPxClientComboBox.prototype.SetText.call(this, value);
  }
 },
 ForceRefocusEditor: function() {
  this.RaiseBeforeFocus();
 },
 RaiseBeforeFocus: function() {
  if(this.beforeFocusLockCount == 0){
   this.beforeFocusLockCount ++;
   var args = new ASPxClientEventArgs();
   this.BeforeFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  ASPxClientComboBox.prototype.RaiseLostFocus.call(this);
  this.beforeFocusLockCount = 0;
 },
 OnListBoxItemMouseUp: function(evt) {
  ASPxClientComboBox.prototype.OnListBoxItemMouseUp.call(this, evt);
  this.RaiseItemClick();
 },
 RaiseItemClick: function() {
  var args = new ASPxClientEventArgs();
  this.ItemClick.FireEvent(this, args);
 },
 OnTextChanged: function() {
  ASPxClientComboBox.prototype.OnTextChanged.call(this);
  this.RaiseItemClick();
 },
 HideDropDownArea: function(isRaiseEvent) {
  ASPxClientComboBox.prototype.HideDropDownArea.call(this, isRaiseEvent);
  this.beforeFocusLockCount = 0;
 }
});
ASPxClientNativeToolbarComboBox = _aspxCreateClass(ASPxClientNativeComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.defaultCaption = "";
  this.commandName = "";
 },
 SetValue: function(value){
  if (!value && this.defaultCaption)
   value = this.defaultCaption;
  ASPxClientNativeComboBox.prototype.SetValue.call(this, value);
  if(this.GetSelectedIndex() == -1)
   ASPxClientNativeComboBox.prototype.SetText.call(this, value);
 },
 OnListBoxItemMouseUp: function() {
  ASPxClientNativeComboBox.prototype.OnListBoxItemMouseUp.call(this);
  this.RaiseItemClick();
 },
 RaiseItemClick: function() {
  var args = new ASPxClientEventArgs();
  this.ItemClick.FireEvent(this, args);
 }
});
ASPxClientToolbarCustomCssComboBox = _aspxCreateClass(ASPxClientToolbarComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.cssClasses = [];
  this.tagNames = [];
  this.cssClassesValueHashTable = {};
  this.tagNameCssClassesValueHashTable = {};
 },
 Initialize: function(){
  ASPxClientComboBox.prototype.Initialize.call(this);
  this.CreateTagNamesAndCssClassesHashTable();
 },
 GetValue: function() {
  return ASPxClientToolbarComboBox.prototype.GetValue.call(this);
 },
 SetValue: function(value) {
  ASPxClientToolbarComboBox.prototype.SetValue.call(this, value);
 }
});
ASPxClientNativeToolbarCustomCssComboBox = _aspxCreateClass(ASPxClientNativeToolbarComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.cssClasses = [];
  this.tagNames = [];
  this.cssClassesValueHashTable = {};
  this.tagNameCssClassesValueHashTable = {};
 },
 Initialize: function(){
  ASPxClientNativeToolbarComboBox.prototype.Initialize.call(this);
  this.CreateTagNamesAndCssClassesHashTable();
 },
 GetValue: function() {
  return ASPxClientNativeToolbarComboBox.prototype.GetValue.call(this);
 },
 SetValue: function(value) {
  ASPxClientNativeToolbarComboBox.prototype.SetValue.call(this, value);
 }
});
ASPxClientToolbarCustomCssComboBox.prototype.CreateTagNamesAndCssClassesHashTable=
 ASPxClientNativeToolbarCustomCssComboBox.prototype.CreateTagNamesAndCssClassesHashTable= function() {
  for (var i = 0; i < this.tagNames.length; i++) {
   var tagName = this.tagNames[i];
   var cssClass = this.cssClasses[i];
   if (tagName) {
    var key = ASPxClientToolbarCustomCssComboBox.GetKeyByTagNameAndCssClass(tagName, cssClass);
    if (!_aspxIsExists(this.tagNameCssClassesValueHashTable[key]))
     this.tagNameCssClassesValueHashTable[key] = this.GetItem(i).value;
   }
   else if (cssClass) {
    if (!_aspxIsExists(this.cssClassesValueHashTable[cssClass]))
     this.cssClassesValueHashTable[cssClass] = this.GetItem(i).value;
   }
  }
}
ASPxClientToolbarCustomCssComboBox.prototype.GetIndexByTagNameAndCssClass =
 ASPxClientNativeToolbarCustomCssComboBox.prototype.GetIndexByTagNameAndCssClass = function(tagName, cssClass) {
  var ret = null;
  if (tagName) {
   var key = ASPxClientToolbarCustomCssComboBox.GetKeyByTagNameAndCssClass(tagName, cssClass);
   ret = _aspxIsExists(this.tagNameCssClassesValueHashTable[key]) ? this.tagNameCssClassesValueHashTable[key] : null;
  }
  if (cssClass && (ret == null))
   ret = _aspxIsExists(this.cssClassesValueHashTable[cssClass]) ? this.cssClassesValueHashTable[cssClass] : null;
  return ret;
 }
ASPxClientToolbarCustomCssComboBox.prototype.GetExtValueByIndex =
 ASPxClientNativeToolbarCustomCssComboBox.prototype.GetExtValueByIndex = function(index) {
 return { tagName: this.tagNames[index], cssClass: this.cssClasses[index] };
}
ASPxClientToolbarCustomCssComboBox.prototype.AreCustomTagsExist =
 ASPxClientNativeToolbarCustomCssComboBox.prototype.AreCustomTagsExist = function() {
 return (this.tagNames.length > 0) && (this.cssClasses.length > 0);
}
ASPxClientToolbarCustomCssComboBox.GetKeyByTagNameAndCssClass = 
 ASPxClientNativeToolbarCustomCssComboBox.GetKeyByTagNameAndCssClass = function(tagName, cssClass) {
 return tagName + "|" + cssClass;
}
ASPxClientToolbarParagraphFormattingComboBox = _aspxCreateClass(ASPxClientToolbarComboBox, {
 SetValue: function(value) {
  if(this.GetIndexByValue(value) == -1)
   value = this.TryGetDefaultFormatValue();
  ASPxClientToolbarComboBox.prototype.SetValue.call(this, value);
 }
});
ASPxClientNativeToolbarParagraphFormattingComboBox = _aspxCreateClass(ASPxClientNativeToolbarComboBox, {
 SetValue: function(value) {
  if(this.GetIndexByValue(value) == -1)
   value = this.TryGetDefaultFormatValue();
  ASPxClientNativeToolbarComboBox.prototype.SetValue.call(this, value);
 }
});
ASPxClientToolbarParagraphFormattingComboBox.prototype.TryGetDefaultFormatValue =
 ASPxClientNativeToolbarParagraphFormattingComboBox.prototype.TryGetDefaultFormatValue = function() {
  var newValue = "";
  var defaultTags = ["p", "span"];
  for(var i = 0; i < defaultTags.length && newValue == ""; i++)
   if(this.GetIndexByValue(defaultTags[i]) != -1)
    newValue = defaultTags[i];
  return newValue;
}
ASPxClientToolbarParagraphFormattingComboBox.prototype.GetIndexByValue =
 ASPxClientNativeToolbarParagraphFormattingComboBox.prototype.GetIndexByValue = function(value) {
  var lb = this.GetListBoxControl();
  for(var i = 0; i < lb.GetItemCount(); i ++){
   if(lb.GetItem(i).value == value)
    return i;
  }
  return -1;
}
ASPxClientToolbarListBox = _aspxCreateClass(ASPxClientListBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 GetItem: function(index){
  var item = ASPxClientListBox.prototype.GetItem.call(this, index);
  if(item){
   item.text = _aspxTrim(item.text);
   return item;
  }
  return null;
 }
});
ASPxClientNativeToolbarListBox = _aspxCreateClass(ASPxClientNativeListBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 GetItem: function(index){
  var item = ASPxClientNativeListBox.prototype.GetItem.call(this, index);
  if(item){
   item.text = _aspxTrim(item.text);
   return item;
  }
  return null;
 }
});
var __aspxCDDPTableIDSuffix = "_IT";
var __aspxCDDPTableCellIDSuffixPart = "_IC";
var __aspxCDDPTableCellIndexAttribute = "_dxIPIndex";
var __aspxCDDPItemPickerClientId = "ItemPicker";
var __aspxHEItemPickerCellCssClassName = "dxHEIPCell";
ASPxClientToolbarItemPicker = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.ItemPickerItemClick = new ASPxClientEvent;
  this.itemsValues = [];
  this.useItemPickerImageMode = __aspxHEItemPickerImageMode.ExecuteSelectedItemAction; 
  this.curIndex = 0;
  this.tableCellStyleCssClassName = "";
  this.tableCellStyleCssText = "";
  this.tableCellStyleImageSpacing = "";
  this.imagePosition = "Left";
  this.itemHeight = 0;
  this.itemWidth = 0;
  this.menuID = 0;
 },
 Initialize: function () {
  this.constructor.prototype.Initialize.call(this);
  var index = 0;
  var table = this.GetPickerTableElement();
  if(!table)
   return;
  this.InitializeStyles();
  for (var i = 0; i < table.rows.length; i++) {
   var cellCount = table.rows[i].cells.length;
   for (var j = 0; j < cellCount; j++) {
    var cell = table.rows[i].cells[j];
    if(i * cellCount + j < this.itemsValues.length) {
     _aspxSetAttribute(cell, __aspxCDDPTableCellIndexAttribute, index);
     cell.className = this.tableCellStyleCssClassName + " " + this.GetStyleName();
     _aspxSetAttribute(cell, "id", this.GetPickerTableCellElementID(index++));
    }
   }
  }
  if(this.itemHeight > 0 || this.itemWidth > 0)
   this.PrepareCellSize();
 },
 InitializeStyles: function() {
  var styleSheet = _aspxGetCurrentStyleSheet();
  _aspxAddStyleSheetRule(styleSheet, "." + this.GetStyleName(), this.tableCellStyleCssText);
  _aspxAddStyleSheetRule(styleSheet, "." + this.GetStyleName(), "white-space: nowrap;");
  _aspxAddStyleSheetRule(styleSheet, "." + this.GetStyleName(), "text-align: center;");
  if(this.tableCellStyleImageSpacing != "") {
   var imageMarginRule = (this.imagePosition == "Left" ? "margin-right" : "margin-bottom") + ": " + this.tableCellStyleImageSpacing + ";";
   var imageMarginSelector = "." + this.GetStyleName() + " img";
   _aspxAddStyleSheetRule(styleSheet, imageMarginSelector, imageMarginRule);
  }
 },
 PrepareCellSize: function() {
  var styleSheet = _aspxGetCurrentStyleSheet();
  var table = this.GetPickerTableElement();
  var firstCell = table.rows[0].cells[0];
  var curStyle = _aspxGetCurrentStyle(firstCell);
  if(!curStyle)
   curStyle = firstCell.style;
  if(this.itemWidth > 0) {
   this.itemWidth -= _aspxPxToInt(curStyle.paddingLeft) + _aspxPxToInt(curStyle.paddingRight);
   this.itemWidth -= _aspxPxToInt(curStyle.borderLeftWidth) + _aspxPxToInt(curStyle.borderRightWidth);
   _aspxAddStyleSheetRule(styleSheet, "." + this.GetStyleName(), "width: " + this.itemWidth + "px;");
  }
  if(this.itemHeight > 0) {
   this.itemHeight -= _aspxPxToInt(curStyle.borderTopWidth) + _aspxPxToInt(curStyle.borderBottomWidth);
   if(__aspxIE || __aspxWebKitFamily)
    this.itemHeight -= _aspxPxToInt(curStyle.paddingTop) + _aspxPxToInt(curStyle.paddingBottom);
   _aspxAddStyleSheetRule(styleSheet, "." + this.GetStyleName(), "height: " + this.itemHeight + "px;");   
  }
 },
 GetPickerTableElement: function() {
  return _aspxGetElementById(this.name + __aspxCDDPTableIDSuffix);
 },
 GetPickerTableCellElementID: function(itemIndex) {
  return this.name + __aspxCDDPTableCellIDSuffixPart + itemIndex.toString();
 },
 OnControlClick: function(clickedElement, htmlEvent) {
  var element = clickedElement.tagName == "TD" ? clickedElement : clickedElement.parentNode;
  if(element.tagName == "TD") {
   var index = _aspxGetAttribute(element, __aspxCDDPTableCellIndexAttribute);
   if(index >= 0 && this.itemsValues.length > index){
    this.curIndex = index;
    this.RaiseItemClickEvent(this.GetValue());
   }
  }
  aspxGetMenuCollection().HideAll();
 },
 RaiseItemClickEvent: function(value) {
  if(!this.ItemPickerItemClick.IsEmpty()){
   var args = new ASPxClientToolbarItemPickerItemClickEventArgs(value);
   this.ItemPickerItemClick.FireEvent(this, args);
  }
 },
 GetValue: function() {
  return this.itemsValues[this.curIndex];
 },
 GetImage: function() {
  var cell = _aspxGetElementById(this.GetPickerTableCellElementID(this.curIndex));
  return cell && _aspxGetChildByTagName(cell, "IMG" ,0) || null;
 },
 GetImageUrl: function() {
  var image = this.GetImage();
  return image || "";
 },
 GetText : function() {
  var cell = _aspxGetElementById(this.GetPickerTableCellElementID(this.curIndex));
  return cell ? _aspxGetInnerText(cell) : "";
 },
 GetTooltip : function() {
  var cell = _aspxGetElementById(this.GetPickerTableCellElementID(this.curIndex));
  return cell ? cell.title : "";
 },
 GetStyleName: function() {
  return __aspxHEItemPickerCellCssClassName + "_" + this.name;
 }
});
ASPxClientToolbarItemPicker.FindControlByMenuItem = function(menuItem) {
 var name = menuItem.menu.GetMenuTemplateContainerID(menuItem.indexPath) + "_" + __aspxCDDPItemPickerClientId;
 return aspxGetControlCollection().Get(name);
}
ASPxClientToolbarItemPickerItemClickEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function (value) {
  this.value = value;
 }
});
ASPxClientColorTableIdPostfix = {
 ColorTable: "_CT",
 CustomColorTable: "_UCT",
 ColorPicker: "_CP",
 OkButton: "_OB",
 CancelButton: "_CB",
 ColorSelector: "_CS",
 ColorTables: "_CTS",
 CustomColorButton: "_CCB"
}
ASPxClientColorNestedControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.cookieName = "";
  this.color = null;
  this.enableCustomColors = true;
  this.ownerControl = null;
  this.ColorChanged = new ASPxClientEvent();
  this.ShouldBeClosed = new ASPxClientEvent();
  this.CustomColorTableUpdated = new ASPxClientEvent();
 },
 Initialize: function() {
  this.InitializeColorTable();
  this.InitializeColorTableEvents();
  if (this.enableCustomColors) {
   this.InitializeCustomColorTable();
   this.InitializeCustomColorEvents();
   this.SetColorSelectorDisplay(false);
  }
  ASPxClientControl.prototype.Initialize.call(this);
 },
 InitializeColorTable: function() {
  var colorTable = this.GetColorTableControl();
  if(colorTable && this.color != null)
   colorTable.SetColor(this.color);
 },
 InitializeColorTableEvents: function() {
  this.GetColorTableControl().ColorChanged.AddHandler(this.OnInnerTableColorChanged.aspxBind(this));
  this.GetColorTableControl().ItemClick.AddHandler(this.OnColorTableCellClick.aspxBind(this));
 },
 InitializeCustomColorTable: function() {
  var customColorTable = this.GetCustomColorTableControl();
  if(customColorTable && this.color != null)
   customColorTable.SetColor(this.color);
 },
 InitializeCustomColorEvents: function() {
  _aspxAttachEventToElement(this.GetOkButtonElement(), "click", this.OnOkButtonClick.aspxBind(this));
  _aspxAttachEventToElement(this.GetCancelButtonElement(), "click", this.OnCancelButtonClick.aspxBind(this));
  _aspxAttachEventToElement(this.GetCustomColorButtonElement(), "click", this.OnCustomColorButtonClick.aspxBind(this));
  var colorPickerControl = this.GetColorPickerControl();
  colorPickerControl.InputEsc.AddHandler(this.OnCancelButtonClick.aspxBind(this));
  colorPickerControl.InputEnter.AddHandler(this.OnOkButtonClick.aspxBind(this));
  var customColorTable = this.GetCustomColorTableControl();
  customColorTable.ColorChanged.AddHandler(this.OnInnerTableColorChanged.aspxBind(this));
  customColorTable.EmptyCellClick.AddHandler(this.OnCustomColorButtonClick.aspxBind(this));
  customColorTable.AddColorEvent.AddHandler(this.OnCustomColorTableAddColor.aspxBind(this));
  customColorTable.ItemClick.AddHandler(this.OnColorTableCellClick.aspxBind(this));
 },
 GetColorTableControl: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientColorTableIdPostfix.ColorTable);
 },
 GetCustomColorTableControl: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientColorTableIdPostfix.CustomColorTable);
 },
 GetColorPickerControl: function() {
  return aspxGetControlCollection().Get(this.name + ASPxClientColorTableIdPostfix.ColorPicker);
 },
 GetOkButtonElement: function() {
  return _aspxGetElementById(this.name + ASPxClientColorTableIdPostfix.OkButton);
 },
 GetCancelButtonElement: function() {
  return _aspxGetElementById(this.name + ASPxClientColorTableIdPostfix.CancelButton);
 },
 GetColorSelectorElement: function() {
  return _aspxGetElementById(this.name + ASPxClientColorTableIdPostfix.ColorSelector);
 },
 GetColorTablesElement: function() {
  return _aspxGetElementById(this.name + ASPxClientColorTableIdPostfix.ColorTables);
 },
 GetCustomColorButtonElement: function() {
  return _aspxGetElementById(this.name + ASPxClientColorTableIdPostfix.CustomColorButton);
 },
 SetOwner: function(ownerControl) {
  this.ownerControl = ownerControl;
 },
 OnInnerTableColorChanged: function(s, e) {
  this.ChangeColor(s.GetColor());
 },
 OnColorTableCellClick: function() {
  this.RaiseShouldBeClosed();
 },
 OnOkButtonClick: function() {
  var colorPicker = this.GetColorPickerControl();
  var colorTable = this.GetColorTableControl();
  var customColorTable = this.GetCustomColorTableControl();
  var color = colorPicker.GetColor();
  var colorIndex = colorTable.FindColorIndexByColor(color);
  if (colorIndex == -1) {
   colorIndex = customColorTable.FindColorIndexByColor(color);
   if(colorIndex == -1) {
    customColorTable.AddColor(color);
    colorIndex = customColorTable.FindColorIndexByColor(color);
   }
   customColorTable.ProcessItemClick(colorIndex);
  } else
   colorTable.ProcessItemClick(colorIndex);
  this.SetColorTablesDisplay(true);
  this.SetColorSelectorDisplay(false);
 },
 OnCancelButtonClick: function() {
  this.SetColorTablesDisplay(true);
  this.SetColorSelectorDisplay(false);
  this.RaiseShouldBeClosed();
 },
 OnCustomColorButtonClick: function() {
  this.SetColorTablesDisplay(false);
  this.SetColorSelectorDisplay(true);
  if(this.ownerControl && this.ownerControl instanceof ASPxClientMenuItem && __aspxIE && __aspxBrowserVersion < 8)
   ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this.ownerControl.menu, this.ownerControl.menu.GetMenuElement(this.ownerControl.indexPath), true);
 },
 ChangeColor: function(newColor) {
  var isNew = newColor ? this.color != newColor : !!this.color; 
  this.SetColor(newColor);
  if (isNew)
   this.RaiseColorChanged();
 },
 SetColorSelectorDisplay: function(display) {
  var colorSelector = this.GetColorSelectorElement();
  if (!colorSelector)
   return;
  _aspxSetElementDisplay(colorSelector, display);
  if (display) {
   var color = this.GetColor();
   var colorPicker = this.GetColorPickerControl();
   colorPicker.InitializeSize();
   if (color) {
    colorPicker.SetColorByHexColor(color);
    colorPicker.SetSavedColor(color);
   } else
    colorPicker.SetDefaultState();
   if (__aspxIE && __aspxBrowserVersion < 8) {
    var colorArea = colorPicker.GetColorAreaElement();
    _aspxSetElementDisplay(colorArea, false);
    _aspxSetElementDisplay(colorArea, true);
   }
  }
  if (__aspxIE && __aspxBrowserVersion < 8)
   colorSelector.className = colorSelector.className;
 },
 SetColorTablesDisplay: function(display) {
  _aspxSetElementDisplay(this.GetColorTablesElement(), display);
 },
 IsColorSelectorDisplayed: function() {
  var colorSelector = this.GetColorSelectorElement();
  return colorSelector ? _aspxGetElementDisplay(colorSelector) : false;
 },
 GetState: function() {
  var customColorTable = this.GetCustomColorTableControl();
  return customColorTable.GetSerializedColors();
 },
 OnCustomColorTableAddColor: function() {
  this.RaiseCustomColorTableUpdated();
 },
 RaiseShouldBeClosed: function() {
  if (!this.ShouldBeClosed.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.ShouldBeClosed.FireEvent(this, args);
  }
 },
 RaiseColorChanged: function(processOnServer) {
  if (!this.ColorChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ColorChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseCustomColorTableUpdated: function(){
  if(!this.CustomColorTableUpdated.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CustomColorTableUpdated.FireEvent(this, args);
  }
 },
 SetColor: function(color) {
  this.color = color;
  var colorTable = this.GetColorTableControl();
  if(colorTable)
   colorTable.SetColor(this.color)
  var customColorTable = this.GetCustomColorTableControl();
  if(customColorTable)
   customColorTable.SetColor(this.color);
 },
 GetColor: function() {
  return this.color ? this.color.toUpperCase() : "";
 }
});

ASPxClientColorTableIDSuffix = {
 ColorTable: "_CT",
 ColorCell: "_C"
}
var __aspxHEColorTableCellCssClassName = "dxctCell";
var __aspxHEColorTableCellDivCssClassName = "dxctCellDiv";
ASPxClientColorTable = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.colorColCount = 8;
  this.colorValues = [];
  this.selectedIndex = -1;
  this.usedInDropDown = false;
  this.colorTableCellStyleCssText = "";
  this.colorTableCellDivStyleCssText = "";
  this.colorTableCellStyleCssClassName = "";
  this.colorTableCellDivStyleCssClassName = "";
  this.ColorChanged = new ASPxClientEvent();
  this.ItemClick = new ASPxClientEvent();
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  this.InitializeDefaultColors();
  var mainElement = this.GetMainElement();
  mainElement.unselectable = "on";
  mainElement.rows[0].cells[0].unselectable = "on";
  this.InitializeColorTableCellStyle();
  this.InitializeColorsTable();
  if(this.usedInDropDown)
   this.InitializeColorsTableEvents();
 },
 InitializeDefaultColors: function() {
  if(this.colorValues.length == 0)
   this.colorValues = ["#000000", "#993300", "#333300", "#003300", "#003366", "#000080", "#333399", "#333333",
        "#800000", "#FF6600", "#808000", "#008000", "#008080", "#0000FF", "#666699", "#808080",
        "#FF0000", "#FF9900", "#99CC00", "#339966", "#33CCCC", "#3366FF", "#800080", "#999999",
        "#FF00FF", "#FFCC00", "#FFFF00", "#00FF00", "#00FFFF", "#00CCFF", "#993366", "#C0C0C0",
        "#FF99CC", "#FFCC99", "#FFFF99", "#CCFFCC", "#CCFFFF", "#99CCFF", "#CC99FF", "#FFFFFF"
        ];
 },
 InitializeColorTableCellStyle: function() {
  var styleSheet = _aspxGetCurrentStyleSheet();
  _aspxAddStyleSheetRule(styleSheet,
    "." + __aspxHEColorTableCellCssClassName + "_" + this.name, this.colorTableCellStyleCssText);
  _aspxAddStyleSheetRule(styleSheet,
    "." + __aspxHEColorTableCellDivCssClassName + "_" + this.name, this.colorTableCellDivStyleCssText);
  var colorTableElement = this.GetColorsTableElement();
  var trElements = _aspxGetElementsByTagName(colorTableElement, "TR");
  for (var i = 0; i < trElements.length; i++) {
   var tdElements = _aspxGetElementsByTagName(trElements[i], "TD");
   for (var j = 0; j < tdElements.length; j++) {
    if (this.colorTableCellStyleCssText != "")
     tdElements[j].className += " " + __aspxHEColorTableCellCssClassName + "_" + this.name;
    if (this.colorTableCellStyleCssClassName != "")
     tdElements[j].className += " " + this.colorTableCellStyleCssClassName;
    var tdDiv = _aspxGetElementsByTagName(tdElements[j], "DIV");
    if (tdDiv[0] != null) {
     tdDiv.className = "";
     if (this.colorTableCellDivStyleCssClassName != "")
      tdDiv[0].className += " " + this.colorTableCellDivStyleCssClassName;
     if (this.colorTableCellDivStyleCssText != "")
      tdDiv[0].className += " " + __aspxHEColorTableCellDivCssClassName + "_" + this.name;
    }
   }
  }
 },
 InitializeColorsTable: function() {
  var colorsTable = this.GetColorsTableElement();
  colorsTable.unselectable = "on";
  var colorIndex = 0;
  for (var i = 0; i < colorsTable.rows.length; i++) {
   for (var j = 0; j < colorsTable.rows[i].cells.length; j++) {
    var colorCell = colorsTable.rows[i].cells[j];
    colorCell.id = this.GetColorCellElementID(colorIndex);
    colorCell.unselectable = "on";
    if (__aspxWebKitFamily)
     colorCell.cellIndex_Safari = j;
    var colorDiv = colorCell.firstChild;
    if (colorDiv && colorDiv.tagName == "DIV") {
     colorDiv.style.backgroundColor = this.colorValues[colorIndex];
     colorDiv.unselectable = "on";
     colorIndex++;
    }
   }
  }
 },
 InitializeColorsTableEvents: function(listTable, method){
  var colorsTable = this.GetColorsTableElement();
  colorsTable.ColorsTableId = this.name;
  _aspxAttachEventToElement(colorsTable, "mouseup", aspxCTMouseUp);
 },
 FindColorIndexByColor: function(colorValue) {
  if(colorValue == "")
   return -1;
  if (colorValue)
   colorValue = colorValue.toLowerCase();
  for (var i = 0; i < this.colorValues.length; i++) {
   if (this.colorValues[i].toLowerCase() == colorValue)
    return i;
  }
  return -1;
 },
 GetColorsTableElement: function() {
  return _aspxGetElementById(this.name + ASPxClientColorTableIDSuffix.ColorTable);
 },
 GetColorCellElementID: function(colorIndex) {
  return this.name + ASPxClientColorTableIDSuffix.ColorCell + colorIndex.toString();
 },
 GetColorCellElementByIndex: function(colorIndex) {
  return _aspxGetElementById(this.GetColorCellElementID(colorIndex));
 },
 GetColorCellDivByIndex: function(colorIndex) {
  return this.GetColorCellElementByIndex(colorIndex).firstChild;
 },
 SelectColorByIndex: function(colorIndex, fireEvent) {
  if (this.isColorSelected(colorIndex))
   return;
  var stateController = aspxGetStateController();
  this.DeselectColorByIndex(this.selectedIndex);
  this.selectedIndex = colorIndex;
  element = this.GetColorCellElementByIndex(this.selectedIndex);
  if (element != null)
   stateController.SelectElementBySrcElement(element);
  if (fireEvent)
   this.RaiseColorChanged();
 },
 isColorSelected: function(colorIndex) {
  return this.selectedIndex == colorIndex;
 },
 DeselectColorByIndex: function(colorIndex) {
  var stateController = aspxGetStateController();
  var element = this.GetColorCellElementByIndex(colorIndex);
  if (element != null)
   stateController.DeselectElementBySrcElement(element);
  this.selectedIndex = -1;
 },
 ClearSelection: function() {
  if (this.selectedIndex != -1)
   this.DeselectColorByIndex(this.selectedIndex);
 },
 OnControlClick: function(clickedElement, htmlEvent) {
  if (clickedElement) {
   if (clickedElement.tagName == "DIV")
    clickedElement = clickedElement.parentNode;
   if (clickedElement.tagName == "TD") {
    var colorIndex = this.GetColorIndexByTdElement(clickedElement);
    if (this.AllowProcessItemClick(colorIndex)) {
     this.ProcessItemClick(colorIndex);
    } else 
     this.OnEmptyCellClick(htmlEvent);
   }
  }
 },
 GetColorIndexByTdElement: function(element) {
  var cellIndex = !__aspxWebKitFamily ? element.cellIndex : element.cellIndex_Safari;
  var rowIndex = element.parentNode.rowIndex;
  var colorIndex = rowIndex * this.colorColCount + cellIndex;
  return colorIndex;
 },
 GetSerializedColors: function() {
  return this.colorValues + "";
 },
 AllowProcessItemClick: function(colorIndex) {
  return 0 <= colorIndex && colorIndex < this.colorValues.length;
 },
 ProcessItemClick: function(colorIndex) {
  this.SelectColorByIndex(colorIndex, true);
  this.RaiseItemClick();
 },
 OnEmptyCellClick: function(evt) {
 },
 RaiseColorChanged: function() {
  if (!this.ColorChanged.IsEmpty()) {
   var args = new ASPxClientEventArgs(false); 
   this.ColorChanged.FireEvent(this, args);
  }
 },
 RaiseItemClick: function() {
  if (!this.ItemClick.IsEmpty()) {
   var args = new ASPxClientEventArgs(false);
   this.ItemClick.FireEvent(this, args);
  }
 },
 GetColor: function() {
  if (0 <= this.selectedIndex && this.selectedIndex < this.colorValues.length)
   return this.colorValues[this.selectedIndex].toUpperCase();
  return "";
 },
 SetColor: function(value) {
  var colorIndex = this.FindColorIndexByColor(value);
  this.SelectColorByIndex(colorIndex, false);
  return colorIndex;
 }
});
ASPxClientCustomColorTable = _aspxCreateClass(ASPxClientColorTable, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.stateSeparator = ',';
  this.mouseupWasProcessed = false;
  this.emptyColorValue = "";
  this.EmptyCellClick = new ASPxClientEvent();
  this.AddColorEvent = new ASPxClientEvent();
 },
 InitializeDefaultColors: function() {
 },
 AllowProcessItemClick: function(colorIndex) {
  return ASPxClientColorTable.prototype.AllowProcessItemClick.call(this, colorIndex) && this.colorValues[colorIndex] != this.emptyColorValue;
 },
 isColorSelected: function(colorIndex) {
  return false;
 },
 OnEmptyCellClick: function(evt) {
  if (evt.type == "mouseup")
   this.mouseupWasProcessed = true;
  if (evt.type == "click" && this.mouseupWasProcessed) {
   this.mouseupWasProcessed = false;
   return;
  }
  this.RaiseEmptyCellClick();
 },
 RaiseEmptyCellClick: function() {
  if (!this.EmptyCellClick.IsEmpty()) {
   var args = new ASPxClientEventArgs(false);
   this.EmptyCellClick.FireEvent(this, args);
  }
 },
 RaiseAddColorEvent: function() {
  if (!this.AddColorEvent.IsEmpty()) {
   var args = new ASPxClientEventArgs(false);
   this.AddColorEvent.FireEvent(this, args);
  }
 },
 AddColor: function(color) {
  var itemIndex;
  if(this.colorValues.length == this.colorColCount) {
   for (var i = this.colorValues.length - 1; i > 0; i--) {
    this.colorValues[i] = this.colorValues[i-1];
    this.GetColorCellDivByIndex(i).style.backgroundColor 
     = this.GetColorCellDivByIndex(i - 1).style.backgroundColor;
   }
   this.colorValues[0] = color;
   itemIndex = 0;
  }
  else {
   itemIndex = this.colorValues.length;
   this.colorValues.push(color);
  }
  this.GetColorCellDivByIndex(itemIndex).style.backgroundColor = color;
  this.RaiseAddColorEvent();
 }
});
function aspxCTMouseUp(evt) {
 var element = _aspxGetEventSource(evt);
 while(element != null && element.tagName != "BODY") {
  if(element.tagName == "TR") {
   var table = element.offsetParent;
   if(table && table.ColorsTableId) {
    var ct = aspxGetControlCollection().Get(table.ColorsTableId);
    if(ct != null && _aspxGetIsLeftButtonPressed(evt))
     ct.OnControlClick(_aspxGetEventSource(evt), evt);
    break;
   }
  }
  element = element.parentNode;
 }
}
var ASPxGLPCallbackCommand= {
 CancelChanges    : "GLP_CC",
 ApplyChanges  : "GLP_AC",
 ApplyInputChanges   : "GLP_AIC",
 Filter     : "GLP_F"
};
ASPxClientGridLookup = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.gridView = null;
  this.gridViewWrapper = null;
  this.kbdSupportHelper = null;
  this.allowFocusedRow = false;
  this.allowSelectSingleRowOnly = false;
  this.incrementalFilteringMode = "None";
  this.keyboardHelper = null;
  this.fieldNames = null;
  this.inputLockCount = 0;
  this.inputEventLockCount = 0;
  this.gridSetValueLockCount = 0;
  this.keyFieldName = "";
  this.multiTextSeparator = ";";
  this.selectionChangedViaAPI = false;
  this.isAccessibilityComplianceEnabled = false;
  this.applyCallbackResult = false;
  this.filterTimer = 500;
  this.RowClick  = new ASPxClientEvent();
 },
 Initialize: function(){
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
  this.InitializeGridViewInstance();
 },
 AfterInitialize: function(){
  this.CreateStrategiesAndHelpers();
  this.constructor.prototype.AfterInitialize.call(this);
 },
 InitializeGridViewInstance: function(){
  if(!this.gridView) {
   var name = this.name + "_DDD_gv";
   this.gridView = aspxGetControlCollection().Get(name);
   if(this.gridView){
    this.gridView.lookupBehavior = true;
    this.allowFocusedRow = this.gridView.allowFocusedRow;
    this.allowSelectSingleRowOnly = this.gridView.allowSelectSingleRowOnly;
    this.gridViewWrapper = new ASPxClientLookupGridViewWrapper(this.gridView);
    this.InitializeColumnFieldNames(this.gridView)
    this.SubscribeToGVEvents(this.gridView);
   }
  }
 },
 InitializeColumnFieldNames: function(gridView){
  var fieldNames = [];
  var columnCount = gridView.GetColumnsCount();
  for(var i = 0; i < columnCount; i++){
   var column = gridView.GetColumn(i);
   if(column.fieldName != null)
    fieldNames.push(column.fieldName);
  }
  this.fieldNames = fieldNames.join(";");
 },
 SubscribeToGVEvents: function(grid) {
  if(grid) {
   grid.BeginCallback.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewBeginCallback"));
   grid.EndCallback.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewEndCallback"));
   grid.EndCallbackAnimationStart.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewEndCallbackAnimationStart"));
   grid.RowClick.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewRowClick"));
   grid.SelectionChanged.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewSelectionChanged"));
   grid.FocusedRowChanged.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewFocusedRowChanged"));
   grid.ColumnResized.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewColumnResized"));
   grid.InternalCheckBoxClick.InsertFirstHandler(this.CreateGridViewEventHandler("OnGridViewInternalCheckBoxClick"));
  }
 },
 CreateGridViewEventHandler: function(eventHandlerName){
  return new Function("sender", "args", "aspxGLPOnGridViewEvent(\"" + this.name + "\",\"" + eventHandlerName + "\", sender, args);");
 },
 CreateGridViewDelegateWithArgument: function(methodName, outArgumentName, inArgumentName){
  return new Function(outArgumentName, "apsxGLPCallMethodWithArgument(\""+ this.name + "\",\"" + methodName + "\"," + inArgumentName + ");");
 },
 CreateStrategiesAndHelpers: function(){
  this.CreateFilterStrategy();
  this.CreateSelectionStrategy();
  this.CreateKBHelper();
 },
 CreateFilterStrategy: function(){
  if(this.incrementalFilteringMode == "Contains")
   this.filterStrategy = new ASPxGridLookupContainsFilteringStrategy(this);
  else if(this.incrementalFilteringMode == "StartsWith")
   this.filterStrategy = new ASPxGridLookupStartsWithFilteringStrategy(this);
  else
   this.filterStrategy = new ASPxGridLookupDisabledFilteringStrategy(this);
  this.filterStrategy.Initialize();
 },
 CreateSelectionStrategy: function(){
  this.selectionStrategy = null;
  if(this.MultiSelectionPossible())
   this.selectionStrategy = new ASPxGridLookupMultipleSelectionStrategy(this);
  else
   this.selectionStrategy = new ASPxGridLookupSingleSelectionStrategy(this);
 },
 CreateKBHelper: function(){
  var gridView = this.GetGridView();
  this.keyboardHelper = new ASPxGridLookupKeyboardHelper(this, gridView, this.filterStrategy, this.selectionStrategy);
  this.keyboardHelper.Initialize();
 },
 RefocusOnClickRequired: function(){
  return __aspxIE;
 },
 LockInputEvent: function(){
  this.inputEventLockCount ++;
 },
 UnlockInputEvent: function(){
  this.inputEventLockCount --;
 },
 InputEventLocked: function(){
  return this.inputEventLockCount > 0;
 },
 LockInput: function(){
  this.inputLockCount ++;
 },
 UnlockInput: function(){
  this.inputLockCount --;
 },
 InputLocked: function(){
  return this.inputLockCount > 0;
 },
 SetSelectionChangedViaAPI: function(value){
  this.selectionChangedViaAPI = value;
 },
 SelectionChangedViaAPI: function(){
  return this.selectionChangedViaAPI;
 },
 OnCancelChanges: function() {
  ASPxClientDropDownEditBase.prototype.OnCancelChanges.call(this);
  this.selectionStrategy.OnCancelChanges();
 },
 OnApplyChanges: function() {
  if(!this.readOnly){
   if(this.InCallback() || this.GetGridView().InCallback() || this.filterStrategy.IsFilterTimerActive()){
    this.applyCallbackResult = true;
    if (this.droppedDown)
     this.HideDropDownArea(true);
   } else {
    ASPxClientDropDownEditBase.prototype.OnApplyChanges.call(this);
    this.selectionStrategy.OnApplyChanges();
    this.filterStrategy.OnApplyChanges();
   }
  } else 
   this.RollbackSelection();
 },
 OnApplyChangesAndHideDropDown: function(){
  this.OnApplyChanges();
  if(this.droppedDown)
   this.HideDropDownArea(true);
 },
 CanApplyNullTextDecoration: function () {
  var nothingIsFocusedInGrid = !(this.GetGridView().GetFocusedRowIndex() + 1);
  var nothingIsSelectedInGrid = !(this.GetGridView().GetSelectedRowCount());
  return this.MultiSelectionPossible() ? nothingIsSelectedInGrid : nothingIsFocusedInGrid;
 },
 AdjustDropDownWindow: function() {
  var pc = this.GetPopupControl();
  if(pc && pc.IsWindowVisible()) 
   ASPxClientDropDownEditBase.prototype.AdjustDropDownWindow.call(this);
  else {
   this.ResetDropDownSizeCache();
  }
 },  
 AdjustPagerToFixItMinWidthBeforeGridAdjust: function() {
  var topPager = aspxGetControlCollection().Get(this.GetGridView().name + "_" + this.GetGridView().PagerTopID);
  if(topPager) topPager.AdjustControl();
  var bottomPager = aspxGetControlCollection().Get(this.GetGridView().name + "_" + this.GetGridView().PagerBottomID);
  if(bottomPager) bottomPager.AdjustControl();
 },
 ShowDropDownArea: function(isRaiseEvent){
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
  this.AdjustPagerToFixItMinWidthBeforeGridAdjust();
  this.GetGridView().AdjustControl();
  var instance = this;
  window.setTimeout(function(){instance.AdjustDropDownWindow();}, 0);
 },
 GetGridViewWrapper: function(){
  if(!this.gridViewWrapper)
   this.InitializeGridViewInstance();
  return this.gridViewWrapper;
 },
 OnGridViewRowClick: function(sender, args){
  var retValue = this.RaiseRowClick(sender, args);
  this.selectionStrategy.OnGridViewRowClick(args);
  return retValue;
 },
 OnGridViewFocusedRowChanged: function(s, e){
  if(!this.readOnly) 
   this.selectionStrategy.OnGridViewFocusedRowChanged(e);
 },
 OnGridViewColumnResized: function(s, e){
  this.OnGridViewSizeChanged();
 },
 OnGridViewSizeChanged: function(){
  this.AdjustDropDownWindow();
 },
 OnGridViewInternalCheckBoxClick: function(sender, args){
  this.selectionStrategy.OnGridViewInternalCheckBoxClick(args);
 },
 RaiseRowClick: function(sender, args) {
  if(!this.RowClick.IsEmpty()){
   this.RowClick.FireEvent(sender, args);
   return args.cancel;
  }
  return false; 
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing) {
  this.OnApplyChanges();
  ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing); 
 },
 OnKeyDown: function(evt){
  ASPxClientDropDownEditBase.prototype.OnKeyDown.call(this, evt);
  if(this.keyboardHelper)
   this.keyboardHelper.OnKeyDown(evt, true);
 },
 OnKeyUp: function(evt){
  ASPxClientDropDownEditBase.prototype.OnKeyUp.call(this, evt);
  if(this.keyboardHelper)
   this.keyboardHelper.OnKeyUp(evt, true);
 },
 OnEscape: function() {
  ASPxClientDropDownEditBase.prototype.OnEscape.call(this);      
 },
 OnEnter: function() {
  this.OnApplyChangesAndHideDropDown();
 },
 OnTab: function() {
  if(this.isAccessibilityComplianceEnabled && this.droppedDown) 
   return;
  this.OnApplyChanges();
  if(this.droppedDown)
   this.HideDropDownArea(true);
 },
 OnArrowUp: function(evt) {
  ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);  
  this.ForceRefocusEditor();
 },
 OnArrowDown: function(evt) {
  ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);   
  this.ForceRefocusEditor();
 },
 OnHome: function() {
  var grid = this.GetGridView();
  grid.SetFocusedRowIndex(grid.GetTopVisibleIndex());    
 },
 OnEnd: function() {
  var grid = this.GetGridView();
  grid.SetFocusedRowIndex(grid.GetTopVisibleIndex() + grid.GetVisibleRowsOnPage() - 1);
 },
 ShouldCloseOnMCMouseDown: function () {
  return this.GetInputElement().readOnly;
 },
 MultiSelectionPossible: function(){
  return !this.allowSelectSingleRowOnly;
 },
 OnTextChanged: function() {
  if(!this.droppedDown)
   this.OnApplyChanges();
 },
 OnSelectionChanged: function(){
  if(!this.InputEventLocked() && !this.SelectionChangedViaAPI())
   this.OnValueChanged();
 },
 SetTemporaryTextOfFocusedRow: function(){ 
  var rowText = this.gridViewWrapper.GetFocusedRowText();
  this.SetTextWithoutApply(rowText);
 },
 LockGridSetValue: function(){
  this.gridSetValueLockCount++;
 },
 UnlockGridSetValue: function(){
  this.gridSetValueLockCount--;
 },
 SetText: function (text) {
  this.SetTextWithoutApply(text);
  this.selectionStrategy.InputChanged();
  this.OnApplyChanges();
 },
 SetTextWithoutApply: function(text) {
  this.LockGridSetValue();
  if(!this.InputLocked())
   ASPxClientDropDownEditBase.prototype.SetText.call(this, text);
  this.UnlockGridSetValue();
 },
 SetValue: function(value){
  if(this.gridSetValueLockCount == 0){
   var gridView = this.GetGridView();
   if(!gridView.InCallback()){
    this.SetSelectionChangedViaAPI(true);
    if(_aspxIsExists(value))
     gridView.SelectRowsByKey(value);
    else
     gridView.UnselectRows();
   }
  } else 
   ASPxClientDropDownEditBase.prototype.SetValue.call(this, value);
 },
 GetGridViewCallbackArgs: function(command, args) {
  var grid = this.GetGridView();
  var arg = (ASPxIdent.IsArray(args)) ? grid.SerializeCallbackArgs(args) : args;
  return ASPxFilteringUtils.FormatCallbackArg(command, arg);
 },
 SendGridViewCustomCallback: function(command, args) {
  var grid = this.GetGridView();
  var gvPerformCallbackArgs = this.GetGridViewCallbackArgs(command, args);
  grid.PerformCallback(gvPerformCallbackArgs);
 },
 OnGridViewBeginCallback: function(sender, args){
  this.GetGridView().callbackCommand = "";
  this.RaiseBeginCallback(args.command);
 },
 OnGridViewEndCallbackAnimationStart: function() {
  this.OnGridViewSizeChanged();
 },
 OnGridViewEndCallbackSizeChanged: function(){
  this.OnGridViewEndCallbackSizeChanged
  var gridFocused = ASPxKbdHelper.active == this.GetGridView().kbdHelper;
  this.OnGridViewSizeChanged();
  if(__aspxIE && gridFocused)
   this.GetGridView().kbdHelper.Focus();
 },
 OnGridViewEndCallback: function() {
  this.OnGridViewEndCallbackSizeChanged();
  this.EnsureFocusedRowOnEndCallback();
  this.selectionStrategy.OnGridViewEndCallback();
  this.filterStrategy.OnEndCallback(!this.applyCallbackResult);
  this.SetSelectionChangedViaAPI(false);
  this.RaiseEndCallback();
  if(this.applyCallbackResult){
   this.applyCallbackResult = false;
   var _this = this;
   window.setTimeout(function(){_this.OnApplyChanges();}, 0);
  }
 },
 EnsureFocusedRowOnEndCallback: function(){
  this.gridViewWrapper.FlushFocusedRowIndex();
  if(this.IsFocusChangingCallback() && this.selectionStrategy.ChangeTextOnFocusRowChangedCallbackAllowed()) {
   if(!this.readOnly)
    this.SetTemporaryTextOfFocusedRow();
  }
 },
 IsFocusChangingCallback: function(){
  var grid = this.GetGridView();
  return grid.callbackCommand == "FOCUSEDROW" || grid.callbackCommand == "PAGERONCLICK" || grid.callbackCommand == "NEXTPAGE" || grid.callbackCommand == "PREVPAGE" || grid.callbackCommand == "SELECTROWSKEY" || grid.callbackCommand == "SELECTROWS";
 },
 CallbackResultCanBeApplied: function(){
  return !this.filterStrategy.FilteringCallback();
 },
 RollbackSelection: function() {
  this.OnCancelChanges();
 },
 OnGridViewSelectionChanged: function(s, e){
  if(!this.readOnly) {
   if(this.gridViewWrapper.IsSelectionChangeEventLocked())
    return;
   if(this.selectionStrategy)
    this.selectionStrategy.OnGridViewSelectionChanged(e);
  }
 },
 OnGridViewTextChanged: function(newText, silent){
  if(!this.InputLocked()){
   if(silent)
    this.LockInputEvent();
   this.SetTextWithoutApply(newText);
   this.OnSelectionChanged();
   if(silent)
    this.UnlockInputEvent();
  }
 },
 GetFieldNames: function(){
  return this.fieldNames;
 },
 IsElementBelongToInputElement: function(element) {
  if(ASPxClientDropDownEditBase.prototype.IsElementBelongToInputElement.call(this, element))
   return true;
  return _aspxGetIsParent(this.gridView.GetMainElement(), element);
 },
 GetGridView: function(){
  if(!this.gridView)
   this.InitializeGridViewInstance();
  return this.gridView;
 },
 ConfirmCurrentSelection: function() {
  this.OnApplyChanges();
 },
 RollbackToLastConfirmedSelection: function() {
  this.OnCancelChanges();
 }
});
ASPxClientGridLookup.Cast = ASPxClientControl.Cast;
ASPxClientLookupGridViewWrapper = _aspxCreateClass(null, {
 constructor: function(gridView) {
  this.gridView = gridView;
  this.selectionChangeEventLockCount = 0;
  this.FlushFocusedRowIndex();
 },
 FlushFocusedRowIndex: function(){
  this.gridView._setFocusedRowInputValue();
 },
 GetIsRowOnPage: function(rowVisibleIndex){
  return this.gridView.GetTopVisibleIndex() <= rowVisibleIndex && rowVisibleIndex <= this.GetBottomVisibleIndex();
 },
 GetBottomVisibleIndex: function(){
  var pageRowCount = this.gridView.GetVisibleRowsOnPage();
  var topVisibleIndex = this.gridView.GetTopVisibleIndex();
  return topVisibleIndex + pageRowCount - 1;
 },
 GetSelectedIndicesOnPage: function(){
  var selectedIndices = [];
  var topVisibleIndex = this.gridView.GetTopVisibleIndex();
  var bottomVisibleIndex = this.GetBottomVisibleIndex();
  for(var i = topVisibleIndex; i <= bottomVisibleIndex; i++) {
   if(this.gridView.IsRowSelectedOnPage(i))
    selectedIndices.push(i);
  }
  return selectedIndices;
 },
 GetVisibleRowText: function(visibleRowIndex){
  var rowIndexOnPage = this.ConvertVisibleRowIndexToRowIndexOnPage(visibleRowIndex);
  return this.GetVisibleRowTextOnPage(rowIndexOnPage);
 },
 GetVisibleRowTextOnPage: function(rowIndexOnPage){
  return this.gridView.itemTexts[rowIndexOnPage];
 },
 GetSelectedRowTexts: function(){
  return this.gridView.currentSelectionState.SelectedRowTexts;
 },
 HighlightVisibleRow: function(visibleRowIndex){
  if(this.gridView.allowFocusedRow)
   this.gridView.SetFocusedRowIndex(visibleRowIndex);
  else{
   this.LockSelectionChangeEvent();
   this.gridView.SelectRowOnPage(visibleRowIndex);
   this.UnlockSelectionChangeEvent();
  }
 },
 LockSelectionChangeEvent: function(){ this.selectionChangeEventLockCount++;},
 UnlockSelectionChangeEvent: function(){ this.selectionChangeEventLockCount--;},
 IsSelectionChangeEventLocked: function() { return this.selectionChangeEventLockCount > 0;},
 GetFocusedRowText: function(){
  var focusedRowIndex = this.GetFocusedRowIndexOnPage();
  return this.GetVisibleRowTextOnPage(focusedRowIndex);
 },
 GetFocusedRowIndexOnPage: function(){
  var visibleIndex =  this.gridView.GetFocusedRowIndex();
  return this.ConvertVisibleRowIndexToRowIndexOnPage(visibleIndex);
 },
 ConvertVisibleRowIndexToRowIndexOnPage: function(visibleIndex){
  return visibleIndex - this.gridView.GetTopVisibleIndex();
 },
 ConvertRowIndexOnPageToVisibleRowIndex: function(indexOnPage){
  return indexOnPage + this.gridView.GetTopVisibleIndex();
 },
 GetPreviousSingleSelectedRowIndexOnPage: function(){ 
  var selInput = this.gridView.GetSelectionInput();
  if(selInput) {
   var checkList = selInput.value;
   return checkList.indexOf("T");
  }
  return -1;
 },
 EnsureFocusedRadioButtonChecked: function(){
  var focusedRowVisibleIndex = this.gridView.GetFocusedRowIndex();
  this.gridView._selectAllSelBtn(false);
  var rowCheckBox = this.gridView.GetDataRowSelBtn(focusedRowVisibleIndex);
  if (rowCheckBox != null){
   var internalCheckBox = this.gridView.internalCheckBoxCollection.Get(rowCheckBox.id);
   internalCheckBox.SetValue(ASPxClientCheckBoxInputKey.Checked);
  }
 }
});
ASPxGridLookupKeyboardSupportHelper =  _aspxCreateClass(ASPxGridViewKbdHelper, {
 constructor: function(gridView) {
  this.gridView = gridView;
  this.keyboardHelper = null;
  ASPxGridViewKbdHelper.prototype.constructor.call(this, gridView);
 },
 SetGridLookupKBHelper: function(keyboardHelper) {
  this.keyboardHelper = keyboardHelper;
 },
 SetGridLookup: function(gridLookup){},
 HandleKeyDown: function(evt) {
  if(this.keyboardHelper)
   return this.keyboardHelper.OnKeyDown(evt, false);
  return false;
 },
 HandleKeyPress: function(evt) {
  if(this.keyboardHelper)
   return this.keyboardHelper.OnKeyPress(evt, false);
  return false;
 },
 HandleKeyUp: function(evt) {
  if(this.keyboardHelper)
   return this.keyboardHelper.OnKeyUp(evt, false);
  return false;
 },
 HandleKeyDownCore: function(evt){
  return ASPxGridViewKbdHelper.prototype.HandleKeyDown.call(this, evt);
 },
 HandleKeyPressCore: function(evt){
  return ASPxGridViewKbdHelper.prototype.HandleKeyPress.call(this, evt);
 },
 HandleKeyUpCore: function(evt){
  return ASPxGridViewKbdHelper.prototype.HandleKeyUp.call(this, evt);
 }
});
ASPxGridLookupKeyboardHelper = _aspxCreateClass(null, {
 constructor: function(gridLookup, gridView, filterStrategy, selectionStrategy) {
  this.gridLookup = gridLookup;
  this.filterStrategy = filterStrategy;
  this.selectionStrategy = selectionStrategy;
  this.gridView = gridView;
  this.gridViewKbdHelper = null;
 },
 Initialize: function(){
  if(this.gridLookup.enabled) {
   this.gridViewKbdHelper = this.gridView.kbdHelper;
   this.gridViewKbdHelper.SetGridLookupKBHelper(this);
   this.gridViewKbdHelper.SetGridLookup(this.gridLookup);
  }
 },
 IsKeyAllowedForGridView: function(evt, fromLookup) {
  var keyCode = _aspxGetKeyCode(evt); 
  if((keyCode == ASPxKey.Right || keyCode == ASPxKey.Left) && fromLookup)
   return false;
  if(evt.altKey && (keyCode == ASPxKey.Up || keyCode == ASPxKey.Down))
   return false;
  var onlyFilteringKey = fromLookup && ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt);
  return !onlyFilteringKey;
 },
 IsKeyAllowedForLookup: function(evt, fromLookup) {
  var keyCode = _aspxGetKeyCode(evt); 
  if(evt.shiftKey && (keyCode == ASPxKey.Home || keyCode == ASPxKey.End))
   return !fromLookup;
  if(evt.shiftKey && (keyCode == ASPxKey.PageUp || keyCode == ASPxKey.PageDown || keyCode == ASPxKey.Home || keyCode == ASPxKey.End))
   return true;
  if(evt.altKey && (keyCode == ASPxKey.Up || keyCode == ASPxKey.Down))
   return true;
  var canHarmInput = !fromLookup && ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt);
  return !canHarmInput;
 },
 OnGLPKeyDown: function(evt) {
  this.filterStrategy.OnKeyDown(evt);
  this.OnGLPSpecialKeyDown(evt);
 },
 OnGLPSpecialKeyDown: function(evt){
  var keyCode = _aspxGetKeyCode(evt);   
  switch(keyCode) {
   case ASPxKey.Esc:
    this.gridLookup.OnEscape();
    break;
   case ASPxKey.Enter:
    this.gridLookup.OnEnter();
    break;
   case ASPxKey.Tab:
    this.gridLookup.OnTab();
    break;
   case ASPxKey.Home:
    if(evt.shiftKey)
     this.gridLookup.OnHome();
    break;
   case ASPxKey.End:
    if(evt.shiftKey)
     this.gridLookup.OnEnd();
    break;
   case ASPxKey.Up:
    if(evt.altKey)
     this.gridLookup.OnArrowUp(evt);
    else 
     _aspxPreventEvent(evt);
    break;
   case ASPxKey.Down:
    if(evt.altKey)
     this.gridLookup.OnArrowDown(evt);
    else 
     _aspxPreventEvent(evt);
    break;
  }
 },
 OnGLPKeyUp:function(evt) {
  if(this.gridLookup && this.filterStrategy)
   this.filterStrategy.OnKeyUp(evt);
 },
 OnKeyDown: function(evt, fromLookup) {
  var result = false;
  this.selectionStrategy.OnKeyDown(evt);
  if(this.IsKeyAllowedForGridView(evt, fromLookup))
   result = this.gridViewKbdHelper.HandleKeyDownCore(evt);
  if(this.IsKeyAllowedForLookup(evt, fromLookup))
   this.OnGLPKeyDown(evt);
  return result;
 },
 OnKeyPress: function(evt, fromLookup) {
  if(this.IsKeyAllowedForGridView(evt, fromLookup))
   return this.gridViewKbdHelper.HandleKeyPressCore(evt);
  return false;
 },
 OnKeyUp: function(evt, fromLookup) {
  var result = false;
  if(this.IsKeyAllowedForGridView(evt, fromLookup))
   result = this.gridViewKbdHelper.HandleKeyUpCore(evt);
  if(this.IsKeyAllowedForLookup(evt, fromLookup))
   this.OnGLPKeyUp(evt);
  return result;
 },
 FilteringByTimer: function(){
  if(this.filterStrategy)
   this.filterStrategy.Filtering();
 }
});
ASPxGridLookupDisabledFilteringStrategy = _aspxCreateClass(null, {
 Initialize: function(){},
 OnEndCallback: function(allowTextHighlighting){},
 OnKeyDown: function(evt){},
 OnKeyUp: function(evt){},
 OnApplyChanges: function(evt){},
 Filtering: function(){},
 RestoreFocusAterCallbackAllowed: function(){},
 FilteringCallback: function(){ return false; },
 IsFilterTimerActive: function() { return false;}
});
ASPxGridLookupEnabledFilteringStrategyBase = _aspxCreateClass(ASPxGridLookupDisabledFilteringStrategy, {
 constructor: function(gridLookup) {
  this.gridLookup = gridLookup;
  this.gridViewWrapper = gridLookup.gridViewWrapper;
  this.filterTimer = gridLookup.filterTimer;
  this.filterTimerId = -1;
  this.filteringCallback = false;
  this.refiltrationRequired = false;
  this.filter;
 },
 FilteringCallback: function(){ 
  return this.filteringCallback; 
 },
 RestoreFocusAterCallbackAllowed: function(){
  return !this.FilteringCallback();
 },
 IsDefualtRowHighlitingEnabled: function() {
  return this.GetInputElement().value != "";
 },
 GetInputElement: function() {
  return this.gridLookup.GetInputElement();
 },
 EnsureShowDropDownArea: function(){
  if(!this.gridLookup.droppedDown)
   this.gridLookup.ShowDropDownArea(true);
 },
 Filtering: function(){
  this.FilterStopTimer();
  if(this.gridLookup.focused)
   this.EnsureShowDropDownArea();
  var currentFilter = this.GetInputElement().value;
  if(this.filter !== currentFilter){
   this.filter = currentFilter;
   this.FilteringCore(this.filter);
  }
 },
 FilteringCore: function(filter){
  this.PerformFilteringCallback(filter);
 },
 PerformFilteringCallback: function(args){
  if(this.FilteringCallback())
   this.refiltrationRequired = true;
  else {
   this.gridLookup.LockInput();
   this.refiltrationRequired = false;
   this.filteringCallback = true;
   this.gridLookup.SendGridViewCustomCallback(ASPxGLPCallbackCommand.Filter, args);
  }
 },
 OnEndCallback: function(allowTextHighlighting){
  if(this.filteringCallback){
   if(this.refiltrationRequired){
    this.refiltrationRequired = false;
    this.FinalizeFilteringCallback();
    var _this = this;
    window.setTimeout(function(){_this.FilteringCore(_this.GetInputElement().value);}, 0);
   } else
    this.OnEndFilteringCallbackCore(allowTextHighlighting);
  } else
   this.filter = null;
 },
 OnEndFilteringCallbackCore: function(){
  this.FinalizeFilteringCallback();
 },
 FinalizeFilteringCallback: function(){
  this.gridLookup.UnlockInput();
  this.filteringCallback = false;
 },
 OnApplyChanges: function(){
  this.FilterStopTimer();
  this.filter = null;
 },
 IsFilterTimerActive: function() {
  return (this.filterTimerId != -1);
 },
 FilterStopTimer: function() {
  this.filterTimerId = _aspxClearTimer(this.filterTimerId);
 },
 FilterStartTimer: function(){
  this.isEnterLocked = true;
  this.filterTimerId = _aspxSetTimeout("aspxTEFilterByTimer('" + this.gridLookup.name + "')", this.filterTimer);
 }
});
ASPxGridLookupContainsFilteringStrategy = _aspxCreateClass(ASPxGridLookupEnabledFilteringStrategyBase, {
 constructor: function(gridLookup) {
  this.filterChanged = false;
  this.constructor.prototype.constructor.call(this, gridLookup);
 },
 OnKeyDown: function(evt){
  if(evt.keyCode === ASPxKey.Tab){
   if(this.filterChanged){
    this.FilterStopTimer();
    this.FilterStartTimer();
   }
  } else if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt))
   this.filterChanged = true;
 },
 OnKeyUp: function(evt) {
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)){
   this.filterChanged = true;
   this.FilterStopTimer();
   this.FilterStartTimer();
  }
 },
 OnEndFilteringCallbackCore: function(allowTextHighlighting){
  this.OnFilterCallbackHighlightAndSelect(allowTextHighlighting);
  ASPxGridLookupEnabledFilteringStrategyBase.prototype.OnEndFilteringCallbackCore.call(this);
  this.filterChanged = false;
 },
 OnFilterCallbackHighlightAndSelect: function(){
  if(!this.IsDefualtRowHighlitingEnabled()) return;
  var grid = this.gridLookup.GetGridView();
  var highlightRowIndex = grid.GetTopVisibleIndex();
  if(!grid.IsDataRow(highlightRowIndex)) 
   highlightRowIndex++;
  this.HighlightVisibleRow(highlightRowIndex);
 },
 HighlightVisibleRow: function(visibleRowIndex){
  this.gridLookup.LockInput();
  this.gridViewWrapper.HighlightVisibleRow(visibleRowIndex);
  this.gridLookup.UnlockInput();
 }
});
ASPxGridLookupStartsWithFilteringStrategy = _aspxCreateClass(ASPxGridLookupContainsFilteringStrategy, {
 constructor: function(gridLookup) {
  this.constructor.prototype.constructor.call(this, gridLookup);
 },
 OnKeyUp: function(evt) {
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)){
   var input = this.GetInputElement();
   var newFilter = input.value.toLowerCase();
   var filterChanged = !this.filter || newFilter !== this.filter.toLowerCase();
   var filteringBackSpace = evt.keyCode == ASPxKey.Backspace && !filterChanged;
   if(filterChanged || filteringBackSpace){
    this.FilterStopTimer();
    if(filteringBackSpace)
     this.FilteringBackspace();
    else
     this.FilterStartTimer();
   }
  }
 },
 FilteringBackspace: function(){
  var input = this.GetInputElement();
  ASPxStartWithFilteringUtils.RollbackOneSuggestedChar(input);
  this.FilterStartTimer();
 },
 OnFilterCallbackHighlightAndSelect: function(allowTextHighlighting){
  if(!this.IsDefualtRowHighlitingEnabled()) return;
  var grid = this.gridLookup.GetGridView();
  var visibleRowsOnPage = grid.GetVisibleRowsOnPage();
  if(visibleRowsOnPage > 0){
   var highlightRowIndex = grid.GetTopVisibleIndex();
   if(!grid.IsDataRow(highlightRowIndex)) 
    highlightRowIndex++;
   var firstItemText = this.gridViewWrapper.GetVisibleRowText(highlightRowIndex);
   var isTextClearing = this.filter == "" && this.filter != firstItemText;
   if(!isTextClearing){
    this.HighlightVisibleRow(highlightRowIndex);
    if(allowTextHighlighting)
     this.HighlightSuggestedText(firstItemText);
   } else 
    this.HighlightVisibleRow(-1);
  }
 },
 HighlightSuggestedText: function(suggestedText){
  var input = this.GetInputElement();
  ASPxStartWithFilteringUtils.HighlightSuggestedText(input, suggestedText);
 }
});
ASPxGridLookupSelectionStrategyBase = _aspxCreateClass(null, {
 constructor: function(gridLookup) {
  this.gridLookup = gridLookup;
  this.gridViewWrapper = gridLookup.gridViewWrapper;
  this.allowFocusedRow = gridLookup.allowFocusedRow;
  this.isSelectionChanged = false;
  this.lastSuccessfulInputText = null;
  this.lastSuccessfulTextValues = []; 
  this.lastChangeWasInInput = false;
 },
 RestoreFocusAterCallbackAllowed: function(){ return true; },
 ChangeTextOnFocusRowChangedCallbackAllowed: function(){ return true; },
 OnGridViewRowClick: function(args){ },
 OnGridViewFocusedRowChanged: function(e){ },
 OnGridViewInternalCheckBoxClick: function(args){ },
 OnGridViewSelectionChanged: function(e){
  var grid = this.gridLookup.GetGridView();
  var selectedRowIndex = _aspxIsExists(e.visibleIndex) ? e.visibleIndex : grid.GetFocusedRowIndex();
  if(e.isSelected === true)
   this.OnGridViewRowSelected(selectedRowIndex, e.isAllRecordsOnPage);
  else if(e.isSelected === false)
   this.OnGridViewRowUnselected(selectedRowIndex, e.isAllRecordsOnPage);
 },
 OnGridViewRowSelected: function (selectedRowIndex, isAllRecordsOnPage) {
  this.SelectRowInLookup(selectedRowIndex, isAllRecordsOnPage);
  this.GridSelectionChanged();
 },
 OnGridViewRowUnselected: function(selectedRowIndex, isAllRecordsOnPage){
  this.GridSelectionChanged();
 },
 ShouldApplyAfterCallback: function(callbackCommand){
  return this.gridLookup.CallbackResultCanBeApplied() && 
   (callbackCommand == ASPxGLPCallbackCommand.ApplyChanges || callbackCommand == ASPxGLPCallbackCommand.ApplyInputChanges || 
   callbackCommand == "CUSTOMCALLBACK" || callbackCommand == "SELECTROWSKEY" || callbackCommand == "SELECTROWS");
 },
 CallbackChangedGrid: function(callbackCommand){
  return callbackCommand != "";
 },
 ShouldApplySilent: function(callbackCommand){
  return this.gridLookup.CallbackResultCanBeApplied() && callbackCommand == "CUSTOMCALLBACK";
 },
 OnGridViewEndCallback: function() {
  var grid = this.gridLookup.GetGridView();
  if(!this.gridLookup.readOnly && this.CallbackChangedGrid(grid.callbackCommand)){
   if(this.ShouldApplyAfterCallback(grid.callbackCommand))
    this.OnChangesApplied(this.ShouldApplySilent(grid.callbackCommand));
   else if(grid.callbackCommand != ASPxGLPCallbackCommand.CancelChanges) 
    this.GridSelectionChanged();
  }
 },
 OnKeyDown: function(evt) {
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt))
   this.InputChanged();
 },
 InputChanged: function(){
  this.SelectionChanged();
  this.lastChangeWasInInput = true;
 },
 GridSelectionChanged: function(){
  this.lastChangeWasInInput = false;
  this.SelectionChanged();
 },
 SelectionChanged: function() {
  this.isSelectionChanged = true;
 },
 ResetSelectionChanged: function(){
  this.lastChangeWasInInput = false;
  this.isSelectionChanged = false;
 },
 SelectRowInLookup: function (visibleRowIndex, isAllRecordsOnPage) {
 },
 OnApplyChanges: function(){
  if(this.isSelectionChanged){
   var applyCallbackParams = this.GetApplyCallbackParams();
   this.gridLookup.SendGridViewCustomCallback(applyCallbackParams.Command, applyCallbackParams.args);
   this.ResetSelectionChanged();
  }
 },
 OnCancelChanges: function(){
  this.RestoreLastSuccessfulControlState();
 },
 GetApplyCallbackParams: function(){
  if(this.lastChangeWasInInput)
   return this.GetApplyInputCallbackParams();
  return this.GetApplyGridSelectionCallbackParams();
 },
 GetApplyInputCallbackParams: function(){
  return { Command: ASPxGLPCallbackCommand.ApplyInputChanges, args: "" };
 },
 GetApplyGridSelectionCallbackParams: function(){
  var grid = this.gridLookup.GetGridView();
  var appliedRowIndex = grid.GetFocusedRowIndex();
  var appliedRowKey = grid.GetRowKey(appliedRowIndex);
  if(appliedRowKey === null)
   appliedRowKey = "";
  return { Command: ASPxGLPCallbackCommand.ApplyChanges, args: appliedRowKey };
 },
 RestoreLastSuccessfulControlState: function() {
  if(!this.isSelectionChanged) return;
  this.ResetSelectionChanged();
  this.gridLookup.SetTextWithoutApply(this.lastSuccessfulInputText);
  this.gridLookup.SendGridViewCustomCallback(ASPxGLPCallbackCommand.CancelChanges, this.GetLastSuccessfulKeyValues());
 },
 GetLastSuccessfulKeyValues: function() {
  var lastSuccessfulKeyValues = [];
  for(var key in this.lastSuccessfulTextValues)
   lastSuccessfulKeyValues.push(key);
  return lastSuccessfulKeyValues;
 },
 OnChangesApplied: function(silent) {
  var grid = this.gridLookup.GetGridView();
  this.lastSuccessfulTextValues = [];
  this.lastSuccessfulInputText = grid.currentSelectionState.InputText;
  this.lastSuccessfulTextValues = _aspxCloneObject(grid.currentSelectionState.SelectedRowTexts);
  this.gridLookup.OnGridViewTextChanged(this.lastSuccessfulInputText, silent);
 }
});
ASPxGridLookupSingleSelectionStrategy = _aspxCreateClass(ASPxGridLookupSelectionStrategyBase, {
 constructor: function(gridLookup) {
  this.constructor.prototype.constructor.call(this, gridLookup);
  this.nextSelectionOrFocusingRequiresApplying = false; 
  this.EnsureFocusedRadioButtonChecked();
 },
 OnGridViewInternalCheckBoxClick: function(args){ 
  args.cancel = true;
  var grid = this.gridLookup.GetGridView();
  var rowAlreadySelected = args.visibleIndex == grid.GetFocusedRowIndex();
  grid.SetFocusedRowIndex(rowAlreadySelected ? -1 : args.visibleIndex);
  var instance = this;
  window.setTimeout(function(){instance.OnGridViewSelectedChangedCore();}, 0);
 },
 SelectRowInLookup: function(visibleRowIndex){
  var grid = this.gridLookup.GetGridView();
  if(grid.IsDataRow(visibleRowIndex) && this.gridViewWrapper.GetIsRowOnPage(visibleRowIndex)) {
   var pageVisibleRowIndex = this.gridViewWrapper.ConvertVisibleRowIndexToRowIndexOnPage(visibleRowIndex);
   var newText = this.gridViewWrapper.GetVisibleRowTextOnPage(pageVisibleRowIndex);
   this.gridLookup.OnGridViewTextChanged(newText, true);
  }
 },
 IsRadioButtonEvt: function(args) {
  var grid = this.gridLookup.GetGridView();
  var radioButtonInputElement = grid.GetDataRowSelBtn(args.visibleIndex);
  if(radioButtonInputElement) {
   var radioButton = grid.internalCheckBoxCollection.Get(radioButtonInputElement.id);
   return _aspxGetEventSource(args.htmlEvent) == radioButton.mainElement;
  }
  return false;
 },
 OnGridViewRowClick: function(args){
  if(this.IsRadioButtonEvt(args))
   return;
  ASPxGridLookupSelectionStrategyBase.prototype.OnGridViewRowClick.call(this, args);
  var grid = this.gridLookup.GetGridView();
  var rowAlreadySelected = args.visibleIndex == grid.GetFocusedRowIndex();
  if(rowAlreadySelected)
   this.OnGridViewSelectedChangedCore();
  else if(grid.IsDataRow(args.visibleIndex))
   this.nextSelectionOrFocusingRequiresApplying = true;
 },
 OnGridViewRowSelected: function(selectedRowIndex){ 
  ASPxGridLookupSelectionStrategyBase.prototype.OnGridViewRowSelected.call(this, selectedRowIndex);
  if(this.nextSelectionOrFocusingRequiresApplying)
   this.OnGridViewSelectedChangedCore();
 },
 OnGridViewFocusedRowChanged: function(e){
  ASPxGridLookupSelectionStrategyBase.prototype.OnGridViewFocusedRowChanged.call(this, e);
  this.EnsureFocusedRadioButtonChecked();
  var grid = this.gridLookup.GetGridView();
  var focusedRowVisibleIndex = grid.GetFocusedRowIndex();
  var dataRow = grid.IsDataRow(focusedRowVisibleIndex);
  var newText = dataRow ? this.gridViewWrapper.GetFocusedRowText() : "";
  this.gridLookup.OnGridViewTextChanged(newText, true);
  this.GridSelectionChanged();
  if(this.nextSelectionOrFocusingRequiresApplying)
   this.OnGridViewSelectedChangedCore();
 },
 OnGridViewSelectedChangedCore: function(){
  this.nextSelectionOrFocusingRequiresApplying = false;
  this.gridLookup.OnApplyChangesAndHideDropDown();
 },
 OnGridViewEndCallback: function() {
  ASPxGridLookupSelectionStrategyBase.prototype.OnGridViewEndCallback.call(this);
  var instance = this;
  window.setTimeout(function(){
   instance.EnsureFocusedRadioButtonChecked();
  },0);
 },
 EnsureFocusedRadioButtonChecked: function() {
  this.gridViewWrapper.EnsureFocusedRadioButtonChecked();
 }
});
ASPxGridLookupMultipleSelectionStrategy = _aspxCreateClass(ASPxGridLookupSelectionStrategyBase, {
 constructor: function(gridLookup) {
  this.constructor.prototype.constructor.call(this, gridLookup);
 },
 OnGridViewRowUnselected: function(selectedRowIndex, isAllRecordsOnPage){
  ASPxGridLookupSelectionStrategyBase.prototype.OnGridViewRowUnselected.call(this, selectedRowIndex, isAllRecordsOnPage);
  this.UnselectRowInLookup(selectedRowIndex, isAllRecordsOnPage);
 },
 OnGridViewFocusedRowChanged: function(e){
  ASPxGridLookupSelectionStrategyBase.prototype.OnGridViewFocusedRowChanged.call(this, e);
  var grid = this.gridLookup.GetGridView();
  _aspxSetFocus(grid.GetMainElement());
 },
 SelectRowInLookup: function (visibleRowIndex, isAllRecordsOnPage) {
  if(isAllRecordsOnPage){
   var grid = this.gridLookup.GetGridView();
   var bottomVisibleIndex =  this.gridViewWrapper.GetBottomVisibleIndex();
   for (var i = grid.GetTopVisibleIndex(); i <= bottomVisibleIndex; i++)
    this.SelectRowInLookupCore(i);
  } else 
   this.SelectRowInLookupCore(visibleRowIndex);
  var newText = this.GetSelectedRowsText();
  this.gridLookup.OnGridViewTextChanged(newText, true);
 },
 SelectRowInLookupCore: function (visibleRowIndex) {
  var grid = this.gridLookup.GetGridView();
  if (grid.IsDataRow(visibleRowIndex) && this.gridViewWrapper.GetIsRowOnPage(visibleRowIndex)) {
   var pageVisibleRowIndex = this.gridViewWrapper.ConvertVisibleRowIndexToRowIndexOnPage(visibleRowIndex);
   var selectedRowText = this.gridViewWrapper.GetVisibleRowTextOnPage(pageVisibleRowIndex)
   var selectedRowTexts = this.gridViewWrapper.GetSelectedRowTexts();
   var rowKeyValue = grid.GetRowKey(visibleRowIndex);
   selectedRowTexts[rowKeyValue] = selectedRowText;
  }
 },
 UnselectRowInLookup: function(visibleRowIndex, isAllRecordsOnPage){
  var grid = this.gridLookup.GetGridView();
  if(isAllRecordsOnPage){
   var topVisibleIndex = grid.GetTopVisibleIndex();
   var bottomVisibleIndex = this.gridViewWrapper.GetBottomVisibleIndex();
   for(var i = topVisibleIndex; i <= bottomVisibleIndex; i++)
    this.UnselectRowInLookupCore(i);
  } else
   this.UnselectRowInLookupCore(visibleRowIndex);
  var newText = this.GetSelectedRowsText();
  this.gridLookup.OnGridViewTextChanged(newText, true);
 },
 UnselectRowInLookupCore: function(visibleRowIndex){
  var grid = this.gridLookup.GetGridView();
  if(grid.IsDataRow(visibleRowIndex) && this.gridViewWrapper.GetIsRowOnPage(visibleRowIndex)){
   var rowKeyValue = grid.GetRowKey(visibleRowIndex);
   var selectedRowTexts = this.gridViewWrapper.GetSelectedRowTexts();
   delete selectedRowTexts[rowKeyValue];
  }
 },
 GetSelectedRowsText: function(){
  var sb = [];
  var selectedRowTexts = this.gridViewWrapper.GetSelectedRowTexts();
  for(var key in selectedRowTexts)
   sb.push(selectedRowTexts[key]);
  return sb.join(this.gridLookup.multiTextSeparator);
 },
 RestoreFocusAterCallbackAllowed: function(){
  return false;
 },
 ChangeTextOnFocusRowChangedCallbackAllowed: function(){
  return false;
 }
});
function aspxGLPOnGridViewEvent(name, eventHandler){
 var gridLookup = aspxGetControlCollection().Get(name);
 if(gridLookup) {
  var sender = arguments[2];
  var args = arguments[3];
  return gridLookup[eventHandler](sender, args);
 }
}
function apsxGLPCallMethodWithArgument(name, methodName, argument) { 
 var gridLookup = aspxGetControlCollection().Get(name);
 if(gridLookup) gridLookup[methodName](argument);
}
function aspxTEFilterByTimer(name){
 var gridLookup = aspxGetControlCollection().Get(name);
 if(gridLookup && gridLookup.keyboardHelper) gridLookup.keyboardHelper.FilteringByTimer();
}

MVCxClientGridLookup = _aspxCreateClass(ASPxClientGridLookup, {
 SendGridViewCustomCallback: function(command, args) {
  var grid = this.GetGridView();
  grid.callbackCustomArgs[this.name] = $("input[name=" + this.name + "]").val();
  ASPxClientGridLookup.prototype.SendGridViewCustomCallback.call(this, command, args);
 }
});
ASPxRelatedControlManager = {
 storage: { },
 GetRelatedCollection: function(masterName) {
  if(!this.storage[masterName])
   this.storage[masterName] = [ ];
  return this.storage[masterName];
 },
 RegisterRelatedControl: function(masterName, name) {
  this.GetRelatedCollection(masterName)[name] = name;
 },
 RegisterRelatedControls: function(masterName, names) {
  var relatedCollection = this.GetRelatedCollection(masterName);
  var name;
  for(var i = 0; i < names.length; i++) {
   name = names[i];
   relatedCollection[name] = name;
  }
 },
 GetLinkedControls: function(masterControl) {
  var result = [ masterControl ];
  for(var name in this.GetRelatedCollection(masterControl.name)) {
   var control = aspxGetControlCollection().Get(name);
   if(control)
    result.push(control);
  }
  return result;
 },
 coverCache: { },
 panelCache: { },
 timers: { },
 Shade: function(masterControl) {  
  this.ShadeCore(masterControl, true);
  var name = masterControl.name;
  this.timers[name] = _aspxSetTimeout("ASPxRelatedControlManager.ShadeTransition('" + name + "')", 750);
 },
 ShadeCore: function(masterControl, isTransparent) {
  if(!isTransparent) {
   this.panelCache[masterControl.name] = masterControl.ShowLoadingPanel();
  } 
  var controls = this.GetLinkedControls(masterControl);
  for(var i = 0; i < controls.length; i++) {
   var control = controls[i];
   var cover = control.CreateLoadingDiv(document.body, control.GetMainElement());
   if(_aspxIsExistsElement(cover)) {
    if(isTransparent) {
     cover.className = "";
     cover.style.background = "white";         
     if(__aspxIE)
      cover.style.filter = "alpha(opacity=1)";
     else
      cover.style.opacity = "0.01";
    }
    this.coverCache[control.name] = cover;
   }
  }  
 },
 ShadeTransition: function(masterName) {
  var obj = aspxGetControlCollection().Get(masterName);
  if(obj) {
   this.Unshade(obj);
   this.ShadeCore(obj, false);
  }
 },
 Unshade: function(masterControl) {
  var masterName = masterControl.name;
  _aspxClearTimer(this.timers[masterName]);
  delete this.timers[masterName];
  var panel = this.panelCache[masterName];
  if(_aspxIsExistsElement(panel))
   _aspxRemoveElement(panel);
  delete this.panelCache[masterName];
  var controls = this.GetLinkedControls(masterControl);
  for(var i = 0; i < controls.length; i++) {
   var control = controls[i];
   var cover = this.coverCache[control.name];
   if(_aspxIsExistsElement(cover))
    _aspxRemoveElement(cover);    
   delete this.coverCache[control.name];
  }
 },
 CreateInfo: function() {
  return { 
   clientObjectName:   "",
   elementId:    "",
   innerHtml:    "",
   parameters:   ""
  }; 
 },
 ProcessInfo: function(info) {
  var control = aspxGetControlCollection().Get(info.clientObjectName);  
  if(!control || !_aspxIsFunction(control.ProcessCallbackResult))
   this.ProcessCallbackResultDefault(info.elementId, info.innerHtml, info.parameters);
  else
   control.ProcessCallbackResult(info.elementId, info.innerHtml, info.parameters);
 },
 ProcessCallbackResultDefault: function(elementId, innerHtml, parameters) {
  var element = _aspxGetElementById(elementId);
  if(_aspxIsExistsElement(element))
   element.innerHTML = innerHtml;  
 },
 ParseResult: function(result) {  
  var prevIndex = 0;
  var index;
  var lens;
  var info;
  while(true) {
   var remm = result.substring(prevIndex);
   index = result.indexOf("|", prevIndex);
   if(index < 0)
    break;
   lens = result.substring(prevIndex, index).split(",");
   prevIndex = index + 1;
   info = this.CreateInfo();
   info.clientObjectName = result.substr(prevIndex, lens[0]);
   prevIndex += parseInt(lens[0]);
   info.elementId = result.substr(prevIndex, lens[1]);
   prevIndex += parseInt(lens[1]);
   info.innerHtml = result.substr(prevIndex, lens[2]);
   prevIndex += parseInt(lens[2]);
   info.parameters = result.substr(prevIndex, lens[3]);
   prevIndex += parseInt(lens[3]);
   this.ProcessInfo(info);   
  }
 }
};
ASPxPivotDragManager = _aspxCreateClass(null, {
 constructor: function(pivot, drag) {
  this.DragTargets = new ASPxClientCursorTargets();
  this.Configure(pivot, drag, this.DragTargets);
 },
 Configure: function(pivot, drag, targets) {
  this.configureDrag(pivot, drag, targets);
  this.configureTargets(pivot, targets, drag);
  this.registerTargets(targets, drag.obj);
 },
 configureDrag: function(pivot, drag, targets) {
  drag.pGrid = pivot;
  drag.targets = targets;
  drag.onCloneCreating = this.cloneCreating;
  drag.onCloneCreated = this.cloneCreated;
  drag.onDragDivCreating = this.onDragDivCreating;
  drag.onEndDrag = this.endDrag;
  drag.onCancelDrag = function() {
   if(drag.pGrid)
    drag.pGrid.DragDropManager.DragTargets = null;
  };
 },
 configureTargets: function(pivot, targets, drag) {
  targets.pGrid = pivot;
  targets.drag = drag;
  targets.onTargetChanging = this.targetChanging;
  targets.onTargetChanged = this.targetChanged;
  targets.onTargetAllowed = this.targetAllowed;
 },
 cloneCreating: function(clone) {
  var pGrid = __aspxDragHelper.pGrid;
  var groups = pGrid.getGroups();
  if(groups == null) return clone;
  for(var i = 0; i < groups.length; i++) {
   if(groups[i].ContainsField(clone.id)) {
    __aspxDragHelper.obj = pGrid.getField(groups[i], 0);
    clone = pGrid.cloneGroup(groups[i]);
    break;
   }
  }
  if(clone.clientLeft == 0 && clone.offsetTop == 0)
   this.centerClone = true;
  return clone;
 },
 cloneCreated: function(clone) {
  var dragHelper = this;
  var list = new Array();
  var width = dragHelper.obj.offsetWidth + "px";
  clone.style.width = width;
  clone.style.opacity = 0.5;
  clone.style.filter = 'alpha(opacity=50)';
  if(clone.addEventListener) {
   clone.addEventListener('DOMMouseScroll', dragHelper.pGrid.ScrollFieldList, false);
  }
  clone.onmousewheel = dragHelper.pGrid.ScrollFieldList;
  clone.DragDropHelper = dragHelper;
  list.push(clone);
  for(var i = 0; i < clone.childNodes.length; i++) {
   if(_aspxIsExists(clone.childNodes[i].style))
    clone.childNodes[i].style.width = width;
   list.push(clone.childNodes[i]);
  }
  for(var i = 0; i < list.length; i++) {
   if(!_aspxIsExists(list[i].style)) continue;
   width = new String(list[i].style.width);
   if(width.indexOf("%") > -1) {
    list[i].style.width = "";
   }
  }
 },
 onDragDivCreating: function(drag, dragDiv) {
  var rootElement = drag.pGrid.GetMainElement();
  if(!dragDiv || !rootElement) return;
  dragDiv.className = rootElement.className;
  dragDiv.style.cssText = rootElement.style.cssText;
 },
 endDrag: function(drag) {
  var pGrid = drag.pGrid;
  pGrid.targetImagesChangeVisibility(false);
  var targets = drag.targets;
  var manager = pGrid.DragDropManager;
  var targetElement = targets.targetElement;
  if(targetElement == drag.obj || !manager.isTargetAllowed(targets)) 
   return;
  if(typeof (targetElement.pgddCustomDrop) != "undefined") {
   targetElement.pgddCustomDrop(drag.obj, targets.targetTag);
   return;
  }
  if(pGrid.isDeferUpdatesChecked() && pGrid.GetCustomizationFieldsWindowContentDiv().className != "TopPanelOnly" && pGrid.isFieldListElement(targetElement)){
   manager.endDragClientSide(drag, pGrid, targets, targetElement);
   pGrid.forcePerformDeferUpdatesCallback = true;
  }
  else{
   pGrid.PerformCallbackInternal(targetElement, 'D' + '|' + drag.obj.id + '|' + targetElement.id + '|' + targets.targetTag);
  }
 },
 endDragClientSide: function(drag, pGrid, targets, targetElement) {
  var targetTableBody;
  var movedRow;
  if(pGrid.isFieldListElement(drag.obj))
   movedRow = _aspxGetParentByTagName(drag.obj, "tr");
  else {
   var groupIndex;
   var movedRowId;
   var lastIndex = drag.obj.id.lastIndexOf("_");
   var groups = pGrid.getGroups();
   for(var i = 0; i < groups.length; i++)
    if(groups[i].ContainsField(drag.obj.id))
     groupIndex = i;
   if(groupIndex == null)
    movedRowId = drag.obj.id.substr(0, lastIndex).replace("_DHP", "") + "_dxpgCustFields" + drag.obj.id.substr(lastIndex, drag.obj.id.length);
   else
    movedRowId = drag.obj.id.substr(0, lastIndex).replace("_DHP", "") + "_dxpgCustFields_pgGroupHeader" + groupIndex;
   movedRow = _aspxGetParentByTagName(document.getElementById(movedRowId), "tr");
  }
  var treeView = pGrid.GetCustomizationTreeView();
  var sourceTable = _aspxGetParentByTagName(movedRow, "table");
  if(sourceTable.id.indexOf("listCF") != -1 && treeView)
   treeView.HandleDragFromCompleted(drag);
  if(targetElement.id.indexOf("pgHeader") != -1 || targetElement.id.indexOf("pgGroupHeader") != -1) {
   targetTableBody = _aspxGetParentByTagName(targetElement.parentNode, "tbody");
   targetRow = targetElement.parentNode.parentNode;
   if(targetRow != movedRow) {
    movedRow.parentNode.removeChild(movedRow);
    if(targets.targetTag)
     targetTableBody.insertBefore(movedRow, targetRow);
    else
     _aspxInsertElementAfter(movedRow, targetRow);
   }
  } else {
   movedRow.parentNode.removeChild(movedRow);
   targetTableBody = _aspxGetChildByTagName(targetElement, "tbody", 0);
   if(targetTableBody.parentNode.style["display"] == "none" && treeView)
    treeView.HandleDragToCompleted(drag);
   if(targets.targetTag && targetTableBody.firstChild)
    targetTableBody.insertBefore(movedRow, targetTableBody.firstChild);
   else
    targetTableBody.appendChild(movedRow);
  }
  pGrid.resetDragOverFieldList(pGrid.LastHoverFieldList);
  pGrid.FixIEFieldListScrollbar();
 },
 targetAllowed: function(targetElement, x, y) {
  if(_aspxIsExists(targetElement.pgddIsAllowed))
   return targetElement.pgddIsAllowed(x, y);
  return true;
 },
 targetChanging: function(targets) {
  var pGrid = targets.pGrid;
  if(pGrid.IsTargetElementArea(targets))
   targets.targetTag = true;
  if(pGrid.isVerticalElement(targets.targetElement)) {
   if(targets.targetElement.id.indexOf("pgArea") > -1)
    targets.targetTag = targets.y < _aspxGetAbsoluteY(_aspxGetChildrenByPartialClassName(targets.targetElement, "dxpgFLListDiv")[0]) + 2;
   else
    targets.targetTag = targets.isTopPartOfElement();
  }
  else
   targets.targetTag = targets.isLeftPartOfElement();
  if(pGrid.isInnerGroupTarget(targets.targetElement, targets.targetTag)) {
   targets.targetElement = null;
   return;
  }
  if(targets.dataHeadersPopup != null) {
   var manager = pGrid.DragDropManager;
   manager.targetChangingDataHeadersPopup(targets);
  }
 },
 targetChangingDataHeadersPopup: function(targets) {
  var popupControl = targets.dataHeadersPopup;
  if(targets.dataHeadersPopupCellRect.Contains(targets.x, targets.y)) {
   if(!popupControl.IsVisible()) {
    popupControl.Show();
    var windowElem = popupControl.GetWindowElement(-1);
    popupControl.bounds = _aspxGetBounds(windowElem);
    var list = new Array();
    _aspxGetElementsByPartialId(windowElem, 'pgHeader', list);
    _aspxGetElementsByPartialId(windowElem, 'pgGroupHeader', list);
    for(var i = 0; i < list.length; i++)
     for(var j = 0; j < targets.list.length; j++) {
      if(targets.list[j].targetElement == list[i]) {
       targets.list[j].absoluteX = _aspxGetAbsoluteX(list[i]);
       targets.list[j].absoluteY = _aspxGetAbsoluteY(list[i]);
       break;
      }
     }
   }
  } else {
   if(_aspxIsExists(popupControl.bounds) && popupControl.bounds != null && popupControl.IsVisible()) {
    if(popupControl.bounds.Contains(targets.x, targets.y)) {
     if(_aspxIsExists(targets.targetElement) && targets.targetElement.id.indexOf("DHP") < 0)
      targets.cancelChanging();
    } else {
     popupControl.Hide();
     popupControl.bounds = null;
    }
   }
  }
 },
 targetChanged: function(targets) {
  var pGrid = targets.pGrid;
  var manager = pGrid.DragDropManager;
  var isHeadersTable = pGrid.IsHeadersTable(targets.targetElement);
  pGrid.resetDragOverFieldList(pGrid.LastHoverFieldList);
  if(__aspxDragHelper != null && targets.targetElement != __aspxDragHelper.obj && manager.isTargetAllowed(targets)) {
   if(isHeadersTable && manager.changeTarget(targets))
    targets.targetTag = false;
   pGrid.setDragImagesPosition(targets.targetElement, targets.targetTag);
  } else {
   pGrid.targetImagesChangeVisibility(false);
  }
 },
 registerTargets: function(targets, dragObj) {
  var pGrid = targets.pGrid;
  pGrid.ListTargets = [];
  var targetIds = new Array();
  targetIds.push("pgGroupHeader", "pgHeader");
  if(pGrid.GetCustomizationFieldsWindowContentDiv() != null) {
   targets.instantAddElement = targets.addElement;
   targets.addElement = this.fieldListAddTarget;
   targets.onTargetAdding = this.fieldListTargetAdding;
   var fieldList = pGrid.getFieldListFields();
   var filterArea = pGrid.getFilterAreaFieldList();
   var columnArea = pGrid.getColumnAreaFieldList();
   var rowArea = pGrid.getRowAreaFieldList();
   var dataArea = pGrid.getDataAreaFieldList();
   targets.RegisterTargets(columnArea, targetIds);
   targets.RegisterTargets(dataArea, targetIds);
   targets.RegisterTargets(filterArea, targetIds);
   targets.RegisterTargets(rowArea, targetIds);
   targets.addElement = targets.instantAddElement;
   targets.instantAddElement = null;
   targets.onTargetAdding = null;
   targets.addElement(fieldList);
   targets.addElement(columnArea);
   targets.addElement(dataArea);
   targets.addElement(filterArea);
   targets.addElement(rowArea);
  }
  targets.onTargetAdding = this.targetAdding;
  targets.RegisterTargets(pGrid.GetDataHeadersPopupWindowElement(), targetIds);
  targets.RegisterTargets(pGrid.GetHeadersTable("DataArea"), targetIds);
  targets.RegisterTargets(pGrid.GetHeadersTable("RowArea"), targetIds);
  targets.RegisterTargets(pGrid.GetHeadersTable("ColumnArea"), targetIds);
  targets.RegisterTargets(pGrid.GetHeadersTable("FilterArea"), targetIds);
  targets.UnregisterTargets(dragObj, targetIds);
  targets.onTargetAdding = null;
  targets.addElement(pGrid.GetHeadersTable("DataArea"));
  targets.addElement(pGrid.GetHeadersTable("ColumnArea"));
  targets.addElement(pGrid.GetHeadersTable("FilterArea"));
  targets.dataHeadersPopup = pGrid.IsDataHeadersPopupExists() ? pGrid.GetDataHeadersPopup() : null;
  if(targets.dataHeadersPopup != null) {
   targets.dataHeadersPopupCell = pGrid.GetDataHeadersPopupCell();
   targets.dataHeadersPopupCellRect = _aspxGetBounds(targets.dataHeadersPopupCell);
  }
  for(var i = 0; i <= 3; i++) {
   targets.addElement(pGrid.GetEmptyAreaCell(i));
  }
  pGrid.RaiseCustomTargets(targets);
 },
 fieldListAddTarget: function(element) {
  var targets = this;
  var element = targets.instantAddElement(element);
  if(element != null) {
   element.element = element.targetElement.parentNode;
   element.absoluteX = _aspxGetAbsoluteX(element.element);
   element.absoluteY = _aspxGetAbsoluteY(element.element);
  }
 },
 fieldListTargetAdding: function(sender, element) {
  var id = sender.pGrid.getLastIdPart(element.id);
  if(id.length == 0) return false;
  var lastChar = id.charAt(id.length - 1);
  if(!(lastChar >= '0' && lastChar <= '9'))
   return false;
  if(!sender.pGrid.IsFieldListTargetAllowed(element)) {
   sender.pGrid.ListTargets.push(element);
   return false;
  }
  return true;
 },
 targetAdding: function(sender, element) {
  return sender.pGrid.IsValidDragDropTarget(element);
 },
 isTargetAllowed: function(targets) {
  if(targets.targetElement == null) return false;
  var pGrid = targets.pGrid;
  if(_aspxElementCssClassContains(targets.targetElement, "dxpgCustFields") && !_aspxElementCssClassContains(targets.targetElement, "dxpgCustFieldsFieldList")) {
   var listTable = _aspxGetChildByTagName(targets.targetElement, "table", 0);
   var listTop = _aspxGetAbsolutePositionY(listTable);
   if(targets.y > listTop && listTop + listTable.offsetHeight > targets.y)
    return false;
  }
  if(pGrid.IsHeadersTable(targets.targetElement) && !pGrid.DragDropManager.isNewTargetArea(targets.drag.obj, targets.targetElement))
   return false;
  var allAllowedIds = pivotGrid_AllowedAreaIds[pGrid.name];
  if(allAllowedIds == null) return true;
  var allowedIds = allAllowedIds[targets.drag.obj.id];
  if(!allowedIds)
   allowedIds = allAllowedIds[targets.drag.obj.id.replace("_dxpgCustFields", "").replace("_DHP", "")];
  var isAllowed;
  if(allowedIds != null) {
   var checkTarget;
   if(pGrid.isFieldListHeader(targets.targetElement) && pGrid.isDeferUpdatesChecked())
    checkTarget = _aspxGetParentByPartialClassName(targets.targetElement.parentNode, "dxpgCustFields");
   else
    checkTarget = targets.targetElement;
   isAllowed = _aspxArrayIndexOf(allowedIds, checkTarget.id.replace("_dxpgCustFields", "").replace("_DHP", "")) > -1;
   isAllowed |= _aspxArrayIndexOf(allowedIds, checkTarget.id) > -1;
   isAllowed |= pGrid.getFieldListFields().id == targets.targetElement.id;
   isAllowed &= !this.isTargetDraggedBackToCustForm(targets);
  }
  else {
   isAllowed = !this.isTargetDraggedBackToCustForm(targets);
  }
  return isAllowed;
 },
 isNewTargetArea: function(element, parent) {
  while(element) {
   if(element.parentNode == parent)
    return false;
   element = element.parentNode;
  }
  return true;
 },
 isTargetDraggedBackToCustForm: function(targets) {
  return targets.targetElement.className.indexOf("dxpgCustFieldsFieldList") >= 0 && _aspxGetParentByPartialClassName(targets.drag.obj, "dxpgCustFieldsFieldList") != null;
 },
 changeTarget: function(targets) {
  var pGrid = targets.pGrid;
  var targetElement = targets.targetElement;
  var list = new Array();
  _aspxGetElementsByPartialId(targetElement, "pgHeader", list);
  _aspxGetElementsByPartialId(targetElement, "pgGroupHeader", list);
  for(var i = list.length - 1; i >= 0; i--) {
   if(pGrid.IsValidDragDropTarget(list[i])) {
    targets.targetElement = list[i];
    return true;
   }
  }
  return false;
 }
});
ASPxClientPivotAdjustingManager = _aspxCreateClass(null, {
 constructor: function(pivot) {
  this.pivot = pivot;
  this.horzScrollRatio = 0;
 },
 getMainElement: function() { return _aspxGetElementById(this.pivot.name); },
 getMainTable: function() { return this.pivot.GetChildElementById("MT"); },
 getHeadersTable: function(stringAreaID) { return this.pivot.GetHeadersTable(stringAreaID); },
 getScrollMainDiv: function() { return this.pivot.GetChildElementById("SMDIV"); },
 getHorzScrollDiv: function() { return this.pivot.GetChildElementById("HZSDIV"); },
 getHorzScrollContentDiv: function() { return this.pivot.GetChildElementById("HZSCDIV"); },
 getHorzScrollTable: function() { return this.pivot.GetChildElementById("HZST"); },
 getHorzScrollTableDiv: function() { return this.pivot.GetChildElementById("HZSTDIV"); },
 getHorzScrollableContainerCell: function() { return this.pivot.GetChildElementById("HSCCELL"); },
 getHorzScrollSpacerDiv: function() { return this.pivot.GetChildElementById("HSSDIV"); },
 getHorzScrollFakeTieRodDiv: function() { return this.pivot.GetChildElementById("HZSTRDIV"); },
 getTopPagerElement: function() { return this.pivot.GetChildElementById("TopPager"); },
 getBottomPagerElement: function() { return this.pivot.GetChildElementById("BottomPager"); },
 getTopPager: function() { return aspxGetControlCollection().Get(this.pivot.name + "_TopPager"); },
 getBottomPager: function() { return aspxGetControlCollection().Get(this.pivot.name + "_BottomPager"); },
 SetOptions: function(widthProp, hasHorzScrollContainer) {
  this.widthProp = widthProp;
  this.hasHorzScrollContainer = hasHorzScrollContainer;
 },
 AdjustSize: function() {
  var mainEl = this.getMainElement();
  if(mainEl && _aspxElementIsVisible(mainEl) && this.hasHorzScrollContainer)
   this.adjustSizeCore();
 },
 ShouldProcessWindowResizing: function() {
  return this.hasHorzScrollContainer && _aspxIsPercentageSize(this.widthProp);
 },
 OnMarkupUpdated: function() {
  if(__aspxWebKitTouchUI)
   this.touchUIScroller.ChangeElement(this.getHorzScrollTableDiv());
  else if(__aspxMSTouchUI)
   this.touchUIScroller.update();
 },
 GetScrollableElement: function() {
  return this.getHorzScrollTableDiv();
 },
 adjustSizeCore: function() {
  var scrollDiv = this.getHorzScrollDiv();
  var fakeTieRodDiv = this.getHorzScrollFakeTieRodDiv();
  scrollDiv.style.display = "";
  fakeTieRodDiv.style.display = "none";
  var actualWidth = this.getActualWidth();
  var mainDiv = this.getScrollMainDiv();
  mainDiv.style.width = actualWidth + "px";
  scrollDiv.style.width = actualWidth + "px";
  fakeTieRodDiv.style.width = actualWidth + "px";
  if(this.getTopPagerElement())
   this.updatePagerWidth(this.getTopPager(), actualWidth);
  if(this.getBottomPagerElement())
   this.updatePagerWidth(this.getBottomPager(), actualWidth);
  var scrollLeft = this.getHorzScrollTableDiv().scrollLeft / this.horzScrollRatio;
  this.SyncHorzScrollTable();
  this.OnHorzScroll(scrollLeft);
  if(this.horzScrollRatio == 0) {
   scrollDiv.style.display = "none";
   fakeTieRodDiv.style.display = "";
  }
 },
 updatePagerWidth: function(pager, width) {
  if(pager) {
   pager.SetWidth(width);
  }
 },
 getActualWidth: function() {
  var actualWidth = this.getActualWidthFromWidthProp();
  var addon = _aspxGetLeftRightBordersAndPaddingsSummaryValue(this.getMainElement());
  if(__aspxFirefox)
   addon *= 2; 
  actualWidth = actualWidth - addon;
  return actualWidth < 0 ? 0 : actualWidth;
 },
 getActualWidthFromWidthProp: function() {
  if(!this.widthProp || this.widthProp == "") return 0;
  if(_aspxIsPercentageSize(this.widthProp))
   return this.getActualWidthFromPercentage(this.widthProp);
  else
   return _aspxPxToInt(this.widthProp);
 },
 getActualWidthFromPercentage: function(width) {
  var mainElem = this.getMainElement();
  var oldWidth = this.getScrollMainDiv().style.width;
  var isHorzScrollHidden = this.getHorzScrollDiv().style.display == "none";
  var filterAreaHeadersContainer = this.getHeadersTable('FilterArea');
  var columnAreaHeadersContainer = this.getHeadersTable('ColumnArea');
  var topPagerEl = this.getTopPagerElement();
  var bottomPagerEl = this.getBottomPagerElement();
  this.getScrollMainDiv().style.width = "";
  this.getHorzScrollDiv().style.display = "none";
  this.getHorzScrollFakeTieRodDiv().style.display = "none";
  this.getHorzScrollSpacerDiv().style.display = "none";
  if(filterAreaHeadersContainer)
   filterAreaHeadersContainer.style.display = "none";
  if(columnAreaHeadersContainer)
   columnAreaHeadersContainer.style.display = "none";
  if(topPagerEl)
   topPagerEl.style.display = "none";
  if(bottomPagerEl)
   bottomPagerEl.style.display = "none";
  mainElem.style.width = width;
  this.getMainTable().style.width = "1px";
  actualWidth = mainElem.offsetWidth;
  this.getMainTable().style.width = "";
  this.getScrollMainDiv().style.width = oldWidth;
  if (isHorzScrollHidden) {
   this.getHorzScrollDiv().style.display = "none";
   this.getHorzScrollFakeTieRodDiv().style.display = "";
  }
  else {
   this.getHorzScrollDiv().style.display = "";
   this.getHorzScrollFakeTieRodDiv().style.display = "none";
  }
  this.getHorzScrollSpacerDiv().style.display = "";
  mainElem.style.width = "";
  if(columnAreaHeadersContainer)
   columnAreaHeadersContainer.style.display = "";
  if(filterAreaHeadersContainer)
   filterAreaHeadersContainer.style.display = "";
  if(topPagerEl)
   topPagerEl.style.display = "";
  if(bottomPagerEl)
   bottomPagerEl.style.display = "";
  return actualWidth;
 },
 syncScrollTableHeight: function() {
  var mainTable = this.getMainTable();
  var scrollTable = this.getHorzScrollTable();
  var scrollTableDiv = this.getHorzScrollTableDiv();
  var scrollableContainerCell = this.getHorzScrollableContainerCell();
  var columnFieldValuesFirstRowCell = null;
  var columnFieldValuesHeight = 0, dataRowIndex = -1;
  var rowHeights = [], dataHeights = [];
  var heightsCounter = 0;
  scrollTableDiv.style.display = "none";
  for(var i = 0; i < mainTable.rows.length; i++) {
   var row = mainTable.rows[i];
   if(this.isRowHeaderRow(row))
    rowHeights[heightsCounter++] = this.getElementOffsetSizeLite(row.cells[0], true);
   if(this.isRowFieldValueTableRow(row))
    rowHeights[heightsCounter++] = this.getElementOffsetSizeLite(row.cells[row.cells.length - 1], true);
  }
  var oldRowSpan = scrollableContainerCell.rowSpan;
  scrollableContainerCell.rowSpan = 1;
  scrollTableDiv.style.display = "";
  heightsCounter = 1;
  for(var i = 0; i < scrollTable.rows.length; i++) {
   var row = scrollTable.rows[i];
   var cell = row.cells[0];
   if(this.isColumnFieldValueTableRow(row)) {
    if(columnFieldValuesFirstRowCell == null)
     columnFieldValuesFirstRowCell = cell;
    else
     this.adjustElementHeight(cell, cell.offsetHeight);
    columnFieldValuesHeight += cell.offsetHeight;
    if(cell.rowSpan > 1)
     i += cell.rowSpan - 1;
   }
   else if(this.isDataTableRow(row)) {
    var adjustHeight = (__aspxIE && __aspxBrowserVersion > 7) ? 
     this.getElementOffsetSizeLite(row, true) : cell.offsetHeight;
    dataHeights[heightsCounter++] = adjustHeight;
    if(dataRowIndex < 0)
     dataRowIndex = i;
   }
  }
  if(dataHeights.length == 0) return;
  heightsCounter = 1;
  for(var i = 0; i < mainTable.rows.length; i++) {
   var row = mainTable.rows[i];
   if(this.isRowFieldValueTableRow(row)) {
    var adjustElement = (__aspxIE && __aspxBrowserVersion > 7) ? 
     scrollTable.rows[dataRowIndex] : scrollTable.rows[dataRowIndex].cells[0];
    this.adjustElementsHeight(row.cells[row.cells.length - 1], rowHeights[heightsCounter],
     adjustElement, dataHeights[heightsCounter]);
    dataRowIndex++;
    heightsCounter++;
   }
  }
  scrollableContainerCell.rowSpan = oldRowSpan;
  for(var i = 0; i < mainTable.rows.length; i++) {
   var row = mainTable.rows[i];
   if(this.isRowHeaderRow(row)) {
    var cell = row.cells[0];
    if(cell.offsetHeight <= columnFieldValuesHeight) {
     this.adjustElementHeight(cell, columnFieldValuesHeight);
    } else {
     var height = columnFieldValuesFirstRowCell.offsetHeight + cell.offsetHeight - columnFieldValuesHeight;
     this.adjustElementHeight(cell, cell.offsetHeight);
     this.adjustElementHeight(columnFieldValuesFirstRowCell, height);
     this.callToReDrawElement(columnFieldValuesFirstRowCell);
    }
    break;
   }
  }
 },
 SyncHorzScrollTable: function() {
  var scrollTable = this.getHorzScrollTable();
  if(scrollTable == null)
   return;
  var pivotWidth = this.getHorzScrollDiv().offsetWidth;
  var scrollTableDiv = this.getHorzScrollTableDiv();
  var scrollBarContent = this.getHorzScrollContentDiv();
  var scrollSpacerDiv = this.getHorzScrollSpacerDiv();
  var scrollableContainerCell = this.getHorzScrollableContainerCell();
  scrollTableDiv.style.width = "100%";
  scrollSpacerDiv.style.width = "100%";
  scrollTableDiv.style.display = "";
  scrollTableDiv.style.width = "100%";
  _aspxSetOffsetWidth(scrollSpacerDiv, scrollableContainerCell.offsetWidth);
  var scrollWidth = this.getScrollWidth();
  if(scrollWidth > 0) {
   _aspxSetOffsetWidth(scrollTableDiv, scrollWidth);
   scrollTableDiv.style.width = scrollWidth + "px";
   scrollBarContent.style.width = pivotWidth * scrollTable.offsetWidth / scrollTableDiv.offsetWidth + "px";
   if(__aspxOpera && scrollBarContent.offsetWidth > 30000)
    scrollBarContent.style.width = "30000px"; 
   var scrollDiff = scrollBarContent.offsetWidth - pivotWidth;
   this.horzScrollRatio = (scrollDiff == 0) ? 0 : (scrollTable.offsetWidth - scrollWidth) / scrollDiff;
  } else {
   scrollTableDiv.style.width = "100%";
   scrollBarContent.style.width = "0px";
   this.horzScrollRatio = 1;
  }
  if(this.horzScrollRatio == 1)
   this.horzScrollRatio = 0;
  this.syncScrollTableHeight();
  this.initHorzScroll();
 },
 getScrollWidth: function() {
  var mainDiv = this.getScrollMainDiv(),
   scrollTableDiv = this.getHorzScrollTableDiv();
  var scrollTableDivX = _aspxGetAbsoluteX(scrollTableDiv),
   mainDivX = _aspxGetAbsoluteX(mainDiv);
  return mainDivX + mainDiv.offsetWidth - scrollTableDivX;
 },
 getElementOffsetSizeLite: function(element, height) {
  if(__aspxIE && __aspxBrowserVersion > 8) {
   var computedStyle = window.getComputedStyle(element, null);
   var result;
   if(height)
    result = computedStyle.height;
   else
    result = computedStyle.width;
   if(result != "auto")
    return Math.max( Math.ceil(_aspxPxToFloat(result))
     + _aspxPxToInt(computedStyle.getPropertyValue(height ? 'padding-top' : 'padding-left'))
     + _aspxPxToInt(computedStyle.getPropertyValue(height ? 'padding-bottom' : 'padding-right'))
     + _aspxPxToInt(computedStyle.getPropertyValue(height ? 'border-top-width' : 'border-left-width'))
     + _aspxPxToInt(computedStyle.getPropertyValue(height ? 'border-bottom-width' : 'border-right-width')), height ? element.offsetHeight : element.offsetWidth);
  }
  if(height)
   return element.offsetHeight;
  return element.offsetWidth;
 },
 adjustElementsHeight: function(el1, height1, el2, height2) {
  var maxHeight = Math.max(height1, height2);
  this.adjustElementHeight(el1, maxHeight);
  this.adjustElementHeight(el2, maxHeight);
 },
 adjustElementHeight: function(elem, height) {
  this.adjustElementHeightLinear(elem, height);
 },
 adjustElementHeightLinear: function(elem, height) {
  var curHeight = height, counter = 0;
  elem.style.height = height + "px";
  while(counter < 2) {
   var diff = elem.offsetHeight - height;
   if(diff == 0)
    break;
   curHeight -= diff;
   elem.style.height = (curHeight > 0 ? curHeight : 0) + "px";
   counter++;
  }
 },
 callToReDrawElement: function(elem) {
  if(__aspxIE) {
   var temp = elem.style.display;
   elem.style.display = "none";
   elem.style.display = temp;
  }
 },
 isColumnFieldValueTableRow: function(row) {
  if(row.cells.length == 0) return false;
  if(row.cells[0].className.indexOf("dxpgColumnFieldValue") >= 0 ||
   row.cells[0].className.indexOf("dxpgTotalColumnFieldValue") >= 0)
   return true;
  return false;
 },
 isRowFieldValueTableRow: function(row) {
  if(row.cells.length == 0) return false;
  if(row.cells[0].className.indexOf("dxpgRowFieldValue") >= 0 ||
   row.cells[0].className.indexOf("dxpgTotalRowFieldValue") >= 0)
   return true;
  return false;
 },
 isDataTableRow: function(row) {
  if(row.cells.length == 0) return false;
  if(row.cells[0].className.indexOf("dxpgCell") >= 0 ||
   row.cells[0].className.indexOf("dxpgTotalCell") >= 0)
   return true;
  return false;
 },
 isRowHeaderRow: function(row) {
  if(row.cells.length == 0) return false;
  return this.isRowHeaderCell(row.cells[0]);
 },
 isRowHeaderCell: function(cell) {
  if(cell.className.indexOf("dxpgRowArea") >= 0 ||
   _aspxGetChildrenByPartialClassName(cell, "dxpgRowArea").length > 0)
   return true;
  return false;
 },
 initHorzScroll: function() {
  _aspxAttachEventToElement(this.getHorzScrollDiv(), "scroll", pivotGrid_HorzScrollHandler);
  _aspxAttachEventToElement(this.getScrollMainDiv(), "scroll", pivotGrid_FakeHorzScrollHandler);
  if(__aspxWebKitTouchUI)
   this.touchUIScroller = ASPxClientTouchUI.MakeScrollable(this.getHorzScrollTableDiv(), { showVerticalScrollbar: false });
  if (__aspxMacOSPlatform && __aspxWebKitFamily) {
   var contentDiv = this.getHorzScrollTableDiv();
   if (this.wheelHandler)
    _aspxDetachEventFromElement(contentDiv, "mousewheel", this.wheelHandler);
   this.wheelHandler = this.wheelHandler || this.createWheelHandler();
   _aspxAttachEventToElement(contentDiv, "mousewheel", this.wheelHandler);
  }
  else if (__aspxMSTouchUI)
   this.touchUIScroller = ASPxMouseScroller.Create(
    function() { return this.getHorzScrollTableDiv(); }.aspxBind(this),
    function() { return this.getHorzScrollDiv(); }.aspxBind(this),
    function() { return this.getHorzScrollTableDiv(); }.aspxBind(this),
    function() { return false; },
    true
   );
 },
 createWheelHandler: function () {
  return function (e) {
   if (!e.wheelDeltaX)
    return;
   var fixedDiv = this.getHorzScrollDiv();
   var delta = e.wheelDeltaX / 120;
   var leftDirection = delta > 0;
   var isLeftmost = fixedDiv.scrollLeft == 0;
   var isRightmost = fixedDiv.scrollLeft + fixedDiv.offsetWidth == fixedDiv.scrollWidth
   if (leftDirection && isLeftmost || !leftDirection && isRightmost)
    return;
   fixedDiv.scrollLeft += -1 * delta * 100;
   return _aspxPreventEvent(e);
  }.aspxBind(this);
 },
 OnHorzScroll: function(offsetLeft) {
  this.getHorzScrollTableDiv().scrollLeft = offsetLeft * this.horzScrollRatio;
 },
 OnFakeHorzScroll: function(offsetLeft) {
  this.getScrollMainDiv().scrollLeft = 0;
 }
});
function pivotGrid_HorzScrollHandler(e) {
 var source = _aspxGetEventSource(e);
 var names = source.id.split("_HZSDIV");
 if(names.length == 0) return;
 var pivot = pivotGrid_GetGrid(names[0]);
 if(pivot == null) return;
 pivot.OnHorzScroll(source.scrollLeft);
}
function pivotGrid_FakeHorzScrollHandler(e) {
 var source = _aspxGetEventSource(e);
 var names = source.id.split("_SMDIV");
 if(names.length == 0) return;
 var pivot = pivotGrid_GetGrid(names[0]);
 if(pivot == null) return;
 pivot.OnFakeHorzScroll(source.scrollLeft);
}
var pivotGrid_FieldValueCMParams = new Array();
var pivotGrid_HeaderCMParams = new Array();
var pivotGrid_AllowedAreaIds = new Array();
var pivotGrid_Groups = new Array();
var pivotGrid_FieldLists = new Array();
var pivotGrid_FilterPopupSize = [];
var pivotGrid_GetControlCollection = null;
ASPxClientPivotGridControlCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function () {
  this.constructor.prototype.constructor.call(this);
 },
 OnMouseMove: function(evt) {
  this.ForEachControl(function(control){
   control.OnMouseMove(evt);
  });
 }
});
ASPxClientPivotGridControlCollection.GetPivotGridControlCollection = function () {
 return aspxGetPivotGridControlCollection();
}
function aspxGetPivotGridControlCollection() {
 if (pivotGrid_GetControlCollection == null)
  pivotGrid_GetControlCollection = new ASPxClientPivotGridControlCollection();
 return pivotGrid_GetControlCollection;
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, aspxDocumentMouseMoveEventHandler);
function aspxDocumentMouseMoveEventHandler(evt) {
 var collection = ASPxClientPivotGridControlCollection.GetPivotGridControlCollection();
 collection.OnMouseMove(evt);
}
ASPxRect = _aspxCreateClass(null, {
 constructor: function(left, top, right, bottom) {
  if(_aspxIsExistsElement(arguments[0])) {
   this.left = _aspxGetAbsoluteX(arguments[0]);
   this.top = _aspxGetAbsoluteY(arguments[0]);
   this.right = this.left + (arguments[0]).offsetWidth;
   this.bottom = this.top + (arguments[0]).offsetHeight;
  }
  else {
   this.left = left;
   this.top = top;
   this.right = right;
   this.bottom = bottom;
  }
 },
 Contains: function(x, y) {
  return this.left < x && x < this.right && this.top < y && y < this.bottom;
 },
 Intersects: function(rect) {
  if(rect.left > this.right || rect.top > this.bottom ||
   this.left > rect.right || this.top > rect.bottom) return false;
  return true;
 },
 ToString: function() {
  return "{" + this.left + "," + this.top + "," + this.right + "," + this.bottom + "}";
 }
});
function _aspxGetBounds(elem) {
 var left = _aspxGetAbsoluteX(elem),
  top = _aspxGetAbsoluteY(elem),
  right = left + elem.offsetWidth,
  bottom = top + elem.offsetHeight;
 return new ASPxRect(left, top, right, bottom);
}
ASPxClientPivotGridGroup = _aspxCreateClass(null, {
 constructor: function(pivotName, fields) {
  this.pivotName = pivotName;
  this.fields = fields;
  this.count = fields.length;
 },
 ContainsField: function(fieldId) {
  return this.IndexOf(fieldId) >= 0;
 },
 IsInnerField: function(fieldId) {
  var index = this.IndexOf(fieldId);
  return index > 0 && index < this.count - 1 && this.count >= 2;
 },
 IndexOf: function(fieldId) {
  for(var i = 0; i < this.count; i++) {
   if(this.GetFieldId(i) == fieldId)
    return i;
  }
  return -1;
 },
 GetFieldId: function(index) {
  return this.pivotName + "_" + this.fields[index];
 }
});
ASPxCheckBoxHelper = _aspxCreateClass(null, {
 IsNative: function(checkBox) {
  if(checkBox.GetChecked)
   return false;
  return true;
 },
 Find: function(id) {
  var checkBox = this.Get(id, false);
  return (checkBox) ? checkBox : this.Get(id, true);
 },
 Get: function(id, isNative) {
  return isNative ? _aspxGetElementById(id) : aspxGetControlCollection().Get(id);
 },
 GetChecked: function(checkBox) {
  return (checkBox.GetChecked) ? checkBox.GetChecked() : checkBox.checked;
 },
 SetChecked: function(checkBox, check) {
  if(checkBox.SetCheckState)
   this.SetCheckedCore(checkBox, check);
  else
   checkBox.checked = check != null ? check : false;
 },
 SetCheckedCore: function(checkBox, check) {
  if(check == null) {
   checkBox.SetCheckState('Indeterminate');
   return;
  }
  if(check)
   checkBox.SetCheckState('Checked');
  else
   checkBox.SetCheckState('Unchecked');
 }
});
ASPxClientPivotGrid = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.adjustingManager = new ASPxClientPivotAdjustingManager(this);
  this.filterValues = "";
  this.initialFilterValues = "";
  this.filterPersister = "";
  this.filterFieldIndex = "";
  this.headerMenuHideColumn = "";
  this.fieldMenuCellState = "";
  this.DragDropManager = null;
  this.isCallbackInProcess = false;
  this.ResetCallBackStateFlags();
  this.HFPFieldIndex = -1;
  this.HFPFieldDefere = "N";
  this.HFPDefereHeader = null,
  this.pageIndex = 0;
  this.pageCount = 0;
  this.supportGestures = true;
  this.CustomizationFieldsVisibleChanged = new ASPxClientEvent();
  this.AfterCallback = this.EndCallback; 
  this.BeforeCallback = this.BeginCallback; 
  this.CellClick = new ASPxClientEvent();
  this.CellDblClick = new ASPxClientEvent();
  this.PopupMenuItemClick = new ASPxClientEvent();
  this.customTargets = new ASPxClientEvent();
  this.checkBoxHelper = new ASPxCheckBoxHelper();
  this.currentEnableFieldListAnimation = false;
  this.forcePerformDeferUpdatesCallback = false;
 },
 HeaderFilterPopupSuffix: "_DXHFP",
 HeaderFilterButtonClassName: "dxpg__hfb",
 GetChildElementById: function(childName) {
  if(!_aspxIsExists(this.childrenCache))
   this.childrenCache = new Object();
  if(!_aspxIsExistsElement(this.childrenCache[childName]))
   this.childrenCache[childName] = _aspxGetElementById(this.name + "_" + childName);
  return this.childrenCache[childName];
 },
 GetMainElement: function() { return _aspxGetElementById(this.name); },
 GetMainDiv: function() { return this.GetChildElementById("MTD"); },
 GetMainTable: function() { return this.GetChildElementById("MT"); },
 GetEmptyAreaCell: function(intAreaID) { return this.GetChildElementById("pgArea" + intAreaID); },
 GetHeadersTable: function(stringAreaID) { return this.GetChildElementById("ACC" + stringAreaID); },
 GetFilterWindowContent: function() { return this.GetChildElementById("FPC"); },
 GetArrowDragDownImage: function() { return this.GetChildElementById("IADD"); },
 GetArrowDragUpImage: function() { return this.GetChildElementById("IADU"); },
 GetArrowDragRightImage: function() { return this.GetChildElementById("IADR"); },
 GetArrowDragLeftImage: function() { return this.GetChildElementById("IADL"); },
 GetDragHideFieldImage: function() { return this.GetChildElementById("IDHF"); },
 GetGroupSeparatorImage: function() { return this.GetChildElementById("IGS"); },
 GetResizerImage: function() { return this.GetChildElementById("FPWR"); },
 GetCallbackStateElem: function() { return this.GetChildElementById("CallbackState"); },
 GetCallbackState: function() {
  var elem = this.GetCallbackStateElem();
  if(elem == null) return "";
  return elem.value;
 },
 GetCustomizationFieldsWindow: function() {
  if(typeof(aspxGetPopupControlCollection) == "undefined") return null;
  return aspxGetPopupControlCollection().Get(this.name + "_DXCustFields");
 },
 GetCustomizationFieldsWindowElement: function() {
  var custFieldsWindow = this.GetCustomizationFieldsWindow();
  if(custFieldsWindow)
   return custFieldsWindow.GetWindowElement(-1);
  return null;
 },
 GetCustomizationFieldsWindowContentDiv: function() {
  return this.GetChildElementById("dxpgCustFields");
 },
 GetPrefilterWindow: function() {
  if(typeof(aspxGetPopupControlCollection) == "undefined") return null;
  return aspxGetPopupControlCollection().Get(this.name + "_DXPFCForm");
 },
 GetFilterControl: function() {
  return aspxGetControlCollection().Get(this.name + "_DXPFCForm_DXPFC");
 },
 GetDataHeadersPopupCell: function() { return this.GetChildElementById("DHPC"); },
 GetDataHeadersPopup: function() {
  if(typeof(aspxGetPopupControlCollection) == "undefined") return null;
  return aspxGetPopupControlCollection().Get(this.name + "_DHP");
 },
 GetDataHeadersPopupWindowElement: function() {
  var popupControl = this.GetDataHeadersPopup();
  if(popupControl == null) return null;
  return popupControl.GetWindowElement(-1);
 },
 GetTreeView: function() { return aspxGetControlCollection().Get(this.name + this.HeaderFilterPopupSuffix + "_treeGFTR"); },
 GetCustomizationTreeView: function() { return aspxGetControlCollection().Get(this.name + "_dxpgCustFields_treeCF"); },
 GetCustomizationHeaders: function() { return _aspxGetElementById(this.name + "_dxpgCustFields_listCF"); },
 GetHeaderFilterPopup: function() { return aspxGetControlCollection().Get(this.name + this.HeaderFilterPopupSuffix); },
 IsDataHeadersPopupExists: function() {
  var headersPopup = this.GetDataHeadersPopup();
  if(!_aspxIsExists(headersPopup)) return false;
  var headersPopupWindow = headersPopup.GetWindowElement(-1);
  return _aspxIsExists(headersPopupWindow) && _aspxIsExists(headersPopupWindow.id);
 },
 IsHeadersTable: function(element) {
  if(element == null) return false;
  var id = this.getLastIdPart(element.id);
  if(id.length == 0) return false;
  return id.substr(0, 3) == "ACC";
 },
 IsValidDragDropTarget: function(element) {
  var id = this.getLastIdPart(element.id);
  if(id.length == 0) return false;
  var lastChar = id.charAt(id.length - 1);
  return lastChar >= '0' && lastChar <= '9' &&
      (id.indexOf("pgGroupHeader") >= 0 || (id.indexOf("pgHeader") >= 0 && !this.isInnerRowAreaGroupField(element.id)));
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  ASPxClientPivotGridControlCollection.GetPivotGridControlCollection().Add(this);
  this.SubscribeFilterPopupEvents();
  var resizerImage = this.GetResizerImage();
  if(resizerImage != null)
   resizerImage.ondragstart = function() { this.releaseCapture(); return false; };
  this.AfterCallBackInitialize();
  this.InitializeGroupFilterTreeView();
  this.InitializeCustomizationTreeView();
  this.InitializeHeaderFilterPopup();
  this.InitializeHeaderFilterPopupEvents();
 },
 InitializeHeaderFilterPopupEvents: function() {
  var filterPopup = this.GetHeaderFilterPopup();
  if(!filterPopup)
   return;
  filterPopup.PopUp.AddHandler(function() { this.OnPopUpHeaderFilterWindow(); } .aspxBind(this));
 },
 InitializeHeaderFilterPopup: function() {
  var filterPopup = this.GetHeaderFilterPopup();
  if(!filterPopup)
   return;
  var buttons = this.GetHeaderFilterButtons();
  for(var i = 0; i < buttons.length; i++)
   filterPopup.AddPopupElement(buttons[i]);
 },
 GetHeaderFilterButtons: function() {
  var buttons = [];
  this.PopulateHeaderFilterButtons(this.GetCustomizationFieldsWindowContentDiv(), buttons);
  this.PopulateHeaderFilterButtons(this.GetHeadersTable("RowArea"), buttons);
  this.PopulateHeaderFilterButtons(this.GetHeadersTable("DataArea"), buttons);
  this.PopulateHeaderFilterButtons(this.GetHeadersTable("ColumnArea"), buttons);
  this.PopulateHeaderFilterButtons(this.GetHeadersTable("FilterArea"), buttons);
  return buttons;
 },
 PopulateHeaderFilterButtons: function(container, buttons) {
  if(!container) return;
  var images = container.getElementsByTagName("IMG");
  for(var i = 0; i < images.length; i++) {
   var image = images[i];
   if(_aspxElementCssClassContains(image, this.HeaderFilterButtonClassName))
    buttons.push(image);
  }
 },
 GetHeaderElementByHeaderFilterButton: function(element) {
  var buttonId = this.getHeaderFilterButtonIDByButton(element);
  var headerId = buttonId.substr(0, buttonId.length - 1);
  var header = _aspxGetElementById(headerId);
  if(header == null)
   header = _aspxGetElementById(buttonId);
  return header;
 },
 GetFieldIndexByHeaderFilterButton: function(element) {
  var buttonId = this.getHeaderFilterButtonIDByButton(element);
  var headerId = buttonId.substr(0, buttonId.length - 1);
  return this.GetNumberFromEndOfString(headerId);
 },
 getHeaderFilterButtonIDByButton: function (element) {
  if(!element)
   return "";
  var level = 0;
  while(level < 4) {
   if(element.id)
    return element.id;
   element = element.parentNode;
   level++;
  }
  return "";
 },
 GetPopupElementIndex: function(headerFilterButton) {
  if(!headerFilterButton)
   return -1;
  var filterPopup = this.GetHeaderFilterPopup();
  var popupElements = filterPopup.GetPopupElementList(-1);
  for(var i = 0; i < popupElements.length; i++) {
   if(popupElements[i] === headerFilterButton)
    return i;
  }
  return -1;
 },
 GetNumberFromEndOfString: function(st) {
  var value = -1;
  if(!st)
   return value;
  var n = st.length - 1;
  while(parseInt(st.substr(n), 10) >= 0) {
   value = parseInt(st.substr(n), 10);
   n--;
  }
  return value;
 },
 SubscribeFilterPopupEvents: function() {
  var filterPopup = this.GetHeaderFilterPopup();
  filterPopup.Resize.AddHandler(function(s) {
   pivotGrid_FilterPopupSize[this.name][this.HFPFieldIndex] = [s.GetWidth(), s.GetHeight()];
  }.aspxBind(this));
  filterPopup.Closing.AddHandler(function(s) {
   if(s.GetContentHtml().length > 100000 || this.isFilterValuesChanged()) {
    this.ResetFilterCache();
    this.resetFilterValues();
    window.setTimeout(function() { s.SetContentHtml("") }, 0);
   }
  }.aspxBind(this));
 },
 InitializeGroupFilterTreeView: function() {
  var treeView = this.GetTreeView();
  if(treeView)
   treeView.InitPivotGridCallbacks(this);
 },
 InitializeCustomizationTreeView: function() {
  var customizationTreeView = this.GetCustomizationTreeView();
  if(customizationTreeView)
   customizationTreeView.InitializePivotGrid(this, this.isDeferUpdatesChecked());
 },
 OnMouseMove: function(evt) {
  if(!this.IsDataHeadersPopupExists())
   return;
  var headersPopup = this.GetDataHeadersPopup();
  if(!headersPopup.IsVisible())
   return;
  var pe = headersPopup.GetWindowElement(-1);
  var rect = new ASPxRect(pe);
  if(!rect.Contains(_aspxGetEventX(evt), _aspxGetEventY(evt)))
   headersPopup.Hide();
  if(__aspxWebKitTouchUI)
   evt.preventDefault();
 },
 AfterInitialize: function() {
  this.constructor.prototype.AfterInitialize.call(this);
  this.AfterInitializeCore();
 },
 AfterInitializeCore: function() {
  if(this.IsDataHeadersPopupExists()) {
   var headersPopup = this.GetDataHeadersPopup();
   headersPopup.SetSize(1, 1);
   if(headersPopup.IsVisible())
    headersPopup.Hide();
  }
  if(!this.isFilterValuesCallBack) {
   this.FixHeaderImageDrag(this.GetHeadersTable("RowArea"));
   this.FixHeaderImageDrag(this.GetHeadersTable("ColumnArea"));
   this.FixHeaderImageDrag(this.GetHeadersTable("FilterArea"));
  }
  this.InitExcelCustForm();
  this.UpdateExcelCustForm();
  this.ResetCallBackStateFlags();
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  if(!this.isFilterValuesCallBack) {
   this.adjustingManager.AdjustSize();
   this.AdjustPagerControls();
  }
 },
 UpdateAdjustmentFlags: function() {
  this.UpdatePercentSizeConfig([this.adjustingManager.widthProp], []);
 },
 NeedCollapseControlCore: function() {
  return true;
 },
 AfterCallBackInitialize: function() {
  this.AssignContextMenus(pivotGrid_FieldValueCMParams, pivotGrid_FieldValueContextMenuHandler);
  this.AssignContextMenus(pivotGrid_HeaderCMParams, pivotGrid_HeaderContextMenuHandler);
 },
 UpdateWidthProp: function(value, hasHorzScrollContainer) {
  this.adjustingManager.SetOptions(value, hasHorzScrollContainer);
  this.adjustingManager.AdjustSize();
 },
 SetCallBackStateFlags: function() {
  this.isFilterValuesCallBack = true;
 },
 ResetCallBackStateFlags: function() {
  this.isFilterValuesCallBack = false;
 },
 FixHeaderImageDrag: function(fobject) {
  if(fobject == null) return;
  var images = _aspxGetElementsByTagName(fobject, "img");
  if(!images || !images.length) return;
  for(var i = 0; i < images.length; i++)
   if(_aspxElementCssClassContains(images[i], "Button"))
    images[i].ondragstart = function() { return false };
 },
 AssignContextMenus: function(cmParams, handler) {
  if(_aspxIsExists(cmParams) && _aspxIsExists(cmParams[this.name])) {
   var params = cmParams[this.name];
   for(var i = 0; i < params.length; i++) {
    var id = params[i][0];
    var elem = this.GetChildElementById(id);
    if(elem != null) {
     elem.contextMenuParams = params[i];
     elem.pivotClientID = this.name;
     _aspxAttachEventToElement(elem, "contextmenu", handler);
    }
   }
  }
 },
 SetHFPOkButtonEnabled: function(enabled) {
  var okBtn = aspxGetControlCollection().Get(this.GetHeaderFilterPopup().cpOkButtonID);
  if(okBtn)
   okBtn.SetEnabled(enabled);
 },
 getDefereText: function(header){
  return this.isFieldListElement(header) && this.isDeferUpdatesChecked() ? "D" : "N";
 },
 OnPopUpHeaderFilterWindow: function() {
  var filterPopup = this.GetHeaderFilterPopup();
  var headerFilterButton = filterPopup.GetCurrentPopupElement();
  var fieldIndex = this.GetFieldIndexByHeaderFilterButton(headerFilterButton);
  var header = this.GetHeaderElementByHeaderFilterButton(headerFilterButton);
  if(header)
   filterPopup.UpdatePositionAtElement(header);
  if(fieldIndex == -1 || this.HFPFieldIndex == fieldIndex && this.HFPFieldDefere == this.getDefereText(header))
   return;
  var size = this.GetFilterPopupSize(fieldIndex);
  if(size.length == 2)
   filterPopup.SetSize(size[0], size[1]);
  this.SetCallBackStateFlags();
  var addPars = "";
  if(header && this.isFieldListElement(header) && this.isDeferUpdatesChecked())
   addPars = "|D";
  this.HFPFieldIndex = fieldIndex;
  this.CreateCallback("FS|" + fieldIndex + addPars);
  filterPopup.SetContentHtml('');
  var element = this.CreateLoadingPanelInsideContainer(filterPopup.GetContentContainer(-1), false, true, true);
  _aspxRemoveBordersAndShadows(element);
  this.SetHFPOkButtonEnabled(false);
 },
 ShowFilterPopup: function(headerId) {
  var filterPopup = this.GetHeaderFilterPopup();
  var buttons = [];
  this.PopulateHeaderFilterButtons(_aspxGetElementById(headerId), buttons);
  var popupElementIndex = this.GetPopupElementIndex(buttons[0]);
  if(popupElementIndex == -1)
   return;
  if(filterPopup.IsVisible())
   filterPopup.Hide();
  filterPopup.Show(popupElementIndex);
 },
 GetFilterPopupSize: function(index) {
  if(pivotGrid_FilterPopupSize[this.name] == null)
   return null;
  if(pivotGrid_FilterPopupSize[this.name][index] == null)
   return pivotGrid_FilterPopupSize[this.name]["default"];
  else return pivotGrid_FilterPopupSize[this.name][index];
 },
 SaveContentDivScrollTop: function() {
  var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
  if(contentDiv != null)
   this.contentDivScrollTop = contentDiv.scrollTop;
  else
   this.contentDivScrollTop = -1;
 },
 RestoreContentDivScrollTop: function() {
  if(!_aspxIsExists(this.contentDivScrollTop) || this.contentDivScrollTop < 0) return;
  var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
  if(contentDiv != null) {
   contentDiv.scrollTop = this.contentDivScrollTop;
   this.contentDivScrollTop = -1;
  }
 },
 performCallbackInternalBase: function(el, arg, isOwnerCallBack, command) {
  if(!isOwnerCallBack) {
   this.ClearCallbackOwner();
  }
  this.isCallbackInProcess = true;
  if(isOwnerCallBack || this.callBacksEnabled) {
   this.OnBeginCallback(el);
   this.CreateCallback(arg, command);
  }
  else
   this.SendPostBack(arg);
 },
 TestPerformDragHeaderCallback: function(arg) {
  this.PerformCallbackInternal(this.GetMainTable(), arg);
 },
 PerformCallbackInternal: function(el, arg, command) {
  var value = new String(arg);
  var sIndex = value.indexOf("|");
  var id = value.substr(0, sIndex);
  this.forcePerformDeferUpdatesCallback = !((id == "S" || id == "DF" || id == "FL") && this.isDeferUpdatesChecked());
  this.performCallbackInternalBase(el, arg, false, command);
 },
 ClearCallbackOwner: function() {
  this.callbackOwner = null;
 },
 OnCallback: function(result) {
  var isOwnerCallback = this.callbackOwner != null;
  if(isOwnerCallback) {
   this.callbackOwner.OnCallback(result[1]);
  }
  this.OnInnerCallback(result[0], !isOwnerCallback);
 },
 OnInnerCallback: function(result, state) {
  this.ChangePrefilterVisibilityClientSize(false);
  var value = new String(result);
  var separatorIndex = value.indexOf("|");
  var id = value.substr(0, separatorIndex),
   argument = value.substr(separatorIndex + 1);
  if(id == "F") {
   this.PreventCallbackAnimation();
   this.doFilterCallback(argument, state);
  }
  if (id == "DF") {
   this.PreventCallbackAnimation();
   this.doDefereFilterCallback(argument);
  }
  if(id == "G") {
   ASPxRelatedControlManager.ParseResult(argument);
   var popup = this.GetHeaderFilterPopup();
   if(popup) {
    popup.Hide();
    popup.RemoveAllPopupElements();
    this.InitializeHeaderFilterPopup();
   }
  }
  this.OnEndCallback();
 },
 DoEndCallback: function() {
  this.constructor.prototype.DoEndCallback.call(this);
  this.InitializeGroupFilterTreeView();
  this.InitializeCustomizationTreeView();
  this.isCallbackInProcess = false;
  this.ResetCallBackStateFlags();
 },
 ProcessCallbackResult: function(id, html, params) {
  this.doGridRefreshCallback(html);
 },
 OnCallbackError: function(result, data) {
  this.constructor.prototype.OnCallbackError.call(this, result, data);
  this.OnEndCallback();
 },
 OnBeginCallback: function(el) {
  this.SaveContentDivScrollTop();
  this.ShowLoadingElements();
 },
 ShowLoadingPanel: function() {
  var mainDiv = this.GetMainDiv();
  if(!mainDiv) return;
  this.CreateLoadingPanelWithAbsolutePosition(mainDiv, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainDiv(), this.GetMainElement());
 },
 GetCallbackAnimationElement: function() {
  return this.adjustingManager.GetScrollableElement();
 },
 OnEndCallback: function() {
  this.childrenCache = { };
  this.AfterInitializeCore();
  this.adjustingManager.OnMarkupUpdated();
 },
 SendTreeViewCallback: function(treeView, callbackString) {
  this.SetCallBackStateFlags(); 
  this.callbackOwner = treeView;
  var pivotCallbackString = "FC|" + this.filterFieldIndex + '|' + this.filterPersister + '|' + this.filterValues;
  this.performCallbackInternalBase(this.GetMainTable(), pivotCallbackString + '|' + callbackString, true); 
 },
 doDefereFilterCallback: function (argument) {
  var values = argument.split("|");
  if (values.length != 1) return;
  var callbackState = values[0];
  if (callbackState.length > 0) {
   var callbackElem = this.GetCallbackStateElem();
   if (callbackElem != null)
    callbackElem.value = callbackState;
  }
  if (this.HFPDefereHeader) {
   var list = []
   this.PopulateHeaderFilterButtons(this.HFPDefereHeader, list);
   if (list.length != 0) {
    var image = list[0];
    if (image.className.indexOf("pgFilterButtonActive") == -1) {
     image.className = image.className.replace("pgFilterButton", "pgFilterButtonActive");
    }
   }
   this.HFPDefereHeader = null;
  }
 },
 doFilterCallback: function(argument, changeContent) {
  var values = argument.split("|");
  if (values.length != 6) return;
  if (values[3] == this.HFPFieldIndex) {
   var callbackState = values[0];
   if(callbackState.length > 0) {
    var callbackElem = this.GetCallbackStateElem();
    if(callbackElem != null)
     callbackElem.value = callbackState;
   }
   this.filterValues = values[1];
   this.filterPersister = values[2];
   this.filterFieldIndex = values[3];
   this.HFPFieldDefere = values[4];
   if(changeContent) {
    this.initialFilterValues = values[1];
    this.GetHeaderFilterPopup().SetContentHtml(values[5], this.enableCallbackAnimation);
   }
   this.SetHFPOkButtonEnabled(true);
  }
 },
 doGridRefreshCallback: function(argument) {
  this.ResetFilterCache();
  var mainDiv = this.GetMainDiv();
  if(mainDiv == null) return;
  _aspxSetInnerHtml(mainDiv, argument);
 },
 isAllFilterValuesChecked: function() {
  var hasCheckedItems = this.filterValues.indexOf('T') != -1;
  var hasUncheckedItems = this.filterValues.indexOf('F') != -1;
  if(hasCheckedItems && hasUncheckedItems) return null;
  return hasCheckedItems;
 },
 isFilterValuesChanged: function() {
  return this.filterValues != this.initialFilterValues;
 },
 resetFilterValues: function() {
  this.initialFilterValues = this.filterValues;
 },
 fieldFilterValueChanged: function(index) {
  var showAllCheckBox = this.checkBoxHelper.Find(this.name + this.HeaderFilterPopupSuffix + '_FTRIAll');
  if(index < 0) {
   var isNative = this.checkBoxHelper.IsNative(showAllCheckBox);
   var isShowAllChecked = this.checkBoxHelper.GetChecked(showAllCheckBox);
   var newFilterValues = '', newChar = isShowAllChecked ? 'T' : 'F';
   var i = 0, checkBox;
   while(_aspxIsExists(checkBox = this.checkBoxHelper.Get(this.name + this.HeaderFilterPopupSuffix + '_FTRI' + i, isNative))) {
    if(!isNative && !checkBox.GetMainElement())
     break;
    this.checkBoxHelper.SetChecked(checkBox, isShowAllChecked);
    newFilterValues += newChar;
    i++;
   }
   this.filterValues = newFilterValues;
  } else {
   var oldChar = this.filterValues.charAt(index);
   this.UpdateFilterValues(index, 1, oldChar != 'T');
   this.checkBoxHelper.SetChecked(showAllCheckBox, this.isAllFilterValuesChecked());
  }
  this.UpdateFilterButtons();
 },
 UpdateFilterValues: function(index, count, isChecked) {
  var newChar = 'I';
  if(isChecked != null)
   newChar = isChecked ? 'T' : 'F';
  var newValues = newChar;
  for(var i = 1; i < count; i++)
   newValues += newChar;
  this.filterValues = this.filterValues.substr(0, index) + newValues + this.filterValues.substr(index + count, this.filterValues.length - index - count);
 },
 UpdateFilterButtons: function() {
  this.SetHFPOkButtonEnabled(this.filterValues.indexOf('T') != -1);
 },
 SelectAllFilterValues: function(checked) {
  var newChar = checked ? 'T' : 'F';
  var newValues = '';
  for(var i = 0; i < this.filterValues.length; i++) {
   newValues += newChar;
  }
  this.filterValues = newValues;
 },
 applyFilter: function() {
  var isChanged = this.isFilterValuesChanged() ? 'T' : 'F';
  var filterPopup = this.GetHeaderFilterPopup()
  var header = this.GetHeaderElementByHeaderFilterButton(filterPopup.GetCurrentPopupElement());
  var filterString;
  if (header && this.isFieldListElement(header) && this.isDeferUpdatesChecked()) {
   filterString = "DF";
   if (isChanged == "T")
    this.HFPDefereHeader = header;
  }
  else
   filterString = "F";
  filterPopup.Hide();
  this.PerformCallbackInternal(this.GetMainTable(), filterString + '|' + this.filterValues + '|' + this.filterPersister + '|' + this.filterFieldIndex + '|' + isChanged);
 },
 headerMouseDown: function(root, e) {
  if(!_aspxGetIsLeftButtonPressed(e) || this.isCallbackInProcess) return;
  var drag = new ASPxClientDragHelper(e, root, true);
  if(__aspxMacOSMobilePlatform)
   drag.onDoClick = function(arg) { this.dnDHelperClickedHeader = true; } .aspxBind(this);
  this.DragDropManager = new ASPxPivotDragManager(this, drag);
 },
 getFilterAreaFieldList: function() {
  return _aspxGetChildrenByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsFilterAreaHeaders")[0];
 },
 getColumnAreaFieldList: function() {
  return _aspxGetChildrenByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsColumnAreaHeaders")[0];
 },
 getRowAreaFieldList: function() {
  return _aspxGetChildrenByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsRowAreaHeaders")[0];
 },
 getDataAreaFieldList: function() {
  return _aspxGetChildrenByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsDataAreaHeaders")[0];
 },
 isInnerRowAreaGroupField: function(id) {
  var groups = this.getGroups();
  if(groups != null) {
   for(var i = 0; i < groups.length; i++) {
    if(!groups[i].ContainsField(id))
     continue;
    return groups[i].IsInnerField(id);
   }
  }
  return false;
 },
 isInnerGroupTarget: function(targetElement, isLeft) {
  if(targetElement == null) return false;
  var id = targetElement.id;
  var groups = this.getGroups();
  if(groups == null) return false;
  for(var i = 0; i < groups.length; i++) {
   var index = groups[i].IndexOf(id);
   if(index < 0) continue;
   return groups[i].count >= 2 &&
    ((index > 0 && index < groups[i].count - 1) ||
     (index == 0 && !isLeft) ||
     (index == groups[i].count - 1 && isLeft));
  }
  return false;
 },
 getLastIdPart: function(id) {
  var separatorIndex = id.lastIndexOf('_');
  return separatorIndex >= 0 ? id.substr(separatorIndex + 1) : id;
 },
 getGroups: function() {
  return pivotGrid_Groups[this.name];
 },
 getField: function(group, index) {
  return this.GetChildElementById(group.fields[index]);
 },
 headerClick: function(element) {
  if((element.id.indexOf("sorted") > 0 || element.id.indexOf("pgGroupHeader") > 0) && (this.dnDHelperClickedHeader || !__aspxMacOSMobilePlatform)) {
   this.ResetFilterCache(this.filterFieldIndex);
   this.PerformCallbackInternal(element, 'S|' + element.id);
  }
 },
 ResetFilterCache: function(indexToReset) {
  if(!_aspxIsExists(indexToReset) || indexToReset == this.HFPFieldIndex)
   this.HFPFieldIndex = -1;
 },
 cloneGroup: function(group) {
  var separatorWidth = this.getSeparatorWidth(group);
  var table = document.createElement("table");
  table.cellPadding = 0;
  table.cellSpacing = 0;
  var row = table.insertRow(0);
  for(var i = 0; i < group.count; i++) {
   var header = this.getField(group, i);
   if(header == null) continue;
   var cell = row.insertCell(row.cells.length);
   cell.appendChild(this.cloneHeader(header));
   if(i != group.count - 1) {
    cell = row.insertCell(row.cells.length);
    cell.appendChild(this.cloneGroupSeparator(separatorWidth));
   }
  }
  return table;
 },
 cloneHeader: function(header) {
  var clone = header.cloneNode(true);
  clone.style.width = header.offsetWidth + "px";
  return clone;
 },
 cloneGroupSeparator: function(separatorWidth) {
  var groupSeparator = this.GetGroupSeparatorImage();
  var clone = document.createElement("img");
  clone.src = groupSeparator.src;
  clone.width = separatorWidth;
  clone.height = groupSeparator.height;
  return clone;
 },
 getSeparatorWidth: function(group) {
  if(group.count < 2) return 0;
  var header0 = this.getField(group, 0);
   header1 = this.getField(group, 1);
  if(header0 == null || header1 == null) return 0;
  return _aspxGetAbsoluteX(header1) - _aspxGetAbsoluteX(header0) - header0.offsetWidth;
 },
 IsTargetElementArea: function(targets) {
  return targets.targetElement != null && targets.targetElement.id.indexOf("_pgArea") > -1;
 },
 isFieldListHeader: function(element) {
  return _aspxElementCssClassContains(element, "dxpgHeader") && this.isFieldListElement(element);
 },
 isFieldListElement: function(element) {
  return element != null && element.id.indexOf("dxpgCustFields") != -1;
 },
 IsFieldListTargetAllowed: function(element) {
  if(this.isFieldListHeader(element)) {
   var scrolledList = _aspxGetParentByPartialClassName(element, "dxpgFLListDiv");
   var headerTop = _aspxGetAbsolutePositionY(element);
   var listY = _aspxGetAbsolutePositionY(scrolledList);
   if(headerTop < listY || headerTop + element.offsetHeight - 1 > listY + scrolledList.offsetHeight) return false;
  }
  return true;
 },
 resetDragOverFieldList: function(element) {
  if(element != null)
   element.className = element.className.replace("DragOver", "");
 },
 targetImagesChangeVisibility: function(vis, name) {
  if(this.GetArrowDragDownImage() == null) return;
  if(!vis || name == "v") {
   this.changeElementVisibility(this.GetArrowDragDownImage(), vis);
   this.changeElementVisibility(this.GetArrowDragUpImage(), vis);
  }
  if(!vis || name == "h") {
   this.changeElementVisibility(this.GetArrowDragRightImage(), vis);
   this.changeElementVisibility(this.GetArrowDragLeftImage(), vis);
  }
  if(__aspxDragHelper != null) {
   __aspxDragHelper.removeElementFromDragDiv();
  }
 },
 changeElementVisibility: function(elem, vis) {
  elem.style.visibility = vis ? "visible" : "hidden";
  elem.style.display = vis ? "inline" : "none";
 },
 getFieldListFields: function() {
  if(this.GetCustomizationFieldsWindowContentDiv())
   return _aspxGetChildrenByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsFieldList")[0];
 },
 setVerticalDragImagePosition: function(el, isLeft) {
  var mainElement = this.GetMainElement();
  var windowElem = this.GetDataHeadersPopupWindowElement();
  var prevElementZIndex = windowElem ? windowElem.style.zIndex : mainElement.style.zIndex;
  var arrowUp = this.GetArrowDragUpImage();
  var arrowDown = this.GetArrowDragDownImage();
  var left = _aspxGetAbsoluteX(el);
  var top = _aspxGetAbsoluteY(el);
  arrowDown.style.zIndex = prevElementZIndex + 1;
  arrowUp.style.zIndex = prevElementZIndex + 1;
  if (!isLeft) {
   left += el.offsetWidth;
  }
  this.targetImagesChangeVisibility(true, "v");
  var x = left - (arrowDown.offsetWidth / 2);
  x = isLeft ? Math.floor(x) : Math.ceil(x);
  _aspxSetAbsoluteX(arrowDown, x);
  _aspxSetAbsoluteY(arrowDown, top - arrowDown.offsetHeight);
  _aspxSetAbsoluteX(arrowUp, x);
  _aspxSetAbsoluteY(arrowUp, top + el.offsetHeight);
 },
 setHorizontalDragImagePosition: function(el, isTop) {
  var mainElement = this.GetMainElement();
  var arrowLeft = this.GetArrowDragLeftImage();
  var arrowRight = this.GetArrowDragRightImage();
  var left = 0, top = 0;
  if(el.id.indexOf("DHP") < 0) {
   left = _aspxGetAbsoluteX(el);
   top = _aspxGetAbsoluteY(el);
  } else {
   var windowElem = this.GetDataHeadersPopupWindowElement();
   left = _aspxGetAbsoluteX(el);
   top = _aspxGetAbsoluteY(el);
   arrowDown.style.zIndex = windowElem.style.zIndex + 1;
   arrowUp.style.zIndex = windowElem.style.zIndex + 1;
  }
  if(!isTop)
   top += el.offsetHeight;
  this.targetImagesChangeVisibility(true, "h");
  top -= (arrowLeft.offsetHeight / 2);
  top = isTop ? Math.floor(top) : Math.ceil(top);
  _aspxSetAbsoluteX(arrowRight, left - arrowLeft.offsetWidth);
  _aspxSetAbsoluteY(arrowRight, top);
  _aspxSetAbsoluteX(arrowLeft, left + el.offsetWidth);
  _aspxSetAbsoluteY(arrowLeft, top);
 },
 isVerticalElement: function(el) {
  if(el == null) return false;
  return this.isFieldListElement(el) || el.pgddVerticalElement;
 },
 setPivotDragImagePosition: function(el, isLeft) {
  if(this.isVerticalElement(el))
   this.setHorizontalDragImagePosition(el, isLeft);
  else
   this.setVerticalDragImagePosition(el, isLeft);
 },
 ScrollFieldList: function(event) {
  var target = this.DragDropHelper.targets.targetElement;
  var pivotGrid = this.DragDropHelper.pGrid;
  if(!pivotGrid.isFieldListElement(target))
   return;
  var wheelDelta = 0;
  if(!event)
   event = window.event;
  if(event.wheelDelta)
   wheelDelta = event.wheelDelta / 120;
  else if(event.detail)
   wheelDelta = -event.detail / 3;
  if(wheelDelta) {
   var targetDiv;
   if(target.id.indexOf("pgHeader") < 0 && target.id.indexOf("pgGroupHeader") < 0)
    targetDiv = pivotGrid.getFielListArrowsHorElement(_aspxGetChildrenByPartialClassName(target, "dxpgFLListDiv")[0]);
   else
    targetDiv = pivotGrid.getFielListArrowsHorElement(_aspxGetParentByPartialClassName(target, "dxpgFLListDiv"));
   if(targetDiv == null) return;
   if(wheelDelta > 0 && targetDiv.scrollTop > 0) {
    if(targetDiv.scrollTop < 20)
     targetDiv.scrollTop = 0;
    else
     targetDiv.scrollTop -= 20;
   }
   if(wheelDelta < 0 && targetDiv.scrollTop + targetDiv.clientHeight < targetDiv.scrollHeight)
    targetDiv.scrollTop += 20;
   if(event.preventDefault) {
    event.preventDefault();
   }
   event.returnValue = false;
  }
 },
 updateListElements: function(targets, event) {
  for(var i = targets.list.length - 1; i >= 0; i--) {
   if(!this.IsFieldListTargetAllowed(targets.list[i].targetElement)) {
    this.ListTargets.push(targets.list[i].targetElement);
    targets.removeElement(targets.list[i].element);
   } else {
    if(this.isFieldListElement(targets.list[i].targetElement))
     targets.list[i].absoluteY = _aspxGetAbsoluteY(targets.list[i].targetElement);
   }
  }
  for(var i = this.ListTargets.length - 1; i >= 0; i--) {
   if(this.IsFieldListTargetAllowed(this.ListTargets[i])) {
    var target = new ASPxClientCursorTarget(this.ListTargets[i]);
    target.element = target.targetElement.parentNode;
    targets.list.unshift(target);
    this.ListTargets.splice(i, 1);
   }
  }
  targets.doTargetChanged(event);
 },
 getFielListArrowsHorElement: function(element) {
  return _aspxGetChildByTagName(_aspxGetChildByTagName(element, "div", 0), "div", 0);
 },
 setFieldListDragImagePosition: function(el, isLeft) {
  this.LastHoverFieldList = _aspxGetParentByPartialClassName(el, "dxpgCustFields");
  var horEl = el, vertEl = el;
  var left = 0, top = 0;
  if(el.id.indexOf("pgHeader") < 0 && el.id.indexOf("pgGroupHeader") < 0) {
   var el1 = _aspxGetChildByTagName(el, "table", 0);
   var el2 = _aspxGetChildrenByPartialClassName(el, "dxpgFLListDiv")[0];
   if(el1.offsetHeight < el2.offsetHeight)
    vertEl = el1;
   else
    vertEl = el2;
   horEl = this.getFielListArrowsHorElement(el2);
  } else {
   var lists = _aspxGetParentByPartialClassName(el, "dxpgFLListDiv");
   horEl = this.getFielListArrowsHorElement(lists);
  }
  var leftArrow = this.GetArrowDragRightImage();
  var rightArrow = this.GetArrowDragLeftImage();
  var scrollWidth;
  if(horEl.clientHeight >= horEl.scrollHeight)
   scrollWidth = 0;
  else
   scrollWidth = _aspxGetVerticalScrollBarWidth();
  left = _aspxGetAbsoluteX(horEl);
  top = _aspxGetAbsoluteY(vertEl);
  if(!isLeft)
   top += vertEl.offsetHeight;
  this.targetImagesChangeVisibility(true, "h");
  var windowElem = this.GetCustomizationFieldsWindowElement();
  rightArrow.style.zIndex = windowElem ? windowElem.style.zIndex + 1 : 12000;
  leftArrow.style.zIndex = windowElem ? windowElem.style.zIndex + 1 : 12000;
  var y = top - (leftArrow.offsetHeight / 2);
  y = isLeft ? Math.floor(y) : Math.ceil(y);
  if(__aspxWebKitFamily) {
   if(!isLeft)
    y += 2;
   left += 1;
  } else {
   if(isLeft)
    y -= 1;
   else
    y += 1;
  }
  _aspxSetAbsoluteX(leftArrow, (left - leftArrow.offsetWidth));
  _aspxSetAbsoluteY(leftArrow, y);
  _aspxSetAbsoluteX(rightArrow, left + horEl.offsetWidth - scrollWidth);
  _aspxSetAbsoluteY(rightArrow, y);
 },
 setDragImagesPosition: function(el, isLeft) {
  this.LastHoverFieldList = null;
  this.targetImagesChangeVisibility(false);
  if(el == this.getFieldListFields()) {
   __aspxDragHelper.addElementToDragDiv(this.GetDragHideFieldImage());
   this.LastHoverFieldList = el;
  } else {
   if(this.isFieldListElement(el))
    this.setFieldListDragImagePosition(el, isLeft);
   else
    this.setPivotDragImagePosition(el, isLeft);
  }
  if(this.LastHoverFieldList != null)
   this.LastHoverFieldList.className = this.LastHoverFieldList.className + " DragOver";
 },
 isDeferUpdatesChecked: function() {
  var input = this.GetChildElementById("dxpgCustFields_dxpgFLDefere_S");
  return input == null ? false : input.value != "U";
 },
 isTreeViewNode: function(element) {
  return element != null && element.id.indexOf("treeCF") != -1;
 },
 PerformDeferUpdatesCallback: function() {
  function SplitHeadersList(fieldsContainer) {
   var fields = _aspxGetChildrenByPartialClassName(fieldsContainer, "dxpgHeader");
   var str = "";
   for(var i = 0; i < fields.length; i++) {
    var lastChar = fields[i].id.charAt(fields[i].id.length - 1);
    if(lastChar >= '0' && lastChar <= '9') {
     if(str != "")
      str += ",";
     str += fields[i].id.substr(fields[i].id.lastIndexOf('_'));
    }
   }
   return str;
  }
  var callbackStr = "FL";
  callbackStr += "|" + SplitHeadersList(this.getRowAreaFieldList());
  callbackStr += "|" + SplitHeadersList(this.getColumnAreaFieldList());
  callbackStr += "|" + SplitHeadersList(this.getFilterAreaFieldList());
  callbackStr += "|" + SplitHeadersList(this.getDataAreaFieldList());
  callbackStr += "|" + SplitHeadersList(this.getFieldListFields());
  this.PerformCallbackInternal(null, callbackStr)
 },
 HideCustomizationFields: function() {
  this.ChangeCustomizationFieldsVisibilityInternal(false, true);
 },
 ShowCustomizationFields: function(animate) {
  this.ChangeCustomizationFieldsVisibilityInternal(true, animate);
 },
 IsCustomizationFieldsVisible: function() {
  var fieldsWindow = this.GetCustomizationFieldsWindow();
  if(fieldsWindow == null) return false;
  return fieldsWindow.IsVisible();
 },
 ChangeCustomizationFieldsVisibilityInternal: function(visible, animate) {
  if(!_aspxIsExists(visible)) {
   visible = !this.IsCustomizationFieldsVisible();
  }
  var fieldsWindow = this.GetCustomizationFieldsWindow();
  if(fieldsWindow == null) return;
  var oldEnableAnimation = fieldsWindow.enableAnimation;
  fieldsWindow.enableAnimation = animate;
  this.currentEnableFieldListAnimation = animate;
  if(visible) {
   fieldsWindow.Show();
  } else {
   fieldsWindow.Hide();
  }
  fieldsWindow.enableAnimation = oldEnableAnimation;
 },
 IsPrefilterVisible: function() {
  var prefilterPopup = this.GetPrefilterWindow();
  return prefilterPopup != null && prefilterPopup.GetVisible();
 },
 ShowPrefilter: function() {
  this.ChangePrefilterVisibility(true);
 },
 ApplyPrefilter: function() {
  this.PreventCallbackAnimation();
  var fc = this.GetFilterControl();
  if(fc == null) return;
  fc.Apply(this);
 },
 HidePrefilter: function() {
  this.PreventCallbackAnimation();
  this.ChangePrefilterVisibility(false);
 },
 ChangePrefilterVisibility: function(visible) {
  this.PreventCallbackAnimation();
  this.ChangePrefilterVisibilityClientSize(visible);
  this.PerformCallbackInternal(this.GetMainTable(), "PREFILTER|" + (visible ? "Show" : "Hide"));
 },
 ChangePrefilterVisibilityClientSize: function(visible) {
  if(!visible) {
   var prefilterPopup = this.GetPrefilterWindow();
   if(prefilterPopup != null)
    prefilterPopup.Hide();
  }
 },
 ClearPrefilter: function() {
  this.PerformCallbackInternal(this.GetMainTable(), "PREFILTER|Reset");
 },
 ChangePrefilterEnabled: function() {
  this.PerformCallbackInternal(this.GetMainTable(), "PREFILTER|ChangeEnabled");
 },
 showHeaderMenu: function(e, fieldID) {
  this.headerMenuFieldID = fieldID;
  var source = _aspxGetEventSource(e);
  if(source == null)
   return;
  this.headerMenuElementID = source.id;
  if(!this.headerMenuElementID && source.parentNode && source.parentNode.id)
   this.headerMenuElementID = source.parentNode.id;
  var menu = aspxGetControlCollection().Get(this.name + "_HM");
  if(menu == null) return;
  this.SetMenuItemVisibilityState(menu, "Hide", this.headerMenuElementID.indexOf("Header") > 0);
  this.SetMenuItemVisibilityState(menu, "HideList", this.IsCustomizationFieldsVisible());
  this.SetMenuItemVisibilityState(menu, "ShowList", !this.IsCustomizationFieldsVisible());
  this.SetMenuItemVisibilityState(menu, "ShowPrefilter", !this.IsPrefilterVisible());
  var isVisible = this.isOLAPSortModeNoneItemsVisible();
  this.SetMenuItemState(menu, "SortAZ", isVisible, true, this.isOLAPSortModeNoneSortAZChecked());
  this.SetMenuItemState(menu, "SortZA", isVisible, true, this.isOLAPSortModeNoneSortZAChecked());
  this.SetMenuItemState(menu, "ClearSort", isVisible, this.isOLAPSortModeNoneClearSortEnabled(), false);
  this.showMenu(e, menu);
 },
 showFieldListMenu: function(e) {
  var menu = aspxGetControlCollection().Get(this.name + "_FM");
  this.showMenu(e, menu);
 },
 SetMenuItemVisibilityState: function(menu, name, isVisible) {
  menuItem = menu.GetItemByName(name);
  if(menuItem != null)
   menuItem.SetVisible(isVisible);
 },
 SetMenuItemState: function(menu, name, isVisible, isEnabled, isChecked) {
  menuItem = menu.GetItemByName(name);
  if(menuItem != null) {
   menuItem.SetVisible(isVisible);
   menuItem.SetEnabled(isEnabled);
   menuItem.SetChecked(isChecked);
  }
 },
 isOLAPSortModeNoneItemsVisible: function() {
  return (this.headerMenuElementID.indexOf("osmn") > 0);
 },
 isOLAPSortModeNoneSortAZChecked: function() {
  return (this.headerMenuElementID.indexOf("osmnSAZ") > 0);
 },
 isOLAPSortModeNoneSortZAChecked: function() {
  return (this.headerMenuElementID.indexOf("osmnSZA") > 0);
 },
 isOLAPSortModeNoneClearSortEnabled: function() {
  return (((this.headerMenuElementID.indexOf("osmnSAZ") > 0) || (this.headerMenuElementID.indexOf("osmnSZA") > 0)));
 },
 onHeaderMenuClick: function(itemName) {
  switch(itemName) {
   case "Refresh": this.PerformCallbackInternal(this.GetMainTable(), "RELOAD"); break;
   case "Hide":
    if(this.headerMenuElementID)
     this.PerformCallbackInternal(this.GetMainTable(), "H|" + this.headerMenuElementID);
    break;
   case "HideList": this.HideCustomizationFields(); break;
   case "ShowList": this.ShowCustomizationFields(true); break;
   case "ShowPrefilter": this.ShowPrefilter(); break;
   case "SortAZ":
    if(this.isOLAPSortModeNoneSortAZChecked()) break;
    this.PerformCallbackInternal(this.GetMainTable(), "SAZ|" + this.headerMenuElementID);
    this.ResetFilterCache(this.filterFieldIndex);
    break;
   case "SortZA":
    if(this.isOLAPSortModeNoneSortZAChecked()) break;
    this.PerformCallbackInternal(this.GetMainTable(), "SZA|" + this.headerMenuElementID);
    this.ResetFilterCache(this.filterFieldIndex);
    break;
   case "ClearSort":
    this.PerformCallbackInternal(this.GetMainTable(), "CS|" + this.headerMenuElementID);
    this.ResetFilterCache(this.filterFieldIndex);
    break;
   default:
    if(_aspxIsExists(this.RaisePopupMenuItemClick))
     this.RaisePopupMenuItemClick("HeaderMenu", itemName, this.headerMenuFieldID, -1);
    break;
  }
 },
 showFieldValueMenu: function(e, state, iscollapsed, fieldID, itemVisibleIndex, canShowSortBySummary, area, sortedFields, dataIndex, itemIndex) {
  this.fieldMenuCellState = state;
  this.fieldMenuFieldID = fieldID;
  this.fieldMenuFieldValueIndex = itemVisibleIndex;
  this.fieldMenuFieldItemIndex = itemIndex;
  this.fieldMenuDataIndex = dataIndex;
  this.fieldMenuArea = area;
  var menu = aspxGetControlCollection().Get(this.name + "_FVM");
  if(menu == null) return;
  this.FilterFieldValueMenuItems(menu, state, iscollapsed, canShowSortBySummary, area, sortedFields, dataIndex);
  if(this.MenuHasVisibleItems(menu))
   this.showMenu(e, menu);
 },
 MenuHasVisibleItems: function(menu) {
  var itemsCount = menu.GetItemCount();
  for(var i = 0; i < itemsCount; i++) {
   var menuItem = menu.GetItem(i);
   if(menuItem.GetVisible())
    return true;
  }
  return false;
 },
 FilterFieldValueMenuItems: function(menu, state, iscollapsed, canShowSortBySummary, area, sortedFields, dataIndex) {
  this.SetMenuItemVisibilityState(menu, "Expand", iscollapsed && state != "");
  this.SetMenuItemVisibilityState(menu, "Collapse", !iscollapsed && state != "");
  this.SetMenuItemVisibilityState(menu, "ExpandAll", state != "");
  this.SetMenuItemVisibilityState(menu, "CollapseAll", state != "");
  var itemsCount = menu.GetItemCount(),
   showRemoveAll = false;
  for(var i = 0; i < itemsCount; i++) {
   var menuItem = menu.GetItem(i);
   if(menuItem.name.indexOf("SortBy_") == 0) {
    var isRemoveAll = menuItem.name.indexOf("RemoveAll") >= 0;
    var visible = canShowSortBySummary && menuItem.name.indexOf(area) > 0;
    if(isRemoveAll) {
     visible = visible && showRemoveAll;
    } else {
     if(dataIndex >= 0)
      visible = visible && menuItem.name.indexOf("_" + dataIndex) == menuItem.name.lastIndexOf("_");
    }
    menuItem.SetVisible(visible);
    if(visible && !isRemoveAll) {
     var isChecked = this.GetSortByMenuItemCheckedState(menuItem, sortedFields);
     showRemoveAll |= isChecked;
     menuItem.SetChecked(isChecked);
    }
   }
  }
 },
 GetSortByMenuItemCheckedState: function(menuItem, sortedFields) {
  if(menuItem.name.indexOf("RemoveAll") >= 0) return false;
  for(var i = 0; i < sortedFields.length; i++) {
   if(menuItem.name.indexOf(sortedFields[i]) >= 0)
    return true;
  }
  return false;
 },
 showMenu: function(e, menu) {
  menu.ShowInternal(e);
  _aspxPreventEventAndBubble(e);
 },
 onFieldValueMenuClick: function(itemName) {
  switch(itemName) {
   case "Expand":
   case "Collapse": this.PerformCallbackInternal(this.GetMainTable(), this.fieldMenuCellState); break;
   case "ExpandAll": this.PerformCallbackInternal(this.GetMainTable(), this.fieldMenuCellState + "|EA"); break;
   case "CollapseAll": this.PerformCallbackInternal(this.GetMainTable(), this.fieldMenuCellState + "|CA"); break;
   default:
    if(itemName.indexOf("SortBy_") == 0)
     this.onSortByFieldValueMenuClick(itemName);
    else {
     if(_aspxIsExists(this.RaisePopupMenuItemClick))
      this.RaisePopupMenuItemClick("FieldValueMenu", itemName, this.fieldMenuFieldID, this.fieldMenuFieldValueIndex);
    }
    break;
  }
 },
 onFieldListMenuClick: function(itemName) {
  this.GetCustomizationFieldsWindowContentDiv().className = itemName;
  this.GetChildElementById("dxpgCustFields_dxpgFLButton").value = itemName;
  this.UpdateExcelCustForm();
 },
 onSortByFieldValueMenuClick: function(itemName) {
  var argument = this.GetSortByArgument(itemName);
  this.PerformCallbackInternal(this.GetMainTable(), "SS|" + this.fieldMenuFieldID + "|" + this.fieldMenuFieldValueIndex + "|" + argument + "|" + this.fieldMenuFieldItemIndex);
  this.ResetFilterCache(this.filterFieldIndex);
 },
 GetSortByArgument: function(itemName) {
  var sortByStr = "SortBy_";
  var startIndex = itemName.indexOf("_", sortByStr.length + 1) + 1;
  var res = itemName.substr(startIndex).replace("_", "|");
  if(res == "RemoveAll")
   res += "|" + this.fieldMenuDataIndex + "|" + this.fieldMenuArea;
  return res;
 },
 DoPagerClick: function(element, value) {
  this.AssignSlideAnimationDirectionByPagerArgument(value, this.pageIndex);
  this.PerformCallbackInternal(element, "P|" + value);
 },
 CanHandleGesture: function(evt) {
  var source = _aspxGetEventSource(evt);
  var div = this.adjustingManager.getHorzScrollTableDiv();
  return _aspxGetIsParent(div, source);
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && 
   (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
 },
 AllowExecuteGesture: function(value) {
  return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
 },
 ExecuteGesture: function(value, count) {
  this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function(arg) { this.DoPagerClick(null, arg); }.aspxBind(this));
 },
 ExcelCustFormRerenderList: function(element) {
  if(element == null) return;
  element = _aspxGetElementsByTagName(element, "tbody")[0];
  var child = element.lastChild;
  element.removeChild(child);
  element.appendChild(child);
 },
 ForceUpdateFieldListLists: function() {
  this.ExcelCustFormRerenderList(this.getFieldListFields());
  this.ExcelCustFormRerenderList(this.getFilterAreaFieldList());
  this.ExcelCustFormRerenderList(this.getColumnAreaFieldList());
  this.ExcelCustFormRerenderList(this.getRowAreaFieldList());
  this.ExcelCustFormRerenderList(this.getDataAreaFieldList());
 },
 InitExcelCustForm: function() {
  var content = this.GetCustomizationFieldsWindowContentDiv();
  if(content == null)
   return;
  var custFields = _aspxGetChildrenByPartialClassName(content, "dxpgCustFields");
  for(var i = 0; i < custFields.length; i++) {
   if(custFields[i].className.indexOf("dxpgCustFieldsDiv") > -1) continue;
   if(custFields[i].className.indexOf("FieldsFieldList") > -1) {
    var listDiv = _aspxGetChildrenByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
    var scrolledDiv = this.getFielListArrowsHorElement(listDiv);
    if(scrolledDiv)
    _aspxAttachEventToElement(scrolledDiv, "scroll", this.UpdateFieldListScrollLeft);
   } else {
    var listDiv = _aspxGetChildrenByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
    var scrolledDiv = this.getFielListArrowsHorElement(listDiv);
    _aspxAttachEventToElement(scrolledDiv, "scroll", this.UpdateFieldListTargets);
    scrolledDiv.pivotGrid = this;
    this.FixHeaderImageDrag(scrolledDiv);
   }
  }
 },
 UpdateFieldListScrollLeft : function(event) {
  var source = _aspxGetEventSource(event);
  if(source == null)
   return;
  if(source.scrollLeft > 0)
   source.scrollLeft = 0;
 },
 UpdateFieldListTargets: function(event) {
  var source = _aspxGetEventSource(event);
  if(source == null || source.pivotGrid == null)
   return;
  if(source.scrollLeft > 0)
   source.scrollLeft = 0;
  var pivotGrid = source.pivotGrid;
  if(pivotGrid.DragDropManager == null || pivotGrid.DragDropManager.DragTargets == null)
   return;
  pivotGrid.updateListElements(pivotGrid.DragDropManager.DragTargets, _aspxGetEvent(event));
 },
 UpdateExcelCustForm: function() {
  var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
  if(contentDiv == null)
   return;
  pivotGrid_UpdateCustomizationFieldsHeight(contentDiv);
  this.UpdateExcelCustFormHeaders();
  this.UpdateExcelCustomFormFieldsContent();
  if(__aspxOpera)
   this.ForceUpdateFieldListLists();
  this.FixIEFieldListScrollbar();
  if(contentDiv.className == "")
   return;
  var menu = aspxGetControlCollection().Get(this.name + "_FM");
  this.SetMenuItemState(menu, "StackedDefault", true, true, false);
  this.SetMenuItemState(menu, "StackedSideBySide", true, true, false);
  this.SetMenuItemState(menu, "TopPanelOnly", true, true, false);
  this.SetMenuItemState(menu, "BottomPanelOnly2by2", true, true, false);
  this.SetMenuItemState(menu, "BottomPanelOnly1by4", true, true, false);
  this.SetMenuItemState(menu, contentDiv.className, true, false, false);
 },
 FixIEFieldListScrollbar: function() {
  var isIElt8 = __aspxIE && __aspxBrowserVersion < 8;
  var browserPutsScrollBarOnContent = isIElt8 || __aspxIE && document.documentMode && document.documentMode < 8;
  if(!browserPutsScrollBarOnContent) return;
  this.FixIEFieldListScrollbarCore(this.getFieldListFields());
  this.FixIEFieldListScrollbarCore(this.getFilterAreaFieldList());
  this.FixIEFieldListScrollbarCore(this.getColumnAreaFieldList());
  this.FixIEFieldListScrollbarCore(this.getRowAreaFieldList());
  this.FixIEFieldListScrollbarCore(this.getDataAreaFieldList());
 },
 FixIEFieldListScrollbarCore: function(element) {
  if(element == null) return;
  var ie6 = __aspxBrowserVersion < 7;
  var scrollBarWidth = _aspxGetVerticalScrollBarWidth();
  var element = _aspxGetElementsByTagName(element, "table")[0].parentNode;
  if(element.clientHeight < element.scrollHeight) {
   if(ie6)
    element.childNodes[0].style.marginRight = "-" + scrollBarWidth + "px";
   element.style.paddingRight = scrollBarWidth + "px";
  }
  else {
   if(ie6)
    element.childNodes[0].style.marginRight = "0px";
   element.style.paddingRight = "0px";
  }
 },
 UpdateExcelCustFormHeaders: function() {
  var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
  if(contentDiv == null)
   return;
  var listsDiv = _aspxGetChildrenByPartialClassName(contentDiv, "dxpgCustFieldsDiv")[0];
  if(listsDiv == null)
   listsDiv = this.getFieldListFields();
  if(listsDiv == null)
   return;
  var headersList = _aspxGetDescendantNodes(listsDiv, function(e) { return _aspxElementCssClassContains(e, "dxpgHeaderTable"); });
  for(var i = 0; i < headersList.length; i++) {
   var headerTable = headersList[i];
   var sortCells = _aspxGetChildrenByPartialClassName(headerTable, "dxpgHeaderSort");
   var filterCells = _aspxGetChildrenByPartialClassName(headerTable, "dxpgHeaderFilter");
   if(sortCells.length > 0)
    this.UpdateExcelCustFormSortOrFilterCell(sortCells[0], false);
   if(filterCells.length > 0)
    this.UpdateExcelCustFormSortOrFilterCell(filterCells[0], true);
   headerTable.style.borderCollapse = this.isDeferUpdatesChecked() ? "separate" : "collapse";
  }
 },
 UpdateExcelCustomFormFieldsContent: function() {
  var customizationTreeView = this.GetCustomizationTreeView();
  if (customizationTreeView)
   customizationTreeView.AdjustControl();
 },
 UpdateExcelCustFormSortOrFilterCell: function(cell, isfilter) {
  cell.style.display = (!isfilter && this.isDeferUpdatesChecked()) ? "none" : "";
  cell.style.width = "";
  cell.style.width = (cell.childNodes[0].offsetWidth
    + (__aspxWebKitFamily ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(cell) : 0)) + "px";
 },
 OnHorzScroll: function(offsetLeft) {
  this.adjustingManager.OnHorzScroll(offsetLeft);
 },
 OnFakeHorzScroll: function(offsetLeft) {
  this.adjustingManager.OnFakeHorzScroll(offsetLeft);
 },
 BrowserWindowResizeSubscriber: function() {
  return ASPxClientControl.prototype.BrowserWindowResizeSubscriber.call(this) && this.adjustingManager.ShouldProcessWindowResizing();
 },
 OnBrowserWindowResize: function() {
  this.AdjustControl();
 },
 RaiseCustomTargets: function(targets) {
  if(!this.customTargets.IsEmpty()) {
   var args = new ASPxClientPivotCustomTargetsEventArgs(targets);
   this.customTargets.FireEvent(this, args);
  }
 },
 RaiseCustomizationFieldsVisibleChanged: function() {
  if(!this.CustomizationFieldsVisibleChanged.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.CustomizationFieldsVisibleChanged.FireEvent(this, args);
  }
 },
 RaiseCellClick: function(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
  if(!this.CellClick.IsEmpty()) {
   var args = new ASPxClientClickEventArgs(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
   this.CellClick.FireEvent(this, args);
  }
 },
 RaiseCellDblClick: function(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
  if(!this.CellDblClick.IsEmpty()) {
   var args = new ASPxClientClickEventArgs(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
   this.CellDblClick.FireEvent(this, args);
  }
 },
 RaisePopupMenuItemClick: function(menuType, menuItemName, fieldID, fieldValueIndex) {
  if(!this.PopupMenuItemClick.IsEmpty()) {
   var args = new ASPxClientPivotMenuItemClickEventArgs(menuType, menuItemName, fieldID, fieldValueIndex);
   this.PopupMenuItemClick.FireEvent(this, args);
  }
 },
 GetCustomizationFieldsVisibility: function() {
  return this.IsCustomizationFieldsVisible();
 },
 SetCustomizationFieldsVisibility: function(value, animate) {
  if(!_aspxIsExists(animate))
   animate = true;
  this.ChangeCustomizationFieldsVisibilityInternal(value, animate);
 },
 ChangeCustomizationFieldsVisibility: function(animate) {
  if(!_aspxIsExists(animate))
   animate = true;
  this.ChangeCustomizationFieldsVisibilityInternal(!this.IsCustomizationFieldsVisible(), animate);
 },
 PerformCallback: function(args) {
  if(!_aspxIsExists(args)) args = "";
  this.ResetFilterCache();
  this.PerformCallbackInternal(this.GetMainTable(), "C|" + args, "CUSTOMCALLBACK");
 }
});
ASPxClientPivotGrid.Cast = ASPxClientControl.Cast;
function pivotGrid_GetGrid(id) {
 return aspxGetControlCollection().Get(id);
}
function pivotGrid_IsBusy(id) {
 var grid = pivotGrid_GetGrid(id);
 if(grid.isCallbackInProcess)
  return true;
 var filterControl = grid.GetFilterControl();
 if(filterControl != null && filterControl.isCallbackInProcess)
  return true;
 return false;
}
function pivotGrid_GetGridFromMenu(menu) {
 if(menu == null) return null;
 var pos = menu.name.lastIndexOf("_");
 if(pos > -1) {
  return pivotGrid_GetGrid(menu.name.substring(0, pos));
 }
 return null;
}
function pivotGrid_OnHeaderMenuClick(s, args) {
 var grid = pivotGrid_GetGridFromMenu(s);
 if(grid != null) {
  grid.onHeaderMenuClick(args.item.name);
 }
}
function pivotGrid_ShowHeaderMenu(id, e, fieldID) {
 var grid = pivotGrid_GetGrid(id);
 if(grid != null) {
  grid.showHeaderMenu(e, fieldID);
 }
}
function pivotGrid_OnFieldValueMenuClick(s, args) {
 var grid = pivotGrid_GetGridFromMenu(s);
 if(grid != null) {
  grid.onFieldValueMenuClick(args.item.name);
 }
}
function pivotGrid_OnFieldListMenuClick(s, args) {
 var grid = pivotGrid_GetGridFromMenu(s);
 if(grid != null) {
  grid.onFieldListMenuClick(args.item.name);
 }
}
function pivotGrid_OnFieldListLayoutButtonClick(id, evt) {
 var evt = _aspxGetEvent(evt);
 var pivotGrid = pivotGrid_GetGrid(id);
 if(pivotGrid == null) return;
 pivotGrid.showFieldListMenu(evt);
}
function pivotGrid_ShowFieldValueMenu(id, e, state, iscollapsed, fieldID, itemVisibleIndex, canShowSortBySummary, area, sortedFields, dataIndex, itemIndex) {
 var grid = pivotGrid_GetGrid(id);
 if(grid != null) {
  grid.showFieldValueMenu(e, state, iscollapsed, fieldID, itemVisibleIndex, canShowSortBySummary, area, sortedFields, dataIndex, itemIndex);
 }
}
function pivotGrid_HeaderMouseDown(id, element, e) {
 var grid = pivotGrid_GetGrid(id);
 if(grid != null) {
  if(!element.id || !(element.id.indexOf("pgHeader") != -1 || element.id.indexOf("pgGroupHeader") != -1))
   return;
  grid.headerMouseDown(element, e);
 }
}
function pivotGrid_HeaderClick(id, element, e) {
 var grid = pivotGrid_GetGrid(id);
 if(grid != null) {
  grid.headerClick(element);
 }
}
function pivotGrid_CustFormHeaderClick(id, element, e) {
 var grid = pivotGrid_GetGrid(id);
 if(grid != null && !pivotGrid_IsBusy(id))
  grid.headerClick(element);
}
function pivotGrid_ShowFilterPopup(name, headerId, isFieldList) {
 var pg = pivotGrid_GetGrid(name);
 if(pg != null)
  pg.ShowFilterPopup(headerId);
}
function pivotGrid_PerformCallback(name, el, value) {
 var pg = pivotGrid_GetGrid(name);
 if(pg != null)
  pg.PerformCallbackInternal(el, value);
}
function pivotGrid_FieldFilterValueChanged(name, index) {
 var pg = pivotGrid_GetGrid(name);
 if(pg != null)
  pg.fieldFilterValueChanged(index);
 else
  pivotGrid_WasNotFound();
}
function pivotGrid_ApplyFilter(name) {
 var pg = pivotGrid_GetGrid(name);
 if(pg != null) {
  if(!pg.GetHeaderFilterPopup().IsVisible()) return;
  pg.applyFilter();
 }
 else
  pivotGrid_WasNotFound();
}
function pivotGrid_WasNotFound() {
 alert("PivotGrid was not found");
}
function pivotGrid_HideFilter(name) {
 var pg = pivotGrid_GetGrid(name);
 if(pg != null)
  pg.GetHeaderFilterPopup().Hide();
}
function pivotGrid_ClearSelection() {
 if(!__aspxOpera)
  return;
 if(_aspxIsExists(window.getSelection)) {
  if(__aspxWebKitFamily)
   window.getSelection().collapse();
  else
   window.getSelection().removeAllRanges();
 }
 else if(_aspxIsExists(document.selection)) {
  if(_aspxIsExists(document.selection.empty))
   document.selection.empty();
  else if(_aspxIsExists(document.selection.clear))
   document.selection.clear();
 }
}
function pivotGrid_PagerClick(name, element, id) {
 var pg = pivotGrid_GetGrid(name);
 if(pg != null) pg.DoPagerClick(element, id);
}
function pivotGrid_GetGridByCustomizationFields(custFields) {
 if(!_aspxIsExists(custFields.pivotGrid) || custFields.pivotGrid == null) {
  var name = custFields.name.substr(0, custFields.name.length - ("_DXCustFields").length);
  custFields.pivotGrid = aspxGetControlCollection().Get(name);
 }
 return custFields.pivotGrid;
}
function pivotGrid_CustomizationFormDeferUpdates(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg == null) return;
 pg.UpdateExcelCustFormHeaders();
}
function pivotGrid_CustomizationFormResumeUpdates(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg == null) return;
 if (pg.forcePerformDeferUpdatesCallback) {
  pg.PerformDeferUpdatesCallback();
  pg.forcePerformDeferUpdatesCallback = false;
 }
 else
  pg.UpdateExcelCustFormHeaders();
}
function pivotGrid_CustomizationFormUpdate(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg == null) return;
 pg.PerformDeferUpdatesCallback();
}
function pivotGrid_UpdateCustomizationFieldsHeight(content) {
 if(content == null)
  return;
 var buttonDiv = _aspxGetChildrenByPartialClassName(content, "dxpgFLButtonDiv")[0];
 var deferDiv = _aspxGetChildrenByPartialClassName(content, "dxpgFLDefereDiv")[0];
 var listsDiv = _aspxGetChildrenByPartialClassName(content, "dxpgCustFieldsDiv")[0];
 if(buttonDiv == null || deferDiv == null || listsDiv == null)
  return;
 var isIE6 = __aspxIE && __aspxBrowserVersion < 7;
 var isIE10 = __aspxIE && __aspxBrowserVersion > 9;
 var isIE11 = __aspxIE && __aspxBrowserVersion > 10;
 var isNotTopPanelOnly = content.className != "TopPanelOnly";
 if(__aspxIE && isNotTopPanelOnly) {
  deferDiv.style.display = "none";
  deferDiv.style.display = "block";
 }
 var custFields = _aspxGetChildrenByPartialClassName(content, "dxpgCustFields");
 for(var i = 0; i < custFields.length; i++) {
  if(custFields[i].className.indexOf("dxpgCustFieldsDiv") > -1) continue;
  var list = _aspxGetChildrenByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
  if (isIE11) {
   list.style.maxHeight = "1px";
  } else {
   list.style.display = "none";
   if (isIE6)
    list.style.height = "10px";
   if (isIE10) {
    list.style.display = "block";
    list.style.height = "1px";
    list.style.overflow = "hidden";
   }
  }
 }
 var fullHeight = parseInt(content.clientHeight);
 if(fullHeight == 0)
  fullHeight = parseInt(content.offsetHeight);
 var height = fullHeight - parseInt(deferDiv.clientHeight) - parseInt(buttonDiv.clientHeight);
 if(height < 0) return;
 listsDiv.style.height = height + "px";
 for(var i = 0; i < custFields.length; i++) {
  if(custFields[i].className.indexOf("dxpgCustFieldsDiv") > -1) continue;
  var text = _aspxGetChildrenByPartialClassName(custFields[i], "dxpgFLTextDiv")[0];
  var list = _aspxGetChildrenByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
  list.style.display = "block";
  list.style.height = "auto";
  list.style.overflow = "visible";
  list.style.maxHeight = "";
  var height2;
  if(isIE6 && isNotTopPanelOnly) {
   var GetHeight = function(element) {
    var rect = element.getBoundingClientRect();
    return rect.bottom - rect.top;
   }
   height2 = GetHeight(list) - GetHeight(text) - 8;
  }
  else
   height2 = parseInt(custFields[i].clientHeight) - parseInt(text.clientHeight);
  if(content.className == "StackedSideBySide" && custFields[i].className.indexOf("DataArea") > -1)
   height2 += pivotGrid_GetFieldList1By425percRound(height);
  if(height2 < 0) continue;
  list.style.height = height2 + "px";
 }
}
function pivotGrid_GetFieldList1By425percRound(height) {
 if(__aspxIE && __aspxBrowserVersion < 8) {
  if(height % 4 == 2 || height % 4 == 3)
   return -1;
  if(height % 4 == 1)
   return -2;
 }
 if(__aspxWebKitFamily || __aspxOpera) {
  if(height % 4 == 1 || height % 4 == 2)
   return 1;
  if(height % 4 == 3)
   return 2;
 }
 if(__aspxFirefox && height % 4 == 2)
  return -1;
 return 0;
}
function DoCustomizationFieldsVisibleChanged(sender) {
 var control = pivotGrid_GetGridByCustomizationFields(sender);
 if(control == null) return;
 if(_aspxIsExists(control.RaiseCustomizationFieldsVisibleChanged)) {
  control.RaiseCustomizationFieldsVisibleChanged();
 }
}
function DoUpdateContentSize(sender) {
 var control = pivotGrid_GetGridByCustomizationFields(sender);
 var content = control.GetCustomizationFieldsWindowContentDiv();
 var popup = control.GetCustomizationFieldsWindow();
 var contentCell = popup.GetWindowContentWrapperElement(-1);
 content.style.width = _aspxGetClearClientWidth(contentCell) + "px";
 content.style.height = _aspxGetClearClientHeight(contentCell) + "px";
 content.style.display = "block";
 control.RestoreContentDivScrollTop();
 control.UpdateExcelCustForm();
}
function DoResetContentSize(sender) {
 var content = pivotGrid_GetGridByCustomizationFields(sender).GetCustomizationFieldsWindowContentDiv();
 content.style.width = "0px";
 content.style.height = "0px"
}
function pivotGrid_FieldValueContextMenuHandler(e) {
 var source = _aspxGetEventSource(e);
 while(source != null && !_aspxIsExists(source.contextMenuParams))
  source = source.parentNode;
 if(source == null)
  return;
 pivotGrid_ShowFieldValueMenu(source.pivotClientID, e, source.contextMenuParams[1], source.contextMenuParams[2],
  source.contextMenuParams[3], source.contextMenuParams[4], source.contextMenuParams[5], source.contextMenuParams[6],
  source.contextMenuParams[7], source.contextMenuParams[8], source.contextMenuParams[9]);
}
function pivotGrid_HeaderContextMenuHandler(e) {
 var source = _aspxGetEventSource(e);
 while(source != null && !_aspxIsExists(source.contextMenuParams))
  source = source.parentNode;
 if(source == null)
  return;
 pivotGrid_ShowHeaderMenu(source.pivotClientID, e, source.contextMenuParams[1]);
}
function pivotGrid_AfterCallBackInitialize(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null)
  pg.AfterCallBackInitialize();
}
function pivotGrid_UpdateWidthProp(id, value, hasHorzScrollContainer) {
 var pg = pivotGrid_GetGrid(id);
 if (pg != null)
  pg.UpdateWidthProp(value, hasHorzScrollContainer);
}
function pivotGrid_CellClick(id, htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null && _aspxIsExists(pg.RaiseCellClick))
  pg.RaiseCellClick(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
}
function pivotGrid_CellDoubleClick(id, htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null && _aspxIsExists(pg.RaiseCellDblClick))
  pg.RaiseCellDblClick(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
}
function pivotGrid_Sort508(id, headerSuffix) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null) {
  pg.ResetFilterCache(pg.filterFieldIndex);
  pg.PerformCallbackInternal(null, 'S|' + id + "_" + headerSuffix);
 }
}
function pivotGrid_ApplyPrefilter(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null)
  pg.ApplyPrefilter();
}
function pivotGrid_HidePrefilter(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null)
  pg.HidePrefilter();
}
function pivotGrid_ShowPrefilter(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null)
  pg.ShowPrefilter();
}
function pivotGrid_ClearPrefilter(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null)
  pg.ClearPrefilter();
}
function pivotGrid_ChangePrefilterEnabled(id) {
 var pg = pivotGrid_GetGrid(id);
 if(pg != null)
  pg.ChangePrefilterEnabled();
}
function pivotGrid_FixIE8RowTreeLayout(maxCellID, pivotGrid) {
 var cell = _aspxGetElementById(maxCellID);
 cell.style.width = cell.offsetWidth + 'px';
 var pivot = pivotGrid_GetGrid(pivotGrid);
 if (pivot == null) return;
 pivot.SyncHorzScrollTable();
}
ASPxClientClickEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex){
  this.constructor.prototype.constructor.call(this);
  this.HtmlEvent = htmlEvent;
  this.Value = value;
  this.ColumnIndex = columnIndex;
  this.RowIndex = rowIndex;
  this.ColumnValue = columnValue;
  this.RowValue = rowValue;
  this.ColumnFieldName = columnFieldName;
  this.RowFieldName = rowFieldName;
  this.ColumnValueType = columnValueType;
  this.RowValueType = rowValueType;
  this.DataIndex = dataIndex;
 }
});
ASPxClientPivotMenuItemClickEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(menuType, menuItemName, fieldID, fieldValueIndex) {
  this.constructor.prototype.constructor.call(this);
  this.MenuType = menuType;
  this.MenuItemName = menuItemName;
  this.FieldID = fieldID;
  this.FieldValueIndex = fieldValueIndex;
 }
});
ASPxClientPivotCustomTargetsEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(targets) {
  this.constructor.prototype.constructor.call(this);
  this.Targets = targets;
 }
});
ASPxClientPivotCustomization = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 GetMainContainer: function() {
  if(this.ContainerID == null)
   return null;
  return document.getElementById(this.ContainerID);
 },
 GetPivotGrid: function() {
  if(this.PivotGridID == null)
   return null;
  return pivotGrid_GetGrid(this.PivotGridID);
 },
 SetHeight: function(value) {
  var mainContainer = this.GetMainContainer();
  var borderTop = _aspxPxToInt(_aspxGetCurrentStyle(mainContainer).borderTopWidth);
  if(!isNaN(borderTop))
   value -= borderTop;
  var borderBottom = _aspxPxToInt(_aspxGetCurrentStyle(mainContainer).borderBottomWidth);
  if(!isNaN(borderBottom))
   value -= borderBottom;
  this.GetMainContainer().style.height = value + "px";
  this.UpdateHeight();
 },
 SetWidth: function(value) {
  var mainContainer = this.GetMainContainer();
  var borderLeft = _aspxPxToInt(_aspxGetCurrentStyle(mainContainer).borderLeftWidth);
  if(!isNaN(borderLeft))
   value -= borderLeft;
  var borderRight = _aspxPxToInt(_aspxGetCurrentStyle(mainContainer).borderRightWidth);
  if(!isNaN(borderRight))
   value -= borderRight;
  this.GetMainContainer().style.width = value + "px";
 },
 UpdateHeight: function() {
  var PivotGrid = this.GetPivotGrid();
  if(PivotGrid != null)
   this.GetPivotGrid().UpdateExcelCustForm();
 },
 InitForm: function () {
  var controlName = this.GetPivotGrid() != null ? this.GetPivotGrid().name : this.name;
  var custFieldsContent = _aspxGetElementById(controlName + "_dxpgCustFields");
  pivotGrid_UpdateCustomizationFieldsHeight(custFieldsContent);
 },
 SetLayout: function(layout) {
  var PivotGrid = this.GetPivotGrid();
  if(PivotGrid == null)
   return;
  PivotGrid.GetChildElementById("dxpgCustFields_dxpgFLButton").value = layout;
  PivotGrid.GetCustomizationFieldsWindowContentDiv().className = layout;
  PivotGrid.UpdateExcelCustForm();
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.InitForm();
 }
});
MVCxClientPivotGrid = _aspxCreateClass(ASPxClientPivotGrid, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.customActionUrl = "";
  this.callbackCustomArgs = {};
  this.pivotCustomizationExtensionName = "";
  this.customActionCallBack;
 },
 PerformCallback: function(data){
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientPivotGrid.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  if (this.customActionUrl != "")
   this.customActionCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.customActionUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  ASPxClientPivotGrid.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallback: function(command){
  if(!this.BeginCallback.IsEmpty()){
   var args = new MVCxClientBeginCallbackEventArgs(command);
   this.BeginCallback.FireEvent(this, args);
   MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
  }
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID){
  if(this.callbackCustomArgs != {})
   window.setTimeout(function(){ this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientPivotGrid.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackMethod: function(command){
  return MVCx.IsCustomCallback(command) ? MVCx.GetCustomActionCallBackMethod(this) : this.callBack;
 },
 GetCallbackParams: function() {
  var params = {};
  params = this.FillCallbackParamsInternal(this.name, params);
  if(this.pivotCustomizationExtensionName)
   params = this.FillCallbackParamsInternal(this.pivotCustomizationExtensionName, params);
  return params;
 },
 FillCallbackParamsInternal: function(name, params){
  var control = aspxGetControlCollection().Get(name);
  if(!control || !control.GetMainElement)
   return;
  $(control.GetMainElement()).parent().find("input").each(function() {
   params[this.name] = this.value;
  });
  return params;
 },
 FillStateObject: function(obj) {
  if (!obj) 
   obj = {};
  var params = this.GetCallbackParams();
  for(var key in params) {
   obj[key] = params[key];
  }
 }
});
ASPxClientCheckBox = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientCheckEdit = true;
  this.valueChecked = true;
  this.valueUnchecked = false;
  this.valueGrayed = null;
  this.allowGrayed = false;
  this.isNative = false;
  this.stateController = null;
  this.imageProperties = null;
  this.allowGrayedByClick = true;
  this.internalCheckBox = null;
  this.icbFocusedStyle = [];
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
  this.CheckedChanged = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  this.isNative = !this.imageProperties;
  this.allowGrayed = this.IsGrayedAllowed();
  this.stateController = ASPxCheckableElementStateController.Create(this.imageProperties, this.valueChecked,  this.valueUnchecked, this.valueGrayed, this.allowGrayed);
  if(!this.isNative)
   this.CreateInternalCheckBox();
  ASPxClientEdit.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  ASPxClientEdit.prototype.Initialize.call(this);
  if(!_aspxIsExistsElement(this.GetMainElement()))
   return;
  if(!this.isNative) {
   this.previousValue = this.GetStateInput().value;
   this.SetValue(this.GetValue());
  }
  else
   this.previousValue = this.GetInputElement().checked;
 },
 GetInputElement: function() {
  if(this.isNative)
   return ASPxClientEdit.prototype.GetInputElement.call(this);
  else
   return this.GetStateInput();
 },
 CreateInternalCheckBox: function() {
  var instance = this;
  this.internalCheckBox = new ASPxClientCheckBoxInternal(this.GetStateInput(), this.stateController, this.allowGrayed, this.allowGrayedByClick, ASPxCheckEditElementHelper.Instance, this.GetMainElement(), true);
  this.internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  this.internalCheckBox.SetEnabled(this.GetEnabled());
  this.internalCheckBox.readOnly = this.readOnly; 
  this.internalCheckBox.CheckedChanged.AddHandler(function(s, e) { instance.OnClick(e); });
  this.internalCheckBox.Focus.AddHandler(function() { instance.OnFocus(); });
  this.internalCheckBox.LostFocus.AddHandler(function() { instance.OnLostFocus(); });
  if(__aspxWebKitFamily) 
   _aspxAttachEventToElement(this.internalCheckBox.mainElement.parentNode, "selectstart", _aspxPreventEventAndBubble);
 },
 FindInputElement: function() {
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element) && element.tagName != "INPUT")
   element = this.GetChild("_I");
  return element;
 },
 IsGrayedAllowed: function() {
  for(var propertyKey in this.imageProperties)
   if(this.imageProperties[propertyKey].length === 3)
    return true;
  return false;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseCheckedChanged(processOnServer);
  return processOnServer;
 }, 
 OnClick: function() {
  if(this.ToogleCheckState() && !this.focused)
   this.SetFocus();
 },  
 ToogleCheckState: function() {
  if(!this.GetEnabled() || this.readOnly)
   return false;
  var value = this.GetCorrectValue(this.previousValue);
  value = this.stateController.GetNextCheckBoxValue(value, this.allowGrayedByClick && this.allowGrayed);    
  this.SetValue(value);
  this.OnValueChanged();
  return true;
 },
 IsElementBelongToInputElement: function(element) {
  return false; 
 },
 ForceRefocusEditor: function() {
  if(this.isNative)
   ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
 },
 GetValue: function() {
  var value = this.stateController.GetValueByInputKey(this.GetStateInput().value);
  if(value === "" && this.convertEmptyStringToNull)
   value = null;     
  return value;
 },  
 SetValue: function(value) {
  this.previousValue = value;
  value = this.GetCorrectValue(value);
  if(this.isNative)
   this.GetInputElement().checked = (this.previousValue == this.valueChecked);
  else
   this.internalCheckBox.SetValue(value);
  this.GetStateInput().value = this.stateController.GetInputKeyByValue(value);
  this.OnValueSet();
 },
 GetICBMainElement: function() {
  return ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(this.GetStateInput());
 },
 GetLabelElement: function() {
  return ASPxCheckEditElementHelper.Instance.GetLabelElement(this.GetMainElement());
 },
 GetStateInput: function() {
  return this.GetChild("_S");
 },
 GetCorrectValue: function(value) {
  var stateIsExist = typeof(this.stateController.GetInputKeyByValue(value)) != "undefined";
  if(!stateIsExist)
   return this.allowGrayed ? this.valueGrayed : this.valueUnchecked; 
  return value;
 },
 OnValueSet: function() {},
 RaiseCheckedChanged: function(processOnServer) {
  if(!this.CheckedChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 SetEnabled: function(enabled) {
  ASPxClientEdit.prototype.SetEnabled.call(this, enabled);
  if(!this.isNative) 
    this.internalCheckBox.SetEnabled(enabled);
 },
 GetChecked: function() {
  return this.stateController.GetCheckStateByInputKey(this.GetStateInput().value) == ASPxClientCheckBoxCheckState.Checked;
 },
 SetChecked: function(isChecked) {
  this.SetCheckState(isChecked ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
 },
 GetText: function() {
  var labelElement = this.GetLabelElement();
  return (labelElement != null) ? labelElement.innerHTML : "";
 },
 GetCheckState: function() {
  var internalCheckeState = this.stateController.GetCheckStateByInputKey(this.GetStateInput().value);
  if(internalCheckeState != ASPxClientCheckBoxCheckState.Indeterminate || this.allowGrayed)
   return internalCheckeState;
  else 
   return ASPxClientCheckBoxCheckState.Unchecked;
 },
 SetCheckState: function(checkState) {
  if(checkState != ASPxClientCheckBoxCheckState.Indeterminate || this.allowGrayed) {
   var value = this.stateController.GetValueByCheckState(checkState);
   this.SetValue(value);
  }
 },
 SetText: function(text) {
  var labelElement = this.GetLabelElement();
  if(labelElement != null) 
   _aspxSetInnerHtml(labelElement, text);
 },
 ChangeEnabledAttributes: function(enabled){
  if(this.isNative) {
   this.ChangeInputEnabledAttributes(this.GetInputElement(), _aspxChangeAttributesMethod(enabled));
   this.GetInputElement().disabled = !enabled;
  } else
   this.internalCheckBox.SetEnabled(enabled);
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
 },
 ChangeInputEnabledAttributes: function(element, method){
  method(element, "onclick");
 }
});
ASPxClientCheckBox.Cast = ASPxClientControl.Cast;
ASPxClientRadioButton = _aspxCreateClass(ASPxClientCheckBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientRadioButton = true;
  this.groupName = "";
 },
 OnValueSet: function() {
  if(this.previousValue === true) 
   this.UncheckOtherGroupMembers(true );
 },
 OnClick: function() {
  if(!this.previousValue) {
   this.UncheckOtherGroupMembers();
   ASPxClientCheckBox.prototype.OnClick.call(this);
  } else {
   if(!this.focused)
    this.SetFocus();
  }
 },
 CreateInternalCheckBox: function() {
  ASPxClientCheckBox.prototype.CreateInternalCheckBox.call(this);
  this.internalCheckBox.autoSwitchEnabled = false;
 },
 UncheckOtherGroupMembers: function(suppressEvents) {
  var members = this.GetGroupMembers();
  for(var i = 0; i < members.length; i++) {
   var radioButton = members[i];
   if(!_aspxIsExistsElement(radioButton.GetMainElement()))
    members[i] = null;
   else {
    if(radioButton != this && radioButton.GetValue()){
     radioButton.SetValue(false);
     if(!suppressEvents)
      radioButton.RaiseValueChangedEvent();
    }
   }
  }
 },
 OnReadonlyClick: function() {
  if(!this.previousValue) {   
   var members = this.GetGroupMembers();   
   for(var i = 0; i < members.length; i++) {
    var radioButton = members[i];
    radioButton.SetValue(radioButton.GetValue());
   }
  }
 },
 GetGroupName: function() {
  if(!this.isNative)
   return this.groupName;
  var inputElement = this.GetInputElement();
  if (!_aspxIsExistsElement(inputElement))
   return null;
  var name = inputElement.name;
  if(!name.length)
   name = "";
  return name;
 },
 GetGroupMembers: function() {
  var result = [ ];
  var groupName = this.GetGroupName();
  if(groupName.length > 0) {
   aspxGetControlCollection().ForEachControl(function(control) {
    if(ASPxIdent.IsASPxClientRadioButton(control)) {
     var controlGroupName = control.GetGroupName();
     if (controlGroupName != null && controlGroupName == groupName)
      result.push(control);
    }
   });
  } else {
   result.push(this);
  }
  return result;  
 },
 GetChecked: function() {
  return this.GetValue() == true;
 },
 SetChecked: function(isChecked) {
  this.SetValue(isChecked);
 }
});
ASPxClientRadioButton.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientCheckEdit = function(obj) {
 return !!obj.isASPxClientCheckEdit;
};
ASPxIdent.IsASPxClientRadioButton = function(obj) {
 return !!obj.isASPxClientRadioButton;
};
ASPxIdent.IsASPxClientCheckBox = function(obj) {
 return ASPxIdent.IsASPxClientCheckEdit(obj) && !ASPxIdent.IsASPxClientRadioButton(obj);
};
function aspxChkOnClick(name) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit)
  edit.OnClick();
}
function aspxERBOnReadonlyClick(name) {
 var rb = aspxGetControlCollection().Get(name);
 if(rb)
  rb.OnReadonlyClick();
}

_aspxMaskPartBase = _aspxCreateClass(null, {
 typeCode: 1,
 constructor: function() {
  this.valueInitialized = false;
  this.dateTimeRole = null;
 },
 Grow: function(text) {
  throw "Not supported";
 },
 GetSize: function() {
  throw "Not supported";
 },
 GetValue: function() {
  this.EnsureValueInitialized();
  return this.GetValueCore();
 },
 EnsureValueInitialized: function() {
  if(this.valueInitialized) return;
  this.InitValue();
  this.valueInitialized = true;
 },
 InitValue: function() {
  throw "Not supported";
 }, 
 GetValueCore: function() {
  throw "Not supported";
 },
 Clear: function(startPos, endPos) {
 },
 HandleKey: function(maskInfo, keyInfo, pos) {
  throw "Not supported";
 },
 HandleControlKey: function(maskInfo, keyInfo, pos) {   
  switch(keyInfo.keyCode) {
   case ASPxKey.Left:
    if(keyInfo.ctrlState)
     maskInfo.MoveToPrevNonLiteral();
    else
     maskInfo.IncCaretPos(-1);
    break;
   case ASPxKey.Right:
    if(keyInfo.ctrlState)
     maskInfo.MoveToNextNonLiteral();
    else
     maskInfo.IncCaretPos(1);
    break;
  }
 },
 HandleMouseWheel: function(maskInfo, delta, pos) {
 },
 AllowIncreaseSize: function() { 
  return false; 
 },
 SupportsUpDown: function() { 
  return false; 
 },
 IsValid: function() {
  return true;
 },
 GetHintHtml: function() {
  return "";
 }
}); 
_aspxLiteralMaskPart = _aspxCreateClass(_aspxMaskPartBase, {
 typeCode: 2,
 constructor: function() {
  this.constructor.prototype.constructor.call(this);  
  this.literal = "";
 },
 Grow: function(text) {
  this.literal += text;
 }, 
 GetSize: function() {
  return this.literal.length;
 },
 InitValue: function() {
 }, 
 GetValueCore: function() {
  return this.literal;
 },
 HandleKey: function(maskInfo, keyInfo, pos) {
  if(keyInfo.keyCode == 32){
   maskInfo.IncCaretPos();
   return true;
  }
  var ch = String.fromCharCode(keyInfo.keyCode).toLowerCase();
  var index = this.GetValue().toLowerCase().indexOf(ch, pos);
  if(index > -1){
   maskInfo.IncCaretPos(index - pos + 1);
   return true;
  }
  maskInfo.IncCaretPos();
  return false;
 },
 HandleControlKey: function(maskInfo, keyInfo, pos) {
  switch(keyInfo.keyCode) {
   case ASPxKey.Right:
   case ASPxKey.Delete:
    maskInfo.IncCaretPos(this.GetSize() - pos);
    break;
   case ASPxKey.Left:    
   case ASPxKey.Backspace:
    maskInfo.IncCaretPos(-pos);
    break;
   default:
    _aspxMaskPartBase.prototype.HandleControlKey.call(this, maskInfo, keyInfo, pos);
  }
 }
}); 
_aspxEnumMaskPart = _aspxCreateClass(_aspxMaskPartBase, {
 typeCode: 3,
 constructor: function(items) {
  this.constructor.prototype.constructor.call(this);
  this.items = [];
  this.itemIndex = 0;
  this.defaultItemIndex = 0;
  this.PrepareItems(items);
 },
 PrepareItems: function(items){ 
  var hash = {};
  for(var i = 0; i < items.length; i++){
   var item = String(items[i]);
   if(item.length > 0 && !_aspxIsExists(hash[item])){
    if(item.charAt(0) == "*"){
     this.defaultItemIndex = i;
     item = item.substr(1);
    }
    this.items.push(item);
    hash[item] = 1;
   } 
  }
 },
 GetSize: function() {
  return this.GetValue().length;
 },
 InitValue: function() {  
  this.itemIndex = this.defaultItemIndex;
 }, 
 GetValueCore: function() {
  return this.items[this.itemIndex];
 },
 Clear: function(startPos, endPos) {
  this.ClearInternal(startPos);
 },
 ClearInternal: function(pos) {
  var prefix = this.GetValue().substr(0, pos);
  if(prefix.length < 1) {
   this.itemIndex = this.defaultItemIndex;
  } else {
   this.itemIndex = this.FindItemIndexByPrefix(prefix);
  }
 },
 HandleKey: function(maskInfo, keyInfo, pos) {
  var ch = String.fromCharCode(keyInfo.keyCode);
  var prefix = this.GetValue().substr(0, pos) + ch;
  var index = this.FindItemIndexByPrefix(prefix);
  if(index < 0 && ch != " ") {
   maskInfo.SetCaret(maskInfo.caretPos, this.GetSize() - pos);
   return false;
  }
  if(index > -1)
   this.itemIndex = index;
  maskInfo.SetCaret(1 + maskInfo.caretPos, this.GetSize() - pos - 1);
  return true;
 },
 HandleControlKey: function(maskInfo, keyInfo, pos) {
  switch(keyInfo.keyCode) {
   case ASPxKey.Up:
    this.ChangeItemIndex(maskInfo, this.dateTimeRole != null ? 1 : -1, pos);
    break;
   case ASPxKey.Down:
    this.ChangeItemIndex(maskInfo, this.dateTimeRole != null ? -1 : 1, pos);
    break;    
   case ASPxKey.Backspace:
    if(keyInfo.ctrlState){
     this.itemIndex = this.defaultItemIndex;
     maskInfo.IncCaretPos(-pos);
    }
    else {
     this.ClearInternal(pos - 1);
     maskInfo.SetCaret(maskInfo.caretPos - 1, 0);
    }
    break;
   case ASPxKey.Delete:
    if(keyInfo.ctrlState){
     this.itemIndex = this.defaultItemIndex;
     maskInfo.IncCaretPos(this.GetSize() - pos);
    }
    else {
     this.ClearInternal(pos);
     maskInfo.SetCaret(maskInfo.caretPos + 1, 0);
    }
    break;    
   default:
    _aspxMaskPartBase.prototype.HandleControlKey.call(this, maskInfo, keyInfo, pos);
  }
 },
 HandleMouseWheel: function(maskInfo, delta, pos) {
  if(this.dateTimeRole == null)
   delta = -delta;
  this.ChangeItemIndex(maskInfo, delta, pos);
 },
 ChangeItemIndex: function(maskInfo, delta, pos) {
  this.itemIndex += delta;
  while(this.itemIndex < 0)
   this.itemIndex += this.items.length;
  while(this.itemIndex > this.items.length - 1)
   this.itemIndex -= this.items.length;
  maskInfo.SetCaret(maskInfo.caretPos - pos, this.GetSize());
 },
 FindItemIndexByPrefix: function(prefix) {  
  prefix = prefix.toLowerCase();
  for(var i = 0; i < this.items.length; i++) {
   var item = this.items[i];
   if(item.toLowerCase().indexOf(prefix) == 0)
    return i;
  }
  return -1;
 },
 SupportsUpDown: function() { 
  return true; 
 },
 GetHintHtml: function() {
  if(this.dateTimeRole != null)
   return "";
  var list = [];
  for(var i = 0; i < this.items.length; i++) {
   var text = this.items[i];
   if(i == this.itemIndex)
    text = "<strong>" + text + "</strong>";
   list.push(text);
  }
  return list.join(", ");
 }
});
_aspxRangeMaskPart = _aspxCreateClass(_aspxMaskPartBase, {
 typeCode: 4,
 constructor: function(minNumber, maxNumber) {
  this.constructor.prototype.constructor.call(this);  
  if(maxNumber < minNumber)
   maxNumber = minNumber;  
  this.minNumber = minNumber;
  this.maxNumber = maxNumber;
  this.defaultNumber = null;
  this.zeroFill = false;
  this.absNumber = 0;
  this.negative = false;
  this.enableGroups = false;
 },
 GetSize: function() {
  return this.GetValue().length;
 },
 InitValue: function() {
  var number = 0;
  if(this.defaultNumber != null)
   number = this.defaultNumber;
  else {
   if(this.maxNumber < 0)
    number = this.maxNumber;
   else if(this.minNumber < 0)
    number = 0;
   else
    number = this.minNumber;
  }
  this.SetNumber(number);
 }, 
 GetValueCore: function() {
  var value = String(this.absNumber);  
  if(this.zeroFill) {
   var size = Math.max(this.minNumber.toString().length, this.maxNumber.toString().length);
   var incSize = size - value.length;
   for(var i = 0; i < incSize; i++)
    value = "0" + value;
  }
  if(this.enableGroups)
   value = this.AddGroupSeparators(value);
  if(this.negative)
   value = "-" + value;
  return value;
 },
 AddGroupSeparators: function(text) {
  if(text.length < 4)
   return text;
  var temp = [ ];
  var count = Math.ceil(text.length / 3);
  for(var i = 1; i < count; i++)
   temp.unshift(text.substr(text.length - i * 3, 3));
  temp.unshift(text.substr(0, text.length % 3 || 3));
  return temp.join(__aspxCultureInfo.numGroupSeparator);
 },
 IsGroupSeparatorPos: function(pos) {
  if(!this.enableGroups)
   return false;
  var reversePos = this.GetSize() - pos;
  return reversePos > 0 && reversePos % 4 == 0;
 }, 
 GetNumber: function() {
  var result = this.absNumber;
  if(this.negative)
   result = -result;
  return result;
 },
 SetNumber: function(number) {
  this.negative = (number < 0);
  this.absNumber = Math.abs(number);
 },
 TextToNumber: function(text) {
  if(text == "" || text == "-")
   return 0;  
  if(this.enableGroups)
   text = text.split(__aspxCultureInfo.numGroupSeparator).join("");
  return Number(text);
 },
 SetText: function(text, checkMinNumber) {
  checkMinNumber = checkMinNumber || Math.abs(this.minNumber) < 2;
  var number = this.TextToNumber(text);
  if(number > this.maxNumber) {
   this.SetNumber(this.maxNumber);
  } else if(checkMinNumber && number < this.minNumber) {
   this.SetNumber(this.minNumber);
  } else {
   this.absNumber = Math.abs(number);
   this.negative = (text.indexOf("-") > -1);
  }  
 },
 Clear: function(startPos, endPos){
  var newText = _aspxInsertEx(this.GetValue(), "", startPos, endPos);
  if(newText.length < 1 && this.defaultNumber !== null)
   this.SetNumber(this.defaultNumber);
  else
   this.SetText(newText, true);
 },
 HandleKey: function(maskInfo, keyInfo, pos) { 
  var keyCode = keyInfo.keyCode;    
  var ch = String.fromCharCode(keyCode);
  if((ch == __aspxCultureInfo.numGroupSeparator && this.IsGroupSeparatorPos(pos)
   || keyCode == 32) && pos < this.GetSize()) {
   maskInfo.IncCaretPos();
   return true;
  }
  var oldNumber = this.GetNumber();
  if(_aspxMaskManager.IsSignumCode(keyCode)) {
   if((ch == "-" && this.minNumber < 0)  || (ch == "+" && oldNumber < 0)) {      
    var newNumber = -oldNumber;
    if(this.CheckRange(newNumber)) {
     this.negative = !this.negative;
     maskInfo.SetCaret(maskInfo.caretPos - pos + (this.negative ? 1 : 0), 0);
     return true;
    }
   }
  }
  if(_aspxMaskManager.IsDigitCode(keyCode)) {
   if(!this.zeroFill && ch == "0" && oldNumber == 0 && pos > this.GetSize() - 1)
    return false;
   this.TryTypeAtPos(maskInfo, ch, pos, 1);
   return true;
  }
  return false;
 },
 HandleControlKey: function(maskInfo, keyInfo, pos) {
  switch(keyInfo.keyCode) {
   case ASPxKey.Up:    
    this.ChangeNumber(maskInfo, 1, pos);
    break;
   case ASPxKey.Down:
    this.ChangeNumber(maskInfo, -1, pos);
    break;
   case ASPxKey.Delete:
    if(keyInfo.ctrlState) {    
     var newText = this.GetValue().substr(0, pos);
     this.SetText(newText, false);
     maskInfo.IncCaretPos(this.GetSize() - pos);
    } else {        
     if(this.IsGroupSeparatorPos(pos)) {
      maskInfo.IncCaretPos();
     } else {        
      if(this.zeroFill)
       this.TryTypeAtPos(maskInfo, "0", pos, 1);
      else
       this.TryTypeAtPos(maskInfo, "", pos, 1);
    }
    }
    break;
   case ASPxKey.Backspace:
    if(keyInfo.ctrlState) {    
     var newText = this.GetValue().substr(pos);
     this.SetText(newText, false);
     maskInfo.IncCaretPos(-pos);
    } else {       
     if(this.IsGroupSeparatorPos(pos - 1)) {
      maskInfo.IncCaretPos(-1);
     } else {
      if(this.zeroFill)
       this.TryTypeAtPos(maskInfo, "0", pos, -1);
      else
       this.TryTypeAtPos(maskInfo, "", pos, -1);
     }
    }
    break;
   default:
    _aspxMaskPartBase.prototype.HandleControlKey.call(this, maskInfo, keyInfo, pos);
  }
 },
 HandleMouseWheel: function(maskInfo, delta, pos) {
  this.ChangeNumber(maskInfo, delta, pos);
 },
 ChangeNumber: function(maskInfo, delta, pos) {
  var number = this.GetNumber();
  if(number < this.minNumber)
   number = this.minNumber;
  var newNumber = number + delta;
  while(newNumber < this.minNumber)
   newNumber += 1 + this.maxNumber - this.minNumber;
  while(newNumber > this.maxNumber)
   newNumber -= 1 + this.maxNumber - this.minNumber;
  this.SetNumber(newNumber);
  maskInfo.SetCaret(maskInfo.caretPos - pos, this.GetSize()); 
 },
 CheckRange: function(number){
  return (this.minNumber <= number && number <= this.maxNumber);
 },
 TryTypeAtPos: function(maskInfo, str, pos, dir) {
  if(dir > 0 && this.IsGroupSeparatorPos(pos)) {
   pos++;
   maskInfo.IncCaretPos();
  }
  var oldSize = this.GetSize();
  var strPos = pos;
  if(dir < 0) strPos -= 1;
  var newText = _aspxInsertEx(this.GetValue(), str, strPos, strPos + 1);
  if(this.dateTimeRole && dir > 0 && pos == 0 && /\d/.test(str) && !this.CheckRange(this.TextToNumber(newText))) {
   var number = Number(str);
   if(this.negative)
    number = -number;
   if(this.CheckRange(number) && this.IsMaxMagnitude(number)) {
    this.SetNumber(number);
    maskInfo.IncCaretPos(this.GetSize() - pos);
    return; 
   }    
  }
  var newPos;
  this.SetText(newText, false);
  if(dir > 0 && oldSize == pos) {
   newPos = this.GetSize();
  } else  {      
   var diff = 0;
   if(!this.zeroFill) {
    diff = this.GetSize() - oldSize;
    if(dir < 0) diff += 1;
    if(diff > 0) diff = 0;
   }
   newPos = pos + dir + diff;
  }
  if(newPos < 0) newPos = 0;  
  if(newPos > this.GetSize()) newPos = this.GetSize();
  if(this.IsGroupSeparatorPos(newPos))
   newPos++;
  maskInfo.IncCaretPos(newPos - pos);
 }, 
 IsMaxMagnitude: function(number) {
  if(number < 0)
   return number * 10 < this.minNumber;
  return number * 10 > this.maxNumber;
 },
 AllowIncreaseSize: function() {
  return !this.zeroFill && !this.IsMaxMagnitude(this.GetNumber());
 },
 SupportsUpDown: function() { 
  return true; 
 },
 GetHintHtml: function() {
  if(this.dateTimeRole != null)
   return ""; 
  return this.minNumber + ".." + this.maxNumber;
 }
}); 
_aspxPromptMaskPart = _aspxCreateClass(_aspxMaskPartBase, {
 typeCode: 5,
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.required = false;
  this.size = 0;
  this.text = "";
 },
 Grow: function(text) {
  this.size += text.length;
 }, 
 GetSize: function() {
  return this.size;
 },
 InitValue: function() {  
  var size = this.GetSize();
  for(var i = 0; i < size; i++)
   this.text += " ";
 }, 
 GetValueCore: function() {
  return this.text;
 },
 Clear: function(startPos, endPos){
  this.ClearInternal(startPos, endPos - startPos);
 },
 ClearInternal: function(pos, count){
  for(var  i = 0; i < count; i++)
   this.SetCharInPos(" ", i + pos);         
 },
 HandleKey: function(maskInfo, keyInfo, pos) {
  var keyCode = keyInfo.keyCode;  
  if(maskInfo.IsPromptCode(keyCode))
   keyCode = 32;
  if(keyCode != 32 && !this.IsValidCharCode(keyCode, pos))
   return false;
  this.SetCharInPos(String.fromCharCode(keyCode), pos);
  maskInfo.IncCaretPos();
  return true;
 },
 HandleControlKey: function(maskInfo, keyInfo, pos) {
  switch(keyInfo.keyCode) {
   case ASPxKey.Delete:
    var count = keyInfo.ctrlState ? this.GetSize() - pos : 1;
    this.ClearInternal(pos, count);
    maskInfo.IncCaretPos(count);
    break; 
   case ASPxKey.Backspace:
    var count = keyInfo.ctrlState ? pos : 1;
    this.ClearInternal(pos - count, count);
    maskInfo.IncCaretPos(-count);
    break;
   default:
    _aspxMaskPartBase.prototype.HandleControlKey.call(this, maskInfo, keyInfo, pos);
  }
 }, 
 SetCharInPos: function(ch, pos) {
  this.text = _aspxInsertEx(this.GetValue(), ch, pos, pos + 1);
 }, 
 IsValidCharCode: function(code, pos) {
  throw "Not supported";
 },
 IsValid: function() {
  if(!this.required)
   return true;
  return this.GetValue().indexOf(" ") < 0;
 }
});
_aspxNumericMaskPart = _aspxCreateClass(_aspxPromptMaskPart, {
 typeCode: 6,
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.acceptsSignum = false;
 },
 IsValidCharCode: function(code, pos) {
  if(_aspxMaskManager.IsSignumCode(code)) {
   if(!this.acceptsSignum) return false;
   var value = this.GetValue();
   for(var i = 0; i < pos; i++){
    var currentCode = value.charCodeAt(i);
    if(_aspxMaskManager.IsDigitCode(currentCode) || _aspxMaskManager.IsSignumCode(currentCode))
     return false;
   }
   return true;
  }
  return _aspxMaskManager.IsDigitCode(code);
 } 
});
_aspxCharMaskPart = _aspxCreateClass(_aspxPromptMaskPart, {
 typeCode: 7,
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.caseConvention = 0;
 },
 SetCharInPos: function(ch, pos) {
  if(this.caseConvention < 0)
   ch = ch.toLowerCase();
  if(this.caseConvention > 0)
   ch = ch.toUpperCase();   
  _aspxPromptMaskPart.prototype.SetCharInPos.call(this, ch, pos);
 }, 
 IsValidCharCode: function(code, pos) {
  return code > 31;
 }
});
_aspxAlphaMaskPart = _aspxCreateClass(_aspxCharMaskPart, {
 typeCode: 8,
 IsValidCharCode: function(code, pos) {
  return _aspxMaskManager.IsAlphaCode(code);
 }
}); 
_aspxAlphaNumericMaskPart = _aspxCreateClass(_aspxCharMaskPart, {
 typeCode: 9,
 IsValidCharCode: function(code, pos) {
  return _aspxMaskManager.IsAlphaCode(code) || _aspxMaskManager.IsDigitCode(code);
 } 
}); 
_aspxMaskParser = {
 Parse: function(mask, dateTimeOnly) {
  this.result = [ ];
  this.currentCaseConvention = 0;  
  this.quoteMode = null;
  this.dateTimeOnly = (dateTimeOnly === true);
  mask.replace(this.GetMasterRegex(), this.ParseCallback);
  return this.result;
 },
 regex: {    
  ranges: "\\<-?\\d+(\\.\\.-?\\d+){1,2}g?\\>",
  enums: "\\<\\*?[^|*<>]*(\\|\\*?[^|*<>]*)+\\>",
  prompts: "[LlAaCc09#,.:/$<>~]",
  dates: "(y{1,4}|M{1,4}|d{1,4}|hh?|HH?|mm?|ss?|F{1,6}|f{1,6}|tt?)"
 }, 
 GetMasterRegex: function() {
  if(this.dateTimeOnly) {
   if(!this.__masterDateTimeOnlyRegex)
    this.__masterDateTimeOnlyRegex = this.CreateMasterRegex(true);
   return this.__masterDateTimeOnlyRegex;      
  }
  if(!this.__masterRegex)
   this.__masterRegex = this.CreateMasterRegex(false);
  return this.__masterRegex;
 }, 
 GetRangesRegex: function() {
  if(!this.__rangesRegex) 
   this.__rangesRegex = this.CreateAnchoredRegex(this.regex.ranges);
  return this.__rangesRegex;
 },
 GetEnumsRegex: function() {
  if(!this.__enumsRegex) 
   this.__enumsRegex = this.CreateAnchoredRegex(this.regex.enums);
  return this.__enumsRegex;
 },
 GetDatesRegex: function() {
  if(!this.__datesRegex)
   this.__datesRegex = this.CreateAnchoredRegex(this.regex.dates);
  return this.__datesRegex;
 },
 CreateAnchoredRegex: function(text) {
  return new RegExp("^" + text + "$");
 },
 CreateMasterRegex: function(dateTimeOnly) {
  var list = [ ];
  this.PushConditional(list, "\\\\\\\\", true);
  this.PushConditional(list, "\\\\[\"']", true);
  this.PushConditional(list, "[\"']", true);
  this.PushConditional(list, this.regex.ranges, !dateTimeOnly);
  this.PushConditional(list, this.regex.enums, !dateTimeOnly);
  this.PushConditional(list, "\\\\" + this.regex.dates, true);
  this.PushConditional(list, "\\\\" + this.regex.prompts, !dateTimeOnly);
  this.PushConditional(list, this.regex.dates, true);
  this.PushConditional(list, this.regex.prompts, !dateTimeOnly);
  this.PushConditional(list, ".", true);
  return new RegExp("(" + list.join("|") + ")", "g");
 },
 PushConditional: function(list, item, allow) {
  if(allow)
   list.push(item); 
 },
 ParseCallback: function(text) {  
  _aspxMaskParser.ParseCore(text, null);
 },
 ParseCore: function(text, dateTimeRole) {
  var acceptRangesEnums = (dateTimeRole != null || !this.dateTimeOnly);
  if(text == "'" || text == '"')
   this.ParseQuote(text);
  else if(this.quoteMode != null)
   this.ParseLiteral(text);
  else if(acceptRangesEnums && this.GetRangesRegex().test(text)) 
   this.ParseRange(text, dateTimeRole);
  else if(acceptRangesEnums && this.GetEnumsRegex().test(text)) 
   this.ParseEnum(text, dateTimeRole);
  else if(this.GetDatesRegex().test(text))
   this.ParseDate(text);
  else
   this.ParseSimple(text);
 },
 ParseRange: function(text, dateTimeRole) {  
  var enableGroups = false;
  text = this.StripBrockets(text);
  if(text.charAt(text.length - 1) == "g") {
   enableGroups = true;
   text = text.substr(0, text.length - 1);
  }
  var data = text.split("..");
  var minNumber, maxNumber = 0;
  var defaultNumber = null;
  if(data.length == 2){
   minNumber = Number(data[0]);
   maxNumber = Number(data[1]);
  }
  else if(data.length == 3){
   minNumber = Number(data[0]);
   maxNumber = Number(data[2]);
   defaultNumber = Number(data[1]);
  }
  var part = new _aspxRangeMaskPart(minNumber, maxNumber);
  part.defaultNumber = defaultNumber;
  part.zeroFill = (data[0] == "00") || (data[0].length > 1 && data[0].charAt(0) == "0");
  part.dateTimeRole = dateTimeRole;
  part.enableGroups = enableGroups;
  this.result.push(part);
 },
 ParseEnum: function(text, dateTimeRole) {
  text = this.StripBrockets(text);
  var part = new _aspxEnumMaskPart(text.split("|"));
  part.dateTimeRole = dateTimeRole;
  this.result.push(part);
 },
 StripBrockets: function(text) {
  return text.substr(1, text.length - 2);
 },   
 ParseSimple: function(text) {  
  switch(text) {
   case ":":
    this.ParseLiteral(__aspxCultureInfo.ts);
    break;
   case "/":
    this.ParseLiteral(__aspxCultureInfo.ds);
    break;
   default:
    if(this.dateTimeOnly) {
     this.ParseLiteral(text);     
    } else {
     switch(text) {
      case "L":
      case "l":
       this.ParseChar(text, _aspxAlphaMaskPart, text == "L");
       break;
      case "A":
      case "a":
       this.ParseChar(text, _aspxAlphaNumericMaskPart, text == "A");   
       break;
      case "C":
      case "c":
       this.ParseChar(text, _aspxCharMaskPart, text == "C");
       break;
      case ">":
        this.currentCaseConvention = 1;
        break;       
      case "<":
        this.currentCaseConvention = -1;
        break;      
      case "~":
        this.currentCaseConvention = 0;
        break;       
      case "0":
      case "9":
      case "#":
       this.ParseNumeric(text);   
       break;
      case ".":
       this.ParseLiteral(__aspxCultureInfo.numDecimalPoint);
       break;
      case ",":
       this.ParseLiteral(__aspxCultureInfo.numGroupSeparator);
       break;
      case "$":
       this.ParseLiteral(__aspxCultureInfo.currency);
       break;
      default:
       this.ParseLiteral(text);
       break;                       
     }
    }    
    break;
  }
 },
 ParseChar: function(text, ctor, required) {
  var part = this.GetCurrentPart();
  if(part == null || part.typeCode != ctor.prototype.typeCode || part.required != required || part.caseConvention != this.currentCaseConvention) {
   part = new ctor();
   part.required = required;
   part.caseConvention = this.currentCaseConvention;
   this.result.push(part);
  }
  part.Grow(text);
 },
 ParseNumeric: function(text) {
  var required = text == "0";
  var acceptsSignum = text == "#";
  var part = this.GetCurrentPart();
  if(part == null || part.typeCode != _aspxNumericMaskPart.prototype.typeCode || part.required != required || part.acceptsSignum != acceptsSignum) {
   part = new _aspxNumericMaskPart();
   part.required = required;
   part.acceptsSignum = acceptsSignum;
   this.result.push(part);
  }
  part.Grow(text);
 },
 ParseLiteral: function(text) {
  var part = this.GetCurrentPart();
  if(part == null || part.typeCode != _aspxLiteralMaskPart.prototype.typeCode) {
   part = new _aspxLiteralMaskPart();
   this.result.push(part);
  }
  if(text.length > 0 && text.charAt(0) == "\\")
   text = text.substr(1);
  part.Grow(text);
 },
 GetCurrentPart: function() {
  var len = this.result.length;
  if(len < 1)
   return null;
  return this.result[len - 1];
 },
 ParseDate: function(text) {
  this.ParseCore(this.GetDateSpecifierReplacement(text), this.GetDateTimeRole(text));
 },
 GetDateSpecifierReplacement: function(text) {
  switch(text) {
   case "yyyy":    
    return "<0100..9999>"; 
   case "yyy":    
    return "<100..9999>"; 
   case "yy":    
    return "<00..99>";
   case "y":    
    return "<0..99>";
   case "MMMM":    
    return "<" + __aspxCultureInfo.genMonthNames.join("|") + ">";
   case "MMM":    
    return "<" + __aspxCultureInfo.abbrMonthNames.join("|") + ">";
   case "MM":    
    return "<01..12>";
   case "M":    
    return "<1..12>";
   case "dddd":
    return "<" + __aspxCultureInfo.dayNames.join("|") + ">";
   case "ddd":
    return "<" + __aspxCultureInfo.abbrDayNames.join("|") + ">";
   case "dd":    
    return "<01..31>";
   case "d":    
    return "<1..31>";
   case "hh":
    return "<01..12..12>";
   case "h":
    return "<1..12..12>";
   case "HH":
    return "<00..23>";
   case "H":
    return "<0..23>";
   case "mm":
    return "<00..59>";
   case "m":
    return "<0..59>";
   case "ss":
    return "<00..59>";
   case "s":
    return "<0..59>";
   case "tt":
   case "t":
    if(__aspxCultureInfo.am.length < 1)
     return "";
    return "<" + this.GetAmPmArray(text.length < 2).join("|") + ">";
  }
  if(/^f{1,6}$/i.test(text)) {
   if(text.length == 1)
    return "<0..9>";
   if(text.length == 2)
    return "<0..99>";    
   return "<0..999>";
  }
  throw "Not supported";
 },  
 GetDateTimeRole: function(text) {
  var ch = text.charAt(0);
  if(ch == "y" || ch == "M" || ch =="d"
   || ch.toLowerCase() == "h" || ch == "m" || ch == "s" 
   || ch.toLowerCase() == "f" || ch == "t")
   return ch;
  return null;
 },
 GetAmPmArray: function(useFirstChar){
  var result = [ __aspxCultureInfo.am, __aspxCultureInfo.pm ];
  if(useFirstChar) {
   for(var i = 0; i < result.length; i++)
    result[i] = result[i].charAt(0);   
  }
  return result;
 },
 ParseQuote: function(text) {  
  if(this.quoteMode == null) {
   this.quoteMode = text;
  } else {
   if(text == this.quoteMode)
    this.quoteMode = null;
   else
    this.ParseLiteral(text);
  }
 }
};
_aspxMaskIncludeLiterals = {
 All: 1,
 None: 2,
 DecimalSymbol: 3 
};
_aspxMaskInfo = _aspxCreateClass(null, { 
 constructor: function() {   
  this.parts = null;
  this.allowMouseWheel = true;
  this.promptChar = "_";  
  this.includeLiterals = _aspxMaskIncludeLiterals.All;  
  this.errorText = "";
  this.caretPos = 0;
  this.selectionLength = 0; 
  this.lastEditedPart = null;
 },
 GetSize: function() { 
  var size = 0;
  for(var i = 0; i < this.parts.length; i++)
   size += this.parts[i].GetSize();
  return size;
 },
 GetText: function() {
  var result = "";
  for(var i = 0; i < this.parts.length; i++) {
   var part = this.parts[i];
   if(_aspxMaskManager.IsLiteralPart(part) || _aspxMaskManager.IsEnumPart(part))
    result += part.GetValue();
   else
    result += part.GetValue().split(" ").join(this.promptChar);
  }
  return result;
 },
 GetValue: function() {
  var list = [];
  for(var i = 0; i < this.parts.length; i++) {
   var part = this.parts[i];
   var partValue = part.GetValue();
   if(_aspxMaskManager.IsLiteralPart(part) && _aspxMaskManager.IsIgnorableLiteral(partValue, this.includeLiterals))
     continue;
   if(_aspxMaskManager.IsRangePart(part) && this.includeLiterals != _aspxMaskIncludeLiterals.All)
    partValue = partValue.split(__aspxCultureInfo.numGroupSeparator).join("");
   list.push(partValue);
  }  
  return _aspxTrimEnd(list.join(""));
 },
 SetText: function(text) {
  this.Clear();
  this.SetCaret(0, 0);
  this.SetValueCore(text, _aspxMaskIncludeLiterals.All);
  this.SetCaret(0, 0);
 },
 SetValue: function(value) {
  this.Clear();
  this.SetCaret(0, 0);
  this.SetValueCore(value, this.includeLiterals);
  this.SetCaret(0, 0);
 },
 SetValueCore: function(value, includeLiterals) {
  for(var i = 0; i < value.length; i++) {
   var keyInfo = _aspxMaskManager.CreateKeyInfo(value.charCodeAt(i), false, false);
   _aspxMaskManager.HandleKey(this, keyInfo, false, includeLiterals);
  }
 },
 Clear: function() {
  for(var i = 0; i < this.parts.length; i++) {
   var part = this.parts[i];
   part.Clear(0, part.GetSize());
  }
 },
 ProcessPaste: function(rawText, caretPosAfterPaste) {
  var currentText = this.GetText();
  if (caretPosAfterPaste === rawText.length) { 
   this.Clear();
   this.SetCaret(0, 0);
   this.SetValueCore(rawText, this.includeLiterals);
  } else {
   var leadLength = 0;
   for (var i = 0; i < Math.min(rawText.length, currentText.length); i++) {
    if (rawText.charAt(i) != currentText.charAt(i))
     break;
    leadLength++;
   }
   var pastedText = rawText.substr(leadLength, caretPosAfterPaste - leadLength);
   this.SetCaret(caretPosAfterPaste - pastedText.length, 0);
   var padLength = 0;
   for (var i = pastedText.length + rawText.length; i < currentText.length; i++) {
    pastedText += " ";
    padLength++;
   }
   this.SetValueCore(pastedText, _aspxMaskIncludeLiterals.All);
   this.caretPos -= padLength;
  }
 },
 IsValid: function() {
  for(var i = 0; i < this.parts.length; i++) {
   if(!this.parts[i].IsValid())
    return false;
  }
  return true;
 },
 SetCaret: function(caretPos, selectionLength) {
  if(selectionLength < 0) throw "Internal Error";
  this.caretPos = caretPos;
  this.selectionLength = selectionLength;
 },
 IncCaretPos: function(delta) {
  if(!_aspxIsExists(delta))
   delta = 1;
  this.caretPos += delta;
  this.selectionLength = 0;
 },
 MoveToPrevNonLiteral: function() {
  var partPos = 0;
  var resultPos = 0;
  for(var i = 0; i < this.parts.length; i++) {
   if(partPos >= this.caretPos)
    break;
   var part = this.parts[i];
   var nextPartPos = partPos + part.GetSize();
   if(!_aspxMaskManager.IsLiteralPart(part))
    resultPos = nextPartPos < this.caretPos ? nextPartPos : partPos;
   partPos = nextPartPos;
  }
  this.SetCaret(resultPos, 0);
 },  
 MoveToNextNonLiteral: function() {
  var partPos = 0;
  for(var i = 0; i < this.parts.length; i++) {
   var part = this.parts[i];
   var nextPartPos = partPos + part.GetSize();   
   if(nextPartPos > this.caretPos && !_aspxMaskManager.IsLiteralPart(part)) {
    if(partPos <= this.caretPos)
     partPos = nextPartPos;
    break;
   }
   partPos = nextPartPos;
  }
  this.SetCaret(partPos, 0);
 }, 
 IsPromptCode: function(code) {
  return (code == 32 || code == this.promptChar.charCodeAt(0));
 },
 BeforeChange: function(part) {
  this.ApplyFixes(part);
  this.lastEditedPart = part;
  part.EnsureValueInitialized();
 },
 AfterChange: function(part) {
 },
 ApplyFixes: function(currentPart) {
  var result1 = this.FixLastRangePart(currentPart);
  var result2 = this.FixLastDatePart(currentPart);
  return result1 || result2;
 },
 FixLastRangePart: function(currentPart) {  
  var part = this.lastEditedPart;
  if(!part || part == currentPart || !_aspxMaskManager.IsRangePart(part))
   return false;
  var number = part.GetNumber();
  if(number >= part.minNumber) 
   return false;
  var prevSize = part.GetSize();
  part.SetNumber(part.minNumber);
  this.SetCaret(this.caretPos + part.GetSize() - prevSize, 0);
  return true;
 },
 FixLastDatePart: function(currentPart) {
  var part = this.lastEditedPart;
  if(!part || part == currentPart || part.dateTimeRole == null)
   return false;
  var bag = _aspxMaskDateTimeHelper.GetDateBag(this);
  if(!bag.hasDate)
   return false;
  var maxDay = _aspxMaskDateTimeHelper.GetMaxDayInMonth(bag.month, bag.year);
  if(bag.day > maxDay) {   
   if(bag.day == 29 && bag.month == 1) {
    bag.year = _aspxMaskDateTimeHelper.GetNextLeapYear(bag.year);
   } else {
    if(part.dateTimeRole == "d")
     bag.month--;
    else
     bag.day = maxDay;
   }   
  }
  var prefixSize = this.GetSizeBeforeEditedPart(currentPart);
  _aspxMaskDateTimeHelper.SetDate(this, _aspxMaskDateTimeHelper.CreateDateFromBag(bag, true));
  this.caretPos += this.GetSizeBeforeEditedPart(currentPart) - prefixSize;
  return true;
 },
 GetSizeBeforeEditedPart: function(currentPart) {
  var pos = 0;
  for(var i = 0; i < this.parts.length; i++) {
   if(this.parts[i] == currentPart)
    break;
   pos += this.parts[i].GetSize();
  }
  return pos;
 } 
});
_aspxMaskInfo.Create = function(maskText, dateTimeOnly) {
 var info = new _aspxMaskInfo();
 info.parts = _aspxMaskParser.Parse(maskText, dateTimeOnly);
 return info;
}
_aspxMaskManager = {
 OnKeyPress: function(maskInfo, keyInfo) {
  if(maskInfo.selectionLength > 0)
   this.ClearSelection(maskInfo);
  this.HandleKey(maskInfo, keyInfo, true, _aspxMaskIncludeLiterals.All);
  this.savedKeyDownKeyInfo = null;
 },
 OnKeyDown: function(maskInfo, keyInfo) {
  if(maskInfo.selectionLength > 0 && (keyInfo.keyCode == ASPxKey.Backspace || keyInfo.keyCode == ASPxKey.Delete))
   this.ClearSelection(maskInfo);
  else
   this.HandleControlKey(maskInfo, keyInfo);
 },
 OnMouseWheel: function(maskInfo, delta) {
  if(maskInfo.allowMouseWheel)
   this.HandleMouseWheel(maskInfo, delta);
 },
 HandleKey: function(maskInfo, keyInfo, autoSkipLiterals, includeLiterals) { 
  var partStart = 0;
  var caretInfoBeforeSkip = null;  
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   if(this.IsCaretInPart(maskInfo.caretPos, partStart, part)) {    
    if(!this.IsLiteralPart(part) || !this.IsIgnorableLiteral(part.GetValue(), includeLiterals)) {
     var savedCaretPos = maskInfo.caretPos;
     maskInfo.BeforeChange(part);
     partStart += maskInfo.caretPos - savedCaretPos;
     if(this.savedKeyDownKeyInfo && this.savedKeyDownKeyInfo.keyCode == ASPxKey.Decimal)
      keyInfo.keyCode = __aspxCultureInfo.numDecimalPoint.charCodeAt(0);
     if(part.HandleKey(maskInfo, keyInfo, maskInfo.caretPos - partStart)) {        
      if(autoSkipLiterals)
       this.TrySkipLiteralOnPartEdge(maskInfo, partStart, i);
      maskInfo.AfterChange(part);
      return;
     }
     if(caretInfoBeforeSkip == null)
      caretInfoBeforeSkip = [ maskInfo.caretPos, maskInfo.selectionLength ];
    }         
    maskInfo.SetCaret(partStart + part.GetSize(), 0);
   }
   partStart += part.GetSize();
  }
  if(caretInfoBeforeSkip != null)
   maskInfo.SetCaret(caretInfoBeforeSkip[0], caretInfoBeforeSkip[1]);
 },
 HandleControlKey: function(maskInfo, keyInfo) {
  maskInfo.selectionLength = 0;
  var partStart = 0;  
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   if(this.IsCaretInPartOnControlKey(maskInfo.caretPos, partStart, part, keyInfo.keyCode)) {
    var savedCaretPos = maskInfo.caretPos;
    maskInfo.BeforeChange(part);
    partStart += maskInfo.caretPos - savedCaretPos;
    part.HandleControlKey(maskInfo, keyInfo, maskInfo.caretPos - partStart);
    if(keyInfo.keyCode == ASPxKey.Delete)
     this.TrySkipLiteralOnPartEdge(maskInfo, partStart, i);
    maskInfo.AfterChange(part);
    break;
   }
   partStart += part.GetSize();
  }
 },
 HandleMouseWheel: function(maskInfo, delta) {
  var partStart = 0;  
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   if(this.IsCaretInPartOnMouseWheel(maskInfo.caretPos, partStart, part)) {
    var savedCaretPos = maskInfo.caretPos;
    maskInfo.BeforeChange(part);
    partStart += maskInfo.caretPos - savedCaretPos;
    part.HandleMouseWheel(maskInfo, delta, maskInfo.caretPos - partStart);
    maskInfo.AfterChange(part);
    break;
   }   
   partStart += part.GetSize();
  }
 },
 TrySkipLiteralOnPartEdge: function(maskInfo, partStartPos, partIndex) {
  var part = maskInfo.parts[partIndex];
  var posInPart = maskInfo.caretPos - partStartPos;
  var amount = 0;
  if(part.AllowIncreaseSize()) return;
  if(partIndex > maskInfo.parts.length - 3 ||  posInPart < part.GetSize()) return;
  var sibling = maskInfo.parts[partIndex + 1];
  if(this.IsLiteralPart(sibling))
   amount = sibling.GetSize();
  maskInfo.IncCaretPos(amount);
  maskInfo.ApplyFixes(sibling);
 },
 ClearSelection: function(maskInfo){  
  var partStart = 0;
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   var outerLeft = Math.min(partStart, maskInfo.caretPos);
   var outerRight = Math.max(partStart + part.GetSize(), maskInfo.caretPos + maskInfo.selectionLength);
   var size = part.GetSize();
   if(size + maskInfo.selectionLength > outerRight - outerLeft){
    var innerLeft = Math.max(partStart, maskInfo.caretPos);
    var innerRight = Math.min(partStart + size, maskInfo.caretPos + maskInfo.selectionLength);    
    part.Clear(innerLeft - partStart, innerRight - partStart);
    maskInfo.selectionLength += part.GetSize() - size;    
   }
   partStart += part.GetSize();
  }
  maskInfo.selectionLength = 0;
 },
 IsCaretInPart: function(caretPos, partStartPos, part) {
  if(caretPos < partStartPos)
   return false;
  var nextPartPos = partStartPos + part.GetSize();
  if(caretPos > nextPartPos)
   return false;
  if(caretPos == nextPartPos)
   return part.AllowIncreaseSize();
  return true;
 },
 IsCaretInPartOnControlKey: function(caretPos, partStartPos, part, keyCode) {
  if(caretPos == partStartPos) {
   if(keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Left)
    return false;
   return true;
  }
  var nextPartPos = partStartPos + part.GetSize();
  if(partStartPos < caretPos && caretPos < nextPartPos) 
   return true;
  if(caretPos == nextPartPos) {
   if(keyCode == ASPxKey.Up || keyCode == ASPxKey.Down)
    return part.SupportsUpDown();
   if(keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Left)
    return true;
   return false;   
  }
  return false;
 },
 IsCaretInPartOnMouseWheel: function(caretPos, partStartPos, part) {
  if(!part.SupportsUpDown()) 
   return false;
  return caretPos >= partStartPos && caretPos <= partStartPos + part.GetSize();
 },
 GetHintHtml: function(maskInfo) {
  var pos = 0;
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   if(this.IsCaretInPartOnMouseWheel(maskInfo.caretPos, pos, part))
    return part.GetHintHtml();
   pos += part.GetSize();
  }
  return "";
 }, 
 CreateKeyInfo: function(keyCode, shiftState, ctrlState) {
  return {
   keyCode: keyCode,
   shiftState: shiftState,
   ctrlState: ctrlState
  }; 
 },
 CreateKeyInfoByEvent: function(evt) {
  return this.CreateKeyInfo(_aspxGetKeyCode(evt), evt.shiftKey, evt.ctrlKey);
 },
 IsLiteralPart: function(part) {
  return (part.typeCode == _aspxLiteralMaskPart.prototype.typeCode);
 }, 
 IsEnumPart: function(part) {
  return (part.typeCode == _aspxEnumMaskPart.prototype.typeCode);
 },
 IsRangePart: function(part) {
  return (part.typeCode == _aspxRangeMaskPart.prototype.typeCode);
 },
 IsAlphaCode: function(code) {  
  return (64 < code && code < 91 || 96 < code && code < 123 || code > 127);
 },
 IsDigitCode: function(code) {  
  return (47 < code && code < 58);
 },
 IsSignumCode: function(code) {  
  return (code == 43 || code == 45);
 },
 CanHandleControlKey: function(keyInfo) {
  if(keyInfo.shiftState)
   return false;
  return keyInfo.keyCode == ASPxKey.Up || keyInfo.keyCode == ASPxKey.Down
   || keyInfo.keyCode == ASPxKey.Left || keyInfo.keyCode == ASPxKey.Right
   || keyInfo.keyCode == ASPxKey.Backspace || keyInfo.keyCode == ASPxKey.Delete;
 }, 
 IsPrintableKeyCode: function(keyInfo) {
  if(keyInfo.ctrlState) 
   return false;
  var code = keyInfo.keyCode;  
  return code == 32
   || (code >= 48 && code <= 57)
   || (code >= 65 && code <= 90)
   || (code >= 96 && code <= 107)
   || (code >= 109 && code <= 111)
   || (code >= 186 && code <= 192)
   || (code >= 219 && code <= 222);  
 },
 IsIgnorableLiteral: function(text, mode) {
  if(mode == _aspxMaskIncludeLiterals.None)
   return true;
  if(mode == _aspxMaskIncludeLiterals.All)
   return false;
  return text != __aspxCultureInfo.numDecimalPoint;
 }
};
_aspxMaskManager.keyCancelled = false;
_aspxMaskManager.keyDownHandled = false;
_aspxMaskManager.savedKeyDownKeyInfo = null;
_aspxMaskDateTimeHelper = {
 GetDate: function(maskInfo, etalonDate) {
  return this.CreateDateFromBag(this.GetDateBag(maskInfo, etalonDate), this.HasDateParts(maskInfo));
 },
 GetDateBag: function(maskInfo, etalonDate) {
  var bag = {
   year: 100, 
   month: 0, 
   day: 1,
   hours: 0,
   min: 0,
   sec: 0,
   msec: 0,
   pm: false,
   hasAmPm: false,
   hasDate: false
  };
  if(etalonDate) {
   bag.year = etalonDate.getFullYear();
   bag.month = etalonDate.getMonth();
   bag.day = etalonDate.getDate();
   bag.hours = etalonDate.getHours();
   bag.min = etalonDate.getMinutes();
   bag.sec = etalonDate.getSeconds();
   bag.msec = etalonDate.getMilliseconds();
  }
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   switch(part.dateTimeRole) {
    case "y":     
     bag.year = Number(part.GetValue());
     if(bag.year < 100)
      bag.year = _aspxExpandTwoDigitYear(bag.year);     
     bag.hasDate = true;
     break;
    case "M":
     bag.month = _aspxMaskManager.IsEnumPart(part) ? part.itemIndex : Number(part.GetValue()) - 1;
     bag.hasDate = true;
     break;
    case "d":
     if(!_aspxMaskManager.IsEnumPart(part)) {
      bag.day = Number(part.GetValue());
      bag.hasDate = true;
     }
     break;
    case "H":
    case "h":
     bag.hours = Number(part.GetValue());
     break;
    case "m":
     bag.min = Number(part.GetValue());
     break;
    case "s":
     bag.sec = Number(part.GetValue());
     break;
    case "f":
    case "F":
     bag.msec = Number(part.GetValue());
     break;
    case "t":
     bag.hasAmPm = true;
     bag.pm = _aspxMaskManager.IsEnumPart(part) && part.itemIndex > 0;
     break;
   }
  }
  if(bag.hasAmPm) {
   if(!bag.pm && bag.hours == 12)
    bag.hours = 0;
   if(bag.pm && bag.hours < 12)
    bag.hours += 12;
  }
  return bag;
 },
 CreateDateFromBag: function(bag, allowNull) {
  if(allowNull) {
   if(bag.year == 100 && bag.month == 0 && bag.day == 1 
    && bag.hours + bag.min + bag.sec + bag.msec == 0)
    return null;
  }
  var date = new Date(bag.year, bag.month, bag.day, bag.hours, bag.min, bag.sec, bag.msec);
  _aspxFixTimezoneGap(
   new Date(bag.year, bag.month, date.getDate() > 1 ? bag.day - 1 : bag.day + 1, bag.hours, bag.min, bag.sec, bag.msec),
   date
  );
  return date;
 },
 GetMaxDayInMonth: function(month, year) {
  if(month == 1)
   return this.IsLeapYear(year) ? 29 : 28;
  if(month == 3 || month == 5 || month == 8 || month == 10)
   return 30;
  return 31;
 },
 IsLeapYear: function(year) {
  if(year % 4 != 0)
   return false;
  if(year % 100 == 0)  
   return year % 400 == 0;
  return true;
 },
 GetNextLeapYear: function(year) {
  var result = 4 * (1 + Math.floor(year / 4));
  if(!this.IsLeapYear(result))
   result += 4;
  return result;
 }, 
 SetDate: function(maskInfo, date) {
  if(date == null)
   date = new Date(100, 0, 1);
  for(var i = 0; i < maskInfo.parts.length; i++) {
   var part = maskInfo.parts[i];
   part.EnsureValueInitialized();   
   switch(part.dateTimeRole) {
    case "y":
     this.SetYear(part, date);
     break;
    case "M":
     this.SetMonth(part, date);
     break;
    case "d":
     this.SetDay(part, date);
     break;
    case "h":
     this.SetHours(part, date, false);
     break;
    case "H":
     this.SetHours(part, date, true);
     break; 
    case "m":
     this.SetMinutes(part, date);
     break;
    case "s":
     this.SetSeconds(part, date);      
     break;
    case "f":
    case "F":
     this.SetMilliseconds(part, date);
     break;
    case "t":
     this.SetAmPm(part, date);      
     break;      
   }   
  }
 },
 SetYear: function(part, date) {
  if(!_aspxMaskManager.IsRangePart(part))
   return;
  var value = date.getFullYear();
  if(part.maxNumber < 100)
   value = value % 100;
  part.SetNumber(value);
 },
 SetMonth: function(part, date) { 
  if(_aspxMaskManager.IsRangePart(part))
   part.SetNumber(1 + date.getMonth());
  else if(_aspxMaskManager.IsEnumPart(part))
   part.itemIndex = date.getMonth();
 },
 SetDay: function(part, date) {
  if(_aspxMaskManager.IsRangePart(part))
   part.SetNumber(date.getDate());
  else if(_aspxMaskManager.IsEnumPart(part))
   part.itemIndex = date.getDay();
 },
 SetHours: function(part, date, full) {
  if(!_aspxMaskManager.IsRangePart(part))
   return; 
  var value = date.getHours();
  if(!full) {
   value = value % 12;
   if(value == 0)
    value = 12;
  }
  part.SetNumber(value);
 },
 SetMinutes: function(part, date) {
  if(!_aspxMaskManager.IsRangePart(part))
   return; 
  part.SetNumber(date.getMinutes());
 },
 SetSeconds: function(part, date) {
  if(!_aspxMaskManager.IsRangePart(part))
   return;
  part.SetNumber(date.getSeconds());
 },
 SetMilliseconds: function(part, date) {
  if(!_aspxMaskManager.IsRangePart(part))
   return;
  var value = date.getMilliseconds();
  while(value > part.maxNumber)
   value = value / 10;
  part.SetNumber(Math.round(value));
 },
 SetAmPm: function(part, date) {
  if(!_aspxMaskManager.IsEnumPart(part))
   return; 
  part.itemIndex = date.getHours() < 12 ? 0 : 1;
 },
 HasDateParts: function(maskInfo) {
  var list = maskInfo.parts;
  for(var i = 0; i < list.length; i++) {
   var role = list[i].dateTimeRole;
   if(role == "d" || role == "M" || role == "y")
    return true;
  }
  return false;
 }
};

var __aspxLabelValueSuffix = "_V";
ASPxClientStaticEdit = _aspxCreateClass(ASPxClientEditBase, { 
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.Click = new ASPxClientEvent();
 },
 OnClick: function(htmlEvent) {
  this.RaiseClick(this.GetMainElement(), htmlEvent);
 },
 RaiseClick: function(htmlElement, htmlEvent){
  if(!this.Click.IsEmpty()){
   var args = new ASPxClientEditClickEventArgs(htmlElement, htmlEvent);
   this.Click.FireEvent(this, args);
  }
 },
 ChangeEnabledAttributes: function(enabled){
  this.ChangeMainElementAttributes(this.GetMainElement(), _aspxChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
 },
 ChangeMainElementAttributes: function(element, method){
  method(element, "onclick");
 }
});
ASPxClientEditClickEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(htmlElement, htmlEvent){
  this.constructor.prototype.constructor.call(this);
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientHyperLink = _aspxCreateClass(ASPxClientStaticEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
 },
 GetNavigateUrl: function(){
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   return element.href;
  return "";
 },
 SetNavigateUrl: function(url){
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   element.href = url;
 },
 GetText: function(){
  return this.GetValue();
 },
 SetText: function(value){
  this.SetValue(value);
 },
 ChangeMainElementAttributes: function(element, method){
  ASPxClientStaticEdit.prototype.ChangeMainElementAttributes.call(this, element, method);
  method(element, "href");
 }
});
ASPxClientHyperLink.Cast = ASPxClientControl.Cast;
ASPxClientImageBase = _aspxCreateClass(ASPxClientStaticEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.imageWidth = "";
  this.imageHeight = "";
 },
 GetWidth: function(){
  return this.GetSize(true);
 },
 GetHeight: function(){
  return this.GetSize(false);
 },
 SetWidth: function(width) {
  this.SetSize(width, this.GetHeight());
 },
 SetHeight: function(height) {
  this.SetSize(this.GetWidth(), height);
 },
 SetSize: function(width, height){
  this.imageWidth = width + "px";
  this.imageHeight = height + "px";
  var image = this.GetMainElement();
  if(_aspxIsExistsElement(image))
   ASPxImageUtils.SetSize(image, width, height);
 },
 GetSize: function(isWidth){
  var image = this.GetMainElement();
  if(_aspxIsExistsElement(image))
   return ASPxImageUtils.GetSize(image, isWidth);
  return -1;
 }
});
ASPxClientImage = _aspxCreateClass(ASPxClientImageBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.emptyImageUrl = "";
  this.emptyImageToolTip = "";
  this.emptyImageWidth = "";
  this.emptyImageHeight = "";
  this.imageAlt = "";
  this.imageToolTip = "";
  this.isEmpty = false;
  this.loadingImageBackgroundStyle = "";
 },
 Initialize: function () {
  ASPxClientImageBase.prototype.Initialize.call(this);
  var image = this.GetMainElement();
  if (image && image.dxLoadingImageBackground)
   this.loadingImageBackgroundStyle = image.dxLoadingImageBackground;
 },
 GetValue: function() {
  if(!this.isEmpty) {
   var image = this.GetMainElement();
   if(_aspxIsExistsElement(image))
    return ASPxImageUtils.GetImageSrc(image);
  }
  return "";
 },
 SetValue: function (value) {
  if(value == null) value = "";
  this.isEmpty = (value == "");
  var image = this.GetMainElement();
  if (_aspxIsExistsElement(image)) {
   this.ShowLoadingImage();
   if(this.emptyImageUrl != ""){
    if(value == "")
     this.ApplyImageProperties(image, this.emptyImageUrl, this.emptyImageWidth, this.emptyImageHeight, this.emptyImageAlt, this.emptyImageToolTip);
    else
     this.ApplyImageProperties(image, value, this.imageWidth, this.imageHeight, this.imageAlt, this.imageToolTip);
   }
   else
    ASPxImageUtils.SetImageSrc(image, value);
  }
 },
 ShowLoadingImage: function () {
  if (this.loadingImageBackgroundStyle) {
   var image = this.GetMainElement();
   ASPxImageUtils.SetImageSrc(image, "");
   image.style.background = this.loadingImageBackgroundStyle;
  }
 },
 ApplyImageProperties: function(imageElement, url, width, height, alt, toolTip){
  ASPxImageUtils.SetImageSrc(imageElement, url);
  imageElement.style.width = width;
  imageElement.style.height = height;
  imageElement.alt = alt;
  imageElement.title = toolTip;
 },
 GetImageUrl: function(url){
  return this.GetValue();
 },
 SetImageUrl: function(url){
  this.SetValue(url);
 }
});
ASPxClientImage.Cast = ASPxClientControl.Cast;
ASPxClientBinaryImage = _aspxCreateClass(ASPxClientImageBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 GetValue: function() {
  return "";
 },
 SetValue: function(value) {
 }
});
ASPxClientBinaryImage.Cast = ASPxClientControl.Cast;
ASPxClientLabel = _aspxCreateClass(ASPxClientStaticEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;         
 },
 GetValue: function() { 
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   return element.innerHTML;
 },
 SetValue: function(value) {
  if(value == null)
   value = "";
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element)) 
   element.innerHTML = value;
 },
 SetVisible: function(visible){
  if(this.clientVisible != visible){
   this.clientVisible = visible;
   var element = this.GetMainElement();
   if(!visible)
    element.style.display = "none";
   else if((element.style.width != "" || element.style.height != "") && !__aspxNetscapeFamily)
    element.style.display = "inline-block";
   else
    element.style.display = "";
  }
 },
 GetText: function(){
  return this.GetValue();
 },
 SetText: function(value){
  this.SetValue(value);
 },
 ChangeMainElementAttributes: function(element, method){
  ASPxClientStaticEdit.prototype.ChangeMainElementAttributes.call(this, element, method);
  method(element, "htmlFor");
 }
});
ASPxClientLabel.Cast = ASPxClientControl.Cast;
function aspxSEClick(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) {
  edit.OnClick(evt);
  return evt.returnValue;
 }
}
function aspxSELoad(evt) {
 var image = _aspxGetEventSource(evt);
 if(!image.dxLoadingImageBackground)
  image.dxLoadingImageBackground = image.style.background;
 image.style.background = "";
}
var __aspxCalendarWeekCount = 6;
var __aspxCalendarMsPerDay = 86400000;
var __aspxActiveCalendar = null;
ASPxClientCalendar = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.SelectionChanging = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.VisibleMonthChanged = new ASPxClientEvent();
  this.CustomDisabledDate = new ASPxClientEvent();
  this.isMouseDown = false;  
  this.forceMouseDown = false;
  this.supportGestures = true;
  this.swipeGestureStated = false;
  this.updateAnimationProcessing = false;
  this.selection = new ASPxClientCalendarSelection();
  this.selectionTransaction = null;  
  this.selectionStartDate = null;
  this.selectionPrevStartDate = null;
  this.lastSelectedDate = null;
  this.selectionCtrl = false;
  this.selectionByWeeks = false;  
  this.nodeCache = { };
  this.titleFormatter = null;
  this.visibleDate = new Date();
  this.firstDayOfWeek = 0;    
  this.columns = 1;
  this.rows = 1;
  this.enableFast = true;
  this.enableMulti = false;
  this.minDate = null;
  this.maxDate = null;
  this.customDraw = false;  
  this.showWeekNumbers = true;
  this.showDayHeaders = true;
  this.isDateEditCalendar = false;
  this.disabledDates = [ ];
  this.sizingConfig.allowSetHeight = false;
  this.isDateChangingByKeyboard = false;
  this.MainElementClick = new ASPxClientEvent();      
 },
 Initialize: function() {
  this.selectionTransaction = new ASPxClientCalendarSelectionTransaction(this);
  this.selectionPrevStartDate = this.selection.GetFirstDate();
  this.SaveClientState(); 
  ASPxClientEdit.prototype.Initialize.call(this);
  var mainElement = this.GetMainElement();
  _aspxPreventElementDragAndSelect(mainElement, false, false);
  if(__aspxOpera)
   _aspxSetElementAsUnselectable(mainElement, true, true);
  if(!ASPxClientCalendar.AreDatesEqual(this.currentDate, new Date()))
   this.Update();
 },
 InlineInitialize: function(){
  this.CreateViews();
  if(this.enableFast)
   this.fastNavigation = new ASPxClientCalendarFastNavigation(this);
  this.InitSpecialKeyboardHandling();
  if(this.enableSlideCallbackAnimation && !this.enableSwipeGestures && typeof(ASPxAnimationHelper) != "undefined")
   ASPxAnimationHelper.getSlideAnimationContainer(this.GetCallbackAnimationElement(), true, false);
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(!this.CustomDisabledDate.IsEmpty())
   this.Update();
 },
 FindInputElement: function() {
  return this.GetChild("_KBS");
 },
 FindStateInputElement: function() {
  return _aspxGetElementById(this.name + "_STATE");
 },
 GetClearButton: function() {
  return this.GetChild("_BC");
 },
 GetTodayButton: function() {
  return this.GetChild("_BT");
 },
 GetValue: function() {
  return this.selection.GetFirstDate();
 },
 GetValueString: function() {
  var value = this.GetValue();
  return value == null ? null : _aspxGetInvariantDateString(value);
 },
 SetValue: function(date) {  
  if(date)   
   this.SetVisibleDate(date);
  this.SetSelectedDate(date);
 },
 GetFastNavigation: function() {
  return this.fastNavigation;
 },    
 GetViewKey: function(row, column) {
  return row + "x" + column;
 },
 GetView: function(row, column) {
  var key = this.GetViewKey(row, column);
  return this.views[key];
 },
 CreateViews: function() {
  this.views = { };
  var key;
  for(var row = 0 ; row < this.rows; row++) {   
   for(var col = 0; col < this.columns; col++) {
    key = this.GetViewKey(row, col);
    var view = new ASPxClientCalendarView(this, row, col);
    view.Initialize();
    this.views[key] = view;
   }
  }
 },
 IsFastNavigationActive: function() {
  if (this.fastNavigation)
   return this.fastNavigation.GetPopup().IsVisible();
  return false;
 },
 IsDateSelected: function(date) {
  return this.selection.Contains(date);
 },
 IsDateVisible: function(date) {
  var startDate = ASPxClientCalendar.CloneDate(this.GetView(0, 0).visibleDate);
  startDate.setDate(1);  
  var endDate = ASPxClientCalendar.CloneDate(this.GetView(this.rows - 1, this.columns - 1).visibleDate);
  endDate.setDate(ASPxClientCalendar.GetDaysInMonth(endDate.getMonth(), endDate.getFullYear()));
  return (date >= startDate) && (date < endDate);
 },
 IsDateWeekend: function(date) {
  var day = date.getDay();
  return day == 0 || day == 6;
 },
 IsCustomDisabledDatesViaCallback: function(){
  return (this.callBack != null && this.CustomDisabledDate.IsEmpty() && this.disabledDates.length > 0);
 },
 IsDateDisabled: function(date) {
  if(date != null) {
   var length = this.disabledDates.length;
   if(length > 0 && date != null) {
    for(var i = 0; i < length; i++) {
     var disabledDate = this.disabledDates[i];
     if(disabledDate.getDate() == date.getDate() &&
      disabledDate.getMonth() == date.getMonth() &&
      disabledDate.getFullYear() == date.getFullYear())
      return true;
    }
   }
   if(this.OnCustomDisabledDate(date).isDisabled)
    return true;
  }
  return false;
 },
 IsMultiView: function() {
  return this.columns > 1 || this.rows > 1;
 },
 IsDateInRange: function(date) {
  return date == null || 
   ((this.minDate == null || date >= this.minDate) && 
    (this.maxDate == null || date <= this.maxDate));
 },
 AddCallbackCustomDisabledDates: function(dates) {
  var callbackCustomDisabledDates = eval(dates);
  for(var i = 0; i < callbackCustomDisabledDates.length; i++) {
   var contains = false;
   var date = callbackCustomDisabledDates[i];
   for(var j = 0; j < this.disabledDates.length; j++) {
    var disabledDate = this.disabledDates[j];
    if(disabledDate.getDate() == date.getDate() &&
     disabledDate.getMonth() == date.getMonth() &&
     disabledDate.getFullYear() == date.getFullYear()) {
     contains = true;
     break;
    }
   }
   if(!contains)
    this.disabledDates.push(date);
  }
 },
 GetCachedElementById: function(id) {
  if(!_aspxIsExistsElement(this.nodeCache[id]))
   this.nodeCache[id] = _aspxGetElementById(id);
  return this.nodeCache[id]; 
 },
 ShowLoadingPanel: function(){
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetMainElement());
 },
 GetCallbackAnimationElement: function() {
  if(this.columns === 1 && this.rows === 1)
   return this.views[this.GetViewKey(0, 0)].GetMonthTable();
  return this.GetMainElement();
 },
 CanHandleGesture: function(evt) {
  var source = _aspxGetEventSource(evt);
  var element = this.GetMainElement();
  if(this.columns === 1 && this.rows === 1)
   element = this.views[this.GetViewKey(0, 0)].GetMonthCell();
  return _aspxGetIsParent(element, source);
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && (!this.enableMulti || !this.selectionTransaction.isActive) && !this.updateAnimationProcessing;
 },
 StartGesture: function() {
  this.swipeGestureStated = true;
 },
 AllowExecuteGesture: function(value) {
  return true;
 },
 ExecuteGesture: function(value, count) {
  if(!count) count = 1;
  this.OnShiftMonth((value > 0 ? -1 : 1) * count);
 },
 Update: function() {
  if(this.customDraw) {
   if(this.callBack) {
    this.ShowLoadingElements();
    this.CreateCallback("UPDATE");
   }
   else {
    this.SendPostBack("");
   }
  }
  else {
   if(this.IsAnimationEnabled())
    this.StartBeforeUpdateAnimation();
   else
    this.UpdateInternal();
  }
 }, 
 UpdateInternal: function() {
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.Update();
  }
  if(this.IsAnimationEnabled())
   this.StartAfterUpdateAnimation();
 },
 IsAnimationEnabled: function() {
  return this.enableSlideCallbackAnimation || this.enableCallbackAnimation;
 },
 StartBeforeUpdateAnimation: function() {
  this.updateAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(this.enableSlideCallbackAnimation && this.slideAnimationDirection) 
   ASPxAnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeforeUpdateAnimation.aspxBind(this));
  else if(this.enableCallbackAnimation) 
   ASPxAnimationHelper.fadeOut(element, this.FinishBeforeUpdateAnimation.aspxBind(this));
  else
   this.FinishBeforeUpdateAnimation();
 },
 FinishBeforeUpdateAnimation: function() {
  this.UpdateInternal();
 },
 StartAfterUpdateAnimation: function() {
  var element = this.GetCallbackAnimationElement();
  if(this.enableSlideCallbackAnimation && this.slideAnimationDirection) 
   ASPxAnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishAfterUpdateAnimation.aspxBind(this));
  else if(this.enableCallbackAnimation) 
   ASPxAnimationHelper.fadeIn(element, this.FinishAfterUpdateAnimation.aspxBind(this));
  else
   this.FinishAfterUpdateAnimation();
 },
 FinishAfterUpdateAnimation: function() {
  this.updateAnimationProcessing = false;
  this.slideAnimationDirection = null;
  this.CheckRepeatGesture();
 },
 ApplySelectionByDiff: function(selection, save) {
  var toShow = [ ];
  var toHide = [ ];
  var dates =  selection.GetDates();
  var oldDates = this.selection.GetDates();
  var date;
  for(var i = 0; i < dates.length; i++) {
   date = dates[i];
   if(!this.selection.Contains(date))
    toShow.push(date);
  }
  for(var i = 0; i < oldDates.length; i++) {
   date = oldDates[i];
   if(!selection.Contains(date))
    toHide.push(date);
  }
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.UpdateSelection(toHide, false);
   view.UpdateSelection(toShow, true);   
  }
  this.selection.Assign(selection);
  if(save)
   this.SaveClientState();
 },
 ImportEtalonStyle: function(info, suffix) {
  var cell = this.GetEtalonStyleCell(suffix);
  if(_aspxIsExistsElement(cell))
   info.Import(cell);   
 },
 GetEtalonStyleCell: function(name) {
  return this.GetCachedElementById(this.name + "_EC_" + name);
 },
 SaveClientState: function() {
  var element = this.FindStateInputElement();
  if (element != null) {
   var visibleDate = this.visibleDate;
   if(visibleDate > this.GetNETMaxDate())
    visibleDate = this.GetNETMaxDate();
   var state = _aspxGetInvariantDateString(visibleDate);
   if(this.selection.count > 0) 
    state += ":" + this.FormatDates(this.selection.GetDates(), ":");
   element.value = state;
  }
 },
 GetNETMaxDate: function() {
  return new Date(9999, 11, 31, 23, 59, 59, 999);
 },
 FormatDates: function(dates, separator) {
  var result = "";
  for(var i = 0; i < dates.length; i++) {
   if (result.length > 0)
    result += separator;
   result += _aspxGetInvariantDateString(dates[i]);     
  }
  return result;
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler(ASPxKey.Enter, "OnEnterDown");
  this.AddKeyDownHandler(ASPxKey.Esc, "OnEscape");
  this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
  this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
  this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
  this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
  this.AddKeyDownHandler(ASPxKey.Left, "OnArrowLeft");
  this.AddKeyDownHandler(ASPxKey.Right, "OnArrowRight");
  this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
  this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
  this.AddKeyPressHandler(ASPxKey.Enter, "OnEnterPressed");
 },
 OnArrowUp: function(evt) {
  if (this.IsFastNavigationActive()) 
   this.GetFastNavigation().OnArrowUp(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.GetPrevWeekDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "up");
  }
  return true;
 },
 OnArrowDown: function(evt) {
  if (this.IsFastNavigationActive()) 
   this.GetFastNavigation().OnArrowDown(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)  
    newDate = ASPxClientCalendar.GetNextWeekDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, true);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "down");
  }
  return true;
 },
 OnArrowLeft: function(evt) { 
  if (this.IsFastNavigationActive()) 
   this.GetFastNavigation().OnArrowLeft(evt);
  else if (!this.readOnly) {  
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate) 
    newDate = ASPxClientCalendar.GetYesterDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "left");
  }
  return true;
 },
 OnArrowRight: function(evt) {
  if (this.IsFastNavigationActive()) 
   this.GetFastNavigation().OnArrowRight(evt);
  else if (!this.readOnly) {  
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.GetTomorrowDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, true);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "right");
  }
  return true;
 },
 OnCallback: function(result){
  var table = this.GetMainElement();
  for(var rowIndex = 0; rowIndex < this.rows; rowIndex++) {
   for(var cellIndex = 0; cellIndex < this.columns; cellIndex++) {
    _aspxSetInnerHtml(table.rows[rowIndex].cells[cellIndex], result[rowIndex * this.columns + cellIndex]);
   }
  }
  if(this.IsCustomDisabledDatesViaCallback()) {
   this.AddCallbackCustomDisabledDates(result[result.length - 1]);
  }
  this.CreateViews();
  this.InitializeGestures();
  this.InitializeEnabled();
  if(!this.isDateEditCalendar)
   this.SetFocus();
 },
 OnPageUp: function(evt) {
  if (this.IsFastNavigationActive()) 
   this.GetFastNavigation().OnPageUp(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate) {
    if (evt.ctrlKey)
     newDate = ASPxClientCalendar.GetPrevYearDate(this.lastSelectedDate);
    else
     newDate = ASPxClientCalendar.GetPrevMonthDate(this.lastSelectedDate);   
   }
   this.CorrectVisibleMonth(newDate, false);  
   this.DoKeyboardSelection(newDate);
  }
  return true; 
 },
 OnPageDown: function(evt) {
  if (this.IsFastNavigationActive()) 
   this.GetFastNavigation().OnPageDown(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate) {
    if (evt.ctrlKey)
     newDate = ASPxClientCalendar.GetNextYearDate(this.lastSelectedDate);
    else
     newDate = ASPxClientCalendar.GetNextMonthDate(this.lastSelectedDate);
   }
   this.CorrectVisibleMonth(newDate, true);
   this.DoKeyboardSelection(newDate);
  }
  return true;
 },
 OnEndKeyDown: function(evt) {
  if (!this.readOnly && !this.IsFastNavigationActive()) { 
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)   
    newDate = ASPxClientCalendar.CloneDate(this.lastSelectedDate);
   newDate = ASPxClientCalendar.GetLastDayInMonthDate(newDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey);
  }
  return true;
 },
 OnHomeKeyDown: function(evt) {
  if (!this.readOnly && !this.IsFastNavigationActive()) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)   
    newDate = ASPxClientCalendar.CloneDate(this.lastSelectedDate);
   newDate = ASPxClientCalendar.GetFirstDayInMonthDate(newDate);   
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey);
  }
  return true; 
 },
 OnEnterDown: function() {
  if (this.IsFastNavigationActive()) {
   this.GetFastNavigation().OnEnter();
   return true;
  }
  return false;
 },
 OnEnterPressed: function() {
  return true;
 },
 OnEscape: function() {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnEscape();
  return true;
 },
 OnShiftMonth: function(offset) {
  if(offset) {
   var date = ASPxClientCalendar.AddMonths(this.visibleDate, offset);     
   this.OnVisibleMonthChanged(date);
  }
 },
 OnDayMouseDown: function(date, shift, ctrl, byWeeks) {
  this.isMouseDown = true;
  this.selectionByWeeks = byWeeks;
  if(!this.enableMulti && this.enableSwipeGestures)
   return;
  this.selectionTransaction.Start();
  if(this.enableMulti) {
   if(ctrl) {
    this.selectionCtrl = true;
    this.selectionTransaction.CopyFromBackup();
   } else
    this.selectionCtrl = false;
   if(shift && this.selectionPrevStartDate) {
    this.selectionStartDate = this.selectionPrevStartDate;         
    this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
    if(byWeeks)
     this.selectionTransaction.selection.AddWeek(date);
   } else {
    this.selectionStartDate = date;
    this.selectionPrevStartDate = date;
    if(byWeeks)
     this.selectionTransaction.selection.AddWeek(date);
    else
     this.selectionTransaction.selection.Add(date);
   }
  } 
  else 
   this.selectionTransaction.selection.Add(date);
  if(date > this.GetNETMaxDate())
   this.selectionTransaction.CopyFromBackup();
  if(this.enableMulti)
   this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
  this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
 },
 OnDayMouseOver: function(date) {
  if(!this.enableMulti && this.enableSwipeGestures)
   return;
  if(this.enableMulti) {
   if(this.selectionCtrl)
    this.selectionTransaction.CopyFromBackup();
   else
    this.selectionTransaction.selection.Clear();
   this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
   if(this.selectionByWeeks) {
    this.selectionTransaction.selection.AddWeek(date);
    this.selectionTransaction.selection.AddWeek(this.selectionStartDate);
   }
  } 
  else {
   this.selectionTransaction.selection.Clear();
   this.selectionTransaction.selection.Add(date);
  }
  if(this.enableMulti)
   this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
  this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
 },
 OnDayMouseUp: function(date) {
  if (!__aspxIE && this.isMouseDown)
   this.OnMainElementClick();
  this.isMouseDown = false;
  if(!this.enableMulti && this.enableSwipeGestures && this.swipeGestureStated) {
   this.swipeGestureStated = false;
   return;
  }
  if(this.enableMulti) {
   if(this.selectionCtrl && this.selectionTransaction.backup.Contains(date) &&
    ASPxClientCalendar.AreDatesEqual(date, this.selectionStartDate)) {
    if(this.selectionByWeeks)
     this.selectionTransaction.selection.RemoveWeek(date);
    else
     this.selectionTransaction.selection.Remove(date);
   }
  }
  else if(this.enableSwipeGestures && !this.swipeGestureStated) {
   this.selectionTransaction.selection.Add(date);
   if(date > this.GetNETMaxDate())
    this.selectionTransaction.CopyFromBackup();
   this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
  }
  this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
  this.OnSelectionChanging(); 
 },
 OnTodayClick: function() {
  var now = new Date(); 
  var date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  if(this.IsDateInRange(date)) {
   if(!this.IsDateDisabled(date)) {
    this.selectionTransaction.Start();
    this.selectionTransaction.selection.Add(date);
    this.OnSelectionChanging();
   }
   if(!ASPxClientCalendar.AreDatesOfSameMonth(date, this.visibleDate))
    this.OnVisibleMonthChanged(date);  
  }
 },
 OnClearClick: function() {
  this.selectionTransaction.Start();
  this.OnSelectionChanging();
  this.selectionStartDate = null;
  this.selectionPrevStartDate = null;    
  this.lastSelectedDate = null;
 },
 OnSelectMonth: function(row, column) {  
  var txn = this.selectionTransaction;
  txn.Start();
  var date = ASPxClientCalendar.CloneDate(this.GetView(row, column).visibleDate);
  date.setDate(1);
  do {  
   if(this.IsDateInRange(date) && !this.IsDateDisabled(date))
    txn.selection.Add(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  } while(date.getDate() > 1);
  this.OnSelectionChanging();
 },
 OnTitleClick: function(row, column) {
  this.fastNavigation.activeView = this.GetView(row, column);
  this.fastNavigation.Prepare();
  this.fastNavigation.Show();
 },
 OnMainElementClick: function(mouseEvt) {
  this.MainElementClick.FireEvent(this, mouseEvt);
 },
 OnSelectionChanging: function() {
  if(!this.SelectionChanging.IsEmpty()){
   var args = new ASPxClientCalendarSelectionEventArgs(false, this.selectionTransaction.selection);
   this.SelectionChanging.FireEvent(this, args);  
  }
  var changed = this.selectionTransaction.IsChanged();
  this.selectionTransaction.Commit();
  if(changed)
   this.OnValueChanged();  
 },
 OnVisibleMonthChanged: function(date) {
  var offsetInternal = ASPxClientCalendar.GetOffsetInMonths(this.visibleDate, date);
  this.SetVisibleDate(date);
  var processOnServer = this.RaiseVisibleMonthChanged(offsetInternal);
  if(processOnServer && !this.customDraw)
   this.SendPostBackInternal("");
 },
 OnSelectionCancelled: function() {
  this.isMouseDown = false;  
  this.selectionTransaction.Rollback();
 },
 OnCustomDisabledDate: function(date) {
  return this.RaiseCustomDisabledDate(date);
 },
 RaiseCustomDisabledDate: function(date) {
  var args = new ASPxClientCalendarCustomDisabledDateEventArgs(date);
  this.CustomDisabledDate.FireEvent(this, args);
  return args;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseSelectionChanged(processOnServer);
  return processOnServer;
 },
 SetVisibleDate: function(date) {
  var old = this.visibleDate;
  this.visibleDate = date;
  this.SaveClientState();
  this.slideAnimationDirection = this.IsAnimationEnabled() ? ((old < this.visibleDate) ? ASPxAnimationHelper.SLIDE_LEFT_DIRECTION : ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION) : null;
  if(!ASPxClientCalendar.AreDatesOfSameMonth(date, old)){
   this.Update(); 
  }
 },
 SetSelectedDate: function(date) {
  if(this.IsDateInRange(date) && !this.IsDateDisabled(date)) {
   var selection = new ASPxClientCalendarSelection();
   if(date != null) {
    selection.Add(date);
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
   }
   this.ApplySelectionByDiff(selection, true);
  }
 },
 CorrectVisibleMonth: function(newDate, isForwardDirection) {
  var offset = ASPxClientCalendar.GetOffsetInMonths(this.visibleDate, newDate);
  if (this.IsMultiView() && offset != 0) {
   var view = isForwardDirection ? this.GetView(this.rows - 1, this.columns - 1) : 
            this.GetView(0, 0);
   offset = this.IsDateVisible(newDate) ? 0 :
       ASPxClientCalendar.GetOffsetInMonths(view.visibleDate, newDate);
  }
  if(!this.IsDateInRange(newDate) || this.IsDateDisabled(newDate))
   offset = 0;
  if (offset != 0)
   this.OnShiftMonth(offset);
 },
 DoKeyboardSelection: function(date, shift, direction) {
  if (this.IsDateInRange(date)) {
   this.isDateChangingByKeyboard = true;
   var existDate = this.IsDateDisabled(date) ? this.GetNearestDayForDate(date, direction) : date;
   if(existDate != null) {
    this.selectionTransaction.Start();
    if(this.enableMulti && shift && this.selectionStartDate) {
     this.selectionTransaction.selection.AddRange(this.selectionStartDate, existDate);
     this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
    } else {
     this.selectionTransaction.selection.Add(existDate);
     this.selectionStartDate = existDate;
    }
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(existDate);
    this.OnSelectionChanging();
   }
   this.isDateChangingByKeyboard = false;
  }
 },
 RemoveDisabledDatesFromSelection: function(selection) {
  var selectedDates = selection.GetDates();
  for(var i = 0; i < selectedDates.length; i++) {
   if(this.IsDateDisabled(selectedDates[i]))
    selection.Remove(selectedDates[i]);
  }
 },
 GetNearestDayForToday: function() {
  var now = new Date();
  var ret = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  if (this.minDate && !this.IsDateInRange(ret))
   ret = ASPxClientCalendar.CloneDate(this.IsDateDisabled(this.minDate) ? this.GetNearestDayForDate(this.minDate, "left") : this.minDate);
  return ret;
 },
 GetNearestDayForDate: function(date, direction) {
  var nearestDate = null;
  var nextDate = date;
  while(nearestDate == null) {
   switch(direction) {
    case "up":
     nextDate = new Date(nextDate.getTime() - (7 * 24 * 60 * 60 * 1000));
     break
    case "down":
     nextDate = new Date(nextDate.getTime() + (7 * 24 * 60 * 60 * 1000));
     break
    case "left":
     nextDate = new Date(nextDate.getTime() - (1 * 24 * 60 * 60 * 1000));
     break
    case "right":
     nextDate = new Date(nextDate.getTime() + (1 * 24 * 60 * 60 * 1000));
     break
   };
   if(!this.IsDateInRange(nextDate))
    return null;
   nearestDate = this.IsDateDisabled(nextDate) ? null : nextDate;
  }
  return nearestDate;
 },
 UseDelayedSpecialFocus: function() { 
  return true;
 },
 GetDelayedSpecialFocusTriggers: function() {
  var list = ASPxClientEdit.prototype.GetDelayedSpecialFocusTriggers.call(this);
  if(this.enableFast)
   list.push(this.GetFastNavigation().GetPopup().GetWindowElement(-1));
  return list;
 },
 GetSelectedDate: function() {
  return this.GetValue();
 },
 GetVisibleDate: function() {
  return this.visibleDate;
 },
 SelectDate: function(date) {
  if(date) {
   this.selection.Add(date);
   this.SaveClientState();
   this.Update();
  }
 },
 SelectRange: function(start, end) {
  if(start && end) {
   this.selection.AddRange(start, end);
   this.SaveClientState();
   this.Update();
  }
 },
 DeselectDate: function(date) {
  if(date) {
   this.selection.Remove(date);
   this.SaveClientState();
   this.Update(); 
  }
 },
 DeselectRange: function(start, end) {
  if(start && end) {
   this.selection.RemoveRange(start, end);
   this.SaveClientState();
   this.Update();
  }
 },
 ClearSelection: function() {
  this.selection.Clear();
  this.SaveClientState();
  this.Update();
 },
 GetSelectedDates: function() {
  return this.selection.GetDates();
 },
 RaiseSelectionChanged: function(processOnServer){
  if(!this.SelectionChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);  
   this.SelectionChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseVisibleMonthChanged: function(offsetInternal){
  var processOnServer = this.autoPostBack;
  if(!this.VisibleMonthChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   args.offsetInternal = offsetInternal;
   this.VisibleMonthChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 ChangeEnabledAttributes: function(enabled){ 
  _aspxChangeDocumentEventsMethod(enabled)("mouseup", aspxCalDocMouseUp);
  _aspxChangeEventsMethod(enabled)(this.GetMainElement(), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.name));
  var inputElement = this.GetInputElement();
  if(inputElement) 
   this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
  var btnElement = this.GetTodayButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetClearButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.ChangeEnabledAttributes(enabled);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  var btnElement = this.GetTodayButton();
  if(btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetClearButton();
  if(btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;  
   view.ChangeEnabledStateItems(enabled);
  }
  this.UpdateInternal();   
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
 },
 GetMinDate: function() {
  return this.minDate;
 },
 SetMinDate: function(date) {
  this.minDate = date;
  this.Update();
 },
 GetMaxDate: function() {
  return this.maxDate;
 },
 SetMaxDate: function(date) {
  this.maxDate = date;
  this.Update();
 }
});
ASPxClientCalendar.Cast = ASPxClientControl.Cast;
ASPxClientCalendarCustomDisabledDateEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(date) {
  this.constructor.prototype.constructor.call(this);
  this.date = date;
  this.isDisabled = false;
 }
});
ASPxClientCalendar.AnonymousHandlers = { 
 MainElementClick: function(name) {
  return function(e) {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.OnMainElementClick(e);
  };
 },
 SelectMonth: function(name, row, column) {
  return function() {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.OnSelectMonth(row, column);
  };
 },
 DayMouseEvent: function(name, row, column, index, byWeeks) {
  return function(e) {
   var cal = aspxGetControlCollection().Get(name);
   if(!cal)
    return;
   var view = cal.GetView(row, column);
   var date = view.GetDateByIndex(index);
   if(byWeeks)
    date = ASPxClientCalendar.AddDays(date, cal.firstDayOfWeek - date.getDay());
   var allowed = cal.IsDateInRange(date) && (view.IsDateVisible(date) || byWeeks) && !cal.IsDateDisabled(date);
   switch(e.type) {
    case "mousedown":
     if(allowed && _aspxGetIsLeftButtonPressed(e))
      cal.OnDayMouseDown(date, e.shiftKey, e.ctrlKey, byWeeks);
     break;
    case "mouseover":
     if(allowed) {
      if(cal.forceMouseDown)
       cal.OnDayMouseDown(date, false, false, false);
      else if(cal.isMouseDown)
       cal.OnDayMouseOver(date);
     }
     break;
    case "mouseup":
     if(cal.isMouseDown) {
      if(allowed)
       cal.OnDayMouseUp(date);
      else
       cal.OnSelectionCancelled();
     }
     break;
   }     
  };
 },
 FastNavMonthClick: function(name, month) {
  return function() {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.fastNavigation.OnMonthClick(month);   
  };
 },
 FastNavYearClick: function(name, index) {
  return function() {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.fastNavigation.OnYearClick(index);   
  };
 }
};
ASPxClientCalendar.AreDatesEqual = function(date1, date2) {
 if(date1 == date2)  
  return true;
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate();
}
ASPxClientCalendar.AreDatesOfSameMonth = function(date1, date2) {
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth();
}
ASPxClientCalendar.GetUTCTime = function(date) {
 return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
}
ASPxClientCalendar.GetFirstDayOfYear = function(date) {
 return new Date(date.getFullYear(), 0, 1);  
}
ASPxClientCalendar.GetDayOfYear = function(date) {
 var ms = ASPxClientCalendar.GetUTCTime(date) - 
  ASPxClientCalendar.GetUTCTime(ASPxClientCalendar.GetFirstDayOfYear(date));
 return 1 + Math.floor(ms / __aspxCalendarMsPerDay);
}
ASPxClientCalendar.GetISO8601WeekOfYear = function(date) {
 var firstDate = new Date(date.getFullYear(), 0, 1);
 var firstDayOfWeek = firstDate.getDay();
 if(firstDayOfWeek == 0)
  firstDayOfWeek = 7;
 var daysInFirstWeek = 8 - firstDayOfWeek;
 var lastDate = new Date(date.getFullYear(), 11, 31);   
 var lastDayOfWeek = lastDate.getDay();
 if(lastDayOfWeek == 0)
  lastDayOfWeek = 7;
 var daysInLastWeek = 8 - lastDayOfWeek; 
 var fullWeeks = Math.ceil((ASPxClientCalendar.GetDayOfYear(date) - daysInFirstWeek) / 7);
 var result = fullWeeks;   
 if(daysInFirstWeek > 3)
  result++;
 var isThursday = firstDayOfWeek == 4 || lastDayOfWeek == 4;
 if(result > 52 && !isThursday)
  result = 1;
 if(result == 0)
  return ASPxClientCalendar.GetISO8601WeekOfYear(new Date(date.getFullYear() - 1, 11, 31));
 return result;
}
ASPxClientCalendar.GetNextWeekDate = function(date) {
 var ret = new Date(date.getTime()); 
 var newDay = date.getDate() + 7;
 ret.setDate(newDay);
 return ret;
}
ASPxClientCalendar.GetPrevWeekDate = function(date) {
 var ret = new Date(date.getTime());
 var newDay = date.getDate() - 7;
 ret.setDate(newDay);
 return ret;
}
ASPxClientCalendar.GetYesterDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(ret.getDate() - 1);
 return ret;
}
ASPxClientCalendar.GetTomorrowDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(ret.getDate() + 1);
 return ret;
}
ASPxClientCalendar.GetNextMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInNextMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() + 1, ret.getFullYear());
 if (ret.getDate() > maxDateInNextMonth)
  ret.setDate(maxDateInNextMonth);
 ret.setMonth(ret.getMonth() + 1);
 return ret;
}
ASPxClientCalendar.GetNextYearDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() + 1);
 if (ret.getDate() > maxDateInPrevYearMonth)
  ret.setDate(maxDateInPrevYearMonth);
 ret.setFullYear(ret.getFullYear() + 1);
 return ret;
}
ASPxClientCalendar.GetPrevMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() - 1, ret.getFullYear());
 if (ret.getDate() > maxDateInPrevMonth)
  ret.setDate(maxDateInPrevMonth);
 ret.setMonth(ret.getMonth() - 1);
 return ret;
}
ASPxClientCalendar.GetPrevYearDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() - 1);
 if (ret.getDate() > maxDateInPrevYearMonth)
  ret.setDate(maxDateInPrevYearMonth);
 ret.setFullYear(ret.getFullYear() - 1);
 return ret;
}
ASPxClientCalendar.GetFirstDayInMonthDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(1);
 return ret;
}
ASPxClientCalendar.GetLastDayInMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear());
 ret.setDate(maxDateInYearMonth);
 return ret;
}
ASPxClientCalendar.AddDays = function(startDate, dayCount) {
 var date = ASPxClientCalendar.CloneDate(startDate);
 var dayDiff = 0;
 var hourInc = 3600000;
 if(dayCount < 0)
  hourInc = -1 * hourInc;
 dayCount = Math.abs(dayCount);
 while(true) {
  if(dayDiff == dayCount && startDate.getHours() == date.getHours())
   return date;
  if(dayDiff > dayCount) {
   date.setTime(-1 * hourInc + date.getTime());
   return date;
  }
  var day = date.getDate();
  date.setTime(hourInc + date.getTime());
  if(day != date.getDate())
   dayDiff++;
 }
 return date;
}
ASPxClientCalendar.AddMonths = function(date, count) {
 var newDate = ASPxClientCalendar.CloneDate(date);
 newDate.setMonth(count + newDate.getMonth());
 _aspxFixTimezoneGap(date, newDate);
 if(newDate.getDate() < date.getDate())
  newDate = ASPxClientCalendar.AddDays(newDate, -newDate.getDate()); 
 return newDate;
}
ASPxClientCalendar.CloneDate = function(date) {
 var cloned = new Date();
 cloned.setTime(date.getTime());
 return cloned;
}
ASPxClientCalendar.GetDecadeStartYear = function(year) {
 return 10 * Math.floor(year / 10);
}
ASPxClientCalendar.GetDaysInRange = function(start, end) {
 return 1 + (ASPxClientCalendar.GetUTCTime(end) - ASPxClientCalendar.GetUTCTime(start)) / __aspxCalendarMsPerDay;
};
ASPxClientCalendar.GetDaysInMonth = function(month, year) {
 var d = new Date(year, month + 1, 0);
 return d.getDate();
};
ASPxClientCalendar.GetOffsetInMonths = function(start, end) {
 return end.getMonth() - start.getMonth() + 12 * (end.getFullYear() - start.getFullYear());
};
ASPxClientCalendarSelection = _aspxCreateClass(null, {
 constructor: function() {
  this.dates = { };
  this.count = 0;  
 },
 Assign: function(source) {
  this.Clear();
  for(var key in source.dates) {
   var item = source.dates[key];
   if(item.constructor != Date) continue;
   this.Add(item);
  }
 },
 Clear: function() {
  if(this.count > 0) {
   this.dates = { };
   this.count = 0;
  }
 },
 Equals: function(selection) {
  if(this.count != selection.count)
   return false;
  for(var key in this.dates) {
   if(this.dates[key].constructor != Date) continue;
   if(!selection.ContainsKey(key))
    return false;
  }
  return true;
 },
 Contains: function(date) {
  var key = this.GetKey(date);
  return this.ContainsKey(key);
 },
 ContainsKey: function(key) {
  return !!this.dates[key];
 },
 Add: function(date) {
  var key = this.GetKey(date);
  if(!this.ContainsKey(key)) {
   this.dates[key] = ASPxClientCalendar.CloneDate(date);
   this.count++;
  }
 },
 AddArray: function(dates) {
  for(var i = 0; i < dates.length; i++)
   this.Add(dates[i]);
 },
 AddRange: function(start, end)  {
  if(end < start) {
   this.AddRange(end, start);
   return;
  }
  var count = ASPxClientCalendar.GetDaysInRange(start, end);
  var date = ASPxClientCalendar.CloneDate(start);  
  for(var i = 0; i < count; i++) {
   this.Add(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  }
 },
 AddWeek: function(startDate) {
  this.AddRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
 },
 Remove: function(date) {
  var key = this.GetKey(date);
  if(this.ContainsKey(key)) {
   delete this.dates[key];
   this.count--;
  }
 },
 RemoveArray: function(dates) {
  for(var i = 0; i < dates.length; i++)
   this.Remove(dates[i]);
 },
 RemoveRange: function(start, end) {
  if(end < start) {
   this.RemoveRange(end, start);
   return;
  }
  var count = ASPxClientCalendar.GetDaysInRange(start, end);
  var date = ASPxClientCalendar.CloneDate(start);  
  for(var i = 0; i < count; i++) {
   this.Remove(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  }
 },
 RemoveWeek: function(startDate) {
  this.RemoveRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
 },
 GetDates: function() {
  var result = [ ];
  for(var key in this.dates) {
   var item = this.dates[key];
   if(item.constructor != Date) continue;
   result.push(ASPxClientCalendar.CloneDate(item));
  }
  return result;  
 },
 GetFirstDate: function() {
  if(this.count == 0)
   return null;
  for(var key in this.dates) {
   var item = this.dates[key];
   if(item.constructor != Date) continue;
   return ASPxClientCalendar.CloneDate(item);
  }
  return null;
 },
 GetKey: function(date) {  
  return _aspxGetInvariantDateString(date);
 }
});
ASPxClientCalendarSelectionTransaction = _aspxCreateClass(null, {
 constructor: function(calendar) {
  this.calendar = calendar;
  this.isActive = false;
  this.backup = new ASPxClientCalendarSelection();
  this.selection = new ASPxClientCalendarSelection;
 },
 Start: function() {
  if(this.isActive)
   this.Rollback();
  this.backup.Assign(this.calendar.selection);
  this.selection.Clear();
  this.isActive = true;
  __aspxActiveCalendar = this.calendar;
 },
 Commit: function() {  
  this.calendar.ApplySelectionByDiff(this.selection, true);
  this.Reset();
 },
 Rollback: function() {
  this.calendar.ApplySelectionByDiff(this.backup);  
  this.Reset();
 },
 Reset: function() {
  this.backup.Clear();
  this.selection.Clear();
  this.isActive = false;
  __aspxActiveCalendar = null;
 },
 CopyFromBackup: function() {
  this.selection.Assign(this.backup);
 },
 IsChanged: function() {
  return !this.backup.Equals(this.selection);
 }
});
ASPxClientCalendarView = _aspxCreateClass(null, {
 constructor: function(calendar, row, column) {
  this.row = row;
  this.column = column;
  this.calendar = calendar;
  var temp = column + row;
  this.isLowBoundary = temp == 0;
  this.isHighBoundary = temp == calendar.rows + calendar.columns - 2;
  this.visibleDate = null;
  this.startDate = null;
  this.dayFunctions = {};
  this.dayFunctionsWithWeekSelection = {};
 },
 Initialize: function() {
  this.dayCellCache = {};
  this.dayStyleCache = {};
  this.UpdateDate();
  this.UpdateSelection(this.calendar.selection.GetDates(), true);
  this.MakeDisabledStateItems();
 },
 AttachMouseEvents: function(eventMethod, styleMethod) {
  var index;
  var cell;
  if (this.calendar.showDayHeaders) {
   var headCells = this.GetMonthTable().rows[0].cells;
   var dayNameIndex = 0;
   if (this.calendar.showWeekNumbers) {
    dayNameIndex++;
    cell = headCells[0];
    if (this.calendar.enableMulti) {
     eventMethod(cell, "click", ASPxClientCalendar.AnonymousHandlers.SelectMonth(this.calendar.name, this.row, this.column));
     styleMethod(cell, "cursor", _aspxGetPointerCursor());
    }
    this.AttachCancelSelect(eventMethod, cell);
   }
   for (var j = 0; j < 7; j++)
    this.AttachCancelSelect(eventMethod, headCells[dayNameIndex++]);
  }
  for (var i = 0; i < __aspxCalendarWeekCount; i++) {
   if (this.calendar.showWeekNumbers) {
    cell = this.GetWeekNumberCell(i);
    if (this.calendar.enableMulti)
     this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(7 * i, true));
    else
     this.AttachCancelSelect(eventMethod, cell);
   }
   var date;
   for (var j = 0; j < 7; j++) {
    index = i * 7 + j;
    cell = this.GetDayCell(index);
    date = this.GetDateByIndex(index);
    if(!this.calendar.enableMulti && this.IsDateVisible(date) && this.calendar.IsDateInRange(date) && !this.calendar.IsDateDisabled(date)) {
     if (!cell.style.cursor || cell.style.cursor == _aspxGetPointerCursor())
      styleMethod(cell, "cursor", _aspxGetPointerCursor());
    }
    this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(index, false));
   }
  }
 },
 AttachDayMouseEvents: function(method, cell, handler) {
  var types = ["down", "up", "over"];
  for (var i = 0; i < types.length; i++)
   method(cell, "mouse" + types[i], handler);
 },
 AttachCancelSelect: function(method, element) {
  method(element, "mouseup", aspxCalCancelSelect);
 },
 GetDayMouseEventFunction: function(index, selectWeeks) {
  var hash = selectWeeks ? this.dayFunctionsWithWeekSelection : this.dayFunctions;
  if (!hash[index])
   hash[index] = ASPxClientCalendar.AnonymousHandlers.DayMouseEvent(this.calendar.name, this.row, this.column, index, selectWeeks);
  return hash[index];
 },
 UpdateDate: function() {
  this.visibleDate = ASPxClientCalendar.AddMonths(this.calendar.visibleDate,
   this.row * this.calendar.columns + this.column);
  var date = ASPxClientCalendar.CloneDate(this.visibleDate);
  date.setDate(1);
  var offset = date.getDay() - this.calendar.firstDayOfWeek;
  if (offset < 0)
   offset += 7;
  this.startDate = ASPxClientCalendar.AddDays(date, -offset);
 },
 GetDateByIndex: function(index) {
  return ASPxClientCalendar.AddDays(this.startDate, index);
 },
 GetIndexByDate: function(date) {
  return ASPxClientCalendar.GetDaysInRange(this.startDate, date) - 1;
 },
 IsDateOtherMonth: function(date) {
  if (date == null)
   return false;
  return date.getMonth() != this.visibleDate.getMonth() ||
   date.getFullYear() != this.visibleDate.getFullYear();
 },
 GetDayCell: function(index) {
  if(_aspxIsExistsElement(this.dayCellCache[index]))
   return this.dayCellCache[index];
  var mt = this.GetMonthTable();
  var colIndex = index % 7;
  var rowIndex = (index - colIndex) / 7;
  if (this.calendar.showDayHeaders)
   rowIndex++;
  if (this.calendar.showWeekNumbers)
   colIndex++;
  var cell = mt.rows[rowIndex].cells[colIndex];
  this.dayCellCache[index] = cell;
  return cell;
 },
 GetMonthTable: function() {
  return this.GetCachedElementById("mt");
 },
 GetMonthCell: function() {
  return this.GetCachedElementById("mc");
 },
 GetWeekNumberCell: function(index) {
  if (this.calendar.showDayHeaders)
   index++;
  return this.GetMonthTable().rows[index].cells[0];
 },
 GetPrevYearCell: function() {
  return this.GetCachedElementById("PYC");
 },
 GetPrevMonthCell: function() {
  return this.GetCachedElementById("PMC");
 },
 GetTitleCell: function() {
  return this.GetCachedElementById("TC");
 },
 GetTitleElement: function() {
  return this.GetCachedElementById("T");
 },
 GetNextMonthCell: function() {
  return this.GetCachedElementById("NMC");
 },
 GetNextYearCell: function() {
  return this.GetCachedElementById("NYC");
 },
 Update: function() {
  this.dayStyleCache = {};
  this.UpdateDate();
  this.UpdateDays();
  this.UpdateTitle();
  this.UpdateSelection(this.calendar.selection.GetDates(), true);
 },
 UpdateDays: function() {
  var date = ASPxClientCalendar.CloneDate(this.startDate);
  var offset = this.calendar.firstDayOfWeek - 1;
  if (offset < 0)
   offset += 7;
  var weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
  var cell;
  for (var i = 0; i < __aspxCalendarWeekCount; i++) {
   if (this.calendar.showWeekNumbers)
    this.GetWeekNumberCell(i).innerHTML = (weekNumber < 10 ? "0" : "") + weekNumber.toString();
   for (var j = 0; j < 7; j++) {
    cell = this.GetDayCell(i * 7 + j);
    cell.innerHTML = this.IsDateVisible(date) ? date.getDate() : "&nbsp;";
    this.ApplyDayCellStyle(cell, date);
    date = ASPxClientCalendar.AddDays(date, 1);
   }
   if (++weekNumber > 52)
    weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
  }
 },
 UpdateTitle: function() {
  var el = this.GetTitleElement();
  if (!el) return;
  if (!this.titleFormatter) {
   this.titleFormatter = new ASPxDateFormatter();
   this.titleFormatter.SetFormatString(this.calendar.rtl ? "MMMM yyyy" : __aspxCultureInfo.yearMonth);
  }
  el.innerHTML = this.titleFormatter.Format(this.visibleDate);
 },
 UpdateSelection: function(dates, showSelection) {
  var index;
  var maxIndex = 7 * __aspxCalendarWeekCount - 1;
  for (var i = 0; i < dates.length; i++) {
   index = this.GetIndexByDate(dates[i]);
   if (index < 0 || index > maxIndex || !this.IsDateVisible(dates[i]))
    continue;
   this.ApplySelectionToCell(index, showSelection);
  }
 },
 ApplySelectionToCell: function(index, showSelection) {
  var cell = this.GetDayCell(index);
  if (showSelection) {
   var info;
   if (!this.dayStyleCache[index]) {
    var backup = new ASPxClientCalendarStyleInfo();
    backup.Import(cell);
    this.dayStyleCache[index] = backup;
    info = backup.Clone();
   } else
    info = this.dayStyleCache[index].Clone();
   this.calendar.ImportEtalonStyle(info, "DS");
  } else
   info = this.dayStyleCache[index];
  info.Apply(cell);
 },
 ApplyDayCellStyle: function(cell, date) {
  cell.style.cursor = "";
  var cal = this.calendar;
  var info = new ASPxClientCalendarStyleInfo();
  var needPointer = false;
  cal.ImportEtalonStyle(info, "D");
  if (this.IsDateVisible(date)) {
   if (cal.IsDateWeekend(date))
    cal.ImportEtalonStyle(info, "DW");
   if (this.IsDateOtherMonth(date))
    cal.ImportEtalonStyle(info, "DA");
   if(!cal.IsDateInRange(date))
    cal.ImportEtalonStyle(info, "DO");
   if(cal.IsDateDisabled(date)) {
    cal.ImportEtalonStyle(info, "DDD");
   }
   if (ASPxClientCalendar.AreDatesEqual(this.GetActualTodayDate(), date))
    cal.ImportEtalonStyle(info, "DT");
   if (!cal.clientEnabled)
    cal.ImportEtalonStyle(info, "DD");
   else if (!cal.enableMulti)
    needPointer = true;
  }
  info.Apply(cell);
  if (needPointer)
   _aspxSetPointerCursor(cell);
 },
 GetActualTodayDate: function() {
  if (!this.calendar || !this.calendar.actualTodayDate)
   return new Date();
  return this.calendar.actualTodayDate;
 },
 GetIDPostfix: function() {
  return "_" + this.row.toString() + "x" + this.column.toString();
 },
 GetCachedElementById: function(postfix) {
  if (this.calendar.IsMultiView())
   postfix += this.GetIDPostfix();
  return this.calendar.GetCachedElementById(this.calendar.name + "_" + postfix);
 },
 IsDateVisible: function(date) {
  var result = !this.calendar.IsMultiView() || !this.IsDateOtherMonth(date);
  if (!result) {
   result = result || this.isLowBoundary && date <= this.visibleDate ||
    this.isHighBoundary && date >= this.visibleDate;
  }
  return result;
 },
 MakeDisabledStateItems: function() {
  var cells = this.GetAuxCells();
  for (var i = 0; i < cells.length; i++)
   this.AddAuxDisabledStateItem(cells[i], this.GetAuxId(i));
  var element = this.GetTitleCell();
  if (element)
   this.AddHeaderDisabledStateItem(element);
  var element = this.GetTitleElement();
  if (element)
   this.AddHeaderDisabledStateItem(element);
 },
 AddAuxDisabledStateItem: function(element, id) {
  var cell = this.calendar.GetEtalonStyleCell("DD");
  element.id = id;
  aspxGetStateController().AddDisabledItem(id, cell.className, cell.style.cssText, null, null, null);
 },
 AddHeaderDisabledStateItem: function(element) {
  var cell = this.calendar.GetEtalonStyleCell("DD");
  aspxGetStateController().AddDisabledItem(element.id, cell.className, cell.style.cssText, null, null, null);
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetPrevYearCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  var element = this.GetPrevMonthCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  var element = this.GetTitleElement();
  if (element) {
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
   this.ChangeTitleElementEnabledAttributes(element, _aspxChangeStyleAttributesMethod(enabled));
  }
  var element = this.GetNextMonthCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  var element = this.GetNextYearCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  if (this.calendar.enabled && !this.calendar.readOnly)
   this.AttachMouseEvents(_aspxChangeEventsMethod(enabled), _aspxInitiallyChangeStyleAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled) {
  this.SetAuxCellsEnabled(enabled);
  this.SetHeaderCellsEnabled(enabled);
 },
 ChangeTitleElementEnabledAttributes: function(element, method) {
  method(element, "cursor");
 },
 ChangeButtonEnabledAttributes: function(element, method) {
  method(element, "onclick");
  method(element, "ondblclick");
 },
 SetAuxCellsEnabled: function(enabled) {
  var cells = this.GetAuxCells();
  for (var i = 0; i < cells.length; i++)
   aspxGetStateController().SetElementEnabled(cells[i], enabled);
 },
 SetHeaderCellsEnabled: function(enabled) {
  var element = this.GetPrevYearCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetPrevMonthCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetTitleCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetTitleElement();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetNextMonthCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetNextYearCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 GetAuxCells: function() {
  if (this.auxCells == null) {
   this.auxCells = [];
   var table = this.GetMonthTable();
   for (var i = 0; i < table.rows.length; i++) {
    var row = table.rows[i];
    if (i == 0 && this.calendar.showDayHeaders) {
     for (var j = 0; j < row.cells.length; j++)
      this.auxCells.push(row.cells[j]);
    }
    if (i > 0 && this.calendar.showWeekNumbers)
     this.auxCells.push(row.cells[0]);
   }
  }
  return this.auxCells;
 },
 GetAuxId: function(index) {
  return this.calendar.name + "_AUX_" + this.row + "_" + this.column + "_" + index;
 }
});
ASPxClientCalendarFastNavigation = _aspxCreateClass(null, {
 constructor: function(calendar) {
  this.calendar = calendar;
  this.activeMonth = -1;
  this.activeYear = -1;
  this.startYear = -1;
  this.activeView = null;
  this.InitializeUI();  
 },
 InitializeUI: function() {
  var item;
  var prefix = this.GetId();
  for(var m = 0; m < 12; m++) {
   item = this.GetMonthItem(m);
   if(!_aspxIsExistsElement(item))
    break;
   item.id = prefix + "_M" + m;
   _aspxAttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavMonthClick(this.calendar.name, m));
  }
  for(var i = 0; i < 10; i++) {
   item = this.GetYearItem(i);
   if(!_aspxIsExistsElement(item))
    break;   
   item.id = prefix + "_Y" + i;
   _aspxAttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavYearClick(this.calendar.name, i));
  }
  _aspxAttachEventToElement(this.GetPopup().GetWindowElement(-1), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.calendar.name));
 },
 Show: function() {
  this.GetPopup().ShowAtElement(this.activeView.GetTitleElement());
 },
 Hide: function() {
  this.GetPopup().Hide();
 },
 SetMonth: function(month) {
  if(month != this.activeMonth) {
   var prevCell = this.GetMonthItem(this.activeMonth);
   var cell = this.GetMonthItem(month);
   if(_aspxIsExistsElement(prevCell))
    this.ApplyItemStyle(prevCell, false, "M");
   this.ApplyItemStyle(cell, true, "M");
   this.activeMonth = month;   
  } 
 },
 ShiftMonth: function(offset) {
  var month = (this.activeMonth + offset) % 12;
  month = (month < 0) ? month + 12 : month;
  this.SetMonth(month);
 },
 SetYear: function(year) {
  var startYear = Math.floor(year / 10) * 10;
  this.SetStartYear(startYear);
  this.SetYearIndex(year - startYear);
 },
 SetYearIndex: function(index) {
  var prevIndex = this.activeYear - this.startYear;
  if(index != prevIndex) {
   var prevCell = this.GetYearItem(prevIndex);
   if(_aspxIsExistsElement(prevCell))
    this.ApplyItemStyle(prevCell, false, "Y");
   var cell = this.GetYearItem(index);
   this.ApplyItemStyle(cell, true, "Y");
   this.activeYear = index + this.startYear;
  } 
 },
 SetStartYear: function(year) {
  if(this.startYear == year) return;
  this.startYear = year;  
  this.PrepareYearList();
 },
 ShiftYear: function(offset) {
  this.SetYear(this.activeYear + offset);
 },
 ShiftStartYear: function(offset) {
  this.SetStartYear(this.startYear + offset);
 },
 ApplyChanges: function() {
  this.GetPopup().Hide();  
  var offset = ASPxClientCalendar.GetOffsetInMonths(this.calendar.visibleDate, new Date(this.activeYear, this.activeMonth, 1));
  offset -= this.activeView.row * this.calendar.columns + this.activeView.column;  
  if(offset != 0) {
   var date = ASPxClientCalendar.AddMonths(this.calendar.visibleDate, offset);
   this.calendar.OnVisibleMonthChanged(date);  
  }
  this.calendar.OnMainElementClick();
 },
 CancelChanges: function() {
  this.GetPopup().Hide();
  this.calendar.OnMainElementClick();
 },
 Prepare: function() {
  var date = this.activeView.visibleDate;
  this.activeYear = date.getFullYear();
  this.activeMonth = date.getMonth();
  this.startYear = ASPxClientCalendar.GetDecadeStartYear(this.activeYear);
  this.PrepareMonthList();
  this.PrepareYearList();
 }, 
 PrepareMonthList: function() {  
  var item;
  for(var month = 0; month < 12; month++) {
   item = this.GetMonthItem(month);
   if(item == null)
    return;
   this.ApplyItemStyle(item, month == this.activeMonth, "M");
  }  
 },
 PrepareYearList: function() {
  var year = this.startYear;
  var item;
  for(var index = 0; index < 10; index++) {
   item = this.GetYearItem(index);
   if(item == null)
    return;
   item.innerHTML = year;
   this.ApplyItemStyle(item, year == this.activeYear, "Y");
   year++;
  }   
 },
 GetMonthItem: function(month) {
  var t = this.GetCachedElementById("m");
  if(!_aspxIsExistsElement(t))
   return null;
  var colIndex = month % 4;
  var rowIndex = (month - colIndex) / 4;
  return t.rows[rowIndex].cells[colIndex];
 },
 GetYearItem: function(index) {
  var t = this.GetCachedElementById("y");
  if(!_aspxIsExistsElement(t) || index < 0 || index > 9)
   return null;
  var colIndex = index % 5;
  var rowIndex = (index - colIndex) / 5;
  if(rowIndex == 0)
   colIndex++;
  return t.rows[rowIndex].cells[colIndex];
 },
 GetPopup: function() {
  return aspxGetControlCollection().Get(this.GetId());
 },
 ApplyItemStyle: function(item, isSelected, type) {
  var info = new ASPxClientCalendarStyleInfo();
  this.calendar.ImportEtalonStyle(info, "FN" + type);
  if(isSelected)
   this.calendar.ImportEtalonStyle(info, "FN" + type + "S");
  info.Apply(item);  
 },
 GetCachedElementById: function(postfix) { 
  return this.calendar.GetCachedElementById(this.GetId() + "_" + postfix);
 },
 GetId: function() {
  return this.calendar.name + "_FNP";
 },
 OnArrowUp: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(-5);
  else
   this.ShiftMonth(-4);
 },
 OnArrowDown: function(evt) {  
  if(!evt.shiftKey)
   this.ShiftYear(5);
  else
   this.ShiftMonth(4);
 },
 OnArrowLeft: function(evt) { 
  if(!evt.shiftKey)
   this.ShiftYear(-1);
  else
   this.ShiftMonth(-1);
 },
 OnArrowRight: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(1);
  else
   this.ShiftMonth(1);
 },
 OnPageUp: function(evt) {
  this.ShiftYear(-10);
 },
 OnPageDown: function(evt) {
  this.ShiftYear(10);
 },
 OnEnter: function() {
  this.ApplyChanges();
 },
 OnEscape: function() {
  this.CancelChanges();
 },
 OnMonthClick: function(month) {
  this.SetMonth(month);
 },
 OnYearClick: function(index) {
  this.SetYearIndex(index);
 },
 OnYearShuffle: function(offset) {
  this.ShiftStartYear(offset);
 },
 OnOkClick: function() {
  this.ApplyChanges();
 },
 OnCancelClick: function() {
  this.CancelChanges();
 }
});
ASPxClientCalendarStyleInfo = _aspxCreateClass(null, {
 constructor: function() {
  this.className = "";
  this.cssText = "";
 },
 Clone: function() {
  var clone = new ASPxClientCalendarStyleInfo();
  clone.className = this.className;
  clone.cssText = this.cssText;
  return clone;
 },
 Apply: function(element) {
  if(element.className != this.className)
   element.className = this.className;
  if(element._style != this.cssText) {
   element.style.cssText = this.cssText; 
   element._style = this.cssText; 
  } 
 },
 Import: function(element) {
  if(element.className.length > 0) {
   if(this.className.length > 1)
    this.className += " ";
   this.className +=  element.className;
  }  
  var cssText = element.style.cssText;
  if(cssText.length > 0) {
   var pos = cssText.length - 1;
   while(pos > -1 && cssText.charAt(pos) == " ")
    --pos;
   if(cssText.charAt(pos) != ";")
    cssText += ";";
   this.cssText += cssText;
  }
 }  
});
ASPxClientCalendarSelectionEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, selection){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.selection = selection;
 }
});
function aspxCalShiftMonth(name, monthOffset) {
 if(monthOffset != 0) {
  var edit = aspxGetControlCollection().Get(name);
  if(edit != null) {
   edit.OnShiftMonth(monthOffset);
  }
 }
}
function aspxCalTodayClick(name) { 
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnTodayClick();
}
function aspxCalClearClick(name) { 
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnClearClick();
}
function aspxCalTitleClick(name, row, column) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnTitleClick(row, column);
}
function aspxCalFNYShuffle(name, offset) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.fastNavigation.OnYearShuffle(offset);
}
function aspxCalFNBClick(name, action) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) {
  switch(action) {
   case "ok":
    edit.fastNavigation.OnOkClick(); 
    break;
   case "cancel":
    edit.fastNavigation.OnCancelClick();
    break;
  }    
 }
}
function aspxCalDocMouseUp(evt) {
 var target = _aspxGetEventSource(evt);
 if(__aspxActiveCalendar != null && _aspxIsExistsElement(target)) {
  __aspxActiveCalendar.forceMouseDown = false;
  if(__aspxActiveCalendar.isMouseDown) {   
   for(var key in __aspxActiveCalendar.views) {   
    var view = __aspxActiveCalendar.views[key];
    if(view.constructor != ASPxClientCalendarView) continue;
    var monthCell = view.GetMonthCell();
    var parent = target.parentNode;
    while(_aspxIsExistsElement(parent)) {
     if(parent == monthCell)
      return;
     parent = parent.parentNode;
    }
   }
   __aspxActiveCalendar.OnSelectionCancelled();   
  }
  __aspxActiveCalendar = null;
 }
}
function aspxCalCancelSelect() {
 if(__aspxActiveCalendar != null) {
  __aspxActiveCalendar.forceMouseDown = false;
  __aspxActiveCalendar.OnSelectionCancelled();  
 }
}
MVCxClientCalendar = _aspxCreateClass(ASPxClientCalendar, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  ASPxClientCalendar.prototype.InlineInitialize.call(this);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 GetCallbackParams: function() {
  var params = {};
  $("#" + this.name).parent().find("input").each(function(){
   params[this.name] = this.value;
  });
  return params;
 },
 EvalCallbackResult: function(resultString){
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2){
   var resultObj = ASPxClientCalendar.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   var resultHtml = eval(resultStringParts[1]);
   for(var index = 0; index < resultHtml.length; index++){
    resultObj.result[index] = resultHtml[index];
   }
   return resultObj;
  }
  return ASPxClientCalendar.prototype.EvalCallbackResult.call(this, resultString);
 }
});
__aspxCaptchaRefreshCommand = "R";
__aspxCaptchaImageIDPostfix = "_IMG";
__aspxCaptchaTextBoxIDPostfix = "_TB";
__aspxCaptchaRefreshButtonIDPostfix = "_RB";
__aspxCaptchaRefreshButtonTextSpanIDPostfix = "_RTS";
ASPxClientCaptcha = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.refreshButtonOnClick = new Function("aspxCaptchaRefresh('" + this.name + "')");
  var image = this.GetImage();
  _aspxAttachEventToElement(image, "load", new Function("aspxCaptchaImageLoaded('" + this.name + "')"));
  var refreshButton = this.GetRefreshButton();
  if(refreshButton != null)
   _aspxAttachEventToElement(refreshButton, "click", this.refreshButtonOnClick); 
  this.allowMultipleCallbacks = false;
 },
 GetImage: function() {
  return _aspxGetElementById(this.name + __aspxCaptchaImageIDPostfix);
 },
 GetRefreshButton: function() {
  return _aspxGetElementById(this.name + __aspxCaptchaRefreshButtonIDPostfix);
 },
 GetRefreshButtonTextSpan: function() {
  return _aspxGetElementById(this.name + __aspxCaptchaRefreshButtonTextSpanIDPostfix);
 },
 GetEditor: function() {
  return aspxGetControlCollection().Get(this.name + __aspxCaptchaTextBoxIDPostfix);
 },
 HideLoadingPanelOnCallback: function() {
  return false;
 },
 CreateCallback: function(arg, command, callbackInfo) {
  this.ShowLoadingElements();
  ASPxClientControl.prototype.CreateCallback.call(this, arg, command);
 },
 DoBeginCallback: function(command){
  var editor = this.GetEditor();
  if(editor != null) editor.SetIsValid(true);
  ASPxClientControl.prototype.DoBeginCallback.call(this, command);
 },
 ShowLoadingPanel: function(){
  var image = this.GetImage();
  image.style.visibility = "hidden";
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement(), image);
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement(), this.GetImage());
 },
 GetCallbackAnimationElement: function() {
  return this.GetImage();
 },
 OnCallback: function(result) {
  var image = this.GetImage();
  image.src = result;
 },
 SetEnabled: function(enabled) {
  if(enabled == this.clientEnabled)
   return;
  ASPxClientControl.prototype.SetEnabled.call(this, enabled);
  var refreshButton = this.GetRefreshButton();
  if(refreshButton == null)
   return;
  aspxGetStateController().SetElementEnabled(this.GetRefreshButton(), enabled);
  aspxGetStateController().SetElementEnabled(this.GetRefreshButtonTextSpan(), enabled);
  var eventsMethod = _aspxChangeEventsMethod(enabled);
  eventsMethod(refreshButton, "click", this.refreshButtonOnClick);
  refreshButton.style.cursor = enabled ? "pointer" : "default";
 },
 Focus: function () {
  var editor = this.GetEditor();
  if (editor)
   editor.SetFocus();
 },
 Refresh: function() {
  if(!this.callBack) {
   if(this.isInitialized)
    this.SendPostBack(__aspxCaptchaRefreshCommand);
   return;
  }
  this.CreateCallback(__aspxCaptchaRefreshCommand);
 }
});
ASPxClientCaptcha.Cast = ASPxClientControl.Cast;
function aspxCaptchaRefresh(name) {
 var control = aspxGetControlCollection().Get(name); 
 if(control != null)
  control.Refresh();
}
function aspxCaptchaImageLoaded(name) {
 var control = aspxGetControlCollection().Get(name); 
 if(control == null)
  return;
 var image = control.GetImage();
 control.HideLoadingElements();
 image.style.visibility = "";
}
MVCxClientCaptcha = _aspxCreateClass(ASPxClientCaptcha, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, null) };
  ASPxClientCaptcha.prototype.InlineInitialize.call(this);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo){
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 }
});
var __aspxColorIndicatorIdPostfix = "_CI";
var __aspxColorNestedControlIdPostfix = "_CNC";
var __aspxColorNameArray = {
 aliceblue: 'f0f8ff',
 antiquewhite: 'faebd7',
 aqua: '00ffff',
 aquamarine: '7fffd4',
 azure: 'f0ffff',
 beige: 'f5f5dc',
 bisque: 'ffe4c4',
 black: '000000',
 blanchedalmond: 'ffebcd',
 blue: '0000ff',
 blueviolet: '8a2be2',
 brown: 'a52a2a',
 burlywood: 'deb887',
 cadetblue: '5f9ea0',
 chartreuse: '7fff00',
 chocolate: 'd2691e',
 coral: 'ff7f50',
 cornflowerblue: '6495ed',
 cornsilk: 'fff8dc',
 crimson: 'dc143c',
 cyan: '00ffff',
 darkblue: '00008b',
 darkcyan: '008b8b',
 darkgoldenrod: 'b8860b',
 darkgray: 'a9a9a9',
 darkgreen: '006400',
 darkkhaki: 'bdb76b',
 darkmagenta: '8b008b',
 darkolivegreen: '556b2f',
 darkorange: 'ff8c00',
 darkorchid: '9932cc',
 darkred: '8b0000',
 darksalmon: 'e9967a',
 darkseagreen: '8fbc8f',
 darkslateblue: '483d8b',
 darkslategray: '2f4f4f',
 darkturquoise: '00ced1',
 darkviolet: '9400d3',
 deeppink: 'ff1493',
 deepskyblue: '00bfff',
 dimgray: '696969',
 dodgerblue: '1e90ff',
 feldspar: 'd19275',
 firebrick: 'b22222',
 floralwhite: 'fffaf0',
 forestgreen: '228b22',
 fuchsia: 'ff00ff',
 gainsboro: 'dcdcdc',
 ghostwhite: 'f8f8ff',
 gold: 'ffd700',
 goldenrod: 'daa520',
 gray: '808080',
 green: '008000',
 greenyellow: 'adff2f',
 honeydew: 'f0fff0',
 hotpink: 'ff69b4',
 indianred : 'cd5c5c',
 indigo : '4b0082',
 ivory: 'fffff0',
 khaki: 'f0e68c',
 lavender: 'e6e6fa',
 lavenderblush: 'fff0f5',
 lawngreen: '7cfc00',
 lemonchiffon: 'fffacd',
 lightblue: 'add8e6',
 lightcoral: 'f08080',
 lightcyan: 'e0ffff',
 lightgoldenrodyellow: 'fafad2',
 lightgrey: 'd3d3d3',
 lightgreen: '90ee90',
 lightpink: 'ffb6c1',
 lightsalmon: 'ffa07a',
 lightseagreen: '20b2aa',
 lightskyblue: '87cefa',
 lightslateblue: '8470ff',
 lightslategray: '778899',
 lightsteelblue: 'b0c4de',
 lightyellow: 'ffffe0',
 lime: '00ff00',
 limegreen: '32cd32',
 linen: 'faf0e6',
 magenta: 'ff00ff',
 maroon: '800000',
 mediumaquamarine: '66cdaa',
 mediumblue: '0000cd',
 mediumorchid: 'ba55d3',
 mediumpurple: '9370d8',
 mediumseagreen: '3cb371',
 mediumslateblue: '7b68ee',
 mediumspringgreen: '00fa9a',
 mediumturquoise: '48d1cc',
 mediumvioletred: 'c71585',
 midnightblue: '191970',
 mintcream: 'f5fffa',
 mistyrose: 'ffe4e1',
 moccasin: 'ffe4b5',
 navajowhite: 'ffdead',
 navy: '000080',
 oldlace: 'fdf5e6',
 olive: '808000',
 olivedrab: '6b8e23',
 orange: 'ffa500',
 orangered: 'ff4500',
 orchid: 'da70d6',
 palegoldenrod: 'eee8aa',
 palegreen: '98fb98',
 paleturquoise: 'afeeee',
 palevioletred: 'd87093',
 papayawhip: 'ffefd5',
 peachpuff: 'ffdab9',
 peru: 'cd853f',
 pink: 'ffc0cb',
 plum: 'dda0dd',
 powderblue: 'b0e0e6',
 purple: '800080',
 red: 'ff0000',
 rosybrown: 'bc8f8f',
 royalblue: '4169e1',
 saddlebrown: '8b4513',
 salmon: 'fa8072',
 sandybrown: 'f4a460',
 seagreen: '2e8b57',
 seashell: 'fff5ee',
 sienna: 'a0522d',
 silver: 'c0c0c0',
 skyblue: '87ceeb',
 slateblue: '6a5acd',
 slategray: '708090',
 snow: 'fffafa',
 springgreen: '00ff7f',
 steelblue: '4682b4',
 tan: 'd2b48c',
 teal: '008080',
 thistle: 'd8bfd8',
 tomato: 'ff6347',
 turquoise: '40e0d0',
 violet: 'ee82ee',
 violetred: 'd02090',
 wheat: 'f5deb3',
 white: 'ffffff',
 whitesmoke: 'f5f5f5',
 yellow: 'ffff00',
 yellowgreen: '9acd32'
};
ASPxClientColorEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.color = null;
  this.allowNull = true;
  this.colorOnError = "u";
  this.mouseDownElement = null;
  this.ColorChanged = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  if(this.GetColorNestedControl().enableCustomColors)
   _aspxAttachEventToElement(this.GetColorNestedControl().GetColorSelectorElement(), ASPxClientTouchUI.touchMouseDownEventName, this.OnMouseDownColorSelector.aspxBind(this));
  this.GetColorNestedControl().ColorChanged.AddHandler(this.OnColorNestedControlColorChanged.aspxBind(this));
  this.GetColorNestedControl().ShouldBeClosed.AddHandler(this.HideDropDown.aspxBind(this));
  this.GetColorNestedControl().CustomColorTableUpdated.AddHandler(this.UpdateState.aspxBind(this));
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
 },
 GetColorIndicatorCell: function() {
  return this.GetChild(__aspxColorIndicatorIdPostfix);
 },
 GetColorNestedControl: function() {
  var pc = this.GetPopupControl();
  return pc ? aspxGetControlCollection().Get(pc.name + __aspxColorNestedControlIdPostfix) : null;
 },
 ShowDropDownArea: function(isRaiseEvent) {
  this.GetColorNestedControl().SetColorSelectorDisplay(false);
  this.GetColorNestedControl().SetColorTablesDisplay(true);
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
 },
 OnMouseDownColorSelector: function(e) {
  this.mouseDownElement = _aspxGetEventSource(e);
 },
 OnApplyChanges: function() {
  this.OnTextChanged();
 },
 OnTab: function() {
  this.HideDropDown();
 },
 OnTextChanged: function() {
  this.UpdateColor();
 },
 OnColorNestedControlColorChanged: function(s, e) {
  this.SetTextInternal(s.GetColor());
  this.UpdateColor();
 },
 OnEnter: function() {
  if (!this.isInitialized) return true;
  if (this.droppedDown && this.GetColorNestedControl().IsColorSelectorDisplayed())
   this.GetColorNestedControl().OnOkButtonClick();
  else
   this.OnApplyChanges();
  return ASPxClientDropDownEditBase.prototype.OnEnter.call(this);
 },
 SetFocus: function() {
  if(this.mouseDownElement) {
   var isInput = this.mouseDownElement.tagName == "INPUT";
   var isButton = isInput && this.mouseDownElement.getAttribute('type') == "button";
   var isLabel = this.mouseDownElement.tagName == "LABEL";
   if (isInput && !isButton || isLabel) {
    _aspxSetFocus(this.mouseDownElement);
    return;
   }
  }
  ASPxClientDropDownEditBase.prototype.SetFocus.call(this);
 },
 UpdateColor: function() {
  var inputElement = this.GetInputElement();
  if (_aspxIsExistsElement(inputElement)) {
   var valueString = inputElement.value;
   var newColor = valueString != "" ? ASPxClientColorEdit.ParseColor(valueString) : "";
   this.ChangeColor(newColor);
  }
 },
 ChangeColor: function(newColor) {
  if (newColor === false) {
   switch (this.colorOnError) {
    case "u":
     newColor = this.color;
     break;
    default:
     newColor = null;
     break;
   }
  }
  if (!this.allowNull && (newColor == null || newColor == ""))
   newColor = this.color;
  var isNew = newColor ? this.color != newColor : !!this.color; 
  this.SetColor(newColor);
  if (isNew)
   this.OnValueChanged();
 },
 ChangeIndicatorColor: function(newColor) {
  var colorIndicator = this.GetColorIndicatorCell();
  colorIndicator.style.backgroundColor = newColor != null ? newColor : "";
 },
 GetFormattedColorString: function(color) {
  if (color == null)
   return "";
  return color.toUpperCase();
 },
 RaiseValueChangedEvent: function() {
  if (!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseColorChanged(processOnServer);
  return processOnServer;
 },
 UpdateState: function() {
  var state = this.GetColorNestedControl().GetState();
  this.UpdateStateInput(state);
  this.UpdateStateCookie(state);
 },
 UpdateStateInput: function(state) {
  var hiddenField = this.GetHiddenField();
  hiddenField.value = state;
 },
 UpdateStateCookie: function(customColorTableState) {
  if(this.cookieName == '') return;
  _aspxDelCookie(this.cookieName);
  _aspxSetCookie(this.cookieName, customColorTableState);
 },
 GetHiddenField: function() {
  if (!this.hiddenField)
   this.hiddenField = _aspxGetElementById(this.name + 'Colors');
  return this.hiddenField;
 },
 RaiseColorChanged: function(processOnServer) {
  if (!this.ColorChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ColorChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetValue: function() {
  return this.color;
 },
 SetValue: function(color) {
  this.color = color;
  ASPxClientDropDownEditBase.prototype.SetValue.call(this, this.GetFormattedColorString(this.color));
  this.GetColorNestedControl().SetColor(color);
  this.ChangeIndicatorColor(this.color);
 },
 GetText: function() {
  return this.GetFormattedColorString(this.color);
 },
 SetText: function(value) {
  ASPxClientDropDownEditBase.prototype.SetValue.call(this, value);
  this.UpdateColor();
 },
 GetColor: function() {
  if (this.color != null)
   return this.color.toUpperCase();
  return null;
 },
 SetColor: function(color) {
  this.SetValue(color);
 }
});
ASPxClientColorEdit.Cast = ASPxClientControl.Cast;
ASPxClientColorEdit.ParseColor = function(colorString) {
 var regExp = new RegExp("^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$");
 var color = __aspxColorNameArray[colorString.toLowerCase()];
 if (!color) {
  if (regExp.test(colorString))
   colorString = _aspxGetFullHexColor(colorString);
  color = _aspxColorToHexadecimal(colorString);
 }
 else 
  color = "#" + color;
 return regExp.test(color) ? color : false;
}
function _aspxGetFullHexColor(colorString) {
 if (colorString == "")
  return null;
 var color = colorString.replace("#", "");
 if (color.length == 3) {
  var newColor = ""; 
  for (var i = 0 ; i < 3; i++)
   newColor += color.charAt(i) + color.charAt(i);
   color = newColor;
 }
 return "#" + color;
}

(function () {
 ASPxClientTrackBarConsts = {
  BOTH_SCALE_POSITION_SYSTEM_CLASS_NAME: "dxeTBBScaleSys",
  CONTERNT_CONTAINER_SYSTEM_CLASS_NAME: "dxeTBContentContainerSys",
  DEC_BUTTON_ID: "_DB",
  DRAG_HANDLE_CHANGE_SPEED: 50,
  FIRST_ITEM_SYSTEM_CLASS_NAME: "dxeFItemSys",
  FOCUSED_MD_SYSTEM_CLASS_NAME: "dxeFocusedMDHSys",
  FOCUSED_SD_SYSTEM_CLASS_NAME: "dxeFocusedSDHSys",
  HORIZONTAL_ORIENTATION_SYSTEM_CLASS_NAME: "dxeTBHSys",
  INC_BUTTON_ID: "_IB",
  ITEM_SYSTEM_CLASS_NAME: "dxeTBItemSys",
  LAST_ITEM_SYSTEM_CLASS_NAME: "dxeLItemSys",
  LEFT_TOP_SCALE_POSITION_SYSTEM_CLASS_NAME: "dxeTBLTScaleSys",
  MAIN_DRAG_HANDLE_ID: "_MD",
  MASS_INC_DEC_DELAY: 300,
  REVERSED_DIRECTION_SYSTEM_CLASS_NAME: "dxeReversedDirectionSys",
  RIGHT_BOTTOM_SCALE_POSITION_SYSTEM_CLASS_NAME: "dxeTBRBScaleSys",
  SCALE_SYSTEM_CLASS_NAME: "dxeTBScaleSys",
  SECONDARY_DRAG_HANDLE_ID: "_SD",
  TICK_ELEMENT_POSTFIX: "_TK",
  VALUE_TOOLTIP_ZINDEX: 41998,
  VERTICAL_ORIENTATION_SYSTEM_CLASS_NAME: "dxeTBVSys"
 }
 ASPxClientTrackBarAnimationsConsts = {
  INC_DEC_ACCELERATOR_STEP: 0.2,
  TOOLTIP_ANIMATION_SPEED: 50,
  TOOLTIP_ANIMATION_QUALITY: 0.1,
  TRACK_ANIMATION_SPEED: 30,
  TRACK_ANIMATION_QUALITY: 0.7
 };
 window.ASPxClientTrackBarPosition = {
  Both: "Both",
  LeftOrTop: "LeftOrTop",
  None: "None",
  RightOrBottom: "RightOrBottom"
 };
 window.ASPxClientTrackBarDirection = {
  Normal: "Normal",
  Reversed: "Reversed"
 };
 window.ASPxClientTrackHighlightMode = {
  AlongBarHighlight: "AlongBarHighlight",
  HandlePosition: "HandlePosition",
  None: "None"
 };
 ASPxClientDragHandleDisplayMode = {
  OutsideTrack: "OutsideTrack",
  InsideTrack: "InsideTrack"
 };
 window.ASPxClientTrackBar = _aspxCreateClass(ASPxClientEdit, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.animationEnabled = true;
   this.appearValueToolTip = true;
   this.direction = ASPxClientTrackBarDirection.Normal;
   this.enableMouseWheel = true;
   this.isHorizontal = true;
   this.items = null;
   this.scaleLabelFormatString = "{0}";
   this.scaleLabelHighlightMode = ASPxClientTrackHighlightMode.None;
   this.scalePosition = ASPxClientTrackBarPosition.RightOrBottom;
   this.selectedClasses = [''];
   this.selectedCssArray = [''];
   this.showDragHandles = true;
   this.smallTickFrequency = 0;
   this.step = 1;
   this.largeTickInterval = 0;
   this.largeTickStartValue = null;
   this.largeTickEndValue = null;
   this.maxValue = 100;
   this.minValue = 0;
   this.valueChangedDelay = 0;
   this.valueToolTipFormat = '';
   this.valueToolTipPosition = ASPxClientTrackBarPosition.LeftOrTop;
   this.valueToolTipStyle = ['', ''];
   this.allowRangeSelection = false;
   this.barHighlightStartPos = 0;
   this.behaviorStrategy = null;
   this.dragHandleDisplayMode = ASPxClientDragHandleDisplayMode.OutsideTrack;
   this.elementCache = {};
   this.incDecAccelerator = 1;
   this.incDecInterval = null;
   this.incDecTimer = null;
   this.isAdjusted = false;
   this.isASPxTrackBar = true;
   this.isButtonPressed = false;
   this.isButtonsExist = true;
   this.isFirstMoveAction = true;
   this.isMainDragHandleFocused = true;
   this.isNormalDirection = true;
   this.isOutsideDragHandleDisplayMode = true;
   this.heldCallArray = [];
   this.movedElement = null;
   this.preventNextBarHighlightMouseClick = false;
   this.preventNextTrackMouseClick = false;
   this.preventNextScaleMouseClick = false;
   this.scaleMap = null;
   this.tickValue = {};
   this.valueChangedDelayTimer = null;
   this.sizingConfig.adjustControl = true;
   this.PositionChanging = new ASPxClientEvent();
   this.PositionChanged = new ASPxClientEvent();
   this.Track = new ASPxClientEvent();
   this.TrackStart = new ASPxClientEvent();
   this.TrackEnd = new ASPxClientEvent();
  },
  InlineInitialize: function () {
   ASPxClientEdit.prototype.InlineInitialize.call(this);
   this.filedsInitialize();
   this.applySystemCssClasses();
   if (this.getScaleElement()) {
    this.behaviorStrategy.buildScale();
    this.setTickElementIDs();
    this.generateStateItems();
   }
   if (this.enabled) {
    this.assignElementIDs();
    this.attachToEvents();
   }
   if (!this.clientEnabled)
    this.changeEnabledStateItems(false);
  },
  Initialize: function () {
   ASPxClientEdit.prototype.Initialize.call(this);
  },
  applySystemCssClasses: function () {
   var contentContainerElement = this.getContentContainer();
   var directionClassName = this.isNormalDirection ? "" : ASPxClientTrackBarConsts.REVERSED_DIRECTION_SYSTEM_CLASS_NAME;
   var orientationClassName = this.isHorizontal ? ASPxClientTrackBarConsts.HORIZONTAL_ORIENTATION_SYSTEM_CLASS_NAME :
    ASPxClientTrackBarConsts.VERTICAL_ORIENTATION_SYSTEM_CLASS_NAME;
   var scalePositionClassName = "";
   switch (this.scalePosition) {
    case ASPxClientTrackBarPosition.Both:
     scalePositionClassName = ASPxClientTrackBarConsts.BOTH_SCALE_POSITION_SYSTEM_CLASS_NAME;
     break;
    case ASPxClientTrackBarPosition.LeftOrTop:
     scalePositionClassName = ASPxClientTrackBarConsts.LEFT_TOP_SCALE_POSITION_SYSTEM_CLASS_NAME;
     break;
    case ASPxClientTrackBarPosition.RightOrBottom:
     scalePositionClassName = ASPxClientTrackBarConsts.RIGHT_BOTTOM_SCALE_POSITION_SYSTEM_CLASS_NAME;
   }
   var resultClass = directionClassName + " " + orientationClassName + " " + scalePositionClassName;
   contentContainerElement.className = resultClass + " " + ASPxClientTrackBarConsts.CONTERNT_CONTAINER_SYSTEM_CLASS_NAME;
   this.GetMainElement().className += " " + resultClass;
   var scaleElement = this.getScaleElement();
   if (scaleElement)
    scaleElement.className += " " + scalePositionClassName + " " + ASPxClientTrackBarConsts.SCALE_SYSTEM_CLASS_NAME;
   if (this.GetItemCount() > 0 && this.scalePosition !== ASPxClientTrackBarPosition.None) {
    var itemCollection = this.getTickCollection();
    if (itemCollection.length > 0)
     itemCollection[0].className += " " + ASPxClientTrackBarConsts.ITEM_SYSTEM_CLASS_NAME;
   }
   if(__aspxMSTouchUI) {
    var draggableElements = [this.getMainDragHandleElement(), this.getSecondaryDragHandleElement(), this.getBarHighlightElement()];
    for(var i in draggableElements){
     if(draggableElements[i])
      draggableElements[i].className += " " + ASPxClientTouchUI.msTouchDraggableClassName; 
    }
   }
  },
  assignElementIDs: function () {
   var name = this.name;
   var assignElementIDFunc = function (element, id) {
    if (element)
     element.id = name + id;
   };
   assignElementIDFunc(this.getButtonElement(true), ASPxClientTrackBarConsts.DEC_BUTTON_ID);
   assignElementIDFunc(this.getButtonElement(false), ASPxClientTrackBarConsts.INC_BUTTON_ID);
   assignElementIDFunc(this.getMainDragHandleElement(), ASPxClientTrackBarConsts.MAIN_DRAG_HANDLE_ID);
   assignElementIDFunc(this.getSecondaryDragHandleElement(), ASPxClientTrackBarConsts.SECONDARY_DRAG_HANDLE_ID);
  },
  filedsInitialize: function () {
   this.allowRangeSelection = !!this.getSecondaryDragHandleElement();
   this.isButtonsExist = this.isButtonElementsExist();
   if (!this.valueToolTipFormat)
    this.valueToolTipFormat = this.allowRangeSelection ? "{0}..{1}" : "{0}";
   this.isNormalDirection = this.direction === ASPxClientTrackBarDirection.Normal;
   var largeTickValue = this.largeTickInterval,
    smallTickValue = this.smallTickFrequency === 0 ? largeTickValue : largeTickValue / this.smallTickFrequency;
   this.tickValue = {
    small: smallTickValue,
    large: largeTickValue
   };
   this.isOutsideDragHandleDisplayMode =
    this.dragHandleDisplayMode === ASPxClientDragHandleDisplayMode.OutsideTrack;
   this.behaviorStrategy = !!this.items ? new ASPxTrackBarItemModeStrategy(this) :
    new ASPxTrackBarTickModeStrategy(this);
   this.behaviorStrategy.filedsInitialize();
  },
  generateStateItems: function () {
   var tickElements = this.getTickCollection(),
    stateController = aspxGetStateController();
   var name = this.name + ASPxClientTrackBarConsts.TICK_ELEMENT_POSTFIX;
   for (var i = 0; i < tickElements.length; i++)
    stateController.AddSelectedItem(name, this.selectedClasses, this.selectedCssArray, [i], null, null);
  },
  setTickElementIDs: function () {
   var tickElements = this.getTickCollection();
   for (var i = 0; i < tickElements.length; i++)
    tickElements[i].id = this.name + ASPxClientTrackBarConsts.TICK_ELEMENT_POSTFIX + i;
  },
  updateScalePosition: function () {
   var scaleElement = this.getScaleElement();
   this.setElementIdent(scaleElement, this.cache.decButtonSize + this.cache.trackElementBorders / 2);
  },
  updateDragHandlesVisibility: function () {
   if (!this.showDragHandles) {
    _aspxSetElementVisibility(this.getMainDragHandleElement(), false);
    var secondaryDragHandleElement = this.getSecondaryDragHandleElement();
    if (secondaryDragHandleElement)
     _aspxSetElementVisibility(secondaryDragHandleElement, false);
   }
  },
  updateTrackPosition: function () {
   var trackElement = this.getTrackElement();
   var trackElementIdent = this.cache.decButtonSize;
   if (this.isOutsideDragHandleDisplayMode)
    trackElementIdent += Math.floor(this.cache.dragHandleElementSizeHalf);
   this.setElementIdent(trackElement, trackElementIdent);
  },
  addHeldCall: function (methodName, args) {
   args[0] = _aspxCloneObject(args[0]); 
   this.heldCallArray.push({
    name: methodName,
    args: args
   });
  },
  executeHeldCalls: function () {
   for (var i = 0; i < this.heldCallArray.length; i++) {
    var methodName = this.heldCallArray[i].name;
    var args = this.heldCallArray[i].args;
    this[methodName].apply(this, args);
   }
   this.clearHeldCalls();
  },
  clearHeldCalls: function () {
   this.heldCallArray = [];
  },
  attachToEvents: function () {
   var mainDragHandleElement = this.getMainDragHandleElement(),
    secondaryDragHandleElement = this.getSecondaryDragHandleElement(),
    scaleElement = this.getScaleElement(),
    barHighlightElement = this.getBarHighlightElement(),
    incButtonElement = this.getButtonElement(false),
    decButtonElement = this.getButtonElement(true);
   if (mainDragHandleElement)
    _aspxAttachEventToElement(mainDragHandleElement, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
     this.startEvtHandler("onDragHandleMouseDown", [evt]);
    } .aspxBind(this));
   if (this.allowRangeSelection) {
    _aspxAttachEventToElement(barHighlightElement, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
     this.startEvtHandler("onBarHighlightMouseDown", [evt]);
    } .aspxBind(this));
    if (secondaryDragHandleElement)
     _aspxAttachEventToElement(secondaryDragHandleElement, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
      this.startEvtHandler("onDragHandleMouseDown", [evt]);
     } .aspxBind(this));
   }
   if (scaleElement) {
    _aspxAttachEventToElement(scaleElement, "click", function (evt) {
     this.startEvtHandler("onScaleClick", [evt]);
    } .aspxBind(this));
   }
   if (incButtonElement && decButtonElement) {
    _aspxAttachEventToElement(decButtonElement, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
     this.onButtonDown(true);
     if (ASPxClientTouchUI.isTouchEvent(evt))
      evt.preventDefault();
    } .aspxBind(this));
    _aspxAttachEventToElement(incButtonElement, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
     this.onButtonDown(false);
     if (ASPxClientTouchUI.isTouchEvent(evt))
      evt.preventDefault();
    } .aspxBind(this));
   }
   this.attachToCancelDragEvents();
   this.attachToDocumentEvents();
   this.attachToImperativeEvents();
   this.attachToKBSEvents();
   if (mainDragHandleElement)
    this.attachToStateControllerEvents(mainDragHandleElement, secondaryDragHandleElement);
  },
  attachToCancelDragEvents: function () {
   var mainDragHandleElement = this.getMainDragHandleElement(),
    secondaryDragHandleElement = this.getSecondaryDragHandleElement(),
    barHighlightElement = this.getBarHighlightElement();
   if (mainDragHandleElement)
    _aspxPreventElementDragAndSelect(mainDragHandleElement, true);
   if (secondaryDragHandleElement)
    _aspxPreventElementDragAndSelect(secondaryDragHandleElement, true);
   _aspxPreventElementDragAndSelect(barHighlightElement, true);
   if (!__aspxIE || __aspxBrowserVersion >= 9) {
    if (mainDragHandleElement)
     _aspxAttachEventToElement(mainDragHandleElement, "dragstart", _aspxPreventEvent);
    if (secondaryDragHandleElement)
     _aspxAttachEventToElement(secondaryDragHandleElement, "dragstart", _aspxPreventEvent);
   }
   if (__aspxChrome) {
    _aspxAttachEventToDocument("selectstart", function (evt) {
     if (this.getMovedDragHandle())
      return _aspxPreventEventAndBubble(evt);
    } .aspxBind(this));
   }
  },
  attachToDocumentEvents: function () {
   _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, function (evt) {
    this.startEvtHandler("onMouseUp", [evt]);
   } .aspxBind(this));
   _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, function (evt) {
    this.onMouseMove(evt);
   } .aspxBind(this));
  },
  attachToImperativeEvents: function () {
   var mainElement = this.GetMainElement(),
    trackElement = this.getTrackElement(),
    barHighlightElement = this.getBarHighlightElement();
   _aspxAttachEventToElement(mainElement, ASPxClientTouchUI.touchMouseDownEventName, function (evt) {
    this.SetFocus();
   } .aspxBind(this));
   _aspxAttachEventToElement(trackElement, "click", function (evt) {
    this.startEvtHandler("onTrackClick", [evt]);
   } .aspxBind(this));
   _aspxAttachEventToElement(barHighlightElement, "click", function (evt) {
    this.startEvtHandler("onBarHighlightClick", [evt]);
    return _aspxCancelBubble(evt);
   } .aspxBind(this));
  },
  attachToKBSEvents: function () {
   var inputElement = this.GetInputElement();
   _aspxAttachEventToElement(inputElement, "keydown", function (evt) {
    this.onKeyDown(evt);
   } .aspxBind(this));
   _aspxAttachEventToElement(inputElement, "keyup", function (evt) {
    this.onKeyUp(evt);
   } .aspxBind(this));
   _aspxAttachEventToElement(inputElement, "focus", function (evt) {
    this.OnFocus();
   } .aspxBind(this));
   _aspxAttachEventToElement(inputElement, "blur", function (evt) {
    this.OnLostFocus();
   } .aspxBind(this));
  },
  attachToStateControllerEvents: function (mainDragHandleElement, secondaryDragHandleElement) {
   var beforeHandler = function (s, e) {
    if (e.element === mainDragHandleElement ||
     (secondaryDragHandleElement && e.element === secondaryDragHandleElement)) {
     this.updateFocusedDragHandleClass();
    }
   } .aspxBind(this);
   aspxGetStateController().BeforeSetHoverState.AddHandler(beforeHandler);
   aspxGetStateController().BeforeSetPressedState.AddHandler(beforeHandler);
  },
  startEvtHandler: function (handlerName, args) {
   if (this.GetEnabled() && !this.readOnly) {
    if (!this.focused)
     this.addHeldCall(handlerName, args);
    else
     this[handlerName].apply(this, args);
   }
  },
  startIncDecTimer: function (increment) {
   this.stopIncDecTimer();
   this.incDecAccelerator = 1;
   this.incDecTimer = window.setTimeout(function () {
    if (this.isButtonPressed) {
     this.incDecInterval = window.setInterval(function () {
      var thisControlIsNotActual = this !== aspxGetControlCollection().Get(this.name);
      if (thisControlIsNotActual) {
       this.stopIncDecTimer();
       return;
      }
      this.incDecAccelerator += this.behaviorStrategy.getIncDecAcceleratorStep();
      var step = this.incDecAccelerator * this.step * (increment ? 1 : -1);
      this.incrementValueInternal(step, true);
      this.showValueToolTip(true);
     } .aspxBind(this), ASPxClientTrackBarConsts.DRAG_HANDLE_CHANGE_SPEED);
    }
   } .aspxBind(this), ASPxClientTrackBarConsts.MASS_INC_DEC_DELAY);
  },
  stopIncDecTimer: function () {
   clearInterval(this.incDecInterval);
   clearTimeout(this.incDecTimer);
   this.incDecTimer = this.incDecInterval = null;
  },
  clearInternalCache: function () {
   this.cache = null;
  },
  isInternaCacheInitialized: function () {
   return !!this.cache;
  },
  updateInternalCache: function (baseParams, trackParams) {
   if (!_aspxElementIsDisplayed(this.GetMainElement()))
    return;
   if (!this.isInternaCacheInitialized())
    this.cache = {};
   if (baseParams) {
    var dragHandleElement = this.getMainDragHandleElement(),
     contentContainer = this.getContentContainer(),
     mainElement = this.GetMainElement(),
     decButton = this.getButtonElement(true),
     incButton = this.getButtonElement(false),
     barHighlightElement = this.getBarHighlightElement();
    contentContainer.style.width = "0px";
    contentContainer.style.height = "0px";
    this.cache.mainElementWidth = mainElement.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
    this.cache.mainElementHeight = mainElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
    this.cache.mainElementSize = this.isHorizontal ? this.cache.mainElementWidth : this.cache.mainElementHeight;
    this.cache.mainElementReversedSize = this.isHorizontal ? this.cache.mainElementHeight : this.cache.mainElementWidth;
    this.cache.barHighlightElementBorders = this.isHorizontal ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(barHighlightElement) :
     _aspxGetTopBottomBordersAndPaddingsSummaryValue(barHighlightElement);
    if (dragHandleElement) {
     this.cache.dragHandleElementWidth = dragHandleElement.offsetWidth;
     this.cache.dragHandleElementHeight = dragHandleElement.offsetHeight;
     this.cache.dragHandleElementSize = this.isHorizontal ? this.cache.dragHandleElementWidth : this.cache.dragHandleElementHeight;
     this.cache.dragHandleElementSizeHalf = this.cache.dragHandleElementSize / 2;
    }
    this.cache.decButtonSize = decButton ? this.getElementSize(decButton) + this.getElementMargins(decButton) : 0;
    this.cache.incButtonSize = incButton ? this.getElementSize(incButton) + this.getElementMargins(incButton) : 0;
    this.cache.buttonSizesAmount = this.cache.decButtonSize + this.cache.incButtonSize;
   }
   if (trackParams) {
    var trackElement = this.getTrackElement();
    this.cache.trackElementBorders = this.isHorizontal ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(trackElement) :
     _aspxGetTopBottomBordersAndPaddingsSummaryValue(trackElement);
    this.cache.trackElementSize = this.getElementSize(trackElement) - this.cache.trackElementBorders;
    this.cache.scaleElementSize = this.cache.trackElementSize +
     (this.isOutsideDragHandleDisplayMode ? this.cache.dragHandleElementSize - 1 : 0);
   }
  },
  isPostBackAllowed: function () {
   return this.autoPostBack && !this.getMovedDragHandle();
  },
  RaiseFocus: function () {
   ASPxClientEdit.prototype.RaiseFocus.call(this);
   this.executeHeldCalls();
  },
  raisePositionChanged: function (processOnServer) {
   if (!this.PositionChanged.IsEmpty()) {
    var args = new ASPxClientProcessingModeEventArgs(processOnServer);
    this.PositionChanged.FireEvent(this, args);
    processOnServer = args.processOnServer;
   }
   return processOnServer;
  },
  risePositionChanging: function (currentPositionStart, currentPositionEnd, newPositionStart, newPositionEnd) {
   if (!this.PositionChanging.IsEmpty()) {
    var args = new ASPxClientTrackBarPositionChangingEventArgs(currentPositionStart,
     currentPositionEnd, newPositionStart, newPositionEnd);
    this.PositionChanging.FireEvent(this, args);
    return args.cancel;
   }
   return false;
  },
  riseTrack: function () {
   if (!this.Track.IsEmpty()) {
    var args = new ASPxClientEventArgs();
    this.Track.FireEvent(this, args);
   }
  },
  riseTrackStart: function () {
   if (!this.TrackStart.IsEmpty()) {
    var args = new ASPxClientEventArgs();
    this.TrackStart.FireEvent(this, args);
   }
  },
  riseTrackEnd: function () {
   if (!this.TrackEnd.IsEmpty()) {
    var args = new ASPxClientEventArgs();
    this.TrackEnd.FireEvent(this, args);
   }
   if (this.autoPostBack)
    this.SendPostBackInternal("");
  },
  RaiseValueChangedEvent: function () {
   if (!this.isInitialized) return false;
   var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
   processOnServer = this.raisePositionChanged(processOnServer);
   return processOnServer;
  },
  SendPostBackInternal: function(postBackArg) {
   if(this.autoPostBack)
    this.stopIncDecTimer();
   ASPxClientEdit.prototype.SendPostBackInternal.call(this, postBackArg);
  },
  onButtonDown: function (isDecrement) {
   if (!this.readOnly && this.GetEnabled() && !this.isButtonPressed) {
    this.isButtonPressed = true;
    if (isDecrement)
     this.decrementValue();
    else
     this.incrementValue();
    this.startIncDecTimer(!isDecrement);
    this.showValueToolTip(true);
   }
  },
  onButtonMouseUp: function () {
   this.stopIncDecTimer();
   this.isButtonPressed = false;
  },
  OnFocus: function () {
   if (this.GetEnabled()) {
    ASPxTrackBarToolTipHelper.OnTrackBarFocus(this);
    ASPxClientEdit.prototype.OnFocus.call(this);
    this.updateFocusedDragHandleClass();
   }
  },
  onMouseUp: function () {
   if (!this.isFirstMoveAction) {
    this.riseTrackEnd();
    this.isFirstMoveAction = true;
   }
   this.onDragHandleMouseUp();
   this.onButtonMouseUp();
  },
  onMouseMove: function (evt) {
   var movedElement = this.getMovedDragHandle();
   if (movedElement && this.GetEnabled() && !this.readOnly) {
    if (__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)
     return;
    if (this.isFirstMoveAction) {
     this.isFirstMoveAction = false;
     this.riseTrackStart();
    }
    if (movedElement === this.getBarHighlightElement())
     this.setSelectionByMouseEvt(evt);
    else
     this.setValueByMouseEvt(evt);
    this.preventNextBarHighlightMouseClick = this.preventNextTrackMouseClick = true;
    this.preventNextScaleMouseClick = __aspxWebKitTouchUI;
    this.riseTrack();
    ASPxTrackBarToolTipHelper.UpdateToolTip(this);
    if (ASPxClientTouchUI.isTouchEvent(evt))
     evt.preventDefault();
   }
  },
  onScaleClick: function (evt) {
   if (!this.preventNextScaleMouseClick) {
    this.setValueByMouseEvt(evt);
    this.showValueToolTip(true);
   }
  },
  onBarHighlightClick: function (evt) {
   if (!this.preventNextBarHighlightMouseClick) {
    this.clearMovedDragHandle();
    this.setValueByMouseEvt(evt);
    this.showValueToolTip(true);
   }
   else
    this.preventNextBarHighlightMouseClick = false;
  },
  onBarHighlightMouseDown: function (evt) {
   this.setMovedDragHandle(_aspxGetEventSource(evt));
   if (this.allowRangeSelection) {
    var barHighlightElement = this.getBarHighlightElement(),
     barHighlightElementSize = this.getElementSize(barHighlightElement);
    this.barHighlightStartPos = this.getMousePosByEvent(evt) - this.getElementAbsolutePos(barHighlightElement);
    this.barHighlightStartPos = this.correctIdentByDirection(this.barHighlightStartPos, barHighlightElementSize);
   }
   this.showValueToolTip();
  },
  OnBrowserWindowResize: function (evt) {
   this.clearInternalCache();
   this.AdjustControl();
  },
  onDragHandleMouseDown: function (evt) {
   this.setMovedDragHandle(_aspxGetEventSource(evt));
   this.showValueToolTip();
  },
  onDragHandleMouseUp: function (evt) {
   window.setTimeout(function () {
    this.preventNextScaleMouseClick = false;
   } .aspxBind(this), 100);
   if (this.getMovedDragHandle()) {
    this.clearMovedDragHandle();
    ASPxTrackBarToolTipHelper.HideToolTip(this);
   }
  },
  OnMouseWheel: function (evt) {
   if (!this.enableMouseWheel)
    return;
   var wheelDelta = _aspxGetWheelDelta(evt);
   if (wheelDelta > 0)
    this.decrementValue();
   else if (wheelDelta < 0)
    this.incrementValue();
   this.showValueToolTip(true);
   return _aspxPreventEvent(evt);
  },
  onKeyDown: function (evt) {
   switch (evt.keyCode) {
    case ASPxKey.Left:
     if (this.isHorizontal)
      this.onButtonDown(this.isNormalDirection);
     break;
    case ASPxKey.Right:
     if (this.isHorizontal)
      this.onButtonDown(!this.isNormalDirection);
     break;
    case ASPxKey.Up:
     if (!this.isHorizontal)
      this.onButtonDown(this.isNormalDirection);
     break;
    case ASPxKey.Down:
     if (!this.isHorizontal)
      this.onButtonDown(!this.isNormalDirection);
     break;
   }
   this.showValueToolTip(true);
  },
  onKeyUp: function () {
   this.onMouseUp();
  },
  onTrackClick: function (evt) {
   if (!this.preventNextTrackMouseClick) {
    this.setValueByMouseEvt(evt);
    this.showValueToolTip(true);
   }
   else
    this.preventNextTrackMouseClick = false;
  },
  correctElementPositions: function () {
   if (this.scalePosition === ASPxClientTrackBarPosition.Both) {
    var isEvenSize = this.cache.mainElementReversedSize % 2 === 0;
    var mainElementCenter = (this.cache.mainElementReversedSize + (isEvenSize ? 0 : 1)) / 2;
    var cerrectionValue = null;
    if (__aspxWebKitFamily && !this.isHorizontal && !isEvenSize)
     cerrectionValue = 0;
    if (__aspxWebKitFamily && this.isHorizontal && !isEvenSize)
     cerrectionValue = 0;
    if (__aspxIE && __aspxBrowserVersion === 7 && this.isHorizontal && !isEvenSize)
     cerrectionValue = -1;
    if (__aspxIE && __aspxBrowserVersion < 7 && !isEvenSize)
     cerrectionValue = 0;
    if (cerrectionValue !== null) {
     var trackElement = this.getTrackElement(),
     incButton = this.getButtonElement(false),
     decButton = this.getButtonElement(true);
     var newElementIdent = mainElementCenter + cerrectionValue;
     this.setElementIdent(trackElement, newElementIdent, true);
     if (incButton && decButton) {
      this.setElementIdent(incButton, newElementIdent, true);
      this.setElementIdent(decButton, newElementIdent, true);
     }
    }
   }
  },
  getBarHighlightSize: function () {
   var mainDragHandleElement = this.getMainDragHandleElement(),
    mainDragHandlePos = this.getElementAbsolutePos(mainDragHandleElement);
   var result = 0;
   if (this.allowRangeSelection) {
    var secondaryDragHandleElement = this.getSecondaryDragHandleElement(),
     secondaryDragHandlePos = this.getElementAbsolutePos(secondaryDragHandleElement);
    result = Math.abs(mainDragHandlePos - secondaryDragHandlePos);
   } else {
    var mainDragHandleElementCenterIdent = this.getElementIdent(mainDragHandleElement) +
     this.cache.dragHandleElementSizeHalf;
    result = this.correctIdentByDirection(mainDragHandleElementCenterIdent, this.cache.trackElementSize);
   }
   var borders = this.cache.barHighlightElementBorders - this.cache.trackElementBorders / 2;
   return result !== 0 ? Math.round(result - borders) : 0;
  },
  AdjustControlCore: function () {
   if(!this.GetMainElement() || !this.getContentContainer()) return;
   this.updateInternalCache(true);
   if (!this.isInternaCacheInitialized())
    return;
   this.adjustContentContainer();
   this.correctElementPositions();
   this.adjustTrack();
   this.updateInternalCache(false, true);
   this.updateDragHandlePositions(true);
   this.updateDragHandlesVisibility();
   this.updateTrackPosition();
   if (this.getScaleElement()) {
    this.adjustScale();
    this.updateScalePosition();
    this.updateTickSelectionStates();
   }
   if (!this.isAdjusted) {
    _aspxSetElementVisibility(this.GetMainElement(), true);
    this.isAdjusted = true;
   }
  },
  adjustContentContainer: function () {
   var mainElement = this.GetMainElement(),
    contentContainer = this.getContentContainer();
   contentContainer.style.width = this.cache.mainElementWidth + "px";
   contentContainer.style.height = this.cache.mainElementHeight + "px";
  },
  adjustScale: function () {
   this.updateScaleSize();
   var scaleElement = this.getScaleElement(),
    tickElements = this.getTickCollection();
   var scaleElementReversedSize = this.isHorizontal ? scaleElement.offsetHeight : scaleElement.offsetWidth;
   for (var i = 0; i < tickElements.length; i++) {
    var tickNum = this.isNormalDirection ? i : tickElements.length - i - 1;
    this.behaviorStrategy.initializeScaleElements(tickElements[i], tickNum);
    this.setReversedElementSize(tickElements[i], scaleElementReversedSize);
   }
   this.setElementSize(scaleElement, this.cache.scaleElementSize);
  },
  adjustTrack: function () {
   var trackElement = this.getTrackElement();
   var trackElementBordersAndPaddings = this.isHorizontal ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(trackElement) :
    _aspxGetTopBottomBordersAndPaddingsSummaryValue(trackElement);
   var trackSize = this.cache.mainElementSize - this.cache.buttonSizesAmount - trackElementBordersAndPaddings;
   if (this.isOutsideDragHandleDisplayMode)
    trackSize -= this.cache.dragHandleElementSize - 1;
   if (__aspxIE && __aspxBrowserMajorVersion <= 7)
    this.setElementSize(trackElement, 0);
   this.setElementSize(trackElement, trackSize);
  },
  updateScaleSize: function () {
   var scaleElement = this.getScaleElement(),
    mainElement = this.GetMainElement();
   var trackElement = this.getTrackElement();
   if (this.scalePosition === ASPxClientTrackBarPosition.Both) {
    this.setElementSize(scaleElement, this.cache.mainElementSize);
    this.setElementSize(scaleElement, this.cache.mainElementReversedSize, true);
   }
   else {
    var getAbsoluteFunc = this.isHorizontal ? _aspxGetAbsoluteY : _aspxGetAbsoluteX;
    var mainElementPos = getAbsoluteFunc(mainElement),
     trackElementPos = getAbsoluteFunc(trackElement);
    var trackElementReversedSize = this.isHorizontal ? trackElement.offsetHeight : trackElement.offsetWidth;
    var trackElementReversedSizeHalf = Math.ceil(trackElementReversedSize / 2);
    var leftTopSideSize = trackElementPos - mainElementPos;
    var rightBottomSideSize = this.cache.mainElementReversedSize - leftTopSideSize - trackElementReversedSize;
    var scaleSize = this.scalePosition === ASPxClientTrackBarPosition.LeftOrTop ? leftTopSideSize : rightBottomSideSize;
    this.setReversedElementSize(scaleElement, scaleSize + trackElementReversedSizeHalf);
   }
  },
  updateBarHighlightPosition: function () {
   var barHighlightElement = this.getBarHighlightElement(),
    dragHandleElement = this.getMainDragHandleElement(),
    trackElement = this.getTrackElement();
   var barHighlightPos = this.getElementAbsolutePos(trackElement);
   if (this.allowRangeSelection || !this.isNormalDirection) {
    var targetDragHandleElement = dragHandleElement;
    if (this.allowRangeSelection && !this.isNormalDirection)
     targetDragHandleElement = this.getSecondaryDragHandleElement();
    barHighlightPos = this.getElementAbsolutePos(targetDragHandleElement) +
     Math.floor(this.cache.dragHandleElementSizeHalf);
   }
   this.setElementSize(barHighlightElement, this.getBarHighlightSize());
   this.setElementAbsolutePos(barHighlightElement, barHighlightPos);
  },
  updateDragHandlePositions: function (withoutAnimation) {
   if (!this.isInternaCacheInitialized())
    return;
   if (this.allowRangeSelection) {
    this.updateDragHandlePosition(this.getMainDragHandleElement(), this.getInternalValue(0), withoutAnimation);
    this.updateDragHandlePosition(this.getSecondaryDragHandleElement(), this.getInternalValue(1), withoutAnimation);
   }
   else
    this.updateDragHandlePosition(this.getMainDragHandleElement(), this.GetValue(), withoutAnimation);
  },
  updateDragHandlePosition: function (dragHandleElement, value, withoutAnimation) {
   var dragHandleElementIdent = this.behaviorStrategy.getTrackIdentByValue(value);
   if (this.animationEnabled && this.isAdjusted && !this.getMovedDragHandle() && !withoutAnimation)
    ASPxTrackBarTrackAnimationHelper.StartTrackAnimation(this, dragHandleElement, dragHandleElementIdent);
   else {
    this.setElementIdent(dragHandleElement, dragHandleElementIdent);
    this.updateBarHighlightPosition();
   }
  },
  updateTickSelectionStates: function () {
   if (this.scaleLabelHighlightMode === ASPxClientTrackHighlightMode.None)
    return;
   var stateController = aspxGetStateController(),
    tickElements = this.getTickCollection();
   var currentSelection = this.getSelection();
   for (var i = 0; i < tickElements.length; i++) {
    if (this.behaviorStrategy.isTickSelected(i, currentSelection))
     stateController.SelectElementBySrcElement(tickElements[i]);
    else
     stateController.DeselectElementBySrcElement(tickElements[i]);
   }
  },
  getElementInternal: function (getFieldMethod, name) {
   if (!_aspxIsExistsElement(this.elementCache[name]))
    this.elementCache[name] = getFieldMethod();
   return this.elementCache[name];
  },
  getMainDragHandleElement: function () {
   return this.getElementInternal(function () {
    return _aspxGetElementsByTagName(this.getTrackElement(), "A")[0];
   } .aspxBind(this), "mainDragHandle");
  },
  getSecondaryDragHandleElement: function () {
   return this.getElementInternal(function () {
    return _aspxGetElementsByTagName(this.getTrackElement(), "A")[1];
   } .aspxBind(this), "secondaryDragHandle");
  },
  getBarHighlightElement: function () {
   return this.getElementInternal(function () {
    return this.GetChild("_S");
   } .aspxBind(this), "barHighlight");
  },
  GetInputElement: function () {
   return this.getElementInternal(function () {
    return this.GetChild("_I");
   } .aspxBind(this), "input");
  },
  getTrackElement: function () {
   return this.getElementInternal(function () {
    return this.GetChild("_T");
   } .aspxBind(this), "track");
  },
  getScaleElement: function () {
   return this.getElementInternal(function () {
    return _aspxGetChildByTagName(this.GetMainElement(), "UL", 0);
   } .aspxBind(this), "scale");
  },
  getContentContainer: function () {
   return this.getElementInternal(function () {
    return _aspxGetChildByTagName(this.GetMainElement(), "DIV", 0);
   } .aspxBind(this), "content");
  },
  getFirstLargeTick: function () {
   return this.getElementInternal(function () {
    return this.getTickCollection()[0];
   } .aspxBind(this), "firstLargeTick");
  },
  getButtonElement: function (decButton) {
   if (!this.isButtonsExist)
    return null;
   var contentElement = this.getContentContainer(),
    anchorCollection = _aspxGetElementsByTagName(contentElement, "A");
   var getOutAnchor = function (last) {
    return anchorCollection[last ? anchorCollection.length - 1 : 0];
   };
   if (decButton) {
    return this.getElementInternal(function () {
     return getOutAnchor(this.isNormalDirection);
    } .aspxBind(this), "decButton");
   } else {
    return this.getElementInternal(function () {
     return getOutAnchor(!this.isNormalDirection);
    } .aspxBind(this), "incButton");
   }
  },
  getTickCollection: function () {
   return _aspxGetElementsByTagName(this.getScaleElement(), "LI");
  },
  isButtonElementsExist: function () {
   var contentElement = this.getContentContainer(),
    anchorCollection = _aspxGetElementsByTagName(contentElement, "A");
   return anchorCollection.length >= 3;
  },
  correctIdentByDirection: function (ident, elementSize) {
   return !this.isNormalDirection ? elementSize - ident : ident;
  },
  correctTrackIdentByDirection: function (ident) {
   return this.correctIdentByDirection(ident, this.cache.scaleElementSize);
  },
  setElementSize: function (element, size, reversed) {
   if ((this.isHorizontal && !reversed) || (!this.isHorizontal && reversed))
    element.style.width = size + "px";
   else
    element.style.height = size + "px";
  },
  getReversedElementSize: function (element) {
   return this.getElementSize(element, true);
  },
  getElementMargins: function (element) {
   var currentStyle = _aspxGetCurrentStyle(element);
   return this.isHorizontal ? _aspxPxToInt(currentStyle.marginLeft) + _aspxPxToInt(currentStyle.marginRight) :
    _aspxPxToInt(currentStyle.marginTop) + _aspxPxToInt(currentStyle.marginBottom);
  },
  getElementSize: function (element, reversed) {
   if ((this.isHorizontal && !reversed) || (!this.isHorizontal && reversed))
    return element.offsetWidth;
   else
    return element.offsetHeight;
  },
  setReversedElementSize: function (element, size) {
   this.setElementSize(element, size, true);
  },
  setElementAbsolutePos: function (element, pos, reversed) {
   if ((this.isHorizontal && !reversed) || (!this.isHorizontal && reversed))
    _aspxSetAbsoluteX(element, pos);
   else
    _aspxSetAbsoluteY(element, pos);
  },
  setElementIdent: function (element, ident, reversed) {
   if ((this.isHorizontal && !reversed) || (!this.isHorizontal && reversed))
    element.style.left = ident + "px";
   else
    element.style.top = ident + "px";
  },
  getElementAbsolutePos: function (element, reversed) {
   if ((this.isHorizontal && !reversed) || (!this.isHorizontal && reversed))
    return _aspxGetAbsoluteX(element);
   else
    return _aspxGetAbsoluteY(element);
  },
  getReversedElementAbsolutePos: function (element) {
   return this.getElementAbsolutePos(element, true);
  },
  getElementIdent: function (element) {
   return _aspxPxToInt(this.isHorizontal ? element.style.left : element.style.top);
  },
  getMousePosByEvent: function (evt) {
   return this.isHorizontal ? _aspxGetEventX(evt) : _aspxGetEventY(evt);
  },
  setSelectionByMouseEvt: function (evt) {
   var trackElement = this.getTrackElement();
   var cursorPosition = this.getMousePosByEvent(evt),
    trackPosition = this.getElementAbsolutePos(trackElement);
   var ident = cursorPosition - trackPosition;
   ident += this.isNormalDirection ? -this.barHighlightStartPos : this.barHighlightStartPos;
   this.behaviorStrategy.detectSelection(ident);
  },
  setValueByMouseEvt: function (evt) {
   var trackElement = this.getTrackElement();
   var cursorPosition = this.getMousePosByEvent(evt),
    trackPosition = this.getElementAbsolutePos(trackElement);
   var ident = cursorPosition - trackPosition;
   var newValue = this.behaviorStrategy.getValueByTrackIdent(ident);
   if (typeof (newValue) != "undefined")
    this.setValueInternal(newValue, null, true);
  },
  addFocusedClass: function (element) {
   var trackElement = this.getTrackElement();
   trackElement.className += " " + (this.isMainDragHandleFocused ? ASPxClientTrackBarConsts.FOCUSED_MD_SYSTEM_CLASS_NAME
    : ASPxClientTrackBarConsts.FOCUSED_SD_SYSTEM_CLASS_NAME);
  },
  getFocusedDragHandleValue: function () {
   return this.isMainDragHandleFocused ? this.getValueStart() : this.getValueEnd();
  },
  getUnfocusedDragHandleValue: function () {
   return this.isMainDragHandleFocused ? this.getValueEnd() : this.getValueStart();
  },
  getFocusedDragHandleElement: function () {
   return this.isMainDragHandleFocused ? this.getMainDragHandleElement() : this.getSecondaryDragHandleElement();
  },
  removeFocusedClass: function () {
   var trackElement = this.getTrackElement();
   var removeClass = function (element, className) {
    element.className = element.className.replace(" " + className, "");
   };
   removeClass(trackElement, ASPxClientTrackBarConsts.FOCUSED_MD_SYSTEM_CLASS_NAME);
   removeClass(trackElement, ASPxClientTrackBarConsts.FOCUSED_SD_SYSTEM_CLASS_NAME);
  },
  reverseFocus: function () {
   var movedDragHandleElement = this.getMovedDragHandle();
   this.isMainDragHandleFocused = !this.isMainDragHandleFocused;
   this.updateFocusedDragHandleClass();
   if (movedDragHandleElement && movedDragHandleElement !== this.getBarHighlightElement())
    this.updatePressedDragHandle();
  },
  setFocusedDragHandle: function (dragHandleElement) {
   if (dragHandleElement !== this.getBarHighlightElement())
    this.isMainDragHandleFocused = dragHandleElement.id === this.getMainDragHandleElement().id;
   this.updateFocusedDragHandleClass();
  },
  updateFocusedDragHandleClass: function () {
   this.removeFocusedClass();
   this.addFocusedClass();
  },
  updatePressedDragHandle: function () {
   aspxGetStateController().SetPressedElement(this.getFocusedDragHandleElement());
   aspxGetStateController().SetCurrentPressedElement(null);
  },
  changeEnabledAttribute: function (enabled) {
   var inputElement = this.GetInputElement();
   if (inputElement)
    this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
  },
  changeEnabledStateItems: function (enabled) {
   aspxGetStateController().SetElementEnabled(this.getButtonElement(true), enabled);
   aspxGetStateController().SetElementEnabled(this.getButtonElement(false), enabled);
   aspxGetStateController().SetElementEnabled(this.getMainDragHandleElement(), enabled);
   aspxGetStateController().SetElementEnabled(this.getSecondaryDragHandleElement(), enabled);
   aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  },
  setInternalValue: function (index, value) {
   var inputElement = this.GetInputElement();
   var values = this.getInternalValues();
   values[index] = value;
   inputElement.value = _aspxToJson(values);
  },
  getInternalValue: function (index) {
   var values = this.getInternalValues();
   var value = values[index];
   return this.behaviorStrategy.prepareRawValue(value);
  },
  getInternalValues: function () {
   var inputElement = this.GetInputElement();
   return eval(inputElement.value);
  },
  getPositionByValue: function (value) {
   return this.behaviorStrategy.getPositionByValue(value);
  },
  getSelection: function () {
   return { start: this.GetPositionStart(), end: this.GetPositionEnd() };
  },
  setSelection: function (selection, riseEvents) {
   this.SetPositionStart(selection.start, riseEvents);
   this.SetPositionEnd(selection.end, riseEvents)
  },
  setValueInternal: function (firstValue, secondValue, riseEvents) {
   var isAPIChanged = !riseEvents;
   if ((this.readOnly && !isAPIChanged) || !this.GetEnabled())
    return;
   if (!this.allowRangeSelection) {
    this.updateInternalValue(firstValue, 0, riseEvents);
    return;
   }
   if (!secondValue)
    secondValue = this.getSecondRangeValue(firstValue);
   if (secondValue === null)
    secondValue = this.behaviorStrategy.getNullValue();
   var newSelection = this.createSelection(firstValue, secondValue),
    currentSelection = this.getSelection();
   this.setSelection(newSelection, riseEvents);
   var startDragHandleElement = this.getMainDragHandleElement(),
    endDragHandleElement = this.getSecondaryDragHandleElement();
   if (newSelection.start !== currentSelection.start) {
    this.updateDragHandlePosition(startDragHandleElement, this.getValueStart());
    if (!this.isMainDragHandleFocused) {
     this.updateDragHandlePosition(endDragHandleElement, this.getValueEnd(), true);
     this.reverseFocus();
    }
   }
   var isReflection = newSelection.end == currentSelection.start;
   if (newSelection.end !== currentSelection.end && !isReflection) {
    this.updateDragHandlePosition(endDragHandleElement, this.getValueEnd());
    if (this.isMainDragHandleFocused) {
     this.updateDragHandlePosition(startDragHandleElement, this.getValueStart(), true);
     this.reverseFocus();
    }
   }
  },
  updateInternalValue: function (newValue, index, riseEvents, withoutAnimation) {
   var currentSelection = this.getSelection(),
    currentValue = this.getInternalValue(index);
   newValue = this.behaviorStrategy.correctValue(newValue);
   var newPosition = this.behaviorStrategy.getPositionByValue(newValue);
   if (currentValue !== newValue) {
    var isStartValueChanged = index === 0,
     cancelChanging = false;
    if (riseEvents) {
     var newPositionStart = isStartValueChanged ? newPosition : currentSelection.start,
      newPositionEnd = isStartValueChanged ? currentSelection.end : newPosition;
     cancelChanging = this.risePositionChanging(currentSelection.start, currentSelection.end,
      newPositionStart, newPositionEnd);
    }
    if (!cancelChanging) {
     if (isStartValueChanged && newPosition > currentSelection.end)
      this.setInternalValue(1, newValue);
     else if (!isStartValueChanged && newPosition < currentSelection.start)
      this.setInternalValue(0, newValue);
     this.setInternalValue(index, newValue);
     this.updateDragHandlePositions(withoutAnimation);
     if (this.getScaleElement())
      this.updateTickSelectionStates();
     if (riseEvents) {
      if (this.valueChangedDelay != 0)
       this.startValueChangedDelayTimer(currentSelection);
      else
       this.OnValueChanged();
     }
    }
   }
  },
  getSecondRangeValue: function (firstValue) {
   var currentSelection = this.getSelection();
   var valuePosition = this.behaviorStrategy.getPositionByValue(firstValue);
   var startValueDistance = Math.abs(currentSelection.start - valuePosition),
    endValueDistance = Math.abs(currentSelection.end - valuePosition);
   var unactiveDragHandleValue = this.getUnfocusedDragHandleValue();
   var areDragHandleValuesEqual = startValueDistance === 0 && !this.isMainDragHandleFocused ||
    endValueDistance === 0 && this.isMainDragHandleFocused;
   var isDragging = !!this.getMovedDragHandle();
   var isValueBetweenDragHandles = startValueDistance === endValueDistance;
   var isIncDecTimerPerformed = this.isButtonPressed;
   if (areDragHandleValuesEqual || isDragging || isValueBetweenDragHandles || isIncDecTimerPerformed)
    return unactiveDragHandleValue;
   else
    return startValueDistance < endValueDistance ? this.getValueEnd() : this.getValueStart();
  },
  createSelection: function (start, end) {
   var corectedStartValue = this.behaviorStrategy.correctValue(start),
    corectedEndValue = this.behaviorStrategy.correctValue(end);
   var startPosition = this.behaviorStrategy.getPositionByValue(corectedStartValue),
    endPosition = this.behaviorStrategy.getPositionByValue(corectedEndValue);
   return startPosition > endPosition ? { start: endPosition, end: startPosition} :
    { start: startPosition, end: endPosition };
  },
  incrementValue: function () {
   this.incrementValueInternal(this.step);
  },
  decrementValue: function () {
   this.incrementValueInternal(-this.step);
  },
  incrementValueInternal: function (step, riseEvents) {
   var currentValue = this.allowRangeSelection ? this.getFocusedDragHandleValue() : this.GetValue();
   var newValue = this.behaviorStrategy.getIncrementedValue(currentValue, step);
   this.setValueInternal(newValue, null, true);
  },
  setMovedDragHandle: function (dragHandleElement) {
   this.setFocusedDragHandle(dragHandleElement);
   this.movedElement = dragHandleElement;
  },
  getMovedDragHandle: function () {
   return this.movedElement;
  },
  clearMovedDragHandle: function () {
   this.movedElement = null;
  },
  showValueToolTip: function (hideAfterShow) {
   if (this.appearValueToolTip && this.GetEnabled())
    ASPxTrackBarToolTipHelper.ShowToolTip(this, hideAfterShow);
  },
  getValueToolTipText: function (position) {
   return this.GetItemCount() > 0 ? this.behaviorStrategy.getItemToolTip(position) :
    position;
  },
  getValueEnd: function () {
   return this.getInternalValue(1);
  },
  getValueStart: function () {
   return this.getInternalValue(0);
  },
  setValueEnd: function (value, riseEvents, withoutAnimation) {
   return this.updateInternalValue(value, 1, riseEvents, withoutAnimation);
  },
  setValueStart: function (value, riseEvents, withoutAnimation) {
   return this.updateInternalValue(value, 0, riseEvents, withoutAnimation);
  },
  clearValueChangedTimer: function () {
   window.clearTimeout(this.valueChangedDelayTimer);
   this.valueChangedDelayTimer = null;
  },
  onValueChangedTimer: function (currentSelection) {
   var currentSelection = this.getSelection();
   if (currentSelection.start != this.savedSelection.start ||
    (this.allowRangeSelection && currentSelection.end != this.savedSelection.end))
    this.OnValueChanged();
   this.valueChangedDelayTimer = null;
  },
  startValueChangedDelayTimer: function (currentSelection) {
   if (this.valueChangedDelayTimer)
    this.clearValueChangedTimer();
   else
    this.savedSelection = currentSelection;
   this.valueChangedDelayTimer = window.setTimeout(function () {
    this.onValueChangedTimer(currentSelection);
   } .aspxBind(this), this.valueChangedDelay);
  },
  GetItemIndexByValue: function (value) {
   if (this.behaviorStrategy.getItemNumByValue)
    return this.behaviorStrategy.getItemNumByValue(value);
   else
    return -1;
  },
  GetItemValue: function (index) {
   if (this.behaviorStrategy.getItemValue)
    return this.behaviorStrategy.getItemValue(index);
  },
  GetItemText: function (index) {
   if (this.behaviorStrategy.getItemText)
    return this.behaviorStrategy.getItemText(index);
  },
  GetItemToolTip: function (index) {
   if (this.behaviorStrategy.getItemToolTip)
    return this.behaviorStrategy.getItemToolTip(index);
  },
  GetItemCount: function () {
   return this.items ? this.items.length : 0;
  },
  SetPositionEnd: function (selectionEnd, riseEvents) {
   var newValue = this.behaviorStrategy.getValueByPosition(selectionEnd);
   this.setValueEnd(newValue, riseEvents, !riseEvents);
  },
  SetPositionStart: function (selectionStart, riseEvents) {
   var newValue = this.behaviorStrategy.getValueByPosition(selectionStart);
   this.setValueStart(newValue, riseEvents, !riseEvents);
  },
  GetPositionEnd: function () {
   return this.behaviorStrategy.getPosition(false);
  },
  GetPositionStart: function () {
   return this.behaviorStrategy.getPosition(true);
  },
  GetPosition: function () {
   return this.GetPositionStart();
  },
  SetPosition: function (position) {
   return this.SetPositionStart(position);
  },
  setReadOnly: function (readOnly) {
   this.readOnly = readOnly;
  },
  getReadOnly: function () {
   return this.readOnly;
  },
  GetEnabled: function () {
   return this.enabled && this.clientEnabled;
  },
  SetEnabled: function (enabled) {
   ASPxClientEdit.prototype.SetEnabled.call(this, enabled);
   this.changeEnabledStateItems(enabled);
   this.changeEnabledAttribute(enabled);
  },
  SetValue: function (value) {
   this.setValueStart(value, false, true);
  },
  GetValue: function () {
   return this.getValueStart();
  }
 });
 ASPxClientTrackBar.Cast = ASPxClientControl.Cast;
 ASPxIdent.IsASPxTrackBar = function (obj) {
  return !!obj.isASPxTrackBar;
 };
 window.ASPxClientTrackBarPositionChangingEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
  constructor: function (currentPositionStart, currentPositionEnd, newPositionStart, newPositionEnd) {
   this.constructor.prototype.constructor.call(this, false);
   this.cancel = false;
   this.currentPosition = currentPositionStart;
   this.currentPositionEnd = currentPositionEnd;
   this.currentPositionStart = currentPositionStart;
   this.newPosition = newPositionStart;
   this.newPositionEnd = newPositionEnd;
   this.newPositionStart = newPositionStart;
  }
 });
 ASPxTrackBarTickModeStrategy = _aspxCreateClass(null, {
  constructor: function (trackBar) {
   this.constructor.prototype.constructor.call(this);
   this.isNormalDirection = trackBar.isNormalDirection;
   this.isOutsideDragHandleDisplayMode = trackBar.isOutsideDragHandleDisplayMode;
   this.largeTickInterval = trackBar.largeTickInterval;
   this.largeTickStartValue = trackBar.largeTickStartValue;
   this.largeTickEndValue = trackBar.largeTickEndValue;
   this.maxValue = trackBar.maxValue;
   this.minValue = trackBar.minValue;
   this.scaleLabelFormatString = trackBar.scaleLabelFormatString;
   this.smallTickFrequency = trackBar.smallTickFrequency;
   this.tickValue = trackBar.tickValue;
   this.trackBar = trackBar;
  },
  addElementCloneToScale: function (element, previousElement) {
   var scaleElement = this.trackBar.getScaleElement();
   var clone = element.cloneNode(true);
   if (this.isNormalDirection)
    scaleElement.appendChild(clone);
   else
    scaleElement.insertBefore(clone, previousElement);
   return clone;
  },
  buildScale: function () {
   var ticksFromServer = this.trackBar.getTickCollection();
   var largeTick = ticksFromServer[0],
    smallTick = ticksFromServer[1];
   this.scaleMap = this.createScaleMap(this.largeTickStartValue, this.largeTickEndValue,
    this.minValue, this.maxValue, this.smallTickFrequency, this.tickValue);
   var previousElement = largeTick;
   for (var i = 0; i < this.scaleMap.length; i++) {
    previousElement = this.addElementCloneToScale(this.scaleMap[i].isLargeTick ? largeTick : smallTick, previousElement);
    if (this.scaleMap[i].isLargeTick)
     this.setElementLabel(previousElement, this.scaleMap[i].tickValue);
   }
   this.removeElementFromScale(smallTick);
   this.removeElementFromScale(largeTick);
  },
  correctSelection: function (selection) {
   var selectionLength = selection.end - selection.start;
   if (selection.start <= this.minValue)
    selection = { start: this.minValue, end: this.minValue + selectionLength };
   else if (selection.end >= this.maxValue)
    selection = { start: this.maxValue - selectionLength, end: this.maxValue };
   return selection;
  },
  correctValue: function (value) {
   if (value === null)
    return null;
   value = parseFloat(value);
   if (value !== 0 && !value) 
    return this.getNullValue();
   if (value < this.minValue)
    return this.minValue;
   else if (value > this.maxValue)
    return this.maxValue;
   else
    return this.differentiateValue(value);
  },
  createScaleMap: function (largeTickStartValue, largeTickEndValue, minValue, maxValue, smallTickFrequency, tickValue) {
   var map = [];
   var firstLargeTickValue = largeTickStartValue || largeTickStartValue === 0 ? largeTickStartValue : minValue,
    lastLargeTickValue = largeTickEndValue || largeTickEndValue === 0 ? largeTickEndValue : maxValue,
    firstLargeTickIdent = firstLargeTickValue - minValue,
    scaleTickIndent = firstLargeTickIdent - Math.floor(firstLargeTickIdent / tickValue.small) * tickValue.small;
   scaleTickIndent = _aspxCorrectJSFloatNumber(scaleTickIndent);
   var firstTickValue = minValue + scaleTickIndent;
   var tickCount = (maxValue - minValue) / tickValue.small + 1;
   for (var i = 0; i < tickCount; i++) {
    var currentTickValue = _aspxCorrectJSFloatNumber(firstTickValue + i * tickValue.small);
    if (currentTickValue <= maxValue) {
     var isLargeTick = (Math.abs(currentTickValue - firstLargeTickValue) / tickValue.large) % 1 === 0;
     isLargeTick = isLargeTick && currentTickValue >= firstLargeTickValue && currentTickValue <= lastLargeTickValue;
     if (isLargeTick || (!isLargeTick && smallTickFrequency > 1)) {
      map.push({
       isLargeTick: isLargeTick,
       tickValue: currentTickValue
      });
     }
    }
   }
   return map;
  },
  detectSelection: function (ident) {
   var newValue = this.getValueByTrackIdent(ident);
   var newPosition = this.getPositionByValue(newValue);
   var currentSelection = this.trackBar.getSelection();
   var newSelection = {
    start: newPosition,
    end: currentSelection.end + (newPosition - currentSelection.start)
   };
   newSelection = this.correctSelection(newSelection);
   this.trackBar.setSelection(newSelection, true);
  },
  differentiateValue: function (value) {
   var ident = value % this.trackBar.step;
   var result = value - ident;
   if (ident >= this.trackBar.step / 2)
    result += this.trackBar.step;
   return _aspxCorrectJSFloatNumber(result);
  },
  filedsInitialize: function () {
  },
  getIncDecAcceleratorStep: function () {
   return ASPxClientTrackBarAnimationsConsts.INC_DEC_ACCELERATOR_STEP;
  },
  getIncrementedValue: function (currentValue, step) {
   return currentValue + step;
  },
  getPositionByValue: function (value) {
   if (value === null)
    return this.getNullValue();
   else
    return this.correctValue(value);
  },
  getNullValue: function () {
   return this.minValue;
  },
  getPosition: function (startPosition) {
   var result = this.trackBar.getInternalValue(startPosition ? 0 : 1);
   return result !== null ? result : this.getNullValue();
  },
  getTrackIdentByValue: function (value, ignoreDirection) {
   if (value === null)
    return this.getTrackIdentByValue(this.getNullValue(), ignoreDirection);
   var proc = (value - this.minValue) / (this.maxValue - this.minValue);
   var ident = Math.round((this.trackBar.cache.scaleElementSize - this.trackBar.cache.dragHandleElementSize) * proc);
   if (!ignoreDirection && !this.isNormalDirection)
    ident = this.trackBar.correctTrackIdentByDirection(ident + this.trackBar.cache.dragHandleElementSize);
   if (this.isOutsideDragHandleDisplayMode)
    ident -= Math.floor(this.trackBar.cache.dragHandleElementSizeHalf);
   return ident;
  },
  getValueByPosition: function (position) {
   return this.correctValue(position);
  },
  getValueByTrackIdent: function (ident) {
   if (this.isOutsideDragHandleDisplayMode)
    ident += Math.floor(this.trackBar.cache.dragHandleElementSizeHalf);
   ident = this.trackBar.correctTrackIdentByDirection(ident);
   var proc = (ident - this.trackBar.cache.dragHandleElementSizeHalf) /
    (this.trackBar.cache.scaleElementSize - this.trackBar.cache.dragHandleElementSize);
   return this.minValue + (this.maxValue - this.minValue) * proc;
  },
  initializeScaleElements: function (tickElement, tickNum) {
   var tickElementSize = this.trackBar.cache.dragHandleElementSize;
   this.trackBar.setElementSize(tickElement, tickElementSize);
   var tickElementIndent = this.getTrackIdentByValue(this.scaleMap[tickNum].tickValue);
   if (this.isOutsideDragHandleDisplayMode)
    tickElementIndent += Math.floor(this.trackBar.cache.dragHandleElementSizeHalf);
   this.trackBar.setElementIdent(tickElement, tickElementIndent);
  },
  isTickSelected: function (tickNum, currentSelection) {
   var tickValue = this.trackBar.tickValue.small * tickNum;
   var correctedTickValue = this.trackBar.correctIdentByDirection(tickValue, this.maxValue - this.minValue);
   switch (this.trackBar.scaleLabelHighlightMode) {
    case ASPxClientTrackHighlightMode.AlongBarHighlight:
     if (this.trackBar.allowRangeSelection)
      return correctedTickValue >= currentSelection.start && correctedTickValue <= currentSelection.end;
     else
      return correctedTickValue <= currentSelection.start;
    case ASPxClientTrackHighlightMode.HandlePosition:
     if (this.trackBar.allowRangeSelection)
      return correctedTickValue === currentSelection.start || correctedTickValue === currentSelection.end;
     else
      return correctedTickValue === currentSelection.start;
   }
  },
  prepareRawValue: function (value) {
   return value || value === 0 ? parseFloat(value) : null;
  },
  removeElementFromScale: function (element) {
   if (element) {
    var scaleElement = this.trackBar.getScaleElement();
    scaleElement.removeChild(element);
   }
  },
  setElementLabel: function (element, value) {
   var labelElements = _aspxGetElementsByTagName(element, "SPAN");
   var text = ASPxFormatter.Format(this.scaleLabelFormatString, value);
   for (var i = 0; i < labelElements.length; i++)
    _aspxSetInnerHtml(labelElements[i], text);
  }
 });
 ASPxTrackBarItemModeStrategy = _aspxCreateClass(ASPxTrackBarTickModeStrategy, {
  constructor: function (trackBar) {
   this.constructor.prototype.constructor.call(this, trackBar);
   this.items = this.trackBar.items;
   this.incDecAcceleratorStep = 0;
  },
  buildScale: function () {
   var itemFromServer = this.trackBar.getTickCollection()[0];
   var previousItem = itemFromServer;
   for (var i = 0; i < this.items.length; i++) {
    if(i !== 0)
     previousItem = this.addElementCloneToScale(itemFromServer, previousItem);
    var itemIndex = this.trackBar.correctIdentByDirection(i, this.items.length - 1);
    this.setElementLabel(previousItem, this.getItemText(itemIndex));
   }
   previousItem.className += " " + (this.isNormalDirection ? ASPxClientTrackBarConsts.LAST_ITEM_SYSTEM_CLASS_NAME :
    ASPxClientTrackBarConsts.FIRST_ITEM_SYSTEM_CLASS_NAME);
   itemFromServer.className += " " + (this.isNormalDirection ? ASPxClientTrackBarConsts.FIRST_ITEM_SYSTEM_CLASS_NAME :
    ASPxClientTrackBarConsts.LAST_ITEM_SYSTEM_CLASS_NAME);
  },
  correctPosition: function (position) {
   if (position < 0)
    return 0;
   else if (position > this.items.length - 1)
    return this.items.length - 1;
   else
    return position;
  },
  correctValue: function (value) {
   if (value === null)
    return null;
   else
    return this.getItemNumByValue(value) !== -1 ? value : this.getItemValue(0);
  },
  detectSelection: function (ident) {
   var newValue = this.getValueByTrackIdent(ident),
    currentSelection = this.trackBar.getSelection();
   if (typeof (newValue) === "undefined")
    return;
   var newSItemNum = this.getItemNumByValue(newValue),
    newEItemNum = newSItemNum + (currentSelection.end - currentSelection.start);
   if (this.isItemNumCorrect(newEItemNum)) {
    var newSelection = {
     start: newSItemNum,
     end: newEItemNum
    };
    this.trackBar.setSelection(newSelection, true);
   }
  },
  filedsInitialize: function () {
   this.trackBar.step = 1;
   this.trackBar.isOutsideDragHandleDisplayMode = false;
  },
  getIncDecAcceleratorStep: function () {
   return this.incDecAcceleratorStep;
  },
  getPositionByValue: function (value) {
   if (value === null)
    return 0;
   else
    return this.getItemNumByValue(value);
  },
  getIncrementedValue: function (currentValue, step) {
   var itemNum = this.getItemNumByValue(currentValue);
   var newItemNum = itemNum + step;
   if (this.isItemNumCorrect(newItemNum))
    return this.getItemValue(newItemNum);
   else
    return currentValue;
  },
  getItemElementSize: function () {
   return this.trackBar.cache.trackElementSize / this.items.length;
  },
  getValueByPosition: function (position) {
   return this.getItemValue(this.correctPosition(position));
  },
  getItemNumByValue: function (value) {
   for (var i = 0; i < this.items.length; i++) {
    if (this.getItemValue(i) === value)
     return i;
   }
   return -1;
  },
  getItemText: function (itemNum) {
   if (this.isItemNumCorrect(itemNum))
    return this.items[itemNum][1];
  },
  getItemToolTip: function (itemNum) {
   if (this.isItemNumCorrect(itemNum)) {
    var toolTip = this.items[itemNum][2];
    return !!toolTip ? toolTip : this.getItemValue(itemNum);
   }
  },
  getItemValue: function (itemNum) {
   if (this.isItemNumCorrect(itemNum))
    return this.items[itemNum][0];
  },
  getNullValue: function () {
   return this.getItemValue(0);
  },
  getPosition: function (startPosition) {
   var value = this.trackBar.getInternalValue(startPosition ? 0 : 1);
   var position = this.getItemNumByValue(value);
   return position === -1 ? 0 : position;
  },
  getTrackIdentByValue: function (value, ignoreDirection) {
   var itemNum = this.getItemNumByValue(value);
   if (itemNum === -1)
    return this.getTrackIdentByValue(this.getNullValue(), ignoreDirection);
   var itemElementSize = this.getItemElementSize();
   var ident = (itemNum * itemElementSize) + itemElementSize / 2;
   if (!this.isNormalDirection)
    ident = this.trackBar.correctTrackIdentByDirection(ident);
   ident -= this.trackBar.cache.dragHandleElementSizeHalf;
   return ident;
  },
  getValueByTrackIdent: function (ident) {
   var itemElementSize = this.getItemElementSize();
   var itemNum = ident / itemElementSize;
   itemNum -= itemNum % 1;
   if (!this.isNormalDirection)
    itemNum = this.trackBar.correctIdentByDirection(itemNum, this.items.length - 1);
   return this.getItemValue(itemNum);
  },
  initializeScaleElements: function (itemElement, itemNum) {
   var itemElementSize = this.getItemElementSize();
   this.trackBar.setElementSize(itemElement, itemElementSize);
   this.trackBar.setElementIdent(itemElement, itemNum * itemElementSize);
  },
  isItemNumCorrect: function (itemNum) {
   return itemNum >= 0 && itemNum < this.items.length;
  },
  isTickSelected: function (itemNum, currentSelection) {
   var correctedItemNum = itemNum;
   switch (this.trackBar.scaleLabelHighlightMode) {
    case ASPxClientTrackHighlightMode.AlongBarHighlight:
     if (this.trackBar.allowRangeSelection)
      return correctedItemNum >= currentSelection.start && correctedItemNum <= currentSelection.end;
     else
      return correctedItemNum <= currentSelection.start;
    case ASPxClientTrackHighlightMode.HandlePosition:
     if (this.trackBar.allowRangeSelection)
      return correctedItemNum === currentSelection.start || correctedItemNum === currentSelection.end;
     else
      return correctedItemNum === currentSelection.start;
   }
  },
  prepareRawValue: function (value) {
   return value || value === 0 ? value : null;
  }
 });
 ASPxTrackBarTrackAnimationHelper = {
  stopCurrentProccess: false,
  nextAnimationAction: null,
  isBusy: false,
  StartTrackAnimation: function (trackBar, dragHandleElement, newIdent) {
   var isInternalCall = !trackBar;
   if (!isInternalCall) {
    this.nextAnimationAction = {
     trackBar: trackBar,
     dragHandleElement: dragHandleElement,
     newIdent: newIdent
    };
   }
   if (!this.isBusy && this.nextAnimationAction) {
    this.isBusy = true;
    var currentAnimationAction = this.nextAnimationAction;
    this.nextAnimationAction = null;
    this.stopCurrentProccess = false;
    var barHighlightElement = currentAnimationAction.trackBar.getBarHighlightElement();
    this.animationRecursion(currentAnimationAction.trackBar, currentAnimationAction.dragHandleElement,
     barHighlightElement, currentAnimationAction.newIdent);
   }
   else
    this.stopCurrentProccess = true;
  },
  animationRecursion: function (trackBar, dragHandleElement, barHighlightElement, newIdent) {
   if (this.stopCurrentProccess) {
    this.callback();
    return;
   }
   var currentDragHandleElementIdent = trackBar.getElementIdent(dragHandleElement);
   if (Math.abs(currentDragHandleElementIdent - newIdent) < 3) {
    this.setDragHandleIdent(trackBar, dragHandleElement, newIdent);
    this.callback();
    return;
   }
   this.changeDragHandleIdent(trackBar, dragHandleElement, newIdent, currentDragHandleElementIdent);
   window.setTimeout(function () {
    this.animationRecursion(trackBar, dragHandleElement, barHighlightElement, newIdent);
   } .aspxBind(this), ASPxClientTrackBarAnimationsConsts.TRACK_ANIMATION_SPEED);
  },
  callback: function () {
   this.isBusy = false;
   this.StartTrackAnimation();
  },
  changeDragHandleIdent: function (trackBar, dragHandleElement, targetIdent, currentDragHandleElementIdent) {
   var step = (targetIdent - currentDragHandleElementIdent) * ASPxClientTrackBarAnimationsConsts.TRACK_ANIMATION_QUALITY;
   if (step > -1 && step < 1)
    step = step < 0 ? -1 : 1;
   var dragHandleElementNewIdent = currentDragHandleElementIdent + step;
   this.setDragHandleIdent(trackBar, dragHandleElement, dragHandleElementNewIdent);
  },
  setDragHandleIdent: function (trackBar, dragHandleElement, ident) {
   trackBar.setElementIdent(dragHandleElement, ident);
   trackBar.updateBarHighlightPosition();
   ASPxTrackBarToolTipHelper.UpdateToolTip(trackBar);
  }
 };
 ASPxTrackBarToolTipHelper = {
  inProcess: false,
  internalAnimationQueue: [null, null],
  labelToolTipCustomStyles: {},
  toolTipElement: null,
  nextAnimationAction: null,
  timerId: null,
  HideToolTip: function (trackBar) {
   if (!trackBar.appearValueToolTip)
    return;
   if (trackBar.animationEnabled)
    this.startToolTipAnimation(trackBar, false);
   else
    this.setToolTipOpacity(0);
  },
  OnTrackBarFocus: function (trackBar) {
   if (trackBar.appearValueToolTip) {
    if (!this.isCustomStyleExist(trackBar) && this.getTrackBarCustomStyleText(trackBar) !== '')
     this.createLabelToolTipCustomStyle(trackBar);
    this.setToolTipElementStyle(trackBar);
    this.updateToolTipPosition(trackBar); 
   }
  },
  ShowToolTip: function (trackBar, hideAfterShow) {
   if (!trackBar.appearValueToolTip)
    return;
   if (trackBar.animationEnabled)
    this.startToolTipAnimation(trackBar, true, hideAfterShow);
   else {
    this.UpdateToolTip(trackBar);
    this.setToolTipOpacity(1);
    if (hideAfterShow) {
     if (this.timerId)
      window.clearTimeout(this.timerId);
     this.timerId = window.setTimeout(function () {
      this.setToolTipOpacity(0);
      this.timerId = null;
     } .aspxBind(this), 1000);
    }
   }
  },
  UpdateToolTip: function (trackBar) {
   if (trackBar.appearValueToolTip) {
    this.updateToolTipContent(trackBar);
    this.updateToolTipPosition(trackBar);
   }
  },
  createLabelToolTipCustomStyle: function (trackBar) {
   var styleSheet = _aspxGetCurrentStyleSheet();
   if (styleSheet) {
    var customStyleText = this.getTrackBarCustomStyleText(trackBar);
    this.labelToolTipCustomStyles[trackBar.name] = customStyleText ?
     _aspxCreateImportantStyleRule(styleSheet, customStyleText) : "";
   }
  },
  getToolTipPosition: function (trackBar) {
   var toolTipElement = this.getToolTipElement(),
    toolTipElementReversedSize = trackBar.getReversedElementSize(toolTipElement),
    toolTipElementSize = trackBar.getElementSize(toolTipElement);
   var toolTipElementPos = 0;
   if (trackBar.allowRangeSelection) {
    var barHighlightElement = trackBar.getBarHighlightElement(),
     barHighlightElementSize = trackBar.getElementSize(barHighlightElement),
     barHighlightPos = trackBar.getElementAbsolutePos(barHighlightElement);
    toolTipElementPos = barHighlightPos + barHighlightElementSize / 2;
   }
   else {
    var dragHandleElement = trackBar.getFocusedDragHandleElement();
    var dragHandlePos = trackBar.getElementAbsolutePos(dragHandleElement);
    toolTipElementPos = dragHandlePos + trackBar.cache.dragHandleElementSizeHalf;
   }
   toolTipElementPos -= toolTipElementSize / 2;
   return toolTipElementPos;
  },
  getToolTipReversedPosition: function (trackBar, valueToolTipPosition) {
   var mainElement = trackBar.GetMainElement(),
    toolTipElement = this.getToolTipElement(),
    toolTipElementReversedSize = trackBar.getReversedElementSize(toolTipElement);
   var toolTipElementPos = trackBar.getReversedElementAbsolutePos(mainElement);
   var isLeftOrTop = valueToolTipPosition === ASPxClientTrackBarPosition.LeftOrTop;
   toolTipElementPos += isLeftOrTop ? -toolTipElementReversedSize : trackBar.cache.mainElementReversedSize;
   return toolTipElementPos;
  },
  getTrackBarCustomStyleName: function (trackBar) {
   return trackBar.valueToolTipStyle[0];
  },
  getTrackBarCustomStyleText: function (trackBar) {
   return trackBar.valueToolTipStyle[1];
  },
  isCustomStyleExist: function (trackBar) {
   return !!this.labelToolTipCustomStyles[trackBar.name];
  },
  isToolTipReverseRequired: function (trackBar, toolTipReversedPos) {
   var toolTipElement = this.getToolTipElement(),
    toolTipElementReversedSize = trackBar.getReversedElementSize(toolTipElement);
   var scrollReversedPos = trackBar.isHorizontal ? _aspxGetDocumentScrollTop() : _aspxGetDocumentScrollLeft(),
    windowReversedSize = trackBar.isHorizontal ? _aspxGetDocumentClientHeight() : _aspxGetDocumentClientWidth();
   var isUpperlimitExceeded = toolTipReversedPos < scrollReversedPos,
    isLowerlimitExceeded = toolTipReversedPos + toolTipElementReversedSize > scrollReversedPos + windowReversedSize;
   return isUpperlimitExceeded || isLowerlimitExceeded;
  },
  setToolTipElementStyle: function (trackBar) {
   var toolTipElement = this.getToolTipElement();
   toolTipElement.className = this.getTrackBarCustomStyleName(trackBar);
   if (this.isCustomStyleExist(trackBar))
    toolTipElement.className += " " + this.labelToolTipCustomStyles[trackBar.name];
  },
  startToolTipAnimation: function (trackBar, show, hideAfterShow) {
   this.UpdateToolTip(trackBar);
   if (show)
    this.nextAnimationAction = hideAfterShow ? "SH" : "S";
   else
    this.nextAnimationAction = "H";
   if (!this.inProcess) {
    this.inProcess = true;
    this.startAnimationCore();
   }
  },
  startAnimationCore: function () {
   var betweenShowAndHide = !this.internalAnimationQueue[0] &&
    this.internalAnimationQueue[1] === "H";
   if (betweenShowAndHide && this.nextAnimationAction === "SH") {
    this.nextAnimationAction = null;
    this.delayAnimationProcess();
    return;
   }
   this.prepareInternalQueue();
   var currentAnimationAction = this.internalAnimationQueue[0];
   if (currentAnimationAction)
    this.animationRecursion(currentAnimationAction);
   else
    this.inProcess = false;
  },
  delayAnimationProcess: function () {
   window.setTimeout(function () {
    ASPxTrackBarToolTipHelper.startAnimationCore();
   }, 500);
  },
  animationRecursion: function (currentAnimationAction) {
   var currentOpacity = this.getToolTipOpacity();
   var newOpacity = currentOpacity;
   if (currentAnimationAction === "S" && currentOpacity < 1) {
    newOpacity += ASPxClientTrackBarAnimationsConsts.TOOLTIP_ANIMATION_QUALITY;
    if (newOpacity > 1)
     newOpacity = 1;
   } else if (currentAnimationAction === "H" && currentOpacity > 0) {
    newOpacity -= ASPxClientTrackBarAnimationsConsts.TOOLTIP_ANIMATION_QUALITY;
    if (newOpacity < 0.1)
     newOpacity = 0;
   } else {
    this.internalAnimationQueue[0] = null;
    this.startAnimationCore();
    return;
   }
   this.setToolTipOpacity(newOpacity);
   this.timerId = window.setTimeout(function () {
    ASPxTrackBarToolTipHelper.animationRecursion(currentAnimationAction);
   }, ASPxClientTrackBarAnimationsConsts.TOOLTIP_ANIMATION_SPEED);
  },
  prepareInternalQueue: function () {
   if (!this.internalAnimationQueue[0]) {
    if (this.internalAnimationQueue[1]) {
     this.internalAnimationQueue[0] = this.internalAnimationQueue[1];
     this.internalAnimationQueue[1] = null;
     return;
    } else {
     if (this.nextAnimationAction === "SH") {
      this.internalAnimationQueue[0] = "S";
      this.internalAnimationQueue[1] = "H";
     } else {
      if ((this.nextAnimationAction === "S" && !this.isToolTipVisible()) ||
      (this.nextAnimationAction === "H" && this.isToolTipVisible())) {
       this.internalAnimationQueue[0] = this.nextAnimationAction;
      }
     }
     this.nextAnimationAction = null;
    }
   }
  },
  updateToolTipContent: function (trackBar) {
   var toolTipText = ASPxFormatter.Format(trackBar.valueToolTipFormat,
    trackBar.getValueToolTipText(trackBar.GetPositionStart()),
    trackBar.getValueToolTipText(trackBar.GetPositionEnd()));
   _aspxSetInnerHtml(this.getToolTipElement(), toolTipText);
  },
  updateToolTipPosition: function (trackBar) {
   var toolTipElement = this.getToolTipElement();
   var toolTipElementPos = this.getToolTipPosition(trackBar);
   var toolTipElementReversedPos = this.getToolTipReversedPosition(trackBar, trackBar.valueToolTipPosition);
   if (this.isToolTipReverseRequired(trackBar, toolTipElementReversedPos)) {
    var newToolTipPosition = trackBar.valueToolTipPosition;
    if (newToolTipPosition === ASPxClientTrackBarPosition.LeftOrTop)
     newToolTipPosition = ASPxClientTrackBarPosition.RightOrBottom;
    else
     newToolTipPosition = ASPxClientTrackBarPosition.LeftOrTop;
    toolTipElementReversedPos = this.getToolTipReversedPosition(trackBar, newToolTipPosition);
   }
   trackBar.setElementAbsolutePos(toolTipElement, toolTipElementPos);
   trackBar.setElementAbsolutePos(toolTipElement, toolTipElementReversedPos, true);
  },
  createToolTip: function () {
   var toolTipElement = document.createElement("DIV");
   document.body.appendChild(toolTipElement);
   this.setToolTipOpacity(0, toolTipElement);
   return toolTipElement;
  },
  getToolTipElement: function () {
   if (!_aspxIsExistsElement(this.toolTipElement))
    this.toolTipElement = this.createToolTip();
   return this.toolTipElement;
  },
  isToolTipVisible: function () {
   return this.getToolTipOpacity() !== 0;
  },
  setToolTipOpacity: function (value, element) {
   var toolTipElement = element ? element : this.getToolTipElement();
   var newZIndex = ASPxClientTrackBarConsts.VALUE_TOOLTIP_ZINDEX * (value === 0 ? -1 : 1); 
   if(toolTipElement.style.zIndex != newZIndex)
    toolTipElement.style.zIndex = newZIndex; 
   _aspxSetElementOpacity(toolTipElement, value);
  },
  getToolTipOpacity: function () {
   var toolTipElement = this.getToolTipElement();
   return _aspxGetElementOpacity(toolTipElement);
  }
 };
})();

MVCxClientComboBox = _aspxCreateClass(ASPxClientComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientComboBox.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  ASPxClientComboBox.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientComboBox.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientComboBox.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  if(this.CanCreateCallback())
   this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientComboBox.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackParams: function(){
  var params = { };
  $(this.GetMainElement()).find("input").each(function(){
   params[this.name] = this.value;
  });
  return params;
 }
});

ASPxClientInternalClock = _aspxCreateClass(ASPxClientControl, {
 IEMatrixFilter : "progid:DXImageTransform.Microsoft.Matrix(M11='1', M12='0', M21='0', M22='1', SizingMethod='auto expand')",
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.elementCache = { };
  this.rectBag = [ ];
  this.initialized = false;
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeElements();
 },
 InitializeElements: function() {
  this.GetMainElement().style.position = "relative";
  _aspxPreventImageDragging(this.GetClockFace());
  var hands = this.GetHands();
  for(var i = 0; i < hands.length; i++) {
   var hand = hands[i];
   if(!hand) continue;
   hand.style.position = "absolute";
   _aspxPreventImageDragging(hand);
  }
 },
 GetChildElementByID: function(id) {
  if(!_aspxIsExistsElement(this.elementCache[id]))
   this.elementCache[id] = _aspxGetElementById(this.name + "_" + id);
  return this.elementCache[id];
 },
 GetClockFace: function() { return this.GetChildElementByID("D"); },
 GetHourHand: function() { return this.GetChildElementByID("H"); },
 GetMinutHand: function() { return this.GetChildElementByID("M"); },
 GetSecondHand: function() { return this.GetChildElementByID("S"); },
 GetHands: function() { return [ this.GetHourHand(), this.GetMinutHand(), this.GetSecondHand() ]; },
 AdjustControlCore: function() {
  this.EnsureRectBag();
 },
 SetDate: function(date) {
  if(this.date == date) return;
  this.date = date;
  this.EnsureRectBag();
  this.RotateHands();
 },
 RotateHands: function() {
  if(this.rectBag.length == 0) 
   return;
  var hands = this.GetHands();
  for(var i = 0; i < hands.length; i++) {
   var hand = hands[i];
   if(!hand) continue;
   var degree = this.GetDegree(this.date, i);
   if(__aspxIE && __aspxBrowserVersion < 9)
    this.RotateOldIE(degree, hand, this.rectBag[i]);
   else 
    this.Rotate(degree, hand);
  }
 },
 GetDegree: function(date, handIndex) {
  if(!date)
   return 0;
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var seconds = date.getSeconds();
  switch(handIndex) {
   case 0:
    return (hours * 60 + minutes) / 2;
   case 1:
    return minutes * 6;
   case 2:
    return seconds * 6;
  }
 },
 EnsureRectBag: function() {
  if(this.rectBag.length > 0 || !_aspxElementIsDisplayed(this.GetMainElement()))
   return;
  this.PopulateSizeBag();
  this.InitializeHands();
  this.RotateHands();
 },
 PopulateSizeBag: function() {
  var clockFace = this.GetClockFace();
  var clockFaceCenterX = (clockFace.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(clockFace)) / 2;
  var clockFaceCenterY = (clockFace.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(clockFace)) / 2;
  var hands = this.GetHands();
  for(var i = 0; i < hands.length; i++) {
   var hand = hands[i];
   var rect = { };
   this.rectBag.push(rect);
   if(!hand) 
    continue;
   rect.fulcrumX = hand.offsetWidth / 2;
   rect.fulcrumY = clockFaceCenterY;
   rect.left = clockFaceCenterX - rect.fulcrumX;
   rect.top = 0;
   rect.width = hand.offsetWidth;
   rect.height = hand.offsetHeight;
  }
 },
 InitializeHands: function() {
  var hands = this.GetHands();
  for(var i = 0; i < hands.length; i++) {
   var hand = hands[i];
   if(!hand) continue;
   var rect = this.rectBag[i];
   hand.style.left = rect.left + "px";
   hand.style.top = rect.top + "px";
   if(__aspxIE && __aspxBrowserVersion < 9)
    hand.style.filter = this.IEMatrixFilter;
   else
    hand.style[this.GetBrowserPrefix() + "TransformOrigin"] = rect.fulcrumX + "px " + rect.fulcrumY + "px";
  }
 },
 GetBrowserPrefix: function() {
  if(__aspxIE && __aspxBrowserVersion >= 9)
   return "ms";
  if(__aspxFirefox)
   return "Moz";
  if(__aspxWebKitFamily)
   return "Webkit";
  if(__aspxOpera)
   return "O";
 },
 Rotate: function(degree, hand) {
  hand.style[this.GetBrowserPrefix() + "Transform"] = "rotate(" + degree + "deg)";
 },
 RotateOldIE: function(degree, hand, rect) {
  degree = degree % 360;
  var angle = Math.PI * degree / 180;
  var cos = Math.cos(angle);
  var sin = Math.sin(angle);
  var matrix = { 
   M11 : cos, M12 : -sin, 
   M21 : sin, M22 : cos 
  };
  var resizeOffset = this.GetIEResizeOffset(Math.floor(degree / 90) + 1, rect.width, rect.height, sin, cos);
  var fulcrumOffset = this.GetIEFulcrumOffset(rect.fulcrumX, rect.fulcrumY, matrix);
  hand.style.left = (rect.left - resizeOffset.x - fulcrumOffset.x) + "px";
  hand.style.top = (rect.top - resizeOffset.y - fulcrumOffset.y) + "px";
  var filter = hand.filters.item(0);
  filter.M11 = matrix.M11;
  filter.M12 = matrix.M12;
  filter.M21 = matrix.M21;
  filter.M22 = matrix.M22;
 },
 GetIEResizeOffset: function (quadrant, width, height, sin, cos) {
  switch(quadrant) {
   case 1:
    return { x: height * sin, y: 0 };
   case 2:
    return { x: sin * height - cos * width, y: -height * cos };
   case 3:
    return { x: -width * cos, y: -sin * width - cos * height };
   case 4:
    return { x: 0, y: -width * sin };
  }
 },
 GetIEFulcrumOffset: function(x, y, matrix) {
  return {
   x: matrix.M11 * x + matrix.M12 * y - x, 
   y: matrix.M21 * x + matrix.M22 * y - y
  };
 }
});
var __aspxSpindButtonIdPostfix = "_B";
var __aspxNumberDecimalSeparator = ",";
__aspxSERepeatBtnMinIntervalDelay = 5;
__aspxSERepeatBtnMaxIntervalDelay = 300;
ASPxClientSpinEditBase = _aspxCreateClass(ASPxClientButtonEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.largeDecButtonIndex = -1;
  this.incButtonIndex = -2;
  this.decButtonIndex = -3;
  this.largeIncButtonIndex = -4;
  this.valueChangedDelay = 0;
  this.valueChangedTimerID = -1;
  this.repeatButtonTimerID = -1;
  aspxGetSpinEditCollection().Add(this);
 },
 Initialize: function() {
  this.AssignButtonAttributes();
  ASPxClientButtonEditBase.prototype.Initialize.call(this);
 },
 AdjustControlCore: function() {
  ASPxClientButtonEditBase.prototype.AdjustControlCore.call(this);
  if(this.GetIncDecButtonsContainer()) {
   this.CorrectVerticalAlignment(_aspxAdjustHeightInContainer, this.GetIncDecButtonsContainer, "Btns");
   this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetIncDecButtonsImages, "Imgs");
  }
 },
 AssignButtonAttributes: function() {
  var buttons = [
   this.GetIncrementButton(),
   this.GetDecrementButton(),
   this.GetLargeIncrementButton(),
   this.GetLargeDecrementButton()
  ];
  for (var i = 0; i < buttons.length; i++) {
   var button = buttons[i];
   if (!_aspxIsExistsElement(button)) continue;
   _aspxPreventElementDragAndSelect(button, true);
   button.needClearSelection = true;
   if (!__aspxNetscapeFamily)
    button.unselectable = "on";
   var img = _aspxGetElementsByTagName(button, "img")[0];
   if(_aspxIsExistsElement(img))
    _aspxPreventImageDragging(img);
   this.AttachButtonEvents(button);
  }
 },
 AttachButtonEvents: function(button){
  _aspxAttachEventToElement(button, "mouseout", function () { this.ClearButtonRepeatClickTimer(); }.aspxBind(this));
  _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseDownEventName, function (evt) { this.OnButtonMouseDown(evt, button.id); }.aspxBind(this));
  _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseUpEventName, function () { this.OnButtonMouseUp(button.id); }.aspxBind(this));
 },
 GetIncDecButtonsContainer: function() { 
  if(this.GetIncrementButton())
   return this.GetIncrementButton().parentNode;
  if(this.GetDecrementButton())
   return this.GetDecrementButton().parentNode;
  return null;
 },
 GetIncDecButtonsImages: function() { 
  var elements = [];
  if(this.GetIncrementButton())
   elements.push(_aspxGetChildByTagName(this.GetIncrementButton(), "IMG", 0));
  if(this.GetDecrementButton())
   elements.push(_aspxGetChildByTagName(this.GetDecrementButton(), "IMG", 0));
  return elements;
 },
 GetIncrementButton: function() { 
  return this.GetButton(this.incButtonIndex); 
 },
 GetDecrementButton: function() { 
  return this.GetButton(this.decButtonIndex); 
 },
 GetLargeIncrementButton: function() { 
  return this.GetButton(this.largeIncButtonIndex); 
 },
 GetLargeDecrementButton: function() { 
  return this.GetButton(this.largeDecButtonIndex); 
 },
 GetButtonNumber: function(id) {
  var pos = id.lastIndexOf(__aspxSpindButtonIdPostfix);
  if (pos > -1)
   return id.substring(pos + __aspxSpindButtonIdPostfix.length, id.length);
  return null;
 },
 GetNextTimerInterval: function(iterationIndex) {
  var coef = 1 / iterationIndex;
  if (coef < 0.13)
   coef = 0.13;
  return coef * __aspxSERepeatBtnMaxIntervalDelay;
 },
 DoRepeatButtonClick: function(num, iterationIndex) {
  this.ProcessInternalButtonClick(num);
  var timerInterval = this.GetNextTimerInterval(iterationIndex);
  if (iterationIndex < 50)
   iterationIndex++;
  this.SetButtonRepeatClickTimer(num, timerInterval, iterationIndex);
 },
 SetButtonRepeatClickTimer: function(num, timerInterval, iterationIndex) {
  if(this.repeatButtonTimerIDLocked) return;
  var str = "aspxSRepeatButtonClick(\"" + this.name + "\"," +
     num.toString() + "," + iterationIndex.toString() + ")";
  this.repeatButtonTimerID = _aspxSetTimeout(str, timerInterval);
 },
 ClearButtonRepeatClickTimer: function() {
  this.repeatButtonTimerIDLocked = true;
  this.repeatButtonTimerID = _aspxClearTimer(this.repeatButtonTimerID);
  window.setTimeout(function () { this.repeatButtonTimerIDLocked = false; }.aspxBind(this), 0);
 },
 ProcessInternalButtonClick: function(buttonIndex) {
 },
 OnButtonMouseDown: function(evt, id) {
  var num = this.GetButtonNumber(id);
  if (num != null)
   this.SetButtonRepeatClickTimer(num, 300, 1);
  if (__aspxNetscapeFamily || ASPxClientTouchUI.isTouchEvent(evt)) 
   evt.preventDefault();
 },
 OnButtonMouseUp: function(id) {
  this.ClearButtonRepeatClickTimer();
 },
 OnValueChanged: function() {
  if (this.valueChangedDelay == 0)
   this.OnValueChangedTimer();
  else {
   if (this.valueChangedTimerID > -1) {
    window.clearTimeout(this.valueChangedTimerID);
    this.valueChangedTimerID = -1;
   }
   this.valueChangedTimerID = window.setTimeout("aspxSEValueChanged(\"" + this.name + "\")", this.valueChangedDelay);
  }
 },
 OnValueChangedTimer: function() {
  if (this.valueChangedTimerID > -1) {
   window.clearTimeout(this.valueChangedTimerID);
   this.valueChangedTimerID = -1;
  }
  this.RaisePersonalStandardValidation();
  this.InvokeActualOnValueChanged();  
 },
 InvokeActualOnValueChanged: function() {
  ASPxClientButtonEditBase.prototype.OnValueChanged.call(this);
 },
 ChangeEnabledAttributes: function(enabled) {
  ASPxClientButtonEditBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var btnElement = this.GetIncrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetDecrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetLargeIncrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetLargeDecrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled) {
  this.ClearButtonRepeatClickTimer();
  ASPxClientButtonEditBase.prototype.ChangeEnabledStateItems.call(this, enabled);
  var btnElement = this.GetIncrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetDecrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetLargeIncrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetLargeDecrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
 },
 OnMouseOver: function(evt) {
 }
});
ASPxClientSpinEditConsts = {
 INT_32_MAX_VALUE: 2147483647,
 INT_32_MIN_VALUE: -2147483648,
 DECIMAL_MIN_VALUE: -79228162514264337593543950335,
 DECIMAL_MAX_VALUE: 79228162514264337593543950335
};
ASPxClientSpinEdit = _aspxCreateClass(ASPxClientSpinEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.NumberChanged = new ASPxClientEvent();
  this.decimalPlaces = 0;
  this.number = 0;
  this.inc = 1;
  this.largeInc = 10;
  this.minValue = 0;
  this.maxValue = 0;
  this.allowNull = true;
  this.numberType = "f";
  this.maxLength = 0;
  this.inputValueBeforeFocus = null;
  this.valueChangedProcsCalledBeforeLostFocus = false;
  this.lockValueChanged = false;
  this.isValidating = false;
  this.pasteTimerID = -1;
  this.keyUpProcessing = false;
  this.isChangingCheckProcessed = false;
 },
 Initialize: function() {
  ASPxClientSpinEditBase.prototype.Initialize.call(this);
  this.filedsInitialize();
  this.GenerateValidationRegExp();
 },
 InlineInitialize: function() {
  this.UpdateLastCorrectValueString();
  ASPxClientSpinEditBase.prototype.InlineInitialize.call(this);
 },
 filedsInitialize: function() {
  if(!this.UseRestrictions()) {
   var isDecimal = this.numberType == "f";
   this.minValue = isDecimal ? ASPxClientSpinEditConsts.DECIMAL_MIN_VALUE :
    ASPxClientSpinEditConsts.INT_32_MIN_VALUE;
   this.maxValue = isDecimal ? ASPxClientSpinEditConsts.DECIMAL_MAX_VALUE :
    ASPxClientSpinEditConsts.INT_32_MAX_VALUE;
  }
 },
 GenerateValidationRegExp: function() {
  var decimalSeparator = "";
  var allowDecimalSeparatorSymbols = "";
  if (this.IsFloatNumber()) {
   decimalSeparator = this.GetDecimalSeparatorRegExpString(__aspxNumberDecimalSeparator);
   for (var i = 0; i < __aspxPossibleNumberDecimalSeparators.length; i++)
    allowDecimalSeparatorSymbols += this.GetDecimalSeparatorRegExpString(__aspxPossibleNumberDecimalSeparators[i]);
  }
  this.allowSymbolRegExp = new RegExp("[-0-9" + allowDecimalSeparatorSymbols + "]");
  this.validNumberRegExp = new RegExp("^[-]?[0-9]*[" + decimalSeparator + "]?[0-9]*([0-9]+)?$");
  var validFormattedNumberRegExpString = "^[-]?[0-9]*[" + decimalSeparator + "]?[0-9]";
  if (this.decimalPlaces != 0)
   validFormattedNumberRegExpString += "{0," + this.decimalPlaces + "}$";
  else
   validFormattedNumberRegExpString += "*([0-9]+)?$";
  this.validFormattedNumberRegExp = new RegExp(validFormattedNumberRegExpString);
 },
 GetDecimalSeparatorRegExpString: function(decimalSeparator) {
  return decimalSeparator == "." ? "\\." : decimalSeparator;
 },
 ChangeNumber: function(offset) {
  if (!this.readOnly) {
   var newNumber = this.GetValidNumber(_aspxCorrectJSFloatNumber(this.number + offset), this.number);
   if (newNumber != this.number) {
    this.SetNumberInternal(newNumber);
    this.OnValueChanged();
   }
   _aspxSetSelection(this.GetInputElement());
  }
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  var ret = false;
  this.ParseValueAfterPaste();
  if (this.largeDecButtonIndex == buttonIndex) {
   this.ChangeNumber(-this.largeInc);
   ret = true;
  } else if (this.incButtonIndex == buttonIndex) {
   this.ChangeNumber(this.inc);
   ret = true;
  } else if (this.decButtonIndex == buttonIndex) {
   this.ChangeNumber(-this.inc);
   ret = true;
  } else if (this.largeIncButtonIndex == buttonIndex) {
   this.ChangeNumber(this.largeInc);
   ret = true;
  }
  return ret;
 },
 GetCorrectNumberInRange: function(number) {
  if (this.UseRestrictions() && number > this.maxValue)
   number = this.maxValue;
  if (this.UseRestrictions() && number < this.minValue)
   number = this.minValue;
  return number;
 },
 GetValidNumber: function(number, oldNumber) {
  var validNumber = 0;
  if (this.UseRestrictions() && number < this.minValue && (this.number == null || number > this.number))
   validNumber = this.minValue;
  else if (this.UseRestrictions() && number > this.maxValue && (this.number == null || number < this.number))
   validNumber = this.maxValue;
  else if ((!this.UseRestrictions() || number <= this.maxValue) &&
   (!this.UseRestrictions() || number >= this.minValue))
   validNumber = number;
  else
   validNumber = this.number;
  if (!this.IsFloatNumber())
   validNumber = Math.round(validNumber);
  if ((this.maxLength > 0) && (validNumber.toString().length > this.maxLength))
   validNumber = oldNumber;
  return validNumber;
 },
 GetValueType: function() {
  return this.IsFloatNumber() ? "Decimal" : "Int";
 },
 GetFormattedNumber: function(number) {
  if (number == null)
   return "";
  var value = String(number);
  if (__aspxNumberDecimalSeparator != ".") {
   if (value.indexOf(".") != -1)
    value = value.replace(".", __aspxNumberDecimalSeparator);
  }
  value = this.GetCorrectFormattedNumberString(value);
  return value;
 },
 IsFloatNumber: function() {
  return this.numberType == "f";
 },
 Validate: function() {
  this.isValidating = true;
  ASPxClientSpinEditBase.prototype.Validate.call(this);
  this.isValidating = false;
 },
 ParseValue: function(withSelection) {
  if (!_aspxIsExists(withSelection))
   withSelection = true;
  if(this.isValidating) 
   withSelection = false;
  var inputElement = this.GetInputWithNumber();
  if (_aspxIsExistsElement(inputElement)) {
   var valueString = inputElement.value;
   var newNumber = (valueString != "") ? this.ParseValueInternal(valueString) : null;
   if ((newNumber != null) && !isNaN(newNumber)) {
    if (newNumber != this.number) {
     newNumber = this.GetCorrectNumberInRange(newNumber);
     var isEqual = newNumber == this.number;
     this.SetNumberInternal(newNumber, withSelection);
     if (!isEqual)
      this.OnValueChanged();
    } else
     this.SetFormattedNumberInInput(newNumber, withSelection)
   }
   else {
    if (this.allowNull)
     this.SetNumberInternal(null, withSelection);
    else
     this.SetNumberInternal(this.GetCorrectNumberInRange(0), withSelection);
    this.OnValueChanged();
   }
  }
 },
 ParseValueAfterPaste: function() {
  if (this.isChangingCheckProcessed) {
   this.ParseValue();
   this.isChangingCheckProcessed = false;
  }
 },
 ParseValueOnPaste: function() {
  var inputElement = this.GetInputElement();
  if (_aspxIsExistsElement(inputElement)) {
   var valueString = inputElement.value;
   if (valueString != "") {
    if (!this.IsValidNumberString(valueString)) {
     valueString = this.lastValue;
     inputElement.value = this.lastValue;
    }
    else
     this.lastValue = valueString;
   }
   var newNumber = (valueString != "") ? this.ParseValueInternal(valueString) : null;
   if (newNumber != null)
    this.SetFormattedNumberInInput(newNumber);
  }
 },
 ParseValueInternal: function(value) {
  if (value == null || value.toString() == "")
   return null;
  if (__aspxNumberDecimalSeparator != ".") {
   if (value.indexOf(__aspxNumberDecimalSeparator) != -1)
    value = value.replace(__aspxNumberDecimalSeparator, ".");
  }
  if (typeof (value) == "number")
   return value;
  return this.ParseNumber(value.toString(), this.GetValueType());
 },
 ParseNumber: function(value, type) {
  if (type == "Decimal")
   return parseFloat(value, 10);
  return parseInt(value, 10);
 },
 RaiseValueChangedEvent: function() {
  return this.OnNumberChanged();
 },
 SetNumberInternal: function(value, withSelection) {
  if (!_aspxIsExists(withSelection))
   withSelection = true;
  this.number = this.RoundNumber(value);
  this.SetFormattedNumberInInput(this.number, withSelection);
  if (this.HasTextDecorators())
   this.SyncRawInputValue();
 },
 RoundNumber: function(number) {
  if(this.decimalPlaces <= 0 || number == null)
   return number;
  return parseFloat(number.toFixed(this.decimalPlaces));
 },
 SetFormattedNumberInInput: function(number, withSelection) {
  if (!_aspxIsExists(withSelection))
   withSelection = true;
  var inputElement = this.GetInputElement();
  if (inputElement != null) {
   if (withSelection)
    this.UpdateSelectionStartAndEndPosition(inputElement); 
   var formattedNumber = this.GetFormattedNumber(number);
   if (formattedNumber.toString() != inputElement.value) {
    inputElement.value = formattedNumber;
    if (this.HasTextDecorators())
     this.SyncRawInputValue();
   }
   if (withSelection)
    _aspxSetSelectionCore(inputElement, inputElement.selectionStart, inputElement.selectionEnd); 
   this.UpdateLastCorrectValueString();
  }
 },
 UseRestrictions: function() {
  return (this.maxValue != 0 || this.minValue != 0);
 },
 UpdateLastCorrectValueString: function() {
  this.lastValue = this.GetInputWithNumber().value;
 },
 GetValue: function() {
  var input = this.GetInputWithNumber();
  if (!_aspxIsExistsElement(input))
   return null;
  if (input.value == "")
   return null;
  else
   return this.number;
 },
 SetValue: function(number) {
  this.number = this.RoundNumber(number);
  ASPxClientSpinEditBase.prototype.SetValue.call(this, this.GetFormattedNumber(this.number));
 },
 OnKeyPress: function(evt) {
  ASPxClientSpinEditBase.prototype.OnKeyPress.call(this, evt);
  if(!this.IsValueChangeAllowed()) return;
  if(this.valueChangedProcsCalledBeforeLostFocus)
   this.valueChangedProcsCalledBeforeLostFocus = false;
  var inputElement = this.GetInputElement();
  if (!inputElement) {
   if (this.pasteTimerID != -1)
    this.ClearTextChangingTimer();
   return;
  }
  this.keyUpProcessing = true;
  if (!__aspxIE && _aspxIsPasteShortcut(evt)) {
   this.keyUpProcessing = false;
   return true;
  }
  if (evt.altKey || evt.ctrlKey)
   return true;
  if (this.IsSpecialKey(evt, false)) {
   this.keyUpProcessing = true;
   return true;
  }
  var keyCode = _aspxGetKeyCode(evt);
  this.UpdateSelectionStartAndEndPosition(inputElement);
  var selectionStart = inputElement.selectionStart;
  var selectionEnd = inputElement.selectionEnd;
  var pressed = String.fromCharCode(keyCode);
  if (!this.IsAllowableSymbol(pressed) && keyCode !== ASPxKey.Enter) {
   this.keyUpProcessing = false;
   return _aspxPreventEvent(evt); 
  }
  if (this.IsSignSymbol(pressed)) {
   var isAllowTypeNumberSignSymbol = this.IsAllowTypeNumberSignSymbol(selectionStart, selectionEnd);
   this.keyUpProcessing = isAllowTypeNumberSignSymbol;
   return isAllowTypeNumberSignSymbol ? true : _aspxPreventEvent(evt);  
  }
  if (this.IsDecimalSeparatorSymbol(pressed)) {
   var isAllowTypeDecimalSeparator = this.IsAllowTypeDecimalSeparatorSymbol(selectionStart, selectionEnd);
   if (isAllowTypeDecimalSeparator)
    this.TypeDecimalSeparator(selectionStart, selectionEnd);
   this.keyUpProcessing = isAllowTypeDecimalSeparator;
   return _aspxPreventEvent(evt);
  }
  if (!this.IsAllowTypeDigitToCurrentPosition(selectionStart, selectionEnd, pressed)) {
   this.keyUpProcessing = false;
   return _aspxPreventEvent(evt); 
  }
  return true;
 },
 OnKeyUp: function(evt) {
  ASPxClientSpinEditBase.prototype.OnKeyUp.call(this, evt);
  if (this.keyUpProcessing) {
   this.UpdateLastCorrectValueString();
   this.keyUpProcessing = false;
  }
  if (this.IsPageOrArrowKey(evt))
   this.OnPageOrArrowKeyUp();
 },
 OnKeyDown: function(evt) {
  if (evt.keyCode == ASPxKey.Enter)
   this.OnTextChanged();
  ASPxClientSpinEditBase.prototype.OnKeyDown.call(this, evt);
  if (this.IsPageOrArrowKey(evt))
   this.OnPageOrArrowKeyDown(evt);
  if ((__aspxIE || __aspxWebKitFamily) && this.IsSpecialKey(evt, true))
   this.keyUpProcessing = true;
 },
 OnPageOrArrowKeyDown: function(evt) {
  var btnIndex = this.GetButtonIndexByKeyCode(_aspxGetKeyCode(evt), evt.ctrlKey);
  if (__aspxOpera)
   this.SetButtonRepeatClickTimer(btnIndex, 60, 1);
  else {
   this.ProcessInternalButtonClick(btnIndex);
   _aspxPreventEvent(evt);
  }
 },
 OnPageOrArrowKeyUp: function(evt) {
  if (__aspxOpera)
   this.ClearButtonRepeatClickTimer();
 },
 IsValueChangeAllowed: function() {
  return !this.readOnly && this.clientEnabled; 
 },
 OnFocus: function() {
  if(this.IsValueChangeAllowed()) {
   this.SaveIEOnValueChangedEmulationData();
  }
  ASPxClientSpinEditBase.prototype.OnFocus.call(this);
  if(this.IsValueChangeAllowed())
   this.SetTextChangingTimer();
 },
 OnLostFocus: function() {
  if(this.IsValueChangeAllowed()) {
   this.ClearTextChangingTimer();
   this.EmulateOnValueChanged();
  }
  ASPxClientSpinEditBase.prototype.OnLostFocus.call(this);
 },
 OnLostFocusCore: function() {
  if(this.lockValueChanged && !this.IsFocusEventsLocked())
   ASPxClientSpinEditBase.prototype.OnValueChanged.call(this);
  ASPxClientSpinEditBase.prototype.OnLostFocusCore.call(this);
 },
 OnNumberChanged: function() {
  var processOnServer = ASPxClientSpinEditBase.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseNumberChanged(processOnServer);
  if (this.focused)
   this.valueChangedProcsCalledBeforeLostFocus = true;
  return processOnServer;
 },
 OnValueChanged: function() {
  if(!this.lockValueChanged)
   ASPxClientSpinEditBase.prototype.OnValueChanged.call(this);
 },
 OnMouseOver: function(evt) {
  if (_aspxGetIsLeftButtonPressed(evt) && !this.HasTextDecorators())
   this.OnTextChangingCheck();
 },
 OnMouseWheel: function(evt) {
  if(!this.allowMouseWheel || !this.GetEnabled())
   return;
  this.ParseValue();
  var wheelDelta = _aspxGetWheelDelta(evt);
  if (wheelDelta > 0)
   this.ChangeNumber(this.inc);
  else if (wheelDelta < 0)
   this.ChangeNumber(-this.inc);
  _aspxPreventEvent(evt);
 },
 OnTextChangingCheck: function(evt) {
  var input = this.GetInputWithNumber();
  if (!input)
   return;
  var curValueString = input.value.toString();
  this.isChangingCheckProcessed = true;
  if ((this.lastValue != curValueString) && !this.keyUpProcessing) {
   var isChromeOnAndroid = __aspxAndroidMobilePlatform && __aspxChrome;
   var difIsLastDS = (this.lastValue + __aspxNumberDecimalSeparator) == curValueString;
   if (!(isChromeOnAndroid && difIsLastDS))
    this.OnPaste;
  }
 },
 OnPaste: function() {
  this.ParseValueOnPaste();
 },
 OnTextChanged: function() {
  this.ParseValue(false);
 },
 GetButtonIndexByKeyCode: function(keyCode, ctrl) {
  var ret = 0;
  switch (keyCode) {
   case ASPxKey.Up:
    ret = ctrl ? this.largeIncButtonIndex : this.incButtonIndex;
    break;
   case ASPxKey.Down:
    ret = ctrl ? this.largeDecButtonIndex : this.decButtonIndex;
    break;
   case ASPxKey.PageUp:
    ret = this.largeIncButtonIndex;
    break;
   case ASPxKey.PageDown:
    ret = this.largeDecButtonIndex;
    break;
  }
  return ret;
 },
 SaveIEOnValueChangedEmulationData: function() {
  this.valueChangedProcsCalledBeforeLostFocus = false;
  var input = this.GetInputWithNumber();
  if (_aspxIsExistsElement(input))
   this.inputValueBeforeFocus = input.value;
 },
 EmulateOnValueChanged: function() {
  if (!this.valueChangedProcsCalledBeforeLostFocus) {
   var input = this.GetInputWithNumber();
   if (_aspxIsExistsElement(input) && input.value != this.inputValueBeforeFocus) {
    this.OnTextChanged();
    this.RaiseValidationInternal();
    this.RaisePersonalStandardValidation();
   }
  }
 },
 SetTextChangingTimer: function() {
  var str = "aspxSETextChangingCheck(\"" + this.name + "\")";
  this.pasteTimerID = _aspxSetInterval(str, __aspxPasteCheckInterval);
 },
 ClearTextChangingTimer: function() {
  this.pasteTimerID = _aspxClearInterval(this.pasteTimerID);
 },
 IsAllowableSymbol: function(symbol) {
  return this.allowSymbolRegExp.test(symbol);
 },
 IsAllowTypeNumberSignSymbol: function(selectionStart, selectionEnd) {
  var curValueString = this.GetInputElement().value.toString();
  if ((curValueString != null) && this.IsSignSymbol(curValueString.charAt(0)))
   return (selectionStart == 0) && (selectionEnd > 0);
  else
   return (selectionStart == 0);
 },
 IsAllowTypeDecimalSeparatorSymbol: function(selectionStart, selectionEnd) {
  if (this.maxLength > 0 && selectionStart >= this.maxLength)
   return false;
  var unselectedText = this.GetUnselectedText(selectionStart, selectionEnd);
  var decimalSepIndex = unselectedText.indexOf(__aspxNumberDecimalSeparator);
  if ((this.decimalPlaces != 0) && (decimalSepIndex == -1)) {
   var possibleValueString = this.GetPossibleValueString(selectionStart, selectionEnd, __aspxNumberDecimalSeparator);
   return this.IsValidFormattedNumberString(possibleValueString);
  }
  return decimalSepIndex == -1;
 },
 IsAllowTypeDigitToCurrentPosition: function(selectionStart, selectionEnd, pressedSymbol) {
  var possibleValueString = this.GetPossibleValueString(selectionStart, selectionEnd, pressedSymbol);
  var decimalSepIndex = possibleValueString.indexOf(__aspxNumberDecimalSeparator);
  if ((this.decimalPlaces != 0) && (decimalSepIndex != -1))
   return this.IsValidFormattedNumberString(possibleValueString);
  return true;
 },
 IsValidNumberString: function(numString) {
  return this.validNumberRegExp.test(numString);
 },
 IsValidFormattedNumberString: function(numString) {
  return this.validFormattedNumberRegExp.test(numString);
 },
 GetCorrectFormattedNumberString: function(numString) {
  var ret = numString;
  if (!this.IsValidFormattedNumberString(numString)) {
   if (numString.toLowerCase().indexOf("e") > -1)
    numString = ASPxClientSpinEdit.RemoveExponentialNotation(numString);
   var decimalSepIndex = numString.indexOf(__aspxNumberDecimalSeparator);
   if (decimalSepIndex > -1) {
    ret = numString.substring(0, decimalSepIndex);
    if (this.IsFloatNumber()) {
     if (this.decimalPlaces > 0)
      ret += numString.substr(decimalSepIndex, this.decimalPlaces + 1);
     else
      ret += numString.substr(decimalSepIndex);
    }
   }
   else
    ret = numString;
  }
  return ret;
 },
 GetPossibleValueString: function(selectionStart, selectionEnd, pressedSymbol) {
  var curValueString = this.GetInputElement().value.toString();
  var newValueString = curValueString.substring(0, selectionStart);
  newValueString += pressedSymbol;
  var selectionLength = selectionEnd - selectionStart;
  newValueString += curValueString.substr(selectionEnd, curValueString.length - selectionLength);
  return newValueString;
 },
 GetUnselectedText: function (selectionStart, selectionEnd) {
  return this.GetPossibleValueString(selectionStart, selectionEnd, "");
 },
 IsDecimalSeparatorSymbol: function(symbol) {
  for (var i = 0; i < __aspxPossibleNumberDecimalSeparators.length; i++)
   if (__aspxPossibleNumberDecimalSeparators[i] == symbol)
   return true;
  return false;
 },
 IsValidMinMaxValue: function(minValue, maxValue) {
  if (typeof (maxValue) != "number")
   maxValue = this.ParseValueInternal(maxValue.toString());
  if (typeof (minValue) != "number")
   minValue = this.ParseValueInternal(minValue.toString());
  return (isNaN(maxValue) || isNaN(minValue)) ? false : (maxValue >= minValue);
 },
 IsSpecialKey: function(evt, inKeyDown) {
  var keyCode = _aspxGetKeyCode(evt);
  return keyCode == 0 || keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Tab ||
   (inKeyDown && keyCode == ASPxKey.Delete) || keyCode > 60000 ;
 },
 IsPageOrArrowKey: function(evt) {
  var keyCode = _aspxGetKeyCode(evt);
  if (__aspxOpera && evt.ctrlKey && (keyCode == ASPxKey.Up || keyCode == ASPxKey.Down))
   return false;
  else
   return keyCode == ASPxKey.Up || keyCode == ASPxKey.Down ||
       keyCode == ASPxKey.PageUp || keyCode == ASPxKey.PageDown;
 },
 IsSignSymbol: function(symbol) {
  return symbol == "-";
 },
 TypeDecimalSeparator: function(selectionStart, selectionEnd) {
  var possibleValueString = this.GetPossibleValueString(selectionStart, selectionEnd, __aspxNumberDecimalSeparator);
  var inputElement = this.GetInputElement();
  inputElement.value = possibleValueString;
  var decimalSepIndex = possibleValueString.indexOf(__aspxNumberDecimalSeparator);
  _aspxSetCaretPosition(inputElement, decimalSepIndex + 1); 
 },
 UpdateSelectionStartAndEndPosition: function(inputElement) {
  if (__aspxIE && __aspxBrowserVersion < 9 && document.selection) {
   inputElement.selectionStart = 0;
   inputElement.selectionEnd = 0;
   var curRange = document.selection.createRange();
   var copyRange = curRange.duplicate();
   curRange.move('character', -inputElement.value.length);
   curRange.setEndPoint('EndToStart', copyRange);
   inputElement.selectionStart = curRange.text.length;
   inputElement.selectionEnd = inputElement.selectionStart + copyRange.text.length;
  }
 },
 GetInputWithNumber: function() {
  if (!this.focused && this.HasTextDecorators())
   return this.GetRawInputElement();
  return this.GetInputElement();
 },
 GetDecoratedText: function(value) {
  if (typeof value == "string" && !!this.displayFormat)
   value = this.ParseValueInternal(value);
  var result = ASPxClientSpinEditBase.prototype.GetDecoratedText.call(this, value).toString();
  if(!this.displayFormat && __aspxNumberDecimalSeparator !== ".") 
   result = result.replace('.', __aspxNumberDecimalSeparator);
  return result;
 },
 RaiseNumberChanged: function(processOnServer) {
  if (!this.NumberChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.NumberChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 SetNumber: function(number) {
  this.SetValue(number);
 },
 GetNumber: function() {
  return this.number;
 },
 GetText: function () {
  if (this.maskInfo != null)
   return this.maskInfo.GetText();
  else {
   var isNullText = this.number === null && this.nullText !== "";
   var inputElementText = this.GetInputElement().value;
   return isNullText ? "" : this.GetDecoratedText(inputElementText).toString();
  }
 },
 SetText: function(text) {
  ASPxClientSpinEditBase.prototype.SetValue.call(this, text);
  this.ParseValue(false);
 },
 SetMinValue: function(value) {
  if (this.IsValidMinMaxValue(value, this.maxValue)) {
   this.minValue = this.ParseValueInternal(value.toString());
   this.EnsureCurrentNumberInBoundries();
  }
 },
 GetMinValue: function() {
  return this.minValue;
 },
 SetMaxValue: function(value) {
  if (this.IsValidMinMaxValue(this.minValue, value)) {
   this.maxValue = this.ParseValueInternal(value.toString());
   this.EnsureCurrentNumberInBoundries();
  }
 },
 GetMaxValue: function() {
  return this.maxValue;
 },
 EnsureCurrentNumberInBoundries: function() {
  var value = this.GetValue();
  if (value != null)
   this.SetNumber(this.GetCorrectNumberInRange(value));
 },
 GetParsedNumber: function() {
  var inputElement = this.GetInputElement();
  var valueString = inputElement.value;
  var newNumber = valueString != "" ? this.ParseValueInternal(valueString) : null;
  if ((newNumber != null) && !isNaN(newNumber)) {
   if (newNumber != this.number)
    newNumber = this.GetCorrectNumberInRange(newNumber);
  } else
   newNumber = this.GetCorrectNumberInRange(0);
  return newNumber;
 },
 RestoreSelectionStartAndEndPosition: function() {
  var inputElement = this.GetInputElement();
  _aspxSetSelectionCore(inputElement, inputElement.selectionStart, inputElement.selectionEnd);
 },
 SaveSelectionStartAndEndPosition: function() {
  this.UpdateSelectionStartAndEndPosition(this.GetInputElement());
 }
});
ASPxClientSpinEdit.Cast = ASPxClientControl.Cast;
ASPxClientSpinEdit.RemoveExponentialNotation = function(numString) {
 var mantissaPossition = numString.toLowerCase().indexOf("e");
 var ret = numString;
 if (mantissaPossition > -1) {
  var isNegative = numString.indexOf("-") == 0;
  var isNegativeMantissa = numString.lastIndexOf("-") > 0;
  var mantissa = numString.replace(new RegExp('^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?)'), "");
  var numberBase = numString.replace(new RegExp('([eE][+-]?[0-9]+)'), "");
  numberBase = numberBase.replace("+", "");
  numberBase = numberBase.replace("-", "");
  var decimalDecimalSeparator = ".";
  if (numberBase.indexOf(decimalDecimalSeparator) == -1) {
   numberBase = numberBase.replace(decimalDecimalSeparator, __aspxNumberDecimalSeparator);
   decimalDecimalSeparator = __aspxNumberDecimalSeparator;
  }
  var numberParts = numberBase.split(decimalDecimalSeparator);
  if (numberParts.length == 1)
   numberParts[1] = "";
  var zeroNumbers = parseInt(mantissa, 10);
  if (isNegativeMantissa) {
   zeroNumbers -= 1;
   ret = "0" + __aspxNumberDecimalSeparator + ASPxClientSpinEdit.GetZeros(zeroNumbers) +
     numberParts[0] + numberParts[1];
  }
  else {
   zeroNumbers -= numberParts[0].length + numberParts[1].length - 1;
   ret = numberParts[0] + numberParts[1] + ASPxClientSpinEdit.GetZeros(zeroNumbers);
  }
  if (isNegative)
   ret = _aspxInsert(ret, "-", 0);
 }
 return ret;
}
ASPxClientSpinEdit.GetZeros = function(length) {
 var zeros = [];
 for (var i = 0; i < length; i++)
  zeros.push('0');
 return zeros.join("");
}
function aspxSEMouseOver(name, evt) {
 var edit = aspxGetControlCollection().Get(name);
 if (edit != null) edit.OnMouseOver(evt);
}
function aspxSETextChangingCheck(name) {
 var edit = aspxGetControlCollection().Get(name);
 if (edit != null) edit.OnTextChangingCheck();
}
function aspxSEValueChanged(name) {
 var spinEdit = aspxGetControlCollection().Get(name);
 if (spinEdit != null) spinEdit.OnValueChangedTimer();
}
function aspxSRepeatButtonClick(name, buttonIndex, iterationIndex) {
 var spinEdit = aspxGetControlCollection().Get(name);
 if (spinEdit != null) spinEdit.DoRepeatButtonClick(buttonIndex, iterationIndex);
}
var __aspxSpinEditCollection = null;
function aspxGetSpinEditCollection() {
 if (__aspxSpinEditCollection == null)
  __aspxSpinEditCollection = new ASPxClientSpinEditCollection();
 return __aspxSpinEditCollection;
}
ASPxClientSpinEditCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetSpinEdit: function(id) {
  return this.Get(this.GetSpinEditName(id));
 },
 GetSpinEditName: function(id) {
  var pos = id.lastIndexOf(__aspxSpindButtonIdPostfix);
  if (pos > -1)
   return id.substring(0, pos);
  pos = id.lastIndexOf(__aspxTEInputSuffix);
  if (pos > -1)
   return id.substring(0, pos);
  return id;
 }
});
ASPxClientTimeEdit = _aspxCreateClass(ASPxClientSpinEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.date = null;
  this.DateChanged = new ASPxClientEvent();
  this.InternalValueChanging = new ASPxClientEvent();
  this.OwnerDateEdit = null;
 },
 Initialize: function() {
  ASPxClientSpinEditBase.prototype.Initialize.call(this);
  if(!_aspxMaskDateTimeHelper.HasDateParts(this.maskInfo) && this.date == null) {
   var date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo);
   this.SetValue(date);
  }
  this.SubscribeInputElementClick();
 },
 SubscribeInputElementClick: function() {
  var editor = this;
  _aspxAttachEventToElement(this.GetInputElement().parentNode, "click", function(){
   editor.FillMaskInfo();
   if(editor.maskInfo.ApplyFixes(null))
    editor.ApplyMaskInfo(false);
  });
 },
 ApplyMaskInfo: function(applyCaret) { 
  var input = this.GetInputElement();
  var prev =  input.value;
  ASPxClientSpinEditBase.prototype.ApplyMaskInfo.call(this, applyCaret);
  if(prev != input.value)
   this.RaiseInternalValueChanging(_aspxMaskDateTimeHelper.GetDate(this.maskInfo));
 },
 SetDate: function(date) {
  this.SetValue(date);
 },
 GetDate: function() {
  return this.date ? new Date(this.date.valueOf()) : null;
 },
 SetValue: function(date) {
  this.date = date;
  _aspxMaskDateTimeHelper.SetDate(this.maskInfo, date);
  this.ApplyMaskInfo(false);
  this.SavePrevMaskValue();
 },
 GetValue: function() {
  return this.date;
 },
 GetValueString: function() {
  return this.date != null ? _aspxGetInvariantDateTimeString(this.date) : null;
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  var delta;
  var result = false;
  if(buttonIndex == this.incButtonIndex) {
   delta = 1;
   result = true;
  } else if(buttonIndex == this.decButtonIndex) {
   delta = -1;
   result = true;
  }
  if(result && !this.readOnly) {
   _aspxMaskManager.OnMouseWheel(this.maskInfo, delta);
   this.ApplyMaskInfo(true);
  }
  this.SetFocus();
  return result;
 },
 ParseValue: function() {
  var date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo, this.date);
  var changed = !_aspxAreDatesEqualExact(this.date, date);
  if(changed) {
   this.SetValue(date);
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
 },
 OnTextChanged: function() {
  this.ParseValue();
 },
 RaiseInternalValueChanging: function(date) {
  if(!this.InternalValueChanging.IsEmpty())
   this.InternalValueChanging.FireEvent(this, date); 
 },
 OnMouseWheel: function(evt) {
  if(!this.allowMouseWheel || !this.GetEnabled())
   return;
  ASPxClientTextEdit.prototype.OnMouseWheel.call(this, evt);
 },
 InvokeActualOnValueChanged: function() {
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseDateChanged(processOnServer);
  return processOnServer;
 },
 RaiseDateChanged: function(processOnServer) {
  if(!this.DateChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.DateChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetMaskDisplayText: function() {
  if(!this.focused) {
   if(_aspxMaskDateTimeHelper.HasDateParts(this.maskInfo) && this.date == null)
    return this.nullText;
   if(this.HasTextDecorators())
    return this.GetDecoratedText(this.date);
  }
  return this.maskInfo.GetText();
 },
 HasTextDecorators: function() {
  return this.date == null || ASPxClientSpinEditBase.prototype.HasTextDecorators.call(this);
 },
 SyncRawInputValue: function() {
  this.GetRawInputElement().value = this.date == null ? "N" : _aspxToLocalTime(this.date).valueOf();
 },
 DecodeRawInputValue: function(value) {
  if(value == "N") return null;
  var date = new Date();
  date.setTime(Number(value));
  var result = _aspxToUtcTime(date);
  var offsetDiff = result.getTimezoneOffset() - date.getTimezoneOffset();
  if(offsetDiff !== 0)
   result.setTime(result.valueOf() + offsetDiff * 60000);
  return result;
 },
 BeginShowMaskHint: function() {
 },
 OnLostFocusCore: function() {  
  ASPxClientEdit.prototype.OnLostFocusCore.call(this);
  this.EndShowMaskHint();
  this.HideMaskHint();  
  if(!this.IsFocusEventsLocked()) {
   if(this.maskInfo.ApplyFixes(null))
    this.ApplyMaskInfo(false);
   this.RaiseStandardOnChange();
  }
  this.ToggleTextDecoration();
 }
});
ASPxClientTimeEdit.Cast = ASPxClientControl.Cast;

MVCxClientLabel = _aspxCreateClass(ASPxClientLabel, {
 Initialize: function() {
  if(this.associatedControlName){
   var associatedControl = aspxGetControlCollection().GetByName(this.associatedControlName);
   var inputElement = associatedControl && associatedControl.GetInputElement ? associatedControl.GetInputElement() : null;
   var inputName = inputElement ? inputElement.id : this.associatedControlName + "_I";
   $(this.GetMainElement()).attr("for", inputName);
  }
  ASPxClientLabel.prototype.Initialize.call(this);
 }
});
MVCxClientListBox = _aspxCreateClass(ASPxClientListBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientListBox.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function(){
  if(this.callbackUrl != ""){
   this.callBack = function(arg){ MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) }; 
   this.isCallbackMode = true;
  }
  ASPxClientListBox.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command){
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientListBox.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientListBox.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientListBox.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 }
});

ASPxClientProgressBar = _aspxCreateClass(ASPxClientEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.adjustControl = true;
 },
 InlineInitialize: function() {
  var progressBar = this.GetProgressBar();
  progressBar.mainElement = this.GetMainElement();
  progressBar.InlineInitialize(true );
  ASPxClientEditBase.prototype.InlineInitialize.call(this);
 },
 AdjustControlCore: function() {
  ASPxClientEditBase.prototype.AdjustControlCore.call(this); 
  this.GetProgressBar().AdjustControlCore();
 },
 GetProgressBar: function() {
  return window[this.name + "_MC"];
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  var valueIndicatorCell = this.GetProgressBar().GetValueIndicatorCell();
  if(valueIndicatorCell)
   aspxGetStateController().SetElementEnabled(valueIndicatorCell, enabled);
 },
 SetPosition: function(position) {
  this.GetProgressBar().SetPosition(position);
 },
 GetPosition: function() {
  return this.GetProgressBar().GetPosition();
 },
 SetCustomDisplayFormat: function(text) {
  this.GetProgressBar().SetCustomDisplayFormat(text);
 },
 GetDisplayText: function() {
  return this.GetProgressBar().GetDisplayText();
 },
 GetPercent: function() {
  return this.GetProgressBar().GetPercent();
 },
 SetMinimum: function(min) {
  this.SetMinMaxValues(min, this.GetMaximum());
 },
 SetMaximum: function(max) {
  this.SetMinMaxValues(this.GetMinimum(), max);
 },
 GetMinimum: function() {
  return this.GetProgressBar().minimum;
 },
 GetMaximum: function() {
  return this.GetProgressBar().maximum;
 },
 SetMinMaxValues: function(min, max) {
  this.GetProgressBar().SetMinMaxValues(min, max);
 },
 SetHeight: function(height) {
  if(height < this.GetHeight())
   this.GetProgressBar().ResetIndicatorHeight();
  ASPxClientControl.prototype.SetHeight.call(this, height);
 },
 SetValue: function(value) {
  this.SetPosition(value);
 },
 GetValue: function() {
  return this.GetPosition();
 }
 });
 ASPxClientProgressBar.Cast = ASPxClientControl.Cast;
MVCxClientTokenBox = _aspxCreateClass(ASPxClientTokenBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.callbackCustomArgs = {};
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientTokenBox.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function() {
  if(this.callbackUrl != "") {
   this.callBack = function(arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) };
   this.isCallbackMode = true;
  }
  ASPxClientTokenBox.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientTokenBox.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientTokenBox.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientTokenBox.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 }
});
ASPxValidationSummaryRenderMode = {
 Table: "t",
 List: "l"
};
ASPxClientValidationSummaryDomHelper = _aspxCreateClass(null, {
 constructor: function(validationSummary) {
  this.validationSummary = validationSummary;
  this.editorNameErrorContainerMap = { };
  this.errorCount = 0;
 },
 CreateErrors: function(invalidEditorNames) {
  var controlCollection = aspxGetControlCollection();
  for(var i = 0; i < invalidEditorNames.length; i++) {
   var editorName = invalidEditorNames[i];
   var editor = controlCollection.Get(editorName);
   if(editor) {
    if(editor.GetIsValid())
     continue;
    var errorText = editor.HtmlEncode(editor.GetErrorText());
    var errorContainer = this.SetError(editorName, errorText, true );
    this.editorNameErrorContainerMap[editorName] = errorContainer;
   }
  }
 },
 SetError: function(editorName, errorText, forceNewErrorsAccepting) {
  var errorContainer = this.GetOrCreateErrorContainer(editorName, this.validationSummary.acceptNewErrors || forceNewErrorsAccepting);
  if(errorContainer) {
   this.InsertErrorTextAndLinkIntoErrorContainer(editorName, errorContainer, errorText);
   this.validationSummary.UpdateVisibility();
  }
  return errorContainer;
 },
 RemoveError: function(editorName) {
  var errorContainer = this.editorNameErrorContainerMap[editorName];
  if(_aspxIsExistsElement(errorContainer)) {
   delete this.editorNameErrorContainerMap[editorName];
   errorContainer.parentNode.removeChild(errorContainer);
   this.errorCount--;
   this.validationSummary.UpdateVisibility();
  }
 },
 HasErrors: function() {
  return this.errorCount > 0;
 },
 GetInvalidEditorNames: function() {
  var names = [ ];
  for(var editorName in this.editorNameErrorContainerMap) {
   if(typeof(editorName) == "string") {
    var editor = aspxGetControlCollection().Get(editorName);
    if(ASPxIdent.IsASPxClientEdit(editor))
     names.push(editorName);
   }
  }
  return names;
 },
 GetOrCreateErrorContainer: function(editorName, summaryAcceptsNewErrors) {
  var errorContainer = this.editorNameErrorContainerMap[editorName];
  if(!errorContainer && summaryAcceptsNewErrors) {
   errorContainer = this.CreateErrorContainer();
   this.editorNameErrorContainerMap[editorName] = errorContainer;
   var errorsContainer = this.GetErrorsContainer();
   this.AppendError(errorsContainer, errorContainer);
   this.errorCount++;
  }
  return errorContainer;
 },
 GetErrorsContainer: function() {
  var rootTable = this.validationSummary.GetMainElement();
  if(rootTable) {
   var rootCell = rootTable.rows[0].cells[0];
   return _aspxGetElementNodes(rootCell)[this.validationSummary.hasHeader ? 1 : 0];
  }
 },
 GetEffectiveErrorsContainer: function(errorsContainer) {
  if(!errorsContainer)
   errorsContainer = this.GetErrorsContainer();
  if(errorsContainer && errorsContainer.tagName == "TABLE") {
   var tbody = _aspxGetChildByTagName(errorsContainer, "TBODY", 0);
   if(!tbody) {
    tbody = document.createElement("TBODY");
    errorsContainer.appendChild(tbody);
   }
   return tbody;
  } else
   return errorsContainer;
 },
 CreateErrorContainer: function() {
  var sample = this.GetSampleErrorContainerNode();
  return sample.cloneNode(true );
 },
 InsertErrorTextAndLinkIntoErrorContainer: function(editorName, errorContainer, errorText) {
  var errorTextContainer;
  if(this.validationSummary.showErrorAsLink)
   errorTextContainer = _aspxGetChildByTagName(errorContainer, "A", 0);
  else if(this.validationSummary.renderMode == ASPxValidationSummaryRenderMode.Table)
   errorTextContainer = _aspxGetChildByTagName(errorContainer, "TD", 0);
  else
   errorTextContainer = errorContainer;
  errorTextContainer.innerHTML = errorText;
  if(this.validationSummary.showErrorAsLink)
   errorTextContainer.href = "javascript:_aspxVSOnErrorClick('" + editorName + "');";
 },
 AppendError: function(errorsContainer, errorContainer) {
  var effectiveErrorsContainer = this.GetEffectiveErrorsContainer(errorsContainer);
  if (effectiveErrorsContainer)
   effectiveErrorsContainer.appendChild(errorContainer);
 },
 GetSampleErrorContainerNode: function() {
  if(!this.sampleErrorContainerNode)
   this.sampleErrorContainerNode = this.CreateSampleErrorContainerNode();
  return this.sampleErrorContainerNode;
 },
 CreateSampleErrorContainerNode: function() {
  var errorsContainer = this.GetErrorsContainer();
  var errorsContainerTagName = errorsContainer.tagName;
  var html = "<" + errorsContainerTagName + ">" + this.validationSummary.sampleErrorContainer + "</" + errorsContainerTagName + ">";
  var div = document.createElement("DIV");
  div.innerHTML = html;
  var effectiveTemporaryErrorsContainer = this.GetEffectiveErrorsContainer(_aspxGetElementNodes(div)[0]);
  var sample = _aspxGetElementNodes(effectiveTemporaryErrorsContainer)[0];
  sample.parentNode.removeChild(sample);
  return sample;
 }
});
ASPxClientValidationSummary = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientValidationSummary = true;
  this.validationGroup = "";
  this.invalidEditorNames = [ ];
  this.renderMode = ASPxValidationSummaryRenderMode.Table;
  this.showErrorAsLink = true;
  this.hasHeader = false;
  this.domHelper = new ASPxClientValidationSummaryDomHelper(this);
  this.acceptNewErrors = false;
  this.VisibilityChanged = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  var summaryCollection = aspxGetClientValidationSummaryCollection();
  summaryCollection.RegisterSummary(this);
  var postHandler = aspxGetPostHandler();
  postHandler.Post.AddHandler(this.SaveInvalidEditorNames, this);
  this.RemoveFakeItem();
  this.UpdateVisibility(this.invalidEditorNames.length > 0 , true );
  ASPxClientControl.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  this.domHelper.CreateErrors(this.invalidEditorNames);
  this.UpdateVisibility();
 },
 AllowNewErrorsAccepting: function() {
  this.acceptNewErrors = true;
 },
 ForbidNewErrorsAccepting: function() {
  this.acceptNewErrors = false;
 },
 SaveInvalidEditorNames: function() {
  if(this.RenderExistsOnPage())
   _aspxGetElementById(this.name + "_IE").value = _aspxToJson(this.domHelper.GetInvalidEditorNames());
 },
 SetError: function (editorName, errorText, forceNewErrorsAccepting) {
  if (this.RenderExistsOnPage())
   this.domHelper.SetError(editorName, errorText, forceNewErrorsAccepting);
 },
 RemoveError: function(editorName) {
  this.domHelper.RemoveError(editorName);
 },
 UpdateVisibility: function(hasErrors, initializing) {
  if(typeof(hasErrors) == "undefined")
   hasErrors = this.domHelper.HasErrors();
  this.SetVisible(hasErrors, initializing);
 },
 SetVisible: function(visible, initializing) {
  var visibilityChanged = this.GetVisible() != visible;
  if(visibilityChanged)
   ASPxClientControl.prototype.SetVisible.call(this, visible);
  if(visibilityChanged || initializing) {
   var args = new ASPxClientValidationSummaryVisibilityChangedEventArgs(visible);
   this.VisibilityChanged.FireEvent(this, args);
  }
 },
 RemoveFakeItem: function() {
  var fakeItem = this.GetChild(ASPxClientValidationSummary.FakeItemIDSuffix);
  _aspxRemoveElement(fakeItem);
 }
});
ASPxClientValidationSummary.AllowNewErrorsAccepting = function(validationGroup) {
 aspxGetClientValidationSummaryCollection().AllowNewErrorsAccepting(validationGroup);
};
ASPxClientValidationSummary.ForbidNewErrorsAccepting = function(validationGroup) {
 aspxGetClientValidationSummaryCollection().ForbidNewErrorsAccepting(validationGroup);
};
ASPxClientValidationSummary.FakeItemIDSuffix = "_FI";
ASPxIdent.IsASPxClientValidationSummary = function(obj) {
 return obj && obj.isASPxClientValidationSummary;
};
function _aspxVSOnErrorClick(editorName) {
 var editor = aspxGetControlCollection().Get(editorName);
 if(editor && _aspxIsFunction(editor.SetFocus))
  editor.SetFocus();
}
ASPxClientValidationSummaryVisibilityChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(visible) {
  this.constructor.prototype.constructor.call(this);
  this.visible = visible;
 }
});
ASPxClientValidationSummaryCollection = _aspxCreateClass(null, {
 constructor: function() {
  this.summaries = { };
 },
 AllowNewErrorsAccepting: function(validationGroup) {
  this.ProcessValidationGroupSummaries(validationGroup, function(summary) {
   summary.AllowNewErrorsAccepting();
  });
 },
 ForbidNewErrorsAccepting: function(validationGroup) {
  this.ProcessValidationGroupSummaries(validationGroup, function(summary) {
   summary.ForbidNewErrorsAccepting();
  });
 },
 OnEditorIsValidStateChanged: function(editor, validationType, notifyValidationSummariesToAcceptNewError) {
  if(validationType != ASPxValidationType.PersonalOnValueChanged){
   if(editor.GetIsValid())
    this.RemoveError(editor);
   else
    this.SetError(editor, notifyValidationSummariesToAcceptNewError);
  }
 },
 AddSummaryToGroupSummaries: function(groupSummaries, summary) {
  for(var i = 0; i < groupSummaries.length; i++) {
   if(groupSummaries[i].name == summary.name) {
      groupSummaries[i] = summary;
      return;
   }
  }
  groupSummaries.push(summary);
 },
 RegisterSummary: function(summary) {
  var groupSummaries = this.GetValidationGroupSummaries(summary.validationGroup);
  this.AddSummaryToGroupSummaries(groupSummaries, summary);
 },
 SetError: function(editor, forceNewErrorsAccepting) {
  this.ProcessValidationGroupSummaries(editor.validationGroup, function(summary, editorName, errorText, _forceNewErrorsAccepting) {
   summary.SetError(editorName, errorText, _forceNewErrorsAccepting);
  }, [ editor.name, editor.HtmlEncode(editor.GetErrorText()), forceNewErrorsAccepting ]);
 },
 RemoveError: function(editor) {
  this.ProcessValidationGroupSummaries(editor.validationGroup, function(summary, editorName) {
   summary.RemoveError(editorName);
  }, editor.name);
 },
 ProcessValidationGroupSummaries: function(validationGroup, processingProc, args) {
  if(!args)
   args = [ ];
  else if(args.constructor != Array)
   args = [ args ];
  var groupSummaries = this.GetValidationGroupSummaries(validationGroup);
  for(var i = 0; i < groupSummaries.length; i++)
   processingProc.apply(null, [groupSummaries[i]].concat(args));
 },
 GetValidationGroupSummaries: function(validationGroup) {
  var groupSummaries = [ ];
  if(!_aspxIsExists(validationGroup)) {
   for(var groupName in this.summaries) {
    var summaries = this.summaries[groupName];
    if(ASPxIdent.IsArray(summaries)) {
     for(var i = 0; i < summaries.length; i++) {
      var summary = summaries[i];
      if(ASPxIdent.IsASPxClientValidationSummary(summary))
       this.AddSummaryToGroupSummaries(groupSummaries, summary);
     }
    }
   }
  } else {
   groupSummaries = this.summaries[validationGroup];
   if(!groupSummaries) {
    groupSummaries = [ ];
    this.summaries[validationGroup] = groupSummaries;
   }
  }
  return groupSummaries;
 }
});
var __aspxGetClientValidationSummaryCollection = null;
function aspxGetClientValidationSummaryCollection() {
 if(!__aspxGetClientValidationSummaryCollection)
  __aspxGetClientValidationSummaryCollection = new ASPxClientValidationSummaryCollection();
 return __aspxGetClientValidationSummaryCollection;
}

function ChartHitRectangle(left, top, right, bottom) {
 this.left = left;
 this.top = top;
 this.right = right;
 this.bottom = bottom;
}
ChartHitRectangle.prototype = {
 IsVisible: function(x, y) {
  return (x >= this.left) && (x < this.right) && (y >= this.top) && (y < this.bottom);
 }
}
ChartHitRectangle.prototype.constructor = ChartHitRectangle;
function ChartHitEmpty() {
}
ChartHitEmpty.prototype = {
 IsVisible: function(x, y) {
  return false;
 } 
}
ChartHitEmpty.prototype.constructor = ChartHitEmpty;
function ChartHitExpression(leftOperand, rightOperand) {
 if(ChartHitExpression.AsProrotype)
  return delete ChartHitExpression.AsProrotype;
 this.leftOperand = leftOperand;
 this.rightOperand = rightOperand;
}
ChartHitExpression.prototype = {
 IsVisible: function(x, y) {
  throw "ChartHitExpression abstract error";
 }
}
ChartHitExpression.prototype.constructor = ChartHitExpression;
function ChartHitUnion(leftOperand, rightOperand) {
 ChartHitExpression.call(this, leftOperand, rightOperand);
}
ChartHitExpression.AsPrototype = true;
ChartHitUnion.prototype = new ChartHitExpression();
ChartHitUnion.prototype.constructor = ChartHitUnion;
ChartHitUnion.prototype.IsVisible = function(x, y) {
 return this.leftOperand.IsVisible(x, y) || this.rightOperand.IsVisible(x, y);
}
function ChartHitIntersection(leftOperand, rightOperand) {
 ChartHitExpression.call(this, leftOperand, rightOperand);
}
ChartHitExpression.AsPrototype = true;
ChartHitIntersection.prototype = new ChartHitExpression();
ChartHitIntersection.prototype.constructor = ChartHitIntersection;
ChartHitIntersection.prototype.IsVisible = function(x, y) {
 return this.leftOperand.IsVisible(x, y) && this.rightOperand.IsVisible(x, y);
}
function ChartHitExclusion(leftOperand, rightOperand) {
 ChartHitExpression.call(this, leftOperand, rightOperand);
}
ChartHitExpression.AsPrototype = true;
ChartHitExclusion.prototype = new ChartHitExpression();
ChartHitExclusion.prototype.constructor = ChartHitExclusion;
ChartHitExclusion.prototype.IsVisible = function(x, y) {
 return this.leftOperand.IsVisible(x, y) && !this.rightOperand.IsVisible(x, y);
}
function ChartHitXor(leftOperand, rightOperand) {
 ChartHitExpression.call(this, leftOperand, rightOperand);
}
ChartHitExpression.AsPrototype = true;
ChartHitXor.prototype = new ChartHitExpression();
ChartHitXor.prototype.constructor = ChartHitXor;
ChartHitXor.prototype.IsVisible = function(x, y) {
 return this.leftOperand.IsVisible(x, y) ^ this.rightOperand.IsVisible(x, y);
}
function ChartHitPath(lineSegments, alternate) {
 this.lineSegments = lineSegments;
 this.alternate = alternate;
}
ChartHitPath.prototype = {
 IsVisible: function(x, y) {
  if(this.lineSegments.length == 0)
   return false;
  var isVisible = this.IsVisibleInternal(x - 0.01, y);
  if(!isVisible)
   isVisible = this.IsVisibleInternal(x + 0.01, y);
  return isVisible;
 },
 IsVisibleInternal: function(x, y) { 
  var filteredLineSegments = this.FilterLineSegments(x, y);
  if(filteredLineSegments.length == 0)
   return false;
  var xIntersections = new ChartXIntersections(filteredLineSegments, x);
  var indicator = this.CalcIndicator(filteredLineSegments, xIntersections, y);
  return this.alternate ? (indicator % 2) != 0 : indicator != 0;
 },
 FilterLineSegments: function(x, y) {
  var filteredLineSegments = new Array();
  for(var i = 0; i < this.lineSegments.length; i++) {
   var lineSegment = this.lineSegments[i];
   if(this.ShouldFilterLineSegmentByX(lineSegment, x))
    continue;
   if(this.ShouldFilterLineSegmentByY(lineSegment, y))
    continue;
   filteredLineSegments.push(lineSegment);
  }
  return filteredLineSegments;
 },
 ShouldFilterLineSegmentByX: function(lineSegment, x) {
  return ((lineSegment.startX < x) && (lineSegment.finishX < x)) || 
   ((lineSegment.startX > x) && (lineSegment.finishX > x));
 },
 ShouldFilterLineSegmentByY: function(lineSegment, y) {
  return (lineSegment.startY < y) && (lineSegment.finishY < y);
 },
 CalcIndicator: function(lineSegments, xIntersections, y) {
  var indicator = 0;
  for(var i = 0; i < xIntersections.intersections.length; i++) {
   if(xIntersections.intersections[i] < y)
    continue;
   if(lineSegments[i].LeftToRight())
    indicator++;
   else if(lineSegments[i].RightToLeft())
    indicator--;
   else
    throw ChartLineSegment.err;
  }
  return indicator;
 }
}
ChartHitPath.prototype.constructor = ChartHitPath;
function ChartLineSegment(startX, startY, finishX, finishY) {
 this.startX = startX;
 this.startY = startY;
 this.finishX = finishX;
 this.finishY = finishY;
}
ChartLineSegment.err = "Invalid line segment";
ChartLineSegment.prototype = {
 LeftToRight : function() {
  return this.startX < this.finishX;
 },
 RightToLeft : function() {
  return this.startX > this.finishX;
 }
}
ChartLineSegment.prototype.constructor = ChartLineSegment;
function ChartXIntersections(lineSegments, x) {
 this.intersections = new Array(lineSegments.length);
 for(var i = 0; i < lineSegments.length; i++)
  this.intersections[i] = this.CalcIntersection(lineSegments[i], x);
}
ChartXIntersections.prototype = {
 CalcIntersection: function(lineSegment, x) {
  var delta = lineSegment.finishX - lineSegment.startX;
  if(delta == 0)
   throw ChartLineSegment.err;
  var k = (lineSegment.finishY - lineSegment.startY) / delta;
  var b = (lineSegment.startY * lineSegment.finishX - lineSegment.finishY * lineSegment.startX) / delta;
  return k * x + b;
 }
}
ChartXIntersections.prototype.constructor = ChartXIntersections;
function ChartHitTestController(hitInfo) {
 this.objects = new Array();
 this.additionalObjects = new Array();
 var hitInfoLoader = new ChartHitInfoLoader(hitInfo);
 this.regions = hitInfoLoader.regions;
}
ChartHitTestController.prototype = {
 HitTest: function(x, y) {
  var hitRegions = this.CreateHitRegions(x, y);
  return this.CreateHitObjects(hitRegions, x, y);
 },
 CreateHitRegions: function(x, y) {
  var hitRegions = new Array();
  for(var i = 0; i < this.regions.length; i++)
   if(this.regions[i].IsVisible(x, y))
    hitRegions.push(this.regions[i]);
  return hitRegions;
 },
 CreateHitObjects: function(hitRegions, x, y) {
  var hitObjects = new Array();
  for(var i = 0; i < hitRegions.length; i++) {
   var hitRegion = hitRegions[i];
   hitObjects.push(this.CreateHitObject(hitRegion, x, y));
  }
  return hitObjects;
 },
 CreateHitObject: function(hitRegion, x, y) {
  var hitObject = this.objects[hitRegion.id];
  var additionalHitObject = 
   hitRegion.additionalId != -1 ? 
   this.additionalObjects[hitRegion.additionalId] : 
   null;
  if (_aspxIsExists(hitRegion.toolTipPoint) && additionalHitObject != null)
   additionalHitObject.toolTipPoint = hitRegion.toolTipPoint;
  if (_aspxIsExists(hitRegion.legendItemsHitRegions))
   additionalHitObject = this.CreateLegendItemHitObject(hitRegion.legendItemsHitRegions, x, y);
  return new ASPxClientHitObject(hitObject, additionalHitObject);
 },
 CreateLegendItemHitObject: function (legendItemsHitRegions, x, y) {
  for (i = 0; i < legendItemsHitRegions.length; i++) {
   if (legendItemsHitRegions[i].IsVisible(x, y))
    return new ASPxClientLegendCheckBox(legendItemsHitRegions[i].id);
  }
  return null;
 }
}
ChartHitTestController.prototype.constructor = ChartHitTestController;
function ChartHitRegion(primitive, id, additionalId, toolTipPoint, legendItemsHitRegions) {
 this.primitive = primitive;
 this.id = id;
 this.additionalId = additionalId;
 this.toolTipPoint = toolTipPoint;
 this.legendItemsHitRegions = legendItemsHitRegions;
}
ChartHitRegion.prototype = {
 IsVisible: function(x, y) {
  return this.primitive.IsVisible(x, y); 
 }
}
ChartHitRegion.prototype.constructor = ChartHitRegion;
function ChartHitInfoLoader(hitInfo) {
 this.regions = new Array();
 this.LoadHitInfo(hitInfo);
}
ChartHitInfoLoader.errPrefix = "ChartHitTestController loading error: ";
ChartHitInfoLoader.errRegionType = ChartHitTestController.errPrefix + "Invalid hit region type";
ChartHitInfoLoader.errRegionFormat = ChartHitTestController.errPrefix + "Invalid hit region format";
ChartHitInfoLoader.prototype = {
 LoadHitInfo: function(hitInfo) {
  for(var i = 0; i < hitInfo.length; i++)
   this.LoadHitRegion(hitInfo[i]);
 },
 LoadHitRegion: function(interimHitRegion) {
  var id = interimHitRegion.hi;    
  var additionalId = _aspxIsExists(interimHitRegion.hia) ? interimHitRegion.hia: -1;
  var primitive = this.LoadPrimitive(interimHitRegion.r);
  var toolTipPoint = interimHitRegion.ttp;
  if (_aspxIsExists(interimHitRegion.legChbRegns))
   var legendItemCheckboxRegions = this.LoadLegendItemsRegionsArray(interimHitRegion.legChbRegns);
  this.regions.unshift(new ChartHitRegion(primitive, id, additionalId, toolTipPoint, legendItemCheckboxRegions));
 },
 LoadLegendItemsRegionsArray: function (legendItemsInterimRegionsArray) {
  var result = new Array();
  for (i = 0 ; i < legendItemsInterimRegionsArray.length; i++) {
   var interimLegendItemObject = legendItemsInterimRegionsArray[i];
   var legendItemId = interimLegendItemObject.legItmId;
   var primitive = this.LoadPrimitive(interimLegendItemObject.r);
   var legendItemHitRegion = new ChartHitRegion(primitive, legendItemId, -1, null, null);
   result.push(legendItemHitRegion);
  }
  return result;
 },
 LoadPrimitive: function(interimPrimitive) {
  if(interimPrimitive.t == "R")
   return this.LoadRectangle(interimPrimitive);
  else if(interimPrimitive.t == "O")
   return new ChartHitEmpty();
  else if(interimPrimitive.t == "U")
   return this.LoadUnion(interimPrimitive);
  else if(interimPrimitive.t == "I")
   return this.LoadIntersection(interimPrimitive);
  else if(interimPrimitive.t == "E")
   return this.LoadExclusion(interimPrimitive);
  else if(interimPrimitive.t == "X")
   return this.LoadXor(interimPrimitive);
  else if(interimPrimitive.t == "P")
   return this.LoadPath(interimPrimitive);   
  throw ChartHitInfoLoader.errRegionType;
 },
 LoadRectangle: function(interimRectangle) {
  if(interimRectangle.r.length != 4)
   throw ChartHitInfoLoader.errRegionFormat;
  return new ChartHitRectangle(interimRectangle.r[0], interimRectangle.r[1], interimRectangle.r[2], interimRectangle.r[3]);
 },
 LoadUnion: function(interimExpression) {
  var leftOperand = this.LoadPrimitive(interimExpression.l);
  var rightOperand = this.LoadPrimitive(interimExpression.r);
  return new ChartHitUnion(leftOperand, rightOperand);
 },
 LoadIntersection: function(interimExpression) {
  var leftOperand = this.LoadPrimitive(interimExpression.l);
  var rightOperand = this.LoadPrimitive(interimExpression.r);
  return new ChartHitIntersection(leftOperand, rightOperand);
 },
 LoadExclusion: function(interimExpression) {
  var leftOperand = this.LoadPrimitive(interimExpression.l);
  var rightOperand = this.LoadPrimitive(interimExpression.r);
  return new ChartHitExclusion(leftOperand, rightOperand);
 },
 LoadXor: function(interimExpression) {
  var leftOperand = this.LoadPrimitive(interimExpression.l);
  var rightOperand = this.LoadPrimitive(interimExpression.r);
  return new ChartHitXor(leftOperand, rightOperand);
 },
 LoadPath: function(interimPath) {    
  var lineSegments = new Array();
  var points = new Array();
  var bezierPoints = new Array();
  var indexInStartArray = 0;
  var indexInBezierArray = 0;
  for(var pointIndex = 0; pointIndex < interimPath.p.length; pointIndex++) {
   if(this.IsStartPoint(interimPath, pointIndex, indexInStartArray)) {
    indexInStartArray++;
    this.UpdateLineSegments(lineSegments, points);
    points.length = 0;
   }
   else if(this.IsBezierPoint(interimPath, pointIndex, indexInBezierArray)) {
    indexInBezierArray++;
    if(bezierPoints.length == 0)
     bezierPoints.push(interimPath.p[pointIndex - 1]);     
    bezierPoints.push(interimPath.p[pointIndex]);
    if(bezierPoints.length == 4) {
     this.CalcBezierApproximation(
      bezierPoints[0][0], bezierPoints[0][1], 
      bezierPoints[1][0], bezierPoints[1][1], 
      bezierPoints[2][0], bezierPoints[2][1],
      bezierPoints[3][0], bezierPoints[3][1], points);
     bezierPoints.length = 0;
    }
    continue;
   }
   points.push(interimPath.p[pointIndex]);    
  }
  this.UpdateLineSegments(lineSegments, points);
  return new ChartHitPath(lineSegments, interimPath.a);
 },
 UpdateLineSegments: function(lineSegments, points) {
  if(points.length < 2)
   return;
  for(var i = 0; i < points.length - 1; i++)
   lineSegments.push(new ChartLineSegment(
    points[i][0], 
    points[i][1], 
    points[i + 1][0], 
    points[i + 1][1]));
  lineSegments.push(new ChartLineSegment(
   points[points.length - 1][0], 
   points[points.length - 1][1], 
   points[0][0], 
   points[0][1]));  
 },
 CreatePoint: function(x, y) {
  return [x, y];
 },
 IsStartPoint: function(interimPath, pointIndex, indexInStartArray) {
  return (indexInStartArray < interimPath.s.length) && (interimPath.s[indexInStartArray] == pointIndex);
 },
 IsBezierPoint: function(interimPath, pointIndex, indexInBezierArray) {
  return (indexInBezierArray < interimPath.b.length) && (interimPath.b[indexInBezierArray] == pointIndex);
 },
 CalcBezierApproximation: function(x1, y1, x2, y2, x3, y3, x4, y4, points) {
  var dx1 = x2 - x1;
  var dy1 = y2 - y1;
  var dx2 = x3 - x2;
  var dy2 = y3 - y2;
  var dx3 = x4 - x3;
  var dy3 = y4 - y3;
  var length = Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2) + Math.sqrt(dx3 * dx3 + dy3 * dy3);
  var stepCount = Math.round(length * 0.25);
  var step = 1 / (stepCount + 1);
  var step2 = step * step;
  var step3 = step * step * step;
  var step13 = step * 3;
  var step23 = step2 * 3;
  var step26 = step2 * 6;
  var step36 = step3 * 6;
  var tempX1 = x1 - x2 * 2 + x3;
  var tempY1 = y1 - y2 * 2 + y3;
  var tempX2 = (x2 - x3) * 3 - x1 + x4;
  var tempY2 = (y2 - y3) * 3 - y1 + y4;
  var dx = (x2 - x1) * step13 + tempX1 * step23 + tempX2 * step3;
  var dy = (y2 - y1) * step13 + tempY1 * step23 + tempY2 * step3;
  var ddx = tempX1 * step26 + tempX2 * step36;
  var ddy = tempY1 * step26 + tempY2 * step36;
  var dddx = tempX2 * step36;
  var dddy = tempY2 * step36;
  var x = x1;
  var y = y1;
  for(var i = 0; i < stepCount; i++) {
   x += dx;
   y += dy;
   points.push(this.CreatePoint(x, y));
   dx += ddx;
   dy += ddy;
   ddx += dddx;
   ddy += dddy;
  }
  points.push(this.CreatePoint(x4, y4));
 }
}
ChartHitInfoLoader.prototype.constructor = ChartHitInfoLoader;

ASPxClientWebChartControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.ObjectHotTracked = new ASPxClientEvent();
  this.ObjectSelected = new ASPxClientEvent();
  this.CustomDrawCrosshair = new ASPxClientEvent();
  this.printFrame = null;
  this.exportWindow = null;
  _aspxAttachEventToElement(this.GetMainDOMElement(), "mouseout", function(evt) { this.HideElements(evt); } .aspxBind(this));
 },
 HideElements: function(evt) {
  var target;
  if (_aspxIsExists(evt.toElement)) {
   target = evt.toElement;
  }
  else {
   if (_aspxIsExists(evt.relatedTarget)) {
    target = evt.relatedTarget;
   }
  }
  if (_aspxIsExists(target)) {
   var parent = _aspxGetParentById(target, this.name);
   if (_aspxIsExists(parent)) {
    return;
   }
  }
  if (_aspxIsExists(this.crosshairRenderer)) {
   this.crosshairRenderer.Hide();
  }
  if (_aspxIsExists(this.chart.toolTipController)) {
   this.chart.toolTipController.Hide();
  }
 },
 CalculateEventX: function(clickedElement, mouseEventX) {
  var left = _aspxGetAbsoluteX(clickedElement);
  return Math.abs(mouseEventX - left);
 },
 CalculateEventY: function(clickedElement, mouseEventY) {
  var top = _aspxGetAbsoluteY(clickedElement);
  return Math.abs(mouseEventY - top);
 },
 OnClick: function(evt) {
  var processOnServer = this.IsServerEventAssigned("ObjectSelected");
  var mouseEventX = _aspxGetEventX(evt);
  var mouseEventY = _aspxGetEventY(evt);
  var htmlElement = _aspxGetEventSource(evt);
  if (_aspxGetIsParent(this.GetMainDOMElement(), htmlElement))
   htmlElement = document.getElementById(this.name + '_IMG');
  var x = this.CalculateEventX(htmlElement, mouseEventX);
  var y = this.CalculateEventY(htmlElement, mouseEventY);
  var showToolTip = _aspxIsExists(this.chart.toolTipController);
  var raiseObjectSelected = _aspxIsExists(this.RaiseObjectSelected);
  if (showToolTip || raiseObjectSelected) {
   var hitObjects = this.HitTest(x, y);
   if (hitObjects != null)
    var hitInfo = new ASPxClientWebChartHitInfo(hitObjects);
  }
  if (__aspxBrowserWithHardwareAcceleration) {
   x = Math.ceil(x);
   y = Math.ceil(y);
  }
  if (raiseObjectSelected)
   processOnServer = this.RaiseObjectSelected(x, y, htmlElement, mouseEventX, mouseEventY, hitObjects, hitInfo);
  if (processOnServer) {
   var eventParams = "SELECT:" + x + ":" + y;
   if (this.autoPostBack)
    this.SendPostBack(eventParams);
   else if (_aspxIsExists(this.callBack))
    this.ChartCallback(eventParams);
  }
  if (showToolTip && this.chart.toolTipController.openMode == "OnClick") {
   if (hitObjects == null)
    return;
   this.chart.toolTipController.Show(mouseEventX, mouseEventY, hitInfo, _aspxGetAbsoluteX(htmlElement), _aspxGetAbsoluteY(htmlElement));
  }
  for (i = 0; i < hitObjects.length; i++) {
   if (hitObjects[i].object instanceof ASPxClientLegend) {
    var legendCheckboxObj = hitObjects[i].additionalObject;
    if (_aspxIsExists(legendCheckboxObj)) {
     var checkableLegendItemID = legendCheckboxObj.legendItemId;
     var eventParams = "CHANGE_CHECKED_IN_LEGEND:" + checkableLegendItemID;
     this.ChartCallback(eventParams);
    }
   }
  }
 },
 OnMouseMove: function(evt) {
  var raiseObjectHotTracked = _aspxIsExists(this.RaiseObjectHotTracked);
  var showToolTip = _aspxIsExists(this.chart) ? _aspxIsExists(this.chart.toolTipController) : false;
  var showCrosshair = _aspxIsExists(this.chart) ? this.chart.showCrosshair : false;
  if (raiseObjectHotTracked || showToolTip || showCrosshair) {
   var mouseEventX = _aspxGetEventX(evt);
   var mouseEventY = _aspxGetEventY(evt);
   var htmlElement = _aspxGetEventSource(evt);
   if (_aspxGetIsParent(this.GetMainDOMElement(), htmlElement))
    htmlElement = document.getElementById(this.name + '_IMG');
   var x = this.CalculateEventX(htmlElement, mouseEventX);
   var y = this.CalculateEventY(htmlElement, mouseEventY);
   var hitObjects = this.HitTest(x, y);
   if (hitObjects == null)
    return;
   var hitInfo = new ASPxClientWebChartHitInfo(hitObjects);
   if (raiseObjectHotTracked)
    this.RaiseObjectHotTracked(x, y, htmlElement, mouseEventX, mouseEventY, hitObjects, hitInfo);
   if (showCrosshair) {
    if (!_aspxIsExists(this.crosshairRenderer))
     this.crosshairRenderer = new ASPxClientCrosshairRenderer(this, this.name + '_CH');
    this.crosshairRenderer.UpdateCrosshair(x, y, this);
   }
   if (showToolTip) {
    if (this.chart.toolTipController.openMode == "OnHover")
     this.chart.toolTipController.Show(mouseEventX, mouseEventY, hitInfo, _aspxGetAbsoluteX(htmlElement), _aspxGetAbsoluteY(htmlElement));
   }
  }
 },
 ensurePrintFrame: function() {
  if (this.frameElement != null && __aspxIE) {
   this.frameElement.parentNode.removeChild(this.frameElement);
   this.frameElement = null;
  }
  if (this.frameElement == null)
   this.frameElement = this.createFrameElement("DXPrinter");
  this.printFrame = window.frames[this.frameElement.id];
 },
 createFrameElement: function(name) {
  var f = document.createElement("iframe");
  f.frameBorder = "0";
  f.style.overflow = "hidden";
  f.style.width = "0px";
  f.style.height = "0px";
  f.name = name;
  f.id = name;
  document.body.appendChild(f);
  return f;
 },
 getFrame: function() {
  this.ensurePrintFrame();
  return this.printFrame;
 },
 CallbackSaveToDisk: function(result) {
  this.getFrame().location = result;
 },
 CallbackSaveToWindow: function(result) {
  if (this.exportWindow != null && !this.exportWindow.closed) {
   this.exportWindow.location = result;
  }
 },
 OnCallback: function (result) {
  if (_aspxIsExists(this.chart)) {
   if (_aspxIsExists(this.crosshairRenderer)) {
    this.crosshairRenderer.Hide();
   }
   if (_aspxIsExists(this.chart.toolTipController)) {
    this.chart.toolTipController.Hide();
   }
  }
  var printSign = "PRINT:";
  if (result.indexOf(printSign) >= 0) {
   this.CallbackSaveToDisk(result.substring(printSign.length));
   return;
  }
  var saveToDiskSign = "SAVETODISK:";
  if (result.indexOf(saveToDiskSign) >= 0) {
   this.CallbackSaveToDisk(result.substring(saveToDiskSign.length));
   return;
  }
  var saveToWindowSign = "SAVETOWINDOW:";
  if (result.indexOf(saveToWindowSign) >= 0) {
   this.CallbackSaveToWindow(result.substring(saveToWindowSign.length));
   return;
  }
  var resultParams = result.split("|");
  if (resultParams.length >= 3) {
   var htmlImage = document.getElementById(this.name + '_IMG');
   if (_aspxIsExists(htmlImage))
    htmlImage.setAttribute("src", resultParams[0]);
   var htmlField = document.getElementById(resultParams[1]);
   if (_aspxIsExists(htmlField))
    htmlField.setAttribute("value", resultParams[2]);
   if (resultParams.length >= 5) {
    this.LoadHitInfo(eval(resultParams[3]));
    var objectModel = "";
    for (var i = 4; i < resultParams.length; i++) {
     if (objectModel != "")
      objectModel += "|";
     objectModel += resultParams[i];
    }
    this.InitObjectModel(eval("(" + objectModel + ")"));
   }
  }
 },
 LoadHitInfo: function(hitInfo) {
  this.hitTestController = new ChartHitTestController(hitInfo);
 },
 InitObjectModel: function(objectModel) {
  this.chart = new ASPxClientWebChart(this, objectModel);
  this.ResetCrosshairRenderer();
 },
 ResetCrosshairRenderer: function () {
  if (_aspxIsExists(this.crosshairRenderer)) {
   this.crosshairRenderer.Hide();
   this.crosshairRenderer = null;
  }
 },
 SetOperaCursor: function (cursor, htmlElement) {
  var divId = this.name + "_DIV";
  var div = _aspxGetElementById(divId);
  if (!_aspxIsExists(div) || (div.tagName != "DIV") || (div != htmlElement.parentNode))
   div = null;
  oldCursor = div != null ? div.style.cursor : htmlElement.style.cursor;
  if (!_aspxIsExists(oldCursor))
   oldCursor = "default";
  if (cursor != oldCursor) {
   if (div == null) {
    div = document.createElement("div");
    div.id = divId;
    div.style.backgroundColor = "transparent";
    div.style.border = "none";
    div.style.cursor = cursor;
    htmlElement.parentNode.replaceChild(div, htmlElement);
    div.appendChild(htmlElement);
   }
   else
    div.parentNode.replaceChild(htmlElement, div);
  }
 },
 ChartCallback: function(eventParams, command) {
  if (_aspxIsExists(this.callBack)) {
   this.ResetCrosshairRenderer();
   if (_aspxIsExists(this.chart) && _aspxIsExists(this.chart.toolTipController)) {
    this.chart.toolTipController.Hide();
   }
   this.ShowLoadingElements();
   this.CreateCallback(eventParams, command);
  }
  else
   this.SendPostBack(eventParams);
 },
 ShowLoadingPanel: function() {
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetMainElement());
 },
 GetCallbackAnimationElement: function() {
  return this.GetMainElement();
 }
});
function __chartClick(evt, name) {
 var control = aspxGetControlCollection().Get(name);
 if (control != null)
  control.OnClick(evt);
}
function __chartMouseMove(evt, name) {
 var control = aspxGetControlCollection().Get(name);
 if (control != null)
  control.OnMouseMove(evt);
}
ASPxClientScaleType = _aspxCreateClass(null, {});
ASPxClientScaleType.Qualitative = "Qualitative";
ASPxClientScaleType.Numerical = "Numerical";
ASPxClientScaleType.DateTime = "DateTime";
ASPxClientControlCoordinatesVisibility = _aspxCreateClass(null, {});
ASPxClientControlCoordinatesVisibility.Visible = "Visible";
ASPxClientControlCoordinatesVisibility.Hidden = "Hidden";
ASPxClientControlCoordinatesVisibility.Undefined = "Undefined";
ASPxClientWebChartControl.Cast = ASPxClientControl.Cast;
ASPxClientWebChartControl.prototype.GetChart = function() {
 return this.chart;
};
ASPxClientWebChartControl.prototype.SetCursor = function(cursor) {
 var htmlElement = this.GetMainElement();
 if (_aspxIsExists(htmlElement)) {
  if (__aspxOpera)
   this.SetOperaCursor(cursor, htmlElement);
  else
   htmlElement.style.cursor = cursor;
 }
};
ASPxClientWebChartControl.prototype.RaiseObjectHotTracked = function(x, y, htmlElement, absoluteX, absoluteY, hitObjects, hitInfo) {
 for (var i = 0; i < hitObjects.length; i++) {
  var args = new ASPxClientWebChartControlHotTrackEventArgs(
   false,
   hitObjects[i].object,
   hitObjects[i].additionalObject,
   hitInfo,
   this.chart,
   htmlElement,
   x, y,
   absoluteX, absoluteY);
  this.ObjectHotTracked.FireEvent(this, args);
  if (!args.cancel)
   break;
 }
};
ASPxClientWebChartControl.prototype.RaiseCustomDrawCrosshair = function (CrosshairElements, CursorCrosshairAxisLabelElements, CursorCrosshairLineElement, CrosshairGroupHeaderElements) {
 var args = new ASPxClientWebChartControlCustomDrawCrosshairEventArgs(
  false,
  CrosshairElements,
  CursorCrosshairAxisLabelElements,
  CursorCrosshairLineElement,
  CrosshairGroupHeaderElements);
 this.CustomDrawCrosshair.FireEvent(this, args);
};
ASPxClientWebChartControl.prototype.RaiseObjectSelected = function(x, y, htmlElement, absoluteX, absoluteY, hitObjects, hitInfo) {
 var processOnServer = this.IsServerEventAssigned("ObjectSelected");
 if (hitObjects == null)
  return processOnServer;
 for (var i = 0; i < hitObjects.length; i++) {
  var args = new ASPxClientWebChartControlHotTrackEventArgs(
   processOnServer,
   hitObjects[i].object,
   hitObjects[i].additionalObject,
   hitInfo,
   this.chart,
   htmlElement,
   x, y,
   absoluteX, absoluteY);
  this.ObjectSelected.FireEvent(this, args);
  processOnServer = args.processOnServer;
  if (!args.cancel)
   break;
 }
 return processOnServer;
};
ASPxClientWebChartControl.prototype.HitTest = function(x, y) {
 if (_aspxIsExists(this.hitTestController))
  return this.hitTestController.HitTest(x, y);
 else
  return null;
};
ASPxClientWebChartControl.prototype.PerformCallback = function(args) {
 if (!_aspxIsExists(args)) args = "";
 this.ChartCallback("CUSTOMCALLBACK:" + args, "CUSTOMCALLBACK");
};
ASPxClientWebChartControl.prototype.Print = function() {
 if (!_aspxIsExists(this.callBack)) return;
 this.ChartCallback("PRINT");
};
ASPxClientWebChartControl.prototype.SaveToDisk = function(format, filename) {
 if (!_aspxIsExists(this.callBack)) return;
 if (filename == undefined)
  this.ChartCallback("SAVETODISK:" + format + ":");
 else
  this.ChartCallback("SAVETODISK:" + format + ":" + filename);
};
ASPxClientWebChartControl.prototype.SaveToWindow = function(format) {
 if (!_aspxIsExists(this.callBack)) return;
 this.exportWindow = window.open('', '_blank', 'toolbars=no, resizable=yes, scrollbars=yes');
 this.ChartCallback("SAVETOWINDOW:" + format);
};
ASPxClientWebChartControl.prototype.GetMainDOMElement = function() {
 return this.GetMainElement();
}
ASPxClientWebChartControlCustomDrawCrosshairEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, crosshairElements, cursorCrosshairAxisLabelElements, cursorCrosshairLineElement, crosshairGroupHeaderElements) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.crosshairElements = crosshairElements;
  this.cursorCrosshairAxisLabelElements = cursorCrosshairAxisLabelElements;
  this.cursorCrosshairLineElement = cursorCrosshairLineElement;
  this.crosshairGroupHeaderElements = crosshairGroupHeaderElements;
 }
});
ASPxClientCrosshairDrawInfoList = _aspxCreateClass(null, {
 constructor: function(crosshairDrawInfos,crosshairGroups) {
  this.CrosshairDrawInfoList = [];
  if (crosshairDrawInfos.length < 1)
   return;
  cursorCrosshairLineElement = crosshairDrawInfos[0].CursorCrosshairLineElement;
  for (var i = 0; i < crosshairDrawInfos.length; i++) {
   if (_aspxIsExists(crosshairDrawInfos[i].CursorCrosshairLineDrawInfo)) {
    crosshairDrawInfos[i].CursorCrosshairLineElement = cursorCrosshairLineElement;
    crosshairDrawInfos[i].CursorCrosshairLineDrawInfo = { cursorCrosshairLineElement: cursorCrosshairLineElement, crosshairLine: crosshairDrawInfos[i].CursorCrosshairLineDrawInfo.crosshairLine };
   }
  }
  this.CrosshairGroupHeaderElements = [];
  for(var i = 0;i < crosshairGroups.length;i++) {
   var groupHeaderElement = crosshairGroups[i].crosshairGroupHeaderElement;
   if(groupHeaderElement != null)
    this.CrosshairGroupHeaderElements.push(groupHeaderElement);
  }
  this.CrosshairDrawInfoList = crosshairDrawInfos;
  this.CursorCrosshairLineElement = cursorCrosshairLineElement;
  this.CrosshairElements = [];
  this.CursorCrosshairAxisLabelElements = [];
  for (var i = 0; i < this.CrosshairDrawInfoList.length; i++) {
   var crosshairDrawInfo = this.CrosshairDrawInfoList[i];
   for (var j = 0; j < crosshairDrawInfo.CrosshairElements.length; j++) {
    this.CrosshairElements.push(crosshairDrawInfo.CrosshairElements[j]);
   }
   for (var j = 0; j < crosshairDrawInfo.CursorCrosshairAxisLabelElements.length; j++) {
    this.CursorCrosshairAxisLabelElements.push(crosshairDrawInfo.CursorCrosshairAxisLabelElements[j]);
   }
  }
 }
});
ASPxClientCrosshairDrawInfo = _aspxCreateClass(null, {
 constructor: function(chartControl) {
  this.chartControl = chartControl;
  this.CrosshairElements = [];
  this.CursorCrosshairAxisLabelElements = [];
  this.CursorCrosshairAxisLabelDrawInfos = [];
 },
 AddPaneCrosshairInfo: function (paneCrosshairInfo, rotated) {
  crosshairOptions = this.chartControl.chart.crosshairOptions;
  this.labelsBounds = paneCrosshairInfo.labelsBounds;
  for (var i = 0; i < paneCrosshairInfo.pointsInfo.length; i++) {
   var point = paneCrosshairInfo.pointsInfo[i];
   var crosshairLineElement = new ASPxClientCrosshairLineElement(crosshairOptions, point.crosshairLine, rotated);
   var crosshairAxisLabelElement = this.CreateCrosshairAxisLabelElement(point.crosshairLabel, crosshairOptions);
   var crosshairSeriesLabelElement = new ASPxClientCrosshairSeriesLabelElement(point, crosshairOptions.showCrosshairLabels);
   var crosshairElement = new ASPxClientCrosshairElement(point, crosshairLineElement, crosshairAxisLabelElement, crosshairSeriesLabelElement);
   this.CrosshairElements.push(crosshairElement);
  }
  if (_aspxIsExists(paneCrosshairInfo.cursorLine)) {
   this.CursorCrosshairLineElement = new ASPxClientCrosshairLineElement(crosshairOptions, paneCrosshairInfo.cursorLine, rotated);
   this.CursorCrosshairLineDrawInfo = { cursorCrosshairLineElement: this.CursorCrosshairLineElement, crosshairLine: paneCrosshairInfo.cursorLine };
  }
  for (var i = 0; i < paneCrosshairInfo.cursorLabel.length; i++) {
   var crosshairAxisLabelElement = this.CreateCrosshairAxisLabelElement(paneCrosshairInfo.cursorLabel[i], crosshairOptions);
   this.CursorCrosshairAxisLabelElements.push(crosshairAxisLabelElement);
   this.CursorCrosshairAxisLabelDrawInfos.push({ cursorCrosshairAxisLabelElement: crosshairAxisLabelElement, crosshairAxisLabel: paneCrosshairInfo.cursorLabel[i] });
  }
 },
 CreateCrosshairAxisLabelElement: function(crosshairLabel, crosshairOptions) {
  var option;
  if (crosshairLabel.isHorizontal) {
   option = this.chartControl.chart.diagram.axisY.crosshairAxisLabelOptions;
  }
  else {
   option = this.chartControl.chart.diagram.axisX.crosshairAxisLabelOptions;
  }
  return new ASPxClientCrosshairAxisLabelElement(option, crosshairLabel, this.chartControl.chart.diagram.rotated);
 }
});
ASPxClientCrosshairElement = _aspxCreateClass(null, {
 constructor: function(point, crosshairLineElement, crosshairAxisLabelElement, crosshairSeriesLabelElement) {
  this.Series = point.point.series;
  this.Point = point;
  this.LineElement = crosshairLineElement;
  this.AxisLabelElement = crosshairAxisLabelElement;
  this.LabelElement = crosshairSeriesLabelElement;
  this.visible = true;
 }
});
ASPxClientCrosshairLineElement = _aspxCreateClass(null, {
 constructor: function (crosshairOptions, crosshairLine, rotated) {
  if (crosshairLine.isHorizontal ^ rotated) {
   this.visible = crosshairOptions.showValueLine;
   this.color = crosshairOptions.valueLineColor;
   this.lineStyle = crosshairOptions.valueLineStyle;
  }
  else {
   this.visible = crosshairOptions.showArgumentLine;
   this.color = crosshairOptions.argumentLineColor;
   this.lineStyle = crosshairOptions.argumentLineStyle;
  }
 }
});
ASPxClientCrosshairAxisLabelElement = _aspxCreateClass(null, {
 constructor: function(crosshairAxisLabelOptions, crosshairLabel, rotated) {
  this.backColor = crosshairAxisLabelOptions.backColor;
  this.textColor = crosshairAxisLabelOptions.textColor;
  var axisValuePair = crosshairLabel.axisValuePair;
  var value = axisValuePair.axis.GetNativeArgument(axisValuePair.internalValue);
  var isValueAxis = crosshairLabel.isHorizontal ? !rotated : rotated;
  this.text = ASPxToolTipPatternHelper.GetAxisLabelText(axisValuePair.axis, isValueAxis, value);
  this.font = crosshairAxisLabelOptions.font;
  this.visible = crosshairAxisLabelOptions.visibility;
 }
});
ASPxClientCrosshairGroupHeaderElement = _aspxCreateClass(null,{
 constructor: function(group) {
  this.seriesPoints = [];
  this.text = group.headerText;
  this.font = { fontSize: 12,fontFamily: "Tahoma" };
  this.visible = true;
  this.textColor = "#000000";
 }
});
ASPxClientCrosshairSeriesLabelElement = _aspxCreateClass(null, {
 constructor: function(point, visible) {
  var color = "#" + (_aspxIsExists(point.point.color) ? point.point.color : point.point.series.color);
  this.defaultMarker = "<div style='width:15px; height:12px; background-color:" + color + "' />"
  this.marker = this.defaultMarker;
  this.text = ASPxToolTipPatternHelper.GetPointToolTipText(point.point.series.crosshairLabelPattern, point.point, point.point.series);
  this.headerText = "";
  this.footerText = "";
  this.textColor = "#000000";
  this.font = { fontSize: 12, fontFamily: "Tahoma" };
  this.visible = point.point.series.actualCrosshairLabelVisibility;
  this.markerVisible = true;
  this.markerColor = color;
  this.textVisible = true;
 }
});
ASPxClientWebChartControlHotTrackEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, hitObject, additionalHitObject, hitInfo, chart, htmlElement, x, y, absoluteX, absoluteY) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.hitObject = hitObject;
  this.additionalHitObject = additionalHitObject;
  this.hitInfo = hitInfo;
  this.chart = chart;
  this.htmlElement = htmlElement;
  this.x = x;
  this.y = y;
  if (typeof (absoluteX) != "undefined")
   this.absoluteX = absoluteX;
  else
   this.absoluteX = 0;
  if (typeof (absoluteY) != "undefined")
   this.absoluteY = absoluteY;
  else
   this.absoluteY = 0;
  this.cancel = false;
 }
});
ASPxClientHitObject = _aspxCreateClass(null, {
 constructor: function(object, additionalObject) {
  this.object = object;
  this.additionalObject = additionalObject;
 }
});
ASPxClientWebChartHitInfo = _aspxCreateClass(null, {
 constructor: function(hitObjects) {
  this.inChart = false;
  this.inChartTitle = false;
  this.inAxis = false;
  this.inAxisLabelItem = false;
  this.inAxisTitle = false;
  this.inConstantLine = false;
  this.inDiagram = false;
  this.inNonDefaultPane = false;
  this.inLegend = false;
  this.inSeries = false;
  this.inSeriesLabel = false;
  this.inSeriesPoint = false;
  this.inSeriesTitle = false;
  this.inTrendLine = false;
  this.inFibonacciIndicator = false;
  this.inRegressionLine = false;
  this.inIndicator = false;
  this.inAnnotation = false;
  this.chart = null;
  this.chartTitle = null;
  this.axis = null;
  this.constantLine = null;
  this.diagram = null;
  this.nonDefaultPane = null;
  this.legend = null;
  this.series = null;
  this.seriesLabel = null;
  this.seriesTitle = null;
  this.trendLine = null;
  this.fibonacciIndicator = null;
  this.regressionLine = null;
  this.indicator = null;
  this.annotation = null;
  this.seriesPoint = null;
  this.axisLabelItem = null;
  this.axisTitle = null;
  for (var i = 0; i < hitObjects.length; i++) {
   var obj = hitObjects[i].object;
   if (obj instanceof ASPxClientWebChart) {
    if (!this.inChart) {
     this.inChart = true;
     this.chart = obj;
    }
   }
   else if (obj instanceof ASPxClientChartTitle) {
    if (!this.inChartTitle) {
     this.inChartTitle = true;
     this.chartTitle = obj;
    }
   }
   else if ((obj instanceof ASPxClientAxis) || (obj instanceof ASPxClientSwiftPlotDiagramAxis) ||
      (obj instanceof ASPxClientAxis3D) || (obj instanceof ASPxClientRadarAxis)) {
    if (!this.inAxis) {
     this.inAxis = true;
     this.axis = obj;
    }
   }
   else if (obj instanceof ASPxClientConstantLine) {
    if (!this.inConstantLine) {
     this.inConstantLine = true;
     this.constantLine = obj;
    }
   }
   else if ((obj instanceof ASPxClientXYDiagram) || (obj instanceof ASPxClientSwiftPlotDiagram) ||
      (obj instanceof ASPxClientXYDiagram3D) || (obj instanceof ASPxClientRadarDiagram)) {
    if (!this.inDiagram) {
     this.inDiagram = true;
     this.diagram = obj;
    }
   }
   else if (obj instanceof ASPxClientXYDiagramPane) {
    if (!this.inNonDefaultPane) {
     this.inNonDefaultPane = true;
     this.nonDefaultPane = obj;
    }
   }
   else if (obj instanceof ASPxClientLegend) {
    if (!this.inLegend) {
     this.inLegend = true;
     this.legend = obj;
    }
   }
   else if (obj instanceof ASPxClientSeries) {
    if (!this.inSeries) {
     this.inSeries = true;
     this.series = obj;
    }
   }
   else if (obj instanceof ASPxClientSeriesLabel) {
    if (!this.inSeriesLabel) {
     this.inSeriesLabel = true;
     this.seriesLabel = obj;
    }
   }
   else if (obj instanceof ASPxClientSeriesTitle) {
    if (!this.inSeriesTitle) {
     this.inSeriesTitle = true;
     this.seriesTitle = obj;
    }
   }
   else if (obj instanceof ASPxClientIndicator) {
    this.inIndicator = true;
    this.indicator = obj;
    if (obj instanceof ASPxClientTrendLine) {
     if (!this.inTrendLine) {
      this.inTrendLine = true;
      this.trendLine = obj;
     }
    }
    else if (obj instanceof ASPxClientFibonacciIndicator) {
     if (!this.inFibonacciIndicator) {
      this.inFibonacciIndicator = true;
      this.fibonacciIndicator = obj;
     }
    }
    else if (obj instanceof ASPxClientRegressionLine) {
     if (!this.inRegressionLine) {
      this.inRegressionLine = true;
      this.regressionLine = obj;
     }
    }
   }
   else if (obj instanceof ASPxClientAnnotation) {
    if (!this.inAnnotation) {
     this.inAnnotation = true;
     this.annotation = obj;
    }
   }
   var additionalObj = hitObjects[i].additionalObject;
   if (additionalObj != null) {
    if (additionalObj instanceof ASPxClientSeriesPoint) {
     if (!this.inSeriesPoint) {
      this.inSeriesPoint = true;
      this.seriesPoint = additionalObj;
     }
    }
    if (additionalObj instanceof ASPxClientAxisLabelItem) {
     if (!this.inAxisLabelItem) {
      this.inAxisLabelItem = true;
      this.axisLabelItem = additionalObj;
     }
    }
    if (additionalObj instanceof ASPxClientAxisTitle) {
     if (!this.inAxisTitle) {
      this.inAxisTitle = true;
      this.axisTitle = additionalObj;
     }
    }
   }
  }
 }
});
ASPxClientDiagramCoordinates = _aspxCreateClass(null, {
 constructor: function() {
  this.argumentScaleType = '';
  this.valueScaleType = '';
  this.qualitativeArgument = '';
  this.numericalArgument = 0;
  this.dateTimeArgument = null;
  this.numericalValue = 0;
  this.dateTimeValue = null;
  this.axisX = null;
  this.axisY = null;
  this.pane = null;
  this.axisValueList = new Array();
 },
 SetAxisValue: function(axis, valueInternal) {
  var value = axis.GetNativeArgument(valueInternal);
  var axisValue = new ASPxClientAxisValue();
  axisValue.axis = axis;
  if (typeof (value) == 'string') {
   axisValue.qualitativeValue = value;
   axisValue.scaleType = ASPxClientScaleType.Qualitative;
  }
  else if (value instanceof Date) {
   axisValue.dateTimeValue = value;
   axisValue.scaleType = ASPxClientScaleType.DateTime;
  }
  else {
   axisValue.numericalValue = value;
   axisValue.scaleType = ASPxClientScaleType.Numerical;
  }
  this.axisValueList.push(axisValue);
 },
 SetArgumentAndValue: function(axisX, axisY, argumentInternal, valueInternal) {
  var argument = axisX.GetNativeArgument(argumentInternal);
  var value = axisY.GetNativeArgument(valueInternal);
  if (typeof (argument) == 'string') {
   this.qualitativeArgument = argument;
   this.argumentScaleType = ASPxClientScaleType.Qualitative;
  }
  else if (argument instanceof Date) {
   this.dateTimeArgument = argument;
   this.argumentScaleType = ASPxClientScaleType.DateTime;
  }
  else {
   this.numericalArgument = argument;
   this.argumentScaleType = ASPxClientScaleType.Numerical;
  }
  if (value instanceof Date) {
   this.dateTimeValue = value;
   this.valueScaleType = ASPxClientScaleType.DateTime;
  }
  else {
   this.numericalValue = value;
   this.valueScaleType = ASPxClientScaleType.Numerical;
  }
  this.SetAxisValue(axisX, argumentInternal);
  this.SetAxisValue(axisY, valueInternal);
 },
 IsEmpty: function() {
  return this.argumentScaleType == '';
 },
 GetAxisValue: function(axis) {
  for (var i = 0; i < this.axisValueList.length; i++)
   if (axis == this.axisValueList[i].axis)
   return this.axisValueList[i];
  return null;
 }
});
ASPxClientAxisValue = _aspxCreateClass(null, {
 constructor: function() {
  this.scaleType = '';
  this.qualitativeValue = '';
  this.numericalValue = 0;
  this.dateTimeValue = null;
  this.axis = null;
 }
});
ASPxClientControlCoordinates = _aspxCreateClass(null, {
 constructor: function() {
  this.pane = null;
  this.x = 0;
  this.y = 0;
  this.visibility = ASPxClientControlCoordinatesVisibility.Undefined;
 },
 GetValueSign: function(value) {
  if (value < 0)
   return -1;
  if (value > 0)
   return 1;
  return 0;
 },
 StrongRound: function(value) {
  return this.GetValueSign(value) * Math.floor(Math.abs(value) + 0.5);
 },
 SetPoint: function(x, y) {
  this.x = this.StrongRound(x);
  this.y = this.StrongRound(y);
 }
});
ASPxClientLegendCheckBox = _aspxCreateClass(null, {
 constructor: function (legendItemId) {
  this.legendItemId = legendItemId;
 }
});
ASPxClientWebChartElement = _aspxCreateClass(null, {
 constructor: function(chart, interimObject) {
  this.chart = chart;
  if (_aspxIsExists(interimObject)) {
   this.InitializeProperties(interimObject);
   this.InitializeHitObjects(interimObject);
  }
  else
   this.InitializeDefault();
 },
 InitializeProperties: function(interimObject) {
  throw "ASPxClientWebChartElement abstract error";
 },
 InitializeDefault: function() {
  throw "ASPxClientWebChartElement abstract error";
 },
 InitializeHitObjects: function(interimObject) {
  var chartControl = this.chart != null ? this.chart.chartControl : this.chartControl;
  if (_aspxIsExists(chartControl)) {
   if (_aspxIsExists(chartControl.hitTestController)) {
    var hitTestController = chartControl.hitTestController;
    if (_aspxIsExists(interimObject.hi))
     hitTestController.objects[interimObject.hi] = this;
    else if (_aspxIsExists(interimObject.hia))
     hitTestController.additionalObjects[interimObject.hia] = this;
   }
  }
 },
 CreateArray: function(interimArray, createArrayItem) {
  if (!_aspxIsExists(interimArray))
   return [];
  if (!(interimArray instanceof Array))
   throw ASPxClientWebChartElement.objectModelError;
  var result = new Array();
  for (var i = 0; i < interimArray.length; i++)
   result.push(createArrayItem(this.chart, this, interimArray[i]));
  return result;
 }
});
ASPxClientWebChartElement.objectModelError = "Client object model error";
ASPxClientWebChartEmptyElement = _aspxCreateClass(ASPxClientWebChartElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
 },
 InitializeProperties: function(interimObject) {
 },
 InitializeDefault: function() {
 }
});
ASPxClientWebChartRequiredElement = _aspxCreateClass(ASPxClientWebChartElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
 },
 InitializeDefault: function() {
  throw ASPxClientWebChartElement.objectModelError;
 }
});
ASPxClientWebChartElementNamed = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.n))
   throw ASPxClientWebChartElement.objectModelError;
  this.name = interimObject.n;
 }
});
ASPxClientWebChart = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chartControl, interimChart) {
  this.chartControl = chartControl;
  this.constructor.prototype.constructor.call(this, null, interimChart);
 },
 InitializeProperties: function(interimObject) {
  this.diagram =
   _aspxIsExists(interimObject.d) ?
   this.CreateXYDiagram(interimObject.d) :
   new ASPxClientSimpleDiagram(this);
  this.series = this.CreateSeriesArray(interimObject.s);
  this.titles = this.CreateTitles(interimObject.ti);
  this.annotations = this.CreateAnnotations(interimObject.a);
  this.legend = new ASPxClientLegend(this, interimObject.l);
  this.appearanceName = interimObject.an;
  this.paletteName = interimObject.pn;
  this.showSeriesToolTip = _aspxIsExists(interimObject.sst) ? interimObject.sst : false;
  this.showPointToolTip = _aspxIsExists(interimObject.spt) ? interimObject.spt : false;
  this.showCrosshair = _aspxIsExists(interimObject.sc) ? interimObject.sc : false;
  this.toolTipPosition = this.CreateToolTipPosition(this, interimObject.ttp);
  this.toolTipController = this.CreateToolTipController(this, interimObject.ttc);
  this.crosshairOptions = this.CreateCrosshairOptions(this, interimObject.co);
  this.cssPostfix = _aspxIsExists(interimObject.css) ? interimObject.css : "";
 },
 CreateXYDiagram: function(interimXYDiagram) {
  if (interimXYDiagram.t == "XYD")
   return new ASPxClientXYDiagram(this, interimXYDiagram);
  else if (interimXYDiagram.t == "SPD")
   return new ASPxClientSwiftPlotDiagram(this, interimXYDiagram);
  else if (interimXYDiagram.t == "XYD3")
   return new ASPxClientXYDiagram3D(this, interimXYDiagram);
  else if (interimXYDiagram.t == "RD")
   return new ASPxClientRadarDiagram(this, interimXYDiagram);
  else
   throw ASPxClientWebChartElement.objectModelError;
 },
 CreateSeriesArray: function(interimSeriesArray) {
  return this.CreateArray(interimSeriesArray, function(nullChart, chart, intermSeries) {
   return new ASPxClientSeries(chart, intermSeries);
  });
 },
 CreateTitles: function(interimTitles) {
  return this.CreateArray(interimTitles, function(nullChart, chart, interimTitle) {
   return new ASPxClientChartTitle(chart, interimTitle);
  });
 },
 CreateAnnotations: function(interimAnnotations) {
  return this.CreateArray(interimAnnotations, function(nullChart, chart, interimAnnotation) {
   if (interimAnnotation.t == "TA")
    return new ASPxClientTextAnnotation(chart, interimAnnotation);
   else if (interimAnnotation.t == "IA")
    return new ASPxClientImageAnnotation(chart, interimAnnotation);
   else
    throw ASPxClientWebChartElement.objectModelError;
  });
 },
 CreateToolTipPosition: function(chart, interimPosition) {
  if (_aspxIsExists(interimPosition) && (chart.showSeriesToolTip || chart.showPointToolTip)) {
   if (interimPosition.t == "FP")
    return new ASPxClientToolTipFreePosition(interimPosition);
   else if (interimPosition.t == "RP")
    return new ASPxClientToolTipRelativePosition(interimPosition);
   else if (interimPosition.t == "MP")
    return new ASPxClientToolTipMousePosition(interimPosition);
  }
  return null;
 },
 CreateToolTipController: function(chart, interimToolTipController) {
  if (_aspxIsExists(interimToolTipController) && (chart.showSeriesToolTip || chart.showPointToolTip))
   return new ASPxClientToolTipController(chart, interimToolTipController);
  return null;
 },
 CreateCrosshairOptions: function(chart, interimCrosshairOptions) {
  if (chart.showCrosshair)
   return new ASPxClientCrosshairOptions(chart, interimCrosshairOptions);
  return null;
 }
});
ASPxClientSimpleDiagram = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart) {
  this.constructor.prototype.constructor.call(this, chart);
 }
});
ASPxClientXYDiagramBase = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, interimXYDiagram) {
  this.constructor.prototype.constructor.call(this, chart, interimXYDiagram);
 },
 InitializeProperties: function(interimObject) {
  this.axisX = this.CreateAxis(interimObject.x);
  this.axisY = this.CreateAxis(interimObject.y);
 },
 CreateAxis: function(interimAxis) {
  throw "ASPxClientXYDiagramBase abstract error";
 }
});
ASPxClientXYDiagram2D = _aspxCreateClass(ASPxClientXYDiagramBase, {
 constructor: function(chart, interimXYDiagram) {
  this.constructor.prototype.constructor.call(this, chart, interimXYDiagram);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientXYDiagramBase.prototype.InitializeProperties.call(this, interimObject);
  this.secondaryAxesX = this.CreateSecondaryAxes(interimObject.sx);
  this.secondaryAxesY = this.CreateSecondaryAxes(interimObject.sy);
  this.defaultPane = new ASPxClientXYDiagramPane(this.chart, this, interimObject.dp);
  this.panes = this.CreatePanes(interimObject.pa);
  if (_aspxIsExists(interimObject.pld))
   this.paneLayoutDirection = interimObject.pld;
 },
 CreateSecondaryAxes: function(interimSecondaryAxes) {
  throw "ASPxClientXYDiagramBase abstract error";
 },
 CreatePanes: function(interimPanes) {
  return this.CreateArray(interimPanes, function(chart, diagram, interimPane) {
   return new ASPxClientXYDiagramPane(chart, diagram, interimPane);
  });
 },
 FindPaneByXY: function(x, y) {
  if (this.defaultPane.InPane(x, y))
   return this.defaultPane;
  for (var i = 0; i < this.panes.length; i++) {
   if (this.panes[i].InPane(x, y))
    return this.panes[i];
  }
  return null;
 },
 FindPaneByID: function(paneID) {
  if (paneID == -1)
   return this.defaultPane;
  if (this.panes != null) {
   for (var pane in this.panes) {
    if (this.panes[pane].paneID == paneID)
     return this.panes[pane];
   }
  }
  return null;
 },
 FindAxisXByID: function(axisID) {
  if (this.axisX.axisID == axisID)
   return this.axisX;
  for (var i = 0; i < this.secondaryAxesX.length; i++) {
   if (this.secondaryAxesX[i].axisID == axisID)
    return this.secondaryAxesX[i];
  }
  return null;
 },
 FindAxisYByID: function(axisID) {
  if (this.axisY.axisID == axisID)
   return this.axisY;
  for (var i = 0; i < this.secondaryAxesY.length; i++) {
   if (this.secondaryAxesY[i].axisID == axisID)
    return this.secondaryAxesY[i];
  }
  return null;
 },
 CalculateAxisValues: function(pane, axis, location, length) {
  if (axis == null)
   return null;
  if (axis.reverse)
   location = length - location;
  var cacheItem = axis.intervalBoundsCaches.GetIntervalBoundsCacheItemByPaneID(pane.paneID);
  if (cacheItem == null)
   return null;
  var index = cacheItem.GetIntervalBoundsIndexByLocation(location);
  if (index < 0 || index >= axis.intervals.length)
   return null;
  var intervalBounds = cacheItem.intervalBoundsArray[index];
  var ratio = (location - intervalBounds.position) / intervalBounds.length;
  var interval = axis.intervals[index];
  var valueInternal = interval.GetInternalValue(ratio);
  if (_aspxIsExists(axis.scale) && _aspxIsExists(axis.scale.logarithmic))
   if (axis.scale.logarithmic)
    valueInternal = this.GetLogarithmicFromNativeValue(valueInternal, interval.minLimit, interval.maxLimit, axis.scale.logarithmicBase);
  return valueInternal;
 },
 GetLogarithmicFromNativeValue: function (value, minLimit, maxLimit, logarithmicBase) {
  var logValue = 0;
  var logMinLimit = minLimit == 0 ? 0 : Math.log(Math.abs(minLimit)) / Math.log(logarithmicBase)
  var logMaxLimit = maxLimit == 0 ? 0 : Math.log(Math.abs(maxLimit)) / Math.log(logarithmicBase)
  logValue = Math.pow(logarithmicBase, value * (logMaxLimit - logMinLimit) / maxLimit + logMinLimit);
  return logValue;
 },
 GetNativeFromLogarithmicValue: function (value, minLimit, maxLimit, logarithmicBase) {
  var nativeValue = 0;
  var logMinLimit = minLimit == 0 ? 0 : Math.log(Math.abs(minLimit)) / Math.log(logarithmicBase)
  var logMaxLimit = maxLimit == 0 ? 0 : Math.log(Math.abs(maxLimit)) / Math.log(logarithmicBase)
  var logValue = Math.log(Math.abs(value)) / Math.log(logarithmicBase)
  nativeValue = maxLimit * (logValue - logMinLimit) / (logMaxLimit - logMinLimit);
  return nativeValue;
 },
 AddAxisValueToAxisValueList: function (axisValues, pane, axis, location, length) {
  valueInternal = this.CalculateAxisValues(pane, axis, location, length);
  if (valueInternal != null)
   axisValues.push(new ASPxAxisValuePair(axis, valueInternal, location));
 },
 MapPointToInternal: function(pane, x, y) {
  var axisValues = [];
  var axesCoords = this.GetAxesCoordinates(pane, x, y);
  if (axesCoords == null)
   return axisValues;
  this.AddAxisValueToAxisValueList(axisValues, pane, this.FindAxisXByID(pane.primaryAxisXID), axesCoords.xLocation, axesCoords.xLength);
  this.AddAxisValueToAxisValueList(axisValues, pane, this.FindAxisYByID(pane.primaryAxisYID), axesCoords.yLocation, axesCoords.yLength);
  for (var i = 0; i < this.secondaryAxesX.length; i++)
   this.AddAxisValueToAxisValueList(axisValues, pane, this.secondaryAxesX[i], axesCoords.xLocation, axesCoords.xLength);
  for (var i = 0; i < this.secondaryAxesY.length; i++)
   this.AddAxisValueToAxisValueList(axisValues, pane, this.secondaryAxesY[i], axesCoords.yLocation, axesCoords.yLength);
  return axisValues;
 },
 AddAxisValue: function(coordinates, pane, axis, location, length) {
  var valueInternal = this.CalculateAxisValues(pane, axis, location, length);
  if (valueInternal != null)
   coordinates.SetAxisValue(axis, valueInternal);
 },
 GetAxesCoordinates: function(pane, x, y) {
  x -= pane.boundsLeft;
  y -= pane.boundsTop;
  if (x < 0 || x > pane.boundsWidth || y < 0 || y > pane.boundsHeight)
   return null;
  y = pane.boundsHeight - y;
  if (this.rotated)
   return { xLocation: y, yLocation: x, xLength: pane.boundsHeight, yLength: pane.boundsWidth };
  else
   return { xLocation: x, yLocation: y, xLength: pane.boundsWidth, yLength: pane.boundsHeight };
 },
 PointToDiagram: function(x, y) {
  var coordinates = new ASPxClientDiagramCoordinates();
  var pane = this.FindPaneByXY(x, y);
  if (pane == null)
   return coordinates;
  coordinates.pane = pane;
  var axesCoords = this.GetAxesCoordinates(pane, x, y);
  if (axesCoords == null)
   return coordinates;
  coordinates.axisX = this.FindAxisXByID(pane.primaryAxisXID);
  coordinates.axisY = this.FindAxisYByID(pane.primaryAxisYID);
  var argumentInternal = this.CalculateAxisValues(pane, coordinates.axisX, axesCoords.xLocation, axesCoords.xLength);
  var valueInternal = this.CalculateAxisValues(pane, coordinates.axisY, axesCoords.yLocation, axesCoords.yLength);
  if (argumentInternal != null && valueInternal != null)
   coordinates.SetArgumentAndValue(coordinates.axisX, coordinates.axisY, argumentInternal, valueInternal);
  for (var i = 0; i < this.secondaryAxesX.length; i++)
   this.AddAxisValue(coordinates, pane, this.secondaryAxesX[i], axesCoords.xLocation, axesCoords.xLength);
  for (var i = 0; i < this.secondaryAxesY.length; i++)
   this.AddAxisValue(coordinates, pane, this.secondaryAxesY[i], axesCoords.yLocation, axesCoords.yLength);
  return coordinates;
 },
 CalcIntervalIndexes: function(value, intervals) {
  var resultIndexes = new Array();
  var aboveIndex = -1;
  var belowIndex = -1;
  for (var i = 0; i < intervals.length; i++) {
   if (intervals[i].minLimit <= value && value <= intervals[i].maxLimit) {
    resultIndexes.push(i);
    return { indexes: resultIndexes, inRange: true };
   }
   if (value > intervals[i].maxLimit) {
    if (belowIndex == -1)
     belowIndex = i;
    else if (intervals[belowIndex].maxLimit < intervals[i].maxLimit)
     belowIndex = i;
   }
   if (value < intervals[i].minLimit) {
    if (aboveIndex == -1)
     aboveIndex = i;
    else if (intervals[aboveIndex].minLimit > intervals[i].minLimit)
     aboveIndex = i;
   }
  }
  if (belowIndex != -1)
   resultIndexes.push(belowIndex);
  if (aboveIndex != -1)
   resultIndexes.push(aboveIndex);
  return { indexes: resultIndexes, inRange: false };
 },
 CalcCoordWithinAndOutRange: function(value, intervals, cacheItem, index) {
  var min = intervals[index].minLimit;
  var max = intervals[index].maxLimit;
  var factor = max - min != 0 ? (value - min) / (max - min) : 0;
  var intervalBounds = cacheItem.intervalBoundsArray[index];
  return factor * intervalBounds.length + intervalBounds.position;
 },
 CalcCoordInScaleBreak: function(value, intervals, cacheItem, index1, index2) {
  var min = intervals[index1].maxLimit;
  var max = intervals[index2].minLimit;
  var factor = max - min != 0 ? (value - min) / (max - min) : 0;
  var intervalBoundsMin = cacheItem.intervalBoundsArray[index1];
  var intervalBoundsMax = cacheItem.intervalBoundsArray[index2];
  return factor * (intervalBoundsMax.position - intervalBoundsMin.highBound) + intervalBoundsMin.highBound;
 },
 CalcCoord: function(value, indexes, axis, cacheItem, length) {
  var coord;
  if (indexes.length == 1)
   coord = this.CalcCoordWithinAndOutRange(value, axis.intervals, cacheItem, indexes[0]);
  else
   coord = this.CalcCoordInScaleBreak(value, axis.intervals, cacheItem, indexes[0], indexes[1]);
  if (axis.reverse)
   coord = length - coord;
  return coord;
 },
 CheckIndexes: function(indexes, intervals, cacheItem) {
  if (indexes.length < 1 || indexes.length > 2)
   return false;
  for (var i = 0; i < indexes.length; i++) {
   if (indexes[i] < 0 || indexes[i] >= intervals.length || indexes[i] >= cacheItem.intervalBoundsArray.length)
    return false;
  }
  return true;
 },
 FindAxisXByName: function(name) {
  if (this.axisX.name == name)
   return this.axisX;
  for (var i = 0; i < this.secondaryAxesX.length; i++) {
   if (this.secondaryAxesX[i].name == name)
    return this.secondaryAxesX[i];
  }
  return null;
 },
 FindAxisYByName: function(name) {
  if (this.axisY.name == name)
   return this.axisY;
  for (var i = 0; i < this.secondaryAxesY.length; i++) {
   if (this.secondaryAxesY[i].name == name)
    return this.secondaryAxesY[i];
  }
  return null;
 },
 IsAxisValueVisible: function(pane, axis, value) {
  var cacheItem = axis.intervalBoundsCaches.GetIntervalBoundsCacheItemByPaneID(pane.paneID);
  if (cacheItem == null)
   return false;
  var result = this.CalcIntervalIndexes(value, axis.intervals);
  if (!result.inRange)
   return false;
  var indexes = result.indexes;
  if (!this.CheckIndexes(indexes, axis.intervals, cacheItem))
   return false;
  return true;
 },
 MapInternalToPoint: function(pane, axisName, value) {
  var isHorizontal;
  var axis = this.FindAxisXByName(axisName);
  if (axis != null)
   isHorizontal = !this.rotated;
  else {
   axis = this.FindAxisYByName(axisName);
   if (axis != null)
    isHorizontal = this.rotated;
   else
    return null;
  }
  var cacheItem = axis.intervalBoundsCaches.GetIntervalBoundsCacheItemByPaneID(pane.paneID);
  if (cacheItem == null)
   return null;
  var result = this.CalcIntervalIndexes(value, axis.intervals);
  if (!result.inRange)
   return null;
  var indexes = result.indexes;
  if (!this.CheckIndexes(indexes, axis.intervals, cacheItem))
   return null;
  var length = isHorizontal ? pane.boundsWidth : pane.boundsHeight;
  if (_aspxIsExists(axis.scale) && _aspxIsExists(axis.scale.logarithmic))
   if (axis.scale.logarithmic) {
    var minLimit = axis.intervals[indexes[0]].minLimit
    var maxLimit = indexes.length == 1 ? axis.intervals[indexes[0]].maxLimit : axis.intervals[indexes[0]].maxLimit
    value = this.GetNativeFromLogarithmicValue(value, minLimit, maxLimit, axis.scale.logarithmicBase);
   }
  var pointValue = this.CalcCoord(value, indexes, axis, cacheItem, length);
  if (isHorizontal)
   pointValue += pane.boundsLeft;
  else
   pointValue = pane.boundsHeight - pointValue + pane.boundsTop;
  return pointValue;
 },
 DiagramToPoint: function(argument, value, axisX, axisY, pane) {
  var coordinates = new ASPxClientControlCoordinates();
  if (!_aspxIsExists(axisX.intervalBoundsCaches) || !_aspxIsExists(axisY.intervalBoundsCaches))
   return coordinates;
  coordinates.pane = pane;
  var cacheItemX = axisX.intervalBoundsCaches.GetIntervalBoundsCacheItemByPaneID(pane.paneID);
  var cacheItemY = axisY.intervalBoundsCaches.GetIntervalBoundsCacheItemByPaneID(pane.paneID);
  if (cacheItemX == null || cacheItemY == null)
   return coordinates;
  var argumentInternal = axisX.GetInternalArgument(argument);
  if (axisX.scale instanceof ASPxClientQualitativeMap
   && (argumentInternal < axisX.intervals[0].minLimit || argumentInternal > axisX.intervals[axisX.intervals.length - 1].maxLimit))
   return coordinates;
  var valueInternal = axisY.GetInternalArgument(value);
  var resultsX = this.CalcIntervalIndexes(argumentInternal, axisX.intervals);
  var resultsY = this.CalcIntervalIndexes(valueInternal, axisY.intervals);
  var indexesX = resultsX.indexes;
  var indexesY = resultsY.indexes;
  if (!this.CheckIndexes(indexesX, axisX.intervals, cacheItemX)
   || !this.CheckIndexes(indexesY, axisY.intervals, cacheItemY))
   return coordinates;
  coordinates.visibility = resultsX.inRange && resultsY.inRange ? ASPxClientControlCoordinatesVisibility.Visible
   : ASPxClientControlCoordinatesVisibility.Hidden;
  var x, y;
  if (!this.rotated) {
   x = this.CalcCoord(argumentInternal, indexesX, axisX, cacheItemX, pane.boundsWidth);
   y = this.CalcCoord(valueInternal, indexesY, axisY, cacheItemY, pane.boundsHeight);
  }
  else {
   x = this.CalcCoord(valueInternal, indexesY, axisY, cacheItemY, pane.boundsWidth);
   y = this.CalcCoord(argumentInternal, indexesX, axisX, cacheItemX, pane.boundsHeight);
  }
  coordinates.SetPoint(x + pane.boundsLeft, pane.boundsTop + pane.boundsHeight - y);
  return coordinates;
 }
});
ASPxClientXYDiagram = _aspxCreateClass(ASPxClientXYDiagram2D, {
 constructor: function(chart, interimXYDiagram) {
  this.constructor.prototype.constructor.call(this, chart, interimXYDiagram);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientXYDiagram2D.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.dr))
   throw ASPxClientWebChartElement.objectModelError;
  this.rotated = interimObject.dr;
 },
 CreateAxis: function(interimAxis) {
  return new ASPxClientAxis(this.chart, this, interimAxis);
 },
 CreateSecondaryAxes: function(interimSecondaryAxes) {
  return this.CreateArray(interimSecondaryAxes, function(chart, diagram, interimSecondaryAxis) {
   return new ASPxClientAxis(chart, diagram, interimSecondaryAxis);
  });
 }
});
ASPxClientSwiftPlotDiagram = _aspxCreateClass(ASPxClientXYDiagram2D, {
 constructor: function(chart, interimXYDiagram) {
  this.constructor.prototype.constructor.call(this, chart, interimXYDiagram);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientXYDiagram2D.prototype.InitializeProperties.call(this, interimObject);
 },
 CreateAxis: function(interimAxis) {
  return new ASPxClientSwiftPlotDiagramAxis(this.chart, this, interimAxis);
 },
 CreateSecondaryAxes: function(interimSecondaryAxes) {
  return this.CreateArray(interimSecondaryAxes, function(chart, diagram, interimSecondaryAxis) {
   return new ASPxClientSwiftPlotDiagramAxis(chart, diagram, interimSecondaryAxis);
  });
 }
});
ASPxClientXYDiagramPane = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, diagram, interimPane) {
  this.constructor.prototype.constructor.call(this, chart, interimPane);
  this.diagram = diagram;
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
  this.primaryAxisXID = interimObject.paxi;
  this.primaryAxisYID = interimObject.payi;
  this.paneID = interimObject.id;
  if (_aspxIsExists(interimObject.dx))
   this.boundsLeft = interimObject.dx;
  if (_aspxIsExists(interimObject.dy))
   this.boundsTop = interimObject.dy;
  if (_aspxIsExists(interimObject.dw))
   this.boundsWidth = interimObject.dw;
  if (_aspxIsExists(interimObject.dh))
   this.boundsHeight = interimObject.dh;
  if (_aspxIsExists(interimObject.dh))
   this.visible = interimObject.vsb;
  if (_aspxIsExists(interimObject.lb))
   this.axisLabelBounds = this.CreateAxisLabelBounds(interimObject.lb);
 },
 CreateAxisLabelBounds: function(interimAxisLabelBounds) {
  return this.CreateArray(interimAxisLabelBounds, function(chart, pane, interimObject) {
   return new ASPxClientAxisLabelBounds(chart, interimObject);
  });
 },
 InPane: function(x, y) {
  if (_aspxIsExists(this.boundsLeft) && _aspxIsExists(this.boundsTop) &&
   _aspxIsExists(this.boundsWidth) && _aspxIsExists(this.boundsHeight) &&
   (this.boundsWidth > 0) && (this.boundsHeight > 0)) {
   x -= this.boundsLeft;
   y -= this.boundsTop;
   return (x >= 0) && (x <= this.boundsWidth) && (y >= 0) && (y <= this.boundsHeight);
  }
  return false;
 }
});
ASPxClientXYDiagram3D = _aspxCreateClass(ASPxClientXYDiagramBase, {
 constructor: function(chart, interimXYDiagram) {
  this.constructor.prototype.constructor.call(this, chart, interimXYDiagram);
 },
 CreateAxis: function(interimAxis) {
  return new ASPxClientAxis3D(this.chart, this, interimAxis);
 }
});
ASPxClientRadarDiagram = _aspxCreateClass(ASPxClientXYDiagramBase, {
 constructor: function(chart, interimXYDiagram) {
  this.constructor.prototype.constructor.call(this, chart, interimXYDiagram);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientXYDiagramBase.prototype.InitializeProperties.call(this, interimObject);
  if (_aspxIsExists(interimObject.m))
   this.mapping = new ASPxClientRadarDiagramMapping(interimObject.m);
 },
 CreateAxis: function(interimAxis) {
  return new ASPxClientRadarAxis(this.chart, this, interimAxis);
 },
 CorrectAngle: function(angle) {
  if (this.mapping.revertAngle && angle != 0)
   angle = 2 * Math.PI - angle;
  if (this.mapping.diagramStartAngle >= 0) {
   if (angle >= this.mapping.diagramStartAngle)
    angle -= this.mapping.diagramStartAngle;
   else
    angle = 2 * Math.PI - this.mapping.diagramStartAngle + angle;
  }
  else {
   if (angle < 2 * Math.PI + this.mapping.diagramStartAngle)
    angle -= this.mapping.diagramStartAngle;
   else
    angle = angle - 2 * Math.PI - this.mapping.diagramStartAngle;
  }
  return angle;
 },
 CalcArgumentAndValueForPolygon: function(angle, dx, dy) {
  if (this.mapping.vertices.length <= 1)
   return null;
  var k = angle / (2 * Math.PI / (this.mapping.vertices.length - 1));
  var index = Math.floor(k);
  if (index < 0 || index >= this.mapping.vertices.length - 1)
   return null;
  var min = this.mapping.vertices[index];
  var max = this.mapping.vertices[index + 1];
  var divisor1 = (min.x - max.x) * dy - (min.y - max.y) * dx;
  if (divisor1 == 0)
   return null;
  var maxFactor = (min.x * dy - min.y * dx) / divisor1;
  var dist;
  var divisor2 = (min.x - max.x) * maxFactor - min.x;
  var divisor3 = (min.y - max.y) * maxFactor - min.y;
  if (dx != 0 && divisor2 != 0)
   dist = dx / divisor2;
  else if (dy != 0 && divisor3 != 0)
   dist = dy / divisor3;
  else
   return null;
  if (dist > this.mapping.radius)
   return null;
  valueInternal = dist / this.mapping.valueScaleFactor + this.mapping.minValue;
  argumentInternal = (max.argument - min.argument) * maxFactor + min.argument;
  return { argument: argumentInternal, value: valueInternal }
 },
 PointToDiagram: function(x, y) {
  var coordinates = new ASPxClientDiagramCoordinates();
  if (!_aspxIsExists(this.mapping))
   return coordinates;
  if (this.axisX == null || this.axisY == null)
   return coordinates;
  coordinates.axisX = this.axisX;
  coordinates.axisY = this.axisY;
  var dy = this.mapping.centerY - y;
  var dx = this.mapping.centerX - x;
  var distance = Math.sqrt(dy * dy + dx * dx);
  if (this.mapping.radius == 0 || distance > this.mapping.radius)
   return coordinates;
  var argumentInternal, valueInternal;
  if (distance == 0) {
   argumentInternal = this.mapping.minArgument;
   valueInternal = this.mapping.minValue;
  }
  else {
   var angleCos = dy / distance;
   if (angleCos > 1 || angleCos < -1)
    return coordinates;
   var angle = Math.acos(angleCos);
   if (x < this.mapping.centerX)
    angle = Math.PI * 2 - angle;
   angle = this.CorrectAngle(angle);
   if (this.mapping.circle) {
    valueInternal = distance / this.mapping.valueScaleFactor + this.mapping.minValue;
    argumentInternal = angle / Math.PI / 2.0 * this.mapping.argumentDiapason + this.mapping.minArgument;
   }
   else {
    var values = this.CalcArgumentAndValueForPolygon(angle, dx, dy);
    if (values == null)
     return coordinates;
    argumentInternal = values.argument;
    valueInternal = values.value;
   }
  }
  if (this.axisX.scale instanceof ASPxClientQualitativeMap)
   if (argumentInternal > this.mapping.minArgument + this.mapping.argumentDiapason - this.mapping.argumentDelta / 2)
   argumentInternal -= this.mapping.argumentDiapason;
  coordinates.SetArgumentAndValue(this.axisX, this.axisY, argumentInternal, valueInternal);
  return coordinates;
 },
 DiagramToPoint: function(argument, value) {
  var coordinates = new ASPxClientControlCoordinates();
  if (!_aspxIsExists(this.mapping))
   return coordinates;
  var argumentInternal = this.axisX.GetInternalArgument(argument);
  var valueInternal = this.axisY.GetInternalArgument(value);
  var point = this.mapping.GetGetScreenPoint(argumentInternal, valueInternal);
  if (point == null)
   return coordinates;
  coordinates.visibility = valueInternal > this.mapping.maxValue ? ASPxClientControlCoordinatesVisibility.Hidden : ASPxClientControlCoordinatesVisibility.Visible;
  coordinates.SetPoint(point.x, point.y);
  return coordinates;
 }
});
ASPxClientRadarDiagramMapping = _aspxCreateClass(null, {
 constructor: function(interimMapping) {
  if (_aspxIsExists(interimMapping.r))
   this.radius = interimMapping.r;
  if (_aspxIsExists(interimMapping.cx))
   this.centerX = interimMapping.cx;
  if (_aspxIsExists(interimMapping.cy))
   this.centerY = interimMapping.cy;
  if (_aspxIsExists(interimMapping.ma))
   this.minArgument = interimMapping.ma;
  if (_aspxIsExists(interimMapping.mv))
   this.minValue = interimMapping.mv;
  if (_aspxIsExists(interimMapping.ra))
   this.revertAngle = interimMapping.ra;
  if (_aspxIsExists(interimMapping.a))
   this.diagramStartAngle = interimMapping.a;
  if (_aspxIsExists(interimMapping.f))
   this.valueScaleFactor = interimMapping.f;
  if (_aspxIsExists(interimMapping.d))
   this.argumentDiapason = interimMapping.d;
  if (_aspxIsExists(interimMapping.ad))
   this.argumentDelta = interimMapping.ad;
  if (_aspxIsExists(interimMapping.ci))
   this.circle = interimMapping.ci;
  if (_aspxIsExists(interimMapping.c))
   this.clipArgument = interimMapping.c;
  if (_aspxIsExists(interimMapping.mxa))
   this.maxArgument = interimMapping.mxa;
  if (_aspxIsExists(interimMapping.mxv))
   this.maxValue = interimMapping.mxv;
  if (_aspxIsExists(interimMapping.sa))
   this.startAngle = interimMapping.sa;
  this.vertices = this.CreateArray(interimMapping.v, function(interimVertex) {
   return new ASPxClientVertex(interimVertex);
  });
 },
 CreateArray: function(interimArray, createArrayItem) {
  if (!_aspxIsExists(interimArray))
   return [];
  if (!(interimArray instanceof Array))
   throw ASPxClientWebChartElement.objectModelError;
  var result = new Array();
  for (var i = 0; i < interimArray.length; i++)
   result.push(createArrayItem(interimArray[i]));
  return result;
 },
 GetGetScreenPoint: function(argument, value) {
  if (this.clipArgument && (argument < this.minArgument || argument > this.maxArgument))
   return null;
  while (argument < this.minArgument)
   argument += this.argumentDiapason;
  while (argument > this.maxArgument)
   argument -= this.argumentDiapason;
  if (value < this.minValue)
   value = this.minValue;
  var x, y;
  if (this.circle) {
   var distance = (value - this.minValue) * this.valueScaleFactor;
   var angle = (argument - this.minArgument) / this.argumentDiapason * Math.PI * 2.0;
   if (this.revertAngle)
    angle = -angle;
   angle += this.startAngle;
   x = Math.cos(angle) * distance + this.centerX;
   y = Math.sin(angle) * distance + this.centerY;
  }
  else {
   var distance = (value - this.minValue) * this.valueScaleFactor;
   var coord = (argument - this.minArgument) / this.argumentDelta;
   var index = Math.floor(coord);
   if (index < 0)
    index = 0;
   else if (index >= this.vertices.length - 1)
    index = this.vertices.length - 2;
   var min = this.vertices[index];
   var max = this.vertices[index + 1];
   var maxFactor = (argument - min.argument) / (max.argument - min.argument);
   var minFactor = 1.0 - maxFactor;
   x = (min.x * minFactor + max.x * maxFactor) * distance + this.centerX;
   y = (min.y * minFactor + max.y * maxFactor) * distance + this.centerY;
  }
  return { x: x, y: y };
 }
});
ASPxClientVertex = _aspxCreateClass(null, {
 constructor: function(interimVertex) {
  if (!_aspxIsExists(interimVertex.a))
   throw ASPxClientWebChartElement.objectModelError;
  this.argument = interimVertex.a;
  if (!_aspxIsExists(interimVertex.x))
   throw ASPxClientWebChartElement.objectModelError;
  this.x = interimVertex.x;
  if (!_aspxIsExists(interimVertex.y))
   throw ASPxClientWebChartElement.objectModelError;
  this.y = interimVertex.y;
 }
});
ASPxClientQualitativeMap = _aspxCreateClass(null, {
 constructor: function(interimMap) {
  if (!_aspxIsExists(interimMap.vl))
   throw ASPxClientWebChartElement.objectModelError;
  this.values = interimMap.vl;
 },
 GetNativeValue: function(internalValue) {
  var roundedValue = Math.round(internalValue);
  return (roundedValue < 0 || roundedValue >= this.values.length) ? null : this.values[roundedValue];
 },
 GetInternalValue: function(value) {
  for (var i = 0; i < this.values.length; i++) {
   if (this.values[i] == value)
    return i;
  }
  return -1;
 }
});
ASPxClientNumericalMap = _aspxCreateClass(null, {
 constructor: function(interimMap) {
  if (!_aspxIsExists(interimMap.l))
   throw ASPxClientWebChartElement.objectModelError;
  this.logarithmic = interimMap.l;
  if (this.logarithmic) {
   if (!_aspxIsExists(interimMap.lb) || !_aspxIsExists(interimMap.mlv))
    throw ASPxClientWebChartElement.objectModelError;
   this.logarithmicBase = interimMap.lb;
   this.minLogValue = interimMap.mlv;
  }
 },
 GetValueSign: function(value) {
  if (value < 0)
   return -1;
  if (value > 0)
   return 1;
  return 0;
 },
 TransformBackward: function(value) {
  return isFinite(value) ? Math.pow(this.logarithmicBase, Math.abs(value) + this.minLogValue) * this.GetValueSign(value) : value;
 },
 TransformForward: function(value) {
  if (!isFinite(value))
   return value;
  var transformedAbsValue = Math.log(Math.abs(value)) / Math.log(this.logarithmicBase) - this.minLogValue;
  if (transformedAbsValue < 0)
   transformedAbsValue = 0;
  return this.GetValueSign(value) * transformedAbsValue;
 },
 GetNativeValue: function(internalValue) {
  return this.logarithmic ? this.TransformBackward(internalValue) : internalValue;
 },
 GetInternalValue: function(value) {
  return this.logarithmic ? this.TransformForward(value) : value;
 }
});
ASPxClientDateTimeMap = _aspxCreateClass(null, {
 constructor: function(interimMap) {
  if (!_aspxIsExists(interimMap.su) || !_aspxIsExists(interimMap.sa) || !_aspxIsExists(interimMap.sv))
   throw ASPxClientWebChartElement.objectModelError;
  this.measureUnit = interimMap.su;
  this.gridAlignment = interimMap.sa;
  this.startDate = this.ParseStartDate(interimMap.sv);
  if (_aspxIsExists(interimMap.swo))
   this.workdaysOnly = interimMap.swo;
  else
   this.workdaysOnly = false;
  if (this.workdaysOnly) {
   if (!_aspxIsExists(interimMap.sw))
    throw ASPxClientWebChartElement.objectModelError;
   this.workdays = interimMap.sw;
   this.holidaysCount = this.CalcHolidaysCountInWeek();
   this.workdaysCount = 7 - this.holidaysCount;
   if (_aspxIsExists(interimMap.sh))
    this.holidays = interimMap.sh;
   else
    this.holidays = [];
   if (_aspxIsExists(interimMap.sew))
    this.exactWorkdays = interimMap.sew;
   else
    this.exactWorkdays = [];
  }
 },
 ParseStartDate: function (startDateString) {
  var date = new Date(1, 1, 1);
  var year = startDateString.substring(0, 4);
  var month = startDateString.substring(5, 7) - 1;
  var day = startDateString.substring(8, 10);
  date.setFullYear(year, month, day);
  return date;
 },
 CalcHolidaysCountInWeek: function() {
  var result = 0;
  var dayFlag = 1;
  for (var i = 0; i < 7; i++) {
   if ((this.workdays & dayFlag) == 0)
    result++;
   dayFlag <<= 1;
  }
  return result;
 },
 AddDays: function(dateTime, count) {
  return new Date(dateTime.getTime() + count * 1000 * 60 * 60 * 24);
 },
 GetTotalDays: function(fromDate, toDate) {
  return (toDate.getTime() - fromDate.getTime()) / 24 / 60 / 60 / 1000;
 },
 GetDate: function(n) {
  return new Date(this.startDate.getTime() + n);
 },
 GetMonth: function(n, date) {
  var fromDate = _aspxIsExists(date) ? date : this.startDate;
  var monthsCount = Math.abs(n);
  var years = Math.floor(monthsCount / 12);
  var monthsFractional = monthsCount - years * 12;
  var months = Math.floor(monthsFractional);
  var fraction = monthsFractional - months;
  if (n < 0) {
   years = -years;
   months = -months;
   fraction = -fraction;
  }
  var year = fromDate.getFullYear() + years;
  var month = fromDate.getMonth() + months;
  if (month < 0) {
   year = year - 1;
   month = month + 12;
  }
  else if (month >= 12) {
   year = year + 1;
   month = month - 12;
  }
  var result = new Date(1, 1, 1);
  result.setFullYear(year, month, 1);
  if (fraction < 0) {
   var previousMonth;
   if (month == 0)
    previousMonth = new Date(year - 1, 11, 1);
   else
    previousMonth = new Date(year, month - 1, 1);
   return new Date(result.getTime() + (result.getTime() - previousMonth.getTime()) * fraction);
  }
  else {
   var nextMonth;
   if (month == 11)
    nextMonth = new Date(year + 1, 1, 1);
   else
    nextMonth = new Date(year, month + 1, 1);
   return new Date(result.getTime() + (nextMonth.getTime() - result.getTime()) * fraction);
  }
 },
 TruncateTime: function (date) {
  var truncatedDate = new Date(1, 1, 1);
  truncatedDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
  return truncatedDate;
 },
 IsHoliday: function(dateTime, applyHolidays, applyExactWorkdays) {
  if (!this.workdaysOnly)
   return false;
  var isHoliday = (this.workdays & (1 << dateTime.getDay())) == 0;
  if (applyHolidays || applyExactWorkdays) {
   var date = new Date(1, 1, 1);
   date.setFullYear(dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate());
   var time = date.getTime();
   if (applyHolidays)
    for (holiday in this.holidays)
    if (time == this.holidays[holiday].getTime()) {
    isHoliday = true;
    break;
   }
   if (applyExactWorkdays)
    for (exactWorkDay in this.exactWorkdays)
    if (time == this.exactWorkdays[exactWorkDay].getTime()) {
    isHoliday = false;
    break;
   }
  }
  return isHoliday;
 },
 SkipHoliday: function(dateTime) {
  var result = new Date(dateTime.getTime());
  if (this.workdays == 0)
   return result;
  while (this.IsHoliday(result, true, true))
   result = this.TruncateTime(this.AddDays(result, 1));
  return result;
 },
 Floor: function(dateTime) {
  return this.FloorToDateTimeMeasureUnit(dateTime, this.measureUnit);
 },
 FloorToDateTimeMeasureUnit: function(dateTime, dateTimeMeasureUnit) {
  var result = new Date(dateTime.getTime());
  switch (dateTimeMeasureUnit) {
   case 'Year':
    result.setMonth(0, 1);
    result = this.TruncateTime(result);
    break;
   case 'Month':
    result.setDate(1);
    result = this.TruncateTime(result);
    break;
   case 'Day':
    result = this.TruncateTime(result);
    break;
   case 'Hour':
    result.setMinutes(0, 0, 0);
    break;
   case 'Minute':
    result.setSeconds(0, 0);
    break;
   case 'Second':
    result.setMilliseconds(0);
    break;
   case 'Quarter':
    result = this.GetMonth(-(result.getMonth() % 3), result);
    result.setDate(1);
    break;
   case 'Week': {
     var offset = result.getDay() - this.startDate.getDay();
     result = this.TruncateTime(this.AddDays(result, -(offset >= 0 ? offset : (offset + 7))));
     break;
    }
  }
  return result;
 },
 Round: function(dateTime) {
  if (this.measureUnit != 'Millisecond') {
   if (dateTime.getMilliseconds() >= 500)
    dateTime.setSeconds(dateTime.getSeconds() + 1);
   dateTime.setMilliseconds(0);
   if (this.measureUnit != 'Second') {
    if (dateTime.getSeconds() >= 30)
     dateTime.setMinutes(dateTime.getMinutes() + 1);
    dateTime.setSeconds(0);
    if (this.measureUnit != 'Minute') {
     if (dateTime.getMinutes() >= 30)
      dateTime.setHours(dateTime.getHours() + 1);
     dateTime.setMinutes(0);
     if (this.measureUnit != 'Hour') {
      if (dateTime.getHours() >= 12)
       dateTime.setDate(dateTime.getDate() + 1);
      dateTime.setHours(0);
      if (this.measureUnit != 'Day') {
       if (this.measureUnit == 'Week') {
        var date = dateTime.getDate() - dateTime.getDay() + this.startDate.getDay();
        if (dateTime.getDay() >= this.startDate.getDay())
         dateTime.setDate(date);
        else
         dateTime.setDate(date - 7);
       }
       else {
        var half;
        if (dateTime.getMonth() == 2)
         half = 15;
        else
         half = 16;
        if (dateTime.getDate() >= half)
         dateTime.setMonth(dateTime.getMonth() + 1);
        dateTime.setDate(1);
        if (this.measureUnit != 'Month') {
         if (this.measureUnit == 'Quarter')
          dateTime.setMonth(Math.floor(dateTime.getMonth() / 3) * 3);
         else if (this.measureUnit == 'Year') {
          if (dateTime.getMonth() >= 6)
           dateTime.setFullYear(dateTime.getFullYear() + 1);
          dateTime.setMonth(0);
         }
         else
          return initialDate;
        }
       }
      }
     }
    }
   }
  }
  return dateTime;
 },
 AddUnits: function(range, factor) {
  range = range * factor;
  var integerRange = Math.floor(range);
  var remain = range - integerRange;
  var result = this.GetMonth(integerRange, this.startDate);
  var daysInMonth = this.GetTotalDays(result, this.GetMonth(1, result));
  if (this.workdaysOnly) {
   var dayCount = 0;
   var currentDate = new Date(result.getTime());
   for (var i = 0; i < daysInMonth; i++) {
    if (!this.IsHoliday(currentDate, true, true))
     dayCount++;
    currentDate = this.AddDays(currentDate, 1);
   }
   remain *= dayCount;
   while (remain >= 0.5) {
    if (!this.IsHoliday(result, true, true))
     remain -= 1;
    result = this.AddDays(result, 1);
   }
   if (remain > 0)
    while (this.IsHoliday(result, true, true))
    result = this.AddDays(result, 1);
   return this.SkipHoliday(this.AddDays(result, remain));
  }
  else
   return this.AddDays(result, daysInMonth * remain);
 },
 CorrectRangeBasedOnHolidays: function(range, multiplier) {
  if (range == 0 || this.holidaysCount == 7)
   return range;
  var fromDate = this.TruncateTime(this.startDate);
  var actualDate = new Date(fromDate.getTime());
  var dayRange = Math.floor((range + (this.startDate.getTime() - actualDate.getTime()) / (1000 * 60 * 60 * 24) * multiplier) / multiplier);
  var remain = range - (dayRange * multiplier);
  if (dayRange > 0) {
   var fullWeeks = Math.floor(dayRange / this.workdaysCount);
   var remainWeekDays = dayRange % this.workdaysCount;
   for (; remainWeekDays > 0; ) {
    if (this.IsHoliday(actualDate, false, false))
     dayRange++;
    else
     remainWeekDays--;
    actualDate = this.AddDays(actualDate, 1);
   }
   dayRange += fullWeeks * this.holidaysCount;
   actualDate = this.AddDays(fromDate, dayRange);
   while (this.IsHoliday(actualDate, false, false)) {
    dayRange++;
    actualDate = this.AddDays(actualDate, 1);
   }
   for (holiday in this.holidays) {
    var holidayDate = this.holidays[holiday];
    if (holidayDate >= fromDate && holidayDate <= actualDate && !this.IsHoliday(holidayDate, false, false))
     do {
     dayRange++;
     actualDate = this.AddDays(actualDate, 1);
    } while (this.IsHoliday(actualDate, false, false));
   }
   for (workday in this.exactWorkdays) {
    var workDate = this.exactWorkdays[workday];
    if (workDate >= fromDate && workDate <= actualDate && this.IsHoliday(workDate, true, false))
     do {
     dayRange--;
     actualDate = this.AddDays(actualDate, -1);
    } while (this.IsHoliday(actualDate, true, true));
   }
   range = dayRange * multiplier + remain;
  }
  else {
   var fullWeeks = Math.ceil(dayRange / this.workdaysCount);
   var remainWeekDays = dayRange % this.workdaysCount;
   for (; remainWeekDays < 0; ) {
    if (this.IsHoliday(actualDate, false, false))
     dayRange--;
    else
     remainWeekDays++;
    actualDate = this.AddDays(actualDate, -1);
   }
   dayRange += fullWeeks * this.holidaysCount;
   actualDate = this.AddDays(fromDate, dayRange);
   while (this.IsHoliday(actualDate, false, false)) {
    dayRange--;
    actualDate = this.AddDays(actualDate, -1);
   }
   var revertedHolidays = new Array();
   for (holiday in this.holidays)
    revertedHolidays.unshift(this.holidays[holiday]);
   for (holiday in revertedHolidays) {
    var holidayDate = revertedHolidays[holiday];
    if (holidayDate >= actualDate && holidayDate <= fromDate && !this.IsHoliday(holidayDate, false, false))
     do {
     dayRange--;
     actualDate = this.AddDays(actualDate, -1);
    } while (this.IsHoliday(actualDate, false, false));
   }
   for (workday in this.exactWorkdays) {
    var workDate = this.exactWorkdays[workday];
    if (workDate >= actualDate && workDate <= fromDate && this.IsHoliday(workDate, true, false))
     do {
     dayRange++;
     actualDate = this.AddDays(actualDate, 1);
    } while (this.IsHoliday(actualDate, true, true));
   }
   range = dayRange * multiplier + remain;
  }
  return range;
 },
 GetNativeValue: function(internalValue) {
  var nativeValue;
  switch (this.measureUnit) {
   case 'Year':
    nativeValue = this.AddUnits(internalValue, 12);
    break;
   case 'Quarter':
    nativeValue = this.AddUnits(internalValue, 3);
    break;
   case 'Month':
    nativeValue = this.AddUnits(internalValue, 1);
    break;
   case 'Week':
    if (this.workdaysOnly) {
     var fullWeeks = Math.floor(internalValue);
     var remain = internalValue - fullWeeks;
     nativeValue = this.AddDays(this.startDate, fullWeeks * 7);
     var weekDaysCount = 0;
     for (var i = 0; i < 7; i++)
      if (!this.IsHoliday(this.AddDays(nativeValue, i), true, true))
      weekDaysCount++;
     remain *= weekDaysCount;
     while (remain >= 0.5) {
      if (!this.IsHoliday(nativeValue, true, true))
       remain -= 1;
      nativeValue = this.AddDays(nativeValue, 1);
     }
     nativeValue = this.SkipHoliday(this.AddDays(nativeValue, remain));
    }
    else
     nativeValue = this.GetDate(internalValue * 1000 * 60 * 60 * 24 * 7);
    break;
   case 'Day':
    if (this.workdaysOnly)
     internalValue = this.CorrectRangeBasedOnHolidays(internalValue, 1)
    nativeValue = this.AddDays(this.startDate, internalValue);
    break;
   case 'Hour':
    if (this.workdaysOnly)
     internalValue = this.CorrectRangeBasedOnHolidays(internalValue, 24)
    nativeValue = this.GetDate(internalValue * 1000 * 60 * 60);
    break;
   case 'Minute':
    if (this.workdaysOnly)
     internalValue = this.CorrectRangeBasedOnHolidays(internalValue, 24 * 60)
    nativeValue = this.GetDate(internalValue * 1000 * 60);
    break;
   case 'Second':
    if (this.workdaysOnly)
     internalValue = this.CorrectRangeBasedOnHolidays(internalValue, 24 * 60 * 60)
    nativeValue = this.GetDate(internalValue * 1000);
    break;
   case 'Millisecond':
    if (this.workdaysOnly)
     internalValue = this.CorrectRangeBasedOnHolidays(internalValue, 24 * 60 * 60 * 1000)
    nativeValue = this.GetDate(internalValue);
    break;
   default:
    nativeValue = this.GetDate(0);
    break;
  }
  return this.Round(nativeValue);
 },
 TotalUnits: function(dateTime, majorUnit) {
  var monthRounded = this.FloorToDateTimeMeasureUnit(dateTime, 'Month');
  var dayRounded = this.FloorToDateTimeMeasureUnit(dateTime, 'Day');
  var daysInMonth = this.GetTotalDays(monthRounded, this.GetMonth(1, monthRounded));
  var monthAddition;
  if (this.workdaysOnly) {
   var dayCount = 0;
   var actualDaysInMonth = 0;
   var currentDate = new Date(monthRounded.getTime());
   for (var i = 0; i < daysInMonth; i++) {
    if (!this.IsHoliday(currentDate, true, true)) {
     actualDaysInMonth++;
     if (currentDate < dayRounded)
      dayCount++;
    }
    currentDate = this.AddDays(currentDate, 1);
   }
   monthAddition = actualDaysInMonth == 0 ? 0 : (dayCount / actualDaysInMonth);
   daysInMonth = actualDaysInMonth;
  }
  else
   monthAddition = this.GetTotalDays(monthRounded, dayRounded) / daysInMonth;
  var divider = daysInMonth * 24 * 60 * 60 * 1000;
  return (monthRounded.getFullYear() * 12 + monthRounded.getMonth() - 1 + monthAddition +
    (dateTime.getTime() - dayRounded.getTime()) / divider) / majorUnit;
 },
 CorrectDifferenceBasedOnHolidays: function(value, multiplier) {
  if (this.holidaysCount == 7)
   return value;
  var actualDate = this.TruncateTime(this.startDate);
  var totalDays = Math.floor((value + this.GetTotalDays(actualDate, this.startDate) * multiplier) / multiplier);
  if (totalDays > 0) {
   var fullWeeks = Math.floor(totalDays / 7);
   value -= fullWeeks * this.holidaysCount * multiplier;
   var remainWeekDays = totalDays % 7;
   for (var i = 0; i < remainWeekDays; i++) {
    if (this.IsHoliday(actualDate, false, false))
     value -= multiplier;
    actualDate = this.AddDays(actualDate, 1);
   }
  }
  else if (totalDays < 0) {
   var fullWeeks = Math.ceil(totalDays / 7);
   value -= fullWeeks * this.holidaysCount * multiplier;
   var remainWeekDays = totalDays % 7;
   for (var i = 0; i > remainWeekDays; i--) {
    if (this.IsHoliday(actualDate, false, false))
     value += multiplier;
    actualDate = this.AddDays(actualDate, -1);
   }
  }
  actualDate = this.TruncateTime(this.startDate);
  var finishDate = this.AddDays(actualDate, totalDays);
  if (finishDate < actualDate) {
   for (holiday in this.holidays) {
    var holidayDate = this.holidays[holiday];
    if (holidayDate <= actualDate && holidayDate > finishDate && !this.IsHoliday(holidayDate, false, false))
     value += multiplier;
   }
   for (exactWorkdate in this.exactWorkdays) {
    var workDate = this.exactWorkdays[exactWorkdate];
    if (workDate <= actualDate && workDate > finishDate && this.IsHoliday(workDate, true, false))
     value -= multiplier;
   }
  }
  else {
   for (holiday in this.holidays) {
    var holidayDate = this.holidays[holiday];
    if (holidayDate >= actualDate && holidayDate < finishDate && !this.IsHoliday(holidayDate, false, false))
     value -= multiplier;
   }
   for (exactWorkdate in this.exactWorkdays) {
    var workDate = this.exactWorkdays[exactWorkdate];
    if (workDate >= actualDate && workDate < finishDate && this.IsHoliday(workDate, true, false))
     value += multiplier;
   }
  }
  return value;
 },
 GetInternalValue: function(value) {
  if (this.workdaysOnly)
   value = this.SkipHoliday(value);
  var roundedToDate = this.Floor(value);
  switch (this.measureUnit) {
   case 'Year':
    return this.TotalUnits(roundedToDate, 12) - this.TotalUnits(this.startDate, 12);
   case 'Quarter':
    return this.TotalUnits(roundedToDate, 3) - this.TotalUnits(this.startDate, 3);
   case 'Month':
    return this.TotalUnits(roundedToDate, 1) - this.TotalUnits(this.startDate, 1);
   case 'Week': {
     if (!this.workdaysOnly)
      return (roundedToDate.getTime() - this.startDate.getTime()) / 7 / 24 / 60 / 60 / 1000;
     var roundedToWeek = this.FloorToDateTimeMeasureUnit(value, 'Week');
     var roundedToDay = this.FloorToDateTimeMeasureUnit(value, 'Day');
     var weekDaysCount = 0;
     var spentDaysCount = 0;
     var tempDate = roundedToWeek;
     for (var i = 0; i < 7; i++) {
      if (!this.IsHoliday(tempDate, true, true)) {
       weekDaysCount++;
       if (tempDate < roundedToDay)
        spentDaysCount++;
      }
      tempDate = this.AddDays(tempDate, 1);
     }
     return this.GetTotalDays(this.startDate, roundedToWeek) / 7 +
        (spentDaysCount + this.GetTotalDays(roundedToDay, value)) / weekDaysCount;
    }
   case 'Day': {
     var totalDays = this.GetTotalDays(this.startDate, roundedToDate);
     if (this.workdaysOnly)
      totalDays = this.CorrectDifferenceBasedOnHolidays(totalDays, 1);
     return totalDays;
    }
   case 'Hour': {
     var totalHours = (roundedToDate.getTime() - this.startDate.getTime()) / 60 / 60 / 1000;
     if (this.workdaysOnly)
      totalHours = this.CorrectDifferenceBasedOnHolidays(totalHours, 24);
     return totalHours;
    }
   case 'Minute': {
     var totalMinutes = (roundedToDate.getTime() - this.startDate.getTime()) / 60 / 1000;
     if (this.workdaysOnly)
      totalMinutes = this.CorrectDifferenceBasedOnHolidays(totalMinutes, 24 * 60);
     return totalMinutes;
    }
   case 'Second': {
     var totalSeconds = (roundedToDate.getTime() - this.startDate.getTime()) / 1000;
     if (this.workdaysOnly)
      totalSeconds = this.CorrectDifferenceBasedOnHolidays(totalSeconds, 24 * 60 * 60);
     return totalSeconds;
    }
   case 'Millisecond': {
     var totalMilliseconds = roundedToDate.getTime() - this.startDate.getTime();
     if (this.workdaysOnly)
      totalMilliseconds = this.CorrectDifferenceBasedOnHolidays(totalMilliseconds, 24 * 60 * 60 * 1000);
     return totalMilliseconds;
    }
   default:
    return 0;
  }
 }
});
ASPxClientAxisBase = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, diagram, interimAxis) {
  this.constructor.prototype.constructor.call(this, chart, interimAxis);
  this.diagram = diagram;
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.r))
   throw ASPxClientWebChartElement.objectModelError;
  this.range = new ASPxClientAxisRange(this.chart, this, interimObject.r);
  if (_aspxIsExists(interimObject.m))
   this.scale = this.CreateMap(interimObject.m);
  if (_aspxIsExists(interimObject.l))
   this.labelItems = this.CreateLabelItems(interimObject.l);
 },
 CreateMap: function(interimMap) {
  if (interimMap.t == "N")
   return new ASPxClientNumericalMap(interimMap);
  if (interimMap.t == "Q")
   return new ASPxClientQualitativeMap(interimMap);
  if (interimMap.t == "D")
   return new ASPxClientDateTimeMap(interimMap);
  throw ASPxClientWebChartElement.objectModelError;
 },
 CreateLabelItems: function(interimLabelItems) {
  return this.CreateArray(interimLabelItems, createLabelItem = function(chart, axis, interimLabelItem) {
   return new ASPxClientAxisLabelItem(chart, axis, interimLabelItem);
  });
 },
 GetNativeArgument: function(value) {
  return (this.scale == null) ? value : this.scale.GetNativeValue(value);
 },
 GetInternalArgument: function(value) {
  return (this.scale == null) ? value : this.scale.GetInternalValue(value);
 }
});
ASPxClientAxis2D = _aspxCreateClass(ASPxClientAxisBase, {
 constructor: function(chart, diagram, interimAxis) {
  this.constructor.prototype.constructor.call(this, chart, diagram, interimAxis);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientAxisBase.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.t))
   throw ASPxClientWebChartElement.objectModelError;
  this.axisTitle = new ASPxClientAxisTitle(this.chart, this, interimObject.t);
  this.strips = this.CreateStrips(interimObject.s);
  this.constantLines = this.CreateConstantLines(interimObject.cl);
  this.intervals = this.CreateIntervals(interimObject.i);
  if (_aspxIsExists(interimObject.ibc))
   this.intervalBoundsCaches = new ASPxClientIntervalBoundsCache(interimObject.ibc);
  this.axisID = interimObject.id;
  if (_aspxIsExists(interimObject.cao))
   this.crosshairAxisLabelOptions = new ASPxClientCrosshairAxisLabelOptions(this.chart, interimObject.cao);
 },
 CreateStrips: function(interimStrips) {
  return this.CreateArray(interimStrips, createStrip = function(chart, axis, interimStrip) {
   return new ASPxClientStrip(chart, axis, interimStrip);
  });
 },
 CreateConstantLines: function(interimConstantLines) {
  return this.CreateArray(interimConstantLines, function(chart, axis, interimConstantLine) {
   return new ASPxClientConstantLine(chart, axis, interimConstantLine);
  });
 },
 CreateIntervals: function(interimIntervals) {
  return this.CreateArray(interimIntervals, function(chart, axis, interimInterval) {
   return new ASPxClientAxisInterval(interimInterval);
  });
 }
});
ASPxClientAxis = _aspxCreateClass(ASPxClientAxis2D, {
 constructor: function(chart, diagram, interimAxis) {
  this.constructor.prototype.constructor.call(this, chart, diagram, interimAxis);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientAxis2D.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.ar))
   throw ASPxClientWebChartElement.objectModelError;
  this.reverse = interimObject.ar;
 }
});
ASPxClientSwiftPlotDiagramAxis = _aspxCreateClass(ASPxClientAxis2D, {
 constructor: function(chart, diagram, interimAxis) {
  this.constructor.prototype.constructor.call(this, chart, diagram, interimAxis);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientAxis2D.prototype.InitializeProperties.call(this, interimObject);
 }
});
ASPxClientAxis3D = _aspxCreateClass(ASPxClientAxisBase, {
 constructor: function(chart, diagram, interimAxis) {
  this.constructor.prototype.constructor.call(this, chart, diagram, interimAxis);
 }
});
ASPxClientRadarAxis = _aspxCreateClass(ASPxClientAxisBase, {
 constructor: function(chart, diagram, interimAxis) {
  this.constructor.prototype.constructor.call(this, chart, diagram, interimAxis);
 }
});
ASPxClientAxisTitle = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, axis, interimAxisTitle) {
  this.constructor.prototype.constructor.call(this, chart, interimAxisTitle);
  this.axis = axis;
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.tx))
   throw ASPxClientWebChartElement.objectModelError;
  this.text = interimObject.tx;
 }
});
ASPxClientAxisLabelItem = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, axis, interimLabelItem) {
  this.constructor.prototype.constructor.call(this, chart, interimLabelItem);
  this.axis = axis;
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.tx) || !_aspxIsExists(interimObject.av) || !_aspxIsExists(interimObject.iv))
   throw ASPxClientWebChartElement.objectModelError;
  this.text = interimObject.tx;
  this.axisValue = interimObject.av;
  this.axisValueInternal = interimObject.iv;
 }
});
ASPxClientAxisRange = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, axis, interimRange) {
  this.constructor.prototype.constructor.call(this, chart, interimRange);
  this.axis = axis;
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.ii) || !_aspxIsExists(interimObject.ia))
   throw ASPxClientWebChartElement.objectModelError;
  this.minValue = interimObject.mi;
  this.maxValue = interimObject.ma;
  this.minValueInternal = interimObject.ii;
  this.maxValueInternal = interimObject.ia;
 }
});
ASPxClientAxisInterval = _aspxCreateClass(null, {
 constructor: function(interimInterval) {
  this.minLimit = interimInterval.mi;
  this.maxLimit = interimInterval.ma;
 },
 GetInternalValue: function(ratio) {
  return this.minLimit + (this.maxLimit - this.minLimit) * ratio;
 }
});
ASPxClientIntervalBoundsCache = _aspxCreateClass(null, {
 constructor: function(interimCache) {
  this.items = this.CreateItems(interimCache.i);
 },
 CreateItems: function(interimItems) {
  var result = new Array();
  for (var i = 0; i < interimItems.length; i++)
   result.push(new ASPxClientIntervalBoundsCacheItem(interimItems[i]));
  return result;
 },
 GetIntervalBoundsCacheItemByPaneID: function(paneID) {
  for (var i = 0; i < this.items.length; i++)
   if (this.items[i].paneID == paneID)
   return this.items[i];
  return null;
 }
});
ASPxClientIntervalBoundsCacheItem = _aspxCreateClass(null, {
 constructor: function(interimCacheItem) {
  this.paneID = interimCacheItem.pid;
  this.intervalBoundsArray = this.CreateIntervalBoundsArray(interimCacheItem.ibl);
 },
 CreateIntervalBoundsArray: function(interimIntervalBoundsArray) {
  var result = new Array();
  for (var i = 0; i < interimIntervalBoundsArray.length; i++)
   result.push(new ASPxClientIntervalBounds(interimIntervalBoundsArray[i]));
  return result;
 },
 GetIntervalBoundsIndexByLocation: function(location) {
  for (var i = 0; i < this.intervalBoundsArray.length; i++)
   if (location >= this.intervalBoundsArray[i].position && location <= this.intervalBoundsArray[i].highBound)
   return i;
  return -1;
 }
});
ASPxClientIntervalBounds = _aspxCreateClass(null, {
 constructor: function(interimBounds) {
  this.position = interimBounds.p;
  this.length = interimBounds.l;
  this.highBound = this.position + this.length;
 }
});
ASPxClientStrip = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, axis, interimStrip) {
  this.constructor.prototype.constructor.call(this, chart, interimStrip);
  this.axis = axis;
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
  if (_aspxIsExists(interimObject.mi))
   this.minValue = interimObject.mi;
  if (_aspxIsExists(interimObject.ma))
   this.maxValue = interimObject.ma;
 }
});
ASPxClientConstantLine = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, axis, interimConstantLine) {
  this.constructor.prototype.constructor.call(this, chart, interimConstantLine);
  this.axis = axis;
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.v))
   throw ASPxClientWebChartElement.objectModelError;
  this.value = interimObject.v;
  this.title = _aspxIsExists(interimObject.ti) ? interimObject.ti : "";
 }
});
ASPxClientSeries = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, interimSeries) {
  this.constructor.prototype.constructor.call(this, chart, interimSeries);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
  this.viewType = _aspxIsExists(interimObject.v) ? interimObject.v : "Bar";
  this.argumentScaleType = _aspxIsExists(interimObject.as) ? interimObject.as : "Qualitative";
  this.valueScaleType = _aspxIsExists(interimObject.vs) ? interimObject.vs : "Numerical";
  if (_aspxIsExists(interimObject.ax))
   this.axisX = interimObject.ax;
  if (_aspxIsExists(interimObject.ay))
   this.axisY = interimObject.ay;
  if (_aspxIsExists(interimObject.pa))
   this.pane = interimObject.pa;
  this.visible = !_aspxIsExists(interimObject.nvi);
  this.toolTipEnabled = _aspxIsExists(interimObject.tte);
  this.toolTipText = interimObject.st;
  this.toolTipImage = interimObject.tti;
  this.label = new ASPxClientSeriesLabel(this.chart, this, interimObject.l);
  this.points = this.CreatePoints(interimObject.p);
  if (_aspxIsExists(interimObject.ti))
   this.titles = this.CreateTitles(interimObject.ti);
  if (_aspxIsExists(interimObject.id))
   this.indicators = this.CreateIndicators(interimObject.id);
  this.regressionLines = this.indicators;
  this.trendLines = this.indicators;
  this.fibonacciIndicators = this.indicators;
  if (_aspxIsExists(interimObject.scc)) {
   this.color = interimObject.scc;
  }
  if (_aspxIsExists(interimObject.sg))
   this.stackedGroup = interimObject.sg;
  if (_aspxIsExists(interimObject.clp)) {
   this.crosshairLabelPattern = interimObject.clp;
  }
  this.groupedElementsPattern = _aspxIsExists(interimObject.gep) ? interimObject.gep : "";
  this.crosshairValueItems = this.CreateCrosshairValueItemsArray(interimObject.cvi);
  if (_aspxIsExists(interimObject.ace)) {
   this.actualCrosshairEnabled = interimObject.ace;
  }
  if (_aspxIsExists(interimObject.aclv)) {
   this.actualCrosshairLabelVisibility = interimObject.aclv;
  }
  if (_aspxIsExists(interimObject.is)) {
   this.invertedStep = interimObject.is;
  }
 },
 CreatePoints: function(interimPoints) {
  return this.CreateArray(interimPoints, createPoint = function(chart, series, interimPoint) {
   return new ASPxClientSeriesPoint(chart, series, interimPoint);
  });
 },
 CreateCrosshairValueItemsArray: function(interimValueItems) {
  return this.CreateArray(interimValueItems, createValueItem = function(chart, series, interimValueItem) {
   return new ASPxClientCrosshairValueItem(interimValueItem);
  });
 },
 CreateTitles: function(interimTitles) {
  return this.CreateArray(interimTitles, createTitle = function(chart, series, interimTitle) {
   return new ASPxClientSeriesTitle(chart, series, interimTitle);
  });
 },
 CreateIndicators: function(interimIndicators) {
  return this.CreateArray(interimIndicators, createIndicator = function(chart, series, interimIndicator) {
   if (interimIndicator.t == "RL")
    return new ASPxClientRegressionLine(chart, series, interimIndicator);
   if (interimIndicator.t == "TL")
    return new ASPxClientTrendLine(chart, series, interimIndicator);
   if (interimIndicator.t == "FI")
    return new ASPxClientFibonacciIndicator(chart, series, interimIndicator);
   if (interimIndicator.t == "SMA")
    return new ASPxClientSimpleMovingAverage(chart, series, interimIndicator);
   if (interimIndicator.t == "EMA")
    return new ASPxClientExponentialMovingAverage(chart, series, interimIndicator);
   if (interimIndicator.t == "WMA")
    return new ASPxClientWeightedMovingAverage(chart, series, interimIndicator);
   if (interimIndicator.t == "TMA")
    return new ASPxClientTriangularMovingAverage(chart, series, interimIndicator);
   throw ASPxClientWebChartElement.objectModelError;
  });
 }
});
ASPxClientSeriesLabel = _aspxCreateClass(ASPxClientWebChartElement, {
 constructor: function(chart, series, interimSeriesLabel) {
  this.constructor.prototype.constructor.call(this, chart, interimSeriesLabel);
  this.series = series;
 },
 InitializeProperties: function(interimObject) {
 },
 InitializeDefault: function() {
  this.text = "";
 }
});
ASPxClientSeriesPoint = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, series, interimSeriesPoint) {
  this.constructor.prototype.constructor.call(this, chart, interimSeriesPoint);
  this.series = series;
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.x) || !_aspxIsExists(interimObject.y) || !(interimObject.y instanceof Array))
   throw ASPxClientWebChartElement.objectModelError;
  this.argument = interimObject.x;
  this.values = interimObject.y;
  this.toolTipText = interimObject.pt;
  if (_aspxIsExists(interimObject.pcc)) {
   this.color = interimObject.pcc;
  }
  if (_aspxIsExists(interimObject.pv)) {
   this.percentValue = interimObject.pv;
  }
  if (_aspxIsExists(interimObject.h)) {
   this.toolTipHint = interimObject.h;
  }
  if (_aspxIsExists(interimObject.chv)) {
   this.crosshairValues = interimObject.chv;
  }
  if (_aspxIsExists(interimObject.o)) {
   this.offset = interimObject.o;
  }
  if (_aspxIsExists(interimObject.fo)) {
   this.fixedOffset = interimObject.fo;
  }
  if (_aspxIsExists(interimObject.bw)) {
   this.barWidth = interimObject.bw;
  }
  if (_aspxIsExists(interimObject.ie)) {
   this.isEmpty = interimObject.ie;
  }
 }
});
ASPxClientLegend = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart, interimLegend) {
  this.constructor.prototype.constructor.call(this, chart, interimLegend);
 }
});
ASPxClientTitleBase = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, interimTitle) {
  this.constructor.prototype.constructor.call(this, chart, interimTitle);
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.l) || !(interimObject.l instanceof Array))
   throw ASPxClientWebChartElement.objectModelError;
  this.lines = interimObject.l;
  this.alignment = interimObject.a;
  this.dock = interimObject.d;
 }
});
ASPxClientChartTitle = _aspxCreateClass(ASPxClientTitleBase, {
 constructor: function(chart, interimChartTitle) {
  this.constructor.prototype.constructor.call(this, chart, interimChartTitle);
 }
});
ASPxClientSeriesTitle = _aspxCreateClass(ASPxClientTitleBase, {
 constructor: function(chart, series, interimSeriesTitle) {
  this.constructor.prototype.constructor.call(this, chart, interimSeriesTitle);
  this.series = series;
 }
});
ASPxClientIndicator = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, series, interimIndicator) {
  this.constructor.prototype.constructor.call(this, chart, interimIndicator);
  this.series = series;
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
 }
});
ASPxClientFinancialIndicator = _aspxCreateClass(ASPxClientIndicator, {
 constructor: function(chart, series, interimFinancialIndicator) {
  this.constructor.prototype.constructor.call(this, chart, series, interimFinancialIndicator);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientIndicator.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.p1) || !_aspxIsExists(interimObject.p2))
   throw ASPxClientWebChartElement.objectModelError;
  this.point1 = new ASPxClientFinancialIndicatorPoint(this.chart, this, interimObject.p1);
  this.point2 = new ASPxClientFinancialIndicatorPoint(this.chart, this, interimObject.p2);
 }
});
ASPxClientTrendLine = _aspxCreateClass(ASPxClientFinancialIndicator, {
 constructor: function(chart, series, interimTrendLine) {
  this.constructor.prototype.constructor.call(this, chart, series, interimTrendLine);
 }
});
ASPxClientFibonacciIndicator = _aspxCreateClass(ASPxClientFinancialIndicator, {
 constructor: function(chart, series, interimFibonacciIndicator) {
  this.constructor.prototype.constructor.call(this, chart, series, interimFibonacciIndicator);
 }
});
ASPxClientFinancialIndicatorPoint = _aspxCreateClass(ASPxClientWebChartRequiredElement, {
 constructor: function(chart, financialIndicator, interimFinancialIndicatorPoint) {
  this.constructor.prototype.constructor.call(this, chart, interimFinancialIndicatorPoint);
  this.financialIndicator = financialIndicator;
 },
 InitializeProperties: function(interimObject) {
  if (!_aspxIsExists(interimObject.a) || !_aspxIsExists(interimObject.vl))
   throw ASPxClientWebChartElement.objectModelError;
  this.argument = interimObject.a;
  this.valueLevel = interimObject.vl;
 }
});
ASPxClientSingleLevelIndicator = _aspxCreateClass(ASPxClientIndicator, {
 constructor: function(chart, series, interimIndicator) {
  this.constructor.prototype.constructor.call(this, chart, series, interimIndicator);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientIndicator.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.vl))
   throw ASPxClientWebChartElement.objectModelError;
  this.valueLevel = interimObject.vl;
 }
});
ASPxClientRegressionLine = _aspxCreateClass(ASPxClientSingleLevelIndicator, {
 constructor: function(chart, series, interimRegressionLine) {
  this.constructor.prototype.constructor.call(this, chart, series, interimRegressionLine);
 }
});
ASPxClientMovingAverage = _aspxCreateClass(ASPxClientSingleLevelIndicator, {
 constructor: function(chart, series, interimMovingAverage) {
  this.constructor.prototype.constructor.call(this, chart, series, interimMovingAverage);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientSingleLevelIndicator.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.pc) || !_aspxIsExists(interimObject.ki))
   throw ASPxClientWebChartElement.objectModelError;
  this.pointsCount = interimObject.pc;
  this.kind = interimObject.ki;
  if (this.kind == "Envelope" || this.kind == "MovingAverageAndEnvelope") {
   if (!_aspxIsExists(interimObject.ep))
    throw ASPxClientWebChartElement.objectModelError;
   this.envelopePercent = interimObject.ep;
  }
 }
});
ASPxClientSimpleMovingAverage = _aspxCreateClass(ASPxClientMovingAverage, {
 constructor: function(chart, series, interimMovingAverage) {
  this.constructor.prototype.constructor.call(this, chart, series, interimMovingAverage);
 }
});
ASPxClientExponentialMovingAverage = _aspxCreateClass(ASPxClientMovingAverage, {
 constructor: function(chart, series, interimMovingAverage) {
  this.constructor.prototype.constructor.call(this, chart, series, interimMovingAverage);
 }
});
ASPxClientWeightedMovingAverage = _aspxCreateClass(ASPxClientMovingAverage, {
 constructor: function(chart, series, interimMovingAverage) {
  this.constructor.prototype.constructor.call(this, chart, series, interimMovingAverage);
 }
});
ASPxClientTriangularMovingAverage = _aspxCreateClass(ASPxClientMovingAverage, {
 constructor: function(chart, series, interimMovingAverage) {
  this.constructor.prototype.constructor.call(this, chart, series, interimMovingAverage);
 }
});
ASPxClientAnnotation = _aspxCreateClass(ASPxClientWebChartElementNamed, {
 constructor: function(chart, interimAnnotation) {
  this.constructor.prototype.constructor.call(this, chart, interimAnnotation);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientWebChartElementNamed.prototype.InitializeProperties.call(this, interimObject);
 }
});
ASPxClientTextAnnotation = _aspxCreateClass(ASPxClientAnnotation, {
 constructor: function(chart, interimTextAnnotation) {
  this.constructor.prototype.constructor.call(this, chart, interimTextAnnotation);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientAnnotation.prototype.InitializeProperties.call(this, interimObject);
  if (!_aspxIsExists(interimObject.l) || !(interimObject.l instanceof Array))
   throw ASPxClientWebChartElement.objectModelError;
  this.lines = interimObject.l;
 }
});
ASPxClientImageAnnotation = _aspxCreateClass(ASPxClientAnnotation, {
 constructor: function(chart, interimImageAnnotation) {
  this.constructor.prototype.constructor.call(this, chart, interimImageAnnotation);
 },
 InitializeProperties: function(interimObject) {
  ASPxClientAnnotation.prototype.InitializeProperties.call(this, interimObject);
 }
});
ASPxClientCrosshairValueItem = _aspxCreateClass(null, {
 constructor: function(interimObject) {
  this.value = interimObject.v;
  this.pointIndex = interimObject.pi;
 }
});
ASPxClientToolTipController = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart, interimToolTipController) {
  this.constructor.prototype.constructor.call(this, chart, interimToolTipController);
  this.showImage = interimToolTipController.si;
  this.showText = interimToolTipController.st;
  this.imagePosition = interimToolTipController.ip;
  this.openMode = interimToolTipController.om;
  this.toolTipObject = null;
  this.toolTip = null;
 },
 Show: function(x, y, hitInfo, htmlElementX, htmlElementY) {
  var newObject = null;
  if (hitInfo.seriesPoint != null && this.chart.showPointToolTip) {
   newObject = hitInfo.seriesPoint;
  }
  else {
   if (hitInfo.series != null && this.chart.showSeriesToolTip) {
    newObject = hitInfo.series;
   }
  }
  if (this.toolTipObject != newObject) {
   this.toolTipObject = newObject;
   if (this.toolTipObject == null) {
    this.Hide();
    return;
   }
   var series = hitInfo.series != null ? hitInfo.series : hitInfo.seriesPoint.series;
   if (!series.toolTipEnabled) {
    this.Hide();
    return;
   }
   var showForPoint = hitInfo.inSeriesPoint && this.chart.showPointToolTip;
   var showForSeries = !hitInfo.inSeriesPoint && hitInfo.inSeries && this.chart.showSeriesToolTip;
   if (showForPoint || showForSeries) {
    if (this.toolTip == null) {
     this.toolTip = __aspxCreateChartToolTip(this.chart.chartControl, __aspxChartToolTipID, 0);
    }
    if (showForPoint) {
     var image = series != null ? series.toolTipImage : null;
     this.setToolTipContent(image, this.toolTipObject.toolTipText);
     this.showToolTip(x, y, hitInfo, htmlElementX, htmlElementY);
     return;
    }
    if (showForSeries) {
     this.setToolTipContent(this.toolTipObject.toolTipImage, this.toolTipObject.toolTipText);
     this.showToolTip(x, y, hitInfo, htmlElementX, htmlElementY);
     return;
    }
   }
   this.toolTipObject = null;
  }
 },
 Hide: function() {
  if (this.toolTip != null) {
   __aspxRemoveChartDiv(this.chart.chartControl, __aspxChartToolTipID, 0);
   this.toolTip = null;
   this.toolTipObject = null;
  }
 },
 getImageHTML: function(image) {
  return "<img src='" + image + "' />";
 },
 getVerticalTable: function(cell1, cell2) {
  return "<table><tr><td>" + cell1 + "</td></tr><tr><td>" + cell2 + "</td></tr></table>";
 },
 setToolTipContent: function(image, text) {
  var toolTipContent = "";
  if (this.showText && this.showImage && image != null) {
   var imageHTML = this.getImageHTML(image);
   switch (this.imagePosition) {
    case "Right":
     toolTipContent = __aspxChartGetHorizontalTable(text, imageHTML);
     break;
    case "Top":
     toolTipContent = this.getVerticalTable(imageHTML, text);
     break;
    case "Bottom":
     toolTipContent = this.getVerticalTable(text, imageHTML);
     break;
    default:
     toolTipContent = __aspxChartGetHorizontalTable(imageHTML, text);
     break;
   }
  }
  else if (this.showImage && image != null) {
   toolTipContent = this.getImageHTML(image);
  }
  else if (this.showText) {
   toolTipContent = text;
  }
  this.toolTip.innerHTML = toolTipContent;
 },
 showToolTip: function(x, y, hitInfo, htmlElementX, htmlElementY) {
  if (this.chart.toolTipPosition instanceof ASPxClientToolTipMousePosition) {
   __aspxChartSetDivPosition(this.toolTip, x, y);
   return;
  }
  if (this.chart.toolTipPosition instanceof ASPxClientToolTipFreePosition) {
   __aspxShowInFreePosition(this.toolTip, this.chart, this.chart.toolTipPosition, htmlElementX, htmlElementY);
   return;
  }
  if (this.chart.toolTipPosition instanceof ASPxClientToolTipRelativePosition) {
   this.showToolTipInRelativePosition(x, y, hitInfo, htmlElementX, htmlElementY);
  }
 },
 showToolTipInRelativePosition: function(x, y, hitInfo, htmlElementX, htmlElementY) {
  var left;
  var top;
  if (hitInfo.seriesPoint != null && !hitInfo.inLegend) {
   left = htmlElementX + hitInfo.seriesPoint.toolTipPoint[0] - this.toolTip.clientWidth / 2 + this.chart.toolTipPosition.offsetX;
   top = htmlElementY + hitInfo.seriesPoint.toolTipPoint[1] - this.toolTip.clientHeight + this.chart.toolTipPosition.offsetY;
  }
  else {
   left = x + this.chart.toolTipPosition.offsetX;
   top = y + this.chart.toolTipPosition.offsetY;
  }
  __aspxChartSetDivPosition(this.toolTip, left, top);
 }
});
ASPxClientToolTipPosition = _aspxCreateClass(null, {
 constructor: function(interimObject) {
 }
});
ASPxClientToolTipMousePosition = _aspxCreateClass(ASPxClientToolTipPosition, {
 constructor: function(interimObject) {
  this.constructor.prototype.constructor.call(this, interimObject);
 }
});
ASPxClientToolTipRelativePosition = _aspxCreateClass(ASPxClientToolTipPosition, {
 constructor: function(interimObject) {
  this.constructor.prototype.constructor.call(this, interimObject);
  this.offsetX = interimObject.ox;
  this.offsetY = interimObject.oy;
 }
});
ASPxClientToolTipFreePosition = _aspxCreateClass(ASPxClientToolTipPosition, {
 constructor: function(interimObject) {
  this.constructor.prototype.constructor.call(this, interimObject);
  this.offsetX = interimObject.ox;
  this.offsetY = interimObject.oy;
  this.paneID = interimObject.dt;
  this.dockPosition = interimObject.dp;
 }
});
ASPxClientCrosshairPosition = _aspxCreateClass(null, {
 constructor: function(interimObject) {
  this.offsetX = interimObject.ox;
  this.offsetY = interimObject.oy;
 }
});
ASPxClientCrosshairMousePosition = _aspxCreateClass(ASPxClientCrosshairPosition, {
 constructor: function(interimObject) {
  this.constructor.prototype.constructor.call(this, interimObject);
 }
});
ASPxClientCrosshairFreePosition = _aspxCreateClass(ASPxClientCrosshairPosition, {
 constructor: function(interimObject) {
  this.constructor.prototype.constructor.call(this, interimObject);
  this.paneID = interimObject.dt;
  this.dockPosition = interimObject.dp;
 }
});
ASPxClientLineStyle = _aspxCreateClass(ASPxClientWebChartElement, {
 constructor: function(chart, interimLineStyle) {
  this.constructor.prototype.constructor.call(this, chart, interimLineStyle);
 },
 InitializeProperties: function(interimObject) {
  this.dashStyle = interimObject.ds;
  this.thickness = interimObject.th;
 }
});
ASPxClientCrosshairOptions = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
  this.showArgumentLabels = interimObject.sx;
  this.showValueLabels = interimObject.sy;
  this.showCrosshairLabels = interimObject.sl;
  this.showArgumentLine = interimObject.sxl;
  this.showValueLine = interimObject.syl;
  this.showOnlyInFocusedPane = interimObject.sfp;
  this.snapMode = interimObject.sm;
  this.crosshairLabelMode = interimObject.lm;
  this.showGroupHeaders = interimObject.sgh;
  this.groupHeaderPattern = _aspxIsExists(interimObject.ghp) ? interimObject.ghp : "";
  if (_aspxIsExists(interimObject.clp)) {
   this.crosshairLabelPosition = this.CreateCrosshairPosition(interimObject.clp);
  }
  if (_aspxIsExists(interimObject.alc)) {
   this.argumentLineColor = interimObject.alc;
  }
  if (_aspxIsExists(interimObject.vlc)) {
   this.valueLineColor = interimObject.vlc;
  }
  if (_aspxIsExists(interimObject.als)) {
   this.argumentLineStyle = new ASPxClientLineStyle(chart, interimObject.als);
  }
  if (_aspxIsExists(interimObject.vls)) {
   this.valueLineStyle = new ASPxClientLineStyle(chart, interimObject.vls);
  }
 },
 CreateCrosshairPosition: function(interimPosition) {
  if (interimPosition.t == "CFP")
   return new ASPxClientCrosshairFreePosition(interimPosition);
  else if (interimPosition.t == "CMP")
   return new ASPxClientCrosshairMousePosition(interimPosition);
  return null;
 }
});
ASPxClientAxisLabelBounds = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
  this.axisName = interimObject.an;
  this.left = interimObject.ll;
  this.top = interimObject.lt;
  this.height = interimObject.lh;
  this.width = interimObject.lw;
 }
});
ASPxClientFont = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
  this.fontSize = interimObject.fs;
  this.fontFamily = interimObject.ff;
 }
});
ASPxClientCrosshairAxisLabelOptions = _aspxCreateClass(ASPxClientWebChartEmptyElement, {
 constructor: function(chart, interimObject) {
  this.constructor.prototype.constructor.call(this, chart, interimObject);
  if (_aspxIsExists(interimObject.clp)) {
   this.pattern = interimObject.clp;
  }
  this.visibility = interimObject.clv;
  if (_aspxIsExists(interimObject.clbc)) {
   this.backColor = interimObject.clbc;
  }
  if (_aspxIsExists(interimObject.cltc)) {
   this.textColor = interimObject.cltc;
  }
  if (_aspxIsExists(interimObject.clf)) {
   this.font = new ASPxClientFont(chart, interimObject.clf);
  }
 }
});
var __aspxCrosshairVDivID = "_CHV-";
var __aspxCrosshairHDivID = "_CHH-";
var __aspxCrosshairLabelID = "_CHL-";
var __aspxCrosshairVLabelID = "_CHVL-";
var __aspxCrosshairHLabelID = "_CHHL-";
var __aspxChartToolTipID = "_CTT-";
var __aspxChartToolTipClassName = "dxchartsuiTooltip";
var __aspxChartCrosshairVLineClassName = "dxchartsuiCrosshairVLine";
var __aspxChartCrosshairHLineClassName = "dxchartsuiCrosshairHLine";
var __aspxChartCrosshairLabelClassName = "dxchartsuiCrosshairLabel";
function __aspxCrosshairValueItemsComparer(arrayElement, index, value) {
 if (arrayElement[index].value == value)
  return 0;
 else
  return arrayElement[index].value < value ? -1 : 1;
};
function __aspxSortPointInfoByArgument(p1, p2) {
 if (p1.argument < p2.argument)
  return 1;
 if (p1.argument > p2.argument)
  return -1;
 return p1.value > p2.value ? -1 : 1;
};
function __aspxSortPointInfoByValue(p1, p2) {
 if (p1.value < p2.value)
  return 1;
 if (p1.value > p2.value)
  return -1;
 return p1.argument > p2.argument ? -1 : 1;
};
function __aspxSortCrosshairElementByValue(p1, p2) {
 if (p1.Point.value < p2.Point.value)
  return 1;
 if (p1.Point.value > p2.Point.value)
  return -1;
 return p1.Point.argument > p2.Point.argument ? -1 : 1;
};
function __aspxSortCrosshairElementByArgument(p1, p2) {
 if (p1.Point.argument < p2.Point.argument)
  return 1;
 if (p1.Point.argument > p2.Point.argument)
  return -1;
 return p1.Point.value > p2.Point.value ? -1 : 1;
};
function __aspxChartGetHorizontalTable(cell1, cell2) {
 return "<table><tr><td>" + cell1 + "</td><td>" + cell2 + "</td></tr></table>";
};
function __aspxChartGetVerticalTable(row1, row2, row3) {
 return "<table><tr><td>" + row1 + "</td></tr><tr><td>" + row2 + "</td></tr><tr><td>" + row3 + "</td></tr></table>";
};
function __aspxGetToolTipX(dockPosition, dockTargetWidth, width, dockTargetX, offset) {
 if (dockPosition.indexOf("Right") > -1) {
  return dockTargetX + dockTargetWidth - width - offset;
 }
 else {
  return dockTargetX + offset;
 }
};
function __aspxGetToolTipY(dockPosition, dockTargetHeight, height, dockTargetY, offset) {
 if (dockPosition.indexOf("Bottom") > -1) {
  return dockTargetY + dockTargetHeight - height - offset;
 }
 else {
  return dockTargetY + offset;
 }
};
function __aspxSetCssClassName(object, chartControl, className) {
 if (chartControl.chart.cssPostfix != "") {
  className += "_" + chartControl.chart.cssPostfix;
 }
 object.className = className;
};
function __aspxCreateChartDiv(chartControl, prefix, index) {
 var div = document.createElement("div");
 div.onselectstart = function() { return false; };
 div.id = __aspxGetChartDivId(chartControl, prefix, index);
 chartControl.mainElement.appendChild(div);
 return div;
};
function __aspxGetChartDivId(chartControl, prefix, index) {
 return chartControl.uniqueID + prefix + index;
};
function __aspxCreateChartToolTip(chartControl, prefix, index) {
 var div = __aspxCreateChartDiv(chartControl, prefix, index);
 __aspxSetCssClassName(div, chartControl, __aspxChartToolTipClassName);
 return div;
};
function __aspxRemoveChartDiv(chartControl, prefix, index) {
 var id = __aspxGetChartDivId(chartControl, prefix, index);
 var mainElement = chartControl.GetMainDOMElement();
 var element = _aspxGetChildById(chartControl.GetMainDOMElement(), id);
 mainElement.removeChild(element);
};
function __aspxChartSetDivPosition(div, x, y) {
 _aspxSetAbsoluteX(div, x);
 _aspxSetAbsoluteY(div, y);
};
function __aspxShowInFreePosition(div, chart, position, htmlElementX, htmlElementY) {
 var left;
 var top;
 if (_aspxIsExists(position.paneID) && chart.diagram instanceof ASPxClientXYDiagram2D) {
  var pane = chart.diagram.FindPaneByID(position.paneID);
  if (_aspxIsExists(pane)) {
   left = __aspxGetToolTipX(position.dockPosition, pane.boundsWidth, div.clientWidth, htmlElementX + pane.boundsLeft, position.offsetX);
   top = __aspxGetToolTipY(position.dockPosition, pane.boundsHeight, div.clientHeight, htmlElementY + pane.boundsTop, position.offsetY);
  }
 }
 else {
  left = __aspxGetToolTipX(position.dockPosition, chart.chartControl.GetWidth(), div.clientWidth, htmlElementX, position.offsetX);
  top = __aspxGetToolTipY(position.dockPosition, chart.chartControl.GetHeight(), div.clientHeight, htmlElementY, position.offsetY);
 }
 __aspxChartSetDivPosition(div, left, top);
}
ASPxClientCrosshairElementsGroup = _aspxCreateClass(null, {
 constructor: function(seriesPoint, snapsToArgument) {
  this.headerText="";
  this.anchorValue = snapsToArgument ? seriesPoint.argument : seriesPoint.values[0];
  this.crosshairElements = [];
  this.crosshairGroupHeaderElement = null;
 }
});
ASPxClientCrosshairRenderer = _aspxCreateClass(ASPxClientControl, {
 constructor: function (chartControl, name) {
  this.constructor.prototype.constructor.call(this, name);
  this.chart = chartControl;
  this.hDivs = [];
  this.vDivs = [];
  this.labelDivs = [];
  this.hLabelDivs = [];
  this.vLabelDivs = [];
  this.diagram = chartControl.chart.diagram;
  this.snapToNearestArgument = this.chart.chart.crosshairOptions.snapMode == "NearestArgument";
  this.isHorizontal = this.snapToNearestArgument ^ this.diagram.rotated;
  this.indent = 2;
 },
 CreateVerticalLineDiv: function (index) {
  var div = __aspxCreateChartDiv(this.chart, __aspxCrosshairVDivID, index);
  __aspxSetCssClassName(div, this.chart, __aspxChartCrosshairVLineClassName);
  this.vDivs.push(div);
  return div;
 },
 CreateHorizontalLineDiv: function (index) {
  var div = __aspxCreateChartDiv(this.chart, __aspxCrosshairHDivID, index);
  __aspxSetCssClassName(div, this.chart, __aspxChartCrosshairHLineClassName);
  this.hDivs.push(div);
  return div;
 },
 CreateVerticalLabelDiv: function (index) {
  var div = __aspxCreateChartDiv(this.chart, __aspxCrosshairVLabelID, index);
  __aspxSetCssClassName(div, this.chart, __aspxChartCrosshairLabelClassName);
  this.vLabelDivs.push(div);
  return div;
 },
 CreateHorizontalLabelDiv: function (index) {
  var div = __aspxCreateChartDiv(this.chart, __aspxCrosshairHLabelID, index);
  __aspxSetCssClassName(div, this.chart, __aspxChartCrosshairLabelClassName);
  this.hLabelDivs.push(div);
  return div;
 },
 CreateMainLabelDiv: function (index) {
  var div = __aspxCreateChartToolTip(this.chart, __aspxCrosshairLabelID, index);
  this.labelDivs.push(div);
  return div;
 },
 GetPane: function (x, y) {
  if (this.diagram != null && this.diagram instanceof ASPxClientXYDiagram2D){
   if (this.diagram.defaultPane.visible && this.diagram.defaultPane.InPane(x, y))
    return this.diagram.defaultPane;
   for (var i = 0; i < this.diagram.panes.length; i++) {
    if (this.diagram.panes[i].InPane(x, y))
     return this.diagram.panes[i];
   }
   return null;
  }
  return null;
 },
 ClearDivArray: function (divArray, prefix, index) {
  var length = divArray.length;
  if (index < length) {
   for (var i = index; i < length; i++) {
    divArray.pop();
    __aspxRemoveChartDiv(this.chart, prefix, i);
   }
  }
 },
 Hide: function () {
  this.ClearDivs(0, 0, 0, 0, 0);
 },
 ClearDivs: function (hLineIndex, vLineIndex, hLabelIndex, vLabelIndex, labelIndex) {
  this.ClearDivArray(this.hDivs, __aspxCrosshairHDivID, hLineIndex);
  this.ClearDivArray(this.vDivs, __aspxCrosshairVDivID, vLineIndex);
  this.ClearDivArray(this.hLabelDivs, __aspxCrosshairHLabelID, hLabelIndex);
  this.ClearDivArray(this.vLabelDivs, __aspxCrosshairVLabelID, vLabelIndex);
  this.ClearDivArray(this.labelDivs, __aspxCrosshairLabelID, labelIndex);
 },
 GetVerticalDiv: function (index) {
  if (index < this.vDivs.length)
   return this.vDivs[index];
  return this.CreateVerticalLineDiv(index);
 },
 GetHorizontalDiv: function (index) {
  if (index < this.hDivs.length)
   return this.hDivs[index];
  return this.CreateHorizontalLineDiv(index);
 },
 GetVerticalLabelDiv: function (index) {
  if (index < this.vLabelDivs.length)
   return this.vLabelDivs[index];
  return this.CreateVerticalLabelDiv(index);
 },
 GetHorizontalLabelDiv: function (index) {
  if (index < this.hLabelDivs.length)
   return this.hLabelDivs[index];
  return this.CreateHorizontalLabelDiv(index);
 },
 GetLabelDiv: function (index) {
  if (index < this.labelDivs.length)
   return this.labelDivs[index];
  return this.CreateMainLabelDiv(index);
 },
 GetCrosshairSeries: function (pane) {
  var crosshairSeries = [];
  for (var i = 0; i < this.chart.chart.series.length; i++) {
   var series = this.chart.chart.series[i];
   if (series.pane == pane.name && series.visible)
    crosshairSeries.push(series);
  }
  return crosshairSeries;
 },
 ClampCoord: function (coord, start, length) {
  if (coord < start)
   coord = start;
  else {
   if (coord > start + length)
    coord = start + length;
  }
  return coord;
 },
 GetAxisByName: function (name, isXAxis) {
  if (isXAxis) {
   return this.diagram.FindAxisXByName(name);
  }
  return this.diagram.FindAxisYByName(name);
 },
 GetDiff: function (value1, value2) {
  return value1 > value2 ? value1 - value2 : value2 - value1;
 },
 GetValueItemsByValue: function (series, index) {
  var items = [];
  var crosshairValueItem = series.crosshairValueItems[index];
  items.push(crosshairValueItem);
  for (var i = index - 1; i >= 0; i--) {
   if (series.crosshairValueItems[i].value == crosshairValueItem.value) {
    items.push(series.crosshairValueItems[i]);
   }
   else {
    break;
   }
  }
  for (var i = index + 1; i < series.crosshairValueItems.length; i++) {
   if (series.crosshairValueItems[i].value == crosshairValueItem.value) {
    items.push(series.crosshairValueItems[i]);
   }
   else {
    break;
   }
  }
  return items;
 },
 GetAxisValue: function (axisValues, axisName) {
  for (var i = 0; i < axisValues.length; i++) {
   if (axisValues[i].axis.name == axisName) {
    return axisValues[i].internalValue;
   }
  }
  return null;
 },
 FindNearestPoint: function (pane, series, valueItems, axisValues, primaryAxis, secondaryAxis) {
  var axisValue = this.GetAxisValue(axisValues, secondaryAxis.name);
  var value = null;
  var valueItem = null;
  for (var i = 0; i < valueItems.length; i++) {
   var point = series.points[valueItems[i].pointIndex];
   if (_aspxIsExists(point.isEmpty))
    if (point.isEmpty)
     continue;
   if (this.snapToNearestArgument) {
    for (var j = 0; j < point.values.length; j++) {
     var pointValue = point.crosshairValues[j];
     var isVisible = this.diagram.IsAxisValueVisible(pane, secondaryAxis, pointValue);
     if (isVisible && (value == null || this.GetDiff(axisValue, pointValue) < this.GetDiff(axisValue, value))) {
      value = pointValue;
      valueItem = valueItems[i];
     }
    }
   }
   else {
    var pointValue = secondaryAxis.GetInternalArgument(point.argument);
    var isVisible = this.diagram.IsAxisValueVisible(pane, secondaryAxis, pointValue);
    if (isVisible && (value == null || this.GetDiff(axisValue, pointValue) < this.GetDiff(axisValue, value))) {
     value = pointValue;
     valueItem = valueItems[i];
    }
   }
  }
  if (value == null || valueItem == null) {
   return null;
  }
  var point = series.points[valueItem.pointIndex];
  var argument = this.snapToNearestArgument ? valueItem.value : value;
  if (_aspxIsExists(point.offset)) {
   argument += point.offset;
  }
  value = this.snapToNearestArgument ? value : valueItem.value;
  var x = this.diagram.MapInternalToPoint(pane, this.snapToNearestArgument ? primaryAxis.name : secondaryAxis.name, argument);
  var y = this.diagram.MapInternalToPoint(pane, this.snapToNearestArgument ? secondaryAxis.name : primaryAxis.name, value);
  if (_aspxIsExists(point.fixedOffset)) {
   x += point.fixedOffset;
  }
  var ax = this.diagram.rotated ? y : x;
  var ay = this.diagram.rotated ? x : y;
  return { point: point, x: ax, y: ay, argument: argument, value: value };
 },
 AddCursorCrosshairItems: function (paneCrosshairInfo, value, isArgument, isHorizontal, axis) {
  paneCrosshairInfo.AddCursorCrosshairLine(value, isHorizontal, this.snapToNearestArgument ^ isArgument);
  paneCrosshairInfo.AddCursorCrosshairLabel(value, isHorizontal);
 },
 AddCrosshairItems: function (paneCrosshairInfo, point, value, isArgument, isHorizontal, axis) {
  point.axisValue = value;
  paneCrosshairInfo.AddPoint(point);
  paneCrosshairInfo.AddCrosshairLine(point, value, isHorizontal, this.snapToNearestArgument ^ isArgument);
  paneCrosshairInfo.AddCrosshairLabel(point, value, isHorizontal);
 },
 GetRange: function (pane, percent, maxValue) {
  var range = this.isHorizontal ? pane.boundsWidth : pane.boundsHeight;
  range *= percent;
  if (maxValue > 0 && range > maxValue)
   range = maxValue;
  return range;
 },
 AddCrosshairPointItems: function (paneCrosshairInfo, secondaryItem) {
  var value = this.isHorizontal ? secondaryItem.pointInfo.y : secondaryItem.pointInfo.x;
  var internalValue = this.snapToNearestArgument ? secondaryItem.pointInfo.value : secondaryItem.pointInfo.argument;
  this.AddCrosshairItems(paneCrosshairInfo, secondaryItem.pointInfo, new ASPxAxisValuePair(secondaryItem.secondaryAxis, internalValue, value), !this.snapToNearestArgument, this.isHorizontal, secondaryItem.secondaryAxis);
 },
 GetCrosshairValueItemIndex: function (series, axisValue) {
  var index = _aspxArrayBinarySearch(series.crosshairValueItems, axisValue, __aspxCrosshairValueItemsComparer, 0, series.crosshairValueItems.length);
  if (index < 0) {
   index = -1 * index - 1;
   if (index >= series.crosshairValueItems.length)
    index = series.crosshairValueItems.length - 1;
   else {
    if (index > 0) {
     var prev = this.GetDiff(series.crosshairValueItems[index - 1].value, axisValue);
     var next = this.GetDiff(series.crosshairValueItems[index].value, axisValue);
     if (!_aspxIsExists(series.invertedStep)) {
      if (prev < next)
       index--;
     }
     else
      if (!series.invertedStep && index > 0)
       index--;
    }
   }
  }
  return index;
 },
 IsBarSeries: function (series) {
  if (series.viewType == "Bar" ||
   series.viewType == "StackedBar" ||
   series.viewType == "FullStackedBar" ||
   series.viewType == "SideBySideStackedBar" ||
   series.viewType == "SideBySideFullStackedBar" ||
   series.viewType == "SideBySideRangeBar" ||
   series.viewType == "RangeBar" ||
   series.viewType == "SideBySideGantt" ||
   series.viewType == "Gantt") {
   return true;
  }
  return false;
 },
 IsContinuousSeries: function (series) {
  if (series.viewType == "Bar" ||
   series.viewType == "Line" ||
   series.viewType == "StackedLine" ||
   series.viewType == "FullStackedLine" ||
   series.viewType == "StepLine" ||
   series.viewType == "Spline" ||
   series.viewType == "ScatterLine" ||
   series.viewType == "SwiftPlot" ||
   series.viewType == "Area" ||
   series.viewType == "StepArea" ||
   series.viewType == "SplineArea" ||
   series.viewType == "StackedArea" ||
   series.viewType == "StackedSplineArea" ||
   series.viewType == "FullStackedArea" ||
   series.viewType == "FullStackedSplineArea" ||
   series.viewType == "RangeArea") {
   return true;
  }
  return false;
 },
 GetBarRange: function (pane, series, point, smallRange) {
  var barRange = smallRange;
  if (this.snapToNearestArgument) {
   if (_aspxIsExists(point.point.barWidth)) {
    var pointArgument = point.argument;
    var barWidth = point.point.barWidth;
    var pointValue = pointArgument;
    var barSidePoint = this.diagram.MapInternalToPoint(pane, series.axisX, pointValue + barWidth * 0.5);
    if (_aspxIsExists(point.point.fixedOffset))
     barSidePoint += point.point.fixedOffset;
    barRange = this.isHorizontal ? barSidePoint - point.x : barSidePoint - point.y;
    barRange = barRange > 0 ? barRange : -barRange;
    barRange = barRange < smallRange ? smallRange : barRange;
   }
  }
  return barRange;
 },
 GetContinuousSeriesRange: function (pane, series, point, crosshairPosition, smallRange, maxRange, primaryAxis) {
  var continuousRange = maxRange;
  if (point.argument == series.crosshairValueItems[0].value) {
   if (this.isHorizontal) {
    if (!primaryAxis.reverse && crosshairPosition < point.x || primaryAxis.reverse && crosshairPosition > point.x)
     continuousRange = smallRange;
   }
   else
    if (!primaryAxis.reverse && crosshairPosition > point.y || primaryAxis.reverse && crosshairPosition < point.y)
     continuousRange = smallRange;
  }
  else
   if (point.argument == series.crosshairValueItems[series.crosshairValueItems.length - 1].value) {
    if (this.isHorizontal) {
     if (!primaryAxis.reverse && crosshairPosition > point.x || primaryAxis.reverse && crosshairPosition < point.x)
      continuousRange = smallRange;
    }
    else
     if (!primaryAxis.reverse && crosshairPosition < point.y || primaryAxis.reverse && crosshairPosition > point.y)
      continuousRange = smallRange;
   }
  return continuousRange;
 },
 AreArgumentsEqual: function (argument1, argument2) {
  if (argument1 instanceof Date && argument2 instanceof Date) {
   return argument1.toString() == argument2.toString();
  }
  else
   return argument1 == argument2;
 },
 FindConnectedPoint: function (series, nearestPoint, pane) {
  var connectedPoint;
  var secondaryAxisName = this.snapToNearestArgument ? series.axisY : series.axisX;
  var secondaryAxis = this.GetAxisByName(secondaryAxisName, !this.snapToNearestArgument);
  if (this.snapToNearestArgument) {
   var pointInfo = nearestPoint.pointInfo;
   var offset = _aspxIsExists(pointInfo.point.offset) ? pointInfo.point.offset : 0;
   var index = _aspxArrayBinarySearch(series.crosshairValueItems, pointInfo.argument - offset, __aspxCrosshairValueItemsComparer, 0, series.crosshairValueItems.length);
   if (index < 0)
    index = -1 * index - 1;
   if (index >= series.crosshairValueItems.length)
    index = series.crosshairValueItems.length - 1;
   if (index >= 0) {
    var seriesPoint = series.points[series.crosshairValueItems[index].pointIndex];
    if (_aspxIsExists(seriesPoint.isEmpty))
     if (seriesPoint.isEmpty)
      return null;
    var pointVisible = false;
    for (var j = 0; j < seriesPoint.crosshairValues.length; j++) {
     var pointValue = seriesPoint.crosshairValues[j];
     var isVisible = this.diagram.IsAxisValueVisible(pane, secondaryAxis, pointValue);
     if (isVisible)
      pointVisible = true;
    }
    if (!pointVisible)
     return null;
    if (this.AreArgumentsEqual(pointInfo.point.argument, seriesPoint.argument))
     connectedPoint = seriesPoint;
   }
  }
  return connectedPoint;
 }, CreatePointInfo: function (point, pane, series, axisValues, secondaryAxis) {
  var primaryAxisName = this.snapToNearestArgument ? series.axisX : series.axisY;
  var primaryAxisValue = this.GetAxisValue(axisValues, primaryAxisName);
  var primaryAxis = this.GetAxisByName(primaryAxisName, this.snapToNearestArgument);
  var primaryScreenAxisValue = this.diagram.MapInternalToPoint(pane, primaryAxisName, primaryAxisValue);
  if (!series.actualCrosshairEnabled || series.crosshairValueItems.length == 0)
   return;
  var index = this.GetCrosshairValueItemIndex(series, primaryAxisValue);
  var valueItems = this.GetValueItemsByValue(series, index);
  var axisValue = this.GetAxisValue(axisValues, secondaryAxis.name);
  var value = null;
  var valueItem = null;
  for (var i = 0; i < valueItems.length; i++) {
   if (point == series.points[valueItems[i].pointIndex]) {
    if (this.snapToNearestArgument) {
     for (var j = 0; j < point.values.length; j++) {
      var pointValue = point.crosshairValues[j];
      var isVisible = this.diagram.IsAxisValueVisible(pane, secondaryAxis, pointValue);
      if (isVisible) {
       value = pointValue;
       valueItem = valueItems[i];
      }
     }
    }
    else {
     value = secondaryAxis.GetInternalArgument(point.argument);
     valueItem = valueItems[i];
    }
   }
  }
  if (value == null || valueItem == null) {
   return null;
  }
  var point = series.points[valueItem.pointIndex];
  var argument = this.snapToNearestArgument ? valueItem.value : value;
  if (_aspxIsExists(point.offset)) {
   argument += point.offset;
  }
  value = this.snapToNearestArgument ? value : valueItem.value;
  var x = this.diagram.MapInternalToPoint(pane, this.snapToNearestArgument ? primaryAxis.name : secondaryAxis.name, argument);
  var y = this.diagram.MapInternalToPoint(pane, this.snapToNearestArgument ? secondaryAxis.name : primaryAxis.name, value);
  if (_aspxIsExists(point.fixedOffset)) {
   x += point.fixedOffset;
  }
  var ax = this.diagram.rotated ? y : x;
  var ay = this.diagram.rotated ? x : y;
  return { point: point, x: ax, y: ay, argument: argument, value: value };
 },
 AddSortedCrosshairPointItems: function (paneCrosshairInfo, pane, x, y, crosshairSeries, secondaryItems) {
  for (var i = 0; i < crosshairSeries.length; i++) {
   var series = crosshairSeries[i];
   for (var j = 0; j < secondaryItems.length; j++) {
    if (secondaryItems[j].series == series) {
     this.AddCrosshairPointItems(paneCrosshairInfo, secondaryItems[j]);
    }
   }
  }
  return paneCrosshairInfo;
 },
 FindConnectedPointItems: function (nearestPoint, crosshairSeries, pane, axisValues) {
  var connectedItems = [];
  for (var i = 0; i < crosshairSeries.length; i++) {
   var series = crosshairSeries[i];
   if (series != nearestPoint.series) {
    var seriesConnectedPoint = this.FindConnectedPoint(series, nearestPoint, pane);
    if (seriesConnectedPoint != null) {
     var secondaryAxisName = this.snapToNearestArgument ? series.axisY : series.axisX;
     var secondaryAxis = this.GetAxisByName(secondaryAxisName, !this.snapToNearestArgument);
     var pointInfo = this.CreatePointInfo(seriesConnectedPoint, pane, series, axisValues, secondaryAxis);
     if (pointInfo != null)
      connectedItems.push({ pointInfo: pointInfo, secondaryAxis: secondaryAxis, series: series });
    }
   }
  }
  return connectedItems;
 },
 CalculatePaneCrosshairInfo: function (pane, x, y) {
  x = this.ClampCoord(x, pane.boundsLeft, pane.boundsWidth);
  y = this.ClampCoord(y, pane.boundsTop, pane.boundsHeight);
  var paneCrosshairInfo = new ASPxPaneCrosshairInfo(pane, x, y);
  var crosshairSeries = this.GetCrosshairSeries(pane);
  var axisValues = this.diagram.MapPointToInternal(pane, x, y);
  var smallRange = this.GetRange(pane, 0.08, 40);
  var secondaryItems = [];
  var nearestPoint = null;
  var minDiff = -1;
  for (var i = 0; i < crosshairSeries.length; i++) {
   var series = crosshairSeries[i];
   var primaryAxisName = this.snapToNearestArgument ? series.axisX : series.axisY;
   var primaryAxisValue = this.GetAxisValue(axisValues, primaryAxisName);
   var primaryAxis = this.GetAxisByName(primaryAxisName, this.snapToNearestArgument);
   var primaryScreenAxisValue = this.diagram.MapInternalToPoint(pane, primaryAxisName, primaryAxisValue);
   this.AddCursorCrosshairItems(paneCrosshairInfo, new ASPxAxisValuePair(primaryAxis, primaryAxisValue, primaryScreenAxisValue), this.snapToNearestArgument, !this.isHorizontal, primaryAxis);
   if (!series.actualCrosshairEnabled || series.crosshairValueItems.length == 0)
    continue;
   var index = this.GetCrosshairValueItemIndex(series, primaryAxisValue);
   var valueItems = this.GetValueItemsByValue(series, index);
   var secondaryAxisName = this.snapToNearestArgument ? series.axisY : series.axisX;
   var secondaryAxis = this.GetAxisByName(secondaryAxisName, !this.snapToNearestArgument);
   var pointInfo = this.FindNearestPoint(pane, series, valueItems, axisValues, primaryAxis, secondaryAxis);
   if (pointInfo != null && pane.InPane(pointInfo.x, pointInfo.y)) {
    var diff = this.GetDiff(this.isHorizontal ? x : y, this.isHorizontal ? pointInfo.x : pointInfo.y);
    var correctedRange = smallRange;
    if (this.IsBarSeries(series)) {
     correctedRange = this.GetBarRange(pane, series, pointInfo, smallRange);
    }
    else {
     if (this.IsContinuousSeries(series)) {
      correctedRange = this.GetContinuousSeriesRange(pane, series, pointInfo, this.isHorizontal ? x : y, correctedRange, this.isHorizontal ? pane.boundsWidth : pane.boundsHeight, primaryAxis);
     }
    }
    if (diff <= correctedRange) {
     if (this.chart.chart.crosshairOptions.crosshairLabelMode != "ShowForNearestSeries" && (series.argumentScaleType == "Qualitative" || this.IsBarSeries(series))) {
      if (minDiff == -1 || (minDiff != -1 && diff < minDiff)) {
       minDiff = diff;
       nearestPoint = { pointInfo: pointInfo, secondaryAxis: secondaryAxis, series: series };
      }
     }
     else
      secondaryItems.push({ pointInfo: pointInfo, secondaryAxis: secondaryAxis, series: series });
    }
   }
  }
  if (nearestPoint != null) {
   secondaryItems.push(nearestPoint);
   var connectedPoints = this.FindConnectedPointItems(nearestPoint, crosshairSeries, pane, axisValues);
   for (var i = 0; i < connectedPoints.length; i++)
    secondaryItems.push(connectedPoints[i]);
  }
  paneCrosshairInfo = this.AddSortedCrosshairPointItems(paneCrosshairInfo, pane, x, y, crosshairSeries, secondaryItems);
  return paneCrosshairInfo;
 },
 AddUniqueValue: function (uniqueValues, value) {
  for (var i = 0; i < uniqueValues.length; i++) {
   if (uniqueValues[i] == value)
    return false;
  }
  uniqueValues.push(value);
  return true;
 },
 FindAxisLabelBounds: function (pane, axisName) {
  if (_aspxIsExists(pane.axisLabelBounds)) {
   for (var i = 0; i < pane.axisLabelBounds.length; i++) {
    if (pane.axisLabelBounds[i].axisName == axisName)
     return pane.axisLabelBounds[i];
   }
  }
  return null;
 },
 GetLineLabelHtml: function (axisValuePair, isValueAxis) {
  var value = axisValuePair.axis.GetNativeArgument(axisValuePair.internalValue);
  return ASPxToolTipPatternHelper.GetAxisLabelText(axisValuePair.axis, isValueAxis, value);
 },
 GetLineThickness: function (horizontal) {
  horizontal = horizontal ^ this.diagram.rotated;
  if (horizontal) {
   lineStyle = this.chart.chart.crosshairOptions.valueLineStyle;
  }
  else {
   lineStyle = this.chart.chart.crosshairOptions.argumentLineStyle;
  }
  if (lineStyle != null) {
   return lineStyle.thickness;
  }
  else {
   return 0;
  }
 },
 DrawCrosshairLineElements: function (crosshairDrawInfo) {
  var chartX = _aspxGetAbsoluteX(this.chart.mainElement);
  var chartY = _aspxGetAbsoluteY(this.chart.mainElement);
  for (var i = 0; i < crosshairDrawInfo.CrosshairElements.length; i++) {
   if (crosshairDrawInfo.CrosshairElements[i].visible) {
    var crosshairLine = crosshairDrawInfo.CrosshairElements[i].Point.crosshairLine;
    var crosshairLineElement = crosshairDrawInfo.CrosshairElements[i].LineElement;
    this.DrawCrosshairLine(crosshairLine, crosshairDrawInfo.pane, chartX, chartY, crosshairLineElement);
   }
  }
  if (!_aspxIsExists(crosshairDrawInfo.CursorCrosshairLineDrawInfo))
   return;
  var cursorCrosshairLine = crosshairDrawInfo.CursorCrosshairLineDrawInfo.crosshairLine;
  var crosshairLineElement = crosshairDrawInfo.CursorCrosshairLineDrawInfo.cursorCrosshairLineElement;
  this.DrawCrosshairLine(cursorCrosshairLine, crosshairDrawInfo.pane, chartX, chartY, crosshairLineElement);
 },
 SetLineStyle: function (lineDiv, crosshairLineElement) {
  var lineStyle = crosshairLineElement.lineStyle;
  lineDiv.style.borderRight = "0px";
  lineDiv.style.borderLeft = "0px";
  lineDiv.style.borderTop = "0px";
  lineDiv.style.borderBottom = "0px";
  if (lineStyle != null) {
   lineDiv.style.borderTop = lineStyle.thickness + "px";
   lineDiv.style.borderLeft = lineStyle.thickness + "px";
  }
  else {
   lineDiv.style.borderTop = "1px";
   lineDiv.style.borderLeft = "1px";
  }
  if (crosshairLineElement.color != null) {
   lineDiv.style.borderColor = "#" + crosshairLineElement.color;
  }
  var dashStyle;
  if (lineStyle != null) {
   switch (lineStyle.dashStyle) {
    case "Empty":
     dashStyle = "none";
     break;
    case "Solid":
     dashStyle = "solid";
     break;
    case "Dash":
     dashStyle = "dashed";
     break;
    default:
     dashStyle = "dotted";
   }
  }
  else {
   dashStyle = "solid";
  }
  lineDiv.style.borderStyle = dashStyle;
 },
 DrawCrosshairLine: function (crosshairLine, pane, chartX, chartY, crosshairLineElement) {
  var axisValuePair = crosshairLine.axisValuePair;
  if (!crosshairLineElement.visible)
   return;
  if (crosshairLine.isHorizontal) {
   var lineDiv = this.GetHorizontalDiv(this.hLineIndex);
   var offsetY = Math.floor(this.GetLineThickness(true) / 2);
   __aspxChartSetDivPosition(lineDiv, chartX + pane.boundsLeft, chartY + axisValuePair.screenValue - offsetY);
   lineDiv.style.width = pane.boundsWidth + "px";
   this.SetLineStyle(lineDiv, crosshairLineElement);
   this.hLineIndex++;
  }
  else {
   var lineDiv = this.GetVerticalDiv(this.vLineIndex);
   var offsetX = Math.floor(this.GetLineThickness(false) / 2);
   __aspxChartSetDivPosition(lineDiv, chartX + axisValuePair.screenValue - offsetX, chartY + pane.boundsTop);
   lineDiv.style.height = pane.boundsHeight + "px";
   this.SetLineStyle(lineDiv, crosshairLineElement);
   this.vLineIndex++;
  }
 },
 DrawCrosshairAxisLabelElements: function (crosshairDrawInfo) {
  var chartX = _aspxGetAbsoluteX(this.chart.mainElement);
  var chartY = _aspxGetAbsoluteY(this.chart.mainElement);
  for (var i = 0; i < crosshairDrawInfo.CrosshairElements.length; i++) {
   if (crosshairDrawInfo.CrosshairElements[i].visible) {
    var crosshairAxisLabel = crosshairDrawInfo.CrosshairElements[i].Point.crosshairLabel;
    var crosshairAxisLabelElement = crosshairDrawInfo.CrosshairElements[i].AxisLabelElement;
    this.DrawCrosshairAxisLabel(crosshairAxisLabel, crosshairDrawInfo.pane, chartX, chartY, crosshairAxisLabelElement);
   }
  }
  for (var i = 0; i < crosshairDrawInfo.CursorCrosshairAxisLabelDrawInfos.length; i++) {
   var crosshairAxisLabel = crosshairDrawInfo.CursorCrosshairAxisLabelDrawInfos[i].crosshairAxisLabel;
   var crosshairAxisLabelElement = crosshairDrawInfo.CursorCrosshairAxisLabelDrawInfos[i].cursorCrosshairAxisLabelElement;
   this.DrawCrosshairAxisLabel(crosshairAxisLabel, crosshairDrawInfo.pane, chartX, chartY, crosshairAxisLabelElement);
  }
 },
 SetCrosshairAxisLabelOptions: function (labelDiv, crosshairAxisLabelElement) {
  if (crosshairAxisLabelElement.backColor != null) {
   labelDiv.style.background = "#" + crosshairAxisLabelElement.backColor;
  }
  if (crosshairAxisLabelElement.textColor != null) {
   labelDiv.style.color = "#" + crosshairAxisLabelElement.textColor;
  }
  if (crosshairAxisLabelElement.font != null) {
   labelDiv.style.font = crosshairAxisLabelElement.font.fontSize + "pt" + " " + crosshairAxisLabelElement.font.fontFamily;
  }
 },
 DrawCrosshairAxisLabel: function (crosshairAxisLabel, pane, chartX, chartY, crosshairAxisLabelElement) {
  var axisValuePair = crosshairAxisLabel.axisValuePair;
  if (!crosshairAxisLabelElement.visible)
   return;
  if (crosshairAxisLabel.isHorizontal) {
   var axisLabelBounds = this.FindAxisLabelBounds(pane, axisValuePair.axis.name);
   if (axisLabelBounds != null) {
    var labelDiv = this.GetHorizontalLabelDiv(this.hLabelIndex);
    this.SetCrosshairAxisLabelOptions(labelDiv, crosshairAxisLabelElement);
    labelDiv.innerHTML = crosshairAxisLabelElement.text; 
    var offset = axisLabelBounds.left;
    if (axisLabelBounds.left < pane.boundsLeft)
     offset += axisLabelBounds.width - labelDiv.clientWidth;
    __aspxChartSetDivPosition(labelDiv, chartX + offset, chartY + axisValuePair.screenValue - labelDiv.clientHeight / 2);
    this.hLabelIndex++;
   }
  }
  else {
   var axisLabelBounds = this.FindAxisLabelBounds(pane, axisValuePair.axis.name);
   if (axisLabelBounds != null) {
    var labelDiv = this.GetVerticalLabelDiv(this.vLabelIndex);
    this.SetCrosshairAxisLabelOptions(labelDiv, crosshairAxisLabelElement);
    labelDiv.innerHTML = crosshairAxisLabelElement.text; 
    var offset = axisLabelBounds.top;
    if (axisLabelBounds.top < pane.boundsTop)
     offset += axisLabelBounds.height - labelDiv.clientHeight;
    __aspxChartSetDivPosition(labelDiv, chartX + axisValuePair.screenValue - labelDiv.clientWidth / 2, chartY + offset);
    this.vLabelIndex++;
   }
  }
 },
 DrawCrosshairSeriesLabel: function (pane, labelsBounds, pointsInfo, pointInfo, seriesLabelElement, isSingle) {
  if (!seriesLabelElement.visible)
   return;
  var labelDiv = this.GetLabelDiv(this.labelIndex);
  var marker = "";
  var text = "";
  if (seriesLabelElement.textVisible)
   text = seriesLabelElement.text;
  if (seriesLabelElement.markerVisible)
   marker = seriesLabelElement.marker;
  var textContent = __aspxChartGetHorizontalTable(marker, text);
  var content = __aspxChartGetVerticalTable(seriesLabelElement.headerText, textContent, seriesLabelElement.footerText);
  labelDiv.innerHTML = content;
  labelDiv.style.font = seriesLabelElement.font.fontSize + "pt" + " " + seriesLabelElement.font.fontFamily + " ";
  labelDiv.style.color = seriesLabelElement.textColor;
  var x = pointInfo.x - pane.boundsLeft;
  var y = pointInfo.y - pane.boundsTop;
  var labelBounds = { x: x, y: y, width: labelDiv.clientWidth, height: labelDiv.clientHeight };
  var direction = { x: 1, y: -1 };
  direction = this.CheckCrosshairSeriesLabelDirection(direction, x, y, labelDiv);
  this.SetDirection(labelBounds, x, y, direction.x, direction.y);
  if (!isSingle) {
   direction = this.CorrectCrosshairSeriesLabelBounds(labelsBounds, pane, labelBounds, pointsInfo, x, y, direction.x, direction.y);
  }
  var verticalPrefix = direction.y > 0 ? "Top" : "Bottom";
  var horizontalPrefix = direction.x > 0 ? "Left" : "Right";
  labelsBounds.push(labelBounds);
  var offsetX = _aspxGetAbsoluteX(this.chart.mainElement) + pane.boundsLeft;
  var offsetY = _aspxGetAbsoluteY(this.chart.mainElement) + pane.boundsTop;
  __aspxSetCssClassName(labelDiv, this.chart, __aspxChartToolTipClassName + "_" + verticalPrefix + horizontalPrefix);
  __aspxChartSetDivPosition(labelDiv, offsetX + labelBounds.x, offsetY + labelBounds.y);
  this.labelIndex++;
 },
 GetLabelHTML: function (point) {
  var color = _aspxIsExists(point.color) ? point.color : point.series.color;
  var marker = "<div style='width:15px; height:12px; margin-top:5px; background-color:#" + color + "' />";
  var text = ASPxToolTipPatternHelper.GetPointToolTipText(point.series.crosshairLabelPattern, point, point.series);
  return __aspxChartGetHorizontalTable(marker, text);
 },
 ClacSquareLength: function (x1, y1, x2, y2) {
  return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
 },
 DrawCrosshairSeriesLabels: function (crosshairDrawInfo, paneCrosshairInfo) {
  if (this.diagram.rotated) {
   crosshairDrawInfo.CrosshairElements.sort(__aspxSortCrosshairElementByValue);
  }
  else {
   crosshairDrawInfo.CrosshairElements.sort(__aspxSortCrosshairElementByArgument);
  }
  if (crosshairDrawInfo.CrosshairElements.length < 1)
   return;
  var pointsInfo = [];
  for (var i = 0; i < crosshairDrawInfo.CrosshairElements.length; i++) {
   pointsInfo.push(crosshairDrawInfo.CrosshairElements[i].Point);
  }
  switch (this.chart.chart.crosshairOptions.crosshairLabelMode) {
   case "ShowForEachSeries":
    for (var i = 0; i < crosshairDrawInfo.CrosshairElements.length; i++) {
     if (crosshairDrawInfo.CrosshairElements[i].visible) {
      var pointInfo = crosshairDrawInfo.CrosshairElements[i].Point;
      var seriesLabelElement = crosshairDrawInfo.CrosshairElements[i].LabelElement;
      this.DrawCrosshairSeriesLabel(crosshairDrawInfo.pane, crosshairDrawInfo.labelsBounds, pointsInfo, pointInfo, seriesLabelElement, false);
     }
    }
    break;
   case "ShowForNearestSeries":
    var min = this.ClacSquareLength(paneCrosshairInfo.x, paneCrosshairInfo.y, pointsInfo[0].x, pointsInfo[0].y);
    var index = 0;
    for (var i = 1; i < pointsInfo.length; i++) {
     var distance = this.ClacSquareLength(paneCrosshairInfo.x, paneCrosshairInfo.y, pointsInfo[i].x, pointsInfo[i].y);
     if (distance < min) {
      min = distance;
      index = i;
     }
    }
    if (crosshairDrawInfo.CrosshairElements[index].visible) {
     var seriesLabelElement = crosshairDrawInfo.CrosshairElements[index].LabelElement;
     this.DrawCrosshairSeriesLabel(crosshairDrawInfo.pane, crosshairDrawInfo.labelsBounds, pointsInfo, pointsInfo[index], seriesLabelElement, true);
    }
    break;
  }
 },
 DrawCommonSeriesPointLabel: function (crosshairGroups, paneCrosshairInfoList) {
  var content = this.GetCommonSeriesLabelContent(crosshairGroups);
  if (!_aspxIsExists(content))
   return;
  var chartX = _aspxGetAbsoluteX(this.chart.mainElement);
  var chartY = _aspxGetAbsoluteY(this.chart.mainElement);
  var labelDiv = this.GetLabelDiv(this.labelIndex);
  labelDiv.innerHTML = content;
  if (this.chart.chart.crosshairOptions.crosshairLabelPosition instanceof ASPxClientCrosshairFreePosition) {
   __aspxShowInFreePosition(labelDiv, this.chart.chart, this.chart.chart.crosshairOptions.crosshairLabelPosition, chartX, chartY);
  }
  else {
   var paneCrosshairInfo;
   for (var i = 0; i < paneCrosshairInfoList.length; i++) {
    if (paneCrosshairInfoList[i].pane == this.focusedPane) {
     paneCrosshairInfo = paneCrosshairInfoList[i];
     break;
    }
   }
   var offsetX = this.chart.chart.crosshairOptions.crosshairLabelPosition.offsetX;
   var offsetY = this.chart.chart.crosshairOptions.crosshairLabelPosition.offsetY;
   var x = paneCrosshairInfo.x + offsetX;
   if (x + labelDiv.clientWidth > this.chart.GetWidth()) {
    x -= labelDiv.clientWidth + 2 * offsetX;
   }
   var y = paneCrosshairInfo.y - labelDiv.clientHeight - offsetY;
   if (y < 0) {
    y += labelDiv.clientHeight + 2 * offsetY;
   }
   __aspxChartSetDivPosition(labelDiv, chartX + x, chartY + y);
  }
  this.labelIndex++;
 },
 GetCommonSeriesLabelContent: function (crosshairGroups) {
  var content = "";
  for (var j = 0; j < crosshairGroups.length; j++) {
   var group = crosshairGroups[j];
   var groupHeaderElement = group.crosshairGroupHeaderElement;
   if (groupHeaderElement != null && groupHeaderElement.text != "" && groupHeaderElement.visible)
    content += this.GetGroupHeaderContent(groupHeaderElement);
   for (var pointIndex = 0; pointIndex < group.crosshairElements.length; pointIndex++) {
    content += this.GetSingleLabelContent(group.crosshairElements[pointIndex]);
   }
  }
  return content != "" ? "<table>" + content + "</table>" : null;
 },
 GetSingleLabelContent: function (crosshairElement) {
  var content = "";
  var seriesLabelElement = crosshairElement.LabelElement;
  if (!crosshairElement.visible || !seriesLabelElement.visible)
   return "";
  var style = "style = 'color:" + seriesLabelElement.textColor + ";" + "font:" + seriesLabelElement.font.fontSize + "pt" + " " + seriesLabelElement.font.fontFamily + ";'";
  if (seriesLabelElement.headerText != "")
   content += "<tr><td colspan='2' " + style + ">" + seriesLabelElement.headerText + "</td></tr>"
  if (seriesLabelElement.markerVisible) {
   var markerStyle;
   if (seriesLabelElement.marker != seriesLabelElement.defaultMarker)
    markerStyle = seriesLabelElement.marker;
   else
    markerStyle = "<div style='width:19px; height:14px; text-align:center'><div style='width:15px; height:12px; margin-top:5px; background-color:" + seriesLabelElement.markerColor + "'/></div>"
   content += "<tr><td style='vertical-align:top'>" + markerStyle + "</td>";
  }
  else
   content += "<tr><td></td>";
  if (seriesLabelElement.textVisible)
   content += "<td " + style + ">" + seriesLabelElement.text + "</td></tr>";
  else
   content += "<td></td></tr>";
  if (seriesLabelElement.footerText != "")
   content += "<tr><td colspan='2' " + style + ">" + seriesLabelElement.footerText + "</td></tr>";
  return content;
 },
 GetGroupHeaderContent: function (crosshairGroupHeaderElement) {
  var style = "style = 'color:" + crosshairGroupHeaderElement.textColor + ";font:" + crosshairGroupHeaderElement.font.fontSize + "pt" + " " + crosshairGroupHeaderElement.font.fontFamily + ";'";
  return "<tr><td colspan='2' " + style + ">" + crosshairGroupHeaderElement.text + "</td></tr>"
 },
 PointBelongsToGroup: function (point, group, snapsToArgument) {
  if (snapsToArgument)
   return point.argument.toString() == group.anchorValue.toString();
  else
   return point.values.length > 1 ? false : point.values[0].toString() == group.anchorValue.toString();
 },
 HasIntersection: function (v1, l1, v2, l2) {
  v1 -= this.indent;
  l1 += 2 * this.indent;
  var v12 = v1 + l1;
  var v22 = v2 + l2;
  return !(v1 <= v2 && v1 <= v22 && v12 <= v2 && v12 <= v22 || v1 >= v2 && v1 >= v22 && v12 >= v2 && v12 >= v22);
 },
 CalcIntersectionArea: function (bounds1, bounds2) {
  var x1 = bounds1.x > bounds2.x ? bounds1.x : bounds2.x;
  var right1 = bounds1.x + bounds1.width;
  var right2 = bounds2.x + bounds2.width;
  var x2 = right1 < right2 ? right1 : right2;
  var y1 = bounds1.y > bounds2.y ? bounds1.y : bounds2.y;
  var bottom1 = bounds1.y + bounds1.height;
  var bottom2 = bounds2.y + bounds2.height;
  var y2 = bottom1 < bottom2 ? bottom1 : bottom2;
  var width = x2 - x1;
  var height = y2 - y1;
  return width * height;
 },
 CheckWithLabelIntersection: function (labelsBounds, bounds) {
  var intersectionAreas = [];
  for (var i = 0; i < labelsBounds.length; i++) {
   var hasXIntersection = this.HasIntersection(bounds.x, bounds.width, labelsBounds[i].x, labelsBounds[i].width);
   var hasYIntersection = this.HasIntersection(bounds.y, bounds.height, labelsBounds[i].y, labelsBounds[i].height);
   if (hasXIntersection && hasYIntersection) {
    intersectionAreas.push(this.CalcIntersectionArea(bounds, labelsBounds[i]));
   }
   else {
    intersectionAreas.push(0);
   }
  }
  var sum = 0;
  for (var i = 0; i < intersectionAreas.length; i++) {
   sum += intersectionAreas[i];
  }
  return sum;
 },
 CheckWithPointIntersection: function (pane, bounds, pointsInfo) {
  for (var i = 0; i < pointsInfo.length; i++) {
   var x = pointsInfo[i].x - pane.boundsLeft;
   var y = pointsInfo[i].y - pane.boundsTop;
   if (x > bounds.x && x < bounds.x + bounds.width && y > bounds.y && y < bounds.y + bounds.height) {
    return false;
   }
  }
  return true;
 },
 SetDirection: function (bounds, x, y, dirX, dirY) {
  bounds.x = x;
  bounds.x += dirX > 0 ? -10 : 10 - bounds.width;
  bounds.y = y;
  bounds.y += dirY > 0 ? 20 : -20 - bounds.height;
 },
 CheckCrosshairSeriesLabelDirection: function (direction, x, y, labelDiv) {
  if (y - labelDiv.clientHeight < 0)
   direction = { x: direction.x, y: -direction.y };
  if (x + labelDiv.clientWidth > this.chart.GetWidth())
   direction = { x: -direction.x, y: direction.y };
  return direction;
 },
 CorrectCrosshairSeriesLabelBounds: function (labelsBounds, pane, bounds, pointsInfo, x, y, dirX, dirY) {
  var directions = [];
  directions.push({ x: dirX, y: dirY });
  directions.push({ x: dirX, y: -dirY });
  directions.push({ x: -dirX, y: dirY });
  directions.push({ x: -dirX, y: -dirY });
  var intersections = [];
  for (var i = 0; i < directions.length; i++) {
   this.SetDirection(bounds, x, y, directions[i].x, directions[i].y);
   var intersection = this.CheckWithLabelIntersection(labelsBounds, bounds);
   if (intersection == 0 && this.CheckWithPointIntersection(pane, bounds, pointsInfo)) {
    return directions[i];
   }
   else {
    intersections.push(intersection);
   }
  }
  var min = intersections[0];
  var index = 0;
  for (var i = 1; i < intersections.length; i++) {
   if (intersections[i] < min) {
    min = intersections[i];
    index = i;
   }
  }
  this.SetDirection(bounds, x, y, directions[index].x, directions[index].y);
  return directions[index];
 },
 ExtractGroups: function (crosshairDrawInfoList) {
  var options = this.chart.chart.crosshairOptions;
  var snapsToArgument = options.snapMode == "NearestArgument";
  var totalCrosshairElements = [];
  for (var i = 0; i < crosshairDrawInfoList.length; i++)
   for (var j = 0; j < crosshairDrawInfoList[i].CrosshairElements.length; j++)
    totalCrosshairElements.push(crosshairDrawInfoList[i].CrosshairElements[j]);
  var groups = [];
  for (var elementIndex = 0; elementIndex < totalCrosshairElements.length; elementIndex++) {
   var crosshairElement = totalCrosshairElements[elementIndex];
   var point = crosshairElement.Point.point;
   var isInGroup = false;
   if (options.showGroupHeaders) {
    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {
     var group = groups[groupIndex];
     if (this.PointBelongsToGroup(point, group, snapsToArgument)) {
      isInGroup = true;
      group.crosshairElements.push(crosshairElement);
      break;
     }
    }
   }
   if (!isInGroup) {
    var group = new ASPxClientCrosshairElementsGroup(point, snapsToArgument);
    group.crosshairElements.push(crosshairElement);
    groups.push(group);
   }
  }
  var converter = new ASPxCrosshairGroupHeaderValueToStringConverter(snapsToArgument, !snapsToArgument);
  var hasHeader = (groups.length != totalCrosshairElements.length) && options.showGroupHeaders;
  for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {
   var group = groups[groupIndex];
   var basePoint = group.crosshairElements[0].Point.point;
   group.headerText = hasHeader ? ASPxToolTipPatternHelper.GetPointToolTipTextByConverter(options.groupHeaderPattern, basePoint, basePoint.series, converter) : "";
   var groupHeaderElement = options.showGroupHeaders ? new ASPxClientCrosshairGroupHeaderElement(group) : null;
   group.crosshairGroupHeaderElement = groupHeaderElement;
   for (var elementIndex = 0; elementIndex < group.crosshairElements.length; elementIndex++) {
    var crosshairElement = group.crosshairElements[elementIndex];
    var point = crosshairElement.Point.point;
    var pattern = hasHeader ? point.series.groupedElementsPattern : point.series.crosshairLabelPattern;
    var seriesLabelElement = crosshairElement.LabelElement;
    seriesLabelElement.text = ASPxToolTipPatternHelper.GetPointToolTipText(pattern, point, point.series);
    if (groupHeaderElement != null)
     groupHeaderElement.seriesPoints.push(crosshairElement.Point);
   }
  }
  return groups;
 },
 UpdateCrosshair: function (x, y, chartControl) {
  this.focusedPane = this.GetPane(x, y);
  if (this.focusedPane == null) {
   this.Hide();
   return;
  }
  var panes = [];
  if (!this.chart.chart.crosshairOptions.showOnlyInFocusedPane &&
   ((this.diagram.paneLayoutDirection == "Vertical" && this.isHorizontal) ||
   (this.diagram.paneLayoutDirection == "Horizontal" && !this.isHorizontal))) {
   panes.push(this.diagram.defaultPane);
   for (var i = 0; i < this.diagram.panes.length; i++) {
    panes.push(this.diagram.panes[i]);
   }
  }
  else {
   panes.push(this.focusedPane);
  }
  var paneCrosshairInfoList = [];
  var crosshairDrawInfoList = [];
  for (var i = 0; i < panes.length; i++) {
   if (!panes[i].visible)
    continue;
   var paneCrosshairInfo = this.CalculatePaneCrosshairInfo(panes[i], x, y)
   paneCrosshairInfoList.push(paneCrosshairInfo);
   crosshairDrawInfo = new ASPxClientCrosshairDrawInfo(this.chart);
   crosshairDrawInfo.AddPaneCrosshairInfo(paneCrosshairInfo, chartControl.chart.diagram.rotated);
   crosshairDrawInfo.pane = panes[i];
   crosshairDrawInfoList.push(crosshairDrawInfo);
  }
  var crosshairGroups = [];
  if (this.chart.chart.crosshairOptions.crosshairLabelMode == "ShowCommonForAllSeries")
   crosshairGroups = this.ExtractGroups(crosshairDrawInfoList);
  if (_aspxIsExists(chartControl.RaiseCustomDrawCrosshair)) {
   var crosshairDrawInfo = new ASPxClientCrosshairDrawInfoList(crosshairDrawInfoList, crosshairGroups);
   chartControl.RaiseCustomDrawCrosshair(crosshairDrawInfo.CrosshairElements, crosshairDrawInfo.CursorCrosshairAxisLabelElements, crosshairDrawInfo.CursorCrosshairLineElement, crosshairDrawInfo.CrosshairGroupHeaderElements);
  }
  this.hLineIndex = 0;
  this.hLabelIndex = 0;
  this.vLineIndex = 0;
  this.vLabelIndex = 0;
  this.labelIndex = 0;
  for (var i = 0; i < paneCrosshairInfoList.length; i++) {
   this.DrawCrosshairLineElements(crosshairDrawInfoList[i]);
   this.DrawCrosshairAxisLabelElements(crosshairDrawInfoList[i]);
   if (this.chart.chart.crosshairOptions.crosshairLabelMode != "ShowCommonForAllSeries") {
    this.DrawCrosshairSeriesLabels(crosshairDrawInfoList[i], paneCrosshairInfoList[i]);
   }
  }
  if (this.chart.chart.crosshairOptions.crosshairLabelMode == "ShowCommonForAllSeries") {
   this.DrawCommonSeriesPointLabel(crosshairGroups, paneCrosshairInfoList);
  }
  this.ClearDivs(this.hLineIndex, this.vLineIndex, this.hLabelIndex, this.vLabelIndex, this.labelIndex);
 }
});
ASPxPaneCrosshairInfo = _aspxCreateClass(null, {
 constructor: function(pane, x, y) {
  this.pane = pane;
  this.horizontalLines = [];
  this.verticalLines = [];
  this.horizontalLabels = [];
  this.verticalLabels = [];
  this.pointsInfo = [];
  this.labelsBounds = [];
  this.x = x;
  this.y = y;
  this.cursorLabel = [];
 },
 AddCursorCrosshairLine: function(axisValuePair, isHorizontal, isSingle) {
  this.cursorLine = this.GetCrosshairLine(axisValuePair, isHorizontal);
 },
 AddCursorCrosshairLabel: function(axisValuePair, isHorizontal) {
  this.cursorLabel.push({ axisValuePair: axisValuePair, isHorizontal: isHorizontal });
 },
 AddCrosshairLine: function(point, axisValuePair, isHorizontal, isSingle) {
  if (this.Contains(this.pointsInfo, point)) {
   point.crosshairLine = this.GetCrosshairLine(axisValuePair, isHorizontal);
  }
 },
 AddCrosshairLabel: function(point, axisValuePair, isHorizontal) {
  if (this.Contains(this.pointsInfo, point)) {
   point.crosshairLabel = { axisValuePair: axisValuePair, isHorizontal: isHorizontal };
  }
 },
 GetCrosshairLine: function(axisValuePair, isHorizontal) {
  return { axisValuePair: axisValuePair, isHorizontal: isHorizontal };
 },
 AddPoint: function(point) {
  if (!this.Contains(this.pointsInfo, point)) {
   this.pointsInfo.push(point);
  }
 },
 Contains: function(array, crosshairPoint) {
  for (var i = 0; i < array.length; i++) {
   if (array[i].axisValue.axisName == crosshairPoint.axisValue.axisName && array[i].axisValue.internalValue == crosshairPoint.axisValue.internalValue &&
     array[i].point.series.name == crosshairPoint.point.series.name) {
    return true;
   }
  }
  return false;
 }
});
ASPxAxisValuePair = _aspxCreateClass(null, {
 constructor: function(axis, internalValue, screenValue) {
  this.axis = axis;
  this.internalValue = internalValue;
  this.screenValue = screenValue;
 }
});
var _argumentPattern = "A";
var _valuePattern = "V";
var _seriesNamePattern = "S";
var _stackedGroupPattern = "G";
var _value1Pattern = "V1";
var _value2Pattern = "V2";
var _weightPattern = "W";
var _highValuePattern = "HV";
var _lowValuePattern = "LV";
var _openValuePattern = "OV";
var _closeValuePattern = "CV";
var _percentValuePattern = "VP";
var _pointHintPattern = "HINT";
ASPxPointDataToStringConverter = _aspxCreateClass(null, {
 constructor: function () {
  this.allowArgument = _aspxIsExists(this.allowArgument) ? this.allowArgument : true;
  this.allowValue = _aspxIsExists(this.allowValue) ? this.allowValue : true;
 },
 GetHintText: function (seriesPoint) {
  return seriesPoint.hint != null ? seriesPoint.hint : "";
 },
 GetArgumentText: function (seriesPoint, series, format) {
  if (seriesPoint.argument == null)
   return "";
  if (series.argumentScaleType == ASPxClientScaleType.Numerical || series.argumentScaleType == ASPxClientScaleType.DateTime || format == null || format == "") {
   if (series.argumentScaleType == ASPxClientScaleType.DateTime && format == "q") {
    var monthNum = Math.floor(seriesPoint.argument.getMonth() / 3) + 1;
    return "Q" + monthNum + " " + seriesPoint.argument.getFullYear();
   }
   else
    return ASPxFormatter.Format("{0:" + format + "}", [seriesPoint.argument]);
  }
  else
   return seriesPoint.argument;
 },
 GetValueTextByIndex: function (valueIndex, seriesPoint, format) {
  var formattedValue = format == "" || format == null ? seriesPoint.values[valueIndex] : ASPxFormatter.Format("{0:" + format + "}", seriesPoint.values[valueIndex])
  return valueIndex >= seriesPoint.values.length ? "" : formattedValue;
 }
});
ASPxValueToStringConverter = _aspxCreateClass(ASPxPointDataToStringConverter, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetValueText: function(seriesPoint, format) {
  return this.GetValueTextByIndex(0, seriesPoint, format);
 }
});
ASPxRangeValueToStringConverter = _aspxCreateClass(ASPxPointDataToStringConverter, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetValue1Text: function(seriesPoint, format) {
  return this.GetValueTextByIndex(0, seriesPoint, format);
 },
 GetValue2Text: function(seriesPoint, format) {
  return this.GetValueTextByIndex(1, seriesPoint, format);
 }
});
ASPxBubbleValueToStringConverter = _aspxCreateClass(ASPxValueToStringConverter, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetWeightText: function(seriesPoint, format) {
  return this.GetValueTextByIndex(1, seriesPoint, format);
 }
});
ASPxFinancialValueToStringConverter = _aspxCreateClass(ASPxPointDataToStringConverter, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetLowValueText: function(seriesPoint, format) {
  return this.GetValueTextByIndex(0, seriesPoint, format);
 },
 GetHighValueText: function(seriesPoint, format) {
  return this.GetValueTextByIndex(1, seriesPoint, format);
 },
 GetOpenValueText: function(seriesPoint, format) {
  return this.GetValueTextByIndex(2, seriesPoint, format);
 },
 GetCloseValueText: function(seriesPoint, format) {
  return this.GetValueTextByIndex(3, seriesPoint, format);
 }
});
ASPxPercentValueToStringConverter = _aspxCreateClass(ASPxValueToStringConverter, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetPercentValueText: function(seriesPoint, format) {
  if (seriesPoint.percentValue == null)
   return format;
  return format == "" || format == null ? seriesPoint.percentValue : ASPxFormatter.Format("{0:" + format + "}", seriesPoint.percentValue)
 }
});
ASPxCrosshairGroupHeaderValueToStringConverter = _aspxCreateClass(ASPxValueToStringConverter, {
 constructor: function(allowArgument, allowValue) {
  this.allowValue = allowValue;
  this.allowArgument = allowArgument;
  this.constructor.prototype.constructor.call(this);
 }
});
ASPxToolTipPatternHelper = {
 ReplacePatternToValue: function(fragment, series, seriesPoint, converter) {
  var preparedFragment = this.PrepareFragment(fragment);
  if (preparedFragment == null)
   return fragment;
  var format = preparedFragment[0];
  var pattern = preparedFragment[1];
  var allowAllPatterns = converter != null ? (converter.allowArgument && converter.allowValue) : true;
  switch (pattern) {
   case _seriesNamePattern:
    return allowAllPatterns ? series.name : fragment;
   case _stackedGroupPattern:
    return series.stackedGroup != null && allowAllPatterns ? series.stackedGroup : fragment;
  }
  if (seriesPoint != null) {
   var result;
   switch (pattern) {
    case _argumentPattern:
     result = converter.allowArgument ? converter.GetArgumentText(seriesPoint, series, format) : fragment;
     break;
    case _valuePattern:
     result = (converter instanceof ASPxValueToStringConverter) && converter.allowValue ? converter.GetValueText(seriesPoint, format) : fragment;
     break;
    case _value1Pattern:
     result = (converter instanceof ASPxRangeValueToStringConverter) && allowAllPatterns ? converter.GetValue1Text(seriesPoint, format) : fragment;
     break;
    case _value2Pattern:
     result = (converter instanceof ASPxRangeValueToStringConverter) && allowAllPatterns ? converter.GetValue2Text(seriesPoint, format) : fragment;
     break;
    case _weightPattern:
     result = (converter instanceof ASPxBubbleValueToStringConverter) && allowAllPatterns ? converter.GetWeightText(seriesPoint, format) : fragment;
     break;
    case _highValuePattern:
     result = (converter instanceof ASPxFinancialValueToStringConverter) && allowAllPatterns ? converter.GetHighValueText(seriesPoint, format) : fragment;
     break;
    case _lowValuePattern:
     result = (converter instanceof ASPxFinancialValueToStringConverter) && allowAllPatterns ? converter.GetLowValueText(seriesPoint, format) : fragment;
     break;
    case _openValuePattern:
     result = (converter instanceof ASPxFinancialValueToStringConverter) && allowAllPatterns ? converter.GetOpenValueText(seriesPoint, format) : fragment;
     break;
    case _closeValuePattern:
     result = (converter instanceof ASPxFinancialValueToStringConverter) && allowAllPatterns ? converter.GetCloseValueText(seriesPoint, format) : fragment;
     break;
    case _percentValuePattern:
     result = (converter instanceof ASPxPercentValueToStringConverter) && allowAllPatterns ? converter.GetPercentValueText(seriesPoint, format) : fragment;
     break;
    case _pointHintPattern:
     result = allowAllPatterns ? converter.GetHintText(seriesPoint) : fragment;
     break;
    default:
     result = fragment;
     break;
   }
   return result;
  }
  else
   return fragment;
 },
 PrepareFragment: function(fragment) {
  var pattern = "";
  var format = "";
  if (!(fragment.charAt(0) == "{" && fragment.charAt(fragment.length - 1) == "}"))
   return null;
  pattern = fragment.substring(1, fragment.length - 1);
  var formatIndex = pattern.indexOf(":");
  if (formatIndex >= 0) {
   format = pattern.substring(formatIndex + 1).replace(/^\s*/, "").replace(/\s*$/, "");
   pattern = pattern.substring(0, formatIndex);
  }
  pattern = pattern.replace(/^\s*/, "").replace(/\s*$/, "").toUpperCase();
  return [format, pattern];
 },
 SplitString: function(splitingString, leftSeparator, rightSeparator) {
  var substrings = [];
  var leftStringIndex = 0;
  var rightStringIndex = 0;
  var currentIndex = 0;
  if (splitingString != null && splitingString != "") {
   for (var i = 0; i < splitingString.length; i++) {
    var charElement = splitingString.charAt(i);
    if (charElement == leftSeparator) {
     leftStringIndex = currentIndex;
    }
    else {
     if (charElement == rightSeparator) {
      rightStringIndex = currentIndex;
      substrings.push(splitingString.substring(leftStringIndex, rightStringIndex + 1));
     }
    }
    currentIndex++;
   }
   return substrings;
  }
  else
   return null;
 },
 GetPointToolTipText: function(seriesPointPattern, seriesPoint, series) {
  return this.GetPointToolTipTextByConverter(seriesPointPattern, seriesPoint, series, this.GetPatternConverter(series));
 },
 GetPointToolTipTextByConverter: function(seriesPointPattern, seriesPoint, series, converter) {
  if (converter == null)
   return "";
  parsedPattern = this.SplitString(seriesPointPattern, "{", "}");
  var result = seriesPointPattern;
  if (parsedPattern != null)
   for (var i = 0; i < parsedPattern.length; i++) {
    var fragment = parsedPattern[i];
    var formattedFragment = this.ReplacePatternToValue(fragment, series, seriesPoint, converter);
    result = result.replace(fragment, formattedFragment);
   }
  return result;
 },
 GetSeriesToolTipText: function(seriesPattern, series) {
  if (seriesPattern == null || seriesPattern == "")
   return "";
  parsedPattern = this.SplitString(seriesPattern, "{", "}");
  var result = seriesPattern;
  if (parsedPattern != null)
   for (var i = 0; i < parsedPattern.length; i++) {
    var fragment = parsedPattern[i];
    result = result.replace(fragment, this.ReplacePatternToValue(fragment, series, null, null));
   }
  return result;
 },
 GetPatternConverter: function(series) {
  var viewType = series.viewType;
  if (viewType == "Pie" || viewType == "Funnel" || viewType == "Doughnut" || viewType == "NestedDoughnut")
   return new ASPxPercentValueToStringConverter();
  if (viewType == "FullStackedArea" || viewType == "FullStackedBar" || viewType == "SideBySideFullStackedBar" || viewType == "FullStackedLine" || viewType == "FullStackedSplineArea")
   return new ASPxPercentValueToStringConverter();
  if (viewType == "CandleStick" || viewType == "Stock")
   return new ASPxFinancialValueToStringConverter();
  if (viewType == "Bubble")
   return new ASPxBubbleValueToStringConverter();
  if (viewType == "RangeArea" || viewType == "RangeBar" || viewType == "SideBySideRangeBar" || viewType == "SideBySideRangeBar" || viewType == "Gantt" || viewType == "SideBySideGantt")
   return new ASPxRangeValueToStringConverter();
  if (viewType.indexOf("3D") >= 0 || viewType.indexOf("Manhattan") >= 0)
   return null;
  return new ASPxValueToStringConverter();
 },
 GetAxisLabelText: function(axis, isValueAxis, value) {
  parsedPattern = this.SplitString(axis.crosshairAxisLabelOptions.pattern, "{", "}");
  if (parsedPattern != null) {
   var result = axis.crosshairAxisLabelOptions.pattern;
   for (var i = 0; i < parsedPattern.length; i++) {
    var fragment = parsedPattern[i];
    var preparedFragment = this.PrepareFragment(fragment);
    if (preparedFragment == null)
     return fragment;
    var format = preparedFragment[0];
    var formattedFragment = fragment;
    var pattern = preparedFragment[1];
    if (pattern == _argumentPattern && !isValueAxis || isValueAxis && pattern == _valuePattern) {
     var isDateTime = axis.scale instanceof ASPxClientDateTimeMap;
     if (isDateTime || axis.scale instanceof ASPxClientNumericalMap) {
      formattedFragment = ASPxFormatter.Format("{0:" + format + "}", [value]);
     }
     else {
      formattedFragment = value;
     }
    }
    result = result.replace(new RegExp(fragment, "g"), formattedFragment);
   }
   return result;
  }
  return value;
 }
};

MVCxClientChart = _aspxCreateClass(ASPxClientWebChartControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.customActionUrl = "";
  this.callbackCustomArgs = {};
  this.customActionCallBack;
 },
 PerformCallback: function(data){
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientWebChartControl.prototype.PerformCallback.call(this, data);
 },
 InlineInitialize: function() {
  if (this.callbackUrl != "")
   this.callBack = function(arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs) };
  if (this.customActionUrl != "")
   this.customActionCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.customActionUrl, arg, null, this.callbackCustomArgs) };;
  ASPxClientWebChartControl.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientWebChartControl.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientWebChartControl.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 CreateCallbackCore: function(arg, command, callbackID){
  if(this.callbackCustomArgs != {})
   window.setTimeout(function(){ this.callbackCustomArgs = {}; }.aspxBind(this), 0);
  ASPxClientWebChartControl.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackMethod: function(command){
  return MVCx.IsCustomCallback(command) ? MVCx.GetCustomActionCallBackMethod(this) : this.callBack;
 },
 EvalCallbackResult: function(resultString) {
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if (resultStringParts.length == 2) {
   var resultObj = ASPxClientWebChartControl.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.html = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientWebChartControl.prototype.EvalCallbackResult.call(this, resultString);
 }
});

ASPxControlResizeManager = {
 GetControlCollection: function() {
  if(!_aspxIsExists(this.controls)) {
   this.controls = new Array();
   _aspxAttachEventToElement(window, "resize", new Function("ASPxControlResizeManager.OnWindowResizing();"));
   this.resizeTimerId = window.setTimeout("ASPxControlResizeManager.CheckResize();", 1000);
   }
  return this.controls;
 },
 Add: function(control) {
  if(!_aspxIsExists(control.GetCurrentSize))
   return;
  control.lastCheckedSize = control.GetCurrentSize();
  this.GetControlCollection().push(control);
 },
 Remove: function(control) {
  _aspxArrayRemove(this.GetControlCollection(), control);
 },
 Clear: function() {
  this.controls = null;
  window.clearTimeout(this.resizeTimerId);
 },
 CheckResize: function() {
  window.clearTimeout(this.resizeTimerId);
  var collection = this.GetControlCollection();
  var count = collection.length;
  var hasLiveElements = false;
  for(var i = count - 1; i >= 0; i--) {
   var control = collection[i];
   var size = control.GetCurrentSize();
   if(size == null || (control.GetMainElement && !control.GetMainElement())) {
    this.Remove(control);
    continue;
   }
   var lastCheckedSize = control.lastCheckedSize;
   if(lastCheckedSize[0] != size[0]) {
    control.lastCheckedSize = size;
    control.OnWindowResized();
   }
   control.OnSizeChecked();
   hasLiveElements = true;
  }
  if(hasLiveElements)
   this.resizeTimerId = window.setTimeout("ASPxControlResizeManager.CheckResize();", 1000);
  else
   this.Clear();
 },
 OnWindowResizing: function() {
  window.clearTimeout(this.resizeTimerId);
  this.resizeTimerId = window.setTimeout("ASPxControlResizeManager.CheckResize();", 250);
 }
};
ASPxSchedulerFormType = _aspxCreateClass(null, { 
});
ASPxSchedulerFormType.None = "None",
ASPxSchedulerFormType.Appointment = "Appointment",
ASPxSchedulerFormType.AppointmentInplace = "AppointmentInplace", 
ASPxSchedulerFormType.GotoDate = "GotoDate";
ASPxSchedulerFormVisibility = _aspxCreateClass(null, {
});
ASPxSchedulerFormVisibility.None = "None",
ASPxSchedulerFormVisibility.PopupWindow = "PopupWindow",
ASPxSchedulerFormVisibility.FillControlArea = "FillControlArea";
ASPxClientRecurrenceRange = _aspxCreateClass(null, {
});
ASPxClientRecurrenceRange.NoEndDate = "NoEndDate";
ASPxClientRecurrenceRange.OccurrenceCount = "OccurrenceCount";
ASPxClientRecurrenceRange.EndByDate = "EndByDate";
ASPxClientRecurrenceType = _aspxCreateClass(null, {
});
ASPxClientRecurrenceType.Daily = "Daily";
ASPxClientRecurrenceType.Weekly = "Weekly";
ASPxClientRecurrenceType.Monthly = "Monthly";
ASPxClientRecurrenceType.Yearly = "Yearly";
ASPxClientRecurrenceType.Hourly = "Hourly";
ASPxClientWeekDays = _aspxCreateClass(null, {
});
ASPxClientWeekDays.Sunday = 1;
ASPxClientWeekDays.Monday = 2;
ASPxClientWeekDays.Tuesday = 4;
ASPxClientWeekDays.Wednesday = 8;
ASPxClientWeekDays.Thursday = 16;
ASPxClientWeekDays.Friday = 32;
ASPxClientWeekDays.Saturday = 64;
ASPxClientWeekDays.WeekendDays = ASPxClientWeekDays.Sunday | ASPxClientWeekDays.Saturday;
ASPxClientWeekDays.WorkDays = ASPxClientWeekDays.Monday | ASPxClientWeekDays.Tuesday | ASPxClientWeekDays.Wednesday | ASPxClientWeekDays.Thursday | ASPxClientWeekDays.Friday;
ASPxClientWeekDays.EveryDay = ASPxClientWeekDays.WeekendDays | ASPxClientWeekDays.WorkDays;
ASPxClientWeekOfMonth = _aspxCreateClass(null, {
});
ASPxClientWeekOfMonth.None = 0;
ASPxClientWeekOfMonth.First = 1;
ASPxClientWeekOfMonth.Second = 2;
ASPxClientWeekOfMonth.Third = 3;
ASPxClientWeekOfMonth.Fourth = 4;
ASPxClientWeekOfMonth.Last = 5;
ASPxSchedulerDateTimeHelper = _aspxCreateClass(null, {
});
ASPxSchedulerDateTimeHelper.DaySpan = 24 * 60 * 60 * 1000; 
ASPxSchedulerDateTimeHelper.TruncToDate = function(dateTime) {
 return new Date(dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate()); 
}
ASPxSchedulerDateTimeHelper.ToDayTime = function(dateTime) {
 return dateTime.valueOf() - ASPxSchedulerDateTimeHelper.TruncToDate(dateTime).valueOf();
}
ASPxSchedulerUtils = _aspxCreateClass(null, { 
});
ASPxSchedulerUtils.IsAppointmentResourcesEmpty = function(appointmentResources) {
 if(appointmentResources.length == 0)
  return true;
 if(appointmentResources.length == 1 && appointmentResources[0] == "null") 
  return true;
 else
  return false;
}
ASPxClientSchedulerRelatedControlBase = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.schedulerControlId = "";
  this.standalone = true;
 },
 GetMainElement: function () {
  if (!_aspxIsExistsElement(this.mainElement))
   this.mainElement = _aspxGetElementById(this.name + "_mainCell");
  return this.mainElement;
 },
 CreateLoadingDiv: function (parentNode, offsetNode) {
  if (this.standalone)
   return this.constructor.prototype.CreateLoadingDiv.call(this, parentNode, offsetNode);
  return null;
 },
 GetLoadingDiv: function () {
  return _aspxGetElementById(this.schedulerControlId + "_LD");
 }
});
function aspxSchedulerSetRecurrenceControlsVisibility(controlsIds, recurrenceControlContainerId, visibleIndex) {
 var count = controlsIds.length;
 for(var i = 0; i < count; i++) {
  var ctl = _aspxGetElementById(controlsIds[i]);
  if(_aspxIsExistsElement(ctl)) {
   _aspxSetElementDisplay(ctl, visibleIndex == i);
  }
 }
 var container = _aspxGetElementById(recurrenceControlContainerId);
 if (_aspxIsExists(container.rbcControlsSizeCorrected)) {
  if (container.rbcControlsSizeCorrected[visibleIndex])
   return;
 } else {
  container.rbcControlsSizeCorrected = [ ];
 }
 container.rbcControlsSizeCorrected[visibleIndex] = true;
 if (_aspxIsExistsElement(container))
  aspxGetControlCollection().AdjustControls(container);
}
function aspxSchedulerChangeElementVisibility(id){
 var ctl = _aspxGetElementById(id);
 if(_aspxIsExistsElement(ctl))
  _aspxSetElementDisplay(ctl, !_aspxGetElementDisplay(ctl));  
}
function _aspxArrayClone(src) {
 return new Array(src);
}
function _aspxArrayContains(array, element) { 
 return _aspxArrayIndexOf(array, element) >= 0;
}
function _aspxArrayEqual(array1, array2) {
 var count1 = array1.length;
 var count2 = array2.length;
 if(count1 != count2)
  return false;
 for(var i = 0; i < count1; i++)
  if(array1[i] != array2[i])
   return false;
 return true;
}
ASPxSchedulerMeasurer = {
 SetCustomDateHeaderContent: function(headers, dates, headerCaptions, headerToolTips) {
  var count = headers.length;
  if (count <= 0)
   return;
  this.EnsureFormatter();
  this.formatter.SetFormatString("d MMMM yyyy");
  var toolTipHelper = new ASPxSchedulerSimpleToolTipHelper(headerToolTips);
  for (var i = 0; i < count; i++) {
   var header = headers[i];
   var toolTip = toolTipHelper.GetToolTip(i, this.formatter.Format(dates[i]));
   header.setAttribute("title", toolTip);
   header.innerHTML = headerCaptions[i];
  }
 },
 SetCustomDayOfWeekHeaderContent: function(headers, days, headerCaptions, headerToolTips) {
  var count = headers.length;
  if (count <= 0)
   return;
  this.EnsureFormatter();
  this.formatter.SetFormatString("d MMMM yyyy");
  var toolTipHelper = new ASPxSchedulerSimpleToolTipHelper(headerToolTips);
  for (var i = 0; i < count; i++) {
   var header = headers[i];
   var toolTip = toolTipHelper.GetToolTip(i, this.GetDayName(days[i]));
   header.setAttribute("title", toolTip);
   header.innerHTML = headerCaptions[i];
  }
 },
 SetOptimalDayNumberHeaderContent: function(headers, dates, formats, headerToolTips) {
  var count = headers.length;
  if (count <= 0)
   return;
  this.EnsureFormatter();
  var toolTipHelper = new ASPxSchedulerSimpleToolTipHelper(headerToolTips);
  this.formatter.SetFormatString("d MMMM yyyy");
  for(var i=0; i < count; i++) {
   var header = headers[i];
   var toolTip = toolTipHelper.GetToolTip(i, this.formatter.Format(dates[i]));
   header.setAttribute("title", toolTip);
   header.innerHTML = dates[i].getDate();
  }
 },
 SetOptimalDayOfWeekHeadersContent: function(headers, days, headerToolTips) {
  if (headers.length <= 0)
   return;
  if (count <= 0)
   return;
  var toolTipHelper = new ASPxSchedulerSimpleToolTipHelper(headerToolTips);
  this.EnsureFormatter();
  var measureDiv = this.CreateMeasureDiv(headers[0]);
  var headerTexts = [];
  var headerContentWidths = [];
  var count = headers.length;
  for (var i = 0; i <count; i++) {
   var day = days[i];
   var toolTip = toolTipHelper.GetToolTip(i, this.GetDayName(day));
   this.SetOptimalDayOfWeekHeader(headers[i], day, measureDiv, toolTip);
  }
  _aspxRemoveChildFromParent(document.body, measureDiv);          
 },
 SetOptimalDayOfWeekHeader: function(header, day, measureDiv, toolTip) {
  var fullDayName = this.GetDayName(day);
  measureDiv.innerHTML = fullDayName;
  var width = measureDiv.clientWidth;
  var desiredWidth = header.clientWidth;
  if (width <= desiredWidth)
   header.innerHTML = fullDayName;
  else
   header.innerHTML = this.GetAbbrDayName(day);
  header.setAttribute("title", toolTip);
 },
 GetDayName: function(day) {
  var dayNames = __aspxCultureInfo.dayNames;
  return (day == 8) ? dayNames[6] + "/" + dayNames[0] : dayNames[day];
 },
 GetAbbrDayName: function(day) {
  var dayNames = __aspxCultureInfo.abbrDayNames;
  return (day == 8) ? dayNames[6] + "/" + dayNames[0] : dayNames[day];
 },
 SetOptimalHeadersContent: function(headers, dates, formats, headerToolTips) {
  if (headers.length <= 0)
   return;
  this.EnsureFormatter();
  var measureDiv = this.CreateMeasureDiv(headers[0]);
  var headerTexts = [];
  var headerContentWidths = [];
  this.InitializeHeadersIntermediateInfo(headers, headerTexts, headerContentWidths);
  var count = formats.length;
  for (var i = 0; i < count; i++) { 
   this.formatter.SetFormatString(formats[i]);
   this.SetOptimalHeadersContentCore(headers, dates, headerTexts, headerContentWidths, measureDiv);
  }
  this.SetNewHeadersContent(headers, headerTexts, dates, headerToolTips);
  _aspxRemoveChildFromParent(document.body, measureDiv);
 },
 InitializeHeadersIntermediateInfo: function(headers, headerTexts, headerContentWidths) {
  var count = headers.length;
  for (var i = 0; i < count; i++) {
   headerTexts.push("&hellip;");
   headerContentWidths.push(-1);
  }
 },
 SetNewHeadersContent: function(headers, headerTexts, dates, headerToolTips) {
  var toolTipHelper = new ASPxSchedulerSimpleToolTipHelper(headerToolTips);
  var count = headers.length;
  this.formatter.SetFormatString("d MMMM yyyy");
  for (var i = 0; i < count; i++) {
   var header = headers[i];
   var toolTip = toolTipHelper.GetToolTip(i, this.formatter.Format(dates[i]));
   header.setAttribute("title", toolTip);
   header.innerHTML = headerTexts[i];
  }
 },
 SetOptimalHeadersContentCore: function(headers, dates, headerTexts, headerContentWidths, measureDiv) {
  var count = headers.length;
  for (var i = count - 1; i >= 0; i--) {
   var text = this.formatter.Format(dates[i]);
   measureDiv.innerHTML = text;
   var width = measureDiv.clientWidth;
   var desiredWidth = headers[i].clientWidth;
   if (width <= desiredWidth && headerContentWidths[i] == -1) {
     headerContentWidths[i] = width;
     headerTexts[i] = text;
   }
  }
 },
 CreateMeasureDiv: function(element) {
  var result = document.createElement("div");   
  document.body.appendChild(result);
  result.style.cssText = element.style.cssText;
  result.style.position = "absolute";
  result.style.top = "-100px";
  result.style.width = "";
  result.className = element.className;
  return result;
 },
 EnsureFormatter: function() {
  if (!_aspxIsExists(this.formatter))
   this.formatter = new ASPxDateFormatter();
 }
}
ASPxSchedulerSimpleToolTipHelper = _aspxCreateClass(null, {
 constructor: function(toolTips) {
  this.toolTips = toolTips;
  this.useToolTipFromServer = _aspxIsExists(toolTips);
 },
 GetToolTip: function(toolTipIndex, defaultToolTip) {
  if (this.useToolTipFromServer)
   return this.toolTips[toolTipIndex];
  return defaultToolTip;
 }
});
function _aspxSetSchedulerDivDisplay(appointmentDiv, visible) {
 appointmentDiv.style.display = visible ? "block" : "none";
}
ASPxSchedulerPropertyApplyController = _aspxCreateClass(null, {
 constructor: function(scheduler) {
  this.scheduler = scheduler;
  this.createPropertyValueHandlers = new Object();
  this.createPropertyValueHandlers["interval"] =  _aspxCreateDelegate(this.CreateIntervalPropertyValue, this);
 },
 CreateIntervalPropertyValue: function(property, value) {
  return new ASPxClientTimeInterval(value.start, value.duration);
 },
 ApplyProperties: function(obj, dictionary) {
  for (var property in dictionary) {
   var propertyValue = dictionary[property];
   var createValueHandler = this.createPropertyValueHandlers[property];
   if (createValueHandler) 
    propertyValue = createValueHandler(property, propertyValue);
   obj[property] = propertyValue;
  }
 } 
});
ASPxClientAppointmentPropertyApplyController = _aspxCreateClass(ASPxSchedulerPropertyApplyController, {
 constructor: function(scheduler) {
  this.constructor.prototype.constructor.call(this, scheduler);
  this.createPropertyValueHandlers["pattern"] = _aspxCreateDelegate(this.CreatePatternPropertyValue, this);
  this.createPropertyValueHandlers["recurrenceInfo"] = _aspxCreateDelegate(this.CreateRecurrenceInfoPropertyValue, this);
 },
 CreatePatternPropertyValue: function(property, value) {
  var pattern = this.scheduler.GetAppointment(value.appointmentId);
  if (pattern == null) 
   pattern = new ASPxClientAppointment();
  var propertyController = new ASPxClientAppointmentPropertyApplyController(this.scheduler);
  propertyController.ApplyProperties(pattern, value);
  this.scheduler.AddAppointmentPattern(pattern);
  return pattern;
 },
 CreateRecurrenceInfoPropertyValue: function(property, value) {
  var recurrenceInfo = new ASPxClientRecurrenceInfo();
  var propertyController = new ASPxClientRecurrenceInfoPropertyApplyController(this.scheduler);
  propertyController.ApplyProperties(recurrenceInfo, value);
  return recurrenceInfo;
 }
});
ASPxClientRecurrenceInfoPropertyApplyController = _aspxCreateClass(ASPxSchedulerPropertyApplyController, {
 constructor: function(scheduler) {
  this.constructor.prototype.constructor.call(this, scheduler);
 }
});
function aspxFindToolTipInParentElements(someItem) {
 function isToolTipSource(element) {
  return _aspxIsExists(element.isToolTip) ? element.isToolTip : false;
 }
 var toolTipSource = _aspxFindParentElement(someItem, isToolTipSource);
 if(_aspxIsExists(toolTipSource)) {
  return toolTipSource;
 }
 return null;
}
function aspxIsElementPartOfToolTip(element) {
 var toolTip = aspxFindToolTipInParentElements(element);
 return toolTip != null;
}
SchedulerElementContainerChangerBase = _aspxCreateClass(null, {
 constructor: function (scheduler) {
  this.scheduler = scheduler;
  this.isActive = false;
 },
 ChangeContainer: function (container, attachEvents) {
  if (!_aspxIsExists(container) || (container == this)) {
   if (this.movedElements) {
    this.RestoreElementContainer();
    this.movedElements = null;
   }
   this.UnsubscribeSchedulerEvents(container, attachEvents);
  }
  else {
   if (this.CanChangeContainer()) {
    if (this.movedElements) {
     this.ChangeElementContainer(container);
    }
    else
     this.movedElements = [];
    this.SubscribeSchedulerEvents(container, attachEvents);
    this.ChangeContainerCore(container);
   }
  }
 },
 CanChangeContainer: function () {
  return true;
 },
 SubscribeSchedulerEvents: function (container, attachEvents) {
  if (!this.changeContainerBeginCallbackHandler && (!_aspxIsExists(attachEvents) || attachEvents)) {
   this.isActive = true;
   this.changeContainerBeginCallbackHandler = function (s) { this.ChangeContainer(this, false); };
   this.scheduler.BeginCallback.AddHandler(_aspxCreateDelegate(this.changeContainerBeginCallbackHandler, this));
   this.changeContainerEndCallbackHandler = function (s) { this.ChangeContainer(container, false); };
   this.scheduler.EndCallback.AddHandler(_aspxCreateDelegate(this.changeContainerEndCallbackHandler, this));
  }
 },
 UnsubscribeSchedulerEvents: function (container, attachEvents) {
  if (this.changeContainerBeginCallbackHandler && (!_aspxIsExists(attachEvents) || attachEvents)) {
   this.isActive = false;
   this.scheduler.BeginCallback.RemoveHandler(this.changeContainerBeginCallbackHandler);
   this.changeContainerBeginCallbackHandler = null;
   this.scheduler.EndCallback.RemoveHandler(this.changeContainerEndCallbackHandler);
   this.changeContainerEndCallbackHandler = null;
  }
 },
 RestoreElementContainer: function () {
 },
 ChangeElementContainer: function (container) {
 },
 ChangeContainerCore: function (container) {
 },
 IsActive: function () {
  return this.isActive;
 }
});
SchedulerMenuContainerChanger = _aspxCreateClass(SchedulerElementContainerChangerBase, {
 constructor: function (scheduler) {
  this.constructor.prototype.constructor.call(this, scheduler);
 },
 CanChangeContainer: function () {
  return _aspxIsExists(aspxGetMenuCollection);
 },
 RestoreElementContainer: function () {
  for (var i = 0; i < this.movedElements.length; i++)
   for (var j = 0; j < this.movedElements[i].length; j++)
    _aspxRestoreElementContainer(this.movedElements[i][j]);
 },
 ChangeElementContainer: function (container) {
  for (var i = 0; i < this.movedElements.length; i++)
   for (var j = 0; j < this.movedElements[i].length; j++)
    _aspxChangeElementContainer(this.movedElements[i][j], container, false);
 },
 ChangeContainerCore: function (container) {
  var movedElements = this.movedElements; 
  aspxGetMenuCollection().ProcessControlsInContainer(this.scheduler.GetMainElement(), function (control) {
   if (control.isPopupMenu) {
    var menuMainElement = control.GetMainElement()
    if (menuMainElement.parentNode.className.indexOf("dxmLite") != -1)
     menuMainElement = menuMainElement.parentNode;
    var menuElements = [menuMainElement];
    var idPrefix = menuElements[0].id;
    var currentElement = menuElements[0].nextSibling;
    while (_aspxIsExists(currentElement)) {
     if (_aspxIsExists(currentElement.tagName) && (currentElement.id.indexOf(idPrefix) == 0)) {
      if (currentElement.tagName == "DIV" || currentElement.tagName == "TABLE")
       menuElements.push(currentElement);
     }
     currentElement = currentElement.nextSibling;
    }
    for (var i = 0; i < menuElements.length; i++)
     _aspxChangeElementContainer(menuElements[i], container, true);
    movedElements.push(menuElements);
   }
  });
 }
});
SchedulerToolTipContainerChanger = _aspxCreateClass(SchedulerElementContainerChangerBase, {
 constructor: function (scheduler) {
  this.constructor.prototype.constructor.call(this, scheduler);
 },
 RestoreElementContainer: function () {
  var count = this.movedElements.length;
  for (var i = 0; i < count; i++)
   _aspxRestoreElementContainer(this.movedElements[i]);
 },
 ChangeElementContainer: function (container) {
  var count = this.movedElements.length;
  for (var i = 0; i < count; i++)
   _aspxChangeElementContainer(this.movedElements[i], container, false);
 },
 ChangeContainerCore: function (container) {
  var toolTips = [this.scheduler.GetAppointmentDragTooltip(), this.scheduler.GetSelectionToolTip(), this.scheduler.GetAppointmentToolTip()];
  for (var i in toolTips) {
   var toolTip = toolTips[i];
   if (!toolTip)
    continue;
   var toolTipDiv = toolTip.GetMainDiv();
   this.movedElements.push(toolTipDiv);
   _aspxChangeElementContainer(toolTipDiv, container, true);
   toolTip.UpdateMainDiv();
  }
 }
});
SchedulerFormContainerChanger = _aspxCreateClass(SchedulerElementContainerChangerBase, {
 constructor: function (scheduler) {
  this.constructor.prototype.constructor.call(this, scheduler);
 },
 RestoreElementContainer: function () {
  var count = this.movedElements.length;
  for (var i = 0; i < count; i++)
   _aspxRestoreElementContainer(this.movedElements[i]);
 },
 ChangeElementContainer: function (container) {
  var count = this.movedElements.length;
  for (var i = 0; i < count; i++)
   _aspxChangeElementContainer(this.movedElements[i], container, false);
 },
 ChangeContainerCore: function (container) {
  var formBlockDiv = _aspxGetElementById(this.scheduler.GetBlockElementId("formBlock", "innerContent"));
  if (!formBlockDiv)
   return;
  this.movedElements.push(formBlockDiv);
  _aspxChangeElementContainer(formBlockDiv, container, true);
  this.scheduler.ProcessShowFormPopupWindowDeferred();
 }
});
SchedulerFuncCallback = _aspxCreateClass(null, {
 constructor: function (callbackName, args, handler) {
  this.callbackName = callbackName;
  this.args = args;
  this.handler = handler;
 },
 Raise: function (scheduler) {
  scheduler.RaiseFuncCallbackCore(this.callbackName, this.args, this.handler);
 }
})
ASPxSchedulerBlockPropertiesInfo = _aspxCreateClass(null, {
 constructor: function (blockId, params) {
  this.blockId = blockId;
  this.params = params;
 }
});
ASPxTimeRuler = _aspxCreateClass(null, {
 constructor: function (info) {
  this.cellLocation = info.p;
  this.isVisible = info.v;
 },
 GetAnchorCell: function (scheduler) {
  if (!this.timeRulerAnchorCell) {
   var rowIndex = this.cellLocation[0];
   var cellIndex = this.cellLocation[1];
   this.timeRulerAnchorCell = scheduler.vertTable.rows[rowIndex].cells[cellIndex]
  }
  return this.timeRulerAnchorCell;
 },
 IsVisible: function () {
  return this.isVisible;
 }
});
ASPxSchedulerBrowserHelper = _aspxCreateClass(null, {});
ASPxSchedulerBrowserHelper.IsIE9CompatibilityView = function () {
 if (!__aspxIE)
  return false;
 var userAgent = navigator.userAgent;
 return userAgent.indexOf("Trident/5.0") > -1 && userAgent.indexOf("MSIE 7.0") > -1;
}
ASPxSchedulerLoadImageChecker = _aspxCreateClass(null, {
 constructor: function (scheduler) {
  this.scheduler = scheduler;
  this.roots = [];
  this.imageCount = 0;
  this.disabled = true;
 },
 Reset: function () {
  if (this.disabled)
   return;
  this.roots = [];
  this.imageCount = 0;
 },
 Add: function (root) {
  if (this.disabled || this.root == null)
   return;
  var images = _aspxGetElementsByTagName(root, "img");
  var count = images.length;
  for (var i = 0; i < count; i++) {
   var image = images[i];
   if (this.IsImageLoaded(image))
    break;
   this.SubscribeEvent(image);
  }
 },
 SubscribeEvent: function (image) {
  this.imageCount++;
  _aspxAttachEventToElement(image, "load", _aspxCreateDelegate(this.OnLoad, this));
  _aspxAttachEventToElement(image, "error", _aspxCreateDelegate(this.OnLoad, this));
 },
 IsImageLoaded: function (image) {
  if (image.src == "")
   return false;
  return image.complete;
 },
 OnLoad: function () {
  this.imageCount--;
  if (this.imageCount == 0)
   this.RaiseRefreshLayout();
 },
 RaiseRefreshLayout: function () {
  this.Reset();
  this.scheduler.RecalcLayout();
 }
});
ASPxSchedulerTimer = _aspxCreateClass(null, {
 constructor: function (time, callback) {
  this.time = time;
  this.callback = callback;
  this.isDeferred = false;
  this.defferedCallbackOccurred = false
 },
 Start: function () {
  if (!this.time)
   return;
  this.startTime = new Date();
  this.timerId = _aspxSetTimeout(_aspxCreateDelegate(this.OnCallback, this), this.time);
 },
 Pause: function () {
  if (!this.time)
   return;
  _aspxClearTimer(this.timerId);
  this.timerId = null;
  this.time = this.time - (new Date().valueOf() - this.startTime.valueOf());
  if (this.time <= 0)
   this.time = null;
 },
 BeginDeferredAlert: function () {
  this.isDeferred = true;
 },
 EndDeferredAlert: function () {
  if (this.isDeferred && this.defferedCallbackOccurred)
   this.callback();
  else
   this.defferedCallbackOccurred = false;
  this.isDeferred = false;
 },
 OnCallback: function () {
  if (!this.time || !this.callback)
   return;  
  if (this.isDeferred) 
   this.defferedCallbackOccurred = true;
  else
   this.callback();
 }
});
SchedulerMenuItemId = _aspxCreateClass(null, {
});
SchedulerMenuItemId.Custom = "Custom";
SchedulerMenuItemId.OpenAppointment = "OpenAppointment";
SchedulerMenuItemId.PrintAppointment = "PrintAppointment";
SchedulerMenuItemId.DeleteAppointment = "DeleteAppointment";
SchedulerMenuItemId.EditSeries = "EditSeries";
SchedulerMenuItemId.NewAppointment = "NewAppointment";
SchedulerMenuItemId.NewAllDayEvent = "NewAllDayEvent";
SchedulerMenuItemId.NewRecurringAppointment = "NewRecurringAppointment";
SchedulerMenuItemId.NewRecurringEvent = "NewRecurringEvent";
SchedulerMenuItemId.GotoThisDay = "GotoThisDay";
SchedulerMenuItemId.GotoToday = "GotoToday";
SchedulerMenuItemId.GotoDate = "GotoDate";
SchedulerMenuItemId.OtherSettings = "OtherSettings";
SchedulerMenuItemId.CustomizeCurrentView = "CustomizeCurrentView";
SchedulerMenuItemId.CustomizeTimeRuler = "CustomizeTimeRuler";
SchedulerMenuItemId.AppointmentDragMove = "AppointmentDragMove";
SchedulerMenuItemId.AppointmentDragCopy = "AppointmentDragCopy";
SchedulerMenuItemId.AppointmentDragCancel = "AppointmentDragCancel";
SchedulerMenuItemId.StatusSubMenu = "StatusSubMenu";
SchedulerMenuItemId.LabelSubMenu = "LabelSubMenu";
SchedulerMenuItemId.RulerMenu = "RulerMenu";
SchedulerMenuItemId.AppointmentMenu = "AppointmentMenu";
SchedulerMenuItemId.DefaultMenu = "DefaultMenu";
SchedulerMenuItemId.AppointmentDragMenu = "AppointmentDragMenu";
SchedulerMenuItemId.RestoreOccurrence = "RestoreOccurrence";
SchedulerMenuItemId.SwitchViewMenu = "SwitchViewMenu";
SchedulerMenuItemId.SwitchToDayView = "SwitchToDayView";
SchedulerMenuItemId.SwitchToWorkWeekView = "SwitchToWorkWeekView";
SchedulerMenuItemId.SwitchToWeekView = "SwitchToWeekView";
SchedulerMenuItemId.SwitchToMonthView = "SwitchToMonthView";
SchedulerMenuItemId.SwitchToTimelineView = "SwitchToTimelineView";
SchedulerMenuItemId.TimeScaleEnable = "TimeScaleEnable";
SchedulerMenuItemId.TimeScaleVisible = "TimeScaleVisible";
AppointmentPropertyNames = _aspxCreateClass(null, {});
AppointmentPropertyNames.Normal = "Description;Subject;Start;AllDay;StatusId;LabelId;Location";
AppointmentPropertyNames.Pattern = "Description;Subject;Start;AllDay;StatusId;LabelId;Location;Pattern";
ASPxClientAutoHeightMode = _aspxCreateClass(null, {});
ASPxClientAutoHeightMode.None = "None";
ASPxClientAutoHeightMode.FitToContent = "FitToContent";
ASPxClientAutoHeightMode.LimitHeight = "LimitHeight";
ASPxRelativeCoordinatesCalculatorBase = _aspxCreateClass(null, {
 constructor: function (parentElement) {
  this.parentElement = parentElement;
  this.calculatedElements = new Array();
  this.innerParentElement = this.GetInnerParentElement();
  this.CreateLayers();
  this.SetInnerParentElementPosition();
 },
 GetInnerParentElement: function () {
  return this.parentElement;
 },
 SetInnerParentElementPosition: function () {
 },
 CreateLayers: function () {
  this.selectionLayer = this.CreateLayer();
  this.selectionLayer.id = "selectionLayer"
  this.appointmentLayer = this.CreateLayer();
  this.appointmentLayer.id = "appointmentLayer";
  this.navButtonLayer = this.CreateLayer();
  this.navButtonLayer.id = "navButtonLayer";
  this.moreButtonLayer = this.CreateLayer();
  this.moreButtonLayer.id = "moreButtonLayer";
  this.timeMarkerLayer = this.CreateLayer();
  this.timeMarkerLayer.id = "timeMarkerLayer";
 },
 CreateLayer: function () {
  var result = document.createElement('DIV');
  if (!(__aspxIE && (__aspxBrowserMajorVersion <= 6 || ASPxSchedulerBrowserHelper.IsIE9CompatibilityView())))
   result.style.height = "0";
  result.style.fontSize = "0";
  var emptyContent = document.createElement('DIV');
  emptyContent.style.position = "absolute";
  emptyContent.style.height = "0";
  result.appendChild(emptyContent);
  this.innerParentElement.appendChild(result);
  return result;
 },
 RemoveLayers: function (keepPrevAppointments) {
  _aspxRemoveChildFromParent(this.innerParentElement, this.selectionLayer);
  if (keepPrevAppointments)
   this.innerParentElement.removeChild(this.appointmentLayer);
  else
   _aspxRemoveChildFromParent(this.innerParentElement, this.appointmentLayer);
  _aspxRemoveChildFromParent(this.innerParentElement, this.navButtonLayer);
  _aspxRemoveChildFromParent(this.innerParentElement, this.moreButtonLayer);
  _aspxRemoveChildFromParent(this.innerParentElement, this.timeMarkerLayer);
 },
 CalcRelativeElementLeft: function (element) {
  if (!_aspxIsExists(element.absoluteCellLeft)) {
   element.absoluteCellLeft = Math.round(_aspxGetAbsoluteX(element)) - _aspxGetAbsoluteX(this.innerParentElement);
   this.AddToCalculatedElements(element);
  }
  return element.absoluteCellLeft;
 },
 CalcRelativeElementRight: function (element) {
  if (!_aspxIsExists(element.absoluteCellRight)) {
   element.absoluteCellRight = this.CalcRelativeElementLeft(element) + element.offsetWidth;
   this.AddToCalculatedElements(element);
  }
  return element.absoluteCellRight;
 },
 CalcRelativeElementTop: function (element) {
  if (!_aspxIsExists(element.absoluteCellTop)) {
   element.absoluteCellTop = _aspxGetAbsoluteY(element) - _aspxGetAbsoluteY(this.innerParentElement);
   this.AddToCalculatedElements(element);
  }
  return element.absoluteCellTop;
 },
 CalcRelativeElementBottom: function (element) {
  if (!_aspxIsExists(element.absoluteCellBottom)) {
   element.absoluteCellBottom = this.CalcRelativeElementTop(element) + element.offsetHeight; ;
   this.AddToCalculatedElements(element);
  }
  return element.absoluteCellBottom;
 },
 CalcRelativeContainerBounds: function (viewInfo, container) {
  if (!_aspxIsExists(container.isCalculated) || !container.isCalculated) {
   var firstCell = viewInfo.GetCell(container.containerIndex, 0);
   var lastCell = viewInfo.GetCell(container.containerIndex, container.cellCount - 1);
   var left = this.CalcRelativeElementLeft(firstCell);
   var dxtop = this.CalcRelativeElementTop(firstCell);
   var right = this.CalcRelativeElementRight(lastCell);
   var bottom = this.CalcRelativeElementBottom(lastCell);
   var bounds = new Object();
   bounds.left = left;
   bounds.top = dxtop;
   bounds.width = right - left;
   bounds.height = bottom - dxtop;
   container.bounds = bounds;
   this.AddToCalculatedElements(container);
  }
  return container.bounds;
 },
 AddToCalculatedElements: function (element) {
  if (!_aspxIsExists(element.isCalculated) || !element.isCalculated) {
   element.isCalculated = true;
   this.calculatedElements.push(element);
  }
 },
 ResetCache: function () {
  var count = this.calculatedElements.length;
  for (var i = 0; i < count; i++) {
   var element = this.calculatedElements[i];
   if (!_aspxIsExists(element.bounds)) {
    element.isCalculated = false;
    element.absoluteCellLeft = null;
    element.absoluteCellRight = null;
    element.absoluteCellTop = null;
    element.absoluteCellBottom = null;
   }
   else {
    element.isCalculated = false;
   }
  }
 },
 Clear: function () {
  var count = this.calculatedElements.length;
  for (var i = 0; i < count; i++) {
   var element = this.calculatedElements[i];
   if (!_aspxIsExists(element.bounds)) {
    element.isCalculated = false;
    element.absoluteCellLeft = null;
    element.absoluteCellRight = null;
    element.absoluteCellTop = null;
    element.absoluteCellBottom = null;
   }
   else {
    element.isCalculated = false;
   }
   if (_aspxIsExists(element.hasMoreButton))
    element.hasMoreButton = false;
  }
  this.ClearMoreButtonLayer();
  this.SetInnerParentElementPosition();
  _aspxArrayClear(this.calculatedElements);
 },
 ClearMoreButtonLayer: function () {
  this.moreButtonLayer.innerHTML = "<div style='position:absolute;height:0'></div>";
 },
 AppendChildToLayer: function (child, layer) {
  layer.appendChild(child);
 },
 AppendChildToNavButtonLayer: function (child, layer) {
  if (!_aspxIsExists(layer))
   layer = this.navButtonLayer;
  if (child.parentNode != layer)
   layer.appendChild(child);
 },
 AppendChildToAppointmentLayer: function (child) {
  this.appointmentLayer.appendChild(child);
 },
 PrepareAppointmentLayer: function (count) {
  if (count > 0)
   this.appointmentLayer.innerHTML = "";
 },
 AppendChildToMoreButtonLayer: function (child) {
  this.moreButtonLayer.appendChild(child);
 },
 AfterCalculateAppointments: function (appointmentCalculator) {
 },
 CalcCellHeight: function (cell) {
  return cell.offsetHeight;
 }
});
ASPxRelativeCoordinatesCalculator = _aspxCreateClass(ASPxRelativeCoordinatesCalculatorBase, {
 constructor: function (parentElement) {
  this.constructor.prototype.constructor.call(this, parentElement);
 }
});
ASPxSchedulerHitTestResult = _aspxCreateClass(null, {
 constructor: function (cell, selectionDiv, appointmentDiv, resizeDiv) {
  this.cell = cell;
  this.selectionDiv = selectionDiv;
  this.appointmentDiv = appointmentDiv;
  this.resizeDiv = resizeDiv;
 }
});
ASPxRelativeCoordinatesCalculatorWithScrolling = _aspxCreateClass(ASPxRelativeCoordinatesCalculatorBase, {
 constructor: function (parentElement, viewInfo, scrollableContainer) {
  this.viewInfo = viewInfo;
  this.scrollableContainer = scrollableContainer;
  this.constructor.prototype.constructor.call(this, parentElement);
  this.bottomAppointmentIndent = 2;
 },
 GetInnerParentElement: function () {
  return this.scrollableContainer;
 },
 SetInnerParentElementPosition: function () {
  var containerCount = this.viewInfo.cellContainers.length;
  var cellCount = this.viewInfo.cellContainers[containerCount - 1].cellCount;
  var startCell = this.viewInfo.GetCell(0, 0);
  var endCell = this.viewInfo.GetCell(containerCount - 1, cellCount - 1);
  if (!_aspxIsExists(startCell) || !_aspxIsExists(endCell))
   return;
  var parentLeft = _aspxGetAbsoluteX(startCell) - _aspxGetAbsoluteX(this.parentElement);
  var parentRight = _aspxGetAbsoluteX(endCell) - _aspxGetAbsoluteX(this.parentElement) + endCell.offsetWidth;
  var parentTop = _aspxGetAbsoluteY(startCell) - _aspxGetAbsoluteY(this.parentElement);
  var parentBottom = _aspxGetAbsoluteY(endCell) - _aspxGetAbsoluteY(this.parentElement) + endCell.offsetHeight;
  this.innerParentElement.style.left = parentLeft + "px";
  this.innerParentElement.style.top = parentTop + "px";
  this.innerParentElement.style.width = parentRight - parentLeft + "px";
  this.innerParentElement.style.height = parentBottom - parentTop + "px";
  if (!__aspxOpera) {
   var scrollWidth = this.innerParentElement.offsetWidth - this.innerParentElement.clientWidth;
   this.innerParentElement.style.width = this.innerParentElement.offsetWidth + scrollWidth + "px";
  }
 },
 CalcCellHeight: function (cell) {
  return this.innerParentElement.scrollHeight;
 },
 AfterCalculateAppointments: function (appointmentCalculator) {
  var startCell = this.viewInfo.GetCell(0, 0);
  if (_aspxIsExists(this.viewInfo.scheduler.privateAllDayAreaHeight))
   this.innerParentElement.style.height = this.viewInfo.scheduler.privateAllDayAreaHeight;
  else
   if (_aspxIsExists(appointmentCalculator.maxBottom) && appointmentCalculator.maxBottom > 0) {
    this.innerParentElement.style.height = "";
    startCell.style.height = "";
    var correctionHeight = 0;
    if (__aspxFirefox || (__aspxIE && __aspxBrowserMajorVersion > 6))
     correctionHeight = 1;
    var newHeight = Math.max(correctionHeight + appointmentCalculator.maxBottom + this.bottomAppointmentIndent, startCell.offsetHeight);
    this.innerParentElement.style.height = newHeight + "px";
   }
  if (_aspxIsExists(startCell)) {
   var borderHeight = startCell.offsetHeight - startCell.clientHeight;
   if (Math.abs(startCell.offsetHeight - this.scrollableContainer.offsetHeight) > 1) {
    startCell.style.height = this.scrollableContainer.offsetHeight - borderHeight + "px";
   }
  }
  if (__aspxOpera) {
   var scrollWidth = this.innerParentElement.offsetWidth - this.innerParentElement.clientWidth;
   this.innerParentElement.style.width = this.innerParentElement.offsetWidth + scrollWidth + "px";
  }
 }
});
ASPxClientScheduler = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.deferredFuncCallbackList = [];
  this.schedulerIsInitialized = false; 
  this.schedulerAfterInitializedCalled = false; 
  this.cellIdRegExp = /DXCnt(([hv])(\d+))_(\d+)/;
  this.ActiveViewChanging = new ASPxClientEvent();
  this.ActiveViewChanged = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.SelectionChanging = new ASPxClientEvent();
  this.VisibleIntervalChanged = new ASPxClientEvent();
  this.MoreButtonClicked = new ASPxClientEvent();
  this.AppointmentsSelectionChanged = new ASPxClientEvent();
  this.MenuItemClicked = new ASPxClientEvent();
  this.AppointmentDrop = new ASPxClientEvent();
  this.AppointmentResize = new ASPxClientEvent();
  this.AppointmentClick = new ASPxClientEvent();
  this.AppointmentDoubleClick = new ASPxClientEvent();
  this.MouseUp = new ASPxClientEvent();
  this.AppointmentDeleting = new ASPxClientEvent();
  this.isInsideBeginInit = false;
  this.isReadyForCallbacks = false;
  this.changedBlocks = null;
  this.isCallbackMode = true;
  this.supportGestures = true;
  this.menuManager = new ASPxSchedulerMenuManager(this);
  this.activeFormType = ASPxSchedulerFormType.None;
  this.aptFormVisibility = ASPxSchedulerFormVisibility.None;
  this.gotoDateFormVisibility = ASPxSchedulerFormVisibility.None;
  this.recurrentAppointmentDeleteFormVisibility = ASPxSchedulerFormVisibility.None;
  this.privateAllowAppointmentMultiSelect = true;
  this.privateShowAllAppointmentsOnTimeCells = false;
  this.contextMenuHandlers = [];
  this.prevCallbackResults = new Object();
  this.funcCallbacks = new Array();
  this.funcCallbackCount = 0;
  this.visibleIntervals = new Array();
  this.topRowTimeManager = new ASPxTopRowTimeManager(this);
  this.leftColumnPadding = 0;
  this.rightColumnPadding = 2;
  this.appointmentVerticalInterspacing = 2;
  this.propertyController = new ASPxClientAppointmentPropertyApplyController(this);
  this.menuContainerChanger = new SchedulerMenuContainerChanger(this);
  this.toolTipContainerChanger = new SchedulerToolTipContainerChanger(this);
  this.formContainerChanger = new SchedulerFormContainerChanger(this);
  this.defaultAutoHeightCellMinimum = 5; 
  this.restoreBlockInfoCollection = new Array();
  this.loadImageChecker = new ASPxSchedulerLoadImageChecker(this);
  this.loadImageChecker.disabled = !__aspxChrome;
 },
 _constDXAppointment: function () { return "_AptDiv"; },
 _constDXSchedulerContentCell: function () { return "DXCnt"; },
 _constDXSelectionDiv: function () { return "selectionDiv"; },
 _constDXAppointmentAdorner: function () { return "aptAdornerDiv"; },
 _constEmptyResource: function () { return "null"; },
 Initialize: function () {
  this.constructor.prototype.Initialize.call(this);
  this.EndInit();
 },
 BeginInit: function () {
  this.TimeMarkerBeginUpdate();
  this.reminderTimer = null;
  if (_aspxIsExists(this.onCallback))
   this.onCallback();
  this.isInsideBeginInit = true;
  ASPxControlResizeManager.Remove(this);
  this.syncColumnCount = -1;
  this.syncMasterRowIndex = -1;
  this.appointmentSelection = new ASPxAppointmentSelection(this);
  this.appointmentSelection.BeginUpdate();
  this.selection = null;
  this.navButtonAnchors = new Array();
  this.ClearNavigationButtons();
  this.appointments = new Object();
  this.nonpermanentAppointments = new Object();
  this.timelineHeaderLevels = new Array();
  this.privateAllDayAreaHeight = null;
  this.privateShowMoreButtonsOnEachColumn = false;
  this.privateDisableSnapToCells = false;
  this.RecreateViewInfo();
  this.privateRaiseActiveViewTypeChanged = false;
  this.privateRaiseVisibleIntervalChanged = false;
  this.leftColumnPadding = 0
  this.rightColumnPadding = 2;
  this.appointmentVerticalInterspacing = 2;
  this.showTimeMarker = true;
  this.ResetTimeRulers();
  this.cellAutoHeightMode = ASPxClientAutoHeightMode.None;
  this.cellAutoHeightConstrant = [0, 0];
  this.RestoreBlockProperties();
 },
 RecreateViewInfo: function () {
  var usePrevContainer = this.changedBlocks && !this.changedBlocks.ContainerBlockChanged;
  var usePrevNavButtons = this.changedBlocks && !this.changedBlocks.NavButtonsBlockChanged;
  if (!usePrevNavButtons)
   this.navButtonsCache = new Object();
  if (usePrevContainer) {
   var keepPrevAppointment = this.changedBlocks && !this.changedBlocks.AppointmentsBlockChanged;
   this.horizontalViewInfo.parent.RemoveLayers(keepPrevAppointment);
   this.verticalViewInfo.parent.RemoveLayers(keepPrevAppointment);
   this.ResetCellsAbsolutePosition();
  }
  if (this.horizontalViewInfo)
   this.horizontalViewInfo.Dispose();
  if (this.verticalViewInfo)
   this.verticalViewInfo.Dispose();
  this.horizontalViewInfo = new ASPxClientHorizontalSchedulerViewInfo(this, this.horizontalViewInfo, usePrevContainer);
  this.verticalViewInfo = new ASPxClientVerticalSchedulerViewInfo(this, this.verticalViewInfo, usePrevContainer);
 },
 EndInit: function () {
  this.loadImageChecker.Reset();
  var topRowTimeState = this.topRowTimeManager.GetTopRowTimeState(this.privateActiveViewType); 
  this.SubscribeEvents();
  this.isInsideBeginInit = false;
  this.resourceNavigatorRow = this.GetChild("_resourceNavigatorRow");
  this.commonControlsBlock = _aspxGetElementById(this.name + "_commonControlsBlock_innerContent");
  this.innerContentElement = _aspxGetElementById(this.name + "_containerBlock_content");
  this.containerTable = _aspxGetElementById(this.name + "_containerBlock_containerTable");
  this.containerCell = _aspxGetElementById(this.name + "_containerBlock_innerContent");
  this.selectionDiv = _aspxGetElementById(this.name + "_commonControlsBlock_selectionDiv");
  this.topResizeDiv = _aspxGetElementById(this.name + "_commonControlsBlock_topResizeControlDiv");
  this.bottomResizeDiv = _aspxGetElementById(this.name + "_commonControlsBlock_bottomResizeControlDiv");
  this.leftResizeDiv = _aspxGetElementById(this.name + "_commonControlsBlock_leftResizeControlDiv");
  this.rightResizeDiv = _aspxGetElementById(this.name + "_commonControlsBlock_rightResizeControlDiv");
  this.aptAdorner = _aspxGetElementById(this.name + "_commonControlsBlock_aptAdornerDiv");
  this.timeMarkerImage = _aspxGetElementById(this.name + "_containerBlock_timeMarkerImg");
  this.timeMarkerLine = _aspxGetElementById(this.name + "_containerBlock_timeMarkerDiv");
  this.mainDiv = _aspxGetElementById(this.name);
  this.ObtainCellTables();
  this.AddClearSelectionEvent();  
  this.PrepareSchedulerViewInfos();
  this.appointmentSelection.Prepare();
  if (_aspxIsExists(this.innerContentElement)) {
   this.RecalcLayout();
   this.ShowCellSelection();
   this.topRowTimeManager.SetTopRowTimeState(topRowTimeState, this.privateActiveViewType); 
   ASPxControlResizeManager.Add(this);
   this.EnableResize();
  }
  this.appointmentSelection.EndUpdate();
  this.HideLoadingElements();
  this.RaiseClientEvents();
  this.formPopupIdDeferred = null;
  this.isReadyForCallbacks = true;
  this.StartReminderTimer();
  this.EnableToolTips();
  this.SetTimeMarkerTimer();
  this.TimeMarkerEndUpdate();
  this.InitScrolling();
  this.schedulerIsInitialized = true; 
  this.loadImageChecker.Add(this.innerContentElement);
 },
 InitScrolling: function () {
  if (__aspxWebKitTouchUI) {
   var scrollContainer = this.GetContainerElementById("verticalScrollContainer");
   if (scrollContainer)
    ASPxClientTouchUI.MakeScrollable(scrollContainer, { showHorizontalScrollbar: false });
  }
 },
 AdjustControlCore: function () {
  if (!this.schedulerIsInitialized)
   return;
  this.ResetVerticalResourceHeadersCache();
  var topRowTimeState = this.topRowTimeManager.GetTopRowTimeState(this.privateActiveViewType); 
  this.topRowTimeManager.SetTopRowTimeState(topRowTimeState, this.privateActiveViewType); 
  if (this.schedulerAfterInitializedCalled)
   this.RecalcLayout();
 },
 AfterInitialize: function () {
  this.constructor.prototype.AfterInitialize.call(this);
  this.schedulerAfterInitializedCalled = true;
 },
 AssignSlideAnimationDirectionByDate: function (newDate) {
  this.slideAnimationDirection = this.IsCallbackAnimationEnabled() ? ((this.visibleIntervals[0].start < newDate) ? ASPxAnimationHelper.SLIDE_LEFT_DIRECTION : ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION) : null;
 },
 RestoreBlockProperties: function () {
  for (var i = 0; i < this.restoreBlockInfoCollection.length; i++) {
   var blockInfo = this.restoreBlockInfoCollection[i];
   this.PrepareBlockProperties(blockInfo.blockId, blockInfo.params, false);
  }
  _aspxArrayClear(this.restoreBlockInfoCollection);
 },
 PrepareBlockProperties: function (clientId, params, needRestoreParams) {
  needRestoreParams = _aspxGetDefinedValue(needRestoreParams, true); 
  var block = _aspxGetElementById(clientId + "_innerContent");
  if (!block)
   return;
  for (var propertyPath in params) {
   var oldValue = this.SetPropertyPath(block, propertyPath, params[propertyPath]);
   if (oldValue)
    params[propertyPath] = oldValue;
  }
  if (needRestoreParams)
   this.restoreBlockInfoCollection.push(new ASPxSchedulerBlockPropertiesInfo(clientId, params));
 },
 SetPropertyPath: function (target, propertyPath, value) {
  var propertyPathParts = propertyPath.split('.');
  var partCount = propertyPathParts.length;
  if (partCount < 1)
   return;
  var popertyTarget = target;
  for (var i = 0; i < partCount - 1; i++) {
   var pathPart = propertyPathParts[i]
   popertyTarget = popertyTarget[pathPart];
  }
  var propertyName = propertyPathParts[partCount - 1];
  var oldValue = popertyTarget[propertyName];
  popertyTarget[propertyName] = value;
  return oldValue;
 },
 ConvertToSchedulerUTCDates: function (datesInMs) {
  var dates = new Array();
  for (var i = 0; i < datesInMs.length; i++) {
   var date = new ASPxSchedulerUTCDate(datesInMs[i]);
   dates.push(date);
  }
  return dates;
 },
 AddClearSelectionEvent: function () {
  if (__aspxChrome) {
   var mainElement = this.GetMainElement();
   if (mainElement && !mainElement.onselectstart)
    mainElement.onselectstart = function () { return false; }
  }
 },
 SetTopRowTimeField: function (dayViewStateString, workWeekViewStateString) {
  this.topRowTimeManager.SetTopRowTimeField(dayViewStateString, workWeekViewStateString);
 },
 SetVisibleInterval: function (transferVisibleInterval) {
  _aspxArrayClear(this.visibleIntervals);
  var count = transferVisibleInterval.length;
  var propertyApplyController = new ASPxSchedulerPropertyApplyController(this);
  var result = new Array();
  for (var i = 0; i < count; i++) {
   var transerInterval = transferVisibleInterval[i];
   var interval = propertyApplyController.CreateIntervalPropertyValue(null, transerInterval);
   this.visibleIntervals.push(interval);
  }
 },
 SetReminders: function (delay) {
  this.reminderTimer = new ASPxSchedulerTimer(delay, _aspxCreateDelegate(this.ReminderAlerted, this)); ;
 },
 StartReminderTimer: function () {
  if (!this.reminderTimer)
   return;
  this.reminderTimer.Start();
 },
 StopReminderTimer: function () {
  if (!this.reminderTimer)
   return;
  this.reminderTimer.Pause();
 },
 DisableReminderTimer: function () {
  if (!this.reminderTimer)
   return;
  this.reminderTimer.BeginDeferredAlert();
 },
 EnableReminderTimer: function () {
  if (!this.reminderTimer)
   return;
  this.reminderTimer.EndDeferredAlert();
 },
 ReminderAlerted: function () {
  this.menuManager.HideMenu();
  return this.RaiseCallback("PROCESSREMINDER|");
 },
 AddContextMenuEvent: function (elementId, handlerFunc) {
  this.contextMenuHandlers.push([elementId, handlerFunc]);
 },
 SubscribeEvents: function () {
  var count = this.contextMenuHandlers.length;
  for (var i = 0; i < count; i++) {
   var current = this.contextMenuHandlers[i];
   var element = _aspxGetElementById(current[0]);
   if (_aspxIsExists(element)) {
    element.oncontextmenu = new Function("event", current[1]);
   }
  }
  if (!this.mouseDownDocumentHandler) { 
   this.mouseDownDocumentHandler = _aspxCreateDelegate(this.OnMouseDownDocument, this);
   _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownDocumentHandler);
  }
 },
 UnsubscribeEvents: function () {
 },
 OnMouseDownDocument: function (evt) {
  var evt = _aspxGetEvent(evt);
  if (this.activeToolTip != null) {
   var element = _aspxGetEventSource(evt);
   if (!aspxIsElementPartOfToolTip(element)) {
    this.HideAllToolTips();
   }
  }
  var popupDiv = this.GetActivePopupDiv();
  if (popupDiv) {
   if (!this.IsOverActivePopup(evt)) {
    this.HidePopupDiv(popupDiv);
   }
  }
 },
 CanHandleGesture: function (evt) {
  var source = _aspxGetEventSource(evt);
  if (_aspxGetParentByPartialId(source, "navBtnDiv") || _aspxGetParentByPartialId(source, "MoreButton")) return false;
  if (_aspxGetIsParent(this.containerCell, source) && (!this.horizontalParent || !_aspxGetIsParent(this.horizontalParent.appointmentLayer, source)) &&
   (!this.verticalParent || !_aspxGetIsParent(this.verticalParent.appointmentLayer, source))) {
   var verticalScrollContainer = this.GetContainerElementById("verticalScrollContainer");
   var verticalContainer = this.GetContainerElementById("verticalContainer");
   return (verticalScrollContainer == null) || !_aspxGetIsParent(verticalScrollContainer, source) || _aspxGetIsParent(verticalContainer, source);
  }
  return false;
 },
 AllowExecuteGesture: function (value) {
  return true;
 },
 ExecuteGesture: function (value) {
  this.slideAnimationDirection = value > 0 ? ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION : ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
  this.RaiseCallback(value > 0 ? "BACK|" : "FORWARD|");
 },
 IsOverActivePopup: function (evt) {
  return ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, _aspxCreateDelegate(this.TestOverActivePopupDiv, this)) != null;
 },
 TestOverActivePopupDiv: function (element) {
  if (element === this.GetActivePopupDiv())
   return true;
  return false;
 },
 ShowPopupDiv: function (div) {
  this.activePopupDiv = div;
  _aspxSetElementDisplay(div, true);
 },
 HidePopupDiv: function (div) {
  this.activePopupDiv = null;
  _aspxSetElementDisplay(div, false);
 },
 GetActivePopupDiv: function () {
  return this.activePopupDiv;
 },
 RaiseClientEvents: function () {
  if (_aspxIsExists(this.RaiseActiveViewChanged) && this.privateRaiseActiveViewTypeChanged)
   this.RaiseActiveViewChanged();
  if (_aspxIsExists(this.RaiseVisibleIntervalChanged) && this.privateRaiseVisibleIntervalChanged)
   this.RaiseVisibleIntervalChanged();
  if (this.deferredRaiseSelectionChanged) {
   this.deferredRaiseSelectionChanged = false;
   this.RaiseSelectionChanged();
  }
 },
 GetCurrentSize: function () {
  if (this.mainDiv && this.mainDiv.parentNode)
   return [this.innerContentElement.clientWidth, this.innerContentElement.clientHeight];
  else
   return null;
 },
 PrivateSetActiveViewType: function (newViewType) {
  var activeViewType = this.GetActiveViewType();
  if (activeViewType == newViewType)
   return;
  this.privateActiveViewType = newViewType;
  this.privateRaiseActiveViewTypeChanged = true;
 },
 PrivateSetAllDayAreaHeight: function (height) {
  this.privateAllDayAreaHeight = height;
 },
 PrivateSetGroupType: function (newGroupType) {
  this.privateGroupType = newGroupType;
  this.privateActualGroupType = newGroupType;
 },
 PrivateSetActualGroupType: function (newActualGroupType) {
  this.privateActualGroupType = newActualGroupType;
 },
 PrivateSetAppointmentHeight: function (height) {
  this.privateAppointmentHeight = parseInt(height);
 },
 GetActualGroupType: function () {
  return this.privateActualGroupType;
 },
 BeginAppointmentResizeAtLeft: function (appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv;
  if (_aspxIsExists(appointmentDiv))
   new ASPxResizeHelper(this, appointmentDiv, aspxAppointmentResizeLeft);
 },
 BeginAppointmentResizeAtRight: function (appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv;
  if (_aspxIsExists(appointmentDiv))
   new ASPxResizeHelper(this, appointmentDiv, aspxAppointmentResizeRight);
 },
 BeginAppointmentResizeAtTop: function (appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv;
  if (_aspxIsExists(appointmentDiv))
   new ASPxResizeHelper(this, appointmentDiv, aspxAppointmentResizeTop);
 },
 BeginAppointmentResizeAtBottom: function (appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv;
  if (_aspxIsExists(appointmentDiv))
   new ASPxResizeHelper(this, appointmentDiv, aspxAppointmentResizeBottom);
 },
 ObtainCellTables: function () {
  this.horzTable = this.GetContainerElementById("horzContainerTable");
  if (!_aspxIsExists(this.horzTable))
   this.horzTable = this.GetContainerElementById("content");
  this.vertTable = this.GetContainerElementById("vertTable");
  if (!_aspxIsExists(this.vertTable))
   this.vertTable = this.GetContainerElementById("content");
 },
 GetIsDayBasedView: function () {
  return this.privateActiveViewType == ASPxSchedulerViewType.Day || this.privateActiveViewType == ASPxSchedulerViewType.WorkWeek;
 },
 PrepareSchedulerViewInfos: function () {
  this.horizontalViewInfo.Initialize(this.horzTable);
  this.verticalViewInfo.Initialize(this.vertTable);
  var horizontalContainer = this.GetContainerElementById("horizontalContainer");
  var dayBasedView = this.GetIsDayBasedView();
  if (!_aspxIsExists(horizontalContainer))
   this.horizontalParent = new ASPxRelativeCoordinatesCalculator(this.containerCell);
  else {
   var scrollableContainer = this.GetContainerElementById("scrollableContainer");
   if (_aspxIsExists(scrollableContainer))
    this.horizontalParent = new ASPxRelativeCoordinatesCalculatorWithScrolling(horizontalContainer, this.horizontalViewInfo, scrollableContainer);
   else
    this.horizontalParent = new ASPxRelativeCoordinatesCalculator(horizontalContainer);
  }
  this.horizontalViewInfo.Prepare(this.horizontalParent);
  var verticalContainer = this.GetContainerElementById("verticalContainer");
  if (!_aspxIsExists(verticalContainer))
   this.verticalParent = new ASPxRelativeCoordinatesCalculator(this.containerCell);
  else
   this.verticalParent = new ASPxRelativeCoordinatesCalculator(verticalContainer);
  this.verticalViewInfo.Prepare(this.verticalParent);
 },
 EnableResize: function () {
  this.processResize = true;
 },
 DisableResize: function () {
  this.processResize = false;
 },
 IsResizeEnabled: function () {
  return _aspxIsExists(this.processResize) && this.processResize;
 },
 OnWindowResized: function () {
  if (this.isInsideBeginInit || !this.IsResizeEnabled())
   return;
  this.DisableResize();
  this.ResetCellsAbsolutePosition();
  this.RecalcLayout();
  this.ShowCellSelection();
  this.AlignNavigationButtons();
  this.appointmentSelection.RecalcSelection();
  this.EnableResize();
  this.ProcessShowFormPopupWindowDeferred(); 
 },
 OnSizeChecked: function () {
 },
 ResetCellsAbsolutePosition: function () {
  this.verticalViewInfo.parent.Clear();
  this.horizontalViewInfo.parent.Clear();
 },
 FormatHeadersContentOptimally: function () {
  this.FormatHeadersContentOptimallyCore(this.datesForFormatsWithoutYearToolTips, this.datesForFormatsWithoutYearLocations, this.datesForFormatsWithoutYear, this.formatsWithoutYear, ASPxSchedulerMeasurer.SetOptimalHeadersContent);
  this.FormatHeadersContentOptimallyCore(this.datesForFormatsWithoutYearAndWeekDayToolTips, this.datesForFormatsWithoutYearAndWeekDayLocations, this.datesForFormatsWithoutYearAndWeekDay, this.formatsWithoutYearAndWeekDay, ASPxSchedulerMeasurer.SetOptimalHeadersContent);
  this.FormatHeadersContentOptimallyCore(this.datesForFormatsNewYearLocationsToolTips, this.datesForFormatsNewYearLocations, this.datesForFormatsNewYear, this.formatsNewYear, ASPxSchedulerMeasurer.SetOptimalHeadersContent);
  this.FormatHeadersContentOptimallyCore(this.daysForDayOfWeekFormatsLocationsToolTips, this.daysForDayOfWeekFormatsLocations, this.daysForDayOfWeekFormats, null, ASPxSchedulerMeasurer.SetOptimalDayOfWeekHeadersContent);
  this.FormatHeadersContentOptimallyCore(this.datesForDayNumberFormatToolTips, this.datesForDayNumberFormatLocations, this.datesForDayNumberFormat, null, ASPxSchedulerMeasurer.SetOptimalDayNumberHeaderContent);
  this.FormatHeadersContentOptimallyCore(this.datesForDateCustomFormatToolTips, this.datesForDateCustomFormatLocations, this.datesForDateCustomFormat, this.datesForDateCustomFormatCaptions, ASPxSchedulerMeasurer.SetCustomDateHeaderContent);
  this.FormatHeadersContentOptimallyCore(this.datesForDayOfWeekCustomFormatToolTips, this.datesForDayOfWeekCustomFormatLocations, this.datesForDayOfWeekCustomFormat, this.datesForDayOfWeekCustomFormatCaptions, ASPxSchedulerMeasurer.SetCustomDayOfWeekHeaderContent);
 },
 ClearDatesForFormats: function () {
  delete this.datesForFormatsWithoutYearLocations;
  delete this.datesForFormatsWithoutYearAndWeekDayLocations;
  delete this.datesForFormatsNewYearLocations;
  delete this.daysForDayOfWeekFormatsLocations;
  delete this.datesForDayNumberFormatLocations;
  delete this.datesForDateCustomFormatLocations;
  delete this.datesForDayOfWeekCustomFormatLocations;
 },
 FormatHeadersContentOptimallyCore: function (headerToolTips, headerLocations, dates, formats, delegate) {
  if (_aspxIsExists(headerLocations)) {
   var headers = this.GetHeadersByLocation(headerLocations);
   if (headers.length > 0 && _aspxIsExists(dates))
    delegate.call(ASPxSchedulerMeasurer, headers, dates, formats, headerToolTips);
  }
 },
 GetHeadersByLocation: function (locations) {
  var count = locations.length;
  var headers = [];
  for (var i = 0; i < count; i++) {
   var location = locations[i];
   var rowIndex = location[0];
   var cellIndex = location[1];
   var header = this.horzTable.rows[rowIndex].cells[cellIndex];
   headers.push(header);
  }
  return headers;
 },
 ClearNavigationButtons: function () {
  if (_aspxIsExists(this.navButtons)) {
   var count = this.navButtons.length;
   for (var i = 0; i < count; i++)
    this.ClearNavigationButton(this.navButtons[i]);
  }
  this.navButtons = new Array();
 },
 ClearNavigationButton: function (navBtn) {
  var navBtnDiv = this.GetNavButtonElementById(navBtn.divId);
  if (!_aspxIsExists(navBtnDiv) || !_aspxIsExists(navBtnDiv.parentNode))
   return;
  _aspxRemoveElement(navBtnDiv)
 },
 AlignNavigationButtons: function () {
  var count = this.navButtons.length;
  for (var i = 0; i < count; i++)
   this.AlignNavigationButton(this.navButtons[i]);
 },
 AlignNavigationButton: function (navBtn) {
  var div = this.GetNavButtonElementById(navBtn.divId);
  if (!_aspxIsExists(div))
   return;
  var leftTopAnchor = this.navButtonAnchors[navBtn.resourceId + "_Left"];
  var rightBottomAnchor = this.navButtonAnchors[navBtn.resourceId + "_Right"];
  if (!_aspxIsExists(leftTopAnchor) || !_aspxIsExists(rightBottomAnchor))
   return;
  var leftTopAnchorCell = this.vertTable.rows[leftTopAnchor[0]].cells[leftTopAnchor[1]]; 
  var rightBottomAnchorCell = this.vertTable.rows[rightBottomAnchor[0]].cells[rightBottomAnchor[1]]; ; 
  if (!_aspxIsExists(leftTopAnchorCell) || !_aspxIsExists(rightBottomAnchorCell))
   return;
  var dxtop;
  var bottom;
  var parent;
  var verticalContainer = this.GetContainerElementById("verticalContainer");
  var navButtonLayer = null;
  var navButtonParent = this.containerCell;
  if (_aspxIsExists(verticalContainer)) {
   navButtonLayer = verticalContainer.parentNode.parentNode;
   parent = this.verticalParent;
   dxtop = _aspxGetAbsoluteY(navButtonLayer) - _aspxGetAbsoluteY(navButtonParent);
   bottom = dxtop + navButtonLayer.offsetHeight;
  }
  else {
   parent = this.horizontalParent;
   dxtop = parent.CalcRelativeElementTop(leftTopAnchorCell);
   bottom = parent.CalcRelativeElementBottom(rightBottomAnchorCell);
  }
  parent.AppendChildToNavButtonLayer(div, navButtonLayer); 
  var left = parent.CalcRelativeElementLeft(leftTopAnchorCell) + 2;
  if (navBtn.anchorType == "Left")
   div.style.left = left + "px";
  else {
   var right = parent.CalcRelativeElementRight(rightBottomAnchorCell) - 2;
   div.style.left = right - div.offsetWidth + "px";
  }
  div.style.top = (dxtop + bottom - div.offsetHeight) / 2 + "px";
  div.style.zIndex = "11";
  _aspxSetElementDisplay(div, true);
 },
 PrepareVerticalContainerTable: function () {
  if (__aspxIE && __aspxBrowserVersion >= 9)
   this.RefreshVerticalTable();
 },
 RecalcLayout: function () {
  this.PrepareVerticalContainerTable();
  this.HideAppointments();
  if (_aspxIsExists(document.recalc))
   document.recalc(true);
  this.SyncDayViewHeadersWithColumns();
  this.FormatHeadersContentOptimally();
  this.horizontalViewInfo.parent.Clear();
  if (this.HasVerticalResourceHeaderColumn()) {
   this.LayoutVerticalResourceHeaderColumn();
  }
  var timeLineHeaderCalculator = new ASPxClientTimelineHeaderLayoutCalculator(this);
  timeLineHeaderCalculator.CalculateLayout(this.timelineHeaderLevels);
  if (this.cellAutoHeightMode != ASPxClientAutoHeightMode.None)
   this.RecalculateCellAutoHeightConstaint();
  var schedulerWidth = this.GetMainElement().clientWidth;
  var headerHeight = this.CalculateDayHeaderHeight();
  this.LayoutAppointments();
  if (headerHeight != this.CalculateDayHeaderHeight()) {
   this.ResetCellsAbsolutePosition();
   this.LayoutAppointments();
  }
  if (this.cellAutoHeightMode != ASPxClientAutoHeightMode.None && schedulerWidth != this.GetMainElement().clientWidth) {
   timeLineHeaderCalculator = new ASPxClientTimelineHeaderLayoutCalculator(this);
   timeLineHeaderCalculator.CalculateLayout(this.timelineHeaderLevels);
   this.LayoutAppointments();
  }
  this.AlignNavigationButtons();
  this.RecalcTimeMarker();
  this.RefreshSchedulerLayout();
 },
 CalculateDayHeaderHeight: function () {
  if (!this.datesForFormatsWithoutYearLocations)
   return 0;
  var headers = this.GetHeadersByLocation(this.datesForFormatsWithoutYearLocations);
  if (headers && headers.length <= 0)
   return 0;
  return headers[0].clientHeight;
 },
 RecalculateCellAutoHeightConstaint: function () {
  var minCellHeight = this.cellAutoHeightConstrant[0];
  var maxCellHeight = this.cellAutoHeightConstrant[1];
  var fitToContent = this.cellAutoHeightMode == ASPxClientAutoHeightMode.FitToContent;
  if (minCellHeight < this.defaultAutoHeightCellMinimum)
   minCellHeight = this.defaultAutoHeightCellMinimum
  if (this.cellAutoHeightMode == ASPxClientAutoHeightMode.LimitHeight) {
   if (maxCellHeight <= 0)
    fitToContent = true;
   else if (maxCellHeight < this.defaultAutoHeightCellMinimum)
    maxCellHeight = this.defaultAutoHeightCellMinimum;
  }
  var containerCount = this.horizontalViewInfo.cellContainers.length;
  for (var i = 0; i < containerCount; i++) {
   var container = this.horizontalViewInfo.cellContainers[i];
   container.cellConstraint = [];
   var headerCell = this.horizontalViewInfo.GetMiddleCompressedCellsHeader(i); 
   var headerHeight = (headerCell) ? headerCell.clientHeight : 0;
   for (var j = 0; j < container.cellCount; j++) {
    var minSize = (container.GetCellLocation(j).isCompressed) ? (minCellHeight - headerHeight) / 2 : minCellHeight
    if (minSize < 0)
     minSize = minCellHeight;
    var maxSize = 0;
    if (!fitToContent)
     maxSize = (container.GetCellLocation(j).isCompressed) ? (maxCellHeight - headerHeight) / 2 : maxCellHeight
    var constraint = { minHeight: minSize, maxHeight: maxSize };
    container.cellConstraint.push(constraint);
   }
  }
 },
 RefreshSchedulerLayout: function () {
  var oldPadding = this.mainDiv.style.padding;
  this.mainDiv.style.padding = "1px";
  this.mainDiv.style.padding = oldPadding;
  if (__aspxFirefox) {
   var oldBorderCollapse = this.mainDiv.style.borderCollapse;
   this.mainDiv.style.borderCollapse = (oldBorderCollapse == "separate") ? "collapsed" : "separate";
   var some = this.mainDiv.offsetHeight;
   this.mainDiv.style.borderCollapse = oldBorderCollapse;
  }
 },
 RefreshVerticalTable: function () {
  if (!_aspxIsExists(this.vertTable))
   return;
  var viewType = this.GetActiveViewType();
  if (viewType == ASPxSchedulerViewType.Day || viewType == ASPxSchedulerViewType.WorkWeek) {
   var parent = this.vertTable.parentNode;
   parent.removeChild(this.vertTable);
   parent.appendChild(this.vertTable);
  }
 },
 HasVerticalResourceHeaderColumn: function () {
  var activeView = this.GetActiveViewType();
  var activeGroup = this.GetActualGroupType();
  if (activeView == ASPxSchedulerViewType.Timeline && activeGroup != ASPxSchedulerGroupType.None)
   return true;
  if ((activeView == ASPxSchedulerViewType.Week || activeView == ASPxSchedulerViewType.Month) && activeGroup == ASPxSchedulerGroupType.Date)
   return true;
  return false;
 },
 ResetVerticalResourceHeadersCache: function () {
  var table = this.GetContainerElementById("content");
  if (table == null)
   return;
  var cells = table.tBodies[0].rows[0].cells;
  var leftCell = cells[0];
  if (leftCell == null)
   return;
  leftCell.correctedWidth = null;
 },
 LayoutVerticalResourceHeaderColumn: function () {
  var table = this.GetContainerElementById("content");
  var cells = table.tBodies[0].rows[0].cells;
  var leftCell = cells[0];
  var rightCell = cells[cells.length - 1];
  if (table == null || leftCell == null || rightCell == null)
   return;
  if (_aspxIsExists(leftCell.correctedWidth))
   return;
  var userDefinedLeftCellSize = this.GetVerticalResourceHeaderColumnWidthAssignedByUser();
  if (userDefinedLeftCellSize != "") {
   leftCell.style.width = userDefinedLeftCellSize;
   leftCell.correctedWidth = leftCell.style.width;
   return;
  }
  var saveRightCellStyleWidth = rightCell.style.width;
  rightCell.style.width = "100%";
  _aspxChangeTableLayout(table, "auto");
  leftCell.correctedWidth = Math.max(leftCell.offsetWidth, leftCell.clientWidth);
  rightCell.style.width = saveRightCellStyleWidth;
  _aspxChangeTableLayout(table, "fixed");
  _aspxSetTableCellOffsetWidth(leftCell, leftCell.correctedWidth);
 },
 GetVerticalResourceHeaderColumnWidthAssignedByUser: function () {
  if (this.MeasureVRHLocation == null)
   return "";
  var cell = _aspxGetItemByLocation(this.horzTable, this.MeasureVRHLocation);
  return cell.style["width"];
 },
 LayoutAppointments: function () {
  var horizontalCalculator = this.CreateHorizontalAppointmentsCalculator();
  horizontalCalculator.CalculateLayout(this.horizontalViewInfo.appointmentViewInfos);
  this.horizontalViewInfo.parent.AfterCalculateAppointments(horizontalCalculator);
  var verticalCalculator = this.CreateVerticalAppointmentsCalculator();
  verticalCalculator.CalculateLayout(this.verticalViewInfo.appointmentViewInfos);
  this.verticalViewInfo.parent.AfterCalculateAppointments(verticalCalculator);
  if (this.GetIsDayBasedView()) {
   this.verticalViewInfo.ShowMoreButton();
  }
 },
 HideAppointments: function () {
  this.verticalViewInfo.HideAppointments();
 },
 CreateVerticalAppointmentsCalculator: function () {
  return new ASPxClientVerticalAppointmentLayoutCalculator(this.verticalViewInfo, this.verticalParent, this.privateDisableSnapToCells);
 },
 CreateHorizontalAppointmentsCalculator: function () {
  var activeView = this.GetActiveViewType();
  if (activeView == ASPxSchedulerViewType.Day || activeView == ASPxSchedulerViewType.WorkWeek)
   return new ASPxClientHorizontalAppointmentLayoutCalculatorInfinityHeight(this.horizontalViewInfo, this.privateDisableSnapToCells);
  else {
   if (this.cellAutoHeightMode == ASPxClientAutoHeightMode.None)
    return new ASPxClientHorizontalAppointmentLayoutCalculator(this.horizontalViewInfo, this.privateDisableSnapToCells);
   return new ASPxCellsAutoHeightClientHorizontalAppointmentLayoutCalculator(this.horizontalViewInfo, this.privateDisableSnapToCells);
  }
 },
 SyncDayViewHeadersWithColumns: function () {
  if (this.syncColumnCount <= 0) {
   this.HideMasterRow();
   return;
  }
  var masterRow = this.vertTable.rows[this.syncMasterRowIndex];
  var slaveRow = this.horzTable.rows[this.syncSlaveRowIndex];
  masterRow.style.display = "";
  slaveRow.style.display = "";
  this.SetColorForSlaveRow(this.syncColumnCount, slaveRow);
  var scrollbarWidth = this.CalcVerticalScrollbarWidth();
  if (scrollbarWidth >= 0 && slaveRow.cells.length > this.syncColumnCount) { 
   var cell = slaveRow.cells[this.syncColumnCount];
   cell.style.width = scrollbarWidth + "px";
   _aspxRefreshTableCell(slaveRow.cells[this.syncColumnCount]);
  }
  this.HideMasterRow();
 },
 SetColorForSlaveRow: function (syncColumnCount, slaveRow) {
  var style = _aspxGetCurrentStyle(this.GetMainElement());
  if (style == null)
   return;
  var backgroundColor = _aspxGetAttribute(style, "background-color");
  if (!backgroundColor)
   backgroundColor = style.backgroundColor;
  for (var i = syncColumnCount - 1; i >= 0; i--) {
   slaveRow.cells[i].style.borderColor = backgroundColor;
   slaveRow.cells[i].style.backgroundColor = backgroundColor;
   _aspxRefreshTableCell(slaveRow.cells[i]);
  }
 },
 HideMasterRow: function () {
  if (!this.syncMasterRowIndex)
   return;
  if (this.syncMasterRowIndex <= 0)
   return;
  var masterRow = this.vertTable.rows[this.syncMasterRowIndex];
  masterRow.style.display = "none";
 },
 SetSyncCells: function (syncColumnCount, syncMasterRowIndex, syncSlaveRowIndex) {
  this.syncColumnCount = syncColumnCount;
  this.syncMasterRowIndex = syncMasterRowIndex;
  this.syncSlaveRowIndex = syncSlaveRowIndex;
 },
 CalcVerticalScrollbarWidth: function () {
  var vsc = this.GetContainerElementById("verticalScrollContainer");
  if (_aspxIsExists(vsc)) {
   var clientWidth = vsc.clientWidth;
   if (!_aspxIsExists(clientWidth))
    return 0;
   else
    return vsc.offsetWidth - clientWidth;
  }
  else
   return 0;
 },
 CalculateLayout: function () {
  this.RecalcLayout();
  this.EnableResize();
 },
 GetBlockElementId: function (blockId, innerId) {
  return this.name + "_" + blockId + "_" + innerId;
 },
 GetElementById: function (id) {
  return _aspxGetElementById(this.name + "_" + id);
 },
 GetContainerElementById: function (id) {
  return _aspxGetElementById(this.name + "_containerBlock_" + id);
 },
 GetNavButtonElementById: function (id) {
  var div = this.navButtonsCache[id];
  if (!_aspxIsExists(div)) {
   div = _aspxGetElementById(this.name + "_navButtonsBlock_" + id);
   this.navButtonsCache[id] = div;
  }
  return div;
 },
 GetAppointmentBlockElementById: function (id) {
  return _aspxGetElementById(this.name + "_aptsBlock_" + id);
 },
 GetMainTable: function () {
  return this.innerContentElement;
 },
 GetCellInterval: function (cell) {
  var interval = cell.interval;
  if (_aspxIsExists(interval))
   return interval;
  else {
   this.InitializeCell(cell);
   return cell.interval;
  }
 },
 GetCellStartTime: function (cell) {
  return this.GetCellInterval(cell).GetStart();
 },
 GetCellDuration: function (cell) {
  return this.GetCellInterval(cell).GetDuration();
 },
 GetCellEndTime: function (cell) {
  return this.GetCellInterval(cell).GetEnd();
 },
 GetCellResource: function (cell) {
  var resource = cell.resource;
  if (_aspxIsExists(resource))
   return resource;
  else {
   this.InitializeCell(cell);
   return cell.resource;
  }
 },
 CancelFormChangesAndClose: function (visibility, callbackName) {
  if (visibility == ASPxSchedulerFormVisibility.FillControlArea) {
   this.RaiseCallback(callbackName);
  }
  else
   this.ClosePopupForm();
 },
 ClosePopupForm: function () {
  var statusInfoManager = this.statusInfoManager;
  var isInplaceEditorOpen = this.activeFormType == ASPxSchedulerFormType.AppointmentInplace
  if (statusInfoManager && !isInplaceEditorOpen)
   statusInfoManager.Clear();
  this.HideCurrentPopupContainer();
  this.SaveActiveFormTypeState(ASPxSchedulerFormType.None);
  this.EnableReminderTimer();
 },
 SaveActiveFormTypeState: function (formType) {
  this.activeFormType = formType;
  var element = this.GetStateElement("FRMTYPE");
  if (_aspxIsExists(element))
   element.value = formType;
 },
 SaveCurrentPopupContainer: function (popupId) {
  this.HideCurrentPopupContainer();
  this.currentPopupContainer = aspxGetControlCollection().Get(this.name + "_formBlock_" + popupId);
 },
 HideCurrentPopupContainer: function () {
  if (_aspxIsExists(this.currentPopupContainer)) {
   this.currentPopupContainer.CloseUp.ClearHandlers();
   this.currentPopupContainer.Hide();
   var mainElement = this.currentPopupContainer.GetWindowElement(-1);
   this.RemoveFormControls(mainElement);
   _aspxRemoveAttribute(mainElement, "modalElement");
   mainElement.modalElement = null;
   var modalElement = this.currentPopupContainer.FindWindowModalElement(-1);
   if (modalElement != null && _aspxIsExists(modalElement.parentNode)) {
    _aspxRecycleNode(modalElement);
   }
   if (_aspxIsExists(mainElement.parentNode)) {
    _aspxRecycleNode(mainElement);
   }
   this.RemoveNonpermanentAppointments();
   this.currentPopupContainer = null;
  }
 },
 RemoveFormControls: function (mainElement) {
  var controlsToRemove = [];
  aspxGetControlCollection().ProcessControlsInContainer(mainElement, function (control) {
   controlsToRemove.push(control);
  });
  for (var control in controlsToRemove)
   aspxGetControlCollection().Remove(controlsToRemove[control]);
 },
 RemoveNonpermanentAppointments: function () {
  for (var aptId in this.nonpermanentAppointments)
   this.RemoveAppointment(aptId);
 },
 RemoveAppointment: function (aptId) {
  this.RemoveViewInfosByAppointmentId(aptId);
  this.nonpermanentAppointments[aptId] = null;
  this.appointments[aptId] = null;
 },
 ShowFormPopupWindow: function (popupId) {
  if (_aspxIsExists(this.currentPopupContainer)) {
   this.DisableReminderTimer();
   var width = _aspxGetDocumentClientWidth();
   var height = _aspxGetDocumentClientHeight();
   var pcwElement = this.currentPopupContainer.GetWindowElement(-1);
   this.currentPopupContainer.SetWindowDisplay(-1, true);
   var popupWidth = pcwElement.offsetWidth;
   var popupHeight = pcwElement.offsetHeight;
   this.currentPopupContainer.SetWindowDisplay(-1, false);
   var xOffset = _aspxGetDocumentScrollLeft();
   var yOffset = _aspxGetDocumentScrollTop();
   this.currentPopupContainer.ShowAtPos(xOffset + ((width - popupWidth) >> 1), yOffset + ((height - popupHeight) >> 1));
   if (popupWidth == 0 || popupHeight == 0) {
    var popupWidth = pcwElement.offsetWidth;
    var popupHeight = pcwElement.offsetHeight;
    this.currentPopupContainer.ShowAtPos(xOffset + ((width - popupWidth) >> 1), yOffset + ((height - popupHeight) >> 1));
   }
  }
 },
 ShowFormPopupWindowDeferred: function (popupId) {
  this.formPopupIdDeferred = popupId;
  this.formPopupIdDeferredFormType = this.activeFormType;
  this.SaveActiveFormTypeState(ASPxSchedulerFormType.None);
 },
 ProcessShowFormPopupWindowDeferred: function () {
  if (!this.formPopupIdDeferred)
   return;
  this.ShowFormPopupWindow(this.formPopupIdDeferred);
  this.formPopupIdDeferred = null;
  this.SaveActiveFormTypeState(this.formPopupIdDeferredFormType);
 },
 ShowInplacePopupWindow: function (inplaceEditorPopupId, aptId) {
  if (_aspxIsExists(this.currentPopupContainer)) {
   this.DisableReminderTimer();
   var aptViewInfos;
   if (_aspxIsExists(this.verticalViewInfo)) {
    aptViewInfos = this.verticalViewInfo.FindViewInfosByAppointmentId(aptId);
   }
   if (!_aspxIsExists(aptViewInfos) || (aptViewInfos.length <= 0)) {
    if (_aspxIsExists(this.horizontalViewInfo)) {
     aptViewInfos = this.horizontalViewInfo.FindViewInfosByAppointmentId(aptId);
    }
   }
   var count = aptViewInfos.length;
   if (!_aspxIsExists(aptViewInfos) || (count <= 0))
    return;
   var firstVisibleAptViewInfo = null;
   for (var i = 0; i < count; i++) {
    var aptViewInfo = aptViewInfos[i];
    if (_aspxGetElementDisplay(aptViewInfo.contentDiv)) {
     firstVisibleAptViewInfo = aptViewInfo;
     break;
    }
   }
   if (!firstVisibleAptViewInfo)
    return;
   var contentDiv = firstVisibleAptViewInfo.contentDiv;
   if (!_aspxIsExists(contentDiv))
    return;
   this.currentPopupContainer.SetSize(Math.max(200, contentDiv.offsetWidth), 0); 
   var div = this.currentPopupContainer.GetWindowElement(-1);
   if (!firstVisibleAptViewInfo.IsHorizontal()) {
    if (!_aspxIsExists(contentDiv.parentNode))
     return;
    contentDiv.parentNode.appendChild(div);
    this.currentPopupContainer.ShowAtPos(0, 0);
    this.ShowInplacePopupWindowCore(div, firstVisibleAptViewInfo);
   }
   else {
    this.currentPopupContainer.ShowAtPos(_aspxGetAbsoluteX(contentDiv), _aspxGetAbsoluteY(contentDiv));
   }
  }
 },
 ShowInplacePopupWindowCore: function (inplaceEditorElement, appointmentViewInfo) {
  var contentDiv = appointmentViewInfo.contentDiv;
  var divLeft = contentDiv.offsetLeft;
  var divTop = contentDiv.offsetTop;
  if (appointmentViewInfo.IsHorizontal()) {
   this.currentPopupContainer.OnDrag(-1, divLeft, divTop);
   return;
  }
  var scrollContainer = this.GetContainerElementById("verticalScrollContainer");
  if (!_aspxIsExists(scrollContainer)) {
   this.currentPopupContainer.OnDrag(-1, divLeft, divTop);
   return;
  }
  if (inplaceEditorElement.offsetWidth + divLeft > scrollContainer.clientWidth)
   divLeft = scrollContainer.clientWidth - inplaceEditorElement.offsetWidth;
  if (inplaceEditorElement.offsetHeight + divTop > scrollContainer.scrollHeight)
   divTop = scrollContainer.scrollHeight - inplaceEditorElement.offsetHeight;
  this.currentPopupContainer.OnDrag(-1, divLeft, divTop);
  if (inplaceEditorElement.offsetTop < scrollContainer.scrollTop || inplaceEditorElement.offsetHeight > scrollContainer.offsetHeight) {
   scrollContainer.scrollTop = Math.max(inplaceEditorElement.offsetTop, 0);
   this.EnsureInplaceEditorPositionVisible(inplaceEditorElement);
   return;
  }
  var bottom = inplaceEditorElement.offsetTop + inplaceEditorElement.offsetHeight;
  var scrollBottom = scrollContainer.scrollTop + scrollContainer.offsetHeight;
  if (bottom > scrollBottom) {
   var newScrollTop = scrollContainer.scrollTop + bottom - scrollBottom;
   scrollContainer.scrollTop = Math.max(newScrollTop, 0);
   this.EnsureInplaceEditorPositionVisible(inplaceEditorElement);
   return;
  }
  this.EnsureInplaceEditorPositionVisible(inplaceEditorElement);
 },
 EnsureInplaceEditorPositionVisible: function (inplaceEditorElement) {
  var htmlParent = inplaceEditorElement.offsetParent;
  while (_aspxIsExists(htmlParent) && htmlParent.tagName != "HTML")
   htmlParent = htmlParent.parentNode;
  if (!_aspxIsExists(htmlParent))
   return;
  var posY = _aspxGetAbsolutePositionY(inplaceEditorElement);
  if (htmlParent.scrollTop > posY)
   inplaceEditorElement.scrollIntoView(true);
  else
   if (htmlParent.scrollTop + htmlParent.offsetHeight < posY + inplaceEditorElement.offsetHeight)
    inplaceEditorElement.scrollIntoView(false);
 },
 ShowCellSelection: function () {
  if (_aspxIsExists(this.selection)) {
   var dayBasedView = this.GetIsDayBasedView();
   var selectionVisible = this.appointmentSelection.selectedAppointmentIds.length == 0;
   this.horizontalViewInfo.ShowCellSelection(this.selection.interval, this.selection.resource, !dayBasedView, selectionVisible);
   this.verticalViewInfo.ShowCellSelection(this.selection.interval, this.selection.resource, true, selectionVisible);
  }
 },
 OnAppointmentSelectionChanged: function (selectedAppointmentIds) {
  this.SaveAppointmentSelectionState();
  this.ApplyAppointmentSelectionToCellSelection(selectedAppointmentIds);
  this.ShowCellSelection();
  if (_aspxIsExists(this.RaiseAppointmentsSelectionChanged))
   this.RaiseAppointmentsSelectionChanged(selectedAppointmentIds);
 },
 ApplyAppointmentSelectionToCellSelection: function (selectedAppointmentIds) {
  if (selectedAppointmentIds.length < 1)
   return;
  var lastAppointmentIndx = selectedAppointmentIds.length - 1;
  var lastSelectedAppointment = this.GetAppointment(selectedAppointmentIds[lastAppointmentIndx]);
  var start = lastSelectedAppointment.GetStart();
  var duration = lastSelectedAppointment.GetDuration();
  var resourceId = lastSelectedAppointment.GetResource(0);
  this.SetSelection(start, duration, resourceId, start, duration);
 },
 IsOperationSelectionActive: function () {
  return __aspxClientSchedulerSelectionHelper != null;
 },
 SetFormsInitState: function (activeFormType, aptFormVisibility, gotoDateFormVisibility, recurrentAppointmentDeleteFormVisibility) {
  this.activeFormType = activeFormType;
  this.aptFormVisibility = aptFormVisibility;
  this.gotoDateFormVisibility = gotoDateFormVisibility;
  this.recurrentAppointmentDeleteFormVisibility = recurrentAppointmentDeleteFormVisibility;
 },
 SetCanShowDayTimeMarker: function (canShowDayTimeMarker) {
  this.canShowDayTimeMarker = canShowDayTimeMarker;
 },
 SetSelection: function (start, duration, resourceId, firstSelectionStart, firstSelectionDuration) {
  var firstSelectedInterval = new ASPxClientTimeInterval(firstSelectionStart, firstSelectionDuration);
  var selectedInterval = new ASPxClientTimeInterval(start, duration);
  if (!_aspxIsExists(this.selection) ||
   !this.selection.interval.Equals(selectedInterval) ||
   !this.selection.firstSelectedInterval.Equals(firstSelectedInterval) ||
   this.selection.resource != resourceId) {
   this.SetSelectionCore(new ASPxSchedulerSelection(selectedInterval, resourceId, firstSelectedInterval));
   this.OnSelectionChanged(null);
  }
 },
 SetSelectionCore: function (newSelection) {
  this.selection = newSelection;
  this.SaveSelectionState();
  if (!this.isInsideBeginInit && this.isInitialized)
   this.ShowCellSelection();
 },
 SetSelectionInterval: function (newInterval) {
  this.selection.interval = newInterval;
  this.SaveSelectionState();
  this.ShowCellSelection();
 },
 SetSelectedAppointmentIds: function (appointmentIds) {
  this.appointmentSelection.BeginUpdate();
  var count = appointmentIds.length;
  for (var i = 0; i < count; i++)
   this.appointmentSelection.AddAppointmentToSelection(appointmentIds[i]);
  this.appointmentSelection.EndUpdate();
 },
 OnSelectionChanged: function (e) {
  if (this.isInsideBeginInit)
   this.deferredRaiseSelectionChanged = true;
  else
   this.RaiseSelectionChanged();
 },
 GetResourceString: function (resource) {
  return resource != null ? resource : this._constEmptyResource;
 },
 GetStateElement: function (name) {
  return this.GetChild("_stateBlock_" + name);
 },
 SaveSelectionState: function () {
  var resourceString = this.GetResourceString(this.selection.resource);
  var result = this.selection.interval.ToString() + "," +
   this.selection.firstSelectedInterval.ToString() + "," +
   resourceString;
  var element = this.GetStateElement("SEL"); 
  if (_aspxIsExists(element))
   element.value = result;
  this.RaiseSelectionChanging();
 },
 SaveAppointmentSelectionState: function () {
  var selectedAppointmentsIds = this.appointmentSelection.selectedAppointmentIds;
  var count = selectedAppointmentsIds.length;
  var result = "";
  for (var i = 0; i < count; i++)
   result += selectedAppointmentsIds[i] + ",";
  var element = this.GetStateElement("APTSEL");
  if (_aspxIsExists(element))
   element.value = result;
 },
 AddNavigationButton: function (divId, resourceId, anchorType) {
  var btn = new ASPxNavigationButton(divId, resourceId, anchorType);
  this.navButtons.push(btn);
 },
 AddAppointmentPattern: function (pattern) {
  this.appointments[pattern.appointmentId] = pattern;
  for (var appointmentId in this.appointments) {
   var appointment = this.GetAppointment(appointmentId); 
   var aptType = appointment.appointmentType;
   var isRecurring = aptType != ASPxAppointmentType.Normal;
   if (!isRecurring || aptType == ASPxAppointmentType.Pattern)
    continue;
   var splittedId = appointmentId.split('_');
   var patternId = splittedId[0];
   var recurrenceIndex = splittedId[1];
   if (splittedId.length == 2 && patternId == pattern.appointmentId) {
    appointment.SetRecurrencePattern(pattern);
    appointment.RecurrenceIndex = recurrenceIndex;
   }
  }
 },
 AddAppointment: function (aptId, start, duration, resources, flagStr, appointmentType, labelId, statusId, isNonpermanentAppointment, propertyDictionary) {
  this.appointments[aptId] = this.CreateAppointmentFromArgs(aptId, start, duration, resources, flagStr, appointmentType, labelId, statusId, propertyDictionary);
  if (isNonpermanentAppointment == 1) {
   this.nonpermanentAppointments[aptId] = this.appointments[aptId];
  }
 },
 CreateAppointmentFromArgs: function (aptId, start, duration, resources, flagStr, appointmentType, labelId, statusId, propertyDictionary) {
  var flags = new ASPxClientAppointmentFlags();
  flags.allowDelete = flagStr.charAt(0) == "1";
  flags.allowEdit = flagStr.charAt(1) == "1";
  flags.allowResize = flagStr.charAt(2) == "1";
  flags.allowCopy = flagStr.charAt(3) == "1";
  flags.allowDrag = flagStr.charAt(4) == "1";
  flags.allowDragBetweenResources = flagStr.charAt(5) == "1";
  flags.allowInplaceEditor = flagStr.charAt(6) == "1";
  flags.allowConflicts = flagStr.charAt(7) == "1";
  var interval = new ASPxClientTimeInterval(start, duration);
  var apt = new ASPxClientAppointment(interval, resources, flags, aptId, appointmentType, statusId, labelId);
  if (propertyDictionary)
   this.propertyController.ApplyProperties(apt, propertyDictionary);
  return apt;
 },
 InitializeAppointmentDivCache: function () {
  if (this.changedBlocks && !this.changedBlocks.AppointmentsBlockChanged)
   return;
  if (_aspxIsExists(this.appointmentDivCache)) {
   for (var divId in this.appointmentDivCache) {
    var div = this.appointmentDivCache[divId];
    _aspxRemoveElement(div);
   }
  }
  this.appointmentDivCache = new Object();
  var aptsBlock = this.GetAppointmentBlockElementById("innerContent");
  if (_aspxIsExists(aptsBlock)) {
   var children = aptsBlock.childNodes;
   var count = children.length;
   for (var i = 0; i < count; i++) {
    var child = children[i];
    if (_aspxIsExists(child.tagName) && child.tagName.toUpperCase() == "DIV") {
     this.appointmentDivCache[child.id] = child;
    }
   }
  }
 },
 GetAppointmentDivById: function (divId) {
  return this.appointmentDivCache[this.name + "_aptsBlock_" + divId];
 },
 GetAppointmentFlags: function (aptId) {
  return this.GetAppointment(aptId).flags;
 },
 GetAppointment: function (aptId) {
  return this.appointments[aptId];
 },
 GetAppointmentInterval: function (aptId) {
  return this.appointments[aptId].interval;
 },
 GetAppointmentResources: function (aptId) {
  return this.appointments[aptId].resources;
 },
 AddAnchor: function (rowIndex, cellIndex, anchorId) {
  this.navButtonAnchors[anchorId] = [rowIndex, cellIndex];
 },
 AddHorizontalAppointment: function (firstCellIndex, lastCellIndex, startTime, duration, topRelativeIndent, bottomRelativeIndent, divId, appointmentId, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset, hasLeftBorder, hasRightBorder) {
  var result1 = this.cellIdRegExp.exec(firstCellIndex);
  if (!_aspxIsExists(result1) || result1.length == 0)
   return;
  var containerIndex = parseInt(result1[3]);
  var cellIndex1 = parseInt(result1[4]);
  var result2 = this.cellIdRegExp.exec(lastCellIndex);
  if (!_aspxIsExists(result2) || result2.length == 0)
   return;
  var cellIndex2 = parseInt(result2[4]);
  var apt = new ASPxClientHorizontalAppointmentViewInfo(this.horizontalViewInfo, containerIndex, cellIndex1, cellIndex2, startTime, duration, topRelativeIndent, bottomRelativeIndent, divId, appointmentId, hasLeftBorder, hasRightBorder, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset);
  this.horizontalViewInfo.AddViewInfo(apt);
 },
 AddVerticalAppointment: function (firstCellIndex, lastCellIndex, startTime, duration, topRelativeIndent, bottomRelativeIndent, divId, appointmentId, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset, startHorizontalIndex, endHorizontalIndex, maxIndexInGroup, hasTopBorder, hasBottomBorder) {
  var result1 = this.cellIdRegExp.exec(firstCellIndex);
  if (!_aspxIsExists(result1) || result1.length == 0)
   return;
  var containerIndex = parseInt(result1[3]);
  var cellIndex1 = parseInt(result1[4]);
  var result2 = this.cellIdRegExp.exec(lastCellIndex);
  if (!_aspxIsExists(result2) || result2.length == 0)
   return;
  var cellIndex2 = parseInt(result2[4]);
  var viewInfo = new ASPxClientVerticalAppointmentViewInfo(this.verticalViewInfo, containerIndex, cellIndex1, cellIndex2, startTime, duration, divId, startHorizontalIndex, endHorizontalIndex + 1, maxIndexInGroup + 1, topRelativeIndent, bottomRelativeIndent, appointmentId, hasTopBorder, hasBottomBorder, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset);
  this.verticalViewInfo.AddViewInfo(viewInfo);
 },
 AddHorizontalContainer: function (containerIndex, cellCount, containerStartTime, cellsDurations, resource, cellsLocations, middleCompressedCellsHeaderLocation) {
  this.horizontalViewInfo.AddCellContainer(containerIndex, cellCount, containerStartTime, cellsDurations, resource, cellsLocations, middleCompressedCellsHeaderLocation);
 },
 AddVerticalContainer: function (containerIndex, cellCount, containerStartTime, cellsDurations, resource, cellsLocations) {
  this.verticalViewInfo.AddCellContainer(containerIndex, cellCount, containerStartTime, cellsDurations, resource, cellsLocations);
 },
 AddTimelineHeader: function (levelIndex, cellLocation, offset, baseCellLocation) { 
  if (this.timelineHeaderLevels.length == levelIndex)
   this.timelineHeaderLevels[levelIndex] = new ASPxClientTimelineHeaderLevelViewInfo();
  this.timelineHeaderLevels[levelIndex].Add(cellLocation, offset, baseCellLocation);
 },
 RaiseShowInplaceEditorCallback: function () {
  this.RaiseCallback("INPLACESHOW|");
 },
 MainDivMouseClick: function (evt) {
  evt = _aspxGetEvent(evt);
  var hitTestResult = this.CalcHitTest(evt);
  if (_aspxIsExists(hitTestResult.appointmentDiv)) {
   var appointmentViewInfo = hitTestResult.appointmentDiv.appointmentViewInfo;
   var appointmentId = appointmentViewInfo.appointmentId;
   this.RaiseAppointmentClick(appointmentId, evt);
  }
 },
 MainDivMouseDoubleClick: function (evt) {
  if (!this.IsEventSourceInsideFormContainer(evt))
   _aspxClearSelection();
  evt = _aspxGetEvent(evt);
  var hitTestResult = this.CalcHitTest(evt);
  if (_aspxIsExists(hitTestResult.appointmentDiv)) {
   var appointmentViewInfo = hitTestResult.appointmentDiv.appointmentViewInfo;
   var appointmentId = appointmentViewInfo.appointmentId;
   var handled = this.RaiseAppointmentDoubleClick(appointmentId, evt);
   if (handled)
    return;
   var ctrlKeyPressed = _aspxGetCtrlKey(evt);
   if (!ctrlKeyPressed) {
    this.appointmentSelection.SelectSingleAppointment(appointmentId);
    this.OnActivateInplaceEditor(evt);
   }
  }
 },
 IsEventSourceInsideFormContainer: function (evt) {
  if (this.currentPopupContainer == null)
   return false;
  var eventSource = _aspxGetEventSource(evt);
  var formContainer = _aspxFindParentElement(eventSource, _aspxCreateDelegate(this.IsElementInsideFormContainer, this));
  if (formContainer)
   return true;
  return false;
 },
 IsElementInsideFormContainer: function (element) {
  var formBlockId = this.GetBlockElementId("formBlock", "innerContent");
  if (element.id == formBlockId)
   return true;
  return false;
 },
 MainDivMouseUp: function (e) {
  var hitTestResult = this.CalcHitTest(e);
  if (_aspxIsExists(hitTestResult.appointmentDiv)) {
   var appointmentViewInfo = hitTestResult.appointmentDiv.appointmentViewInfo;
   var appointmentId = appointmentViewInfo.appointmentId;
   var appointmentClickHandler = null;
   var ctrlKeyPressed = _aspxGetCtrlKey(e);
   if (!ctrlKeyPressed) {
    if (!this.appointmentSelection.IsAppointmentSelected(appointmentId) || !_aspxGetIsRightButtonPressed(e))
     this.appointmentSelection.SelectSingleAppointment(appointmentId);
   }
  }
  this.RaiseMouseUp();
 },
 MainDivMouseDown: function (e) {
  var hitTestResult = this.CalcHitTest(e);
  if (_aspxIsExists(hitTestResult.appointmentDiv)) {
   var appointmentViewInfo = hitTestResult.appointmentDiv.appointmentViewInfo;
   var appointmentId = appointmentViewInfo.appointmentId;
   var appointmentClickHandler = null;
   var ctrlKeyPressed = _aspxGetCtrlKey(e);
   if (_aspxGetShiftKey(e))
    this.appointmentSelection.AddAppointmentToSelection(appointmentId);
   else {
    if (!ctrlKeyPressed) {
     if (!this.appointmentSelection.IsAppointmentSelected(appointmentId))
      this.appointmentSelection.SelectSingleAppointment(appointmentId);
    }
    else
    {
     if (!this.appointmentSelection.IsAppointmentSelected(appointmentId))
      this.appointmentSelection.AddAppointmentToSelection(appointmentId);
     else {
      if (!_aspxGetIsRightButtonPressed(e))
       appointmentClickHandler = function () { this.appointmentSelection.ChangeAppointmentSelection(appointmentId); };
     }
    }
   }
   if (!_aspxIsExists(hitTestResult.resizeDiv) && _aspxIsExists(hitTestResult.cell))
    new ASPxClientAppointmentDragHelper(this, hitTestResult.appointmentDiv, hitTestResult.cell, e, appointmentClickHandler, this);
   return true;
  }
  if (!_aspxIsExists(hitTestResult.cell))
   return false;
  if (_aspxIsExists(hitTestResult.selectionDiv) && _aspxGetIsRightButtonPressed(e))
   return true;
  if (this.CanSelect(e)) {
   this.appointmentSelection.ClearSelection();
   new ASPxClientSchedulerSelectionHelper(this, hitTestResult.cell, _aspxGetShiftKey(e));
  }
 },
 CanSelect: function (e) {
  var eventSource = _aspxGetEventSource(e);
  if (!_aspxIsExists(eventSource))
   return false;
  var id = eventSource.id;
  return id.indexOf("containerBlock_DXCnt") >= 0 || id.indexOf("commonControlsBlock_selectionDiv") >= 0 || id.indexOf("containerBlock_scrollableContainer") >= 0;
 },
 OnActivateInplaceEditor: function (e) {
  if (this.appointmentSelection.selectedAppointmentIds.length != 1)
   return;
  var hitTestResult = this.CalcHitTest(e);
  var aptDiv = hitTestResult.appointmentDiv;
  if (_aspxIsExists(aptDiv)) {
   var aptFlags = this.GetAppointmentFlags(aptDiv.appointmentId);
   if (aptFlags != null && aptFlags.allowInplaceEditor)
    this.RaiseShowInplaceEditorCallback();
  }
 },
 LookupCellByMousePosition: function (viewInfo, x, y, containerIndex, firstCellIndex, lastCellIndex) {
  var relX = this.CalcMousePositionX(x, viewInfo);
  var relY = this.CalcMousePositionY(y, viewInfo);
  return viewInfo.FindCellByPosition(containerIndex, firstCellIndex, lastCellIndex, relX, relY);
 },
 LookupCellByMousePositionSlow: function (viewInfo, x, y) {
  var x = this.CalcMousePositionX(x, viewInfo);
  var y = this.CalcMousePositionY(y, viewInfo);
  return viewInfo.FindCellByPositionSlow(x, y);
 },
 CalcMousePositionX: function (x, viewInfo) {
  return x - _aspxGetAbsoluteX(viewInfo.parent.innerParentElement);
 },
 CalcMousePositionY: function (y, viewInfo) {
  return y - _aspxGetAbsoluteY(viewInfo.parent.innerParentElement);
 },
 GetCellContainer: function (cell) {
  var container = cell.container;
  if (_aspxIsExists(container))
   return container;
  this.InitializeCell(cell);
  return cell.container;
 },
 CalcHitTest: function (e) {
  var eventSource = _aspxGetEventSource(e);
  if (!_aspxIsExists(eventSource))
   return new HitTestResult(null, null, null);
  var appointmentElement = _aspxGetParentByPartialId(eventSource, this._constDXAppointment());
  var appointmentDiv = appointmentElement;
  if (_aspxIsExists(appointmentElement) && _aspxIsExists(appointmentElement.appointmentDiv))
   appointmentDiv = appointmentElement.appointmentDiv;
  if (!_aspxIsExists(appointmentDiv)) {
   var aptAdornerDiv = _aspxGetParentByPartialId(eventSource, this._constDXAppointmentAdorner());
   if (_aspxIsExists(aptAdornerDiv))
    appointmentDiv = aptAdornerDiv.appointmentDiv;
  }
  else {
   if (!_aspxIsExists(appointmentDiv.appointmentViewInfo))
    appointmentDiv = null; 
  }
  var resizeDiv = null;
  if (_aspxIsExists(appointmentDiv))
   resizeDiv = _aspxGetParentByPartialId(eventSource, "ResizeControlDiv", appointmentDiv); 
  var selectionDiv = _aspxGetParentByPartialId(eventSource, this._constDXSelectionDiv());
  var cell = _aspxGetParentByPartialId(eventSource, this._constDXSchedulerContentCell());
  if (!_aspxIsExists(cell)) {
   var x = _aspxGetEventX(e);
   var y = _aspxGetEventY(e);
   if (ASPxClientTouchUI.isTouchEvent(e))
    cell = this.FindCellByMousePositionSlow(x, y);
   else
    cell = this.FindCellByMousePosition(x, y, appointmentDiv, selectionDiv);
  }
  return new ASPxSchedulerHitTestResult(cell, selectionDiv, appointmentDiv, resizeDiv);
 },
 FindCellByMousePosition: function (x, y, appointmentDiv, selectionDiv) {
  var containerIndex = null;
  var firstCellIndex = null;
  var lastCellIndex = null;
  if (_aspxIsExists(appointmentDiv)) {
   var viewInfo = appointmentDiv.appointmentViewInfo;
   containerIndex = viewInfo.containerIndex;
   firstCellIndex = viewInfo.visibleFirstCellIndex;
   lastCellIndex = viewInfo.visibleLastCellIndex;
  }
  else {
   if (_aspxIsExists(selectionDiv)) {
    containerIndex = selectionDiv.container.index;
    firstCellIndex = 0;
    lastCellIndex = selectionDiv.container.cellCount - 1;
   }
  }
  var cell = this.LookupCellByMousePosition(this.horizontalViewInfo, x, y, containerIndex, firstCellIndex, lastCellIndex);
  if (!_aspxIsExists(cell))
   cell = this.LookupCellByMousePosition(this.verticalViewInfo, x, y, containerIndex, firstCellIndex, lastCellIndex);
  return cell;
 },
 FindCellByMousePositionSlow: function (x, y) {
  var cell = this.LookupCellByMousePositionSlow(this.horizontalViewInfo, x, y);
  if (!_aspxIsExists(cell))
   cell = this.LookupCellByMousePositionSlow(this.verticalViewInfo, x, y);
  return cell;
 },
 InitializeCell: function (cell) {
  var result = this.cellIdRegExp.exec(cell.id);
  if (!_aspxIsExists(result) || result.length == 0)
   return;
  var horizontalContainer = (result[2] == "h");
  var containerIndex = parseInt(result[3]);
  var cellIndex = parseInt(result[4]);
  if (horizontalContainer)
   this.horizontalViewInfo.InitializeCell(cell, containerIndex, cellIndex);
  else
   this.verticalViewInfo.InitializeCell(cell, containerIndex, cellIndex);
 },
 CanCreateCallback: function () {
  if (!this.isReadyForCallbacks) {
   return false;
  }
  if (this.constructor.prototype.CanCreateCallback.call(this)) {
   return true;
  }
  return this.funcCallbackCount == this.requestCount && this.funcCallbackCount > 0; 
 },
 GetCallbackHandler: function (index) {
  if (index < 0 || index >= this.funcCallbacks.length)
   return null;
  var result = this.funcCallbacks[index];
  this.funcCallbacks[index] = null;
  return result;
 },
 RegisterCallbackHandler: function (onCallback) {
  this.funcCallbackCount++;
  var count = this.funcCallbacks.length;
  for (var i = 0; i < count; i++) {
   if (this.funcCallbacks[i] == null) {
    this.funcCallbacks[i] = onCallback;
    return i;
   }
  }
  this.funcCallbacks.push(onCallback);
  return this.funcCallbacks.length - 1;
 },
 ClearFuncCallbacks: function () {
  var count = this.funcCallbacks.length;
  for (var i = 0; i < count; i++) {
   if (this.funcCallbacks[i] != null) {
    this.funcCallbacks[i] = aspxSchedulerEmptyFuncCallbackHandler;
   }
  }
 },
 HideLoadingPanelOnCallback: function () {
  return false;
 },
 RaiseFuncCallback: function (callbackName, args, onCallback) {
  if (!_aspxIsExists(args) || args == "")
   return;
  this.StopReminderTimer();
  this.ClearTimeMarkerTimer();
  if (this.useDeferredFuncCallback)
   this.AddDeferredFuncCallback(callbackName, args, onCallback);
  else
   this.RaiseFuncCallbackCore(callbackName, args, onCallback);
 },
 RaiseFuncCallbackCore: function (callbackName, args, onCallback) {
  if (this.CanCreateCallback()) {
   var id = this.RegisterCallbackHandler(onCallback);
   this.CreateCallback(callbackName + id.toString() + "," + args);
  }
 },
 AddDeferredFuncCallback: function (callbackName, args, onCallback) {
  var funcCallback = new SchedulerFuncCallback(callbackName, args, onCallback);
  this.deferredFuncCallbackList.push(funcCallback);
 },
 BeginDeferredFuncCallbackArea: function () {
  this.useDeferredFuncCallback = true;
 },
 EndDeferredFuncCallbackArea: function () {
  this.useDeferredFuncCallback = false;
  for (var i = 0; i < this.deferredFuncCallbackList.length; i++) {
   var funcCallback = this.deferredFuncCallbackList[i];
   funcCallback.Raise(this);
  }
  this.deferredFuncCallbackList = [];
 },
 RaiseCallback: function (args) {
  this.TimeMarkerBeginUpdate();
  this.UnsubscribeEvents();
  this.StopReminderTimer();
  this.ClearTimeMarkerTimer();
  this.HideAllToolTips();
  this.DisableToolTips();
  if (_aspxIsExists(this.callBack) && this.isCallbackMode) {
   if (!this.CanCreateCallback())
    return;
   this.ShowLoadingElements();
   var statusInfoManager = this.statusInfoManager;
   if (_aspxIsExists(statusInfoManager))
    statusInfoManager.Clear();
   this.CreateCallback(args);
   this.ClearFuncCallbacks();
   this.isReadyForCallbacks = false;
  }
  else {
   ASPxControlResizeManager.Clear();
   aspxGetControlCollection().Remove(this);
   this.SendPostBack(args);
  }
 },
 PerformCallbackHandler: function (index, res) {
  var handler = this.GetCallbackHandler(index);
  if (handler != null)
   handler(res);
 },
 OnFuncCallback: function (result) {
  eval(result);
 },
 DoCallback: function (result) {
  this.constructor.prototype.DoCallback.call(this, result);
  this.EnsureAllToolTipInitialized();
 },
 OnCallback: function (result) {
  this.EnableToolTips();
  if (result.indexOf("FB|") == 0) {
   this.funcCallbackCount--;
   _aspxSetTimeout("aspxSchedulerFuncCallback(\"" + this.name + "\", \"" + escape(result.substr(3)) + "\");", 0);
   return;
  }
  this.changedBlocks = new Object();
  if (typeof aspxGetDropDownCollection != "undefined") {
   aspxGetDropDownCollection().focusedControlName = "";
   aspxGetDropDownCollection().droppedControlName = "";
  }
  _aspxClearSelection();
  this.HideCurrentPopupContainer();
  var element = this.GetMainElement();
  if (element != null) {
   this.DisableResize();
   ASPxRelatedControlManager.ParseResult(result);
  }
 },
 OnCallbackError: function (result, data) {
  if (_aspxIsExists(this.onCallbackError))
   this.onCallbackError();
  _aspxClearSelection();
  this.HideLoadingElements();
  this.isReadyForCallbacks = true;
  if (!this.NotifyCallbackError(result))
   alert("CALLBACK ERROR: " + result);
 },
 OnCallbackGeneralError: function (result) {
  var length = result.length;
  this.OnCallbackError(length + ",0|" + result, null);
 },
 OnHandledException: function () {
  if (_aspxIsExists(this.onCallbackError))
   this.onCallbackError();
  this.StartReminderTimer();
  this.EnableToolTips();
  this.SetTimeMarkerTimer();
  this.TimeMarkerEndUpdate();
  this.HideLoadingElements();
  this.isReadyForCallbacks = true;
  this.EnableResize();
 },
 ShowLoadingPanel: function () {
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetMainElement());
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetMainElement());
 },
 GetCallbackAnimationElement: function () {
  return _aspxGetElementById(this.name + "_containerBlock_innerContent");
 },
 ProcessCallbackResult: function (id, html, params) {
  if (!this.changedBlocks.ContainerBlockChanged && this.GetBlockElementId("containerBlock", "innerContent") == id) {
   this.changedBlocks.ContainerBlockChanged = true;
   this.RemoveContainerBlockChilds();
  }
  if (this.GetBlockElementId("formBlock", "innerContent") == id) {
   if (params == "#UsePrevResult") {
    html = this.prevCallbackResults.formBlock;
    params = "";
   }
   else {
    this.prevCallbackResults.formBlock = html;
   }
  }
  if (!this.changedBlocks.AppointmentsBlockChanged && this.GetBlockElementId("aptsBlock", "innerContent") == id) {
   this.changedBlocks.AppointmentsBlockChanged = true;
   this.ClearCache(this.appointmentDivCache, true);
  }
  ASPxRelatedControlManager.ProcessCallbackResultDefault(id, html, params);
  if (!this.changedBlocks.NavButtonsBlockChanged && this.GetBlockElementId("navButtonsBlock", "innerContent") == id) {
   this.changedBlocks.NavButtonsBlockChanged = true;
   this.ClearNavigationButtons();
  }
 },
 RemoveContainerBlockChilds: function () {
  this.ClearCache(this.navButtonsCache, false);
  this.ClearCache(this.appointmentDivCache, true);
 },
 ClearCache: function (cache, alwaysCheckParent) {
  var parent = null;
  for (var divId in cache) {
   var div = cache[divId];
   if (!parent || alwaysCheckParent)
    parent = div.parentNode;
   if (_aspxIsExists(parent) && _aspxIsExists(parent.tagName)) {
    parent.removeChild(div);
   }
  }
 },
 NotifyCallbackError: function (msg) {
  var statusInfoManager = this.statusInfoManager;
  if (_aspxIsExists(statusInfoManager)) {
   statusInfoManager.ShowExceptionInfo(msg);
   return true;
  }
  else
   return false;
 },
 SetErrorInfoRowVisibility: function (cell, visible) {
  var row = cell.parentNode;
  if (_aspxIsExists(row) && row.tagName == "TR")
   _aspxSetElementDisplay(row, visible);
 },
 ShowResourceNavigatorRow: function (visible) {
  if (_aspxIsExists(this.resourceNavigatorRow)) {
   _aspxSetElementDisplay(this.resourceNavigatorRow, visible);
  }
 },
 SetCheckSums: function (checkSums) {
  var element = this.GetStateElement("CHECKSUMS");
  if (_aspxIsExists(element))
   element.value = checkSums;
 },
 FindViewInfosByAppointmentId: function (appointmentId) {
  var result = this.horizontalViewInfo.FindViewInfosByAppointmentId(appointmentId);
  return result.concat(this.verticalViewInfo.FindViewInfosByAppointmentId(appointmentId));
 },
 RemoveViewInfosByAppointmentId: function (appointmentId) {
  this.horizontalViewInfo.RemoveViewInfosByAppointmentId(appointmentId);
  this.verticalViewInfo.RemoveViewInfosByAppointmentId(appointmentId);
 },
 NavBtnClick: function (startTime, duration, resourceId) {
  this.RaiseCallback("NVBTN|" + _aspxDateTimeToMilliseconds(startTime) + "," + duration + "," + resourceId);
 },
 SetTimelineScalesInfo: function (enabledScales, visibleScales) {
  this.enabledTimeScalesInfo = enabledScales;
  this.visibleTimeScalesInfo = visibleScales;
 },
 SetCurrentTimeScaleMenuItemName: function (name) {
  this.currentTimeScaleMenuItemName = name;
 },
 OnAppointmentToolTipClick: function (sender, e) {
  var dataObject = null;
  while (sender != null) {
   var dataObject = sender.dataObject;
   if (_aspxIsExists(dataObject))
    break;
   sender = sender.parentNode;
  }
  if (!_aspxIsExists(dataObject))
   return;
  var appointmentId = dataObject.appointmentId;
  if (!this.appointmentSelection.IsAppointmentSelected(appointmentId))
   this.appointmentSelection.SelectSingleAppointment(appointmentId);
  sender.appointmentViewInfo = dataObject;
  if (this.appointmentSelection.IsAppointmentSelected(appointmentId))
   this.menuManager.ShowAptMenu(sender, e);
 },
 CanShowAppointmentMenu: function (appointment) {
  if (!this.menuManager || !appointment)
   return false;
  return this.menuManager.CanShowAppointmentMenu(appointment);
 },
 GetDateInMilliseconds: function (date) {
  return date.valueOf() - 60000 * date.getTimezoneOffset();
 },
 RefreshClientAppointmentPropertiesCore: function (dictionary) {
  if (!dictionary.appointmentId)
   return;
  var apt = this.GetAppointment(dictionary.appointmentId);
  if (apt == null)
   apt = new ASPxClientAppointment();
  var propertyController = new ASPxClientAppointmentPropertyApplyController(this);
  propertyController.ApplyProperties(apt, dictionary);
  if (_aspxIsExists(this.RefreshClientAppointmentPropertiesUserCallbackFunction)) {
   this.RefreshClientAppointmentPropertiesUserCallbackFunction(apt);
  }
 },
 HideAllToolTips: function () {
  _aspxSchedulerToolTipHelper.HideToolTip();
  this.GetAppointmentDragTooltip().HideToolTip();
  this.GetSelectionToolTip().HideToolTip();
  this.GetAppointmentToolTip().HideToolTip();
  if (_aspxIsExists(this.activeToolTip) && this.activeToolTip != null) {
   this.activeToolTip.HideToolTip();
   this.activeToolTip = null;
  }
 },
 DisableToolTips: function () {
  this.toolTipsEnable = false;
 },
 EnableToolTips: function () {
  this.toolTipsEnable = true;
 },
 GetAppointmentDragTooltip: function () {
  var toolTip = aspxGetControlCollection().Get(this.appointmentDragToolTip);
  return toolTip;
 },
 GetSelectionToolTip: function () {
  var toolTip = aspxGetControlCollection().Get(this.selectionToolTip);
  return toolTip;
 },
 GetAppointmentToolTip: function () {
  var toolTip = aspxGetControlCollection().Get(this.appointmentToolTip);
  return toolTip;
 },
 EnsureAllToolTipInitialized: function () {
  this.EnsureToolTipInitialized(this.appointmentToolTip);
  this.EnsureToolTipInitialized(this.selectionToolTip);
  this.EnsureToolTipInitialized(this.appointmentDragToolTip);
 },
 EnsureToolTipInitialized: function (toolTipName) {
  var toolTip = aspxGetControlCollection().Get(toolTipName);
  if (!toolTip.isToolTipInitialized) {
   toolTip.aspxParentControl = this;
   if (_aspxIsExists(toolTip.templatedToolTip)) {
    var userToolTip = toolTip.templatedToolTip;
    userToolTip.scheduler = this;
    userToolTip.Initialize();
    toolTip.isToolTipInitialized = true;
   }
  }
 },
 ShowSelectionToolTipInernal: function (x, y) {
  _aspxSchedulerToolTipHelper.ShowToolTipInstantly(x, y, this.GetSelectionToolTip(), null);
 },
 TimeMarkerBeginUpdate: function () {
  this.isTimeMarkerUpdateLocked = false;
 },
 TimeMarkerEndUpdate: function () {
  this.isTimeMarkerUpdateLocked = true;
  if (this.timeMarkerDeferredRecalc) {
   this.timeMarkerDeferredRecalc = false;
   this.RecalcTimeMarkerCore();
  }
 },
 RecalcTimeMarker: function () {
  if (this.isTimeMarkerUpdateLocked) {
   this.RecalcTimeMarkerCore();
  }
  else
   this.timeMarkerDeferredRecalc = true;
 },
 RecalcTimeMarkerCore: function () {
  if (this.canShowDayTimeMarker)
   this.verticalViewInfo.LayoutTimeMarker();
  else
   this.horizontalViewInfo.LayoutTimeMarker();
 },
 SetTimeMarkerTimer: function () {
  this.ClearTimeMarkerTimer();
  this.timeMarkerTimer = _aspxSetInterval(_aspxCreateDelegate(this.RecalcTimeMarker, this), 1 * 60 * 1000);
 },
 ClearTimeMarkerTimer: function () {
  if (this.timeMarkerTimer) {
   _aspxClearTimer(this.timeMarkerTimer);
   this.timeMarkerTimer = null;
  }
 },
 ResetTimeRulers: function () {
  this.timeRulerCollection = null;
 },
 SetTimeRulers: function (timeRulerInfos) {
  var count = timeRulerInfos.length;
  this.timeRulerCollection = [];
  for (var i = 0; i < count; i++) {
   var timeRuler = new ASPxTimeRuler(timeRulerInfos[i]);
   this.timeRulerCollection.push(timeRuler);
  }
 },
 GetTimeRulers: function () {
  return this.timeRulerCollection;
 }
});
ASPxSchedulerMenuManager = _aspxCreateClass(null, {
 constructor: function (scheduler) {
  this.scheduler = scheduler;
 },
 OnAptMenuClick: function (itemName) {
  if (this.OnMenuItemClick(itemName))
   return;
  this.HandleAptMenuClickAtServerSide(itemName);
 },
 OnMenuItemClick: function (itemName) {
  this.HideMenu();
  if (this.scheduler.RaiseMenuItemClicked(itemName))
   return true;
 },
 OnViewMenuClick: function (itemName) {
  if (this.IsClientAPIEnabled()) {
   if (this.HandleViewMenuClickAtClientSide(itemName))
    return;
  }
  if (itemName == SchedulerMenuItemId.GotoThisDay) {
   var activeViewType = this.scheduler.GetActiveViewType();
   if (!this.scheduler.RaiseActiveViewChanging(activeViewType, ASPxSchedulerViewType.Day))
    return;
  }
  this.HandleViewMenuClickAtServerSide(itemName);
 },
 PrepareAptMenu: function (appointmentViewInfo) {
  var menu = aspxGetControlCollection().Get(this.scheduler.name + "_aptMenuBlock_SMAPT");
  if (!_aspxIsExists(menu))
   return null;
  if (!this.UpdateAppointmentMenuItems(appointmentViewInfo, menu))
   return null;
  return menu;
 },
 ShowAptMenu: function (sender, e) {
  var menu = this.PrepareAptMenu(sender.appointmentViewInfo);
  if (menu)
   this.ShowMenu(e, menu);
 },
 PrepareViewMenu: function () {
  var menu = aspxGetControlCollection().Get(this.scheduler.name + "_viewMenuBlock_SMVIEW");
  if (!_aspxIsExists(menu))
   return null;
  this.UpdateViewMenuItems(menu);
  return menu;
 },
 ShowViewMenu: function (sender, e) {
  var menu = this.PrepareViewMenu();
  if (menu)
   this.ShowMenu(e, menu);
 },
 ShowMenu: function (e, menu) {
  this.scheduler.HideAllToolTips();
  if (this.scheduler.activeFormType != ASPxSchedulerFormType.None)
   return;
  menu.ShowInternal(e);
  e.returnValue = false;
  e.cancelBubble = true;
  _aspxClearSelection();
 },
 HideMenu: function (e, menu) {
  ASPxClientMenuBase.GetMenuCollection().HideAll();
 },
 HandleAptMenuClickAtServerSide: function (itemName) {
  if (itemName == SchedulerMenuItemId.DeleteAppointment) {
   if (this.HandleDeleteMenuItemClick())
    return;
  }
  this.scheduler.RaiseCallback("MNUAPT|" + itemName);
 },
 HandleDeleteMenuItemClick: function () {
  var aptIds = this.scheduler.appointmentSelection.selectedAppointmentIds;
  var aptIdCollection = new Array();
  for (var aptIdIndx in aptIds) {
   var aptId = aptIds[aptIdIndx];
   aptIdCollection.push(aptId);
  }
  return this.scheduler.RaseAppointmentDeleting(aptIdCollection);
 },
 HandleViewMenuClickAtClientSide: function (itemName) {
  if (this.OnMenuItemClick(itemName))
   return true;
  switch (itemName) {
   case SchedulerMenuItemId.SwitchToDayView:
    this.scheduler.SetActiveViewType(ASPxSchedulerViewType.Day);
    return true;
   case SchedulerMenuItemId.SwitchToWorkWeekView:
    this.scheduler.SetActiveViewType(ASPxSchedulerViewType.WorkWeek);
    return true;
   case SchedulerMenuItemId.SwitchToWeekView:
    this.scheduler.SetActiveViewType(ASPxSchedulerViewType.Week);
    return true;
   case SchedulerMenuItemId.SwitchToMonthView:
    this.scheduler.SetActiveViewType(ASPxSchedulerViewType.Month);
    return true;
   case SchedulerMenuItemId.SwitchToTimelineView:
    this.scheduler.SetActiveViewType(ASPxSchedulerViewType.Timeline);
    return true;
   default:
    return false;
  }
 },
 HandleViewMenuClickAtServerSide: function (menuItemName) {
  if (menuItemName == "GotoToday")
   this.scheduler.AssignSlideAnimationDirectionByDate(new Date());
  this.scheduler.RaiseCallback("MNUVIEW|" + menuItemName);
 },
 IsClientAPIEnabled: function () {
  return _aspxIsExists(this.scheduler.SetActiveViewType);
 },
 CanShowAppointmentMenu: function (appointment) {
  return this.CalculateAppointmentMenuItemVisibility(appointment).isMenuVisible;
 },
 CalculateAppointmentMenuItemVisibility: function (appointment) {
  var itemsInfo = new Object();
  itemsInfo.isMenuVisible = false;
  var aptFlags = appointment.flags;
  if (aptFlags == null)
   return itemsInfo;
  var canShowForm = this.scheduler.aptFormVisibility != ASPxSchedulerFormVisibility.None;
  var isSingleAppointment = this.scheduler.appointmentSelection.IsSingleAppointmentSelected();
  itemsInfo.openAppointmentVisible = canShowForm && aptFlags.allowEdit && isSingleAppointment;
  itemsInfo.deleteAppointmentVisible = aptFlags.allowDelete;
  itemsInfo.labelSubMenuVisible = aptFlags.allowEdit;
  itemsInfo.statusSubMenuVisible = aptFlags.allowEdit;
  var aptType = appointment.appointmentType;
  var isRecurring = aptType != ASPxAppointmentType.Normal;
  itemsInfo.editSeriesVisible = canShowForm && aptFlags.allowEdit && isRecurring && isSingleAppointment;
  var isException = (aptType == ASPxAppointmentType.ChangedOccurrence || aptType == ASPxAppointmentType.DeletedOccurrence);
  itemsInfo.restoreOccurrenceVisible = aptFlags.allowEdit && isException && isSingleAppointment;
  itemsInfo.isMenuVisible = itemsInfo.openAppointmentVisible | itemsInfo.deleteAppointmentVisible | itemsInfo.labelSubMenuVisible | itemsInfo.statusSubMenuVisible | aptFlags.alowEdit |
         itemsInfo.editSeriesVisible | itemsInfo.restoreOccurrenceVisible;
  return itemsInfo;
 },
 UpdateAppointmentMenuItems: function (appointmentViewInfo, menu) {
  if (!_aspxIsExists(appointmentViewInfo))
   return;
  var apt = this.scheduler.GetAppointment(appointmentViewInfo.appointmentId);
  if (apt == null)
   return;
  var itemsInfo = this.CalculateAppointmentMenuItemVisibility(apt);
  if (!itemsInfo || !itemsInfo.isMenuVisible)
   return;
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.OpenAppointment, itemsInfo.openAppointmentVisible);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.DeleteAppointment, itemsInfo.deleteAppointmentVisible);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.LabelSubMenu, itemsInfo.labelSubMenuVisible);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.StatusSubMenu, itemsInfo.statusSubMenuVisible);
  if (itemsInfo.labelSubMenuVisible || itemsInfo.statusSubMenuVisible) {
   this.UpdateAptSubMenu(menu, SchedulerMenuItemId.LabelSubMenu, apt.labelIndex);
   this.UpdateAptSubMenu(menu, SchedulerMenuItemId.StatusSubMenu, apt.statusIndex);
  }
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.EditSeries, itemsInfo.editSeriesVisible);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.RestoreOccurrence, itemsInfo.restoreOccurrenceVisible);
  return itemsInfo.isMenuVisible;
 },
 UpdateAptSubMenu: function (menu, subMenuName, subMenuItemIndex) {
  var subMenu = menu.GetItemByName(subMenuName);
  if (!_aspxIsExists(subMenu))
   return;
  this.UncheckAllSubMenuItems(subMenu);
  var item = subMenu.GetItem(subMenuItemIndex);
  if (_aspxIsExists(item))
   item.SetChecked(true);
 },
 UncheckAllSubMenuItems: function (subMenu) {
  var count = subMenu.items.length;
  for (var i = 0; i < count; i++) {
   var item = subMenu.items[i];
   item.SetChecked(false);
  }
 },
 UpdateViewMenuItems: function (menu) {
  this.UpdateSwitchViewSubMenu(menu);
  var viewType = this.scheduler.GetActiveViewType();
  if (viewType == ASPxSchedulerViewType.Timeline) {
   this.UpdateEnabledScalesSubMenu(menu);
   this.UpdateVisibleScalesSubMenu(menu);
  }
  else if (viewType == ASPxSchedulerViewType.Day || viewType == ASPxSchedulerViewType.WorkWeek)
   this.UpdateTimeSlotMenuItems(menu);
  var canShowAptForm = this.scheduler.aptFormVisibility != ASPxSchedulerFormVisibility.None;
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.NewAppointment, canShowAptForm);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.NewAllDayEvent, canShowAptForm);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.NewRecurringAppointment, canShowAptForm);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.NewRecurringEvent, canShowAptForm);
  this.SetMenuItemVisibility(menu, SchedulerMenuItemId.GotoDate, this.scheduler.gotoDateFormVisibility != ASPxSchedulerFormVisibility.None);
 },
 SetMenuItemVisibility: function (menu, itemName, visible) {
  var item = menu.GetItemByName(itemName);
  if (_aspxIsExists(item))
   item.SetVisible(visible);
 },
 UpdateSwitchViewSubMenu: function (menu) {
  var subMenu = menu.GetItemByName(SchedulerMenuItemId.SwitchViewMenu);
  if (!_aspxIsExists(subMenu))
   return;
  var itemId = this.GetCurrentViewMenuId();
  var item = subMenu.GetItemByName(itemId);
  if (!_aspxIsExists(item))
   return;
  item.SetChecked(true);
 },
 UpdateEnabledScalesSubMenu: function (menu) {
  var subMenu = menu.GetItemByName(SchedulerMenuItemId.TimeScaleEnable);
  if (!_aspxIsExists(subMenu))
   return;
  var count = subMenu.GetItemCount();
  for (var i = 0; i < count; i++)
   subMenu.GetItem(i).SetChecked(this.scheduler.enabledTimeScalesInfo[i] != 0);
 },
 UpdateVisibleScalesSubMenu: function (menu) {
  var subMenu = menu.GetItemByName(SchedulerMenuItemId.TimeScaleVisible);
  if (!_aspxIsExists(subMenu))
   return;
  var count = subMenu.GetItemCount();
  for (var i = 0; i < count; i++) {
   var item = subMenu.GetItem(i);
   if (this.scheduler.enabledTimeScalesInfo[i] != 0) {
    item.SetEnabled(true);
    item.SetChecked(this.scheduler.visibleTimeScalesInfo[i] != 0);
   }
   else {
    item.SetEnabled(false);
    item.SetChecked(false);
   }
  }
 },
 UpdateTimeSlotMenuItems: function (menu) {
  var item = menu.GetItemByName(this.scheduler.currentTimeScaleMenuItemName);
  if (!_aspxIsExists(item))
   return;
  item.SetChecked(true);
 },
 GetCurrentViewMenuId: function () {
  switch (this.scheduler.GetActiveViewType()) {
   default:
   case ASPxSchedulerViewType.Day:
    return SchedulerMenuItemId.SwitchToDayView;
   case ASPxSchedulerViewType.WorkWeek:
    return SchedulerMenuItemId.SwitchToWorkWeekView;
   case ASPxSchedulerViewType.Week:
    return SchedulerMenuItemId.SwitchToWeekView;
   case ASPxSchedulerViewType.Month:
    return SchedulerMenuItemId.SwitchToMonthView;
   case ASPxSchedulerViewType.Timeline:
    return SchedulerMenuItemId.SwitchToTimelineView;
  }
 }
});
function aspxSchedulerShowViewMenu(name, sender, evt) {
 evt = _aspxGetEvent(evt);
 var scheduler = aspxGetControlCollection().Get(name);
 if (scheduler != null)
  scheduler.menuManager.ShowViewMenu(sender, evt);
 evt.returnValue = false;
 evt.cancelBubble = true;
 return evt.returnValue; 
}
function aspxSchedulerShowAptMenu(name, sender, evt) {
 evt = _aspxGetEvent(evt);
 var scheduler = aspxGetControlCollection().Get(name);
 if (scheduler != null)
  scheduler.menuManager.ShowAptMenu(sender, evt);
 evt.returnValue = false;
 evt.cancelBubble = true;
}
function aspxSchedulerGetSchedulerFromMenu(menu) {
 if (menu == null) return null;
 var pos = menu.name.lastIndexOf("_");
 if (pos < 0)
  return null;
 var name = menu.name.substring(0, pos);
 pos = name.lastIndexOf("_");
 if (pos > -1)
  return aspxGetControlCollection().Get(menu.name.substring(0, pos));
 return null;
}
function aspxSchedulerOnViewMenuClick(s, args) {
 var scheduler = aspxSchedulerGetSchedulerFromMenu(s);
 if (scheduler != null) {
  if (args.item.GetItemCount() <= 0)
   scheduler.menuManager.OnViewMenuClick(args.item.name);
 }
}
function aspxSchedulerOnAptMenuClick(s, args) {
 var scheduler = aspxSchedulerGetSchedulerFromMenu(s);
 if (scheduler != null) {
  if (args.item.GetItemCount() <= 0)
   scheduler.menuManager.OnAptMenuClick(args.item.name);
 }
}
ASPxClientTimeInterval = _aspxCreateClass(null, {
 constructor: function (start, duration) {
  this.start = start;
  this.duration = duration;
  this.end = _aspxDateIncreaseWithUtcOffset(start, duration);
 },
 __toJsonExceptKeys: ['end'],
 ToString: function () {
  return _aspxDateTimeToMilliseconds(this.start) + "," + this.duration;
 },
 GetStart: function () {
  return this.start;
 },
 GetDuration: function () {
  return this.duration;
 },
 GetEnd: function () {
  return this.end;
 },
 SetStart: function (newStartTime) {
  this.duration -= _aspxDateSubsWithTimezone(newStartTime, this.start);
  this.start = newStartTime;
 },
 SetDuration: function (newDuration) {
  this.duration = newDuration;
  this.end = _aspxDateIncreaseWithUtcOffset(this.start, this.duration);
 },
 SetEnd: function (newEndTime) {
  this.duration += _aspxDateSubsWithTimezone(newEndTime, this.end);
  this.end = newEndTime;
 },
 Equals: function (interval) {
  if (_aspxIsExists(interval) && _aspxIsExists(interval.start) && _aspxIsExists(interval.end))
   return (interval.start - this.start) == 0 && (interval.end - this.end) == 0;
  else
   return false;
 },
 IntersectsWith: function (interval) {
  return (interval.start - this.start) >= 0 && (interval.end - this.end) <= 0;
 },
 IntersectsWithExcludingBounds: function (interval) {
  if (this.duration == 0 && interval.duration == 0 && interval.start - this.start == 0)
   return true;
  return (interval.end - this.start) > 0 && (interval.start - this.end) < 0;
 },
 Contains: function (interval) {
  if (interval == null)
   return false;
  return interval.start >= this.start && interval.end <= this.end;
 },
 IsSmallerThanDay: function () {
  return this.duration < ASPxSchedulerDateTimeHelper.DaySpan;
 },
 IsDurationEqualToDay: function () {
  return this.duration == ASPxSchedulerDateTimeHelper.DaySpan;
 },
 IsZerroDurationInterval: function () {
  return this.duration == 0;
 },
 Clone: function () {
  return new ASPxClientTimeInterval(this.start, this.duration);
 }
});
ASPxTopRowTimeManager = _aspxCreateClass(null, {
 constructor: function (scheduler) {
  this.scheduler = scheduler;
  this.topRowTime = new Object();
  this.topRowTime.duration = 0;
  this.topRowTime.scrollOffset = -1;
 },
 SetTopRowTime: function (duration) {
  var viewInfo = this.scheduler.verticalViewInfo;
  if (viewInfo.cellContainers.length < 1)
   return;
  var container = viewInfo.cellContainers[0];
  var containerStartDate = container.interval.GetStart();
  var containerDay = ASPxSchedulerDateTimeHelper.TruncToDate(containerStartDate);
  var seekTime = new Date(containerDay.valueOf() + duration);
  var cell = viewInfo.FindStartCellByTime(container, seekTime);
  if (!_aspxIsExists(cell))
   return false;
  var cellInterval = this.scheduler.GetCellInterval(cell);
  var cellDuration = cellInterval.duration;
  var cellHeight = cell.offsetHeight
  var remainderDuration = seekTime.valueOf() - cellInterval.GetStart().valueOf();
  var scrollOffset = cell.offsetTop + cellHeight * remainderDuration / cellDuration;
  var scrollContainer = viewInfo.GetScrollContainer();
  scrollContainer.scrollTop = scrollOffset;
  return true;
 },
 CaclulateTopRowTime: function () {
  var viewInfo = this.scheduler.verticalViewInfo;
  if (viewInfo.cellContainers.length < 1)
   return null;
  var container = viewInfo.cellContainers[0];
  var scrollContainer = viewInfo.GetScrollContainer();
  var testCell = viewInfo.GetCell(0, 0);
  var scrollTop = scrollContainer.scrollTop;
  var cell = viewInfo.FindCellByPosition(0, 0, container.cellCount - 1, testCell.offsetWidth / 2, scrollTop);
  var isScrollTopChanged = false;
  if (cell == null) {
   scrollTop += 1;
   isScrollTopChanged = true;
   cell = viewInfo.FindCellByPosition(0, 0, container.cellCount - 1, testCell.offsetWidth / 2, scrollTop);
  }
  if (isScrollTopChanged)
   scrollTop -= 1;
  var reminderOffset = scrollTop - cell.offsetTop;
  var cellHeight = cell.offsetHeight;
  var cellInterval = this.scheduler.GetCellInterval(cell);
  var cellDuration = cellInterval.duration;
  var scrollTimeMs = cellInterval.GetStart().valueOf();
  scrollTimeMs += cellDuration * reminderOffset / cellHeight;
  return ASPxSchedulerDateTimeHelper.ToDayTime(new Date(scrollTimeMs));
 },
 SetTopRowTimeField: function (dayViewStateString, workWeekViewStateString) {
  this.SaveTopRowTimeState(this.CreateTopRowTimeStateFromString(dayViewStateString), ASPxSchedulerViewType.Day);
  this.SaveTopRowTimeState(this.CreateTopRowTimeStateFromString(workWeekViewStateString), ASPxSchedulerViewType.WorkWeek);
 },
 SetTopRowTimeState: function (topRowTimeState, viewType) {
  var viewInfo = this.scheduler.verticalViewInfo;
  if (!this.IsDayView(viewType) || viewInfo.cellContainers.length < 1)
   return;
  if (this.scheduler.privateActiveViewType == viewType) {
   if (topRowTimeState.scrollOffset < 0)
    this.SetTopRowTime(topRowTimeState.duration);
   else
    viewInfo.GetScrollContainer().scrollTop = topRowTimeState.scrollOffset;
  }
  else
   this.SaveTopRowTimeState(topRowTimeState, viewType);
 },
 GetTopRowTimeState: function (viewType) {
  if (!this.IsDayView(viewType))
   return 0;
  return this.topRowTime[viewType];
 },
 SaveActiveViewTopRowTime: function () {
  var viewInfo = this.scheduler.verticalViewInfo;
  if (!this.IsDayView(this.scheduler.privateActiveViewType) || viewInfo.cellContainers.length < 1)
   return;
  var duration = this.CaclulateTopRowTime();
  var scrollOffset = viewInfo.GetScrollContainer().scrollTop;
  var topRowTimeState = this.CreateTopRowTimeState(duration, scrollOffset);
  this.SaveTopRowTimeState(topRowTimeState, this.scheduler.privateActiveViewType);
 },
 SaveTopRowTimeState: function (state, viewType) {
  if (!this.IsDayView(viewType))
   return;
  var hiddenFieldId = (viewType == ASPxSchedulerViewType.Day) ? "TRTD" : "TRTW";
  this.topRowTime[viewType] = state;
  var element = this.scheduler.GetStateElement(hiddenFieldId);
  if (_aspxIsExists(element))
   element.value = state.duration + "," + state.scrollOffset;
 },
 CreateTopRowTimeState: function (duration, scrollOffset) {
  return { 'duration': duration, 'scrollOffset': scrollOffset };
 },
 CreateTopRowTimeStateFromString: function (stringValue) {
  var values = stringValue.split(',');
  return this.CreateTopRowTimeState(parseInt(values[0]), parseInt(values[1]));
 },
 IsDayView: function (viewType) {
  return viewType == ASPxSchedulerViewType.Day || viewType == ASPxSchedulerViewType.WorkWeek;
 }
});
ASPxSchedulerUTCDate = _aspxCreateClass(null, {
 constructor: function (timeIntervalInMs) {
  var ms = parseInt(timeIntervalInMs);
  this.date = new Date(ms);
 },
 getTime: function () {
  return this.date.getUTCTime();
 },
 getDate: function () {
  return this.date.getUTCDate();
 },
 getDay: function () {
  return this.date.getUTCDay();
 },
 getFullYear: function () {
  return this.date.getUTCFullYear();
 },
 getMilliseconds: function () {
  return this.date.getUTCMilliseconds();
 },
 getMinutes: function () {
  return this.date.getUTCMinutes();
 },
 getMonth: function () {
  return this.date.getUTCMonth();
 },
 getSeconds: function () {
  return this.date.getUTCSeconds();
 },
 getTime: function () {
  return this.date.getTime();
 },
 getTimezoneOffset: function () {
  return this.date.getTimezoneOffset();
 },
 getUTCDate: function () {
  return this.date.getUTCDate();
 },
 getUTCDay: function () {
  return this.date.getUTCDay();
 },
 getUTCHours: function () {
  return this.date.getUTCHours();
 },
 getHours: function () {
  return this.date.getUTCHours();
 },
 getUTCMilliseconds: function () {
  return this.date.getUTCMilliseconds();
 },
 getUTCMonth: function () {
  return this.date.getUTCMonth();
 },
 getUTCMinutes: function () {
  return this.date.getUTCMinutes();
 },
 getUTCSeconds: function () {
  return this.date.getUTCSeconds();
 },
 getYear: function () {
  return this.date.getYear();
 },
 setSeconds: function (arg) {
  this.date.setSeconds(arg);
 },
 setFullYear: function (arg) {
  this.date.setFullYear(arg);
 },
 setMilliseconds: function (arg) {
  this.date.setMilliseconds(arg);
 },
 setTime: function (arg) {
  this.date.setTime(arg);
 },
 setYear: function (arg) {
  this.date.setYear(arg);
 },
 setDate: function (arg) {
  this.date.setDate(arg);
 },
 setUTCDate: function (arg) {
  this.date.setUTCDate(arg);
 },
 setUTCHours: function (arg) {
  this.date.setUTCHours(arg)
 },
 setHours: function (arg) {
  this.date.setHours(arg);
 },
 setUTCMilliseconds: function (arg) {
  this.date.setUTCMilliseconds(arg);
 },
 setUTCMinutes: function (arg) {
  this.date.setUTCMinutes(arg);
 },
 setMinutes: function (arg) {
  this.date.setMinutes(arg);
 },
 setMonth: function (arg) {
  this.date.setMonth(arg);
 },
 setUTCSeconds: function (arg) {
  this.date.setUTCSeconds(arg);
 },
 setUTCFullYear: function (arg) {
  this.date.setUTCFullYear(arg);
 },
 setUTCMonth: function (arg) {
  this.date.setUTCMonth(arg);
 },
 toGMTString: function () {
  return this.date.toGMTString();
 },
 toLocaleFormat: function () {
  return this.date.toLocaleFormat();
 },
 toLocaleTimeString: function () {
  return this.date.toLocaleTimeString();
 },
 toLocaleDateString: function () {
  return this.date.toLocaleDateString();
 },
 toString: function () {
  return this.date.toString();
 },
 toTimeString: function () {
  return this.date.toTimeString();
 },
 toDateString: function () {
  return this.date.toDateString();
 },
 toUTCString: function () {
  return this.date.toUTCString();
 },
 valueOf: function () {
  return this.date.valueOf();
 },
 getUTCFullYear: function () {
  return this.date.getUTCFullYear();
 }
});
var __aspxClientSchedulerSelectionHelper = null;
function SchedulerSelectionHelper_onmouseup(e) {
 if(__aspxClientSchedulerSelectionHelper != null) {
  __aspxClientSchedulerSelectionHelper.EndSelection(e);
  return true;
 }
}
function SchedulerSelectionHelper_onmousemove(e) {
 if(__aspxClientSchedulerSelectionHelper != null) {
  __aspxClientSchedulerSelectionHelper.MouseMove(e);
  return false;
 }
 return true;
}
function SchedulerSelectionHelper_onselectstart(e) {
 if(__aspxClientSchedulerSelectionHelper != null) {
  _aspxClearSelection();
  return false;
 }
 return true;
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, SchedulerSelectionHelper_onmouseup);
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, SchedulerSelectionHelper_onmousemove);
_aspxAttachEventToDocument("selectstart", SchedulerSelectionHelper_onselectstart);
ASPxSchedulerSelection = new _aspxCreateClass(null, {
 constructor: function(interval, resource, firstSelectedInterval) {
  this.interval = interval;
  this.resource = resource;
  this.firstSelectedInterval = _aspxIsExists(firstSelectedInterval) ? firstSelectedInterval : interval;
 }
});
ASPxClientSchedulerSelectionHelper = _aspxCreateClass(null, {
 constructor: function(scheduler, firstCell, continueSelection) {
  if(__aspxClientSchedulerSelectionHelper != null) __aspxClientSchedulerSelectionHelper.CancelSelection();
  this.scheduler = scheduler;
  if(!continueSelection || !_aspxIsExists(this.scheduler.selection)) {
   var resource = scheduler.GetCellResource(firstCell);
   var interval = scheduler.GetCellInterval(firstCell);
   this.scheduler.SetSelectionCore(new ASPxSchedulerSelection(interval, resource));
  }
  else
   this.ContinueSelection(firstCell);
  __aspxClientSchedulerSelectionHelper = this;
 },
 MouseMove: function(e) {
  var cell = this.scheduler.CalcHitTest(e).cell;
  if(_aspxIsExists(cell)) {
   this.ContinueSelection(cell);
  }  
 },
 ContinueSelection: function(cell) {
  var interval = this.scheduler.GetCellInterval(cell);
  if(!_aspxIsExists(interval))
   return;
  var newSelectionInterval = this.CalculateSelectionInterval(interval);
  if(!newSelectionInterval.Equals(this.scheduler.selection.interval)) {
   this.scheduler.SetSelectionInterval(newSelectionInterval);
  }
 },
 EndSelection: function(e) {
  this.CancelSelection();
  this.scheduler.OnSelectionChanged(e);
 },
 CancelSelection: function(e) {
  __aspxClientSchedulerSelectionHelper = null;
 },
 CalculateSelectionInterval: function(hitInterval) {
  var firstInterval = this.scheduler.selection.firstSelectedInterval;
  if(firstInterval.IntersectsWith(hitInterval))
   return new ASPxClientTimeInterval(firstInterval.GetStart(), _aspxDateSubsWithTimezone(hitInterval.GetEnd(), firstInterval.GetStart()));
  if(hitInterval.GetStart() - firstInterval.GetEnd() >= 0)
   return new ASPxClientTimeInterval(firstInterval.GetStart(), _aspxDateSubsWithTimezone(hitInterval.GetEnd(), firstInterval.GetStart()));
  else
   return new ASPxClientTimeInterval(hitInterval.GetStart(), _aspxDateSubsWithTimezone(firstInterval.GetEnd(), hitInterval.GetStart()));
 }
});
ASPxAppointmentSelection = _aspxCreateClass(null, {
 constructor: function (scheduler) {
  this.selectedAppointmentIds = new Array();
  this.selectedAppointmentViewInfos = new Array();
  this.scheduler = scheduler;
  this.lockCount = 0;
  this.deferredOnAppointmentSelection = false;
  this.internalSelection = false;
 },
 BeginUpdate: function (internalSelection) {
  this.internalSelection = internalSelection;
  this.lockCount++;
 },
 EndUpdate: function () {
  if (this.lockCount > 0) {
   this.lockCount--;
   if (this.lockCount == 0) {
    if (!this.internalSelection)
     this.ValidateViewInfos();
    if (this.deferredOnAppointmentSelection)
     this.OnAppointmentSelectionChanged();
    this.deferredOnAppointmentSelection = false;
   }
  }
 },
 ValidateViewInfos: function () {
  _aspxArrayClear(this.selectedAppointmentViewInfos);
  var count = this.selectedAppointmentIds.length;
  for (var i = count - 1; i >= 0; i--) {
   if (!this.AddAppointmentCore(this.selectedAppointmentIds[i]))
    _aspxArrayRemoveAt(this.selectedAppointmentIds, i);
  }
 },
 AddAppointmentCore: function (appointmentId) {
  var viewInfos = this.scheduler.FindViewInfosByAppointmentId(appointmentId);
  var count = viewInfos.length;
  if (count <= 0)
   return false;
  for (var i = 0; i < count; i++) {
   if (this.IsAppointmentVisible(viewInfos[i]))
    this.SelectAppointmentViewInfo(viewInfos[i]);
  }
  return true;
 },
 IsAppointmentVisible: function (viewInfo) {
  var appointmentDiv = viewInfo.contentDiv;
  return appointmentDiv.style.display != "none";
 },
 Prepare: function () {
  this.aptAdorner = this.scheduler.aptAdorner;
 },
 OnAppointmentSelectionChanged: function () {
  if (this.lockCount > 0)
   this.deferredOnAppointmentSelection = true;
  else
   this.scheduler.OnAppointmentSelectionChanged(this.selectedAppointmentIds);
 },
 IsSingleAppointmentSelected: function() {
  return this.selectedAppointmentIds.length == 1;
 },
 AddAppointmentToSelection: function (appointmentId) {
  if (!this.scheduler.privateAllowAppointmentMultiSelect && this.selectedAppointmentIds.length >= 1)
   return;
  var contains = _aspxArrayIndexOf(this.selectedAppointmentIds, appointmentId) >= 0;
  if (contains)
   return;
  if (this.lockCount > 0 && !this.internalSelection) {
   this.selectedAppointmentIds.push(appointmentId);
   this.OnAppointmentSelectionChanged();
  }
  else {
   if (this.AddAppointmentCore(appointmentId)) {
    this.selectedAppointmentIds.push(appointmentId);
    this.OnAppointmentSelectionChanged();
   }
  }
 },
 ClearSelection: function () {
  var count = this.selectedAppointmentIds.length;
  if (count <= 0)
   return;
  _aspxArrayClear(this.selectedAppointmentIds);
  if (this.lockCount <= 0 || this.internalSelection) {
   count = this.selectedAppointmentViewInfos.length;
   for (var i = count - 1; i >= 0; i--)
    this.UnselectAppointmentViewInfoByIndex(i);
  }
  this.OnAppointmentSelectionChanged();
 },
 RemoveAppointmentFromSelection: function (appointmentId) {
  _aspxArrayRemove(this.selectedAppointmentIds, appointmentId);
  if (this.lockCount <= 0) {
   var count = this.selectedAppointmentViewInfos.length;
   for (var i = count - 1; i >= 0; i--) {
    var viewInfo = this.selectedAppointmentViewInfos[i];
    if (viewInfo.appointmentId == appointmentId)
     this.UnselectAppointmentViewInfoByIndex(i);
   }
  }
  this.OnAppointmentSelectionChanged();
 },
 ChangeAppointmentSelection: function (appointmentId) {
  var contains = _aspxArrayIndexOf(this.selectedAppointmentIds, appointmentId) >= 0;
  if (contains && this.selectedAppointmentIds.length > 1)
   this.RemoveAppointmentFromSelection(appointmentId);
  else
   if (this.scheduler.privateAllowAppointmentMultiSelect || this.selectedAppointmentIds.length < 1)
    this.AddAppointmentToSelection(appointmentId);
 },
 SelectSingleAppointment: function (appointmentId) {
  if (this.selectedAppointmentIds.length == 1 && this.selectedAppointmentIds[0] == appointmentId)
   return;
  this.BeginUpdate(true);
  this.ClearSelection();
  this.AddAppointmentToSelection(appointmentId);
  this.EndUpdate();
 },
 IsAppointmentSelected: function (appointmentId) {
  return _aspxArrayIndexOf(this.selectedAppointmentIds, appointmentId) >= 0;
 },
 UnselectAppointmentViewInfoByIndex: function (index) {
  var viewInfo = this.selectedAppointmentViewInfos[index];
  this.UnselectAppointmentViewInfoCore(viewInfo);
  _aspxArrayRemoveAt(this.selectedAppointmentViewInfos, index);
 },
 UnselectAppointmentViewInfoCore: function (viewInfo) {
  viewInfo.contentDiv.style.zIndex = 1;
  var adornerDiv = viewInfo.adornerDiv;
  adornerDiv.oncontextmenu = null;
  adornerDiv.appointmentViewInfo = null;
  _aspxRecycleNode(viewInfo.adornerDiv);
  viewInfo.adornerDiv = null;
 },
 SelectAppointmentViewInfo: function (viewInfo) {
  var adornerDiv = this.SelectAppointmentViewInfoCore(viewInfo);
  _aspxClearCurrentMouseEventDataObject();
  _aspxSubscribeSchedulerMouseEvents(adornerDiv, viewInfo);
  this.selectedAppointmentViewInfos.push(viewInfo);
 },
 SelectAppointmentViewInfoCore: function (viewInfo) {
  var adornerDiv = this.aptAdorner.cloneNode(true);
  adornerDiv.oncontextmenu = this.aptAdorner.oncontextmenu;
  var appointmentDiv = viewInfo.contentDiv;
  var parent = appointmentDiv.parentNode;
  parent.appendChild(adornerDiv);
  adornerDiv.appointmentViewInfo = viewInfo;
  viewInfo.adornerDiv = adornerDiv;
  this.SetAdornerDivPosition(viewInfo);
  adornerDiv.style.zIndex = 2;
  appointmentDiv.style.zIndex = 3;
  return adornerDiv;
 },
 RecalcSelection: function () {
  var count = this.selectedAppointmentViewInfos.length;
  for (var i = 0; i < count; i++)
   this.SetAdornerDivPosition(this.selectedAppointmentViewInfos[i]);
 },
 SetAdornerDivPosition: function (viewInfo) {
  var adornerDiv = viewInfo.adornerDiv;
  var appointmentDiv = viewInfo.contentDiv;
  _aspxSetSchedulerDivDisplay(adornerDiv, true);
  var borderWidth = Math.max(adornerDiv.offsetWidth - adornerDiv.clientWidth, 0) >> 1;
  var borderHeight = Math.max(adornerDiv.offsetHeight - adornerDiv.clientHeight, 0) >> 1;
  var offsetLeft = appointmentDiv.offsetLeft;
  var offsetTop = appointmentDiv.offsetTop;
  if (__aspxIE && __aspxBrowserMajorVersion >= 8) {
   var offsetParent = _aspxFindOffsetParent(appointmentDiv);
   offsetLeft = _aspxGetAbsolutePositionX(appointmentDiv) - _aspxGetAbsolutePositionX(offsetParent);
   offsetTop = _aspxGetAbsolutePositionY(appointmentDiv) - _aspxGetAbsolutePositionY(offsetParent);
   if (offsetParent.getBoundingClientRect().top < 0)
    offsetTop++;
   if (offsetParent.getBoundingClientRect().left < 0)
    offsetLeft++;
  }
  adornerDiv.style.left = offsetLeft - borderWidth + "px"; 
  adornerDiv.style.top = offsetTop - borderHeight + "px"; 
  adornerDiv.style.width = appointmentDiv.offsetWidth + "px";
  adornerDiv.style.height = appointmentDiv.offsetHeight + "px";
  adornerDiv.appointmentDiv = appointmentDiv;
  this.CalculateContentTableHeight(adornerDiv);
 },
 CalculateContentTableHeight: function (adornerDiv) {
  var children = adornerDiv.childNodes;
  var count = children.length;
  for (var i = 0; i < count; i++) {
   var child = children[i];
   if (_aspxIsExists(child.tagName) && child.tagName.toUpperCase() == "TABLE") {
    child.style.height = adornerDiv.offsetHeight + "px";
    break;
   }
  }
 }
});
ASPxCellHighlightElement = _aspxCreateClass(null, {
 constructor: function(container, left, dxtop, width, height, interval) {
  this.left = left;
  this.top = dxtop;
  this.width = width;
  this.height = height;
  this.interval = interval;
  this.container = container;
 }
});
TimeMarkerViewInfoBase = _aspxCreateClass(null, { 
 constructor: function (scheduler, viewInfo, timeMarkerLineSource, layer) {
  this.scheduler = scheduler;
  this.viewInfo = viewInfo;
  this.layer = layer;
  this.timeMarkerLineSource = timeMarkerLineSource;
 },
 Dispose: function () {
  if(this.timeMarkerLineCollection) {
   this.timeMarkerLineCollection = null;
  }
 },
 Recalc: function () {
  if(!this.scheduler.showTimeMarker) {
   _aspxSetElementDisplay(this.layer, false)
  }
  else
   _aspxSetElementDisplay(this.layer, true)
  var time = new Date();
  var newLocalTime = time.getTime() + time.getTimezoneOffset() * 60000 + this.scheduler.clientUtcOffset;
  time = new Date(newLocalTime);
  if(!this.LayoutLayer(time)) {
   _aspxSetElementDisplay(this.layer, false)
   return;
  }
  this.LayoutTimeMarkerLines(time);
  this.LayoutExtraItems(time);
 },
 LayoutLayer: function (time) {
  var cellContainers = this.viewInfo.cellContainers;
  if(cellContainers.length <= 0)
   return false;
  var container = cellContainers[0];
  var cell = this.FindBaseCellForLayer(container, time);
  if(!cell)
   return false;
  var x = this.CalculateLayerX(time, cell, container);
  var y = this.CalculateLayerY(time, cell, container);
  var timeMarkerLayer = this.layer;
  timeMarkerLayer.style.position = "absolute";
  timeMarkerLayer.style.left = x + "px";
  timeMarkerLayer.style.top = y + "px";
  timeMarkerLayer.style.zIndex = "10";
  return true;
 },
 FindBaseCellForLayer: function (container, time) { 
 },
 CalculateLayerX: function (cell, time) {
  return 0;
 },
 CalculateLayerY: function (cell, time) {
  return 0;
 },
 LayoutTimeMarkerLines: function (time) {
  var cellContainers = this.viewInfo.cellContainers;
  if(cellContainers.length <= 0)
   return;
  var containers = this.viewInfo.FindCellContainersByTimeInterval(time, time);
  var count = containers.length;
  if(count <= 0)
   return;
  if(this.timeMarkerLineCollection == null) {
   this.timeMarkerLineCollection = [];
   for(var i = 0;i < count;i++) {
    this.timeMarkerLineCollection.push(this.CreateTodayTimeMarkerLine());
   }
  }
  for(var i = 0;i < count;i++) {
   var container = containers[i];
   var todayCell = this.viewInfo.FindStartCellByTime(container, time);
   if(!todayCell)
    continue;
   var timeMarkerLine = this.timeMarkerLineCollection[i];
   timeMarkerLine.style.position = "absolute";
   this.LayoutTimeMarkerLine(timeMarkerLine, todayCell);
   _aspxSetElementDisplay(timeMarkerLine, true)
  }
 },
 LayoutTimeMarkerLine: function (timeMarkerLine, todayCell) {
 },
 LayoutExtraItems: function (time) {
 },
 CreateTodayTimeMarkerLine: function () {
  var timeMarkerLine = this.timeMarkerLineSource.cloneNode(true);
  _aspxSetElementDisplay(timeMarkerLine, false);
  this.viewInfo.parent.AppendChildToLayer(timeMarkerLine, this.layer);
  return timeMarkerLine;
 }
});
ASPxVerticalTimeMarkerViewInfo = _aspxCreateClass(TimeMarkerViewInfoBase, {
 CalculateLayerX: function(containerTime, cell) {
  var cellInterval = this.scheduler.GetCellInterval(cell);
  var cellDuration = cellInterval.duration;
  var cellWidth = cell.offsetWidth;
  var remainderDuration = _aspxDateSubsWithTimezone(containerTime, cellInterval.GetStart());
  return cell.offsetLeft + cellWidth * remainderDuration / cellDuration;
 },
 LayoutTimeMarkerLine: function(timeMarkerLine, todayCell) {
  timeMarkerLine.style.height = todayCell.offsetHeight + "px";
  timeMarkerLine.style.top = todayCell.offsetTop + "px";
 },
 FindBaseCellForLayer: function(container, time) {
  return this.viewInfo.FindStartCellByTime(container, time);
 }
});
ASPxHorizontalTimeMarkerViewInfo = _aspxCreateClass(TimeMarkerViewInfoBase, {
 constructor: function (scheduler, viewInfo, timeMarkerImageSource, timeMarkerLineSource, layer) {
  this.constructor.prototype.constructor.call(this, scheduler, viewInfo, timeMarkerLineSource, layer);
  this.timeMarkerImageSource = timeMarkerImageSource;
 },
 Dispose: function () {
  this.constructor.prototype.Dispose(this);
  if (!this.timeMarkerImage) {
   var timeRulers = this.scheduler.GetTimeRulers();
   if (timeRulers && timeRulers.length < 1) {
    var timeRulerCount = timeRulers.length;
    for (var i = 0; i < timeRulerCount; i++)
     _aspxRecycleNode(this.timeMarkerImage[i]);
   }
   this.timeMarkerImage = null;
  }
 },
 CalculateLayerY: function (time, cell, container) {
  var adaptedContainerTime = this.viewInfo.GetAdaptedContainerTime(container, time);
  var cellInterval = this.scheduler.GetCellInterval(cell);
  var cellDuration = cellInterval.duration;
  var cellHeight = cell.offsetHeight;
  var remainderDuration = _aspxDateSubsWithTimezone(adaptedContainerTime, cellInterval.GetStart());
  return cell.offsetTop + cellHeight * remainderDuration / cellDuration;
 },
 LayoutTimeMarkerLine: function (timeMarkerLine, todayCell) {
  timeMarkerLine.style.left = todayCell.offsetLeft + "px";
  timeMarkerLine.style.width = todayCell.clientWidth + "px";
 },
 LayoutExtraItems: function (time) {
  this.LayoutTimeMarkerImage(time);
 },
 LayoutTimeMarkerImage: function (time) {
  var timeRulers = this.scheduler.GetTimeRulers();
  if (!timeRulers || timeRulers.length < 1)
   return;
  var timeRulerCount = timeRulers.length;
  if (!this.timeMarkerImage) {
   this.timeMarkerImage = [];
   for (var i = 0; i < timeRulerCount; i++)
    this.timeMarkerImage.push(this.CreateTimeMarkerImage());
  }
  var timeMarkerLayer = this.scheduler.verticalParent.timeMarkerLayer;
  for (var i = 0; i < timeRulerCount; i++)
   this.timeMarkerImage[i].style.position = "absolute";
  for (var i = 0; i < timeRulerCount; i++) {
   var timeRuler = timeRulers[i];
   var rulerCell = timeRuler.GetAnchorCell(this.scheduler);
   var posX = rulerCell.offsetLeft;
   this.timeMarkerImage[i].style.left = posX + "px";
   _aspxSetElementDisplay(this.timeMarkerImage[i], timeRuler.IsVisible());
  }
 },
 CreateTimeMarkerImage: function () {
  var timeMarkerImage = this.timeMarkerImageSource.cloneNode(true);
  _aspxSetElementDisplay(timeMarkerImage, false);
  this.viewInfo.parent.AppendChildToLayer(timeMarkerImage, this.layer);
  return timeMarkerImage;
 },
 FindBaseCellForLayer: function (container, time) {
  return this.viewInfo.FindStartCellByTimeOfDay(container, time);
 }
});
ASPxCellHighlightViewInfo = _aspxCreateClass(null, {
 constructor: function (scheduler, viewInfo, divTemplate, layer) {
  this.scheduler = scheduler;
  this.viewInfo = viewInfo;
  this.parent = viewInfo.parent;
  this.divTemplate = divTemplate;
  this.highlightDivs = new Array();
  this.highlightElements = new Array();
  this.highlightDivCache = new Array();
  this.layer = layer;
 },
 HighlightCells: function (interval, resource, highlightPartiallySelectedCell, selectionVisible) {
  if (!_aspxIsExists(interval) || !_aspxIsExists(resource))
   return;
  this.RemovePrevCellHighlight();
  if (selectionVisible) {
   this.CreateHighlightElements(interval, resource, highlightPartiallySelectedCell);
   this.CreateHighlightDivs();
  }
 },
 RemovePrevCellHighlight: function () {
  var count = this.highlightDivs.length;
  for (var i = 0; i < count; i++) {
   this.ReleaseHighlightDiv(this.highlightDivs[i]);
  }
  _aspxArrayClear(this.highlightDivs);
  _aspxArrayClear(this.highlightElements);
 },
 CreateHighlightElements: function (interval, resource, highlightPartiallySelectedCell) {
  var cellContainers = this.viewInfo.cellContainers;
  var count = cellContainers.length;
  var viewInfo = this.viewInfo;
  for (var i = 0; i < count; i++) {
   var container = cellContainers[i];
   if (container.resource != resource || !container.interval.IntersectsWithExcludingBounds(interval))
    continue;
   if (interval.Contains(container.interval)) {
    this.HighlightContainer(container);
    continue;
   }
   var cellCount = container.cellCount;
   for (var j = 0; j < cellCount; j++) {
    var cell = this.viewInfo.GetCell(i, j);
    if (_aspxIsExists(cell)) {
     var cellInterval = this.scheduler.GetCellInterval(cell);
     var highlightCell;
     if (highlightPartiallySelectedCell)
      highlightCell = cellInterval.IntersectsWithExcludingBounds(interval);
     else
      highlightCell = interval.Contains(cellInterval);
     if (highlightCell)
      this.HighlightCell(cell);
    }
   }
  }
 },
 CreateHighlightDivs: function () {
  var count = this.highlightElements.length;
  for (var i = 0; i < count; i++) {
   var element = this.highlightElements[i];
   var highlightDiv = this.CreateHighlightDiv(element);
   if (_aspxIsExists(this.scheduler.selectionToolTip)) {
    _aspxSubscribeSchedulerMouseEvents(highlightDiv, highlightDiv);
    highlightDiv.mouseEvents = new ASPxSchedulerMouseEvents();
    _aspxAddToolTip(highlightDiv, this.scheduler.selectionToolTip);
   }
   this.highlightDivs.push(highlightDiv);
  }
 },
 CreateHighlightDiv: function (highlightElement) {
  var highlightDiv = this.CreateHightlightDiv();
  highlightDiv.style.height = "0px";
  highlightDiv.container = highlightElement.container;
  highlightDiv.style.left = highlightElement.left + "px";
  highlightDiv.style.top = highlightElement.top + "px";
  highlightDiv.style.width = highlightElement.width + "px";
  highlightDiv.style.height = highlightElement.height + "px";
  _aspxSetElementDisplay(highlightDiv, true);
  highlightDiv.style.display = "inline";
  return highlightDiv;
 },
 CreateHightlightDiv: function () {
  if (this.highlightDivCache.length > 0)
   return this.highlightDivCache.pop();
  else {
   var highlightDiv = this.divTemplate.cloneNode(true);
   highlightDiv.oncontextmenu = highlightDiv;
   _aspxSetElementDisplay(highlightDiv, false);
   this.viewInfo.parent.AppendChildToLayer(highlightDiv, this.layer); 
   return highlightDiv;
  }
 },
 ReleaseHighlightDiv: function (div) {
  this.highlightDivCache.push(div);
  _aspxSetElementDisplay(div, false);
 },
 HighlightContainer: function (container) {
  if (!this.IsValidContainer(container))
   return;
  var bounds = this.parent.CalcRelativeContainerBounds(this.viewInfo, container);
  if (!_aspxIsExists(bounds))
   return;
  var left = bounds.left;
  var dxtop = bounds.top;
  var width = bounds.width;
  var height = bounds.height;
  var newHighlightElement = new ASPxCellHighlightElement(container, left, dxtop, width, height, container.interval);
  this.highlightElements.push(newHighlightElement);
 },
 HighlightCell: function (cell) {
  var findResult = this.FindAdjacentHighlightElement(cell);
  if (_aspxIsExists(findResult)) {
   var highlightElement = findResult.highlightElement;
   if (_aspxIsExists(findResult.newLeft))
    highlightElement.left = findResult.newLeft;
   if (_aspxIsExists(findResult.newTop))
    highlightElement.top = findResult.newTop;
   if (_aspxIsExists(findResult.newRight))
    highlightElement.width = findResult.newRight - highlightElement.left;
   if (_aspxIsExists(findResult.newBottom))
    highlightElement.height = findResult.newBottom - highlightElement.top;
   if (_aspxIsExists(findResult.newStartTime))
    highlightElement.interval.SetStart(findResult.newStartTime);
   if (_aspxIsExists(findResult.newEndTime))
    highlightElement.interval.SetEnd(findResult.newEndTime);
  }
  else {
   var container = this.scheduler.GetCellContainer(cell);
   if (!this.IsValidContainer(container))
    return;
   var left = this.parent.CalcRelativeElementLeft(cell);
   var dxtop = this.parent.CalcRelativeElementTop(cell);
   var width = cell.offsetWidth;
   var height = this.parent.CalcCellHeight(cell);
   var startTime = this.scheduler.GetCellStartTime(cell);
   var endTime = this.scheduler.GetCellEndTime(cell);
   if (!_aspxIsExists(container) || !_aspxIsExists(left) || !_aspxIsExists(dxtop) || !_aspxIsExists(width) || !_aspxIsExists(height) || !_aspxIsExists(startTime) || !_aspxIsExists(endTime))
    return;
   var interval = new ASPxClientTimeInterval(startTime, _aspxDateSubsWithTimezone(endTime, startTime));
   var newHighlightElement = new ASPxCellHighlightElement(container, left, dxtop, width, height, interval);
   this.highlightElements.push(newHighlightElement);
  }
 },
 FindAdjacentHighlightElement: function (cell) {
  var count = this.highlightElements.length;
  var startTime = this.scheduler.GetCellStartTime(cell);
  var endTime = this.scheduler.GetCellEndTime(cell);
  var container = this.scheduler.GetCellContainer(cell);
  if (!_aspxIsExists(startTime) || !_aspxIsExists(endTime) || !_aspxIsExists(container))
   return null;
  for (var i = 0; i < count; i++) {
   var highlightElement = this.highlightElements[i];
   if (highlightElement.container != container)
    continue;
   var highlightInterval = highlightElement.interval;
   var cellBeforeHighlight = (highlightInterval.GetStart() - endTime) == 0;
   var cellAfterHighlight = (highlightInterval.GetEnd() - startTime) == 0;
   if (!cellBeforeHighlight && !cellAfterHighlight)
    continue;
   var result = new Object();
   if (cellBeforeHighlight)
    result.newStartTime = startTime;
   if (cellAfterHighlight)
    result.newEndTime = endTime;
   if (this.IsVisuallyAdjacent(highlightElement, cell, result)) {
    result.highlightElement = highlightElement;
    return result;
   }
  }
  return null;
 }
});
ASPxHorizontalCellHighlightViewInfo = _aspxCreateClass(ASPxCellHighlightViewInfo, {
 constructor: function(scheduler, viewInfo, divTemplate, layer) {
  this.constructor.prototype.constructor.call(this, scheduler, viewInfo, divTemplate, layer);
 },
 IsValidContainer: function(container) {
  return _aspxIsExists(container.isVertical) && (!container.isVertical);
 },
 IsVisuallyAdjacent: function (highlightElement, cell, result) {
  var cellTop = this.parent.CalcRelativeElementTop(cell);
  var cellHeight = this.parent.CalcCellHeight(cell);
  if(cellTop == highlightElement.top && cellHeight == highlightElement.height) {
   var cellLeft = this.parent.CalcRelativeElementLeft(cell);
   result.newLeft = Math.min(cellLeft, highlightElement.left);
   result.newRight = Math.max(this.parent.CalcRelativeElementRight(cell), highlightElement.left + highlightElement.width);    
   return true;
  }
 }
});
ASPxVerticalCellHighlightViewInfo = _aspxCreateClass(ASPxCellHighlightViewInfo, {
 constructor: function(scheduler, viewInfo, divTemplate, layer) {
  this.constructor.prototype.constructor.call(this, scheduler, viewInfo, divTemplate, layer);
 },
 IsValidContainer: function(container) {
  return _aspxIsExists(container.isVertical) && container.isVertical;
 },
 IsVisuallyAdjacent: function(highlightElement, cell, result) {
  var cellLeft = this.parent.CalcRelativeElementLeft(cell);
  if(cellLeft == highlightElement.left && cell.offsetWidth == highlightElement.width) {
   var cellTop = this.parent.CalcRelativeElementTop(cell);
   result.newTop = Math.min(cellTop, highlightElement.top);
   result.newBottom = Math.max(this.parent.CalcRelativeElementBottom(cell), highlightElement.top + highlightElement.height);    
   return true;
  }
 } 
});

var _aspxSchedulerMoreButtonId = "moreButton";
ASPxClientCellDurationIterator = _aspxCreateClass(null, {
 constructor: function(durations) {
  this.durations = durations;
  this.start();
 },
 start: function() {
  this.currentDurationIndex = -1;
  this.restDurationCount = 0;
 },
 getNextDuration: function() {
  if(this.restDurationCount == 0) {
   this.currentDurationIndex++;
   this.restDurationCount = this.durations[2 * this.currentDurationIndex];
   this.currentDuration = this.durations[2 * this.currentDurationIndex + 1];
  }
  this.restDurationCount--;
  return this.currentDuration;
 }
});
ASPxSchedulerContainer = _aspxCreateClass(null, {
 constructor: function (containerIndex, index, startTime, cellCount, cellDurationInfos, resource, isVertical, cellsLocation, middleCompressedCellsHeaderLocation) {
  this.index = index;
  this.cellCount = cellCount;
  this.cellDurationInfos = cellDurationInfos;
  this.containerIndex = containerIndex;
  this.resource = resource;
  this.interval = new ASPxClientTimeInterval(startTime, this.GetTotalContainerDuration(cellDurationInfos));
  this.isVertical = isVertical;
  this.privateCellsLocation = cellsLocation;
  this.cellsLocation = this.ExpandCellsLocation(cellsLocation);
  if (middleCompressedCellsHeaderLocation)
   this.middleCompressedCellsHeaderLocation = this.ExpandCellLocation(middleCompressedCellsHeaderLocation);
  this.initializedCells = new Array();
 },
 GetTotalContainerDuration: function (cellDurationInfos) {
  this.cellTimes = new Array();
  var count = cellDurationInfos.length;
  var totalDuration = 0;
  for (var i = 0; i < count; i += 2) {
   this.cellTimes.push(totalDuration);
   totalDuration += cellDurationInfos[i] * cellDurationInfos[i + 1];
  }
  this.cellTimes.push(totalDuration);
  return totalDuration;
 },
 ExpandCellsLocation: function (cellsLocation) {
  var result = new Array();
  var count = cellsLocation.length;
  for (var i = 0; i < count; i++) {
   this.ExpandCellsLocationCore(cellsLocation[i], result);
  }
  return result;
 },
 ExpandCellsLocationCore: function (cellsLocation, result) {
  var count = cellsLocation[0];
  for (var i = 0; i < count; i++) {
   var position = this.ExpandCellLocation(cellsLocation);
   if (this.isVertical)
    position.row += i;
   else
    position.column += i;
   result.push(position);
  }
 },
 ExpandCellLocation: function (cellLocation) {
  var row = cellLocation[1];
  var column = cellLocation[2];
  var position = new Object();
  position.row = cellLocation[1];
  position.column = cellLocation[2]
  position.isCompressed = (cellLocation[3]) ? true : false;
  return position;
 },
 GetCellLocation: function (cellIndex) {
  return this.cellsLocation[cellIndex];
 },
 GetMiddleCompressedCellsHeaderLocation: function () {
  return this.middleCompressedCellsHeaderLocation;
 },
 InitializeCell: function (cell, cellIndex) {
  var cellDurations = this.cellDurationInfos;
  var time = this.interval.GetStart();
  var durationIndex = 0;
  var duration;
  while (cellIndex >= cellDurations[durationIndex]) {
   var cellCount = cellDurations[durationIndex];
   if (cellCount > 0) {
    cellIndex -= cellCount;
    duration = cellDurations[durationIndex] * cellDurations[durationIndex + 1];
   }
   else
    duration = -cellDurations[durationIndex + 1];
   time = _aspxDateIncreaseWithUtcOffset(time, duration);
   durationIndex += 2;
  }
  duration = cellDurations[durationIndex + 1];
  var cellStart = _aspxDateIncreaseWithUtcOffset(time, cellIndex * duration);
  var cellEnd = _aspxDateIncreaseWithUtcOffset(cellStart, duration);
  cell.interval = new ASPxClientTimeInterval(cellStart, duration);
  cell.resource = this.resource;
  cell.container = this;
  this.initializedCells.push(cell);
 },
 ClearInitializedCells: function () {
  var count = this.initializedCells.length;
  for (var i = 0; i < count; i++) {
   var cell = this.initializedCells[i];
   cell.interval = null;
   cell.resource = null;
   cell.container = null;
  }
 }
});
ASPxSchedulerViewInfo = _aspxCreateClass(null, {
 constructor: function (scheduler, prevViewInfo, usePrevCache) {
  this.scheduler = scheduler;
  this.appointmentViewInfos = new Array();
  this.cellContainers = new Array();
  this.isVertical = null;
  if (_aspxIsExists(prevViewInfo) && usePrevCache) {
   this.ClearPrevContainers(prevViewInfo.cellContainers);
   this.cachedCells = prevViewInfo.cachedCells;
  }
  else {
   this.cachedCells = null;
  }
 },
 ClearPrevContainers: function (containers) {
  var count = containers.length;
  for (var i = 0; i < count; i++) {
   containers[i].ClearInitializedCells();
  }
 },
 Initialize: function (table) {
  this.table = table;
  if (!this.cachedCells)
   this.cachedCells = new Object();
 },
 Dispose: function () {
  var count = this.appointmentViewInfos.length;
  for (var i = 0; i < count; i++)
   this.DisposeAppointmentViewInfo(this.appointmentViewInfos[i]);
 },
 DisposeAppointmentViewInfo: function (appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv;
  if (!_aspxIsExists(appointmentDiv))
   return;
  _aspxUnsubscribeSchedulerMouseEvents(appointmentDiv, appointmentViewInfo);
 },
 Prepare: function (parent) {
  this.parent = parent;
  var count = this.appointmentViewInfos.length;
  parent.PrepareAppointmentLayer(count);
  for (var i = 0; i < count; i++) {
   var viewInfo = this.appointmentViewInfos[i];
   var div = this.scheduler.GetAppointmentDivById(viewInfo.divId);
   if (!_aspxIsExists(div))
    continue;
   viewInfo.contentDiv = div;
   viewInfo.contentDiv.appointmentId = viewInfo.appointmentId;
   div.appointmentViewInfo = viewInfo;
   if (div.parentNode != parent.appointmentLayer)
    parent.AppendChildToAppointmentLayer(div); 
  }
  this.selectionViewInfo = this.CreateSelectionViewInfoCore();
 },
 GetAdaptedContainerTime: function (cellContainer, dateTime) {
  var containerStart = cellContainer.interval.GetStart();
  var dayTimeDelta = _aspxDateSubsWithTimezone(dateTime, containerStart);
  var dateTimeDuration = Math.abs(dayTimeDelta);
  var dayTime = dateTimeDuration % (24 * 60 * 60 * 1000); 
  if (dayTimeDelta < 0)
   dayTime = 24 * 60 * 60 * 1000 - dayTime;
  var containerTime = _aspxDateIncreaseWithUtcOffset(containerStart, dayTime);
  return containerTime;
 },
 HideAppointments: function () {
  var count = this.appointmentViewInfos.length;
  for (var i = 0; i < count; i++) {
   if (this.appointmentViewInfos[i].contentDiv != null)
    _aspxSetSchedulerDivDisplay(this.appointmentViewInfos[i].contentDiv, false);
  }
 },
 ShowCellSelection: function (interval, resource, highlightPartiallySelectedCell, selectionVisible) {
  if (_aspxIsExists(interval) && _aspxIsExists(resource))
   this.selectionViewInfo.HighlightCells(interval, resource, highlightPartiallySelectedCell, selectionVisible);
 },
 AddCellContainer: function (containerIndex, cellCount, containerStartTime, cellDurationInfos, resource, cellsLocations, middleCompressedCellsHeaderLocation) {
  var container = new ASPxSchedulerContainer(containerIndex, this.cellContainers.length, containerStartTime, cellCount, cellDurationInfos, resource, this.isVertical, cellsLocations, middleCompressedCellsHeaderLocation);
  this.cellContainers.push(container);
 },
 InitializeCell: function (cell, containerIndex, cellIndex) {
  this.cellContainers[containerIndex].InitializeCell(cell, cellIndex);
 },
 GetCellById: function (id) {
  return this.cachedCells[id];
 },
 GetCell: function (containerIndex, index) {
  var hashCode = (containerIndex << 16) + index;
  var result = this.cachedCells[hashCode];
  if (!_aspxIsExists(result)) {
   var container = this.cellContainers[containerIndex];
   if (!_aspxIsExists(container))
    return null;
   var loc = container.GetCellLocation(index);
   if (_aspxIsExists(loc)) {
    result = this.table.rows[loc.row].cells[loc.column];
    this.cachedCells[hashCode] = result;
   }
  }
  return result;
 },
 GetMiddleCompressedCellsHeader: function (containerIndex) {
  var container = this.cellContainers[containerIndex];
  var loc = container.GetMiddleCompressedCellsHeaderLocation();
  if (!loc)
   return null;
  return this.table.rows[loc.row].cells[loc.column];
 },
 FindCellContainerByTimeInterval: function (start, end) {
  var interval = new ASPxClientTimeInterval(start, _aspxDateSubsWithTimezone(end, start));
  var index = _aspxArrayBinarySearch(this.cellContainers, interval, this.ContainerWithIntervalComparer);
  if (index < 0)
   return null;
  else
   return this.cellContainers[index];
 },
 FindCellContainersByTimeInterval: function (start, end) {
  var interval = new ASPxClientTimeInterval(start, _aspxDateSubsWithTimezone(end, start));
  var result = [];
  var count = this.cellContainers.length;
  for (var i = 0; i < count; i++) {
   var container = this.cellContainers[i];
   if (this.ContainerWithIntervalComparer(this.cellContainers, i, interval) == 0)
    result.push(container);
  }
  return result;
 },
 FindStartCellIndexByTime: function (cellContainer, time) {
  var start = cellContainer.interval.GetStart();
  var durations = cellContainer.cellDurationInfos;
  var count = durations.length;
  var cellCount = 0;
  var i = 0;
  for (; i < count - 2; i += 2) {
   var duration = durations[i] * durations[i + 1];
   if (duration > 0) {
    if ((start - time) + duration > 0) {
     break;
    }
    cellCount += durations[i];
   }
   else {
    duration = -durations[i + 1];
    if (start - time + duration > 0)
     return cellCount;
   }
   start = _aspxDateIncrease(start, duration);
  }
  var dif = _aspxDateSubsWithTimezone(time, start); 
  var rem = dif % durations[i + 1];
  return (dif - rem) / durations[i + 1] + cellCount;
 },
 FindStartCellByTime: function (cellContainer, time) {
  return this.GetCell(cellContainer.index, this.FindStartCellIndexByTime(cellContainer, time));
 },
 FindEndCellIndexByTime: function (cellContainer, time) {
  var start = cellContainer.interval.GetStart();
  var durations = cellContainer.cellDurationInfos;
  var count = durations.length;
  var cellCount = 0;
  var i = 0;
  for (; i < count - 2; i += 2) {
   var duration = durations[i] * durations[i + 1];
   if (duration > 0) {
    if ((start - time) + duration > 0) {
     break;
    }
    cellCount += durations[i];
   }
   else {
    duration = -durations[i + 1];
    if (start - time + duration > 0)
     return cellCount - 1;
   }
   start = _aspxDateIncrease(start, duration);
  }
  var dif = _aspxDateSubsWithTimezone(time, start); 
  var rem = dif % durations[i + 1];
  var cellIndex = (dif - rem) / durations[i + 1] + cellCount;
  if (rem == 0 && cellIndex > 0)
   cellIndex--;
  return Math.min(cellIndex, cellContainer.cellCount - 1);
 },
 FindEndCellByTime: function (cellContainer, time) {
  return this.GetCell(cellContainer.index, this.FindEndCellIndexByTime(cellContainer, time));
 },
 ContainerWithIntervalComparer: function (array, index, interval) {
  var container = array[index];
  var conteinerInterval = container.interval;
  if (conteinerInterval.GetStart() > interval.GetEnd())
   return 1;
  if (conteinerInterval.GetEnd() < interval.GetStart())
   return -1;
  return 0;
 },
 AddViewInfo: function (viewInfo) {
  this.appointmentViewInfos.push(viewInfo);
 },
 RemoveViewInfo: function (viewInfo) {
  _aspxArrayRemove(this.appointmentViewInfos, viewInfo);
 },
 FindCellByPosition: function (containerIndex, firstCellIndex, lastCellIndex, x, y) {
  if (_aspxIsExists(containerIndex))
   return this.FindCellByPositionCore(containerIndex, firstCellIndex, lastCellIndex, x, y);
  var count = this.cellContainers.length;
  for (var i = 0; i < count; i++) {
   var container = this.cellContainers[i];
   var lastCellIndex = container.cellCount - 1;
   if (!this.IsPointInsideContainer(i, 0, lastCellIndex, x, y))
    continue;
   var result = this.FindCellByPositionCore(i, 0, lastCellIndex, x, y);
   if (_aspxIsExists(result))
    return result;
  }
  return null;
 },
 FindCellByPositionSlow: function (x, y) {
  var count = this.cellContainers.length;
  for (var i = 0; i < count; i++) {
   var container = this.cellContainers[i];
   var lastCellIndex = container.cellCount - 1;
   if (!this.IsPointInsideContainer(i, 0, lastCellIndex, x, y))
    continue;
   var result = this.FindCellByPositionCore(i, 0, lastCellIndex, x, y);
   if (_aspxIsExists(result))
    return result;
  }
  return null;
 },
 IsPointInsideContainer: function (containerIndex, firstCellIndex, lastCellIndex, x, y) {
  var firstCell = this.GetCell(containerIndex, firstCellIndex);
  var lastCell = this.GetCell(containerIndex, lastCellIndex);
  if (!_aspxIsExists(firstCell) || !_aspxIsExists(lastCell))
   return false;
  var dxtop = this.parent.CalcRelativeElementTop(firstCell);
  if (y < dxtop)
   return false;
  var bottom = this.parent.CalcRelativeElementBottom(lastCell);
  if (y > bottom)
   return false;
  var left = this.parent.CalcRelativeElementLeft(firstCell);
  if (x < left)
   return false;
  var right = this.parent.CalcRelativeElementRight(lastCell);
  if (x > right)
   return false;
  return true;
 },
 FindCellByPositionCore: function (containerIndex, firstCellIndex, lastCellIndex, x, y) {
  var firstCell = this.GetCell(containerIndex, firstCellIndex);
  var lastCell = this.GetCell(containerIndex, lastCellIndex);
  if (!_aspxIsExists(firstCell) || !_aspxIsExists(lastCell))
   return null;
  if (this.CompareCellAndPosition(x, y, firstCell) < 0) 
   return null;
  if (this.CompareCellAndPosition(x, y, lastCell) > 0) 
   return null;
  while (firstCellIndex <= lastCellIndex) {
   var cellIndex = (firstCellIndex + lastCellIndex) >> 1;
   var cell = this.GetCell(containerIndex, cellIndex);
   var result = this.CompareCellAndPosition(x, y, cell);
   if (result == 0)
    return cell;
   if (result < 0)
    lastCellIndex = cellIndex - 1;
   else
    firstCellIndex = cellIndex + 1;
  }
  return null;
 },
 FindViewInfosByAppointmentId: function (appointmentId) {
  var result = new Array();
  var count = this.appointmentViewInfos.length;
  for (var i = 0; i < count; i++) {
   var viewInfo = this.appointmentViewInfos[i];
   if (viewInfo.appointmentId == appointmentId)
    result.push(viewInfo);
  }
  return result;
 },
 RemoveViewInfosByAppointmentId: function (appointmentId) {
  var viewInfos = this.FindViewInfosByAppointmentId(appointmentId);
  var count = viewInfos.length;
  for (var i = 0; i < count; i++) {
   var viewInfo = viewInfos[i];
   this.RemoveViewInfo(viewInfo);
   _aspxRecycleNode(viewInfo.contentDiv);
   viewInfo.contentDiv = null;
  }
 },
 OnAppointmentMouseOver: function (appointmentViewInfo) {
  var div = appointmentViewInfo.contentDiv;
  var resizeDivs = new Array();
  if (appointmentViewInfo.CanResizeAtTop())
   resizeDivs.push(this.ShowResizeDiv(appointmentViewInfo, this.scheduler.topResizeDiv, 0, 0, div.clientWidth, null));
  if (appointmentViewInfo.CanResizeAtLeft())
   resizeDivs.push(this.ShowResizeDiv(appointmentViewInfo, this.scheduler.leftResizeDiv, 0, 0, null, div.clientHeight));
  if (appointmentViewInfo.CanResizeAtBottom())
   resizeDivs.push(this.ShowResizeDiv(appointmentViewInfo, this.scheduler.bottomResizeDiv, 0, null, div.clientWidth, null));
  if (appointmentViewInfo.CanResizeAtRight())
   resizeDivs.push(this.ShowResizeDiv(appointmentViewInfo, this.scheduler.rightResizeDiv, null, 0, null, div.clientHeight));
  if (resizeDivs.length > 0)
   appointmentViewInfo.contentDiv.resizeDivs = resizeDivs;
 },
 OnAppointmentMouseOut: function (appointmentViewInfo) {
  this.HideResizeDivs(appointmentViewInfo);
 },
 ShowResizeDiv: function (viewInfo, resizeDiv, left, dxtop, width, height) {
  var appointmentDiv = viewInfo.contentDiv;
  var offsetX = 0;
  var offsetY = 0;
  var targetDiv = appointmentDiv;
  var clone = resizeDiv.cloneNode(true);
  _aspxSetElementDisplay(clone, true);
  targetDiv.appendChild(clone);
  if (!_aspxIsExists(width))
   width = clone.offsetWidth;
  if (!_aspxIsExists(height))
   height = clone.offsetHeight;
  if (!_aspxIsExists(left))
   left = appointmentDiv.clientWidth - width;
  if (!_aspxIsExists(dxtop))
   dxtop = appointmentDiv.clientHeight - height;
  clone.style.left = left + offsetX + "px";
  clone.style.top = dxtop + offsetY + "px";
  clone.style.width = width + "px";
  clone.style.height = height + "px";
  return clone;
 },
 HideResizeDivs: function (viewInfo) {
  var appointmentDiv = viewInfo.contentDiv;
  var targetDiv = appointmentDiv;
  if (!_aspxIsExists(targetDiv.resizeDivs))
   return;
  var count = appointmentDiv.resizeDivs.length;
  for (var i = 0; i < count; i++) {
   var resizeDiv = appointmentDiv.resizeDivs[i];
   if (_aspxIsExists(resizeDiv) && resizeDiv.parentNode == targetDiv) {
    _aspxRemoveChildFromParent(targetDiv, resizeDiv);
   }
  }
  appointmentDiv.resizeDivs = null;
 }
});
function _aspxCreateDelegate(method, object, args) {
 function handler(e) {
  if(_aspxIsExists(object)) {
   var delegateArgs = new Array();
   var count = arguments.length;
   for(var i=0; i<count; i++) 
    delegateArgs.push(arguments[i]);
   if (_aspxIsExists(args)) 
    delegateArgs.push(args);
   return method.apply(object, delegateArgs);
  }
  else
   return method(e, args);
 }
 return handler;
}
ASPxMoreButtonHelper = _aspxCreateClass(null, {
 constructor: function (schedulerViewInfo) {
  this.schedulerViewInfo = schedulerViewInfo;
  this.scheduler = schedulerViewInfo.scheduler;
  this.moreButtonParent = this.scheduler.containerCell;
  this.scrollContainer = this.schedulerViewInfo.parent.parentElement.parentNode;
  this.moreButtonContainers = this.CreateMoreButtonContainers(this.scrollContainer.scrollHeight);
  this.horizontalOffset = 2;
  this.verticalOffset = 2;
  this.subscribedElements = new Array();
 },
 Dispose: function () {
  var count = this.subscribedElements.length;
  for (var i = 0; i < count; i++) {
   var elem = this.subscribedElements[i];
   _aspxDetachEventFromElement(elem[0], elem[1], elem[2]);
  }
  this.subscribedElements = new Array();
 },
 CalculateMoreButtons: function () {
  var visibleTop = this.scrollContainer.scrollTop;
  var visibleBottom = visibleTop + this.scrollContainer.offsetHeight;
  var appointmentViewInfos = this.schedulerViewInfo.appointmentViewInfos;
  var count = appointmentViewInfos.length;
  this.ResetMoreButtonContainers();
  for (var i = 0; i < count; i++) {
   var viewInfo = appointmentViewInfos[i];
   var div = viewInfo.contentDiv;
   if (div == null)
    continue;
   var dxtop = div.offsetTop;
   var bottom = dxtop + div.offsetHeight;
   var moreButtonContainerObject = this.GetMoreButtonContainer(viewInfo);
   var delta = 1;
   if (__aspxFirefox)
    delta = 5;
   if ((bottom - delta) <= visibleTop) {
    if (dxtop >= moreButtonContainerObject.nearestTopAppointmentPosition) {
     moreButtonContainerObject.nearestTopAppointmentPosition = dxtop;
     moreButtonContainerObject.nearestTopAppointmentViewInfo = viewInfo;
    }
    continue;
   }
   if ((dxtop + delta) >= visibleBottom) {
    if (bottom <= moreButtonContainerObject.nearestBottomAppointmentPosition) {
     moreButtonContainerObject.nearestBottomAppointmentPosition = bottom;
     moreButtonContainerObject.nearestBottomAppointmentViewInfo = viewInfo;
    }
    continue;
   }
  }
  this.DisplayMoreButtons();
 },
 DisplayMoreButtons: function () {
  var count = this.moreButtonContainers.length;
  for (var i = 0; i < count; i++) {
   this.DisplayMoreButtonsCore(this.moreButtonContainers[i]);
  }
 },
 ResetMoreButtonContainers: function () {
  var count = this.moreButtonContainers.length;
  for (var i = 0; i < count; i++)
   this.moreButtonContainers[i].Reset(this.scrollContainer.scrollHeight);
 },
 DisplayMoreButtonsCore: function (moreButtonContainer) {
  var scrollContainer = this.scrollContainer;
  var moreButtonParent = this.moreButtonParent;
  if (_aspxIsExists(moreButtonContainer.nearestTopAppointmentViewInfo)) {
   var div = this.GetDivForContainer(moreButtonContainer, 0);
   if (!_aspxIsExists(div))
    return;
   div.targetAppointmentViewInfo = moreButtonContainer.nearestTopAppointmentViewInfo;
   var appointment = this.scheduler.GetAppointment(div.targetAppointmentViewInfo.appointmentId);
   div.targetDateTime = appointment.interval.GetStart();
   var top = _aspxGetAbsoluteY(scrollContainer) - _aspxGetAbsoluteY(moreButtonParent);
   div.style.top = top + this.verticalOffset + "px";
  }
  else
   this.HideDivForContainer(moreButtonContainer, 0);
  if (_aspxIsExists(moreButtonContainer.nearestBottomAppointmentViewInfo)) {
   var div = this.GetDivForContainer(moreButtonContainer, 1);
   if (!_aspxIsExists(div))
    return;
   div.targetAppointmentViewInfo = moreButtonContainer.nearestBottomAppointmentViewInfo;
   var appointment = this.scheduler.GetAppointment(div.targetAppointmentViewInfo.appointmentId);
   div.targetDateTime = appointment.interval.GetEnd();
   var top = _aspxGetAbsoluteY(scrollContainer) - _aspxGetAbsoluteY(moreButtonParent);
   var bottom = top + scrollContainer.clientHeight;
   div.style.top = bottom - this.verticalOffset - div.offsetHeight + "px";
  }
  else
   this.HideDivForContainer(moreButtonContainer, 1);
 },
 GetDivForContainer: function (moreButtonContainer, buttonIndex) {
  var div = moreButtonContainer.moreButtons[buttonIndex];
  if (!_aspxIsExists(div)) {
   var isTop = buttonIndex == 0;
   div = this.scheduler.GetContainerElementById("MoreButtons_" + (isTop ? "Top_" : "Bottom_") + moreButtonContainer.index);
   if (!_aspxIsExists(div))
    return null;
   moreButtonContainer.moreButtons[buttonIndex] = div;
   var clickDelegate = _aspxCreateDelegate(this.schedulerViewInfo.OnMoreButtonClick, this.schedulerViewInfo, [div, isTop]);
   _aspxAttachEventToElement(div, "click", clickDelegate);
   this.subscribedElements.push([div, "click", clickDelegate]);
  }
  _aspxSetElementDisplay(div, true);
  div.style.left = this.GetDivLeftPosition(moreButtonContainer, div) + "px";
  return div;
 },
 HideMoreButtons: function () {
  var count = this.moreButtonContainers.length;
  for (var i = 0; i < count; i++) {
   var container = this.moreButtonContainers[i];
   this.HideDivForContainer(container, 0);
   this.HideDivForContainer(container, 1);
  }
 },
 HideDivForContainer: function (moreButtonContainer, buttonIndex) {
  var div = moreButtonContainer.moreButtons[buttonIndex];
  if (_aspxIsExists(div))
   _aspxSetElementDisplay(div, false);
 }
});
ASPxMoreButtonContainer = _aspxCreateClass(null, {
 constructor: function(scrollHeight, index) {
  this.Reset(scrollHeight);
  this.moreButtons = [null, null];
  this.index = index;
 },
 Reset: function(scrollHeight) {
  this.nearestTopAppointmentViewInfo = null;
  this.nearestBottomAppointmentViewInfo = null;
  this.nearestTopAppointmentPosition = -1;
  this.nearestBottomAppointmentPosition = scrollHeight + 1;
 } 
});
ASPxSingleMoreButtonHelper = _aspxCreateClass(ASPxMoreButtonHelper, {
 constructor: function(schedulerViewInfo) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo);
 },
 CreateMoreButtonContainers: function(scrollHeight) {
  return [new ASPxMoreButtonContainer(scrollHeight, 0)];
 },
 GetMoreButtonContainer: function(viewInfo) {
  return this.moreButtonContainers[0];
 },
 GetDivLeftPosition: function(moreButtonContainer, div) {
  return this.schedulerViewInfo.parent.CalcRelativeElementLeft(this.schedulerViewInfo.GetCell(0, 0)) - div.offsetWidth - this.horizontalOffset;
 }
});
ASPxMoreButtonInEachColumnHelper = _aspxCreateClass(ASPxMoreButtonHelper, {
 constructor: function(schedulerViewInfo) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo);
 },
 CreateMoreButtonContainers: function(scrollHeight) {
  var count = this.schedulerViewInfo.cellContainers.length;
  var result = new Array();
  for(var i = 0; i < count; i++) {
   var moreButtonContainer = new ASPxMoreButtonContainer(scrollHeight, i);
   result.push(moreButtonContainer);
  }
  return result;
 },
 GetMoreButtonContainer: function(viewInfo) {
  return this.moreButtonContainers[viewInfo.containerIndex];
 },
 GetDivLeftPosition: function(moreButtonContainer) {
  return this.schedulerViewInfo.parent.CalcRelativeElementLeft(this.schedulerViewInfo.GetCell(moreButtonContainer.index, 0)) + this.horizontalOffset;
 }
});
ASPxClientVerticalSchedulerViewInfo = _aspxCreateClass(ASPxSchedulerViewInfo, {
 constructor: function (scheduler, prevViewInfo, usePrevCache, appointmentsSnapToCells) {
  this.constructor.prototype.constructor.call(this, scheduler, prevViewInfo, usePrevCache);
  this.appointmentsSnapToCells = appointmentsSnapToCells;
  this.isVertical = true;
  if(_aspxIsExists(prevViewInfo) && _aspxIsExists(prevViewInfo.moreButtonHelper)) {
   prevViewInfo.moreButtonHelper.HideMoreButtons();
  }
 },
 _constCellPrefix: function () { return "DXCntv"; },
 CreateSelectionViewInfoCore: function () {
  return new ASPxVerticalCellHighlightViewInfo(this.scheduler, this, this.scheduler.selectionDiv, this.parent.selectionLayer);
 },
 CompareCellAndPosition: function (x, y, cell) {
  var dxtop = this.parent.CalcRelativeElementTop(cell);
  if(y < dxtop)
   return -1;
  var bottom = this.parent.CalcRelativeElementBottom(cell);
  if(y > bottom)
   return 1;
  return 0;
 },
 Dispose: function () {
  this.constructor.prototype.Dispose.call(this);
  if(this.containerScrollDelegate && this.scrollContainer) {
   _aspxDetachEventFromElement(this.scrollContainer, "scroll", this.containerScrollDelegate);
   this.containerScrollDelegate = null;
  }
  this.moreButtonHelper.Dispose();
  if(this.timeMarkerViewInfo)
   this.timeMarkerViewInfo.Dispose();
 },
 Prepare: function (parent) {
  this.constructor.prototype.Prepare.call(this, parent);
  if(_aspxIsExists(this.scheduler.privateShowMoreButtonsOnEachColumn) && this.scheduler.privateShowMoreButtonsOnEachColumn)
   this.moreButtonHelper = new ASPxMoreButtonInEachColumnHelper(this);
  else
   this.moreButtonHelper = new ASPxSingleMoreButtonHelper(this);
  this.timeMarkerViewInfo = new ASPxHorizontalTimeMarkerViewInfo(this.scheduler, this, this.scheduler.timeMarkerImage, this.scheduler.timeMarkerLine, this.parent.timeMarkerLayer);
 },
 ShowMoreButton: function () {
  var scrollContainer = this.GetScrollContainer();
  if(scrollContainer.scrollHeight == scrollContainer.offsetHeight)
   return;
  this.ShowMoreButtonCore();
  if(this.containerScrollDelegate) {
   _aspxDetachEventFromElement(this.scrollContainer, "scroll", this.containerScrollDelegate);
   this.containerScrollDelegate = null;
  }
  this.containerScrollDelegate = _aspxCreateDelegate(this.OnContainerScroll, this);
  this.scrollContainer = scrollContainer;
  _aspxAttachEventToElement(scrollContainer, "scroll", this.containerScrollDelegate);
 },
 OnContainerScroll: function () {
  _aspxSetTimeout(_aspxCreateDelegate(this.ShowMoreButtonCore, this), 0);
  this.scheduler.topRowTimeManager.SaveActiveViewTopRowTime();
 },
 ShowMoreButtonCore: function () {
  this.moreButtonHelper.CalculateMoreButtons();
 },
 OnMoreButtonClick: function (e, arguments) {
  var moreButtonDiv = arguments[0];
  var targetDateTime = moreButtonDiv.targetDateTime;
  var args = new MoreButtonClickedEventArgs(targetDateTime, moreButtonDiv.interval, moreButtonDiv.resource );
  this.scheduler.RaiseMoreButtonClickedEvent(args);
  if(args.handled)
   return;
  if(args.processOnServer) {
   if(_aspxIsExists(moreButtonDiv.interval))
    var intervalArgs = _aspxDateTimeToMilliseconds(moreButtonDiv.interval.GetStart()) + "," + moreButtonDiv.interval.GetDuration();
   else
    var intervalArgs = "0, 0";
   var targetDateTimeArg = _aspxDateTimeToMilliseconds(targetDateTime);
   this.scheduler.RaiseCallback("RAISEMOREBTN|" + targetDateTimeArg + "," + intervalArgs + "," + moreButtonDiv.resource );
   return;
  }
  var toTop = arguments[1];
  var appointmentDiv = moreButtonDiv.targetAppointmentViewInfo.contentDiv;
  var scrollContainer = this.GetScrollContainer();
  if(toTop)
   scrollContainer.scrollTop = appointmentDiv.offsetTop;
  else {
   if(scrollContainer.clientHeight > appointmentDiv.offsetHeight)
    scrollContainer.scrollTop = appointmentDiv.offsetTop - scrollContainer.clientHeight + appointmentDiv.offsetHeight;
   else
    scrollContainer.scrollTop = appointmentDiv.offsetTop;
  }
 },
 GetScrollContainer: function () {
  return this.parent.parentElement.parentNode;
 },
 SetScrollOffset: function (scrollOffset) {
  this.GetScrollContainer().scrollTop = scrollOffset;
 },
 FindStartCellByTimeOfDay: function (cellContainer, dateTime) { 
  var containerStart = cellContainer.interval.GetStart();
  var containerAbsStart = ASPxSchedulerDateTimeHelper.TruncToDate(containerStart);
  var dayTimeDelta = _aspxDateSubsWithTimezone(dateTime, containerAbsStart);
  var datTimeDuration = Math.abs(dayTimeDelta);
  var dayTime = datTimeDuration % (24 * 60 * 60 * 1000); 
  var containerTime = _aspxDateIncreaseWithUtcOffset(containerAbsStart, dayTime);
  return this.GetCell(cellContainer.index, this.FindStartCellIndexByTime(cellContainer, containerTime));
 },
 LayoutTimeMarker: function () {
  this.timeMarkerViewInfo.Recalc();
 }
});
ASPxClientHorizontalSchedulerViewInfo = _aspxCreateClass(ASPxSchedulerViewInfo, {  
 constructor: function(scheduler, prevViewInfo, usePrevCache) { 
  this.constructor.prototype.constructor.call(this, scheduler, prevViewInfo, usePrevCache);
  this.moreButtonDiv = this.GetMoreButtonDiv();  
  this.isVertical = false;
  this.moreButtonLeftMargin = 3;
  this.moreButtonRightMargin = 3;
  this.moreButtonBottomMargin = 3;
 }, 
 _constCellPrefix: function() { return "DXCnth"; },
 GetMoreButtonDiv: function() {   
  return this.scheduler.GetContainerElementById(_aspxSchedulerMoreButtonId);
 },
 GetMoreButtonSize: function() {
  if(!_aspxIsExists(this.moreButtonSize) || this.moreButtonSize <= 0)
   this.moreButtonSize = this.CalculateMoreButtonSize();
  return this.moreButtonSize;
 },
 CalculateMoreButtonSize: function() {     
  var result;
  if (_aspxIsExists(this.moreButtonDiv)) {
   this.moreButtonDiv.style.display = "block";
   result = this.moreButtonDiv.offsetHeight;
   this.moreButtonDiv.style.display = "none";   
  }
  else
   result = 0;
  return result;
 },
 CreateSelectionViewInfoCore: function() {
  return new ASPxHorizontalCellHighlightViewInfo(this.scheduler, this, this.scheduler.selectionDiv, this.parent.selectionLayer);
 },
 ShowMoreButton: function(cell, viewInfo) {
  if(_aspxIsExists(this.moreButtonDiv) &&(!_aspxIsExists(cell.hasMoreButton) || !cell.hasMoreButton)) {
   var newDiv = this.moreButtonDiv.cloneNode(true);
   newDiv.id = cell.id + "_moreButton";
   newDiv.style.display = "block";
   newDiv.schedulerControl = this.scheduler;   
   newDiv.interval = this.scheduler.GetCellInterval(cell);
   newDiv.targetDateTime = this.CalculateMoreButtonTargetDateTime(cell, viewInfo);
   newDiv.resource = this.scheduler.GetCellResource(cell);
   newDiv.isMoreButton = true;
   this.parent.AppendChildToMoreButtonLayer(newDiv);
   cell.hasMoreButton = true;
   _aspxSetElementDisplay(newDiv, true);
   _aspxAttachEventToElement(newDiv, "click", aspxMoreButtonClickEvent);
   var newDivWidth = this.moreButtonWidth;
   var cellLeft = this.parent.CalcRelativeElementLeft(cell) + this.moreButtonLeftMargin;
   var cellRight = this.parent.CalcRelativeElementRight(cell) - this.moreButtonRightMargin;
   newDiv.style.left = Math.max(cellLeft, cellRight - newDivWidth) + "px";
   newDiv.style.width = Math.max(0,Math.min(newDivWidth, cellRight - cellLeft)) + "px";
   newDiv.style.top = this.parent.CalcRelativeElementBottom(cell) - this.moreButtonSize - this.moreButtonBottomMargin + "px";
  }   
 },
 CalculateMoreButtonTargetDateTime: function(cell, aptViewInfo) {  
  var appointment = this.scheduler.GetAppointment(aptViewInfo.appointmentId);
  var cellInterval = this.scheduler.GetCellInterval(cell);
  var cellStart = cellInterval.GetStart();
  var aptStart = appointment.interval.GetStart();  
  var cellStartMSec = parseInt(_aspxDateTimeToMilliseconds(cellStart));
  var aptStartMSec = parseInt(_aspxDateTimeToMilliseconds(aptStart));
  if (cellStartMSec > aptStartMSec)
   return cellStart;
  else
   return aptStart;
 },
 CompareCellAndPosition: function(x, y, cell) {
  var left = this.parent.CalcRelativeElementLeft(cell);
  if(x < left)
   return -1;
  var right = this.parent.CalcRelativeElementRight(cell);
  if(x > right)
   return 1;
  var dxtop = this.parent.CalcRelativeElementTop(cell);
  if(y < dxtop)
   return -1;
  var bottom = this.parent.CalcRelativeElementBottom(cell);
  if(y > bottom)
   return 1;
  return 0;
 },
 Prepare: function(parent) {
  this.constructor.prototype.Prepare.call(this, parent);
  this.timeMarkerViewInfo = new ASPxVerticalTimeMarkerViewInfo(this.scheduler, this, this.scheduler.timeMarkerLine, this.parent.timeMarkerLayer);
 },
 LayoutTimeMarker: function() {
  this.timeMarkerViewInfo.Recalc();
 }
});
ASPxClientTimelineHeaderLevelViewInfo = _aspxCreateClass(null, {
 constructor: function() {
  this.timelineHeaders = new Array();
 },
 Add: function(cellLocation, offset, baseCellLocation) {
  var header = new ASPxClientTimelineHeaderCellViewInfo(cellLocation, offset, baseCellLocation);
  this.timelineHeaders.push(header);
 }
});   
ASPxClientTimelineHeaderCellViewInfo = _aspxCreateClass(null, {
 constructor: function(cellLocation, offset, baseCellLocation) {
  this.cellLocation = cellLocation;
  this.offset = offset;
  this.baseCellLocation = baseCellLocation;
 }
});   
ASPxClientTimelineHeaderLayoutCalculator = _aspxCreateClass(null, {
 constructor: function(schedulerControl) {
  this.schedulerControl = schedulerControl;
  this.headerCellFinder = new ASPxTimelineHeaderCellFinder(this.schedulerControl.horzTable);
  this.coordinatesCalculator = schedulerControl.horizontalViewInfo.parent;
 },
 CalculateLayout: function(headerLevels) {
  var levelCount = headerLevels.length;
  for(levelIndex = 0; levelIndex < levelCount; levelIndex++) {
   if (headerLevels[levelIndex] != null) {
    var headerLevel = headerLevels[levelIndex];
    this.CalculateLevelLayout(headerLevel.timelineHeaders);
   }
  }
 },
 CalculateLevelLayout: function(headers) {
  var count = headers.length;
  var header = headers[0];
  var start = this.GetStartPosition(header);
  var end = 0;
  for (var headerIndex = 1; headerIndex < count - 1; headerIndex++) {
   var nextHeader = headers[headerIndex];
   end = this.GetStartPosition(nextHeader);
   this.SetHeaderPosition(header, start, end);
   header = nextHeader;
   start = end;
  }
  this.SetLastHeaderPosition(headers[count-2], end);
 },
 GetStartPosition: function(header) {
  var cell = this.headerCellFinder.GetCellByPathLocation(header.baseCellLocation);
  var position = this.coordinatesCalculator.CalcRelativeElementLeft(cell) + header.offset * cell.offsetWidth / 100;
  return Math.floor(position);
 },
 SetHeaderPosition: function(header, start, end) {
  var headerCell = this.headerCellFinder.GetCellByPathLocation(header.cellLocation);
  var totalBorderWidth = headerCell.offsetWidth - headerCell.clientWidth;
  var totalHorizontalPadding = 0;
  headerCell.style.left = start + "px";
  var expectedOffsetWidth = end - start;
  if (expectedOffsetWidth > 0)
   _aspxSetTableCellOffsetWidth(headerCell, expectedOffsetWidth - totalBorderWidth);
 },
 SetLastHeaderPosition: function(header, start) {
  var headerCell = this.headerCellFinder.GetCellByPathLocation(header.cellLocation);
  headerCell.style.width = "100%";
  headerCell.style.left = start + "px";
 }
}); 
ASPxTimelineHeaderCellFinder = _aspxCreateClass(null, {
 constructor: function(parentTable) {
  this.parentTable = parentTable;
 },
 GetCellByPathLocation: function(path) {
  var count = path.length;
  var table = this.parentTable;
  var result = null;
  for (var i = 0; i < count; i++) {
   var location = path[i];
   var rowIndex = location[0];
   var cellIndex = location[1];
   result = table.rows[rowIndex].cells[cellIndex];
   table = this.GetNextTable(table.rows[rowIndex].cells[cellIndex]);
  }
  return result;
 },
 GetNextTable: function(cell) {
  var children = cell.childNodes;
  var count = children.length;
  for(var i = 0; i < count; i++) {
   var child = children[i];
   if(_aspxIsExists(child.tagName) && child.tagName.toUpperCase() == "TABLE") 
    return child;
  }  
  return null;
 }
}); 
ASPxNavigationButton = _aspxCreateClass(null, {
 constructor: function(divId, resourceId, anchorType) {
  this.divId = divId;
  this.anchorType = anchorType;
  this.resourceId = resourceId;
 }
});
ASPxClientAppointmentStatusViewInfo = _aspxCreateClass(null, {
 constructor: function(statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset) { 
  this.backDivId = statusBackDivId;
  this.foreDivId = statusForeDivId;
  this.startOffset = statusStartOffset;
  this.endOffset = statusEndOffset;
 }
});
ASPxClientAppointmentViewInfo = _aspxCreateClass(null, {
 constructor: function(schedulerViewInfo, containerIndex, firstCellIndex, lastCellIndex, startTime, duration, startRelativeIndent, endRelativeIndent, divId, appointmentId, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset) {
  this.schedulerViewInfo = schedulerViewInfo;
  this.containerIndex = containerIndex;
  this.firstCellIndex = firstCellIndex;
  this.lastCellIndex = lastCellIndex;
  this.startRelativeIndent = _aspxIsExists(startRelativeIndent) ? startRelativeIndent : 0;
  this.endRelativeIndent = _aspxIsExists(endRelativeIndent) ? endRelativeIndent : 0;
  this.initialStartRelativeIndent = this.startRelativeIndent;
  this.initialEndRelativeIndent = this.endRelativeIndent;  
  if(startTime != null && duration != null)
   this.appointmentInterval = new ASPxClientTimeInterval(startTime, duration);
  else
   this.appointmentInterval = null;
  this.initialAppointmentInterval = this.appointmentInterval != null ? this.appointmentInterval.Clone() : null;
  this.appointmentId = appointmentId;
  this.visibleStartTime = startTime;
  this.visibleDuration = duration;  
  this.visibleFirstCellIndex = firstCellIndex;
  this.visibleLastCellIndex = lastCellIndex;
  this.divId = divId;
  this.contentDiv = null;
  this.visibleFirstCell = null;
  this.visibleLastCell = null;
  this.mouseEvents = new ASPxSchedulerMouseEvents();
  this.mouseEvents.AddMouseOverHandler(this);
  this.mouseEvents.AddMouseOutHandler(this);
  this.statusViewInfo = new ASPxClientAppointmentStatusViewInfo(statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset);
 },
 getStartTime: function() {
  return this.appointmentInterval.GetStart();
 },
 getEndTime: function() {  
  return this.appointmentInterval.GetEnd();
 },
 getDuration: function() {  
  return this.appointmentInterval.GetDuration();
 },
 CanResizeAtLeft: function() {
  return false;
 },
 CanResizeAtRight: function() {
  return false;
 },
 CanResizeAtTop: function() {
  return false;
 },
 CanResizeAtBottom: function() {
  return false;
 },
 OnMouseOver: function(evt) {
  this.schedulerViewInfo.OnAppointmentMouseOver(this);
 },
 OnMouseOut: function(evt) {
  this.schedulerViewInfo.OnAppointmentMouseOut(this);
 },
 CanResize: function() {
  var appointment = this.schedulerViewInfo.scheduler.GetAppointment(this.appointmentId);  
  return appointment.flags.allowResize;
 },
 GetToolTip: function(source) {
  while(source != null) {
   if(_aspxIsExists(source.isToolTip) && source.isToolTip)
    return source;
   source = source.parentNode;
  }
  return null;
 },
 ResetRelativeIndentAndTime: function() {
  this.startRelativeIndent = this.initialStartRelativeIndent;
  this.endRelativeIndent = this.initialEndRelativeIndent;
  this.appointmentInterval = this.initialAppointmentInterval != null ? this.initialAppointmentInterval.Clone() : null;
 }
});
ASPxClientHorizontalAppointmentViewInfo = _aspxCreateClass(ASPxClientAppointmentViewInfo, {
 constructor: function(schedulerViewInfo, containerIndex, firstCellIndex, lastCellIndex, startTime, duration, startRelativeIndent, endRelativeIndent, divId, appointmentId, hasLeftBorder, hasRightBorder, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo, containerIndex, firstCellIndex, lastCellIndex, startTime, duration, startRelativeIndent, endRelativeIndent, divId, appointmentId, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset);
  this.height = 0;
  this.relativePosition = 0;
  this.hasLeftBorder = hasLeftBorder;
  this.hasRightBorder = hasRightBorder;
 },
 clone: function() {
  return new ASPxClientHorizontalAppointmentViewInfo(this.schedulerViewInfo, this.containerIndex, this.firstCellIndex, this.lastCellIndex, this.getStartTime(), this.getDuration(),
   this.startRelativeIndent, this.endRelativeIndent, this.divId, this.appointmentId);
 },
 CanResizeAtLeft: function() {
  return this.CanResize() && this.hasLeftBorder;
 },
 CanResizeAtRight: function() {
  return this.CanResize() && this.hasRightBorder;
 },
 IsHorizontal: function() {
  return true;
 }
});
ASPxClientVerticalAppointmentViewInfo = _aspxCreateClass(ASPxClientAppointmentViewInfo, {
 constructor: function(schedulerViewInfo, containerIndex, firstCellIndex, lastCellIndex, startTime, duration, divId, startHorizontalIndex, endHorizontalIndex, maxIndexInGroup, startRelativeIndent, endRelativeIndent, appointmentId, hasTopBorder, hasBottomBorder, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset) {  
  this.constructor.prototype.constructor.call(this, schedulerViewInfo, containerIndex, firstCellIndex, lastCellIndex, startTime, duration, startRelativeIndent, endRelativeIndent, divId, appointmentId, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset);
  this.startHorizontalIndex = startHorizontalIndex;
  this.endHorizontalIndex = endHorizontalIndex;
  this.maxIndexInGroup = maxIndexInGroup;
  this.hasTopBorder = hasTopBorder;
  this.hasBottomBorder = hasBottomBorder;  
 },
 clone: function(a) {
  return new ASPxClientVerticalAppointmentViewInfo(this.schedulerViewInfo, this.containerIndex, this.firstCellIndex,
   this.lastCellIndex, this.getStartTime(), this.getDuration(), this.divId, this.startHorizontalIndex, this.endHorizontalIndex, this.maxIndexInGroup, this.startRelativeIndent, this.endRelativeIndent, this.appointmentId, this.hasTopBorder, this.hasBottomBorder, statusBackDivId, statusForeDivId, statusStartOffset, statusEndOffset);
 },
 CanResizeAtTop: function() {
  return this.CanResize() && this.hasTopBorder;
 },
 CanResizeAtBottom: function() {
  return this.CanResize() && this.hasBottomBorder;
 },
 IsHorizontal: function() {
  return false;
 }
});
ASPxAppointmentOperationPresenter = _aspxCreateClass(null, {
 constructor: function (scheduler, appointmentDiv) {
  this.scheduler = scheduler;
  this.calculator = this.CreateCalculator();
  this.appointmentDiv = appointmentDiv;
  this.parent = this.GetParent();
  this.parentElement = this.GetParentElement();
  this.schedulerViewInfo = this.GetViewInfo();
  this.isSourceAppointmentVisible = new Object();
  this.sourceViewInfos = new Object();
  this.templateViewInfos = new Object();
  this.viewInfos = new Object();
 },
 ShowAppointment: function (appointment, showSourceAppointment) {
  var aptId = appointment.appointmentId;
  if (!_aspxIsExists(this.sourceViewInfos[aptId]) && !_aspxIsExists(this.templateViewInfos[aptId])) {
   this.sourceViewInfos[aptId] = this.FindSourceViewInfos(aptId, this.schedulerViewInfo);
   this.templateViewInfos[aptId] = this.GetTemplateViewInfos(aptId);
   this.SaveAppointmentVisibleState(aptId);
  }
  var sourceViewInfos = this.sourceViewInfos[aptId];
  var templateViewInfos = this.templateViewInfos[aptId];
  this.ShowSourceAppointment(showSourceAppointment, aptId);
  this.HidePrevViewInfos(aptId);
  if (templateViewInfos.length == 0)
   return;
  if (!this.CanShowAppointment(appointment))
   return;
  var containers = this.GetCellContainers();
  var count = containers.length;
  var viewInfos = new Array();
  this.viewInfos[aptId] = viewInfos;
  var operationInterval = appointment.operationInterval;
  var operationIntervalStartTime = operationInterval.GetStart();
  var operationIntervalEndTime = operationInterval.GetEnd();
  for (var i = 0; i < count; i++) {
   var container = containers[i];
   var containerInterval = container.interval;
   var containerStartTime = containerInterval.GetStart();
   var containerEndTime = containerInterval.GetEnd();
   var isAppointmentOutsideCell = operationIntervalStartTime >= containerEndTime || operationIntervalEndTime < containerStartTime || ((operationIntervalEndTime - containerStartTime) == 0 && !operationInterval.IsZerroDurationInterval());
   if (isAppointmentOutsideCell || !this.ShowAppointmentForResource(appointment, container.resource))
    continue;
   var intervalStart = _aspxDateTimeMaxValue(containerStartTime, operationIntervalStartTime);
   var intervalEnd = _aspxDateTimeMinValue(containerEndTime, operationIntervalEndTime);
   this.AddViewInfo(viewInfos, container, intervalStart, intervalEnd);
  }
  count = viewInfos.length;
  for (var i = 0; i < count; i++) {
   var sourceDiv = this.appointmentDiv;
   var isPrimaryAppointment = this.appointmentDiv.appointmentViewInfo.appointmentId == appointment.appointmentId;
   if (count > 1 || !isPrimaryAppointment) {
    if (i == count - 1 && count > 1) {
     var index = templateViewInfos.length - 1;
     sourceDiv = templateViewInfos[index].contentDiv;
    }
    else
     if (i == 0 || !isPrimaryAppointment)
      sourceDiv = templateViewInfos[0].contentDiv;
   }
   var sourceViewInfo = sourceDiv.appointmentViewInfo;
   var newDiv = sourceDiv.cloneNode(true);
   viewInfos[i].maxIndexInGroup = _aspxIsExists(sourceViewInfo.maxIndexInGroup) ? sourceViewInfo.maxIndexInGroup : 1;
   viewInfos[i].startHorizontalIndex = _aspxIsExists(sourceViewInfo.startHorizontalIndex) ? sourceViewInfo.startHorizontalIndex : 0;
   viewInfos[i].endHorizontalIndex = _aspxIsExists(sourceViewInfo.endHorizontalIndex) ? sourceViewInfo.endHorizontalIndex : 1;
   var sourceStatusInfo = sourceViewInfo.statusViewInfo;
   if (_aspxIsExists(sourceStatusInfo))
    viewInfos[i].statusViewInfo = new ASPxClientAppointmentStatusViewInfo(sourceStatusInfo.backDivId, sourceStatusInfo.foreDivId, 0, 0);
   newDiv.style.width = "";
   newDiv.style.height = ""; 
   viewInfos[i].contentDiv = newDiv;
   viewInfos[i].startIndex;
   newDiv.appointmentViewInfo = viewInfos[i];
   this.parentElement.appendChild(newDiv);
   this.CalculateAppointmentLayout(viewInfos[i]);
   this.CalculateFinalContentLayout(viewInfos[i]);
   this.scheduler.appointmentSelection.SelectAppointmentViewInfoCore(viewInfos[i]);
  }
 },
 ShowAppointmentForResource: function (appointment, containerResource) {
  var appointmentResources = appointment.operationResources;
  if (!_aspxIsExists(appointmentResources))
   appointmentResources = appointment.resources;
  if (!_aspxIsExists(appointmentResources))
   return false;
  if (ASPxSchedulerUtils.IsAppointmentResourcesEmpty(appointmentResources) || _aspxArrayIndexOf(appointmentResources, containerResource) >= 0 || containerResource == "null")
   return true;
  return false;
 },
 GetTemplateViewInfos: function (appointmentId) {
  if (this.sourceViewInfos[appointmentId].length != 0)
   return this.sourceViewInfos[appointmentId];
  else {
   var horizontalAppointmentsViewInfos = this.FindSourceViewInfos(appointmentId, this.scheduler.horizontalViewInfo);
   var verticalAppointmentsViewInfos = this.FindSourceViewInfos(appointmentId, this.scheduler.verticalViewInfo);
   if (horizontalAppointmentsViewInfos.length > 0)
    return horizontalAppointmentsViewInfos;
   else
    return verticalAppointmentsViewInfos;
  }
 },
 ShowSourceAppointment: function (showSourceAppointment, aptId) {
  if (this.isSourceAppointmentVisible[aptId] != showSourceAppointment) {
   _aspxClearSelection(); 
   var sourceViewInfos = this.sourceViewInfos[aptId];
   var count = sourceViewInfos.length;
   for (var i = 0; i < count; i++) {
    var viewInfo = sourceViewInfos[i];
    this.ShowSourceAppointmentViewInfo(viewInfo, showSourceAppointment);
   }
   this.isSourceAppointmentVisible[aptId] = showSourceAppointment;
  }
 },
 ShowSourceAppointmentViewInfo: function (viewInfo, isVisible) {
  _aspxSetSchedulerDivDisplay(viewInfo.contentDiv, isVisible);
  if (_aspxIsExists(viewInfo.adornerDiv))
   _aspxSetSchedulerDivDisplay(viewInfo.adornerDiv, isVisible);
 },
 SaveAppointmentVisibleState: function (aptId) {
  if (!this.sourceViewInfos)
   return;
  var sourceViewInfos = this.sourceViewInfos[aptId];
  var count = sourceViewInfos.length;
  for (var i = 0; i < count; i++) {
   var viewInfo = sourceViewInfos[i];
   viewInfo.lastIsVisibile = _aspxGetElementDisplay(viewInfo.contentDiv);
  }
 },
 RestoreAppointmentVisibleState: function (aptId) {
  if (!this.sourceViewInfos)
   return;
  var sourceViewInfos = this.sourceViewInfos[aptId];
  var count = sourceViewInfos.length;
  for (var i = 0; i < count; i++) {
   var viewInfo = sourceViewInfos[i];
   this.ShowSourceAppointmentViewInfo(viewInfo, viewInfo.lastIsVisibile);
   delete viewInfo.lastIsVisibile;
  }
  this.isSourceAppointmentVisible[aptId] = true;
 },
 HideAppointment: function (aptId, showSourceAppointment) {
  this.HidePrevViewInfos(aptId);
  if (!_aspxIsExists(this.sourceViewInfos[aptId]) || this.sourceViewInfos[aptId].length == 0)
   return;
  if (showSourceAppointment) {
   this.RestoreAppointmentVisibleState(aptId); 
  }
 },
 FindSourceViewInfos: function (appointmentId, viewInfo) {
  var result = new Array();
  var viewInfos = viewInfo.appointmentViewInfos;
  var count = viewInfos.length;
  for (var i = 0; i < count; i++) {
   if (viewInfos[i].appointmentId == appointmentId)
    result.push(viewInfos[i]);
  }
  return result;
 },
 HidePrevViewInfos: function (aptId) {
  var viewInfos = this.viewInfos[aptId];
  if (!_aspxIsExists(viewInfos))
   return;
  var count = viewInfos.length;
  for (var i = 0; i < count; i++) {
   this.scheduler.appointmentSelection.UnselectAppointmentViewInfoCore(viewInfos[i]);
   _aspxRecycleNode(viewInfos[i].contentDiv);
   viewInfos[i].contentDiv = null;
  }
  this.viewInfos[aptId] = null;
 },
 CalculateFinalContentLayout: function (viewInfo) {
  var innerContentDiv = this.calculator.FindInnerContentDiv(viewInfo);
  if (_aspxIsExists(innerContentDiv)) {
   this.calculator.PrepareSetInnerContentDivSize(innerContentDiv, viewInfo);
   this.calculator.CalculateSetInnerContentDivSizeParameters1(innerContentDiv, viewInfo);
   this.calculator.CalculateSetInnerContentDivSizeParameters2(innerContentDiv, viewInfo);
   this.calculator.CalculateSetInnerContentDivWidth(innerContentDiv, viewInfo);
   this.calculator.SetInnerContentDivWidth(innerContentDiv, viewInfo);
   this.calculator.CalculateSetInnerContentDivHeight(innerContentDiv, viewInfo);
   this.calculator.SetInnerContentDivHeight(innerContentDiv, viewInfo);
  }
 }
});
ASPxVerticalAppointmentOperationPresenter = _aspxCreateClass(ASPxAppointmentOperationPresenter, {
 constructor: function(scheduler, appointmentDiv) {
  this.constructor.prototype.constructor.call(this, scheduler, appointmentDiv);
  this.isHorizontal = true;
 },
 CreateCalculator: function() {
  return this.scheduler.CreateVerticalAppointmentsCalculator();
 },
 GetCellContainers: function() {
  return this.scheduler.verticalViewInfo.cellContainers;
 },
 GetParent: function() {
  return this.scheduler.verticalViewInfo.parent;
 },
 GetParentElement: function() {
  return this.scheduler.verticalViewInfo.parent.parentElement;
 },
 GetViewInfo: function() {
  return this.scheduler.verticalViewInfo;
 },
 CanShowAppointment: function(appointment) {
  if (this.scheduler.privateShowAllAppointmentsOnTimeCells)
   return true;
  else
   return appointment.operationInterval.IsSmallerThanDay();  
 },
 AddViewInfo: function(aptViewInfos, cellContainer, startTime, endTime) {
  var viewInfo = new ASPxClientVerticalAppointmentViewInfo(this.schedulerViewInfo, cellContainer.containerIndex,
   null, null, startTime, _aspxDateSubsWithTimezone(endTime, startTime), null, 0, 1, 1, 0, 0, null);
  viewInfo.containerIndex = cellContainer.containerIndex;
  var startCellIndex = this.scheduler.verticalViewInfo.FindStartCellIndexByTime(cellContainer, startTime);
  var endCellIndex = this.scheduler.verticalViewInfo.FindEndCellIndexByTime(cellContainer, endTime);
  if(endCellIndex < startCellIndex)
   endCellIndex = startCellIndex;
  viewInfo.visibleFirstCellIndex = startCellIndex;
  viewInfo.visibleLastCellIndex = endCellIndex;
  var startCell = this.scheduler.verticalViewInfo.GetCell(cellContainer.index, startCellIndex);
  var endCell = this.scheduler.verticalViewInfo.GetCell(cellContainer.index, endCellIndex);
  if(!_aspxIsExists(startCell) || !_aspxIsExists(endCell))
   return null;
  var relativeTop = 0;
  var relativeBottom = 0;
  if(!this.scheduler.verticalViewInfo.appointmentsSnapToCells && startCell != endCell) {
   var startCellStartTime = this.scheduler.GetCellStartTime(startCell);
   var endCellEndTime = this.scheduler.GetCellEndTime(endCell);
   var startCellDuration = this.scheduler.GetCellDuration(startCell);
   var endCellDuration = this.scheduler.GetCellDuration(endCell);
   relativeTop = _aspxDateSubsWithTimezone(startTime, startCellStartTime) * startCell.offsetHeight / startCellDuration;
    relativeBottom = _aspxDateSubsWithTimezone(endCellEndTime, endTime) * endCell.offsetHeight / endCellDuration;
  }
  viewInfo.startCell = startCell;
  viewInfo.endCell = endCell;
  viewInfo.startRelativeIndent = relativeTop;
  viewInfo.endRelativeIndent = relativeBottom;
  viewInfo.initialStartRelativeIndent = relativeTop;
  viewInfo.initialEndRelativeIndent = relativeBottom;
  aptViewInfos.push(viewInfo);
 },
 CalculateAppointmentLayout: function(viewInfo) {
  this.calculator.CalculateAppointmentLayout(viewInfo);
 }
});
ASPxHorizontalAppointmentOperationPresenter = _aspxCreateClass(ASPxAppointmentOperationPresenter, {
 constructor: function(scheduler, appointmentDiv) {
  this.constructor.prototype.constructor.call(this, scheduler, appointmentDiv);
  this.isHorizontal = false;
 },
 CreateCalculator: function() {
  return this.scheduler.CreateHorizontalAppointmentsCalculator();
 },
 GetCellContainers: function() {
  return this.scheduler.horizontalViewInfo.cellContainers;
 },
 GetParent: function() {
  return this.scheduler.horizontalViewInfo.parent;
 },
 GetParentElement: function() {
  return this.scheduler.horizontalViewInfo.parent.innerParentElement;
 },
 GetViewInfo: function() {
  return this.scheduler.horizontalViewInfo;
 },
 CanShowAppointment: function(appointment) {
  var isDayView = this.scheduler.privateActiveViewType == ASPxSchedulerViewType.Day || this.scheduler.privateActiveViewType == ASPxSchedulerViewType.WorkWeek;
  var isAptLongerThanDay = !appointment.operationInterval.IsSmallerThanDay();     
  var showAllAppointmentsOnTimeCells = this.scheduler.privateShowAllAppointmentsOnTimeCells;
  if (isDayView)    
   return (isAptLongerThanDay && !showAllAppointmentsOnTimeCells);
  else
   return true;     
 },
 AddViewInfo: function(aptViewInfos, cellContainer, startTime, endTime) {
  var startCellIndex = this.scheduler.verticalViewInfo.FindStartCellIndexByTime(cellContainer, startTime);
  var endCellIndex = this.scheduler.verticalViewInfo.FindEndCellIndexByTime(cellContainer, endTime);
  if(startCellIndex < 0 || endCellIndex < 0)
   return null;
  var lastCellTop = null;
  for(var i = startCellIndex; i <= endCellIndex; i++) {
   var cell = this.schedulerViewInfo.GetCell(cellContainer.containerIndex, i);
   var cellTop = this.parent.CalcRelativeElementTop(cell);
   if(cellTop != lastCellTop && lastCellTop != null) {
    var viewInfo = this.CreateSingleViewInfo(cellContainer.containerIndex, startCellIndex, i > startCellIndex ? i - 1 : startCellIndex);
    aptViewInfos.push(viewInfo);
    startCellIndex = i;
   }
   lastCellTop = cellTop;
  }
  if(endCellIndex < startCellIndex)
   endCellIndex = startCellIndex;
  var viewInfo = this.CreateSingleViewInfo(cellContainer.containerIndex, startCellIndex, endCellIndex);
  aptViewInfos.push(viewInfo);
 },
 CreateSingleViewInfo: function(containerIndex, startCellIndex, endCellIndex) {
  var viewInfo = new ASPxClientHorizontalAppointmentViewInfo(this.schedulerViewInfo, containerIndex, startCellIndex, endCellIndex, null, null, 0, 0, null, this.appointmentDiv.appointmentViewInfo.appointmentId);
  viewInfo.visibleFirstCellIndex = startCellIndex;
  viewInfo.visibleLastCellIndex = endCellIndex;
  viewInfo.containerIndex = containerIndex;
  return viewInfo;
 },
 CalculateAppointmentLayout: function(viewInfo) {
  _aspxSetSchedulerDivDisplay(viewInfo.contentDiv, true);
  this.calculator.CalculateAppointmentLayoutAtOnce(viewInfo);
 }
});
ASPxDragViewHelper = _aspxCreateClass(null, {
 constructor: function(scheduler, primaryAppointmentId, appointmentDiv) {
  this.scheduler = scheduler;
  this.primaryAppointmentId = primaryAppointmentId;
  this.horizontalDragPresenter = new ASPxHorizontalAppointmentOperationPresenter(scheduler, appointmentDiv);
  this.verticalDragPresenter = new ASPxVerticalAppointmentOperationPresenter(scheduler, appointmentDiv);
 },
 ShowDraggedAppointmentPosition: function(e, draggedAppointments, copy) {
  var count = draggedAppointments.length;
  if(count <= 0)
   return;
  for(var i = 0; i < count; i++) {
   var appointment = draggedAppointments[i];
   copy &= appointment.flags.allowCopy;
   this.horizontalDragPresenter.ShowAppointment(appointment, copy != 0);
   this.verticalDragPresenter.ShowAppointment(appointment, copy != 0);
   if(appointment.appointmentId == this.primaryAppointmentId) {
    var toolTip = this.scheduler.GetAppointmentDragTooltip();
    if(_aspxIsExists(toolTip) && toolTip.CanShowToolTip()) {
     var toolTipData = new ASPxClientSchedulerToolTipData(appointment, appointment.operationInterval, appointment.operationResources)
     toolTip.SetContent(toolTipData);
     if (this.scheduler.activeToolTip == toolTip && !toolTip.ShouldResetPositionByTimer()) {
      continue;
     } 
     else
      this.scheduler.HideAllToolTips();
     toolTip.ShowToolTip(_aspxGetEventX(e), _aspxGetEventY(e));
     toolTip.FinalizeUpdate(toolTipData);
    }
   }
    }
 },
 HideDraggedAppointmentPosition: function(draggedAppointments, restoreAptPos) {
  var count = draggedAppointments.length;
  for(var i = 0; i < count; i++) {
   var appointmentId = draggedAppointments[i].appointmentId;
   this.horizontalDragPresenter.HideAppointment(appointmentId, restoreAptPos);
   this.verticalDragPresenter.HideAppointment(appointmentId, restoreAptPos);
  }
  var toolTip = this.scheduler.GetAppointmentDragTooltip();
  if(_aspxIsExists(toolTip)) {
   toolTip.HideToolTip();
  }
 },
 HideToolTip: function() {
  var toolTip = this.scheduler.GetAppointmentDragTooltip();
  if(_aspxIsExists(toolTip)) {  
   toolTip.HideToolTip();
  }
 }
});
ASPxClientAppointmentDragHelper = _aspxCreateClass(null, {
 constructor: function (scheduler, appointmentDiv, cell, e, onDoClickHandler, owner) {
  if (__aspxDragHelper != null)
   __aspxDragHelper.cancelDrag();
  scheduler.DisableReminderTimer();
  this.dragArea = 5;
  this.lastX = _aspxGetEventX(e);
  this.lastY = _aspxGetEventY(e);
  this.scheduler = scheduler;
  this.canDrag = true;
  this.startCell = cell;
  this.lastCell = null;
  this.lastCtrlState = null;
  this.scheduler = scheduler;
  this.appointmentSelection = scheduler.appointmentSelection;
  this.appointmentDiv = appointmentDiv;
  this.onDoClickHandler = onDoClickHandler;
  this.onEndDrag = this.OnApplyDrag;
  this.dragViewHelper = new ASPxDragViewHelper(scheduler, appointmentDiv.appointmentViewInfo.appointmentId, appointmentDiv);
  this.owner = owner;
  __aspxDragHelper = this;
 },
 drag: function (e) {
  if (!this.canDrag) return;
  if (!this.isDragging()) {
   if (!this.isOutOfDragArea(_aspxGetEventX(e), _aspxGetEventY(e)))
    return;
   this.startDragCore(e);
  }
  if (this.isDragging())
   this.dragCore(e);
 },
 startDragCore: function (e) {
  if (__aspxIE) {
   this.scheduler.innerContentElement.setActive();
  }
  this.startCellTime = this.scheduler.GetCellStartTime(this.startCell);
  this.startCellResource = this.scheduler.GetCellResource(this.startCell);
  var selectedAppointmentIds = this.appointmentSelection.selectedAppointmentIds;
  this.selectedAppointments = new Array();
  var count = selectedAppointmentIds.length;
  for (var i = 0; i < count; i++) {
   var apt = this.scheduler.GetAppointment(selectedAppointmentIds[i]);
   if (apt.flags.allowDrag)
    this.selectedAppointments.push(apt);
  }
  if (this.selectedAppointments.length == 0)
   return;
  var hitTestResult = this.scheduler.CalcHitTest(e);
  var cell = hitTestResult.cell;
  if (_aspxIsExists(cell)) {
   var cellTime = this.scheduler.GetCellStartTime(cell);
   var activeViewType = this.scheduler.GetActiveViewType();
   if (activeViewType == ASPxSchedulerViewType.Day || activeViewType == ASPxSchedulerViewType.WorkWeek) {
    this.dragState = new ASPxDragDayViewAppointmentState(this.selectedAppointments, this.selectedAppointments[0], _aspxDateSubsWithTimezone(this.startCellTime, this.selectedAppointments[0].interval.GetStart()), this.scheduler.privateShowAllAppointmentsOnTimeCells);
   }
   else
    this.dragState = new ASPxDragAppointmentState(this.selectedAppointments, this.selectedAppointments[0], _aspxDateSubsWithTimezone(this.startCellTime, this.selectedAppointments[0].interval.GetStart()));
  }
 },
 dragCore: function (e) {
  var hitTestResult = this.scheduler.CalcHitTest(e);
  var cell = hitTestResult.cell;
  if (_aspxIsExists(cell) && (cell != this.lastCell || this.lastCtrlState != ctrlPressed)) {
   var cellTime = this.scheduler.GetCellInterval(cell);
   var cellResource = this.scheduler.GetCellResource(cell);
   if (_aspxIsExists(cellTime) && _aspxIsExists(cellResource)) {
    this.dragState.DragTo(e, cellTime, cellResource);
    var ctrlPressed = _aspxGetCtrlKey(e);
    this.dragViewHelper.ShowDraggedAppointmentPosition(e, this.selectedAppointments, ctrlPressed);
    this.lastCell = cell;
    this.lastCtrlState = ctrlPressed;
   }
  }
 },
 isDragging: function () {
  return _aspxIsExists(this.dragState);
 },
 OnCallback: function () {
  this.cancelDrag(false, false);
 },
 OnCallbackError: function () {
  this.cancelDrag(true, false);
 },
 cancelDrag: function (restoreAptPos, restoreTimer) {
  if (!_aspxIsExists(restoreAptPos))
   restoreAptPos = true;
  if (!_aspxIsExists(restoreTimer))
   restoreTimer = true;
  if (this.isDragging())
   this.dragViewHelper.HideDraggedAppointmentPosition(this.selectedAppointments, restoreAptPos);
  this.scheduler.onCallback = null;
  this.scheduler.onCallbackError = null;
  __aspxDragHelper = null;
  if (restoreTimer)
   this.scheduler.EnableReminderTimer();
 },
 endDrag: function (e) {
  var restoreAptPos = true;
  var wasCallback = false;
  if (!this.isDragging() && !this.isOutOfDragArea(_aspxGetEventX(e), _aspxGetEventY(e))) {
   if (_aspxIsExists(this.onDoClickHandler))
    this.onDoClickHandler.call(this.owner, e);
  }
  else {
   var ctrlPressed = _aspxGetCtrlKey(e);
   wasCallback = this.onEndDrag(ctrlPressed);
  }
  if (!wasCallback)
   this.cancelDrag(true, false);
  else {
   this.dragViewHelper.HideToolTip();
   __aspxDragHelper = null;
   this.scheduler.onCallback = _aspxCreateDelegate(this.OnCallback, this);
   this.scheduler.onCallbackError = _aspxCreateDelegate(this.OnCallbackError, this);
  }
 },
 isOutOfDragArea: function (newX, newY) {
  return Math.max(Math.abs(newX - this.lastX), Math.abs(newY - this.lastY)) >= this.dragArea;
 },
 OnApplyDrag: function (copy) {
  var selectedAppointmentIds = this.appointmentSelection.selectedAppointmentIds;
  var count = selectedAppointmentIds.length;
  var params = "APTSCHANGE|";
  var wasChanges = false;
  for (var i = 0; i < count; i++) {
   var id = selectedAppointmentIds[i];
   var appointment = this.scheduler.GetAppointment(id);
   if (!_aspxIsExists(appointment) || !_aspxIsExists(appointment.operationInterval) || !_aspxIsExists(appointment.operationResources))
    continue;
   var canCopy = copy & appointment.flags.allowCopy;
   var wasDragged = !appointment.operationInterval.Equals(appointment.interval) || !_aspxArrayEqual(appointment.resources, appointment.operationResources);
   var wasMovedToAllDayArea = appointment.operationAllDay && !appointment.allDay;
   if (!wasDragged && !canCopy)
    continue;
   if (wasChanges)
    params += "!";
   params += id + "?START=" + _aspxDateTimeToMilliseconds(appointment.operationInterval.GetStart());
   if (appointment.operationInterval.GetDuration() != appointment.interval.GetDuration())
    params += "?DURATION=" + appointment.operationInterval.GetDuration();
   if (!_aspxArrayEqual(appointment.resources, appointment.operationResources))
    params += "?RESOURCES=" + this.ResourcesToString(appointment.operationResources);
   if (canCopy)
    params += "?COPY=true";
   if (wasMovedToAllDayArea)
    params += "?MADA=true";
   wasChanges = true;
  }
  if (wasChanges) {
   var operation = new ASPxClientAppointmentOperation(this, params);
   var isHandled = this.scheduler.RaiseAppointmentDrop(operation);
   if (isHandled)
    return true;
   this.Apply(params);
   return true;
  }
  else
   return false;
 },
 Apply: function (params) {
  this.scheduler.RaiseCallback(params);
 },
 Cancel: function () {
  this.cancelDrag(true, true);
 },
 ResourcesToString: function (resources) {
  var result = "";
  var count = resources.length;
  for (var i = 0; i < count; i++) {
   if (i > 0)
    result += ",";
   result += resources[i];
  }
  return result;
 }
});
ASPxDragAppointmentState = _aspxCreateClass(null, {
 constructor: function(sourceAppointments, primaryAppointment, appointmentDragOffset) {
  this.appointmentDragOffset = appointmentDragOffset;
  this.primaryAppointment = primaryAppointment;
  this.lastHitResource = "null";
  this.sourceAppointments = sourceAppointments;
 },
 DragTo: function(evt, layoutInterval, layoutResource) {
  var appointmentsOffset = this.CalculateAppointmentsOffset(layoutInterval);
  this.lastHitResource = layoutResource;
  this.DragAppointments(evt, layoutInterval, layoutResource, appointmentsOffset);
 },
 DragAppointments: function(evt, layoutInterval, layoutResource, appointmentsOffset) { 
  this.DragAppointmentsCore(evt, layoutInterval, layoutResource, appointmentsOffset, this.DragAppointment);
 },
 CalculateAppointmentsOffset: function(layoutInterval) {
  var newPrimaryAppointmentStart = _aspxDateIncreaseWithUtcOffset(layoutInterval.GetStart(), -this.appointmentDragOffset);
  return _aspxDateSubsWithTimezone(newPrimaryAppointmentStart, this.primaryAppointment.interval.GetStart());
 },
 DragAppointmentsCore: function(evt, layoutInterval, layoutResource, appointmentsOffset, dragAppointmentHandler) {
   var sourceAppointments = this.sourceAppointments;
   var count = sourceAppointments.length;
   for(var i = 0; i < count; i++) {
    var sourceAppointment = sourceAppointments[i];
    if(sourceAppointment.flags.allowDrag) {
     this.ChangeResource(evt, sourceAppointment, layoutResource); 
     dragAppointmentHandler.call(this, sourceAppointment, layoutInterval, appointmentsOffset);
    }
   }   
  },
 DragAppointment: function(appointment, layoutInterval, appointmentsOffset) {
  var startTime = _aspxDateIncreaseWithUtcOffset(appointment.interval.GetStart(), appointmentsOffset);
  var endTime = _aspxDateIncreaseWithUtcOffset(appointment.interval.GetEnd(), appointmentsOffset);
  var duration = _aspxDateSubsWithTimezone(endTime, startTime);
  if(duration < 0)
   duration = 0;
  appointment.operationInterval = new ASPxClientTimeInterval(startTime, duration);
 },
 ChangeResource: function(evt, sourceAppointment, layoutResource) {
  if(this.ShouldChangeResource(sourceAppointment, layoutResource))
   sourceAppointment.operationResources = [layoutResource];
  else
   sourceAppointment.operationResources = sourceAppointment.resources;
 },
 ShouldChangeResource: function(sourceAppointment, layoutResource) {
  if(sourceAppointment.appointmentType != ASPxAppointmentType.Normal || !sourceAppointment.flags.allowDragBetweenResources)
   return false;
  if(layoutResource == "null" || ASPxSchedulerUtils.IsAppointmentResourcesEmpty(sourceAppointment.resources) || _aspxArrayContains(sourceAppointment.resources, layoutResource))
   return false;
  return true;
 }
});
ASPxDragDayViewAppointmentState = _aspxCreateClass(ASPxDragAppointmentState, {
 constructor: function (sourceAppointments, primaryAppointment, appointmentDragOffset, showAllAppointmentsOnTimeCells) {
  this.constructor.prototype.constructor.call(this, sourceAppointments, primaryAppointment, appointmentDragOffset);
  this.showAllAppointmentsOnTimeCells = showAllAppointmentsOnTimeCells;
 },
 DragAppointments: function (evt, layoutInterval, layoutResource, appointmentsOffset) {
  if (layoutInterval.IsSmallerThanDay())
   this.DragAppointmentsCore(evt, layoutInterval, layoutResource, appointmentsOffset, this.DragToCell);
  else
   this.DragAppointmentsCore(evt, layoutInterval, layoutResource, appointmentsOffset, this.DragToAllDayArea);
 },
 DragToAllDayArea: function (sourceAppointment, layoutInterval, appointmentsOffset) {
  if (sourceAppointment.interval.IsSmallerThanDay())
   this.DragShortAppointmentToAllDayArea(sourceAppointment, appointmentsOffset);
  else
   this.DragLongAppointmentToAllDayArea(sourceAppointment, appointmentsOffset, layoutInterval);
 },
 DragShortAppointmentToAllDayArea: function (sourceAppointment, appointmentsOffset) {
  var start;
  start = _aspxDateIncreaseWithUtcOffset(ASPxSchedulerDateTimeHelper.TruncToDate(sourceAppointment.interval.GetStart()), appointmentsOffset);
  sourceAppointment.operationInterval = new ASPxClientTimeInterval(start, ASPxSchedulerDateTimeHelper.DaySpan);
  sourceAppointment.operationAllDay = true;
 },
 DragLongAppointmentToAllDayArea: function (sourceAppointment, appointmentsOffset, layoutInterval) {
  var start;
  if (this.showAllAppointmentsOnTimeCells) {
   var offset = this.CalculateLongAppointmentOffset(layoutInterval, appointmentsOffset);
   var duration = this.ExtendToDay(sourceAppointment);
   start = _aspxDateIncreaseWithUtcOffset(ASPxSchedulerDateTimeHelper.TruncToDate(sourceAppointment.interval.GetStart()), offset);
   sourceAppointment.operationInterval = new ASPxClientTimeInterval(start, duration);
  }
  else {
   start = _aspxDateIncreaseWithUtcOffset(sourceAppointment.interval.GetStart(), appointmentsOffset);
   sourceAppointment.operationInterval = new ASPxClientTimeInterval(start, sourceAppointment.interval.GetDuration());
  }
 },
 CalculateLongAppointmentOffset: function (layoutInterval, appointmentsOffset) {
  var dragStart = _aspxDateIncreaseWithUtcOffset(layoutInterval.GetStart(), -appointmentsOffset);
  var daysDifference = this.CalculateDaysDifference(dragStart, layoutInterval.GetStart());
  return ASPxSchedulerDateTimeHelper.DaySpan * daysDifference;
 },
 CalculateDaysDifference: function (date1, date2) {
  snappedDate1 = ASPxSchedulerDateTimeHelper.TruncToDate(date1);
  snappedDate2 = ASPxSchedulerDateTimeHelper.TruncToDate(date2);
  return _aspxDateSubsWithTimezone(snappedDate2, snappedDate1) / ASPxSchedulerDateTimeHelper.DaySpan;
 },
 ExtendToDay: function (sourceAppointment) {
  var duration = sourceAppointment.interval.GetDuration(); ;
  var remainder = duration % ASPxSchedulerDateTimeHelper.DaySpan;
  if (remainder != 0)
   return (duration - remainder + ASPxSchedulerDateTimeHelper.DaySpan);
  else
   return duration;
 },
 DragToCell: function (sourceAppointment, layoutInterval, appointmentsOffset) {
  if (sourceAppointment.interval.IsSmallerThanDay())
   this.DragShortAppointmentToCell(sourceAppointment, layoutInterval, appointmentsOffset);
  else
   this.DragLongAppointmentToCell(sourceAppointment, layoutInterval, appointmentsOffset);
 },
 DragLongAppointmentToCell: function (sourceAppointment, layoutInterval, appointmentsOffset) {
  if (this.showAllAppointmentsOnTimeCells) {
   var start = _aspxDateIncreaseWithUtcOffset(sourceAppointment.interval.GetStart(), appointmentsOffset);
   sourceAppointment.operationInterval = new ASPxClientTimeInterval(start, sourceAppointment.interval.GetDuration());
  }
  else
   sourceAppointment.operationInterval = new ASPxClientTimeInterval(layoutInterval.GetStart(), layoutInterval.GetDuration());
 },
 DragShortAppointmentToCell: function (sourceAppointment, layoutInterval, appointmentsOffset) {
  var start = _aspxDateIncreaseWithUtcOffset(sourceAppointment.interval.GetStart(), appointmentsOffset);
  sourceAppointment.operationInterval = new ASPxClientTimeInterval(start, sourceAppointment.interval.GetDuration());
  sourceAppointment.operationAllDay = false;
 },
 CalculateAppointmentsOffset: function (layoutInterval) {
  if (this.ShouldTruncToDate(layoutInterval))
   return _aspxDateSubsWithTimezone(layoutInterval.GetStart(), ASPxSchedulerDateTimeHelper.TruncToDate(this.primaryAppointment.interval.GetStart()));
  else
   return this.constructor.prototype.CalculateAppointmentsOffset.call(this, layoutInterval);
 },
 ShouldTruncToDate: function (layoutInterval) {
  var dragToAllDayArea = !layoutInterval.IsSmallerThanDay();
  var isShortAppointment = this.primaryAppointment.interval.IsSmallerThanDay();
  return dragToAllDayArea && isShortAppointment;
 }
});
ASPxClientAppointmentFlags = _aspxCreateClass(null, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.allowDelete = true;
  this.allowEdit = true;
  this.allowResize = true;
  this.allowCopy = true;
  this.allowDrag = true;
  this.allowDragBetweenResources = true;
  this.allowInplaceEditor = true;
  this.allowConflicts = true;
 }
});
ASPxClientAppointment = _aspxCreateClass(null, {
 constructor: function(interval, resources, flags, appointmentId, appointmentType, statusIndex, labelIndex){
  this.interval = interval;
  this.resources = resources;
  this.flags = flags;
  this.appointmentId = appointmentId;
  this.appointmentType = ( appointmentType ) ? appointmentType : ASPxAppointmentType.Normal;
  this.statusIndex = statusIndex;
  this.labelIndex = labelIndex;
 },
 __toJsonExceptKeys: ["flags"],
 GetToolTipContent: function(scheduler) { 
  var formatter = new ASPxDateFormatter();
  var interval = _aspxIsExists(this.operationInterval) ? this.operationInterval : this.interval;
  var startTimeFormat = this.SelectStartTimeFormat(scheduler, interval);
  var endTimeFormat = this.SelectEndTimeFormat(scheduler, interval);
  formatter.SetFormatString(startTimeFormat);
  var result = formatter.Format(interval.GetStart());
  if(_aspxIsExists(endTimeFormat)) {
   formatter.SetFormatString(endTimeFormat);
   result += " - " + formatter.Format(interval.GetEnd());
  }
  return result;  
 },
 SelectStartTimeFormat: function(scheduler, interval) {
  var intervalStart = interval.GetStart();
  var intervalEnd = interval.GetEnd();
  var startDate = intervalStart.getDate();
  var startYear = intervalStart.getYear();
  var startMonth = intervalStart.getMonth();
  var endDate = intervalEnd.getDate();
  var endYear = intervalEnd.getYear();
  var endMonth = intervalEnd.getMonth();
  var truncStartDate = new Date(startYear, startMonth, startDate);
  var truncEndDate = new Date(endYear, endMonth, endDate);
  var datesEquals = startDate == endDate && startMonth == endMonth && startYear == endYear;
  if(datesEquals) {
   if(interval.IsSmallerThanDay())
    return scheduler.formatsTimeWithMonthDay[0];
   else
    return scheduler.formatsWithoutYearAndWeekDay[0];
  }
  else {
   if(truncStartDate - interval.GetStart() == 0&& truncEndDate - interval.GetEnd() == 0) {   
    if(startYear == endYear || interval.IsDurationEqualToDay())
     return scheduler.formatsWithoutYearAndWeekDay[0];    
    else
     return scheduler.formatsDateWithYear[0];    
   }
   else {
    if(startYear == endYear)
     return scheduler.formatsTimeWithMonthDay[0];    
    else
     return scheduler.formatsDateTimeWithYear[0];    
   }
    }
 },
 SelectEndTimeFormat: function(scheduler, interval) {
  var intervalStart = interval.GetStart();
  var intervalEnd = interval.GetEnd();
  var startDate = intervalStart.getDate();
  var startYear = intervalStart.getYear();
  var startMonth = intervalStart.getMonth();
  var endDate = intervalEnd.getDate();
  var endYear = intervalEnd.getYear();
  var endMonth = intervalEnd.getMonth();
  var truncStartDate = new Date(startYear, startMonth, startDate);
  var truncEndDate = new Date(endYear, endMonth, endDate);
  var datesEquals = startDate == endDate && startMonth == endMonth && startYear == endYear;
  if(datesEquals) {
   if(interval.IsSmallerThanDay())
    return scheduler.formatsTimeOnly[0];
   else
    return null;
  }
  else {
   if(truncStartDate - interval.GetStart() == 0&& truncEndDate - interval.GetEnd() == 0) {   
    if(startYear == endYear || interval.IsDurationEqualToDay())
     return (interval.IsDurationEqualToDay()) ? null : scheduler.formatsWithoutYearAndWeekDay[0];    
    else
     return scheduler.formatsDateWithYear[0];    
   }
   else {
    if(startYear == endYear)
     return scheduler.formatsTimeWithMonthDay[0];    
    else
     return scheduler.formatsDateTimeWithYear[0];    
   }
    }
 },
 AddResource: function(resourceId) {
  if (!this.resources)
   this.resources = new Array();
  this.resources.push(resourceId);
 },
 GetResource: function(index) {
  var resources = this.GetResources();
  if (index >= 0 && index < resources.length)
   return resources[index];
  return null;
 },
 GetResources: function() {
  if (!this.resources)
   this.resources = new Array();
  return this.resources;
 },
 CreateDefaultTimeInterval: function() {
  return new ASPxClientTimeInterval(new Date(), 30 * 60 * 1000);
 },
 SetStart: function(start) {
  if (!this.interval) 
   this.interval = this.CreateDefaultTimeInterval();
  this.interval.SetStart(start);
 },
 GetStart: function() {
  if (!this.interval) 
   this.interval = this.CreateDefaultTimeInterval();
  return this.interval.GetStart();
 },
 SetEnd: function(end) {
  if (!this.interval) 
   this.interval = this.CreateDefaultTimeInterval();
  this.interval.SetEnd(end);
 },
 GetEnd: function() {
  if (!this.interval) 
   this.interval = this.CreateDefaultTimeInterval();
  return this.interval.GetEnd();
 },
 SetDuration: function(duration) {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  this.interval.SetDuration(duration);
 },
 GetDuration: function() {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  return this.interval.GetDuration();
 },
 SetId: function(id) {
  this.appointmentId = id;
 },
 GetId: function() {
  return this.appointmentId;
 },
 SetAppointmentType: function(type) {
  this.appointmentType = type;
 },
 GetAppointmentType: function() {
  return this.appointmentType;
 },
 SetStatusId: function(statusId) {
  this.statusIndex = statusId;
 },
 GetStatusId: function() {
  return this.statusIndex;
 },
 SetLabelId: function(labelId) {
  this.labelIndex = labelId;
 },
 GetLabelId: function() {
  return this.labelIndex;
 },
 SetSubject: function(subject) {
  this.subject = subject;
 },
 GetSubject: function() {
  if (!this.subject)
   return "";
  return this.subject;
 },
 SetDescription: function(description) {
  this.description = description;
 },
 GetDescription: function() {
  if (!this.description)
   return "";
  return this.description;
 },
 SetLocation: function(location) {
  this.location = location;
 },
 GetLocation: function() {
  if (!this.location)
   return "";
  return this.location;
 },
 SetAllDay: function(allDay) {
  this.allDay = allDay;
 },
 GetAllDay: function() {
  if (!this.allDay)
   return false;
  return this.allDay;
 },
 SetRecurrencePattern: function(recurrencePattern) {
  this.recurrencePattern = recurrencePattern;
 },
 GetRecurrencePattern: function() {
  return this.recurrencePattern;
 }, 
 SetRecurrenceInfo: function(recurrenceInfo) {
  this.recurrenceInfo = recurrenceInfo;
 },
 GetRecurrenceInfo: function() {
  return this.recurrenceInfo;
 },
 GetOperationInterval: function() {
  if (_aspxIsExists(this.operationInterval))
   return this.operationInterval;
  return this.interval;
 },
 GetOperationResources: function() {
  if (_aspxIsExists(this.operationResources))
   return this.operationResources;
  return this.GetResources();
 }
});
ASPxClientPoint = _aspxCreateClass( null, {
 constructor: function(x, y) {
  this.x = x;
  this.y = y;
 },
 GetX: function() {
  return this.x;
 },
 GetY: function() {
  return this.y;
 }
});
ASPxClientRect = _aspxCreateClass( null, {
 constructor: function(x, y, width, height) { 
  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;
 },
 GetLeft: function() {
  return this.x;
 },
 GetRight: function() {
  return this.x + this.width;
 },
 GetTop: function() {
  return this.y;
 },
 GetBottom: function() {
  return this.y + this.height;
 },
 GetWidth: function() {
  return this.width;
 },   
 GetHeight: function() {
  return this.height;
 }
});
ASPxClientAppointmentBounds = _aspxCreateClass(null, {
   constructor: function(x, y, width, height) { 
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
   },
   GetLeftBound: function() {
  return this.x;
   },
   GetRightBound: function() {
  return this.x + this.width;
   },
   GetTopBound: function() {
  return this.y;
   },
   GetBottomBound: function() {
  return this.y + this.height;
   },
   GetWidth: function() {
  return this.width;
   },   
   GetHeight: function() {
  return this.height;
   }
});
ASPxClientAppointmentLayoutCalculator = _aspxCreateClass(null, {
 constructor: function(schedulerViewInfo, parent) {
  this.schedulerViewInfo = schedulerViewInfo;
  this.minAppointmentWidth = 7;
  this.minAppointmentHeight = 7;  
 },
 RecalculateInnerContentDivSize: function(appointmentViewInfos) {
  var count = appointmentViewInfos.length;
  this.divs = [];
  this.vi = [];
  for (var i = 0; i < count; i++) {
   var innerContentDiv = this.FindInnerContentDiv(appointmentViewInfos[i]);
   if (_aspxIsExists(innerContentDiv)) {
    this.divs.push(innerContentDiv);
    this.vi.push(appointmentViewInfos[i]);
    this.PrepareSetInnerContentDivSize(innerContentDiv, appointmentViewInfos[i]);
   }
  }
  for (var i = this.divs.length - 1; i >= 0; i--) {
   this.CalculateSetInnerContentDivSizeParameters1(this.divs[i], this.vi[i]);
  }
  for (var i = this.divs.length - 1; i >= 0; i--) {
   this.CalculateSetInnerContentDivSizeParameters2(this.divs[i], this.vi[i]);
  }
  for (var i = this.divs.length - 1; i >= 0; i--) {
   this.CalculateSetInnerContentDivWidth(this.divs[i], this.vi[i]);
  }
  for (var i = this.divs.length - 1; i >= 0; i--) {
   this.SetInnerContentDivWidth(this.divs[i], this.vi[i]);
  }
  for (var i = this.divs.length - 1; i >= 0; i--) {
   this.CalculateSetInnerContentDivHeight(this.divs[i], this.vi[i]);
  }
  for (var i = this.divs.length - 1; i >= 0; i--) {
   this.SetInnerContentDivHeight(this.divs[i], this.vi[i]);
  }
 },
 AfterCalculateAppointments: function(appointmentViewInfos) {
  var count = appointmentViewInfos.length;
  for(var i = 0; i < count; i++)
   this.AfterCalculateAppointment(appointmentViewInfos[i]);
 },
 AfterCalculateAppointment: function(appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv;
  if(!_aspxIsExists(appointmentDiv))
   return;
  _aspxSubscribeSchedulerMouseEvents(appointmentDiv, appointmentViewInfo);
  _aspxAddToolTip(appointmentViewInfo, this.schedulerViewInfo.scheduler.appointmentToolTip);
  this.CalculateFinalContentLayout(appointmentViewInfo);
 },
 CalculateFinalContentLayout: function(appointmentViewInfo) {
  this.LayoutAppointmentStatus(appointmentViewInfo);  
 }, 
 LayoutAppointmentStatus : function(appointmentViewInfo) {    
  var statusBackDivId = appointmentViewInfo.statusViewInfo.backDivId;
  var statusForeDivId = appointmentViewInfo.statusViewInfo.foreDivId;
  if (_aspxIsExists(statusBackDivId) && _aspxIsExists(statusForeDivId)) {
   var statusBackDiv = this.schedulerViewInfo.scheduler.GetAppointmentBlockElementById(statusBackDivId);
   if (!_aspxIsExists(statusBackDiv))
    return;
   var statusForeDiv = this.schedulerViewInfo.scheduler.GetAppointmentBlockElementById(statusForeDivId);
   if (!_aspxIsExists(statusForeDiv))
    return;
    var innerContentDiv = this.FindInnerContentDiv(appointmentViewInfo);
    if (!_aspxIsExists(innerContentDiv))
     innerContentDiv = appointmentViewInfo.contentDiv;     
    statusBackDiv.appointmentDiv = innerContentDiv;
    statusForeDiv.appointmentDiv = innerContentDiv;    
    this.LayoutAppointmentStatusCore(statusForeDiv, statusBackDiv, appointmentViewInfo);    
   }
 },
 ResetContentDivSize : function(appointmentViewInfo) {
  var innerContentDiv = this.FindInnerContentDiv(appointmentViewInfo);
  if(_aspxIsExists(innerContentDiv))
   innerContentDiv.style.height = "";  
 },
 FindInnerContentDiv : function(appointmentViewInfo) {
  var appointmentDiv = appointmentViewInfo.contentDiv; 
  if(!_aspxIsExists(appointmentDiv))
   return null;
  var children = appointmentDiv.childNodes;
  var count = children.length;
  for(var i = 0; i < count; i++) {
   var child = children[i];
   if(this.IsInnerContentDiv(child))    
    return child;   
  }
  return null;
 },
 IsInnerContentDiv : function(child) {  
  if (!_aspxIsExists(child.tagName))
   return false;
  else {
   var tagName = child.tagName.toUpperCase();
   return ((tagName == "TABLE") || (tagName == "DIV"));
  }
 },
 PrepareSetInnerContentDivSize: function(contentDiv, aptViewInfo) {
  if(__aspxIE && __aspxBrowserMajorVersion >=7) { 
   if (contentDiv.clientHeight <= 0)
    contentDiv.style.height = "0";
   if (contentDiv.clientWidth <= 0)
    contentDiv.style.width = "0";
  }
 },
 CalculateSetInnerContentDivSizeParameters1: function(contentDiv, aptViewInfo) {
  var bordersHeight = contentDiv.offsetHeight - contentDiv.clientHeight;   
  var bordersWidth = contentDiv.offsetWidth - contentDiv.clientWidth;   
  aptViewInfo.bordersHeight = bordersHeight;
  aptViewInfo.bordersWidth = bordersWidth;
 },
 CalculateSetInnerContentDivSizeParameters2: function(contentDiv, aptViewInfo) {
  contentDiv.style.height = "";
 },
 CalculateSetInnerContentDivWidth: function(contentDiv, aptViewInfo) {
  var bordersWidth = aptViewInfo.bordersWidth;   
  aptViewInfo.innerStyleWidth = Math.max(0, aptViewInfo.contentDiv.offsetWidth - bordersWidth) + "px";
 },
 CalculateSetInnerContentDivHeight: function(contentDiv, aptViewInfo) {
  var bordersHeight = aptViewInfo.bordersHeight;   
  aptViewInfo.innerStyleHeight = Math.max(aptViewInfo.contentDiv.offsetHeight - bordersHeight, this.minAppointmentHeight) + "px";
 },
 SetInnerContentDivWidth: function(contentDiv, aptViewInfo) {
  contentDiv.style.width = aptViewInfo.innerStyleWidth;
 },
 SetInnerContentDivHeight: function(contentDiv, aptViewInfo) {
  contentDiv.style.height = aptViewInfo.innerStyleHeight;
 },
 RecalcAppointmentIntervalAndOffset: function(viewInfo, aptBounds, firstCell, lastCell) {
  var firstCellInterval = this.schedulerViewInfo.scheduler.GetCellInterval(firstCell);
  var lastCellInterval = this.schedulerViewInfo.scheduler.GetCellInterval(lastCell);
  viewInfo.startRelativeIndent = this.RecalcStartOffset(aptBounds, firstCell);
  viewInfo.endRelativeIndent = this.RecalcEndOffset(aptBounds, lastCell);  
  var start = this.CalculateStartTimeByOffset(firstCellInterval, viewInfo.startRelativeIndent);
  var end = this.CalculateEndTimeByOffset(lastCellInterval, viewInfo.endRelativeIndent);    
  viewInfo.appointmentInterval.SetStart(start);
  viewInfo.appointmentInterval.SetDuration(end - start);  
 },
 CalculateStartTimeByOffset: function(baseInterval, startOffset) {
  var offset =  baseInterval.GetDuration() * startOffset / 100;
  return _aspxDateIncrease(baseInterval.GetStart(), offset);
 },
 CalculateEndTimeByOffset: function(baseInterval, endOffset) {
  var offset =  - baseInterval.GetDuration() * endOffset / 100;
  return _aspxDateIncrease(baseInterval.GetEnd(), offset);  
 },
 RecalcStartOffset: function(aptBounds, firstCell) {
 },
 RecalcEndOffset: function(aptBounds, lastCell) {
 } 
});
ASPxClientVerticalAppointmentLayoutCalculator = _aspxCreateClass(ASPxClientAppointmentLayoutCalculator, {
 constructor: function(schedulerViewInfo, parent, disableSnapToCells) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo);
  this.gapBetweenAppointment = 4;
  this.leftAppointmentIndent = 2;
  this.rightAppointmentIndent = 2;    
  this.parent = parent;
  this.disableSnapToCells = disableSnapToCells;
 },
 CalculateLayout: function(appointmentViewInfos) {
  if(!_aspxIsExists(appointmentViewInfos) || !_aspxIsExists(appointmentViewInfos.length)) 
   return;
  var count = appointmentViewInfos.length;
  if(count <= 0)
   return;
  var count = appointmentViewInfos.length;
  for(var i = 0; i < count; i ++)
   this.CalculateAppointmentLayout(appointmentViewInfos[i]);
  this.RecalculateInnerContentDivSize(appointmentViewInfos);
  this.AfterCalculateAppointments(appointmentViewInfos); 
   },
   CalculateAppointmentLayout: function(viewInfo){
  viewInfo.ResetRelativeIndentAndTime();
  this.ResetContentDivSize(viewInfo);
  var schedulerViewInfo = this.schedulerViewInfo;
  var div = viewInfo.contentDiv;
  if(_aspxIsExists(div)){
   var startCell = _aspxIsExists(viewInfo.startCell) ? viewInfo.startCell : schedulerViewInfo.GetCell(viewInfo.containerIndex, viewInfo.firstCellIndex) ;
   var endCell = _aspxIsExists(viewInfo.endCell) ? viewInfo.endCell : schedulerViewInfo.GetCell(viewInfo.containerIndex, viewInfo.lastCellIndex);
   var leftColumnPadding = this.schedulerViewInfo.scheduler.leftColumnPadding;
   var rightColumnPadding = this.schedulerViewInfo.scheduler.rightColumnPadding;
   if(_aspxIsExists(startCell) && _aspxIsExists(endCell)){    
    _aspxSetSchedulerDivDisplay(div, true);
    viewInfo.startCell = startCell;
    viewInfo.endCell = endCell;
    var paddingBeforeAppointment = this.GetPaddingBeforeAppointment(viewInfo);
    var paddingAfterAppointment = this.GetPaddingAfterAppointment(viewInfo);
    var factor = (startCell.offsetWidth - (leftColumnPadding + rightColumnPadding)) / viewInfo.maxIndexInGroup;
    var topIndent = this.GetIndent(startCell, viewInfo.startRelativeIndent);
    var bottomIndent = this.GetIndent(endCell, viewInfo.endRelativeIndent);
    var aptLeft = Math.floor(leftColumnPadding + schedulerViewInfo.parent.CalcRelativeElementLeft(startCell) + viewInfo.startHorizontalIndex * factor  + paddingBeforeAppointment);      
    var aptWidth = Math.floor((viewInfo.endHorizontalIndex - viewInfo.startHorizontalIndex) * factor - (paddingAfterAppointment + paddingBeforeAppointment));
    var aptTop = Math.round(schedulerViewInfo.parent.CalcRelativeElementTop(startCell) + topIndent); 
    var aptBottom = Math.round(schedulerViewInfo.parent.CalcRelativeElementBottom(endCell) - bottomIndent); 
    if (__aspxFirefox)
     aptTop = aptTop - 1;
    var aptHeight = aptBottom - aptTop ;      
    var aptBounds = new ASPxClientAppointmentBounds(aptLeft, aptTop, aptWidth, aptHeight);
    if(this.ShouldExtendAppointmentBounds(aptHeight)) {
     this.ExtendAppointmentBounds(aptBounds, startCell, endCell);
     this.RecalcAppointmentIntervalAndOffset(viewInfo, aptBounds, startCell, endCell);
    }
    div.style.left = aptLeft + "px";
    div.style.width = Math.max(aptWidth, 0)  + "px";
    div.style.top = aptBounds.GetTopBound() + "px";
    div.style.height = aptBounds.GetHeight() + "px";
   }
  }
 },
 ShouldExtendAppointmentBounds: function(aptHeight) {
  if (aptHeight >= this.minAppointmentHeight)
   return false; 
  if(_aspxIsExists(this.disableSnapToCells) && this.disableSnapToCells)
   return false;
  return true;
 },
 ExtendAppointmentBounds: function(aptBounds, firstCell, lastCell) {
  var firstCellTopBound = this.schedulerViewInfo.parent.CalcRelativeElementTop(firstCell);
  var lastCellBottomBound = this.schedulerViewInfo.parent.CalcRelativeElementBottom(lastCell);  
  aptBounds.height = Math.min(this.minAppointmentHeight, lastCellBottomBound - aptBounds.GetTopBound());       
  if (aptBounds.height < this.minAppointmentHeight)    
   aptBounds.y = Math.max(firstCellTopBound, aptBounds.GetBottomBound() - this.minAppointmentHeight);  
 },
 RecalcStartOffset: function(aptBounds, firstCell) {
  var cellTopBound = this.schedulerViewInfo.parent.CalcRelativeElementTop(firstCell);
  var cellHeight = this.schedulerViewInfo.parent.CalcRelativeElementBottom(firstCell) - cellTopBound;
  return Math.floor((aptBounds.GetTopBound() - cellTopBound) / cellHeight * 100);
 },
 RecalcEndOffset: function(aptBounds, lastCell) {
  var cellBottomBound = this.schedulerViewInfo.parent.CalcRelativeElementBottom(lastCell);
  var cellHeight = cellBottomBound - this.schedulerViewInfo.parent.CalcRelativeElementTop(lastCell);
  return Math.floor((cellBottomBound - aptBounds.GetBottomBound()) / cellHeight * 100);  
 },
 GetPaddingBeforeAppointment: function(viewInfo) {
  if (this.IsFirstAppointment(viewInfo))
   return this.leftAppointmentIndent;
  else
   return this.gapBetweenAppointment / 2;
 },
 GetPaddingAfterAppointment: function(viewInfo) {
  if (this.IsLastAppointment(viewInfo))
   return this.rightAppointmentIndent;
  else
   return this.gapBetweenAppointment / 2;
 },
 IsLastAppointment: function(viewInfo) {
  return viewInfo.endHorizontalIndex == viewInfo.maxIndexInGroup;
 },
 IsFirstAppointment: function(viewInfo) {
  return viewInfo.startHorizontalIndex == 0;
 },
 GetIndent: function(cell, relativeIndent) {
  if(!_aspxIsExists(relativeIndent))
   return 0;
  else
   return relativeIndent * cell.offsetHeight / 100;
 },  
 LayoutAppointmentStatusCore : function(statusForeDiv, statusBackDiv, appointmentViewInfo) {   
  var statusViewInfo = appointmentViewInfo.statusViewInfo;
  var aptDiv = statusBackDiv.appointmentDiv;  
  var height = aptDiv.clientHeight;    
  var topBorderHeight = this.CalculateTopBorderHeight(appointmentViewInfo, aptDiv);
  statusBackDiv.style.height = height + "px";  
  statusBackDiv.style.top =  topBorderHeight  +  "px";  
  var topIndent = Math.floor(statusViewInfo.startOffset * height / 100);
  var bottomIndent = Math.floor(statusViewInfo.endOffset * height / 100);
  statusForeDiv.style.top =  topIndent  + topBorderHeight + "px";   
  statusForeDiv.style.height =  height - topIndent - bottomIndent + "px";
 },
 CalculateTopBorderHeight: function(aptViewInfo, aptDiv) {
  var aptBordersHeight = aptDiv.offsetHeight - aptDiv.clientHeight;
  if (!aptViewInfo.hasTopBorder)
   return 0;
  if (aptViewInfo.hasBottomBorder)
   return Math.ceil(aptBordersHeight / 2);
  else
   return aptBordersHeight;
 }
});
ASPxClientBusyInterval = _aspxCreateClass(null, {
 constructor: function(start, end) {
  this.start = start;
  this.end = end;
 },
 ContainsExcludeEndBound: function(value) {
  return this.start <= value && this.end > value;
 }
});
ASPxClientHorizontalAppointmentLayoutCalculator = _aspxCreateClass(ASPxClientAppointmentLayoutCalculator, {
 constructor: function (schedulerViewInfo, disableSnapToCells) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo);
  this.gapBetweenAppointments = 1 + schedulerViewInfo.scheduler.appointmentVerticalInterspacing;
  this.leftAppointmentIndent = 2;
  this.rightAppointmentIndent = 2;
  this.topAppointmentIndent = 2;
  this.bottomLastAppointmentIndent = 2;
  this.schedulerViewInfo = schedulerViewInfo;
  this.maxCellsInWeek = 7;
  this.appointmentNotFitted = 0;
  this.appointmentPartialFitted = 1;
  this.appointmentFitted = 2;
  this.disableSnapToCells = disableSnapToCells;
  this.containerSizeCache = [];
 },
 CalculateLayout: function (appointmentViewInfos) {
  this.RecalculateContainersCellCache(this.schedulerViewInfo.cellContainers);
  if (!_aspxIsExists(appointmentViewInfos) || !_aspxIsExists(appointmentViewInfos.length))
   return;
  var count = appointmentViewInfos.length;
  if (count <= 0)
   return;
  this.PrepareViewInfos(appointmentViewInfos);
  var containerCount = this.schedulerViewInfo.cellContainers.length;
  this.apts = [];
  this.cellWithMoreButtons = [];
  this.moreButtonViewInfos = [];
  this.aptPositions = []; ;
  for (var i = 0; i < containerCount; i++) {
   var containerViewInfos = this.SelectViewInfosForContainer(appointmentViewInfos, this.schedulerViewInfo.cellContainers[i].containerIndex);
   if (containerViewInfos.length > 0)
    this.CalculateLayoutCore(containerViewInfos);
  }
  this.RecalculateCellsHeight();
  for (var i = this.apts.length - 1; i >= 0; i--) {
   var posInfo = this.aptPositions[i];
   if (posInfo != null)
    this.apts[i].style.top = this.CalculateAppointmentTopFromPositionInfo(posInfo);
   else
    _aspxSetSchedulerDivDisplay(this.apts[i], false);
  }
  if (this.schedulerViewInfo.moreButtonDiv)
   this.schedulerViewInfo.moreButtonDiv.style.display = "none";
  for (var i = this.cellWithMoreButtons.length - 1; i >= 0; i--) {
   this.schedulerViewInfo.ShowMoreButton(this.cellWithMoreButtons[i], this.moreButtonViewInfos[i]); 
  }
  this.AfterCalculateAppointments(appointmentViewInfos);
 },
 CalculateAppointmentLayoutAtOnce: function (viewInfo) {
  viewInfo.height = viewInfo.contentDiv.offsetHeight;
  this.CalculateAppointmentSize(viewInfo);
  this.ApplyPrepare(viewInfo);
  this.apts = [];
  this.cellWithMoreButtons = [];
  this.aptPositions = [];
  this.CalculateAppointmentCellsHeight(viewInfo);
  this.CalculateAppointmentPosition(viewInfo, true);
  viewInfo.contentDiv.style.height = viewInfo.height + "px";
  var count = this.apts.length;
  for (var i = 0; i < count; i++) {
   if (this.aptPositions[i])
    this.apts[i].style.top = this.CalculateAppointmentTopFromPositionInfo(this.aptPositions[i]);
   else
    _aspxSetSchedulerDivDisplay(this.apts[i], false);
  }
 },
 RecalculateCellsHeight: function() {
 },
 CalculateAppointmentTopFromPositionInfo: function (posInfo) {
  var cell = this.schedulerViewInfo.GetCell(posInfo.containerIndex, posInfo.cellIndex);
  return posInfo.relativePosition + this.schedulerViewInfo.parent.CalcRelativeElementTop(cell) + "px";
 },
 CalculateAppointmentCellsHeight: function (viewInfo) {
  var containerIndex = viewInfo.containerIndex;
  if (!this.containerSizeCache[containerIndex])
   this.containerSizeCache[containerIndex] = [];
  for (var i = viewInfo.firstCellIndex; i <= viewInfo.lastCellIndex; i++)
   this.UpdateCellContainerSizeCache(containerIndex, i);
 },
 RecalculateContainersCellCache: function (cellContainers) {
  this.containerSizeCache = [];
  var containerCount = cellContainers.length;
  for (var i = 0; i < containerCount; i++)
   this.RecalculateContainerCellCache(cellContainers[i]);
 },
 RecalculateContainerCellCache: function (container) {
  var cellCount = container.cellCount;
  var containerIndex = container.containerIndex;
  this.containerSizeCache[containerIndex] = [];
  for (var i = 0; i < cellCount; i++)
   this.UpdateCellContainerSizeCache(containerIndex, i);
 },
 UpdateCellContainerSizeCache: function (containerIndex, cellIndex) {
  var cell = this.schedulerViewInfo.GetCell(containerIndex, cellIndex);
  this.containerSizeCache[containerIndex][cellIndex] = cell.clientHeight;
 },
 SetCellContainerSizeCache: function (containerIndex, cellIndex, cellHeight) {
  this.containerSizeCache[containerIndex][cellIndex] = cellHeight;
 },
 GetCellHeight: function (containerIndex, cellIndex) {
  return this.containerSizeCache[containerIndex][cellIndex];
 },
 SelectViewInfosForContainer: function (viewInfos, containerIndex) {
  var count = viewInfos.length;
  var result = new Array();
  for (var i = 0; i < count; i++) {
   if (viewInfos[i].containerIndex == containerIndex)
    result.push(viewInfos[i]);
  }
  return result;
 },
 CalculateLayoutCore: function (viewInfos) {
  var count = viewInfos.length;
  var relativePositionCalculator = this.CreateRelativePositionCalculator();
  var index = 0;
  do {
   relativePositionCalculator.CalculateAppointmentRelativePositions(viewInfos, index);
   index = this.CalculateAppointmentsPosition(viewInfos, index);
  } while (index < count);
 },
 CreateRelativePositionCalculator: function () {
  return new ASPxClientHorizontalAppointmentRelativePositionCalculator(this.gapBetweenAppointments);
 },
 PrepareViewInfos: function (viewInfos) {
  var count = viewInfos.length;
  var moreButtonDiv = this.schedulerViewInfo.moreButtonDiv;
  if (moreButtonDiv)
   moreButtonDiv.style.display = "block";
  for (var i = 0; i < count; i++) {
   var div = viewInfos[i].contentDiv;
   if (div) {
    _aspxSetSchedulerDivDisplay(div, true);
    div.style.width = "";
   }
   this.ResetContentDivSize(viewInfos[i]);
   this.CalculateAppointmentHeight(viewInfos[i]);
  }
  for (var i = 0; i < count; i++) {
   this.PrepareViewInfo(viewInfos[i]);
  }
  for (var i = 0; i < count; i++) {
   this.ApplyPrepare(viewInfos[i]);
  }
  this.RecalculateInnerContentDivSize(viewInfos); 
  for (var i = 0; i < count; i++) {
   viewInfos[i].height = viewInfos[i].contentDiv.offsetHeight;
  }
  if (moreButtonDiv) {
   this.schedulerViewInfo.moreButtonSize = moreButtonDiv.offsetHeight;
   this.schedulerViewInfo.moreButtonWidth = moreButtonDiv.offsetWidth;
  }
 },
 PrepareViewInfo: function (viewInfo) {
  viewInfo.ResetRelativeIndentAndTime();
  var div = viewInfo.contentDiv;
  viewInfo.visibleFirstCellIndex = viewInfo.firstCellIndex;
  viewInfo.visibleLastCellIndex = viewInfo.lastCellIndex;
  if (_aspxIsExists(div)) {
   this.CalculateAppointmentSize(viewInfo);
  }
 },
 ApplyPrepare: function (viewInfo) {
  var div = viewInfo.contentDiv;
  div.style.left = viewInfo.styleLeft;
  div.style.width = viewInfo.styleWidth;
 },
 CalculateAppointmentSize: function (viewInfo) {
  var containerIndex = viewInfo.containerIndex;
  var firstCell = this.schedulerViewInfo.GetCell(containerIndex, viewInfo.visibleFirstCellIndex);
  var lastCell = this.schedulerViewInfo.GetCell(containerIndex, viewInfo.visibleLastCellIndex);
  if (_aspxIsExists(firstCell) && _aspxIsExists(lastCell)) {
   this.CalculateAppointmentWidthAndPosition(viewInfo, firstCell, lastCell);
   viewInfo.visibleFirstCell = firstCell;
   viewInfo.visibleLastCell = lastCell;
  }
 },
 CalculateAppointmentHeight: function (viewInfo) {
  var div = viewInfo.contentDiv;
  this.ResetInnerContentDivHeight(viewInfo);
  var aptHeight = this.schedulerViewInfo.scheduler.privateAppointmentHeight;
  if (aptHeight != 0)
   div.style.height = aptHeight + "px";
  else
   div.style.height = "";
 },
 CalculateAppointmentWidthAndPosition: function (viewInfo, firstCell, lastCell) {
  var div = viewInfo.contentDiv;
  var borderWidth = div.offsetWidth - div.clientWidth;
  var leftIndent = this.GetIndent(firstCell, viewInfo.startRelativeIndent) + this.leftAppointmentIndent;
  var rightIndent = this.GetIndent(lastCell, viewInfo.endRelativeIndent) + this.rightAppointmentIndent;
  var left = this.schedulerViewInfo.parent.CalcRelativeElementLeft(firstCell) + leftIndent; 
  var width = this.schedulerViewInfo.parent.CalcRelativeElementRight(lastCell) - left - rightIndent; 
  var aptBounds = new ASPxClientAppointmentBounds(left, 0, width, div.offsetHeight);
  if (this.ShouldExtendAppointmentBounds(width)) {
   this.ExtendAppointmentBounds(aptBounds, firstCell, lastCell);
   this.RecalcAppointmentIntervalAndOffset(viewInfo, aptBounds, firstCell, lastCell);
  }
  viewInfo.styleLeft = aptBounds.GetLeftBound() + "px";
  viewInfo.styleWidth = Math.max(aptBounds.GetWidth() - borderWidth, 1) + "px";
 },
 ShouldExtendAppointmentBounds: function (width) {
  if (width >= this.minAppointmentWidth)
   return false;
  if (_aspxIsExists(this.disableSnapToCells) && this.disableSnapToCells)
   return false;
  return true;
 },
 ResetInnerContentDivHeight: function (aptViewInfo) {
  var innerDiv = this.FindInnerContentDiv(aptViewInfo);
  if (_aspxIsExists(innerDiv)) {
   innerDiv.style.height = "";
   innerDiv.style.width = "";
  }
 },
 ExtendAppointmentBounds: function (aptBounds, firstCell, lastCell) {
  var firstCellLeftBound = this.schedulerViewInfo.parent.CalcRelativeElementLeft(firstCell);
  var lastCellRightBound = this.schedulerViewInfo.parent.CalcRelativeElementRight(lastCell);
  aptBounds.width = Math.min(this.minAppointmentWidth, lastCellRightBound - aptBounds.GetLeftBound());
  if (aptBounds.width < this.minAppointmentWidth)
   aptBounds.x = Math.max(firstCellLeftBound, aptBounds.GetRightBound() - this.minAppointmentWidth);
 },
 RecalcStartOffset: function (aptBounds, firstCell) {
  var cellLeftBound = this.schedulerViewInfo.parent.CalcRelativeElementLeft(firstCell);
  var cellWidth = this.schedulerViewInfo.parent.CalcRelativeElementRight(firstCell) - cellLeftBound;
  return Math.floor((aptBounds.GetLeftBound() - cellLeftBound) / cellWidth * 100);
 },
 RecalcEndOffset: function (aptBounds, lastCell) {
  var cellRightBound = this.schedulerViewInfo.parent.CalcRelativeElementRight(lastCell);
  var cellWidth = cellRightBound - this.schedulerViewInfo.parent.CalcRelativeElementLeft(lastCell);
  return Math.floor((cellRightBound - aptBounds.GetRightBound()) / cellWidth * 100);
 },
 CalculateAppointmentsPosition: function (viewInfos, startIndex) {
  var count = viewInfos.length;
  for (var i = startIndex; i < count; i++) {
   var viewInfo = viewInfos[i];
   var result = this.CalculateAppointmentPosition(viewInfo, false);
   if (result == this.appointmentPartialFitted) {
    this.CalculateAppointmentSize(viewInfo);
    this.ApplyPrepare(viewInfo);
    return i;
   }
  }
  return count;
 },
 CalculateAppointmentPosition: function (viewInfo, dragMode) {
  var firstCell = viewInfo.visibleFirstCell;
  var dxtop = viewInfo.relativePosition + this.topAppointmentIndent; 
  var bottom = dxtop + viewInfo.height;
  var fitCount = 0;
  var container = this.schedulerViewInfo.cellContainers[viewInfo.containerIndex];
  for (var i = viewInfo.visibleFirstCellIndex; i <= viewInfo.visibleLastCellIndex; i++) {
   var cell = this.schedulerViewInfo.GetCell(viewInfo.containerIndex, i);
   var isFitted = this.CalculateIsFitted(viewInfo.containerIndex, i, bottom);
   if (!isFitted && !dragMode) {
    if (this.TryExpandCellSize(viewInfo.containerIndex, i, bottom + this.bottomLastAppointmentIndent)) {
     fitCount++;
     continue;
    }
    this.cellWithMoreButtons.push(cell);
    this.moreButtonViewInfos.push(viewInfo);
    if (i > viewInfo.visibleFirstCellIndex && i < viewInfo.visibleLastCellIndex && fitCount > 0) {
     throw new Error("internal scheduler error");
    }
    var prevCellsFitted = fitCount > 0;
    if (viewInfo.visibleFirstCellIndex < viewInfo.visibleLastCellIndex && i == viewInfo.visibleLastCellIndex && prevCellsFitted) {
     viewInfo.visibleLastCellIndex--;
     return this.appointmentPartialFitted;
    }
   }
   else
    fitCount++;
  }
  this.apts.push(viewInfo.contentDiv);
  if (fitCount == 0) {
   this.aptPositions.push(null);
   return this.appointmentNotFitted;
  }
  else {
   var positionInfo = { relativePosition: viewInfo.relativePosition + this.topAppointmentIndent,
    cellIndex: viewInfo.visibleFirstCellIndex,
    containerIndex: container.containerIndex
   };
   this.aptPositions.push(positionInfo);
   return this.appointmentFitted;
  }
 },
 GetIndent: function (cell, relativeIndent) {
  if (!_aspxIsExists(relativeIndent))
   return 0;
  else
   return relativeIndent * cell.offsetWidth / 100;
 },
 CalculateIsFitted: function (containerIndex, cellIndex, bottom) {
  var cellHeight = this.GetCellHeight(containerIndex, cellIndex);
  return (bottom + this.schedulerViewInfo.GetMoreButtonSize()) < cellHeight;
 },
 LayoutAppointmentStatusCore: function (statusForeDiv, statusBackDiv, appointmentViewInfo) {
  var statusViewInfo = appointmentViewInfo.statusViewInfo;
  statusBackDiv.style.width = statusBackDiv.appointmentDiv.clientWidth + "px";
  var leftIndent = Math.ceil(statusViewInfo.startOffset * statusBackDiv.offsetWidth / 100);
  var rightIndent = Math.ceil(statusViewInfo.endOffset * statusBackDiv.offsetWidth / 100);
  statusForeDiv.style.top = "1px";
  statusForeDiv.style.left = leftIndent + 1 + "px";
  statusForeDiv.style.width = Math.max(statusBackDiv.offsetWidth - leftIndent - rightIndent, 1) + "px";
 },
 TryExpandCellSize: function (containerIndex, cellIndex, bottom) {
  return false;
 }
});
ASPxCellsAutoHeightClientHorizontalAppointmentLayoutCalculator = _aspxCreateClass(ASPxClientHorizontalAppointmentLayoutCalculator, {
 constructor: function (schedulerViewInfo, disableSnapToCells) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo, disableSnapToCells);
 },
 TryExpandCellSize: function (containerIndex, cellIndex, bottom) {
  var container = this.schedulerViewInfo.cellContainers[containerIndex];
  var cellConstrant = container.cellConstraint[cellIndex];
  var currentCellHeight = this.GetCellHeight(containerIndex, cellIndex);
  var moreButtonSize = this.schedulerViewInfo.GetMoreButtonSize();
  if (cellConstrant.maxHeight >= 0)
   bottom += moreButtonSize;
  var desiredHeight = Math.max(currentCellHeight, bottom);
  var canExpandCell = cellConstrant.maxHeight <= 0 || desiredHeight < cellConstrant.maxHeight
  var cell = this.schedulerViewInfo.GetCell(containerIndex, cellIndex);
  if (!cell.reduceSize)
   cell.reduceSize = moreButtonSize;
  if (!canExpandCell)
   cell.reduceSize = 0;
  else
   this.SetCellContainerSizeCache(containerIndex, cellIndex, desiredHeight);
  return canExpandCell;
 },
 RecalculateCellsHeight: function () {
  var containers = this.schedulerViewInfo.cellContainers
  var containerCount = containers.length;
  var compressedCells = [];
  var compressedCellsHeaderHeight = [];
  for (var i = 0; i < containerCount; i++) {
   var cellContainer = containers[i];
   compressedCells[i] = [];
   var headerCell = this.schedulerViewInfo.GetMiddleCompressedCellsHeader(i);
   compressedCellsHeaderHeight[i] = (headerCell) ? headerCell.clientHeight : 0;
   var cellHeights = cellContainer.maxCellHeights;
   for (var cellIndex = 0; cellIndex < cellContainer.cellCount; cellIndex++) {
    var cell = this.schedulerViewInfo.GetCell(i, cellIndex);
    var cellHeight = this.GetCellHeight(i, cellIndex);
    if (cell.reduceSize) {
     cellHeight -= cell.reduceSize;
     cell.reduceSize = null;
    }
    cellHeight = Math.max(cellContainer.cellConstraint[cellIndex].minHeight, cellHeight);
    if (cellContainer.GetCellLocation(cellIndex).isCompressed) {
     cell.style.height = cellHeight + "px";
     compressedCells[i].push(cellIndex);
    }
    else
     cell.style.height = cellHeight + "px";
    cell.isCalculated = false;
   }
  }
  this.schedulerViewInfo.parent.ResetCache();
  this.CorrectCompressedCells(containers, compressedCells, compressedCellsHeaderHeight);  
 },
 CorrectCompressedCells: function (containers, compressedCells, compressedCellsHeaderHeight) {
  var containerCount = containers.length;
  for (var i = 0; i < containerCount; i++) {
   var cellContainer = containers[i];
   var headerCell = this.schedulerViewInfo.GetMiddleCompressedCellsHeader(i);
   if (headerCell == null)
    continue;
   var desiredHeaderHeight = compressedCellsHeaderHeight[i];
   if (headerCell.clientHeight > desiredHeaderHeight) { 
    var bugOffset = (headerCell.clientHeight - desiredHeaderHeight);
    var totalSize = 0;
    var firstCellCalculatedHeight = this.GetCellHeight(i, compressedCells[i][0]);
    var secondCellCalculatedHeight = this.GetCellHeight(i, compressedCells[i][1]);
    var firstCell = this.schedulerViewInfo.GetCell(i, compressedCells[i][0]);
    var secondCell = this.schedulerViewInfo.GetCell(i, compressedCells[i][1]);
    var firstCellClientHeight = firstCell.clientHeight;
    var secondCellClientHeight = secondCell.clientHeight;
    var totalDesiredClientCellHeight = (firstCellClientHeight + secondCellClientHeight + bugOffset) / 2;
    var totalCorrection = bugOffset;
    if (firstCellCalculatedHeight > totalDesiredClientCellHeight) {
     firstCell.style.height = firstCellClientHeight + "px";
     secondCell.style.height = secondCellClientHeight + totalCorrection + "px";
    } else if (secondCellCalculatedHeight > totalDesiredClientCellHeight) {
     secondCell.style.height = secondCellClientHeight + "px";
     firstCell.style.height = firstCellClientHeight + totalCorrection + "px";
    } else {
     firstCell.style.height = totalDesiredClientCellHeight + "px";
     secondCell.style.height = totalDesiredClientCellHeight + "px";
    }
   }
  }
 },
 UpdateCellContainerSizeCache: function (containerIndex, cellIndex) {
  var container = this.schedulerViewInfo.cellContainers[containerIndex];
  this.containerSizeCache[containerIndex][cellIndex] = container.cellConstraint[cellIndex].minHeight;
 }
})
ASPxClientHorizontalAppointmentLayoutCalculatorInfinityHeight = _aspxCreateClass(ASPxClientHorizontalAppointmentLayoutCalculator, {
 constructor: function(schedulerViewInfo, disableSnapToCells) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo, disableSnapToCells);
  this.maxBottom = 0;
 },
 CalculateIsFitted: function(containerIndex, cellIndex, bottom) {
  this.maxBottom = Math.max(bottom, this.maxBottom);
  return true;
 }
});
ASPxClientAppointmentCellIndexes = _aspxCreateClass(null, {
 constructor: function(firstCellIndex, lastCellIndex) {
  this.firstCellIndex = firstCellIndex;
  this.lastCellIndex = lastCellIndex;
 }
 });
ASPxClientHorizontalAppointmentRelativePositionCalculator = _aspxCreateClass(null, {
 constructor: function(gapBetweenAppointments) {
  this.gapBetweenAppointments = gapBetweenAppointments;
 },
 CreateAppointmentCellIndexesCollection : function(viewInfos) {
  var result = new Array();
  var count = viewInfos.length;
  for (var i = 0; i < count; i++) {
   var viewInfo = viewInfos[i];
   var cellIndexes = new ASPxClientAppointmentCellIndexes(viewInfo.visibleFirstCellIndex, viewInfo.visibleLastCellIndex);
   result.push(cellIndexes);
  }
  return result;
 },
 RestoreCellIndexes : function(viewInfos, appointmentsCellIndexes) {
  var count = viewInfos.length;
  if (count == appointmentsCellIndexes.length) 
   for (var i = 0; i < count; i++) {
    var indexes = appointmentsCellIndexes[i];
    var viewInfo = viewInfos[i];
    viewInfo.visibleFirstCellIndex = indexes.firstCellIndex;
    viewInfo.visibleLastCellIndex = indexes.lastCellIndex;
   }
 },
 CalculateAppointmentRelativePositions: function(viewInfos, startIndex) {     
  var previousCellIndexes = this.CreateAppointmentCellIndexesCollection(viewInfos);  
  this.AdjustAppointmentCellIndexes(viewInfos);
  this.CalculateAppointmentRelativePositionsCore(viewInfos, startIndex);
  this.RestoreCellIndexes(viewInfos, previousCellIndexes);
 }, 
 AdjustAppointmentCellIndexes : function(viewInfos) {
  var dateTimes = this.CreateViewInfosDateTimeCollection(viewInfos);
  this.CalculateAdjustedCellIndexes(viewInfos, dateTimes);
 },
 CalculateAdjustedCellIndexes : function (viewInfos, dateTimes) {
  var count = viewInfos.length;
  for (var i = 0; i < count; i++)
   this.CalculateAdjustedCellIndexesCore(viewInfos[i], dateTimes);   
 },
 CalculateAdjustedCellIndexesCore : function (viewInfo, dateTimes) {    
  var firstCellIndex = _aspxArrayBinarySearch(dateTimes, viewInfo.getStartTime(), aspxSchedulerDateTimeIndexComparer);
  var lastCellIndex = _aspxArrayBinarySearch(dateTimes, viewInfo.getEndTime(), aspxSchedulerDateTimeIndexComparer) - 1;
   viewInfo.visibleFirstCellIndex = firstCellIndex;
   viewInfo.visibleLastCellIndex = lastCellIndex;  
 },  
 CreateViewInfosDateTimeCollection : function(viewInfos) {
  var count = viewInfos.length;
  var dateTimeCollection = new Array();
  for (var i = 0; i < count; i++) {
   var viewInfo = viewInfos[i];
   this.AddDateTime(dateTimeCollection, viewInfo.getStartTime());   
   this.AddDateTime(dateTimeCollection, viewInfo.getEndTime());     
  }
  dateTimeCollection.sort(aspxSchedulerDateTimeComparer);
  return dateTimeCollection;
 }, 
 AddDateTime : function(dateTimeCollection, dateTime) {
  if (!this.IsAlreadyAdded(dateTimeCollection, dateTime))
   dateTimeCollection.push(dateTime);
 }, 
 IsAlreadyAdded : function(dateTimeCollection, dateTime) {
    var count = dateTimeCollection.length;
    for (var i = 0; i < count; i++) 
    if (dateTimeCollection[i].valueOf() == dateTime.valueOf())
     return true;
    return false;
 }, 
 CalculateAppointmentRelativePositionsCore: function(viewInfos, startIndex) {   
  var count = viewInfos.length;
  var busyIntervals = this.CreateBusyIntervals(2*count);  
  var i = 0;
  while (i < startIndex) {
   this.MakeIntervalBusy(viewInfos[i], busyIntervals);
   i++;
  }
  while (i < count) {
   var viewInfo = viewInfos[i];
   var relativePosition = this.FindAvailableRelativePosition(viewInfo, busyIntervals);
   viewInfo.relativePosition = relativePosition;
   this.MakeIntervalBusy(viewInfo, busyIntervals);
   i++;
  }
 },
 CreateBusyIntervals: function(cellsCount) { 
  var result = new Array(cellsCount);
  for (var i = 0; i < cellsCount; i++)
   result[i] = new Array();
  return result;
 },
 FindAvailableRelativePosition: function(viewInfo, cellsBusyIntervals){
  viewInfo.relativePosition = 0;
  var relativePosition = 0;  
  var from = viewInfo.visibleFirstCellIndex;
  var to = viewInfo.visibleLastCellIndex;
  var i = from;
  while (i <= to) {
   var busyIntervals = cellsBusyIntervals[i];
   var interval = this.FindPossibleIntersectionInterval(busyIntervals, relativePosition);
   if ((interval == null) || (interval.start >= relativePosition + viewInfo.height))
    i++;
   else {
    relativePosition = interval.end;
    i = from;
   }
  }
  return relativePosition;
 },
 FindPossibleIntersectionInterval: function(busyIntervals, value) {
  for (var i = 0; i < busyIntervals.length; i++) {
   var interval = busyIntervals[i];
   if ((interval.ContainsExcludeEndBound(value)) || (interval.start > value))
    return new ASPxClientBusyInterval(interval.start, interval.end);
  }
  return null;
 },
 MakeIntervalBusy: function(info, busyIntervals) {
  for (var i = info.visibleFirstCellIndex; i <= info.visibleLastCellIndex; i++)
   this.AddBusyInterval(busyIntervals[i], new ASPxClientBusyInterval(info.relativePosition, info.relativePosition + info.height + this.gapBetweenAppointments));
 },
 AddBusyInterval: function(busyIntervals, busyInterval) {
  var count = busyIntervals.length;
  var i = 0;
  while (i < count) {
   if (busyIntervals[i].start > busyInterval.start)
    break;
   i++;
  }
  _aspxArrayInsert(busyIntervals, busyInterval, i);
 } 
});
ASPxClientTimelineAppointmentLayoutCalculator = _aspxCreateClass(ASPxClientHorizontalAppointmentLayoutCalculator, {
 constructor: function(schedulerViewInfo, disableSnapToCells) {
  this.constructor.prototype.constructor.call(this, schedulerViewInfo, disableSnapToCells);
  this.leftAppointmentIndent = 0;
  this.rightAppointmentIndent = 0;
 }
});
ASPxClientRecurrenceInfo = _aspxCreateClass(null, {
 constructor: function(){
  this.interval = new ASPxClientTimeInterval(new Date(), 0);
  this.type = ASPxClientRecurrenceInfo.DefaultRecurrenceType;
  this.range = ASPxClientRecurrenceInfo.DefaultRecurrenceRange;
  this.weekDays = ASPxClientRecurrenceInfo.DefaultWeekDays;
  this.occurrenceCount = 1;
  this.periodicity = ASPxClientRecurrenceInfo.DefaultPeriodicity;
  this.dayNumber = 1; 
  this.weekOfMonth = ASPxClientRecurrenceInfo.DefaultWeekOfMonth;
  this.month = 1; 
 },
 CreateDefaultInterval: function() {
  return new ASPxClientTimeInterval(new Date(), 0);
 },
 SetStart: function(start) {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  this.interval.SetStart(start);
 },
 GetStart: function() {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  return this.interval.GetStart();
 },
 SetEnd: function(end) {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  this.interval.SetEnd(end);
 },
 GetEnd: function() {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  return this.interval.GetEnd();
 },
 SetDuration: function(duration) {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  this.interval.SetDuration(duration);
 },
 GetDuration: function() {
  if (!this.interval)
   this.interval = this.CreateDefaultInterval();
  return this.interval.GetDuration();
 },
 SetRecurrenceType: function(type) {
  this.type = type;
 },
 GetRecurrenceType: function() {
  if (!this.type)
   this.type = ASPxClientRecurrenceInfo.DefaultRecurrenceType;
  return this.type;
 },
 SetWeekDays: function(weekDays) {
  this.weekDays = weekDays;
 },
 GetWeekDays: function() {
  if (!this.weekDays)
   this.weekDays = ASPxClientRecurrenceInfo.DefaultWeekDays;
  return this.weekDays;
 },
 SetOccurrenceCount: function(occurrenceCount) {
  this.occurrenceCount = occurrenceCount;
 },
 GetOccurrenceCount: function() {
  if (!this.occurrenceCount)
   this.occurrenceCount = 1;
  return this.occurrenceCount = 1;
 },
 SetPeriodicity: function(periodicity) {
  this.periodicity = periodicity;
 },
 GetPeriodicity: function() {
  if (!this.periodicity)
   this.periodicity = ASPxClientRecurrenceInfo.DefaultPeriodicity;
  return this.periodicity;
 },
 SetDayNumber: function(dayNumber) {
  this.dayNumber = dayNumber;
 },
 GetDayNumber: function() {
  if (!this.dayNumber)
   this.dayNumber = 1;
  return this.dayNumber;
 },
 SetWeekOfMonth: function(weekOfMonth ) {
  this.weekOfMonth = weekOfMonth;
 },
 GetWeekOfMonth: function() {
  if(!this.weekOfMonth)
   this.weekOfMonth = ASPxClientRecurrenceInfo.DefaultWeekOfMonth;
  return this.weekOfMonth;
 },
 SetMonth: function(month) {
  this.month = month;
 },
 GetMonth: function() {
  if (!this.month)
   this.month = 1;
  return this.month;
 },
 GetRange: function() {
  return this.range;
 },
 SetRange: function(range) {
  this.range = range;
 }
});
ASPxClientRecurrenceInfo.DefaultPeriodicity = 1;
ASPxClientRecurrenceInfo.DefaultRecurrenceRange = ASPxClientRecurrenceRange.NoEndDate;
ASPxClientRecurrenceInfo.DefaultRecurrenceType = ASPxClientRecurrenceType.Daily;   
ASPxClientRecurrenceInfo.DefaultWeekDays = 127;
ASPxClientRecurrenceInfo.DefaultWeekOfMonth = ASPxClientWeekOfMonth.First;

var recycleDiv = document.createElement("DIV");
function _aspxRemoveChildFromParent(parentNode, element) {  
 parentNode.removeChild(element);
 if(__aspxIE) {  
  recycleDiv.appendChild(element);
  recycleDiv.innerHTML = "";
  element = null;
 }
}
function _aspxRecycleNode(element) {
 var parentNode = element.parentNode;
 if(_aspxIsExists(parentNode)) {
  parentNode.removeChild(element);
 }
 if(!__aspxIE)
  return;
 recycleDiv.appendChild(element);
 recycleDiv.innerHTML = "";
 element = null;
}
function _aspxDateIncrease(date, spanInMilliseconds) {
 return new Date(date.valueOf() + spanInMilliseconds);  
}
function _aspxDateIncreaseWithUtcOffset(date, spanInMilliseconds) {
 var result = _aspxDateIncrease(date, spanInMilliseconds);
 var utcDiff = (result.getTimezoneOffset() - date.getTimezoneOffset()) * 60000;
 return _aspxDateIncrease(result, utcDiff);
}
function _aspxDateDiffInMilliseconds(date1, date2) {
 return date1 - date2;
}
function _aspxDateSubsWithTimezone(date1, date2) {
 return date1 - date2 + (date2.getTimezoneOffset() - date1.getTimezoneOffset()) * 60000;
}
function _aspxDateTimeToMilliseconds(dateTime) {
 var result = dateTime.valueOf();
 result -= 60000 * dateTime.getTimezoneOffset();
 return result;
}
function _aspxDateTimeMinValue(value1, value2) {
 return value1 < value2 ? value1 : value2;
}
function _aspxDateTimeMaxValue(value1, value2) {
 return value1 > value2 ? value1 : value2;
}
function _aspxGetShiftKey(evt) { 
 if(__aspxIE) return (event != null) ? event.shiftKey : false;
 else return (evt != null) ? evt.shiftKey : false;
}
function _aspxGetCtrlKey(evt) { 
 if(__aspxIE) return (event != null) ? event.ctrlKey : false;
 else return (evt != null) ? evt.ctrlKey : false;
}
function aspxIsLeftKey(evt) {
 return evt.keyCode == 0x25;
}
function aspxIsUpKey(evt) {
 return evt.keyCode == 0x26;
}
function aspxIsRightKey(evt) {
 return evt.keyCode == 0x27;
}
function aspxIsDownKey(evt) {
 return evt.keyCode == 0x28;
}
function _aspxGetIsRightButtonPressed(evt){
 evt = _aspxGetEvent(evt);
 if(!_aspxIsExists(evt)) return false;
 if(__aspxIE)
  return evt.button == 2;
 else if(__aspxNetscapeFamily || __aspxWebKitFamily)
  return evt.which == 3;
 else if (__aspxOpera)
  return evt.button == 1;
 return true;
}
function _aspxFindParentElement(element, testFunc){
 if (!_aspxIsExists(testFunc)) return null;
 while(element != null && element.tagName != "BODY"){
  if(testFunc(element))
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetOnMouseOutEventTarget(evt){
 evt = _aspxGetEvent(evt);
 if(!_aspxIsExists(evt)) return null; 
 return __aspxIE ? evt.toElement : evt.relatedTarget;
}
function _aspxSetTableCellOffsetWidth(tableCell, newOffsetWidth) {
 if (newOffsetWidth <=0 ) {
  return;
 }
 tableCell.style.width = newOffsetWidth + "px";
 _aspxRefreshTableCell(tableCell);
 var delta = tableCell.clientWidth - newOffsetWidth;
 var correctedWidth = newOffsetWidth - delta;
 if (correctedWidth > 0 ) 
  tableCell.style.width = correctedWidth + "px";
 else
  tableCell.style.width = "0.1px";
 _aspxRefreshTableCell(tableCell);
}
function _aspxRefreshTableCell(tableCell) {
 if (__aspxOpera) { 
  tableCell.style.display = "none";
  tableCell.style.display = "table-cell";
 }
}
function _aspxChangeTableLayout(table, layout) {
  if (__aspxIE) {
   table.style.tableLayout = layout;
   return;
  } 
  var parent = table.parentNode;
  var nextSibling = table.nextSibling;
  parent.removeChild(table);
  table.style.tableLayout = layout;
  if(_aspxIsExists(nextSibling))  
   parent.insertBefore(table, nextSibling);
  else
   parent.appendChild(table);
}
function _aspxGetItemByLocation(parentTable, location) {
 return parentTable.rows[location[0]].cells[location[1]];
}
function aspxSchedulerNavBtnClick(name, startTime, duration, resourceId) {
 var scheduler = aspxGetControlCollection().Get(name);
 if(scheduler != null)
  scheduler.NavBtnClick(startTime, duration, resourceId);
}
function aspxSchedulerMainDivMouseDown(name, evt) {
 var scheduler = aspxGetControlCollection().Get(name);
 if(scheduler != null)
  scheduler.MainDivMouseDown(evt);
}
function aspxSchedulerMainDivMouseUp(name, evt) {
 var scheduler = aspxGetControlCollection().Get(name);
 if (scheduler != null)
  scheduler.MainDivMouseUp(evt);
}
function aspxSchedulerMainDivMouseClick(name, evt)  {
 var scheduler = aspxGetControlCollection().Get(name);
 if(scheduler != null) {
  scheduler.MainDivMouseClick(evt);
 }
}
function aspxSchedulerMainDivMouseDoubleClick(name, evt)  {
 var scheduler = aspxGetControlCollection().Get(name);
 if(scheduler != null) { 
  scheduler.MainDivMouseDoubleClick(evt);
 }
}
function aspxSchedulerFuncCallback(name, result) {
 var scheduler = aspxGetControlCollection().Get(name);
 if(scheduler != null)
  scheduler.OnFuncCallback(unescape(result));
}
function aspxSchedulerEmptyFuncCallbackHandler() {
}
function aspxAppointmentSave(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  if (ASPxClientEdit.ValidateEditorsInContainerById(controlId + "_formBlock_innerContent"))
   control.RaiseCallback("APTSAVE|");
 }
}
function aspxAppointmentCancel(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  control.CancelFormChangesAndClose(control.aptFormVisibility, "APTCANCEL|");
 }
}
function aspxAppointmentDelete(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  var edtAptElement = control.GetStateElement("EDTAPT");
  var aptId = aspxGetCoreAppointmentId(edtAptElement.value);
  var aptIdCollection = [ aptId ];
  if (control.RaseAppointmentDeleting(aptIdCollection)) {
   aspxAppointmentCancel(controlId);
   return;
  }
  control.RaiseCallback("APTDEL|");
 }
}
function aspxGetCoreAppointmentId(aptId) {
 var result = aptId + "";
 var indxOfEndAptType = result.indexOf("|");
 var count = result.length;
 if (indxOfEndAptType > 0) 
  result = result.substr(indxOfEndAptType + 1, count);
 return result;
}
function aspxInplaceEditorSave(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  control.RaiseCallback("INPLACESAVE|");
 }
}
function aspxInplaceEditorEditForm(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  control.RaiseCallback("INPLACEFORM|");
 }
}
function aspxShowInplacePopupWindow(name, popupId, aptId) {
 var control = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(control)) {
  control.SaveCurrentPopupContainer(popupId);
  control.ShowInplacePopupWindow(popupId, aptId);
 }
}
function aspxShowFormPopupWindow(name, popupId) {
 var control = aspxGetControlCollection().Get(name);
 var mainElement = control.GetMainElement();
 if ((!_aspxElementIsVisible(mainElement) && control.visibility != ASPxSchedulerFormVisibility.FillControlArea) || control.formContainerChanger.IsActive()) {
  control.SaveCurrentPopupContainer(popupId);
  control.ShowFormPopupWindowDeferred(popupId);
  return;
 }
 if (_aspxIsExists(control)) {
  control.SaveCurrentPopupContainer(popupId);
  control.ShowFormPopupWindow(popupId);
 }
}
function aspxGotoDateApply(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  var activeViewType = control.GetActiveViewType();
  if (!control.RaiseActiveViewChanging(activeViewType))
   return;
  control.RaiseCallback("GOTODATEFORM|");
 }
}
function aspxGotoDateCancel(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) {
  control.CancelFormChangesAndClose(control.gotoDateFormVisibility, "GOTODATEFORMCANCEL|");
 }
}
function aspxRecurrentAptDeleteCancel(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
  control.CancelFormChangesAndClose(control.recurrentAppointmentDeleteFormVisibility, "RECURAPTDELETECANCEL|");
}
function aspxRecurrentAptDelete(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
     return control.RaiseCallback("RECURAPTDELETE|");
}
function aspxRecurrentAptEditCancel(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
  control.CancelFormChangesAndClose(control.recurrentAppointmentDeleteFormVisibility, "RECURAPTEDITCANCEL|");
}
function aspxRecurrentAptEdit(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
     return control.RaiseCallback("RECURAPTEDIT|");
}
function aspxSchedulerDateTimeIndexComparer(array, index, dateTime2) {
 return aspxSchedulerDateTimeComparer(array[index], dateTime2);
}
function aspxSchedulerDateTimeComparer(dateTime1, dateTime2) {
 var dif = dateTime2 - dateTime1;
 if (dif == 0)
  return 0;
 return dif < 0 ? 1 : -1;
}
function aspxMoreButtonClickEvent(evt) { 
 function isMoreButtonDiv(element) {
  return _aspxIsExists(element.isMoreButton) ? element.isMoreButton : false;
 }
 var srcMoreButtonDiv = _aspxFindParentElement(_aspxGetEventSource(evt), isMoreButtonDiv);
 var control = srcMoreButtonDiv.schedulerControl;
 var args = new MoreButtonClickedEventArgs(srcMoreButtonDiv.targetDateTime, srcMoreButtonDiv.interval, srcMoreButtonDiv.resource);
 control.RaiseMoreButtonClickedEvent(args);
 var activeViewType = control.GetActiveViewType();
 if (!control.RaiseActiveViewChanging(activeViewType, ASPxSchedulerViewType.Day))
  return;
 if (args.handled)
  return;    
 var intervalArgs = _aspxDateTimeToMilliseconds(srcMoreButtonDiv.interval.GetStart()) + "," + srcMoreButtonDiv.interval.GetDuration();
 var targetDateTimeArg = _aspxDateTimeToMilliseconds(srcMoreButtonDiv.targetDateTime);
 control.RaiseCallback("MOREBTN|" + targetDateTimeArg + "," +  intervalArgs + "," + srcMoreButtonDiv.resource);
}
function aspxCancelRemindersForm(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
  control.RaiseCallback("CLSREMINDERSFRM|");
}
function aspxReminderAlerted(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control) && control.reminderTimerId != null) {
  if (control.enableReminderTimer) {
   control.menuManager.HideMenu();
   return control.RaiseCallback("PROCESSREMINDER|");
   }
  else 
   control.suspendedCallAspxReminderAlerted = true;
  return null;
 }
}
function aspxDismissReminders(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
     return control.RaiseCallback("DSMSREMINDER|");
}
function aspxDismissAllReminders(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
     return control.RaiseCallback("DSMSALLREMINDERS|");
}
function aspxSnoozeReminders(controlId) {
 var control = aspxGetControlCollection().Get(controlId);
 if (_aspxIsExists(control)) 
     return control.RaiseCallback("SNZREMINDERS|");
}

__aspxSchedulerMouseEventDataObject = null;
ASPxSchedulerMouseEvents = _aspxCreateClass(null, {
 constructor: function(){
  this.mouseOverHandlerList = [];
  this.mouseMoveHandlerList = [];
  this.mouseOutHandlerList = [];
 },
 CreateHandler: function(handlerObject, param) {
  var result = new Object();
  result.handlerObject = handlerObject;
  result.param = param;
  return result;
 },
 AddMouseOverHandler: function (handlerObject, param) {
  var handler = this.CreateHandler(handlerObject, param);
  this.mouseOverHandlerList.push(handler);
 },
 AddMouseMoveHandler: function (handlerObject, param) {
  var handler = this.CreateHandler(handlerObject, param);
  this.mouseMoveHandlerList.push(handler);
 },
 AddMouseOutHandler: function (handlerObject, param) {
  var handler = this.CreateHandler(handlerObject, param);
  this.mouseOutHandlerList.push(handler);
 }, 
 FireMouseOverEvent: function (evt, dataObject) {
  function fireMouseOver(handlerObject, evt, dataObject, param) {
   return handlerObject.OnMouseOver(evt, dataObject, param);
  }
  this.FireMouseEvent(this.mouseOverHandlerList, fireMouseOver, evt, dataObject );
 },
 FireMouseOutEvent: function (evt, dataObject) {
  function fireMouseOut(handlerObject, evt, dataObject, param) {
   return handlerObject.OnMouseOut(evt, dataObject, param);
  }
  this.FireMouseEvent(this.mouseOutHandlerList, fireMouseOut, evt, dataObject );
 },
 FireMouseMoveEvent: function (evt, dataObject) {
  function fireMouseMove(handlerObject, evt, dataObject, param) {
   return handlerObject.OnMouseMove(evt, dataObject, param);
  }
  this.FireMouseEvent(this.mouseMoveHandlerList, fireMouseMove, evt, dataObject );
 },
 FireMouseEvent: function(handlerList, fireEventFunc, evt, dataObject) {
  for(var i = 0; i < handlerList.length; i++) {
   var handler = handlerList[i];
   fireEventFunc(handler.handlerObject, evt, dataObject, handler.param);
  }
 }
});
function _aspxSchedulerTestIsSupportMouseEvents(element) {
 return _aspxIsExists(element.schedulerMouseEventDataObject) && _aspxIsExists(element.schedulerMouseEventDataObject.mouseEvents);
}
function _aspxSubscribeSchedulerMouseEvents(element, schedulerMouseEventDataObject) {
 if(_aspxIsExists(element.schedulerMouseEventDataObject))
  return;
 element.schedulerMouseEventDataObject = schedulerMouseEventDataObject;
 _aspxAttachEventToElement(element, __aspxWebKitTouchUI ? "mouseup" : "mouseover", _aspxOnSchedulerMouseOver);
 _aspxAttachEventToElement(element, ASPxClientTouchUI.touchMouseMoveEventName, _aspxOnSchedulerMouseMove);
 _aspxAttachEventToElement(element, "mouseout", _aspxOnSchedulerMouseOut);
}
function _aspxUnsubscribeSchedulerMouseEvents(element, schedulerMouseEventDataObject) {
 if(!_aspxIsExists(element.schedulerMouseEventDataObject))
  return;
 element.schedulerMouseEventDataObject = null;
 _aspxDetachEventFromElement(element, __aspxWebKitTouchUI ? "mouseup" : "mouseover", _aspxOnSchedulerMouseOver);
 _aspxDetachEventFromElement(element, ASPxClientTouchUI.touchMouseMoveEventName, _aspxOnSchedulerMouseMove);
 _aspxDetachEventFromElement(element, "mouseout", _aspxOnSchedulerMouseOut);
}
function _aspxClearCurrentMouseEventDataObject() {
 if(_aspxIsExists(__aspxSchedulerMouseEventDataObject))
  __aspxSchedulerMouseEventDataObject.mouseEvents.FireMouseOutEvent(null, __aspxSchedulerMouseEventDataObject);  
 __aspxSchedulerMouseEventDataObject = null;
}
function _aspxOnSchedulerMouseMove(evt) {
 evt = _aspxGetEvent(evt);
 var eventSource = _aspxGetEventSource(evt);
 eventSource = _aspxFindParentElement(eventSource, _aspxSchedulerTestIsSupportMouseEvents);
 if(!_aspxIsExists(eventSource))
  return true;
 var dataObject = eventSource.schedulerMouseEventDataObject;
 if(dataObject != __aspxSchedulerMouseEventDataObject) {
  __aspxSchedulerMouseEventDataObject = dataObject;
  dataObject.mouseEvents.FireMouseOverEvent(evt, dataObject);
 }
 dataObject.mouseEvents.FireMouseMoveEvent(evt, dataObject);
 return true;
}
function _aspxOnSchedulerMouseOver(evt) {
 evt = _aspxGetEvent(evt);
 var eventSource = _aspxGetEventSource(evt);
 eventSource = _aspxFindParentElement(eventSource, _aspxSchedulerTestIsSupportMouseEvents);
 if(!_aspxIsExists(eventSource))
  return;
 var dataObject = eventSource.schedulerMouseEventDataObject;
 if(__aspxSchedulerMouseEventDataObject == dataObject && !__aspxWebKitTouchUI)
  return;
 dataObject.mouseEvents.FireMouseOverEvent(evt, dataObject);
 __aspxSchedulerMouseEventDataObject = dataObject;
 return _aspxCancelBubble(evt);
}
function _aspxOnSchedulerMouseOut(evt) {
 evt = _aspxGetEvent(evt);
 var eventSource = _aspxGetEventSource(evt);
 var eventTarget = _aspxGetOnMouseOutEventTarget(evt);
 eventSource = _aspxFindParentElement(eventSource, _aspxSchedulerTestIsSupportMouseEvents);
 eventTarget = _aspxFindParentElement(eventTarget, _aspxSchedulerTestIsSupportMouseEvents);
 var sourceDataObject = _aspxIsExists(eventSource) ? eventSource.schedulerMouseEventDataObject : null;
 var targetDataObject = _aspxIsExists(eventTarget) ? eventTarget.schedulerMouseEventDataObject : null;
 if(sourceDataObject == targetDataObject)
  return _aspxCancelBubble(evt);
 sourceDataObject.mouseEvents.FireMouseOutEvent(evt, sourceDataObject);
 __aspxSchedulerMouseEventDataObject = null;
}
ASPxSchedulerToolTipHelper = _aspxCreateClass(null, {
 constructor: function () {
  this.timeBeforeShow = __aspxTouchUI ? 0 : 500;
  this.timerId = -1;
  this.lastX = null;
  this.lastY = null;
  this.dataObject = null;
  this.toolTip = null;
  this.activeToolTip = null;
  this.toolTipOffsetX = -15; 
  this.toolTipOffsetY = -20; 
  this.canCloseByMouseOut = true;
 },
 OnMouseOver: function (evt, dataObject, toolTip) {
  if (this.activeToolTip != null)
   return;
  this.RestartTimerAndInitToolTip(evt, dataObject, toolTip);
  this.lastX = _aspxGetEventX(evt);
  this.lastY = _aspxGetEventY(evt);
 },
 OnMouseMove: function (evt, dataObject, toolTip) {
  if (this.CanResetTimer())
   this.RestartTimerAndInitToolTip(evt, dataObject, toolTip);
  this.lastX = _aspxGetEventX(evt);
  this.lastY = _aspxGetEventY(evt);
 },
 CanResetTimer: function () {
  if (this.activeToolTip == null)
   return true;
  return _aspxIsExists(this.toolTip) && this.toolTip.ShouldResetPositionByTimer();
 },
 OnMouseOut: function (evt, dataObject, toolTip) {
  _aspxClearTimer(this.timerId);
  if (_aspxIsExists(this.toolTip) && this.canCloseByMouseOut)
   this.HideToolTip();
 },
 RestartTimerAndInitToolTip: function (evt, dataObject, toolTip) {
  _aspxClearTimer(this.timerId);
  var toolTipSource = aspxFindToolTipInParentElements(_aspxGetEventSource(evt));
  if (_aspxIsExists(toolTipSource)) {
   return;
  }
  this.toolTip = aspxGetControlCollection().Get(toolTip);
  this.dataObject = dataObject;
  this.timerId = _aspxSetTimeout(_aspxOnToolTipTimer, this.timeBeforeShow);
  this.canCloseByMouseOut = !this.toolTip.CanCloseByMouseClick();
 },
 ShowToolTipInstantly: function (x, y, toolTipInstance, dataObject) {
  _aspxClearTimer(this.timerId);
  this.lastX = x;
  this.lastY = y;
  this.toolTip = toolTipInstance;
  this.dataObject = null;
  if (!this.CanShowToolTip())
   return;
  if (!_aspxIsExists(dataObject))
   dataObject = null;
  this.canCloseByMouseOut = false;
  var scheduler = this.toolTip.GetSchedulerControl();
  if (scheduler)
   scheduler.BeginDeferredFuncCallbackArea();
  this.ShowToolTipCore(dataObject);
  if (scheduler)
   scheduler.EndDeferredFuncCallbackArea();
 },
 ShowToolTip: function () {
  if (!this.CanShowToolTip())
   return;
  if (!_aspxIsExists(this.dataObject))
   return;
  var toolTip = this.toolTip;
  toolTip.dataObject = this.dataObject;
  var scheduler = toolTip.GetSchedulerControl();
  if (scheduler)
   scheduler.BeginDeferredFuncCallbackArea();
  if (this.ShowToolTipCore(toolTip.dataObject))
   _aspxSubscribeSchedulerMouseEvents(this.activeToolTip.mainDiv, this.dataObject);
  if (scheduler)
   scheduler.EndDeferredFuncCallbackArea();
 },
 ShowToolTipCore: function (dataObject) {
  this.HideActiveToolTip();
  var toolTipData = this.CreateToolTipData(dataObject);
  if (!toolTipData) 
   return false;
  var toolTip = this.toolTip;
  toolTip.SetContent(toolTipData);
  toolTip.ShowToolTip(this.lastX, this.lastY);
  this.activeToolTip = toolTip;
  toolTip.FinalizeUpdate(toolTipData);
  return true;
 },
 CreateToolTipData: function (dataObject) {
  var scheduler = this.toolTip.aspxParentControl;
  if (_aspxIsExists(dataObject) && _aspxIsExists(dataObject.appointmentId)) {
   var apt = scheduler.GetAppointment(dataObject.appointmentId);
   if (!apt) 
    return null;
   return new ASPxClientSchedulerToolTipData(apt, apt.interval, apt.GetResources());
  } else
   return new ASPxClientSchedulerToolTipData(null, scheduler.selection.interval, [scheduler.selection.resource]);
 },
 CanShowToolTip: function () {
  if (!_aspxIsExists(this.toolTip))
   return false;
  var scheduler = this.toolTip.aspxParentControl;
  if (scheduler.containerCell.parentNode == null)
   return false;
  if (_aspxIsExists(scheduler.currentPopupContainer))
   return false;
  if (!scheduler.toolTipsEnable)
   return false;
  var isSelectionOperationActive = scheduler.IsOperationSelectionActive();
  var toolTipData = (this.dataObject) ? this.CreateToolTipData(this.dataObject) : null;
  return this.toolTip.CanShowToolTip(toolTipData) && !this.IsAnyMenuVisible() && !isSelectionOperationActive;
 },
 IsAnyMenuVisible: function () {
  if (typeof ASPxClientMenuBase == 'undefined')
   return false;
  var menuCollection = ASPxClientMenuBase.GetMenuCollection();
  return menuCollection.IsAnyMenuVisible();
 },
 HideActiveToolTip: function () {
  this.HideToolTipCore();
 },
 HideToolTip: function () {
  this.HideToolTipCore();
  this.toolTip = null;
  this.dataObject = null;
 },
 HideToolTipCore: function () {
  if (!_aspxIsExists(this.activeToolTip))
   return;
  if (_aspxIsExists(this.dataObject))
   _aspxUnsubscribeSchedulerMouseEvents(this.activeToolTip.mainDiv, this.dataObject);
  this.activeToolTip.HideToolTip();
  this.activeToolTip = null;
 }
});
_aspxSchedulerToolTipHelper = new ASPxSchedulerToolTipHelper();
function _aspxOnToolTipTimer() {
 if(_aspxIsExists(_aspxSchedulerToolTipHelper))
  _aspxSchedulerToolTipHelper.ShowToolTip();
}
function _aspxAddToolTip(dataObject, tooltip) { 
 dataObject.mouseEvents.AddMouseOverHandler(_aspxSchedulerToolTipHelper, tooltip);
 dataObject.mouseEvents.AddMouseMoveHandler(_aspxSchedulerToolTipHelper, tooltip);
 dataObject.mouseEvents.AddMouseOutHandler(_aspxSchedulerToolTipHelper, tooltip);
}
function _aspxRemoveToolTip(dataObject, tooltip) { 
 dataObject.mouseEvents.RemoveMouseOverHandler(_aspxSchedulerToolTipHelper, tooltip);
 dataObject.mouseEvents.RemoveMouseOverHandler(_aspxSchedulerToolTipHelper, tooltip);
 dataObject.mouseEvents.RemoveMouseOverHandler(_aspxSchedulerToolTipHelper, tooltip);
}
function aspxSchedulerLeftResizeDivMouseDown(name, element, evt) {
 evt = _aspxGetEvent(evt);
 var scheduler = aspxGetControlCollection().Get(name);
 if(!_aspxIsExists(scheduler))   
  return;
 var appointmentDiv = element.parentNode;
 var appointmentViewInfo = appointmentDiv.appointmentViewInfo;
 if(_aspxIsExists(appointmentViewInfo))
  scheduler.BeginAppointmentResizeAtLeft(appointmentViewInfo);
}
function aspxSchedulerRightResizeDivMouseDown(name, element, evt) {
 evt = _aspxGetEvent(evt);
 var scheduler = aspxGetControlCollection().Get(name);
 if(!_aspxIsExists(scheduler))   
  return;
 var appointmentDiv = element.parentNode;
 var appointmentViewInfo = appointmentDiv.appointmentViewInfo;
 if(_aspxIsExists(appointmentViewInfo))
  scheduler.BeginAppointmentResizeAtRight(appointmentViewInfo);
}
function aspxSchedulerTopResizeDivMouseDown(name, element, evt) {
 evt = _aspxGetEvent(evt);
 var scheduler = aspxGetControlCollection().Get(name);
 if(!_aspxIsExists(scheduler))   
  return; 
 var appointmentDiv = element.parentNode;
 var appointmentViewInfo = appointmentDiv.appointmentViewInfo;
 if(_aspxIsExists(appointmentViewInfo))
  scheduler.BeginAppointmentResizeAtTop(appointmentViewInfo);
}
function aspxSchedulerBottomResizeDivMouseDown(name, element, evt) {
 evt = _aspxGetEvent(evt);
 var scheduler = aspxGetControlCollection().Get(name);
 if(!_aspxIsExists(scheduler))   
  return; 
 var appointmentDiv = element.parentNode;
 var appointmentViewInfo = appointmentDiv.appointmentViewInfo;
 if(_aspxIsExists(appointmentViewInfo))
  scheduler.BeginAppointmentResizeAtBottom(appointmentViewInfo);
}
function aspxAppointmentResizeLeft(scheduler, appointmentDiv, cell) {
 var cellTime = scheduler.GetCellStartTime(cell);
 var appointment = scheduler.GetAppointment(appointmentDiv.appointmentViewInfo.appointmentId);;
 var newStart = _aspxDateTimeMinValue(cellTime, appointment.interval.GetEnd());
 var newEnd = appointment.interval.GetEnd();
 var newInterval = new ASPxClientTimeInterval(newStart, _aspxDateSubsWithTimezone(newEnd, newStart));
 if(!newInterval.Equals(appointment.operationInterval)) {
  appointment.operationInterval = newInterval;
  return true;
 }
 else
  return false;
}
function aspxAppointmentResizeTop(scheduler, appointmentDiv, cell) {
 var cellTime = scheduler.GetCellStartTime(cell);
 var appointment = scheduler.GetAppointment(appointmentDiv.appointmentViewInfo.appointmentId);;
 var newStart = _aspxDateTimeMinValue(cellTime, appointment.interval.GetEnd());
 var newEnd = appointment.interval.GetEnd();
 var newInterval = new ASPxClientTimeInterval(newStart, _aspxDateSubsWithTimezone(newEnd, newStart));
 if(!newInterval.Equals(appointment.operationInterval)) {
  appointment.operationInterval = newInterval;
  return true;
 }
 else
  return false;
}
function aspxAppointmentResizeRight(scheduler, appointmentDiv, cell) { 
 var cellTime = scheduler.GetCellEndTime(cell);
 var appointment = scheduler.GetAppointment(appointmentDiv.appointmentViewInfo.appointmentId);;
 var newStart = appointment.interval.GetStart();
 var newEnd = _aspxDateTimeMaxValue(cellTime, appointment.interval.GetStart());
 var newInterval = new ASPxClientTimeInterval(newStart, _aspxDateSubsWithTimezone(newEnd, newStart));
 if(!newInterval.Equals(appointment.operationInterval)) {
  appointment.operationInterval = newInterval;
  return true;
 }
 else
  return false;
}
function aspxAppointmentResizeBottom(scheduler, appointmentDiv, cell) { 
 var cellTime = scheduler.GetCellEndTime(cell);  
 var appointment = scheduler.GetAppointment(appointmentDiv.appointmentViewInfo.appointmentId);;
 var newStart = appointment.interval.GetStart();
 var newEnd = _aspxDateTimeMaxValue(cellTime, appointment.interval.GetStart());
 var newInterval = new ASPxClientTimeInterval(newStart, _aspxDateSubsWithTimezone(newEnd, newStart));
 if(!newInterval.Equals(appointment.operationInterval)) {
  appointment.operationInterval = newInterval;
  return true;
 }
 else
  return false;
}
function ResizeHelper_onmouseup(e) {
 if(__aspxResizeHelper != null) {
  __aspxResizeHelper.endResize(e);
  return true;
 }
}
function ResizeHelper_onmousemove(e) {
 if(__aspxResizeHelper != null) {
  __aspxResizeHelper.resize(e);
  return false;
 }
 return true;
}
function ResizeHelper_onkeydown(e) {
 if(__aspxResizeHelper == null) return true;
 if(e.keyCode == 27) 
  __aspxResizeHelper.cancelResize(true, true);
 return true;
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, ResizeHelper_onmouseup);
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, ResizeHelper_onmousemove);
_aspxAttachEventToDocument("keydown", ResizeHelper_onkeydown);
__aspxResizeHelper = null;
ASPxResizeViewHelper = _aspxCreateClass(null, {
 constructor: function(scheduler, appointmentDiv) {
  this.scheduler = scheduler;
  this.horizontalResizePresenter = new ASPxHorizontalAppointmentOperationPresenter(scheduler, appointmentDiv);
  this.verticalResizePresenter = new ASPxVerticalAppointmentOperationPresenter(scheduler, appointmentDiv);
 },
 ShowResizedAppointmentPosition: function(e, resizedAppointment) {
  this.horizontalResizePresenter.ShowAppointment(resizedAppointment, false);  
  this.verticalResizePresenter.ShowAppointment(resizedAppointment, false);
  var toolTip = this.scheduler.GetAppointmentDragTooltip();
  if(_aspxIsExists(toolTip) && toolTip.CanShowToolTip()) {    
   var toolTipData = new ASPxClientSchedulerToolTipData(resizedAppointment, resizedAppointment.operationInterval, resizedAppointment.operationResources) 
   toolTip.SetContent(toolTipData);
   var shouldResetToolTip = this.scheduler.activeToolTip != toolTip || toolTip.ShouldResetPositionByTimer();
   if (shouldResetToolTip) {
    this.scheduler.HideAllToolTips();
    toolTip.ShowToolTip(_aspxGetEventX(e), _aspxGetEventY(e) - 5);
   }
   toolTip.FinalizeUpdate(toolTipData);
  }
 },
 HideResizedAppointmentPosition: function(aptId, restoreAptPos) {
  this.horizontalResizePresenter.HideAppointment(aptId, restoreAptPos);
  this.verticalResizePresenter.HideAppointment(aptId, restoreAptPos);
  var toolTip = this.scheduler.GetAppointmentDragTooltip();
  if(_aspxIsExists(toolTip)) {  
   toolTip.HideToolTip();
  }
 },
 HideToolTip: function() {
  var toolTip = this.scheduler.GetAppointmentDragTooltip();
  if(_aspxIsExists(toolTip)) {  
   toolTip.HideToolTip();
  }
 }
});
ASPxResizeHelper = _aspxCreateClass(null, {
 constructor: function(scheduler, appointmentDiv, handler, cell) {
  if(__aspxResizeHelper != null)
     __aspxResizeHelper.cancelResize(true);
  scheduler.DisableReminderTimer();
  this.lastCell = cell;
  this.scheduler = scheduler;
  this.appointmentDiv = appointmentDiv;
  this.resizeHandler = handler;
  this.resizeViewHelper = new ASPxResizeViewHelper(scheduler, appointmentDiv);
  __aspxResizeHelper = this;
 },
 resize:function(e) {
  if(__aspxIE)
   this.scheduler.innerContentElement.setActive();
  var hitTestResult = this.scheduler.CalcHitTest(e);
  var cell = hitTestResult.cell;
  if(_aspxIsExists(cell) && cell != this.lastCell) {
   if(this.resizeHandler(this.scheduler, this.appointmentDiv, cell)) {
    var appointment = this.scheduler.GetAppointment(this.appointmentDiv.appointmentViewInfo.appointmentId);
    this.resizeViewHelper.ShowResizedAppointmentPosition(e, appointment);
   }
   this.lastCell = cell;
  }
 },
 endResize: function() {
  var wasCallback = this.ApplyChanges();
  if(!wasCallback)
   this.cancelResize(true);
  else {
   this.resizeViewHelper.HideToolTip();
   __aspxResizeHelper = null;
   this.scheduler.onCallback = _aspxCreateDelegate(this.OnCallback, this);
   this.scheduler.onCallbackError = _aspxCreateDelegate(this.OnCallbackError, this);
  }
 },
 OnCallback: function() {
  this.cancelResize(false);
 },
 OnCallbackError: function() {
  this.cancelResize(true);
 },
 ApplyChanges: function() {
  var id = this.appointmentDiv.appointmentViewInfo.appointmentId;
  var appointment = this.scheduler.GetAppointment(id);
  if(!_aspxIsExists(appointment) || !_aspxIsExists(appointment.operationInterval))
   return false;   
  var wasResized = (appointment.operationInterval.GetStart() - appointment.interval.GetStart() != 0) || (appointment.operationInterval.GetEnd() - appointment.interval.GetEnd() != 0);
  if(wasResized) {
   var params = "APTSCHANGE|" + id;
   params += "?START="+  _aspxDateTimeToMilliseconds(appointment.operationInterval.GetStart());
   params += "?DURATION="+  appointment.operationInterval.GetDuration();
   var operation = new ASPxClientAppointmentOperation(this, params);
   var isHandled = this.scheduler.RaiseAppointmentResize(operation);
   if (isHandled)
    return true;
   this.Apply(params);
   return true;
  }
  else
   return false;
 },
 Apply: function(params) {
  this.scheduler.RaiseCallback(params);
 },
 Cancel: function() {
  this.cancelResize(true, true);
 },
 cancelResize: function(restoreAptPos, restoreTimer) {
  if(!_aspxIsExists(restoreAptPos))
   restoreAptPos = true;
  this.resizeViewHelper.HideResizedAppointmentPosition(this.appointmentDiv.appointmentViewInfo.appointmentId, restoreAptPos);   
  this.scheduler.onCallback = null;
  this.scheduler.onCallbackError = null;
  __aspxResizeHelper = null;
  if(restoreTimer)
   this.scheduler.EnableReminderTimer();
 }
});

var ASPxClientSchedulerRefreshAction = _aspxCreateClass(null, {
});
ASPxClientSchedulerRefreshAction.None = 0;
ASPxClientSchedulerRefreshAction.VisibleIntervalChanged = 1;
ASPxClientSchedulerRefreshAction.ActiveViewTypeChanged = 2;
ASPxClientAppointmentOperation = _aspxCreateClass(null, {
 constructor: function(helper, callbackParameters) {
  this.helper = helper;
  this.callbackParameters = callbackParameters;
 },
 Apply: function() {
  this.helper.Apply(this.callbackParameters);
 },
 Cancel: function() {
  this.helper.Cancel();  
 }
});
ASPxClientScheduler.Cast = ASPxClientControl.Cast;
ASPxClientScheduler.prototype.GetActiveViewType = function() {
 return this.privateActiveViewType;
}
ASPxClientScheduler.prototype.SetActiveViewType = function(newViewType) {
 var activeViewType = this.GetActiveViewType();
 if (activeViewType == newViewType)
  return;
 if (this.RaiseActiveViewChanging(activeViewType, newViewType))
  this.RaiseCallback("SAVT|" + newViewType);
}
ASPxClientScheduler.prototype.PerformCallback = function(parameter) {
  this.RaiseCallback("CUSTOMCALLBACK|" + parameter);
}
ASPxClientScheduler.prototype.Refresh = function (refreshAction) {
 var args = "";
 if (refreshAction == ASPxClientSchedulerRefreshAction.ActiveViewTypeChanged)
  this.SetCheckSums("");
 if (_aspxIsExists(refreshAction))
  args = refreshAction;
 this.RaiseCallback("REFRESH|" + args);
}
ASPxClientScheduler.prototype.GetGroupType = function() {
 return this.privateGroupType;
}
ASPxClientScheduler.prototype.SetGroupType = function(groupType) {
 this.RaiseCallback("SVGT|" + groupType);
}
ASPxClientScheduler.prototype.GotoToday = function() {
 this.AssignSlideAnimationDirectionByDate(new Date());
 this.RaiseCallback("GOTODAY|");
}
ASPxClientScheduler.prototype.GotoDate = function(date) {
 this.AssignSlideAnimationDirectionByDate(date);
 var ms = _aspxDateTimeToMilliseconds(date);
 this.RaiseCallback("GOTODATE|" + ms);
}
ASPxClientScheduler.prototype.NavigateBackward = function() {
 this.slideAnimationDirection = this.IsCallbackAnimationEnabled() ? ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION : null;
 this.RaiseCallback("BACK|");
}
ASPxClientScheduler.prototype.NavigateForward = function() {
 this.slideAnimationDirection = this.IsCallbackAnimationEnabled() ? ASPxAnimationHelper.SLIDE_LEFT_DIRECTION : null;
 this.RaiseCallback("FORWARD|");
}
ASPxClientScheduler.prototype.ShiftVisibleIntervals = function(offsetInDays) {
 this.RaiseCallback("OFFSETVISI|" + offsetInDays);
}
ASPxClientScheduler.prototype.SetVisibleDays = function(days) {
 this.RaiseCallback("SETVISDAYS|" + days);
}
ASPxClientScheduler.prototype.ChangeTimeZoneId = function(tzi) {
 this.RaiseCallback("TZI|" + tzi);
}
ASPxClientScheduler.prototype.ShowSelectionToolTip = function(x, y) {
 this.ShowSelectionToolTipInernal(x, y);
}
ASPxClientScheduler.prototype.GetSelectedInterval = function() {
 return new ASPxClientTimeInterval(this.selection.interval.start, this.selection.interval.duration);
}
ASPxClientScheduler.prototype.GetSelectedResource = function() {
 return this.selection.resource;
}
ASPxClientScheduler.prototype.GetAppointmentById = function(id) {
 return this.GetAppointment(id);
}
ASPxClientScheduler.prototype.GetSelectedAppointmentIds = function() {
 return this.appointmentSelection.selectedAppointmentIds;
}
ASPxClientScheduler.prototype.DeselectAppointmentById = function(aptId) {
 this.appointmentSelection.RemoveAppointmentFromSelection(aptId);
}
ASPxClientScheduler.prototype.SelectAppointmentById = function(aptId) {
 this.appointmentSelection.SelectSingleAppointment(aptId);
}
ASPxClientScheduler.prototype.GetAppointmentProperties = function(aptId, propertyNames, onCallBack) {
  this.RaiseFuncCallback("APTDATA|", aptId + "," + propertyNames, onCallBack);
 }
ASPxClientScheduler.prototype.RefreshClientAppointmentProperties = function(clientAppointment, propertyNames, onCallBack) {
 if (_aspxIsExists(onCallBack)) {
  this.RefreshClientAppointmentPropertiesUserCallbackFunction = onCallBack;
 }
 else
  this.RefreshClientAppointmentPropertiesUserCallbackFunction = null;
 var callbackDelegate = _aspxCreateDelegate(this.RefreshClientAppointmentPropertiesCore, this);
 this.RaiseFuncCallback("APTDATAEX|", clientAppointment.appointmentId + "," + propertyNames, callbackDelegate);
}
ASPxClientScheduler.prototype.ShowAppointmentFormByClientId = function(aptClientId) {
 this.RaiseCallback("EDTFRMSHOW|" + aptClientId);
}
ASPxClientScheduler.prototype.ShowAppointmentFormByServerId = function(aptServerId) {
 this.RaiseCallback("EDTFRMSHOWSID|" + aptServerId);
}
ASPxClientScheduler.prototype.SetTopRowTime = function(duration, viewType) {
 var actualViewType = this.privateActiveViewType;
 if (_aspxIsExists(viewType)) 
  actualViewType = viewType;
 var state = this.topRowTimeManager.CreateTopRowTimeState(duration, -1);
 this.topRowTimeManager.SetTopRowTimeState(state, actualViewType);
}
ASPxClientScheduler.prototype.GetTopRowTime = function(viewType) {
 var actualViewType = this.privateActiveViewType;
 if (_aspxIsExists(viewType)) 
  actualViewType = viewType;
 var state = this.topRowTimeManager.GetTopRowTimeState(actualViewType);
 return state.duration;
}
ASPxClientScheduler.prototype.ShowInplaceEditor = function(startDate, endDate, resourceId) {
 var start = _aspxDateTimeToMilliseconds(startDate);
 var end = _aspxDateTimeToMilliseconds(endDate);
 var args = start + "," + end;
 if (_aspxIsExists(resourceId))
  args += "," + resourceId;
 this.RaiseCallback("NEWAPTVIAINPLFRM|" + args);
}
ASPxClientScheduler.prototype.InsertAppointment = function(clientAppointment) {
 var args  = _aspxToJson(clientAppointment);
 this.RaiseCallback("INSRTAPT|" + args);
}
ASPxClientScheduler.prototype.UpdateAppointment = function(clientAppointment) {
 var args  = _aspxToJson(clientAppointment);
 this.RaiseCallback("UPDTAPT|" + args);
}
ASPxClientScheduler.prototype.DeleteAppointment = function(clientAppointment) {
 var aptIdCollection = [ clientAppointment.appointmentId ];
 if (this.RaseAppointmentDeleting(aptIdCollection))
  return;
 var args = _aspxToJson(clientAppointment);
 this.RaiseCallback("DLTAPT|" + args);
}
ASPxClientScheduler.prototype.GetVisibleIntervals = function() {
 var result = new Array();
 var count = this.visibleIntervals.length;
 for (var i = 0; i < count; i++) 
  result.push(this.visibleIntervals[i].Clone());
 return result;
}
ASPxClientScheduler.prototype.ChangeToolTipContainer = function (container, attachEvents) {
 this.toolTipContainerChanger.ChangeContainer(container, attachEvents);
}
ASPxClientScheduler.prototype.ChangePopupMenuContainer = function (container, attachEvents) {
 this.menuContainerChanger.ChangeContainer(container, attachEvents);
}
ASPxClientScheduler.prototype.ChangeFormContainer = function (container, attachEvents) {
 this.formContainerChanger.ChangeContainer(container, attachEvents);
}
ASPxClientScheduler.prototype.AppointmentFormSave = function () {
 aspxAppointmentSave(this.name);
}
ASPxClientScheduler.prototype.AppointmentFormDelete = function () {
 aspxAppointmentDelete(this.name);
}
ASPxClientScheduler.prototype.AppointmentFormCancel = function () {
 aspxAppointmentCancel(this.name);
}
ASPxClientScheduler.prototype.GoToDateFormApply = function () {
 aspxGotoDateApply(this.name);
}
ASPxClientScheduler.prototype.GoToDateFormCancel = function () {
 aspxGotoDateCancel(this.name);
}
ASPxClientScheduler.prototype.InplaceEditFormSave = function () {
 aspxInplaceEditorSave(this.name);
}
ASPxClientScheduler.prototype.InplaceEditFormCancel = function () {
 aspxAppointmentCancel(this.name);
}
ASPxClientScheduler.prototype.InplaceEditFormShowMore = function () {
 aspxInplaceEditorEditForm(this.name);
}
ASPxClientScheduler.prototype.ReminderFormCancel = function () {
 aspxCancelRemindersForm(this.name);
}
ASPxClientScheduler.prototype.ReminderFormDismiss = function () {
 aspxDismissReminders(this.name);
}
ASPxClientScheduler.prototype.ReminderFormDismissAll = function () {
 aspxDismissAllReminders(this.name);
}
ASPxClientScheduler.prototype.ReminderFormSnooze = function () {
 aspxSnoozeReminders(this.name);
}
ASPxClientScheduler.prototype.RaiseActiveViewChanging = function(oldView, newView) {
 if (!this.ActiveViewChanging.IsEmpty()) {
  var args = new ActiveViewChangingEventArgs(oldView, newView);
  this.ActiveViewChanging.FireEvent(this, args);
  return !args.cancel;
 }
 else
  return true;
}
ASPxClientScheduler.prototype.RaiseActiveViewChanged = function() {
 if (!this.ActiveViewChanged.IsEmpty()) {
  var args = new ASPxClientEventArgs();
  this.ActiveViewChanged.FireEvent(this, args);
 }
}
ASPxClientScheduler.prototype.RaiseAppointmentClick = function(appointmentId, evt) {
 if (!this.AppointmentClick.IsEmpty()) {
  var args = new AppointmentClickEventArgs(appointmentId, evt);
  this.AppointmentClick.FireEvent(this, args);
  return args.handled;
 }
 return false;
}
ASPxClientScheduler.prototype.RaiseAppointmentDoubleClick = function(appointmentId, evt) {
 if (!this.AppointmentDoubleClick.IsEmpty()) {
  var args = new AppointmentClickEventArgs(appointmentId, evt);
  this.AppointmentDoubleClick.FireEvent(this, args);
  return args.handled;
 }
 return false;
}
ASPxClientScheduler.prototype.RaiseMouseUp = function () {
 if (!this.MouseUp.IsEmpty()) {
  var args = new ASPxClientEventArgs();
  this.MouseUp.FireEvent(this, args);  
 }
}
ASPxClientScheduler.prototype.RaiseAppointmentsSelectionChanged = function(selectedAppointmentIds) {
 if (!this.AppointmentsSelectionChanged.IsEmpty()) {
  var args = new AppointmentsSelectionEventArgs(selectedAppointmentIds);
  this.AppointmentsSelectionChanged.FireEvent(this, args);
 }
}
ASPxClientScheduler.prototype.RaiseSelectionChanged = function() {
 if (!this.SelectionChanged.IsEmpty()) {
  var args = new ASPxClientEventArgs();
  this.SelectionChanged.FireEvent(this, args);
 }
}
ASPxClientScheduler.prototype.RaiseSelectionChanging = function() {
 if (!this.SelectionChanging.IsEmpty()) {
  var args = new ASPxClientEventArgs();
  this.SelectionChanging.FireEvent(this, args);
 }
}
ASPxClientScheduler.prototype.RaiseVisibleIntervalChanged = function() {
 if (!this.VisibleIntervalChanged.IsEmpty()) {
  var args = new ASPxClientEventArgs();
  this.VisibleIntervalChanged.FireEvent(this, args);
 }
}
ASPxClientScheduler.prototype.RaiseMoreButtonClickedEvent = function(args) {
 if (!this.MoreButtonClicked.IsEmpty())
  this.MoreButtonClicked.FireEvent(this, args);
}
ASPxClientScheduler.prototype.RaiseMenuItemClicked = function(itemName) {
 if (!this.MenuItemClicked.IsEmpty()) {
  var args = new MenuItemClickedEventArgs(itemName);
  this.MenuItemClicked.FireEvent(this, args);
  return args.handled;
 }
 return false;
}
ASPxClientScheduler.prototype.RaiseAppointmentDrop = function(operation) {
 if (!this.AppointmentDrop.IsEmpty()) {
  var args = new ASPxClientAppointmentDragEventArgs(operation);
  this.AppointmentDrop.FireEvent(this, args);
  return args.handled;
 }
 return false;
}
ASPxClientScheduler.prototype.RaiseAppointmentResize = function(operation) {
 if (!this.AppointmentResize.IsEmpty()) {
  var args = new ASPxClientAppointmentResizeEventArgs(operation);
  this.AppointmentResize.FireEvent(this, args);
  return args.handled;
 }
 return false;
}
ASPxClientScheduler.prototype.RaseAppointmentDeleting = function(clientAppointments) {
 if (!this.AppointmentDeleting.IsEmpty()) {
  var args = new ASPxClientAppointmentDeletingEventArgs(clientAppointments);
  this.AppointmentDeleting.FireEvent(this, args);
  return args.cancel;
 }
 return false;
}
ASPxSchedulerViewType = _aspxCreateClass(null, {
});
ASPxSchedulerViewType.Day = "Day";
ASPxSchedulerViewType.WorkWeek = "WorkWeek";
ASPxSchedulerViewType.Week = "Week";
ASPxSchedulerViewType.Month = "Month";
ASPxSchedulerViewType.Timeline = "Timeline";
ASPxSchedulerGroupType = _aspxCreateClass(null, {
});
ASPxSchedulerGroupType.None = "None";
ASPxSchedulerGroupType.Date = "Date";
ASPxSchedulerGroupType.Resource = "Resource";
ASPxAppointmentType = _aspxCreateClass(null, {
});
ASPxAppointmentType.Normal = "Normal";
ASPxAppointmentType.Pattern = "Pattern";
ASPxAppointmentType.Occurrence = "Occurrence",
ASPxAppointmentType.ChangedOccurrence = "ChangedOccurrence",
ASPxAppointmentType.DeletedOccurrence = "DeletedOccurrence";
ASPxClientAppointmentDeletingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(appointmentIds) {
  this.constructor.prototype.constructor.call(this);
  this.appointmentIds = appointmentIds;
 }
});
AppointmentClickEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(appointmentId, sourceEvent) {
  this.appointmentId = appointmentId;
  this.htmlElement = sourceEvent;
  this.handled = false;
 }
});
AppointmentsSelectionEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(appointmentIds){
  this.constructor.prototype.constructor.call(this);
  this.appointmentIds = appointmentIds;
 }
});
ActiveViewChangingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(oldView, newView){
  this.constructor.prototype.constructor.call(this);
  this.oldView = oldView;
  this.newView = newView;
  this.cancel = false;
 }
});
MoreButtonClickedEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(targetDateTime, interval, resource) {
  this.targetDateTime = targetDateTime;
  this.interval = interval;
  this.resource = resource;
  this.handled = false;
 }
});
MenuItemClickedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(itemName) {
  this.itemName = itemName;
  this.handled = false;
 }
});
ASPxClientAppointmentDragEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(operation) {
  this.handled = false;
  this.operation = operation;
 }
});
ASPxClientAppointmentResizeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(operation) {
  this.handled = false;
  this.operation = operation;
 }
});
MVCxClientScheduler = _aspxCreateClass(ASPxClientScheduler, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.start = null;
  this.callbackUrl = "";
  this.customActionUrl = "";
  this.editAppointmentsUrl = "";
  this.appointmentFormUrl = "";
  this.appointmentInplaceEditorFormUrl = "";
  this.gotoDateFormUrl = "";
  this.recurrentAppointmentDeleteFormUrl = "";
  this.remindersFormUrl = "";
  this.callbackCustomArgs = {};
  this.editableAppoinmentEditors = null;
  this.recurrenceFormName = "";
  this.resourceSharing = false;
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientScheduler.prototype.PerformCallback.call(this, _aspxToJson(data));
 },
 InlineInitialize: function(){
  if(this.callbackUrl != "")
   this.callBack = function (arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  if(this.customActionUrl != "")
   this.customActionCallBack = function(arg) { MVCx.PerformControlCallback(this.name, this.customActionUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  if(this.editAppointmentsUrl != "")
   this.editAppointmentsCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.editAppointmentsUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  if(this.appointmentFormUrl != "")
   this.appointmentFormCallBack = function(arg){ MVCx.PerformControlCallback(this.name, this.appointmentFormUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  if(this.appointmentInplaceEditorFormUrl != "")
   this.appointmentInplaceEditorFormCallback = function(arg){ MVCx.PerformControlCallback(this.name, this.appointmentInplaceEditorFormUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) }; 
  if(this.gotoDateFormUrl != "")
   this.gotoDateFormUrl = function(arg){ MVCx.PerformControlCallback(this.name, this.gotoDateFormUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  if(this.recurrentAppointmentDeleteFormUrl != "")
   this.recurrentAppointmentDeleteFormUrl = function(arg){ MVCx.PerformControlCallback(this.name, this.recurrentAppointmentDeleteFormUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs) };
  ASPxClientScheduler.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientScheduler.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientScheduler.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 GetCallbackParams: function() {
  var params = {};
   $(this.GetMainElement()).find("input,textarea").each(function(){
   params[this.name] = this.value;
  });
  params[this.name + "_start"] = _aspxToJson(this.start);
  params[this.name + "_activeViewType"] = this.GetActiveViewType();
  return this.FillParamsForForm(params);
 },
 FillParamsForForm: function(params) {
  if(!this.currentPopupContainer)
   return params;
  var formValues = this.activeFormType == "Appointment" && this.editableAppoinmentEditors ? this.GetParamsForAppointmentForm() : this.GetParamsForStandardForm();
  if (this.IsVisibleAppointmentRecurrenceForm())
   formValues["RecurrenceFormValue"] = aspxGetControlCollection().Get(this.recurrenceFormName).GetValue();
  params["DXMVCSchedulerAptFormValues"] = _aspxToJson(formValues);
  params[this.name + "_enabledAppointmentFormTemplateControl"] = !!this.editableAppoinmentEditors;
  params[this.name + "_resourceSharing"] = this.resourceSharing;
  return params;
 },
 GetParamsForStandardForm: function() {
  function addValuesToPostData(name, value, formPostData){
   var lastSeparatorIndex = name.lastIndexOf("_");
   var editorName = lastSeparatorIndex > -1 ? name.substr(lastSeparatorIndex + 1) : name;
   if(!_aspxIsExists(formPostData[editorName]))
    formPostData[editorName] = value;
  };
  var formValues = {};
  var formContainer = this.currentPopupContainer.GetContentContainer(-1);
  aspxGetControlCollection().ProcessControlsInContainer(formContainer, function(control) {
   if(!control.GetValue || !((_aspxGetElementVisibility(control.GetMainElement()) && !_aspxElementIsVisible(control.GetMainElement())) || _aspxElementIsVisible(control.GetMainElement())))
    return;
   addValuesToPostData(control.name, MVCx.GetEditorValueByControl(control), formValues);
  });
  $(formContainer).children("input:hidden").each(function(){
   addValuesToPostData(this.id, this.value, formValues);
  });
  return formValues;
 },
 GetParamsForAppointmentForm: function() {
  var formValues = {};
  if (this.editableAppoinmentEditors) {
   for(var index in this.editableAppoinmentEditors){
    var fieldName = this.editableAppoinmentEditors[index];
    var control = aspxGetControlCollection().Get(fieldName);
    if (control && control.GetValue)
     formValues[fieldName] = MVCx.GetEditorValueByControl(control);
   }
  };
  return formValues;
 },
 IsVisibleAppointmentRecurrenceForm: function(){
  return this.activeFormType == "Appointment" && this.recurrenceFormName && _aspxGetElementById(this.recurrenceFormName + "_mainDiv");
 },
 CreateClientAppointmentDragHelper: function(hitTestResult, appointmentClickHandler, e) {
  return new MVCxClientAppointmentDragHelper(this, hitTestResult.appointmentDiv, hitTestResult.cell, e, appointmentClickHandler, this);
 },
 CreateCallbackCore: function (arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function () { this.callbackCustomArgs = {}; } .aspxBind(this), 0);
  ASPxClientScheduler.prototype.CreateCallbackCore.call(this, arg, this.GetCommandName(arg), callbackID);
 },
 GetCallbackMethod: function(command) {
  switch(command) {
   case "CUSTOMCALLBACK":
    return MVCx.GetCustomActionCallBackMethod(this);
   case "INPLACESAVE":
    return this.appointmentInplaceEditorFormCallback || this.editAppointmentsCallBack;
   case "APTDEL": case "APTSAVE":
    return this.appointmentFormCallBack || this.editAppointmentsCallBack;
   case "APTSCHANGE": case "LabelSubMenu": case "StatusSubMenu": case "RestoreOccurrence":
    return this.editAppointmentsCallBack;
   case "RECURAPTDELETE":
    return this.recurrentAppointmentDeleteFormUrl || this.editAppointmentsCallBack;
   case "DeleteAppointment":
    return this.editAppointmentsCallBack;
   case "INSRTAPT": case "UPDTAPT": case "DLTAPT":
    return this.editAppointmentsCallBack;
   case "GOTODATEFORM":
    return this.gotoDateFormUrl || this.callBack;
   case "SNZREMINDERS": case "DSMSREMINDER": case "DSMSALLREMINDERS": case "CLSREMINDERSFRM":
    return this.remindersFormUrl || this.editAppointmentsCallBack;
  }
  return this.callBack;
 },
 GetCommandName: function(arg){
  var data = arg.split("|");
  return data[0] == "MNUAPT" ? data[1].split("!")[0] : data[0];
 },
 DoCallback: function(response) {
  ASPxClientScheduler.prototype.DoCallback.call(this, response);
  if(this.editableAppoinmentEditors)
   this.editableAppoinmentEditors = eval(this.editableAppoinmentEditors);
 }
});
function aspxSchedulerShowGotoDateCalendar(name) {
 var schedulerViewNavigator = aspxGetControlCollection().Get(name);
 if(schedulerViewNavigator)
  schedulerViewNavigator.ShowGotoDateCalendar();
}
function aspxSchedulerGotoDate(calendar, name) {
 var schedulerViewNavigator = aspxGetControlCollection().Get(name);
 if(schedulerViewNavigator)
  schedulerViewNavigator.GotoDate(calendar);
}
function aspxSchedulerNavigateViewBackward(name) {
 var schedulerViewNavigator = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(schedulerViewNavigator))
  schedulerViewNavigator.NavigateBackward();
}
function aspxSchedulerNavigateViewForward(name) {
 var schedulerViewNavigator = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(schedulerViewNavigator))
  schedulerViewNavigator.NavigateForward();
}
function aspxSchedulerGotoToday(name) {
 var schedulerViewNavigator = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(schedulerViewNavigator))
  schedulerViewNavigator.GotoToday();
}
ASPxClientSchedulerViewNavigator = _aspxCreateClass(ASPxClientSchedulerRelatedControlBase, {
 NavigateBackward: function () {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(schedulerControl))
   schedulerControl.NavigateBackward();
 },
 NavigateForward: function () {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(schedulerControl))
   schedulerControl.NavigateForward();
 },
 GotoToday: function () {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(schedulerControl))
   schedulerControl.GotoToday();
 },
 ShowGotoDateCalendar: function () {
  if (this.calendarId) {
   var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
   var schedulerGotoDateCalendar = aspxGetControlCollection().Get(this.calendarId);
   var popupDiv = _aspxGetElementById(this.calendarPopupDivId);
   if (schedulerControl && schedulerGotoDateCalendar && popupDiv) {
    var intervals = schedulerControl.GetVisibleIntervals();
    if (intervals.length > 0) {
     schedulerGotoDateCalendar.SetValue(intervals[0].start);
    }
    var buttonElement = _aspxGetElementById(this.gotoDateButtonId);
    var posX = _aspxGetAbsolutePositionX(buttonElement);
    var posY = _aspxGetAbsolutePositionY(buttonElement) + buttonElement.offsetHeight;
    schedulerControl.ShowPopupDiv(popupDiv);
    _aspxSetAbsoluteX(popupDiv, posX);
    _aspxSetAbsoluteY(popupDiv, posY);
   }
  }
 },
 GotoDate: function (calendar) {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  var popupDiv = _aspxGetElementById(this.calendarPopupDivId);
  schedulerControl.HidePopupDiv(popupDiv);
  var date = calendar.GetValue();
  schedulerControl.GotoDate(date);
 }
});

ASPxClientSchedulerViewVisibleInterval = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.schedulerControlId = "";
 }
});

function aspxSchedulerSelectView(name, view) {
 var schedulerViewSelector = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(schedulerViewSelector))
  schedulerViewSelector.SelectView(view);
}
ASPxClientSchedulerViewSelector = _aspxCreateClass(ASPxClientSchedulerRelatedControlBase, {
 SelectView: function(view) {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(schedulerControl))
   schedulerControl.SetActiveViewType(view);
 }
});

function aspxSchedulerResNavCmd(name, cmdId, params) {
 var resourceNavigator = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(resourceNavigator))
  resourceNavigator.ExecuteCallbackCommand(cmdId, params);
}
function aspxSchedulerResNavDecorateCombo(name) {
 var resourceNavigator = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(resourceNavigator))
  resourceNavigator.DecorateCombo();
}
ASPxClientSchedulerResourceNavigator = _aspxCreateClass(ASPxClientSchedulerRelatedControlBase, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.visibleResCount = 0;
  this.savedIndex = -1;
 },
 Initialize: function () {
  this.DecorateCombo();
 },
 RegisterScriptsRestartHandler: function () {
  var func = new Function("aspxSchedulerResNavDecorateCombo('" + this.name + "');");
  _aspxAddScriptsRestartHandler(this.name, func);
 },
 ProcessCallbackResult: function (id, html, params) {
  ASPxRelatedControlManager.ProcessCallbackResultDefault(id, html, "");
  this.visibleResCount = params;
 },
 GetCombo: function () {
  return aspxGetControlCollection().Get(this.name + "_cmb");
 },
 DecorateCombo: function () {
  if (this.visibleResCount < 2)
   return;
  var combo = this.GetCombo();
  if (_aspxIsExists(combo)) {
   var bag = [];
   var item;
   var startIndex = combo.GetSelectedIndex();
   if (startIndex < 0)
    startIndex = this.savedIndex;
   else
    this.savedIndex = startIndex;
   for (var i = 0; i < this.visibleResCount; i++) {
    item = combo.GetItem(startIndex + i);
    if (_aspxIsExists(item))
     bag.push(item.text);
   }
   if (combo.GetInputElement() != null) {
    ASPxClientDropDownEdit.prototype.SetTextBase.call(combo, bag.join(", "));
   }
  }
 },
 ExecuteCallbackCommand: function (cmdId, params) {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(schedulerControl))
   schedulerControl.RaiseCallback(cmdId + "|" + params);
 }
});

__aspxSchedulerStatusInfosQueue = new Array();
ASPxSchedulerStatusInfoType = _aspxCreateClass(null, { 
});
ASPxSchedulerStatusInfoType.Exception = "Exception";
ASPxSchedulerStatusInfoType.Error = "Error";
ASPxSchedulerStatusInfoType.Warning= "Warning";
ASPxSchedulerStatusInfoType.Info = "Info";
function aspxSchedulerRefreshStatusInfos(name) {
 AfterInitializeStatusInfos();
 var statusInfo = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(statusInfo)) {
  statusInfo.RefreshStatusInfos();  
 }   
}
function AfterInitializeStatusInfos() {
 var count = __aspxSchedulerStatusInfosQueue.length;
 if(count == 0)
  return;
 for(var i = count - 1; i >= 0; i--) {
  var statusInfo = __aspxSchedulerStatusInfosQueue[i];
  var scheduler = aspxGetControlCollection().Get(statusInfo.schedulerControlId);
  if(_aspxIsExists(scheduler))
   scheduler.statusInfoManager.AddStatusInfo(statusInfo);
 }
 __aspxSchedulerStatusInfosQueue = new Array();
}
ASPxClientSchedulerStatusInfoManager = _aspxCreateClass(ASPxClientSchedulerRelatedControlBase, {   
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.statusInfos = new Array();
  this.visibleStatusInfo = null;
  this.image = new Object();
  this.ClearInfo();
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  var scheduler = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(scheduler)) {
   if(_aspxIsExists(scheduler.statusInfoManager)) {
    this.statusInfos = scheduler.statusInfoManager.statusInfos;
    this.visibleStatusInfo = scheduler.statusInfoManager.visibleStatusInfo;
    this.contentDiv = scheduler.statusInfoManager.contentDiv;
    this.subjectSpan = scheduler.statusInfoManager.subjectSpan;
    this.detailInfoSpan = scheduler.statusInfoManager.detailInfoSpan;
    this.image = scheduler.statusInfoManager.image;
    this.visibleImage = scheduler.statusInfoManager.visibleImage;
    this.detailInfoLink = scheduler.statusInfoManager.detailInfoLink;
   }
   else {
    this.contentDiv =  _aspxGetElementById(this.name + "_contentDiv");
    this.subjectSpan = _aspxGetElementById(this.name + "_subject");
    this.detailInfoSpan = _aspxGetElementById(this.name + "_detailInfo");
    this.detailInfoLink = _aspxGetElementById(this.name + "_detailInfoLink");
    this.image[ASPxSchedulerStatusInfoType.Exception] = _aspxGetElementById(this.name + "_exceptionImg");
    this.image[ASPxSchedulerStatusInfoType.Error] = _aspxGetElementById(this.name + "_errorImg");
    this.image[ASPxSchedulerStatusInfoType.Warning] = _aspxGetElementById(this.name + "_warningImg");
    this.image[ASPxSchedulerStatusInfoType.Info] = _aspxGetElementById(this.name + "_infoImg");
    this.visibleImage = null;    
    this.contentDiv.parentNode.removeChild(this.contentDiv);
   }
   scheduler.statusInfoManager = this;
  }
  var func = new Function("aspxSchedulerRefreshStatusInfos('" + this.name + "');");  
  _aspxSetTimeout(func, 1);
 },
 SetInfo: function(imageType, subject, detail) {
  this.subject = subject;
  this.detailInfo = detail;
  this.imageType = imageType;
 },
 ClearInfo: function() {
  this.SetInfo("", "", "");
 },
 AddStatusInfo: function(statusInfo) {
  this.statusInfos.push(statusInfo);  
 },
 Clear: function() {
  this.ClearInfo();
  this.RefreshStatusInfos();  
 }, 
 RegisterScriptsRestartHandler: function() { 
  var func = new Function("aspxSchedulerRefreshStatusInfos('" + this.name + "');");  
  _aspxAddScriptsRestartHandler(this.name, func);
 },
 RefreshStatusInfos: function() {
  var statusInfo = this.GetStatusInfo();
  if(_aspxIsExists(this.visibleStatusInfo))
   this.visibleStatusInfo.HideContent();
  if(_aspxIsExists(statusInfo) && (this.subject != "" || this.detailInfo != "")) {
   this.subjectSpan.innerHTML = this.subject;
   this.detailInfoSpan.innerHTML = this.detailInfo;
   _aspxSetElementDisplay(this.detailInfoLink, this.detailInfo != "");
   if(_aspxIsExists(this.visibleImage))
    _aspxSetElementDisplay(this.visibleImage, false);
   this.visibleImage = this.image[this.imageType];
   if(_aspxIsExists(this.visibleImage))
    _aspxSetElementDisplay(this.visibleImage, true);   
   statusInfo.SetContent(this.contentDiv);
   this.visibleStatusInfo = statusInfo;   
  }
 },
 GetStatusInfo: function() {
  var maxPriority = -1;
  var result = null;
  for(var i = this.statusInfos.length - 1; i >= 0; i--) {
   var statusInfo = this.statusInfos[i];
   if(statusInfo.IsVisible()) {
    if(statusInfo.priority > maxPriority) {
     maxPriority = statusInfo.priority;
     result = statusInfo;
    }
   }
   else
    _aspxArrayRemoveAt(this.statusInfos, i);
  }
  return result;  
 },
 ShowExceptionInfo: function(msg) {
  var subjectLengthEnd = msg.indexOf(",");
  var detailInfoLengthEnd = msg.indexOf("|");
  var subjectLength = parseInt(msg.substr(0, subjectLengthEnd));
  var detailInfoLength = parseInt(msg.substr(subjectLengthEnd + 1, detailInfoLengthEnd - subjectLengthEnd - 1));
  var subject = msg.substr(detailInfoLengthEnd + 1, subjectLength);
  var detailInfo = msg.substr(detailInfoLengthEnd + subjectLength + 1, detailInfoLength);
  this.SetInfo(ASPxSchedulerStatusInfoType.Exception, subject, detailInfo);
 }
});
ASPxClientSchedulerStatusInfo = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.priority = 0;
  this.currentContent = null;
 },
 Initialize: function () {
  this.constructor.prototype.Initialize.call(this);
  this.contentDiv = _aspxGetElementById(this.name + "_mainDiv");
  this.outerContainer = this.isInsideRow ? this.contentDiv.parentNode.parentNode : this.contentDiv;
  __aspxSchedulerStatusInfosQueue.push(this);
 },
 SetContent: function (content) {
  this.HideContent();
  var newContent = content.cloneNode(true);
  this.contentDiv.appendChild(newContent);
  _aspxSetElementDisplay(this.outerContainer, true);
  this.currentContent = newContent;
  this.EnsureVisible(this.currentContent);
 },
 EnsureVisible: function (content) {
  var currentYPosition = _aspxGetAbsolutePositionY(content);
  var scrollTop = _aspxGetDocumentScrollTop();
  var clientHeight = _aspxGetDocumentClientHeight();
  if (currentYPosition < scrollTop || scrollTop + clientHeight < currentYPosition)
   _aspxSetDocumentScrollTop(currentYPosition);
 },
 HideContent: function () {
  if (_aspxIsExists(this.currentContent)) {
   var parentNode = this.currentContent.parentNode;
   if (_aspxIsExists(parentNode)) {
    parentNode.removeChild(this.currentContent);
   }
  }
  if (_aspxIsExists(this.contentDiv))
   _aspxSetElementDisplay(this.outerContainer, false);
  this.currentContent = null;
 },
 IsVisible: function () {
  this.contentDiv = _aspxGetElementById(this.name + "_mainDiv"); 
  if (_aspxIsExists(this.contentDiv)) {
   this.outerContainer = this.isInsideRow ? this.contentDiv.parentNode.parentNode : this.contentDiv;
   return true;
  }
  return false;
 }
});

ASPxClientSchedulerToolTip = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.canShowToolTip = true;
 },
 Initialize: function () {
  this.constructor.prototype.Initialize.call(this);
  this.mainDiv = this.GetMainDiv();
  this.toolTipParent = this.mainDiv.parentNode;
  this.mainDiv.isToolTip = true;
  if (this.isVisible)
   this.ShowToolTip();
 },
 HideToolTip: function () {
  if (!this.isVisible)
   return;
  this.isVisible = false;
  _aspxSetElementDisplay(this.mainDiv, false);
  this.aspxParentControl.activeToolTip = null;
 },
 ShouldResetPositionByTimer: function () {
  if (!_aspxIsExists(this.templatedToolTip))
   return false;
  return this.templatedToolTip.ShouldResetPositionByTimer();
 },
 CanCloseByMouseClick: function () {
  if (!_aspxIsExists(this.templatedToolTip))
   return false;
  return this.templatedToolTip.CanCloseByMouseClick();
 },
 ShowToolTip: function (documentX, documentY) {
  if (_aspxIsExists(this.aspxParentControl.activeToolTip) && this.aspxParentControl.activeToolTip != this) {
   return;
  }
  this.aspxParentControl.activeToolTip = this;
  this.isVisible = true;
  this.mainDiv.dataObject = this.dataObject;
  _aspxSetElementVisibility(this.mainDiv, false);
  _aspxSetElementDisplay(this.mainDiv, true);
  var position = this.CalculateToolTipPosition(documentX, documentY);
  var xPos = position.GetX();
  var yPos = position.GetY();
  if (!ASPxClientScheduler.DisableSmartToolTipLayout) {
   var clientWidth = __aspxWebKitFamily ? document.documentElement.clientWidth : _aspxGetDocumentClientWidth();
   xPos += this.CalculateToolTipOffset(_aspxGetDocumentScrollLeft(), clientWidth, position.GetX(), this.mainDiv.offsetWidth);
   yPos += this.CalculateToolTipOffset(_aspxGetDocumentScrollTop(), _aspxGetDocumentClientHeight(), position.GetY(), this.mainDiv.offsetHeight);
  }
  this.SetDivPosition(this.mainDiv, xPos - _aspxGetPositionElementOffset(this.mainDiv, true), yPos - _aspxGetPositionElementOffset(this.mainDiv, false));
  _aspxSetElementVisibility(this.mainDiv, true);
 },
 CalculateToolTipOffset: function (constraintStart, constraintLength, start, length) {
  var constraintEnd = constraintStart + constraintLength;
  var end = start + length;
  var offset = constraintEnd - end;
  if (offset < 0)
   return offset;
  offset = constraintStart - start;
  if (offset > 0)
   return offset;
  return 0;
 },
 CalculateToolTipPosition: function (documentX, documentY) {
  var positionX = documentX;
  var positionY = documentY;
  var position = new ASPxClientPoint(positionX, positionY);
  if (_aspxIsExists(this.templatedToolTip)) {
   var bounds = new ASPxClientRect(positionX, positionY, this.mainDiv.offsetWidth, this.mainDiv.offsetHeight);
   position = this.templatedToolTip.CalculatePosition(bounds);
  }
  return position;
 },
 SetDivPosition: function (element, left, dxtop) {
  element.style.left = left + "px";
  element.style.top = dxtop + "px";
 },
 CanShowToolTip: function (toolTipData) {
  if (!this.canShowToolTip)
   return false;
  if (!_aspxIsExists(this.templatedToolTip) || !toolTipData)
   return this.canShowToolTip;
  return this.templatedToolTip.CanShowToolTip(toolTipData);
 },
 GetAppointment: function (dataObject) {
  if (!dataObject || !dataObject.appointmentId)
   return null;
  var scheduler = this.GetSchedulerControl();
  if (!scheduler)
   return null;
  return scheduler.GetAppointment(dataObject.appointmentId);
 },
 AdjustImageWidth: function (element) {
 },
 AdjustCellSize: function (cell, image) {
 },
 GetElementById: function (id) {
  return _aspxGetElementById(this.name + "_" + id);
 },
 SetContent: function (toolTipData) {
  if (!_aspxIsExists(this.templatedToolTip))
   return;
  this.templatedToolTip.Update(toolTipData);
 },
 FinalizeUpdate: function (toolTipData) {
  if (!_aspxIsExists(this.templatedToolTip))
   return;
  this.templatedToolTip.FinalizeUpdate(toolTipData);
 },
 UpdateMainDiv: function () {
  this.mainDiv = this.GetMainDiv();
  this.toolTipParent = this.mainDiv.parentNode;
 },
 GetMainDiv: function () {
  return this.GetElementById("mainDiv");
 },
 GetSchedulerControl: function () {
  if (!_aspxIsExists(this.templatedToolTip))
   return null;
  return this.templatedToolTip.scheduler;
 }
});
ASPxClientSchedulerToolTipData = _aspxCreateClass(null, {
 constructor: function(appointment, interval, resources) {
  this.appointment = _aspxIsExists(appointment) ? appointment : null;
  this.interval = _aspxIsExists(interval) ? interval : null;
  this.resources = _aspxIsExists(resources) ? resources : null;
 },
 GetAppointment: function() {
  return this.appointment;
 },
 GetInterval: function() {
  return this.interval;
 },
 GetResources: function() {
  return this.resoruces;
 }
});
ASPxClientToolTipBase = _aspxCreateClass(null, {
 constructor: function (scheduler) {
  this.constructor.prototype.constructor.call(this);
  this.scheduler = scheduler;
  this.controls = new Object;
  this.canCloseByClick = false;
 },
 Initialize: function () {
 },
 CanShowToolTip: function (toolTipData) {
  return true;
 },
 FinalizeUpdate: function (toolTipData) {
 },
 Update: function (toolTipData) {
 },
 Close: function () {
  if (_aspxIsExists(this.scheduler)) {
   this.scheduler.HideAllToolTips();
  }
 },
 CalculatePosition: function (bounds) {
  return new ASPxClientPoint(bounds.GetLeft() - bounds.GetWidth() / 2, bounds.GetTop() - bounds.GetHeight());
 },
 ShowAppointmentMenu: function (s) {
  var evt = _aspxGetEvent(s);
  if (!_aspxIsExists(evt)) return null;
  var sender = __aspxIE ? evt.srcElement : evt.target
  if (!_aspxIsExists(sender)) return null;
  this.scheduler.OnAppointmentToolTipClick(sender, evt);
 },
 ShowViewMenu: function (s) {
  var evt = _aspxGetEvent(s);
  if (!_aspxIsExists(evt)) return null;
  var sender = __aspxIE ? evt.srcElement : evt.target
  if (!_aspxIsExists(sender)) return null;
  this.scheduler.menuManager.ShowViewMenu(sender, evt);
 },
 ShouldResetPositionByTimer: function () {
  if (_aspxIsExists(this.resetPositionByTimer))
   return this.resetPositionByTimer;
  return false;
 },
 CanCloseByMouseClick: function () {
  return this.canCloseByClick;
 },
 ConvertIntervalToString: function (interval) {
  var formatter = new ASPxDateFormatter();
  var startTimeFormat = this.SelectStartTimeFormat(this.scheduler, interval);
  var endTimeFormat = this.SelectEndTimeFormat(this.scheduler, interval);
  formatter.SetFormatString(startTimeFormat);
  var result = formatter.Format(interval.GetStart());
  if (_aspxIsExists(endTimeFormat)) {
   formatter.SetFormatString(endTimeFormat);
   result += " - " + formatter.Format(interval.GetEnd());
  }
  return result;
 },
 SelectStartTimeFormat: function (scheduler, interval) {
  var intervalStart = interval.GetStart();
  var intervalEnd = interval.GetEnd();
  var startDate = intervalStart.getDate();
  var startYear = intervalStart.getYear();
  var startMonth = intervalStart.getMonth();
  var endDate = intervalEnd.getDate();
  var endYear = intervalEnd.getYear();
  var endMonth = intervalEnd.getMonth();
  var truncStartDate = new Date(startYear, startMonth, startDate);
  var truncEndDate = new Date(endYear, endMonth, endDate);
  var datesEquals = startDate == endDate && startMonth == endMonth && startYear == endYear;
  if (datesEquals) {
   if (interval.IsSmallerThanDay())
    return scheduler.formatsTimeWithMonthDay[0];
   else
    return scheduler.formatsWithoutYearAndWeekDay[0];
  }
  else {
   if (truncStartDate - interval.GetStart() == 0 && truncEndDate - interval.GetEnd() == 0) {
    if (startYear == endYear || interval.IsDurationEqualToDay())
     return scheduler.formatsWithoutYearAndWeekDay[0];
    else
     return scheduler.formatsDateWithYear[0];
   }
   else {
    if (startYear == endYear)
     return scheduler.formatsTimeWithMonthDay[0];
    else
     return scheduler.formatsDateTimeWithYear[0];
   }
  }
 },
 SelectEndTimeFormat: function (scheduler, interval) {
  var intervalStart = interval.GetStart();
  var intervalEnd = interval.GetEnd();
  var startDate = intervalStart.getDate();
  var startYear = intervalStart.getYear();
  var startMonth = intervalStart.getMonth();
  var endDate = intervalEnd.getDate();
  var endYear = intervalEnd.getYear();
  var endMonth = intervalEnd.getMonth();
  var truncStartDate = new Date(startYear, startMonth, startDate);
  var truncEndDate = new Date(endYear, endMonth, endDate);
  var datesEquals = startDate == endDate && startMonth == endMonth && startYear == endYear;
  if (datesEquals) {
   if (interval.IsSmallerThanDay())
    return scheduler.formatsTimeOnly[0];
   else
    return null;
  }
  else {
   if (truncStartDate - interval.GetStart() == 0 && truncEndDate - interval.GetEnd() == 0) {
    if (startYear == endYear || interval.IsDurationEqualToDay())
     return (interval.IsDurationEqualToDay()) ? null : scheduler.formatsWithoutYearAndWeekDay[0];
    else
     return scheduler.formatsDateWithYear[0];
   }
   else {
    if (startYear == endYear)
     return scheduler.formatsTimeWithMonthDay[0];
    else
     return scheduler.formatsDateTimeWithYear[0];
   }
  }
 }
});
ASPxClientSelectionToolTip = _aspxCreateClass(ASPxClientToolTipBase, {
 Initialize: function() {
  ASPxClientUtils.AttachEventToElement(this.controls.buttonDiv, "click", _aspxCreateDelegate(this.OnButtonDivClick, this));
 },
 OnButtonDivClick: function(s,e) {
  this.ShowViewMenu(s);
 }
});
ASPxClientWeekDaysCheckEdit = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
 },
 GetValue: function() {
  var result = 0;
  for (var day in this.itemsControl) {
   var checkEdit = this.itemsControl[day];
   if(checkEdit.GetChecked())
    result |= day;
  }
  return result;
 },
 SetValue: function(value) {
  for (var day in this.itemsControl) {
   var checkEdit = this.itemsControl[day];
   checkEdit.SetChecked((value & day) == day);
  }
 },
 GetMainElement: function () {
  if (!_aspxIsExistsElement(this.mainElement))
   this.mainElement = _aspxGetElementById(this.name + "_Items");
  return this.mainElement;
 }
});
ASPxClientRecurrenceRangeControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 GetMainElement: function () {
  if (!_aspxIsExistsElement(this.mainElement))
   this.mainElement = _aspxGetElementById(this.name + "_mainDiv");
  return this.mainElement;
 },
 UpdateControl: function (s, e) {
  var range = this.GetRange();
  this.UpdateChildControlsControls(range);
 },
 SubscribeEvents: function () {
  this.rbEndAfterNumberOfOccurrences.CheckedChanged.AddHandler(_aspxCreateDelegate(this.OnCheckedChanged, this));
  this.rbEndByDate.CheckedChanged.AddHandler(_aspxCreateDelegate(this.OnCheckedChanged, this));
  this.rbNoEndDate.CheckedChanged.AddHandler(_aspxCreateDelegate(this.OnCheckedChanged, this));
 },
 OnCheckedChanged: function (s, e) {
  var range = this.GetRange();
  this.UpdateChildControlsControls(range);
 },
 UpdateChildControlsControls: function (range) {
  if (range == ASPxClientRecurrenceRange.NoEndDate) {
   this.deRangeEnd.SetEnabled(false);
   this.spinRangeOccurrencesCount.SetEnabled(false);
  }
  else if (range == ASPxClientRecurrenceRange.OccurrenceCount) {
   this.deRangeEnd.SetEnabled(false);
   this.spinRangeOccurrencesCount.SetEnabled(true);
  }
  else if (range == ASPxClientRecurrenceRange.EndByDate) {
   this.deRangeEnd.SetEnabled(true);
   this.spinRangeOccurrencesCount.SetEnabled(false);
  }
 },
 GetRange: function () {
  if (this.rbNoEndDate.GetChecked())
   return ASPxClientRecurrenceRange.NoEndDate;
  if (this.rbEndAfterNumberOfOccurrences.GetChecked())
   return ASPxClientRecurrenceRange.OccurrenceCount;
  if (this.rbEndByDate.GetChecked())
   return ASPxClientRecurrenceRange.EndByDate;
  return ASPxClientRecurrenceRange.NoEndDate;
 },
 GetOccurrenceCount: function () {
  return this.spinRangeOccurrencesCount.GetValue();
 },
 GetEndDate: function () {
  return this.deRangeEnd.GetValue();
 },
 SetRange: function (range) {
  switch (range) {
   case ASPxClientRecurrenceRange.NoEndDate:
    this.rbNoEndDate.SetChecked(true);
    break;
   case ASPxClientRecurrenceRange.OccurrenceCount:
    this.rbEndAfterNumberOfOccurrences.SetChecked(true);
    break;
   case ASPxClientRecurrenceRange.EndByDate:
    this.rbEndByDate.SetChecked(true);
    break;
  }
  this.UpdateChildControlsControls(range);
 },
 SetOccurrenceCount: function (occurrenceCount) {
  this.spinRangeOccurrencesCount.SetValue(occurrenceCount);
 },
 SetEndDate: function (date) {
  this.deRangeEnd.SetValue(date);
 },
 AfterInitialize: function () {
  this.constructor.prototype.AfterInitialize.call(this);
  this.UpdateControl();
 },
 GetValue: function() {
  var value = {};
  value["Range"] = this.GetRange();
  value["OccurrenceCount"] = this.GetOccurrenceCount();
  value["EndDate"] = this.GetEndDate();
  return value;
 }
});
ASPxClientRecurrenceControlBase = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.valueAccessor = this.CreateValueAccessor(this);
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
 },
 GetMainElement: function(){
  if(!_aspxIsExistsElement(this.mainElement))
   this.mainElement = _aspxGetElementById(this.name + "_mainDiv");
  return this.mainElement;
 },
 CreateValueAccessor: function(recurrenceControl) {
  return new DefaultRecurrenceRuleValuesAccessor(recurrenceControl);
 },
 Update: function(recurrenceInfo) {
 }
});
ASPxClientDailyRecurrenceControl = _aspxCreateClass(ASPxClientRecurrenceControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 Initialize: function(){
  this.constructor.prototype.Initialize.call(this);
 },
 CreateValueAccessor: function(recurrenceControl) {
  return new DailyRecurrenceValuesAccessor(recurrenceControl);
 },
 Update: function(recurrenceInfo) {
  this.SpinDailyDaysCount.SetValue(recurrenceInfo.periodicity);
  if ((recurrenceInfo.weekDays & ASPxClientWeekDays.EveryDay) == ASPxClientWeekDays.EveryDay)
    this.RbDay.SetChecked(true);
  else if ((recurrenceInfo.weekDays & ASPxClientWeekDays.WorkDays) == ASPxClientWeekDays.WorkDays)
   this.RbEveryWeekDay.SetChecked(true);
 },
 GetValue: function() {
  value = {};
  value["Periodicity"] = this.valueAccessor.GetPeriodicity();
  value["WeekDays"] = this.valueAccessor.GetWeekDays();
  return value;
 }
});
ASPxClientWeeklyRecurrenceControl = _aspxCreateClass(ASPxClientRecurrenceControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 Initialize: function(){
  this.constructor.prototype.Initialize.call(this);
 },
 CreateValueAccessor: function(recurrenceControl) {
  return new WeeklyRecurrenceValuesAccessor(recurrenceControl);
 },
 Update: function(recurrenceInfo) {
  this.SpinWeeklyWeeksCount.SetValue(recurrenceInfo.periodicity);
  this.WeekDaysCheckEdit.SetValue(recurrenceInfo.weekDays);
 },
 GetValue: function() {
  value = {};
  value["Periodicity"] = this.valueAccessor.GetPeriodicity();
  value["WeekDays"] = this.valueAccessor.GetWeekDays();
  return value;
 }
});
ASPxClientMonthlyRecurrenceControl = _aspxCreateClass(ASPxClientRecurrenceControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 Initialize: function(){
  this.constructor.prototype.Initialize.call(this);
 },
 CreateValueAccessor: function(recurrenceControl) {
  return new MonthlyRecurrenceValuesAccessor(recurrenceControl);
 },
 Update: function(recurrenceInfo) {
  this.spinMonthlyDayMonthCount.SetValue(recurrenceInfo.periodicity);
  this.spinMonthlyWeekDaysMonthCount.SetValue(recurrenceInfo.periodicity);
  this.wdeMonthlyWeekDays.SetValue(recurrenceInfo.weekDays);
  this.rbDay.SetChecked(false);
  this.rbWeekDays.SetChecked(false);
  var start = (recurrenceInfo.interval) ? recurrenceInfo.interval.start : new Date();
  if (recurrenceInfo.weekOfMonth == ASPxClientWeekOfMonth.None) {
   this.rbDay.SetChecked(true);
   var weekOfMonth =  RecurrenceFormHelper.CalcWeekOfMonth(start, recurrenceInfo.dayOfWeek);
   this.wmeMonthlyWeekOfMonth.SetValue(weekOfMonth);
   this.spinMonthlyDay.SetValue(recurrenceInfo.DayNumber);
  }
  else {
   this.rbWeekDays.SetChecked(true);
   this.wmeMonthlyWeekOfMonth.SetValue(recurrenceInfo.weekOfMonth);
   this.spinMonthlyDay.SetValue(start.getDate());
  }
 },
 GetValue: function() {
  var value = {};
  value["DayNumber"] = this.valueAccessor.GetDayNumber();
  value["Periodicity"] = this.valueAccessor.GetPeriodicity();
  value["WeekDays"] = this.valueAccessor.GetWeekDays();
  value["WeekOfMonth"] = this.valueAccessor.GetWeekOfMonth();
  return value;
 }
});
ASPxClientYearlyRecurrenceControl = _aspxCreateClass(ASPxClientRecurrenceControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 Initialize: function(){
  this.constructor.prototype.Initialize.call(this);
 },
 CreateValueAccessor: function(recurrenceControl) {
  return new YearlyRecurrenceValuesAccessor(recurrenceControl);
 },
 Update: function(recurrenceInfo) {
  this.meYearlyDayMonth.SetValue(recurrenceInfo.month);
  this.meYearlyWeekDaysMonth.SetValue(recurrenceInfo.month);
  this.wdeYearlyWeekDays.SetValue(recurrenceInfo.weekDays);
  this.spinYearlyDayNumber.SetValue(recurrenceInfo.dayNumber);
  this.rbDay.SetChecked(false);
  this.rbWeekOfMonth.SetChecked(false);
  var start = (recurrenceInfo.interval) ? recurrenceInfo.interval.start : new Date();
  if (recurrenceInfo.weekOfMonth == ASPxClientWeekOfMonth.None) {
   this.rbDay.SetChecked(true);
   var weekOfMonth =  RecurrenceFormHelper.CalcWeekOfMonth(start, recurrenceInfo.dayOfWeek);
   this.wmeYearlyWeekOfMonth.SetValue(weekOfMonth);
  } 
  else {
   this.rbWeekOfMonth.SetChecked(true);
   this.wmeYearlyWeekOfMonth.SetValue(recurrenceInfo.weekOfMonth);
  }
 },
 GetValue: function() {
  var value = {};
  value["DayNumber"] = this.valueAccessor.GetDayNumber();
  value["Month"] = this.valueAccessor.GetMonth();
  value["WeekDays"] = this.valueAccessor.GetWeekDays();
  value["WeekOfMonth"] = this.valueAccessor.GetWeekOfMonth();
  return value;
 }
});
RecurrenceFormHelper = _aspxCreateClass(null, {});
RecurrenceFormHelper.CalcWeekOfMonth = function(start, dayOfWeek) {
 var count = 0;
 var date = new Date(start.getFullYear(), start.getMonth(), 1);
 count = 0;
 while(date < start) {
   if(dayOfWeek == date.getDay())
  count++;
   date.setDate(1 + date.getDate());
 }
 if (count <=1) 
  return ASPxClientWeekOfMonth.First;
 else if (count == 2)
  return ASPxClientWeekOfMonth.Second;
 else if (count == 3)
  return ASPxClientWeekOfMonth.Third;
 else if (count == 4)
  return ASPxClientWeekOfMonth.Fourth;
 else if (count >= 5)
  return ASPxClientWeekOfMonth.Last;
}
DefaultRecurrenceRuleValuesAccessor = _aspxCreateClass(null, {
 constructor: function(recurrenceControl) {
  this.recurrenceControl = recurrenceControl;
 },
 GetPeriodicity: function() {
  return ASPxClientRecurrenceInfo.DefaultPeriodicity;
 }, 
 GetDayNumber: function() {
  return 1;
 },
 GetMonth: function() {
  return 1;
 },
 GetWeekDays: function() {
  return ASPxClientRecurrenceInfo.DefaultWeekDays;
 },
 GetWeekOfMonth: function() {
  return ASPxClientRecurrenceInfo.DefaultWeekOfMonth;
 }
});
DailyRecurrenceValuesAccessor = _aspxCreateClass(DefaultRecurrenceRuleValuesAccessor, {
 constructor: function(recurrenceControl) {
  this.constructor.prototype.constructor.call(this, recurrenceControl);
 },
 GetPeriodicity: function() {
  return this.recurrenceControl.SpinDailyDaysCount.GetValue();
 },
 GetWeekDays: function() {
  return (this.recurrenceControl.RbDay.GetChecked()) ? ASPxClientWeekDays.EveryDay : ASPxClientWeekDays.WorkDays;
 }
});
WeeklyRecurrenceValuesAccessor = _aspxCreateClass(DefaultRecurrenceRuleValuesAccessor, {
 constructor: function(recurrenceControl) {
  this.constructor.prototype.constructor.call(this, recurrenceControl);
 },
 GetPeriodicity: function() {
  return this.recurrenceControl.SpinWeeklyWeeksCount.GetValue();
 },
 GetWeekDays: function() {
  return this.recurrenceControl.WeekDaysCheckEdit.GetValue();
 }
});
MonthlyRecurrenceValuesAccessor = _aspxCreateClass(DefaultRecurrenceRuleValuesAccessor, {
 constructor: function(recurrenceControl) {
  this.constructor.prototype.constructor.call(this, recurrenceControl);
 },
 GetDayNumber: function() {
  return this.recurrenceControl.spinMonthlyDay.GetValue();
 },
 GetPeriodicity: function() {
  result = (this.recurrenceControl.rbDay.GetChecked()) ? this.recurrenceControl.spinMonthlyDayMonthCount.GetValue() : this.recurrenceControl.spinMonthlyWeekDaysMonthCount.GetValue();
  return result;
 }, 
 GetWeekDays: function() {
  return this.recurrenceControl.wdeMonthlyWeekDays.GetValue();
 },
 GetWeekOfMonth: function() {
  return (this.recurrenceControl.rbDay.GetChecked()) ? ASPxClientWeekOfMonth.None : this.recurrenceControl.wmeMonthlyWeekOfMonth.GetValue();
 }
});
YearlyRecurrenceValuesAccessor = _aspxCreateClass(DefaultRecurrenceRuleValuesAccessor, {
 constructor: function(recurrenceControl) {
  this.constructor.prototype.constructor.call(this, recurrenceControl);
 },
 GetDayNumber: function() {
  return this.recurrenceControl.spinYearlyDayNumber.GetValue();
 },
 GetMonth: function() {
  return (this.recurrenceControl.rbDay.GetChecked()) ? this.recurrenceControl.meYearlyDayMonth.GetValue() : this.recurrenceControl.meYearlyWeekDaysMonth.GetValue();
 }, 
 GetWeekDays: function() {
  return this.recurrenceControl.wdeYearlyWeekDays.GetValue();
 },
 GetWeekOfMonth: function() {
  return (this.recurrenceControl.rbDay.GetChecked()) ? ASPxClientWeekOfMonth.None : this.recurrenceControl.wmeYearlyWeekOfMonth.GetValue();
 }
});
ASPxClientFormBase = _aspxCreateClass(null, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this);
  this.FormClosed = new ASPxClientEvent();
  this.name = name;
  this.uniqueID = name;
  aspxGetControlCollection().Add(this);
 },
 Close: function() {
  this.RaiseFormClosed();
 },
 RaiseFormClosed: function() {
  var args = new ASPxClientEventArgs();
  this.FormClosed.FireEvent(this, args);
 },
 SetVisibleCore: function(element, isVisible) {
  if (!element)
   return;
  if (isVisible) {
   _aspxSetElementDisplay(element, true);
   aspxGetControlCollection().AdjustControls(element);
  }
  else
   _aspxSetElementDisplay(element, false);
 }
});
ASPxClientAppointmentRecurrenceForm = _aspxCreateClass(ASPxClientRecurrenceControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientEdit = true;
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
 },
 GetValue: function() {
  var value = {};
  value["Reccurence"] = this.GetChildControlValueByName("ChkRecurrence");
  value["Type"] = this.GetChildControlValueByName("AptRecCtl_TypeEdt");
  value["Daily"] = this.GetChildControlValueByName("AptRecCtl_Daily");
  value["Weekly"] = this.GetChildControlValueByName("AptRecCtl_Weekly");
  value["Monthly"] = this.GetChildControlValueByName("AptRecCtl_Monthly");
  value["Yearly"] = this.GetChildControlValueByName("AptRecCtl_Yearly");
  value["Range"] = this.GetChildControlValueByName("AptRecCtl_RangeCtl");
  return value;
 },
 GetChildControlValueByName: function(childControlName) {
  var childControlClientId = this.name + "_" + childControlName;
  return aspxGetControlCollection().Get(childControlClientId).GetValue();
 }
});
ASPxClientRecurrenceTypeEdit = _aspxCreateClass(ASPxClientRadioButtonList, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 InlineInitialize: function() {
  ASPxClientRadioButtonList.prototype.InlineInitialize.call(this);
  this.recurrenceType = this.GetRecurrenceType();
 },
 RaiseSelectedIndexChanged: function(processOnServer) {
  this.recurrenceType = this.GetRecurrenceType();
  ASPxClientRadioButtonList.prototype.RaiseSelectedIndexChanged.call(this, processOnServer); 
 },
 GetRecurrenceType: function() {
  var index = this.GetSelectedIndex();
  switch(index) {
   case 0:
    return ASPxClientRecurrenceType.Daily;
   case 1:
    return ASPxClientRecurrenceType.Weekly;
   case 2:
    return ASPxClientRecurrenceType.Monthly;
   case 3:
    return ASPxClientRecurrenceType.Yearly;
   case 4:
    return ASPxClientRecurrenceType.Minutely;
   case 5:
    return ASPxClientRecurrenceType.Hourly;
  }
  return null;
 },
 SetRecurrenceType: function(recurrenceType) {
  var selectedIndex = 0;
  switch(recurrenceType) {
   case ASPxClientRecurrenceType.Daily:
    selectedIndex = 0;
    break;
   case ASPxClientRecurrenceType.Weekly:
    selectedIndex = 1;
    break;
   case ASPxClientRecurrenceType.Monthly:
    selectedIndex = 2;
    break;
   case ASPxClientRecurrenceType.Yearly:
    selectedIndex = 3;
    break;
   case ASPxClientRecurrenceType.Minutely:
    selectedIndex = 4;
    break;
   case ASPxClientRecurrenceType.Hourly:
    selectedIndex = 5;
    break;
  }
  this.SetSelectedIndex(selectedIndex);
 }
});
function aspxTimeZoneEditComboSelectedIndexChanged(name, tzId) {
 var timeZoneEdit = aspxGetControlCollection().Get(name);
 if (_aspxIsExists(timeZoneEdit))
  timeZoneEdit.ChangeTimeZoneId(tzId);
}
ASPxClientTimeZoneEdit = _aspxCreateClass(ASPxClientSchedulerRelatedControlBase, {
 ChangeTimeZoneId: function(tzId) {
  var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
  if (_aspxIsExists(schedulerControl)) {
   schedulerControl.ChangeTimeZoneId(tzId);
  }
 }
});

function aspxVisibleMonthChanged(dateNavigatorId, offset) {
 var dateNavigator = aspxGetControlCollection().Get(dateNavigatorId);
 if (_aspxIsExists(dateNavigator))
  dateNavigator.OnVisibleMonthChanged(offset);
}
function aspxDateNavigatorSelectionChanged(dateNavigatorId) {
 var dateNavigator = aspxGetControlCollection().Get(dateNavigatorId);
 if (_aspxIsExists(dateNavigator))
  dateNavigator.OnSelectionChanged();
}
ASPxClientDateNavigator = _aspxCreateClass(ASPxClientSchedulerRelatedControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);  
  this.calendarId = "";
 },
 OnVisibleMonthChanged: function(offset) {
  var calendar = aspxGetControlCollection().Get(this.calendarId);
  if (_aspxIsExists(calendar)) {
   var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
   if (_aspxIsExists(schedulerControl))
    schedulerControl.ShiftVisibleIntervals(offset);
  }
 },
 OnSelectionChanged: function() {
  var calendar = aspxGetControlCollection().Get(this.calendarId);
  if (_aspxIsExists(calendar)) {
   var schedulerControl = aspxGetControlCollection().Get(this.schedulerControlId);
   if (_aspxIsExists(schedulerControl))
    var formattedDates = calendar.FormatDates(calendar.selection.GetDates(), ",");
    schedulerControl.SetVisibleDays(formattedDates);
  }
 }
});

ASPxClientTreeList = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.elementCache = { };  
  this.rowIdPrefix = this.name + "_" + this.RowIDSuffix;
  this.focusedKey = null;
  this.dragHelper = new ASPxClientTreeListDragHelper(this);
  this.selectionDiff = { };
  this.syncLock = false;
  this.callbackHandlersPool = [ ];
  this.kbdHelper = null;
  this.selectionStartKey = null;
  this.internalCheckBoxCollection = null;
  this.supportGestures = true;
  this.sizingConfig.adjustControl = true;
  this.indentCount = -1;
  this.enableFocusedNode = false;
  this.focusSendsCallback = false;
  this.selectionSendsCallback = false;
  this.recursiveSelection = false;
  this.columns = [ ];
  this.expandCollapseAction = this.ExpandCollapseAction.Button;
  this.focusOnExpandCollapse = true;
  this.confirmDeleteMsg = null;
  this.allowStylizeEditingNode = false;
  this.enableKeyboard = false;
  this.accessKey = null;
  this.checkBoxImageProperties = null;
  this.icbFocusedStyle = [];
  this.showRoot = false;
  this.columnResizeMode = ASPxColumnResizeMode.None;
  this.horzScroll = ASPxScrollBarMode.Hidden;
  this.vertScroll = ASPxScrollBarMode.Hidden;
  this.maxVisibleLevel = -1;
  this.visibleColumnCount = 0;
  this.rowCount = 0;
  this.editingKey = null;
  this.isNewNodeEditing = false;
  this.pageIndex = -1;
  this.pageSize = -1;
  this.pageCount = 1;
  this.FocusedNodeChanged = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.CustomizationWindowCloseUp = new ASPxClientEvent();
  this.CustomDataCallback = new ASPxClientEvent();  
  this.NodeClick = new ASPxClientEvent();
  this.NodeDblClick = new ASPxClientEvent();
  this.ContextMenu = new ASPxClientEvent();
  this.StartDragNode = new ASPxClientEvent();
  this.EndDragNode = new ASPxClientEvent();  
  this.CustomButtonClick = new ASPxClientEvent();
  this.NodeFocusing = new ASPxClientEvent();
  this.NodeExpanding = new ASPxClientEvent();
  this.NodeCollapsing = new ASPxClientEvent();
  this.ColumnResizing = new ASPxClientEvent();
  this.ColumnResized = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.RefreshArmatureRow();
  if(this.enableKeyboard) {
   this.kbdHelper = new ASPxTreeListKbdHelper(this);
   this.kbdHelper.Init();
   ASPxKbdHelper.RegisterAccessKey(this);
  }
  if(this.checkBoxImageProperties) 
   this.CreateInternalCheckBoxCollection();
  this.SetHeadersClientEvents();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.ResetStretchedColumnWidth();
 },
 CreateInternalCheckBoxCollection: function() {
  if(!this.internalCheckBoxCollection)
   this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.checkBoxImageProperties, true);
  else
   this.internalCheckBoxCollection.SetImageProperties(this.checkBoxImageProperties);
  this.CompleteInternalCheckBoxCollection();
 },
 CompleteInternalCheckBoxCollection: function() {
  var container = this.GetUpdatableCell();
  var selectAllCheck = this.FindSelectAllCheckBox();
  var icbInputElements = this.FindSelectionCheckBoxes(container);
  this.internalCheckBoxCollection.Clear();
  for(var i = 0; i < icbInputElements.length; i++)
   this.AddInternalCheckBoxToCollection(icbInputElements[i]);
  if(selectAllCheck)
   this.AddSelectAllCheckBoxToCollection(selectAllCheck);
 },
 AddInternalCheckBoxToCollection: function(icbInputElement) {
  var instance = this;
  var row = this.FindDataRow(icbInputElement);
  var internalCheckBox = this.internalCheckBoxCollection.Add(row.id, icbInputElement);
  internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  internalCheckBox.SetEnabled(this.GetEnabled());
  internalCheckBox.readOnly = this.readOnly;
  internalCheckBox.CheckedChanged.AddHandler(
   function(s, e) {
    if(instance.IsNodeDragDropEnabled()) 
     instance.OnNodeSelecting(_aspxGetEventSource(e));
    else
     instance.OnRowCheckBoxClick(e);
   }
  );
 },
 AddSelectAllCheckBoxToCollection: function(selectAllCheckInput) {
  var instance = this;
  var selectAllInternalCheckBox = this.internalCheckBoxCollection.Add(selectAllCheckInput.id, selectAllCheckInput);
  selectAllInternalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  selectAllInternalCheckBox.SetEnabled(this.GetEnabled());
  selectAllInternalCheckBox.readOnly = this.readOnly;
  selectAllInternalCheckBox.CheckedChanged.AddHandler(
   function(s, e) {
    instance.OnSelectingAll(s.GetChecked());
   }
  );
 },
 IsNodeDragDropEnabled: function() {
  return !!this.GetDataTable().onmousedown;
 },
 OnNodeSelecting: function(check) { 
  this.OnNodeSelectingCore(check);  
  if(this.RaiseSelectionChanged())
   this.SendDummyCommand();  
 },
 OnNodeSelectingCore: function(check) {
  var row = this.FindDataRow(check);  
  if(!_aspxIsExistsElement(row)) return;
  var nodeKey = this.GetNodeKeyByRow(row);   
  if(this.selectionDiff[nodeKey])
   delete this.selectionDiff[nodeKey];
  else
   this.selectionDiff[nodeKey] = 1;   
  this.PersistSelectionDiff();    
  this.UpdateRowStyle(nodeKey);  
 },
 OnSelectingAll: function(state) {
  var input = this.GetSelectAllMarkInput();
  if(!_aspxIsExistsElement(input))
   return;
  input.value = state ? "A" : "N";  
  this.SendDummyCommand();
  this.RaiseSelectionChanged();
 },
 OnFocusingNode: function(key, htmlEvent) {  
  var prevKey = this.GetFocusedNodeKey();
  if(prevKey != key && this.RaiseNodeFocusing(key, htmlEvent)) {
   this.SetFocusedNodeKey(key);
   return this.RaiseFocusedNodeChanged();
  }
  return false;
 },
 OnDataTableMouseDown: function(e) { 
  if(this.syncLock) return;
  if(!_aspxGetIsLeftButtonPressed(e)) return;
  e = _aspxGetEvent(e);
  var src = _aspxGetEventSource(e);
  var row = this.FindDataRow(src);
  if(!_aspxIsExistsElement(row))
   return;
  var helper = this.dragHelper;  
  var canDrag = !this.IsEditing();  
  if(canDrag) {
   var nodeKey = this.GetNodeKeyByRow(row);
   var targets = this.GetAllDataRows();
   var header = this.GetHeaderRow();
   if(_aspxIsExistsElement(header))
    targets.unshift(header);
   canDrag = this.RaiseStartDragNode(nodeKey, e, targets);
   if(canDrag)
    helper.CreateNodeTargets(targets, row);
  }
  if(canDrag && this.HasHorzScroll()) {
   var extraCell = row.cells[row.cells.length - 1];
   if(extraCell === src || _aspxGetIsParent(extraCell, src))
    return;
  }
  var drag = helper.CreateNodeDrag(row, e, canDrag);
 },
 OnDataTableClick: function(e) {
  if(this.syncLock) return;
  e = _aspxGetEvent(e);
  var source = _aspxGetEventSource(e);
  var sourceIsIndent = this.FindIndentCell(source) != null;
  var sourceIsCommandCell = this.FindCommandCell(source) != null;
  var row = this.FindDataRow(source);
  if(!_aspxIsExistsElement(row))
   return;
  var nodeKey = this.GetNodeKeyByRow(row);
  if(!sourceIsIndent && !sourceIsCommandCell) {
   if(!this.RaiseNodeClick(nodeKey, e))  
    return;
  }
  var tag = source.tagName;
  var className = source.className;
  this.selectionStartKey = nodeKey;
  if(tag == "IMG") {
   if(className.indexOf(this.ExpandButtonClassName) > -1) {
    if(this.enableFocusedNode && this.focusOnExpandCollapse)
     this.OnFocusingNode(nodeKey, e);
    if(this.RaiseNodeExpanding(nodeKey, e))
     this.ExpandNode(nodeKey);    
    return;
   }
   if(className.indexOf(this.CollapseButtonClassName) > -1) {
    if(this.enableFocusedNode && this.focusOnExpandCollapse)
     this.OnFocusingNode(nodeKey, e);
    if(this.RaiseNodeCollapsing(nodeKey, e))
     this.CollapseNode(nodeKey);
    return;   
   }
  }
  if(!sourceIsIndent) {     
   var processOnServer = this.enableFocusedNode ? this.OnFocusingNode(nodeKey, e) : false;
   if(!sourceIsCommandCell 
    && this.expandCollapseAction == this.ExpandCollapseAction.NodeClick 
    && this.TryExpandCollapse(nodeKey, row))
    return;    
   if(processOnServer)
    this.SendDummyCommand();
  }
 },
 OnRowCheckBoxClick: function(e) {
  if(!this.IsNodeDragDropEnabled()) {
   var source = _aspxGetEventSource(e);
   var row = this.FindDataRow(source);
   if(!_aspxIsExistsElement(row))
    return;
   var nodeKey = this.GetNodeKeyByRow(row);
   if(this.enableFocusedNode)
    this.OnFocusingNode(nodeKey, e);
   this.OnNodeSelecting(source);
  }
 },
 OnDataTableDblClick: function(e) {
  if(this.syncLock) return;
  e = _aspxGetEvent(e);  
  var source = _aspxGetEventSource(e);
  if(this.FindIndentCell(source) != null)
   return;  
  var row = this.FindDataRow(source);
  if(!_aspxIsExistsElement(row))
   return;
  var nodeKey = this.GetNodeKeyByRow(row);
  if(!this.IsEditing())
   _aspxClearSelection();    
  if(!this.RaiseNodeDblClick(nodeKey, e))
   return;
  if(this.expandCollapseAction == this.ExpandCollapseAction.NodeDblClick)
   this.TryExpandCollapse(nodeKey, row);
 },
 TryExpandCollapse: function(nodeKey, row) {
  if(nodeKey && nodeKey == this.editingKey)
   return;
  var state = this.GetNodeState(nodeKey, row);
  if(state == "Expanded") {
   this.CollapseNode(nodeKey);
   return true;
  } else if(state == "Collapsed") {
   this.ExpandNode(nodeKey);
   return true;
  }
  return false;
 },  
 OnHeaderMouseDown: function(element, e) { 
  if(this.syncLock) return;
  if(!_aspxGetIsLeftButtonPressed(e)) return;
  if(this.TryStartColumnResizing(e, element))
   return;
  var canDrag = element.id.indexOf(this.DragAndDropTargetMark) > -1;
  var drag = this.dragHelper.CreateHeaderDrag(element, e, canDrag);
  this.dragHelper.CreateHeaderTargets(drag, e);
 },
 OnHeaderClick: function(element, shiftKey, ctrlKey) {
  if(this.syncLock) return;
  var index = this.GetLastNumberOfId(element);
  var column = this.GetColumnByIndex(index);
  if(column != null && column.canSort)
   this.SendSortCommand(index, ctrlKey ? "none" : "", !shiftKey && !ctrlKey);
 },
 OnColumnMoving: function(sourceIndex, targetIndex, before) {    
  this.SendCommand("MoveColumn", [sourceIndex, targetIndex, before]);
 },
 OnNodeDeleting: function(nodeKey) {
  if(this.confirmDeleteMsg != null && !confirm(this.confirmDeleteMsg))
   return;
  this.DeleteNode(nodeKey);
 },
 OnContextMenu: function(objectType, objectKey, htmlEvent) {
  var e = new ASPxClientTreeListContextMenuEventArgs(objectType, objectKey, htmlEvent);
  this.RaiseContextMenu(e);
  return e.cancel;
 }, 
 OnCallback: function(result) {
  this.ProcessCallbackResult(result);
  this.RefreshArmatureRow();
  this.SetHeadersClientEvents();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.ResetStretchedColumnWidth();
  this.UpdateScrollableControls();
  if(resizingHelper)
   resizingHelper.ValidateColumnWidths();
  var tableHelper = this.GetTableHelper();
  if(tableHelper)
   tableHelper.UpdateIndentCellWidths();
  if(this.kbdHelper)
   this.kbdHelper.EnsureFocusedNodeVisible();
 },
 OnCallbackError: function(result, data) {
  if(result != "") {
   this.ShowPopupEditForm();
   var cell = this.GetErrorCell();
   if(_aspxIsExistsElement(cell)) {
    _aspxSetElementDisplay(cell.parentNode, true);
    _aspxSetInnerHtml(cell, result);
   } 
   else 
    alert(result);
  }
 },
 DoEndCallback: function() {
  this.syncLock = false;
  ASPxClientControl.prototype.DoEndCallback.call(this);
 },
 SendCommand: function(command, args) {
  if(this.syncLock)
   return;   
  this.SerializeEditorValues();
  this.HidePopupEditForm();
  var id = this.CommandId[command];
  var monoArg = args ? ([id].concat(args)).join(this.SeparatorToken) : id;
  if(this.callBack && this.CanCreateCallback()) {
   this.ShowLoadingElements();  
   this.PurgeCaches();
   this.syncLock = true;
   this.CreateCallback(monoArg, command);
  } else 
   this.SendPostBack(monoArg);  
 },
 SendDummyCommand: function(sync) {
  this.SendCommand("Dummy");
  if(!sync)
   this.syncLock = false; 
 },
 SendSortCommand: function(columnIndex, order, reset) {
  this.SendCommand("Sort", [columnIndex, order, reset]);
 }, 
 SendPagerCommand: function(arg, fromKbd) {
  this.AssignSlideAnimationDirectionByPagerArgument(arg, this.pageIndex);
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.ResetScrollTop();
  var list = [ arg ];
  if(fromKbd) list.push("k");
  this.SendCommand("Pager", list);
 },
 CanHandleGesture: function(evt) {
  var source = _aspxGetEventSource(evt);
  var table = this.GetDataTable();
  if(_aspxGetIsParent(table, source))
   return !_aspxGetIsParent(this.GetHeaderRow(), source);
  if(table.parentNode.tagName == "DIV" && _aspxGetIsParent(table.parentNode, source))
   return __aspxTouchUI || evt.offsetX < table.parentNode.clientWidth;
  return false;
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && 
   (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
 },
 AllowExecuteGesture: function(value) {
  return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
 },
 ExecuteGesture: function(value, count) {
  this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function(arg) { this.SendPagerCommand(arg, false); }.aspxBind(this));
 },
 SendAsyncCommand: function(command, args) {
  if(!this.callBack) return;
  var monoArg = [this.CommandId[command], args].join(this.SeparatorToken);
  this.CreateCallback(monoArg, command);
 },
 SendGetNodeValuesCommand: function(handler, mode, nodeKey, fieldNames) {
  if(fieldNames === null) fieldNames = "";
  var index = this.GetCallbackHandlerIndex(handler);
  var monoArg = ([index, mode, this.EscapeNodeKey(nodeKey)].concat(fieldNames)).join(this.SeparatorToken);
  this.SendAsyncCommand("GetNodeValues", monoArg);  
 },
 HidePopupEditForm: function() {
  var popup = this.GetPopupEditForm();
  if(popup)
   popup.Hide();
 },
 ShowPopupEditForm: function() { 
  var popup = this.GetPopupEditForm();
  if(popup && !popup.IsVisible())
   popup.Show();
 },
 ShowLoadingPanel: function() {
  this.CreateLoadingPanelWithAbsolutePosition(this.GetUpdatableCell(), this.GetLoadingPanelOffsetElement(this.GetUpdatableCell()));
 },
 ShowLoadingDiv: function() {
  this.CreateLoadingDiv(this.GetUpdatableCell());
 },
 GetCallbackAnimationElement: function() {
  var table = this.GetDataTable();
  if(table.parentNode.tagName == "DIV")
   return table.parentNode;
  return table;
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return this.IsHeaderChild(element);
 },
 IsHeaderChild: function(source) {
  var headerRow = this.GetHeaderRow();
  if(headerRow && _aspxGetIsParent(headerRow, source))
   return true;
  return false;
 },
 ProcessCallbackResult: function(resultObj) {
  if(resultObj.customData) {   
   if(_aspxIsExists(resultObj.handler)) {
    var index = parseInt(resultObj.handler);
    var handler = this.callbackHandlersPool[index];
    this.callbackHandlersPool[index] = null;
    handler(resultObj.data);
   } else {
    this.RaiseCustomDataCallback(resultObj.arg, resultObj.data);
   }
   return;
  }      
  this.GetCallbackStateInput().value = resultObj.state;
  if(_aspxIsExists(resultObj.fkey))
   this.SetFocusedNodeKeyInternal(resultObj.fkey);
  var selectionInput = this.GetSelectionInput();
  if(_aspxIsExistsElement(selectionInput))
   selectionInput.value = "";
  var selectAllMarkInput = this.GetSelectAllMarkInput();
  if(_aspxIsExistsElement(selectAllMarkInput))
   selectAllMarkInput.value = "";
  if(_aspxIsExists(resultObj.pi))
   this.pageIndex = resultObj.pi;
  if(_aspxIsExists(resultObj.ps))
   this.pageSize = resultObj.ps;
  if(_aspxIsExists(resultObj.pc))
   this.pageCount = resultObj.pc;
  if(resultObj.cp) {   
   for(var name in resultObj.cp)
    this[name] = resultObj.cp[name];
  }
  if(_aspxIsExists(resultObj.partial))
   this.ProcessPartialCallbackResult(resultObj);
  else
   this.ProcessFullCallbackResult(resultObj);
  if(this.checkBoxImageProperties)
   this.CreateInternalCheckBoxCollection();
  this.maxVisibleLevel = resultObj.level;
  this.visibleColumnCount = resultObj.visColCount;
  this.rowCount = resultObj.rows;
  this.editingKey = _aspxIsExists(resultObj.editingKey) ? resultObj.editingKey : null;
  this.isNewNodeEditing = _aspxIsExists(resultObj.newNode);
 }, 
 ProcessPartialCallbackResult: function(resultObj) {
  this.UpdateFirstDataCellSpans(resultObj.level);
  var row = this.GetRowByNodeKey(resultObj.partial);
  if(!_aspxIsExistsElement(row))
   return;
  if(resultObj.remove)
   this.KillNextRows(row, resultObj.remove);
  var uid = "";
  var cell = this.GetUpdatableCell();
  var html = cell.innerHTML;
  do {
   uid = this.GenerateUID();
  } while(html.indexOf(uid) > -1);
  var placeholder = document.createTextNode(uid);  
  row.parentNode.insertBefore(placeholder, row);
  this.DestroyHtmlRow(row);  
  this.HideLoadingElements();
  var data = resultObj.data;
  data = data.replace('$\'', '$$$$\''); 
  html = cell.innerHTML.replace(/<script(.|\s)*?\/script>/ig, "");  
  html = html.replace(uid, data);
  _aspxSetInnerHtml(cell, html);
 },
 ProcessFullCallbackResult: function(resultObj) {
  _aspxSetInnerHtml(this.GetUpdatableCell(), resultObj.data);
 },
 GetCallbackStateInput:   function() { return this.GetCachedElementById("STATE"); },
 GetFocusedKeyInput:    function() { return this.GetCachedElementById("FKey"); },
 GetSelectionInput:    function() { return this.GetCachedElementById("Sel"); },
 GetSelectAllMarkInput:   function() { return this.GetCachedElementById("SAM"); },
 GetEditorValuesInput:   function() { return this.GetCachedElementById("EV"); },
 GetScrollStateInput:   function() { return this.GetCachedElementById("SSKey"); },
 GetResizingStateInput:    function() { return this.GetCachedElementById("RSI"); },
 GetDataTable:     function() { return this.GetCachedElementById("D"); },
 GetHeaderTable:     function() { return this.GetCachedElementById("H"); },
 GetFooterTable:     function() { return this.GetCachedElementById("F"); },
 GetUpdatableCell:    function() { return this.GetCachedElementById("U"); },   
 GetStyleTable:     function() { return this.GetCachedElementById("ST"); },
 GetDragAndDropArrowDownImage: function() { return this.GetCachedElementById("DAD"); },
 GetDragAndDropArrowUpImage:  function() { return this.GetCachedElementById("DAU"); },
 GetDragAndDropHideImage:  function() { return this.GetCachedElementById("DH"); },
 GetDragAndDropNodeImage:  function() { return this.GetCachedElementById("DN"); },
 GetErrorCell:       function() { return this.GetCachedElementById(this.GetPopupEditForm() ? this.PopupEditFormSuffix + "_Error" : "Error"); },
 GetHeaderRow:     function() { return this.GetCachedElementById("HDR"); },
 GetHeaderCell: function(columnIndex) {
  var id = this.name + this.GetHeaderSuffix(true) + columnIndex;
  var header = _aspxGetElementById(id);
  if(header) return header;
  id = this.name + this.GetHeaderSuffix(false) + columnIndex;
  return _aspxGetElementById(id);
 },
 GetCustomizationWindow: function() { 
  return aspxGetControlCollection().Get(this.name + this.GetCustomizationWindowSuffix()); 
 },
 GetCustomizationWindowElement: function() {
  var win = this.GetCustomizationWindow();
  return win ? win.GetWindowElement(-1) : null;  
 },
 GetPopupEditForm: function() { 
  return aspxGetControlCollection().Get(this.name + "_" + this.PopupEditFormSuffix); 
 },
 GetHeaderSuffix: function(allowDragDrop) {
  var suffix = "H-";
  if(allowDragDrop)
   suffix = this.DragAndDropTargetMark + suffix;
  else
   suffix = "_" + suffix;
  return suffix;
 },
 GetCustomizationWindowSuffix: function() { return this.DragAndDropTargetMark + "CW"; },
 GetEmptyHeaderSuffix: function() { return this.DragAndDropTargetMark + "EH"; }, 
 CreateColumn: function(index, name, fieldName, canSort, showInCw, minWidth) {
  var column = new ASPxClientTreeListColumn(index, name, fieldName);
  column.canSort = canSort;
  column.showInCw = showInCw;
  column.minWidth = minWidth;
  this.columns.push(column);
 },
 FindColumn: function(id) {
  if(!_aspxIsExists(id)) return null;
  if(id.__dxColumnObject)
   return id;
  if(typeof id == "number")
   return this.GetColumnByIndex(id);
  var result = this.GetColumnByName(id);
  if(result == null)
   result = this.GetColumnByFieldName(id);
  return result;
 },
 UpdateRowStyle: function(nodeKey) {
  if(!this.allowStylizeEditingNode && nodeKey == this.editingKey)
   return;
  var row = this.GetRowByNodeKey(nodeKey);
  if(!_aspxIsExistsElement(row))
   return;
  var isFocused = this.focusedKey == nodeKey;
  var isSelected = this.IsRowSelected(row);
  if(isFocused) {
   this.ApplyRowStyle(row, 0);
  } else if(isSelected) {
   this.ApplyRowStyle(row, 1);
  } else {  
   var index = row.rowIndex;
   this.ApplyRowStyle(row, 2 + index);
  }
 },
 ApplyRowStyle: function(row, index) {
  var styledCells = this.GetStyleTable().rows[0].cells;
  var max = styledCells.length - 1;
  if(index > max)
   index = max; 
  row.className = styledCells[index].className;
  row.style.cssText = styledCells[index].innerHTML;
 },
 GetNodeKeyByRow: function(row) {
  return this.UnescapeNodeKey(row.id.substr(this.rowIdPrefix.length));
 },
 GetRowByNodeKey: function(nodeKey) {   
  var id = this.RowIDSuffix + this.EscapeNodeKey(nodeKey);  
  return this.GetCachedElementById(id);  
 },
 EscapeNodeKey: function(value) {
  return String(value).replace(/[^A-Za-z0-9]/g, function(match) { 
   return "_" + match.charCodeAt(0) + "_";
  });
 },
 UnescapeNodeKey: function(value) {
  return value.replace(/_\d+_/g, function(match) { 
   return String.fromCharCode(match.substr(1, match.length - 2));
  });
 },
 GetAllDataRows: function() {
  var result = [ ];
  var rows = this.GetDataTable().rows;
  for(var i = 0; i < rows.length; i++) {
   var row = rows[i];   
   if(!this.IsElementDataRow(row)) continue;
   result.push(row);
  }
  return result;
 },  
 IsElementEmptyHeader: function(element) {
  return element.id == this.name + this.GetEmptyHeaderSuffix();
 },
 IsElementDataRow: function(element) {
  return element.tagName == "TR" && element.id.indexOf(this.rowIdPrefix) == 0;
 }, 
 IsElementIndentCell: function(element) {
  return _aspxElementCssClassContains(element, "dxtl__I");
 }, 
 IsElementCommandCell: function(element) {
  return _aspxElementCssClassContains(element, "dxtl__cc");
 }, 
 FindDataRow:  function(element) { return this.FindElementUpwardsCore(element, this.IsElementDataRow); },
 FindIndentCell:  function(element) { return this.FindElementUpwardsCore(element, this.IsElementIndentCell); },
 FindCommandCell: function(element) { return this.FindElementUpwardsCore(element, this.IsElementCommandCell); },
 FindElementUpwardsCore: function(startElement, matchEvaluator) {
  var dataTable = this.GetDataTable();
  var element = startElement;
  while(_aspxIsExistsElement(element) && element != dataTable) {
   if(matchEvaluator.call(this, element))
    return element;
   element = element.parentNode;
  }
  return null;  
 },
 IsRowSelected: function(row) {
  var check = this.FindSelectionCheck(row);
  if(!_aspxIsExistsElement(check))
   return null;
  var internalCheckBox = this.internalCheckBoxCollection.Get(row.id);
  return internalCheckBox.GetChecked();
 },
 FindSelectionCheck: function(row) {
  return this.FindSelectionCheckBoxes(row)[0];
 },
 FindSelectionCheckBoxes: function(container) {
  var elements = container.getElementsByTagName("INPUT");
  var result = [];
  for(var i = 0; i < elements.length; i++) {
   if(_aspxGetParentByPartialClassName(elements[i], this.SelectionCellClassName))
    result.push(elements[i]);
  }
  return result;
 },
 FindSelectAllCheckBox: function() {
  return this.GetChild(this.SelectAllCheckID);
 },
 PersistSelectionDiff: function() {
  var input = this.GetSelectionInput();
  if(!_aspxIsExistsElement(input))
   return;
  var list = [ ];
  for(var key in this.selectionDiff)
   list.push(this.EscapeNodeKey(key));
  input.value = list.join(this.SeparatorToken);
 },
 UpdateFirstDataCellSpans: function(newMaxVisibleLevel) {
  var spanDiff = newMaxVisibleLevel - this.maxVisibleLevel;
  if(spanDiff == 0) 
   return;
  var tables = [ this.GetHeaderTable(), this.GetDataTable(), this.GetFooterTable() ];
  var hasArmRow = this.HasScrolling() || this.AllowResizing();
  for(var i = 0; i < tables.length; i++) {
   var table = tables[i];
   if(!table) continue;
   this.UpdateFirstDataCellSpansCore(table, spanDiff, hasArmRow);
  }
  if(hasArmRow)
   this.GetTableHelper().UpdateArmCells(spanDiff);
 },
 UpdateFirstDataCellSpansCore: function(table, spanDiff, hasArmRow) {
  var extraCellCount = (this.HasHorzScroll() ? 1 : 0);
  var rows = table.rows;
  for(var i = hasArmRow ? 1 : 0; i < rows.length; i++) {
   var row = rows[i];
   if(row.id == this.name + this.HiddenEmptyRowID)
    continue;
   var tempCell;
   var firstDataCell;
   var tempCell = row.cells[row.cells.length - 1 - extraCellCount];
   if(tempCell.colSpan > 1)
    firstDataCell = tempCell; 
   else 
    firstDataCell = row.cells[row.cells.length - this.GetColumnCellCount() - extraCellCount];
   var newSpan = firstDataCell.colSpan + spanDiff;
   if(newSpan > 0)
    firstDataCell.colSpan = newSpan;
  }
 },
 KillNextRows: function(row, count) {  
  while(count-- > 0) {
   var rowToKill = row.nextSibling;
   if(!_aspxIsExistsElement(rowToKill))
    break;   
   if(rowToKill.nodeType != 1) { 
    count++;
    _aspxRemoveElement(rowToKill);
   } else {
    this.DestroyHtmlRow(rowToKill);
   }   
  }
 },
 DestroyHtmlRow: function(row) {
  for(var i = row.cells.length - 1; i >= 0; i--)
   row.cells[i].innerHTML = "";
  _aspxRemoveElement(row);  
 },
 SetFocusedNodeKeyInternal: function(key) {
  this.focusedKey = key;
  this.GetFocusedKeyInput().value = key;
 }, 
 GetLastNumberOfId: function(element) {
  return this.GetLastNumberOfString(element.id);
 },
 GetLastNumberOfString: function(id) {
  var matches = id.match(/\d+/g);
  if(matches != null) {
   var count = matches.length;
   if(count > 0)
    return parseInt(matches[count - 1], 10);
  }
  return -1;
 },
 GetCachedElementById: function(id) {
  id = this.name + "_" + id;
  if(!_aspxIsExistsElement(this.elementCache[id]))
   this.elementCache[id] = _aspxGetElementById(id);
  return this.elementCache[id];
 },
 GenerateUID: function() {
  var result = "";
  for(var i = 0; i < 16; i++) {
   var num = Math.floor(10000 * (1 + Math.random()));
   result += num.toString(36);
  }
  return result;
 },
 PurgeCaches: function() {  
  this.elementCache = { };  
  this.focusedKey = null;
  this.selectionDiff = { };
  this.visibleColumnIndices = null;
  this.indentCount = -1;
 },
 GetColumnCellCount: function() {
  var count = this.visibleColumnCount;
  if(count < 1) count = 1; 
  return count;
 },
 GetCallbackHandlerIndex: function(handler) {
  for(var i = 0; i < this.callbackHandlersPool.length; i++) {
   if(this.callbackHandlersPool[i] == null) {
    this.callbackHandlersPool[i] = handler;
    return i;
   }
  }
  this.callbackHandlersPool.push(handler);
  return this.callbackHandlersPool.length - 1;
 },
 RefreshArmatureRow: function() {
  if(this.HasScrolling() || __aspxIE && __aspxBrowserVersion < 8)
   return;
  var id = this.name + "_ArmRow";
  var row = _aspxGetElementById(id);
  if(row) 
   _aspxRemoveElement(row);
  row = this.CreateArmatureRow();
  row.id = id;
  var dataTable = this.GetDataTable();
  if(dataTable.tBodies.length > 0)
   dataTable.tBodies[0].appendChild(row);
 },
 CreateArmatureRow: function() { 
  var row = document.createElement("TR");  
  var colSpan = this.maxVisibleLevel - 1;
  if(this.showRoot)
   colSpan++;
  if(this.FindSelectionCheck(this.GetDataTable()))
   colSpan++;
  if(colSpan > 0) {
   var indentSpaning = document.createElement("TD");
   row.appendChild(indentSpaning);
  indentSpaning.colSpan = colSpan;
  indentSpaning.style.padding = "0 1px";
  }
  var strut;
  for(var i = 1; i < this.GetColumnCellCount() + 1; i++) {
   var cell = document.createElement("TD");
   row.appendChild(cell);
   cell.style.padding = "0 1px";
   cell.style.whiteSpace = "normal";
   if(!strut)
    strut = this.CreateArmatureRowStrut();
   cell.innerHTML = strut;
  }
  return row;
 },
 CreateArmatureRowStrut: function() {
  var sb = [ "<div style=\"overflow: hidden; height: 0;\">" ];
  var count = 1000 / (this.GetColumnCellCount() + 1);
  for(var i = 0; i < count; i++)
   sb.push("&nbsp; ");
  sb.push("</div>");
  return sb.join("");
 },
 GetEditorObjects: function() {
  var list = [ ];
  var clientObjects = aspxGetControlCollection().elements;  
  for(var name in clientObjects) {
   if(name.indexOf(this.name) != 0)
    continue;
   var pos = name.indexOf(this.EditorSuffix);
   if(pos < 0 || name.indexOf("_", pos) > -1)
    continue;
   var obj = clientObjects[name];
   if(!obj.GetMainElement || !_aspxIsExistsElement(obj.GetMainElement()))
    continue;   
   list.push(obj);
  }
  return list;
 },
 SerializeEditorValues: function() {
  var editors = this.GetEditorObjects();
  var count = editors.length;
  var result = [ count ];      
  for(var i = 0; i < count; i++) {
   var columnIndex = this.GetEditorColumnIndex(editors[i]);
   var value = editors[i].GetValueString();
   var length = -1;
   if(!_aspxIsExists(value)) {
    value = "";
   } else {
    value = value.toString();
    length = value.length;
   }
   result.push(columnIndex);
   result.push(length);
   result.push(value);
  }
  this.GetEditorValuesInput().value = result.join(this.SeparatorToken);  
 },
 GetEditorColumnIndex: function(editorObject) {
  var name = editorObject.name;
  return name.substr(name.lastIndexOf(this.EditorSuffix) + this.EditorSuffix.length);
 },
 HasHorzScroll: function() { return this.horzScroll != ASPxScrollBarMode.Hidden; },
 HasVertScroll: function() { return this.vertScroll != ASPxScrollBarMode.Hidden; },
 HasScrolling: function() { return this.HasHorzScroll() || this.HasVertScroll(); },
 GetTableHelper: function() {
  if(!this.tableHelper && typeof(ASPxClientTreeListTableHelper) != "undefined")
   this.tableHelper = new ASPxClientTreeListTableHelper(this, "D", "H", "F", this.horzScroll, this.vertScroll);
  return this.tableHelper;
 },
 GetScrollHelper: function() {
  if(!this.HasScrolling()) return;
  if(!this.scrollHelper)
   this.scrollHelper = new ASPxClientTreeListTableScrollHelper(this.GetTableHelper());
  return this.scrollHelper;
 },
 UpdateScrollableControls: function(onAdjust) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.Update();
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.UpdateScrollableControls();
  if(this.AllowResizing())
   this.GetResizingHelper().ValidateColumnWidths();
  this.AdjustPagerControls();
 },
 SetWidth: function(width) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.OnSetWidth(width);
  this.constructor.prototype.SetWidth.call(this, width);
 },
 SetHeight: function(height) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHeight(height);
 },
 AllowResizing: function() { return this.columnResizeMode != ASPxColumnResizeMode.None; },
 GetResizingHelper: function() {
  if(!this.AllowResizing()) return null;
  if(!this.resizingHelper)
   this.resizingHelper = new ASPxClientTreeListTableResizingHelper(this.GetTableHelper());
  return this.resizingHelper;
 },
 TryStartColumnResizing: function(e, headerCell) {
  var helper = this.GetResizingHelper();
  if(!helper || !helper.CanStartResizing(e, headerCell))
   return false;
  var column = this.GetColumnByIndex(helper.GetResizingColumnIndex(e, headerCell));
  if(this.RaiseColumnResizing(column))
   return false;
  helper.StartResizing(column.index);
  return true;
 },
 SetHeadersClientEvents: function() {
  if(!this.AllowResizing())
   return;
  var helper = this.GetResizingHelper();
  var attachMouseMove = function(headerCell) { 
   _aspxAttachEventToElement(headerCell, "mousemove", function(e) { helper.UpdateCursor(e, headerCell); });
  };
  var indices = this.GetVisibleColumnIndices();
  for(var i = 0; i < indices.length; i++)
   attachMouseMove(this.GetHeaderCell(indices[i]));
 },
 GetVisibleColumnIndices: function() {
  if(!this.visibleColumnIndices)
   this.visibleColumnIndices = this.CreateVisibleColumnIndices();
  return this.visibleColumnIndices;
 },
 CreateVisibleColumnIndices: function() {
  var result = [ ];
  var headerRow = this.GetHeaderRow();
  if(!headerRow || headerRow.cells.length < 1) 
   return result;
  for(var i = 0; i < headerRow.cells.length; i++) {
   var cell = headerRow.cells[i];
   var index = this.GetLastNumberOfString(cell.id);
   if(index > -1)
    result.push(index);
  }
  return result;
 },
 GetIndentCount: function() {
  if(this.indentCount < 0)
   this.indentCount = this.CalculateIndentCount();
  return this.indentCount;
 },
 CalculateIndentCount: function() {
  var result = this.maxVisibleLevel - 1;
  if(this.showRoot)
   result++;
  if(this.FindSelectAllCheckBox() || this.FindSelectionCheck(this.GetDataTable()))
   result++;
  return result;
 },
 OnBrowserWindowResize: function(e) {
  if(this.AllowResizing() && !this.HasScrolling())
   this.GetResizingHelper().ValidateColumnWidths();
 },
 SeparatorToken: " ",
 RowIDSuffix: "R-",
 SelectAllCheckID: "_SelAll",
 EditorSuffix: "DXEDITOR",
 DragAndDropTargetMark: "_DX-DnD-",  
 ExpandButtonClassName: "dxtl__Expand",
 CollapseButtonClassName: "dxtl__Collapse",
 SelectionCellClassName: "dxtlSelectionCell",
 PopupEditFormSuffix: "PEF",
 HiddenEmptyRowID: "_HER",
 CommandId: {
  Expand:    1,
  Collapse:   2,
  Pager:    3,
  CustomDataCallback: 4,
  MoveColumn:   5,
  Sort:    6,
  Dummy:    8,
  ExpandAll:   9,
  CollapseAll:  10,
  CustomCallback:  11,
  StartEdit:   12,
  UpdateEdit:   14,
  CancelEdit:   15,
  MoveNode:   16,
  DeleteNode:   17,
  StartEditNewNode: 18,
  GetNodeValues:  20
 }, 
 ExpandCollapseAction: {
  Button: 0,
  NodeClick: 1,
  NodeDblClick: 2
 },
 GetNodeValuesCommandMode: { 
  ByKey:    0,
  Visible:   1,
  SelectedAll:  2,
  SelectedVisible: 3
 },
 RaiseContextMenu: function(e) {
  if(!this.ContextMenu.IsEmpty())
   this.ContextMenu.FireEvent(this, e);
 },
 RaiseCustomButtonClick: function(nodeKey, buttonIndex, buttonID) {
  var handler = this.CustomButtonClick;
  if(handler.IsEmpty()) return false;
  handler.FireEvent(this, new ASPxClientTreeListCustomButtonEventArgs(nodeKey, buttonIndex, buttonID));
 },
 Focus: function() {
  if(this.kbdHelper)
   this.kbdHelper.Focus();
 },
 GetFocusedNodeKey: function() {
  if(!this.enableFocusedNode)
   return "";
  if(this.focusedKey === null)
   this.focusedKey = this.GetFocusedKeyInput().value;
  return this.focusedKey;
 },
 SetFocusedNodeKey: function(key) {
  if(!this.enableFocusedNode)
   return;
  var prevKey = this.GetFocusedNodeKey();  
  this.SetFocusedNodeKeyInternal(key);
  this.UpdateRowStyle(prevKey); 
  this.UpdateRowStyle(key);
 },
 RaiseNodeFocusing: function(nodeKey, htmlEvent) {
  if(this.NodeFocusing.IsEmpty()) return true;
  var args = new ASPxClientTreeListNodeEventArgs(nodeKey, htmlEvent);
  this.NodeFocusing.FireEvent(this, args);
  return !args.cancel;
 }, 
 RaiseFocusedNodeChanged: function() {
  var processOnServer = false;
  if(!this.FocusedNodeChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.FocusedNodeChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;   
  }
  return this.focusSendsCallback || processOnServer;
 },
 GetNodeCheckState: function(nodeKey) {
  var row = this.GetRowByNodeKey(nodeKey);
  if(!_aspxIsExistsElement(row))
   return null;
  if(this.FindSelectionCheck(row)) {
   var internalCheckBox = this.internalCheckBoxCollection.Get(row.id);
   if(internalCheckBox)
    return internalCheckBox.GetCurrentCheckState();
  }
  return null;
 },
 SetNodeCheckState: function(nodeKey, checkState) {
  var row = this.GetRowByNodeKey(nodeKey);
  var newInputKey = ASPxClientCheckBoxInputKey[checkState];
  if(!_aspxIsExistsElement(row) || !newInputKey)
   return;   
  var check = this.FindSelectionCheck(row);
  if(!_aspxIsExistsElement(check))
   return;
  var internalCheckBox = this.internalCheckBoxCollection.Get(row.id);
  if(internalCheckBox.GetCurrentInputKey() == newInputKey)
   return;
  internalCheckBox.SetValue(newInputKey);
  this.OnNodeSelectingCore(check);
 },
 RaiseSelectionChanged: function() {
  var processOnServer = false;
  if(!this.SelectionChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.SelectionChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return this.selectionSendsCallback || processOnServer;
 },
 IsNodeSelected: function(nodeKey) {
  var row = this.GetRowByNodeKey(nodeKey);
  if(row) {
   var nodeCheckState = this.GetNodeCheckState(nodeKey);
   if(nodeCheckState)
    return nodeCheckState === ASPxClientCheckBoxCheckState.Checked;
  }
  return null;
 },
 SelectNode: function(nodeKey, state) { 
  if(!_aspxIsExists(state)) 
   state = true;   
  this.SetNodeCheckState(nodeKey, state ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
 },
 GetVisibleSelectedNodeKeys: function() {
  var rows = this.GetAllDataRows();
  var result = [ ];
  for(var i = 0; i < rows.length; i++) {
   var key = this.GetNodeKeyByRow(rows[i]);
   if(this.IsNodeSelected(key))
    result.push(key);
  }
  return result;
 }, 
 IsCustomizationWindowVisible: function() {
  var win = this.GetCustomizationWindow();
  return win != null && win.IsVisible();
 },
 ShowCustomizationWindow: function(htmlElement) {
  var win = this.GetCustomizationWindow();
  if(win == null)
   return;
  if(!_aspxIsExistsElement(htmlElement))
   htmlElement = this.GetMainElement();
  win.ShowAtElement(htmlElement);
 },
 HideCustomizationWindow: function() {
  var win = this.GetCustomizationWindow();
  if(win != null)
   win.Hide();
 },
 RaiseCustomizationWindowCloseUp: function() {
  if(!this.CustomizationWindowCloseUp.IsEmpty())
   this.CustomizationWindowCloseUp.FireEvent(this, { } );
 },
 PerformCustomCallback: function(arg) {
  this.PerformCallback(arg);  
 },
 PerformCallback: function(args) {
  this.SendCommand("CustomCallback", [args]);
 },
 PerformCustomDataCallback: function(arg) {
  this.SendAsyncCommand("CustomDataCallback", arg);
 },
 RaiseCustomDataCallback: function(arg, result) {
  if(!this.CustomDataCallback.IsEmpty()) {
   var e = new ASPxClientTreeListCustomDataCallbackEventArgs(arg, result);
   this.CustomDataCallback.FireEvent(this, e);
  }  
 },
 GetNodeValues: function(nodeKey, fieldNames, onCallback) {
  this.SendGetNodeValuesCommand(onCallback, this.GetNodeValuesCommandMode.ByKey, nodeKey, fieldNames);
 }, 
 GetVisibleNodeValues: function(fieldNames, onCallback) {
  this.SendGetNodeValuesCommand(onCallback, this.GetNodeValuesCommandMode.Visible, "", fieldNames);
 },
 GetSelectedNodeValues: function(fieldNames, onCallback, visibleOnly) {
  var mode = visibleOnly 
   ? this.GetNodeValuesCommandMode.SelectedVisible 
   : this.GetNodeValuesCommandMode.SelectedAll; 
  this.SendGetNodeValuesCommand(onCallback, mode, "", fieldNames);
 },  
 GoToPage: function(index) {
  if(index < -1)
   return;
  this.SendPagerCommand(ASPxClientPagerCommands.PageNumber + index);
 },
 PrevPage: function(fromKbd) {
  this.SendPagerCommand(ASPxClientPagerCommands.Prev, fromKbd);
 }, 
 NextPage: function(fromKbd) {
  this.SendPagerCommand(ASPxClientPagerCommands.Next, fromKbd);
 },
 GetPageIndex: function(){
  return this.pageIndex;
 },
 GetPageCount: function(){
  return this.pageCount;
 },
 GetNodeState: function(nodeKey, row) {  
  if(!row)
   row = this.GetRowByNodeKey(nodeKey);
  if(!_aspxIsExistsElement(row))
   return "NotFound";
  var children = row.getElementsByTagName("IMG");
  for(var i = 0; i < children.length; i++) {
   var name = children[i].className;
   if(name.indexOf(this.ExpandButtonClassName) > -1)
    return "Collapsed";
   if(name.indexOf(this.CollapseButtonClassName) > -1)
    return "Expanded";
  }
  return "Child";
 }, 
 ExpandAll: function() {
  this.SendCommand("ExpandAll");
 },
 CollapseAll: function() {
  this.SendCommand("CollapseAll");
 },
 ExpandNode: function(key) {
  this.SendCommand("Expand", [key]);
 },
 CollapseNode: function(key) {
  this.SendCommand("Collapse", [key]);
 },
 GetVisibleNodeKeys: function() {
  var rows = this.GetAllDataRows();
  var result = [ ];
  for(var i = 0; i < rows.length; i++)
   result.push(this.GetNodeKeyByRow(rows[i]));
  return result;
 },
 GetNodeHtmlElement: function(nodeKey) {
  return this.GetRowByNodeKey(nodeKey);
 },  
 RaiseNodeClick: function(nodeKey, htmlEvent) {
  if(this.NodeClick.IsEmpty()) return true;
  var e = new ASPxClientTreeListNodeEventArgs(nodeKey, htmlEvent);
  this.NodeClick.FireEvent(this, e);
  return !e.cancel;  
 },
 RaiseNodeDblClick: function(nodeKey, htmlEvent) {
  if(this.NodeDblClick.IsEmpty()) return true;
  var e = new ASPxClientTreeListNodeEventArgs(nodeKey, htmlEvent);
  this.NodeDblClick.FireEvent(this, e);
  return !e.cancel;
 },
 RaiseNodeExpanding: function(nodeKey, htmlEvent) {
  if(!this.NodeExpanding.IsEmpty()) {
   var e = new ASPxClientTreeListNodeEventArgs(nodeKey, htmlEvent);
   this.NodeExpanding.FireEvent(this, e);
   return !e.cancel;
  }
  return true;
 },
 RaiseNodeCollapsing: function(nodeKey, htmlEvent) {
  if(!this.NodeCollapsing.IsEmpty()) {
   var e = new ASPxClientTreeListNodeEventArgs(nodeKey, htmlEvent);
   this.NodeCollapsing.FireEvent(this, e);
   return !e.cancel;
  }
  return true;
 },
 RaiseStartDragNode: function(nodeKey, htmlEvent, targets) {
  if(this.StartDragNode.IsEmpty()) return true;
  var e = new ASPxClientTreeListStartDragNodeEventArgs(nodeKey, htmlEvent, targets);
  this.StartDragNode.FireEvent(this, e);
  return !e.cancel;
 },
 RaiseEndDragNode: function(nodeKey, htmlEvent, targetElement) {
  if(this.EndDragNode.IsEmpty()) return true;
  var e = new ASPxClientTreeListEndDragNodeEventArgs(nodeKey, htmlEvent, targetElement);
  this.EndDragNode.FireEvent(this, e);
  return !e.cancel;
 },
 GetVisibleColumnCount: function() {
  return this.visibleColumnCount;
 }, 
 GetColumnCount: function() {
  return this.columns.length;
 },
 GetColumnByIndex: function(index) {
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].index == index)
    return this.columns[i];
  }
  return null;
 }, 
 GetColumnByName: function(name) {
  if(name == "")
   return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].name == name)
    return this.columns[i];
  }
  return null;
 },
 GetColumnByFieldName: function(fieldName) {
  if(fieldName == "")
   return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].fieldName == fieldName)
    return this.columns[i];
  }
  return null;
 },
 SortBy: function(columnId, order, reset) {
  var column = this.FindColumn(columnId);
  if(column == null)
   return;
  if(!_aspxIsExists(order)) order = "";
  if(!_aspxIsExists(reset)) reset = true;
  this.SendSortCommand(column.index, order, reset);
 },
 StartEdit: function(nodeKey) {
  this.SendCommand("StartEdit", [nodeKey]);
 },
 UpdateEdit: function() {
  if(!this.IsEditing() || !this.ValidateEditors()) return;
  this.SendCommand("UpdateEdit");
 },
 ValidateEditors: function(){
  var editors = this.GetEditorObjects();  
  for(var i = 0; i < editors.length; i++) {
   var editor = editors[i];
   if(!editor.Validate) continue;
   editor.Validate();
   if(!editor.GetIsValid()) {
    if(editor.setFocusOnError)
     editor.Focus();
    return false;
   }
  }
  return true;
 },
 CancelEdit: function() {
  if(!this.IsEditing()) return;
  this.SendCommand("CancelEdit");
 },
 IsEditing: function() { 
  return this.editingKey != null || this.isNewNodeEditing;
 },
 GetEditingNodeKey: function() { 
  return this.editingKey; 
 },
 MoveNode: function(nodeKey, parentNodeKey) {
  this.SendCommand("MoveNode", [this.EscapeNodeKey(nodeKey), this.EscapeNodeKey(parentNodeKey)]);
 },
 DeleteNode: function(nodeKey) {
  this.SendCommand("DeleteNode", [nodeKey]);
 },
 StartEditNewNode: function(parentNodeKey) {
  if(!_aspxIsExists(parentNodeKey))
   parentNodeKey = "";
  this.SendCommand("StartEditNewNode", [parentNodeKey]);
 },
 GetEditor: function(columnId) {
  var column = this.FindColumn(columnId);
  if(column == null) return null;
  var editors = this.GetEditorObjects();
  for(var i = 0; i < editors.length; i++) {
   if(column.index == this.GetEditorColumnIndex(editors[i]))
    return editors[i];
  }
  return null;
 },
 GetEditValue: function(columnId) {
  var editor = this.GetEditor(columnId);
  if(editor == null) return null;
  return editor.GetValue();
 },
 SetEditValue: function(columnId, value) {
  var editor = this.GetEditor(columnId);
  if(editor != null)
   editor.SetValue(value);
 },
 FocusEditor: function(columnId) {
  var editor = this.GetEditor(columnId);
  if(editor && editor.SetFocus)
   editor.SetFocus();
 },
 MakeNodeVisible: function(nodeKey) {
  if(!this.HasVertScroll()) return;
  var row = this.GetRowByNodeKey(nodeKey);
  if(!row) return;
  this.GetScrollHelper().MakeRowVisible(row);
 },
 GetVerticalScrollPosition: function() {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetVertScrollPosition();
  return 0;
 },
 GetHorizontalScrollPosition: function() {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetHorzScrollPosition();
  return 0;
 },
 SetVerticalScrollPosition: function(value) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetVertScrollPosition(value);
 },
 SetHorizontalScrollPosition: function(value) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHorzScrollPosition(value);
 },
 RaiseColumnResizing: function(column) {
  if(!this.ColumnResizing.IsEmpty()) {
   var args = new ASPxClientTreeListColumnResizingEventArgs(column);
   this.ColumnResizing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseColumnResized: function(column) {
  if(!this.ColumnResized.IsEmpty()) {
   var args = new ASPxClientTreeListColumnResizedEventArgs(column);
   this.ColumnResized.FireEvent(this, args);
   if(args.processOnServer)
    this.SendDummyCommand();
  }
 }
});
ASPxClientTreeList.Cast = ASPxClientControl.Cast;
ASPxClientTreeListDragHelper = _aspxCreateClass(null, {
 constructor: function(treeList)  {
  this.treeList = treeList;
  this.rect = null;
  this.nodeTargets = null;
 },
 CreateHeaderDrag: function(element, e, canDrag) {  
  e = _aspxGetEvent(e);
  var drag = new ASPxClientDragHelper(e, element, true);  
  drag.centerClone = true;
  drag.canDrag = canDrag;
  drag.ctrl = e.ctrlKey;
  drag.shift = e.shiftKey;
  drag.treeListHelper = this;
  drag.onDoClick = this.OnHeaderClick;
  drag.onDragDivCreating = this.OnHeaderDragDivCreating;
  drag.onCloneCreating = this.OnHeaderCloneCreating;
  drag.onEndDrag = this.OnHeaderEndDrag;
  drag.onCancelDrag = this.OnHeaderCancelDrag;
  if(this.treeList.HasHorzScroll())
   this.SaveScrollContainerDimension();
  return drag;  
 },
 CreateHeaderTargets: function(drag, e) {
  if(!drag.canDrag)
   return;
  var targets = new ASPxClientCursorTargets();    
  targets.obj = drag.obj;
  targets.treeListHelper = this;
  targets.onTargetAdding = this.OnHeaderTargetAdding;
  targets.onTargetChanging = this.OnHeaderTargetChanging; 
  targets.onTargetChanged = this.OnHeaderTargetChanged;
  var tree = this.treeList;
  targets.RegisterTargets(tree.GetHeaderRow(),
   [ tree.GetEmptyHeaderSuffix(), tree.GetHeaderSuffix(true) ]);
  var cw = tree.GetCustomizationWindowElement();
  if(cw != null) {
   var index = this.treeList.GetLastNumberOfId(drag.obj);
   var columnObj = this.treeList.FindColumn(index);
   if(columnObj && columnObj.showInCw)
    targets.RegisterTargets(cw, [ tree.GetCustomizationWindowSuffix() ]);
  }
 },
 SaveScrollContainerDimension: function() {
  var scrollHelper = this.treeList.GetScrollHelper();
  var scrollableControl = scrollHelper.GetHorzScrollableControl() || scrollHelper.GetVertScrollableControl();
  var scrollDivX = _aspxGetAbsoluteX(scrollableControl);
  var scrollDivY = _aspxGetAbsoluteY(scrollableControl);
  var header = this.treeList.GetHeaderRow();
  var headerY = _aspxGetAbsoluteY(header);
  this.rect = { 
   left: scrollDivX, 
   right: scrollDivX + scrollableControl.offsetWidth - this.GetExtraCellWidth(),
   top: _aspxIsExistsElement(header) ? headerY : scrollDivY,
   bottom: scrollDivY + scrollableControl.offsetHeight
  };
 },
 OnHeaderTargetAdding: function(targets, targetElement) {
  if(!targetElement) 
   return false;
  var helper = targets.treeListHelper;
  if(targetElement.id.indexOf(helper.treeList.GetCustomizationWindowSuffix()) > 0)
   return true;
  if(helper.rect) {
   var targetX = _aspxGetAbsoluteX(targetElement);
   return targetX >= helper.rect.left && targetX + targetElement.offsetWidth <= helper.rect.right
  }
  return true;
 },
 OnHeaderClick: function(drag) {
  var treeList = drag.treeListHelper.treeList;
  treeList.OnHeaderClick(drag.obj, drag.shift, drag.ctrl);
 },
 OnHeaderDragDivCreating: function(drag, dragDiv) {
  drag.treeListHelper.AssignTreeListMainElementStyles(dragDiv);
 },
 OnHeaderCloneCreating: function(clone) { 
  clone.colSpan = 1; 
  ASPxClientTreeListDragHelper.RestoreElementBorder(clone);  
  var table = document.createElement("table");
  table.cellSpacing = 0;
  var row = table.insertRow(-1);
  row.appendChild(clone);
  table.style.width = Math.min(200, this.obj.offsetWidth) + "px";
  table.style.opacity = 0.80;
  table.style.filter = "alpha(opacity=80)"; 
  if(_aspxIsElementRightToLeft(this.obj))
   table.dir = "rtl";
  return table;
 },
 OnHeaderEndDrag: function(drag) {
  if(drag.targetElement == null) 
   return;  
  var treeList = drag.treeListHelper.treeList;
  var sourceIndex = treeList.GetLastNumberOfId(drag.obj);
  var targetIndex;
  var cwElement = treeList.GetCustomizationWindowElement();
  if(cwElement && drag.targetElement.id == cwElement.id) {
   targetIndex = -1;
  } else if(treeList.IsElementEmptyHeader(drag.targetElement)) {
   targetIndex = 0;
  } else {
   targetIndex = treeList.GetLastNumberOfId(drag.targetElement);
   if(sourceIndex == targetIndex)
    return;
  }
  var before = drag.targetTag;
  if(treeList.rtl)
   before = !before;
  treeList.OnColumnMoving(sourceIndex, targetIndex, before);
 },  
 OnHeaderCancelDrag: function(drag) {
  if(drag.canDrag)
   drag.treeListHelper.HideHeaderDragImages();
 },
 OnHeaderTargetChanging: function(targets) {
  targets.targetTag = targets.isLeftPartOfElement();
 },  
 OnHeaderTargetChanged: function(targets) { 
  if(__aspxDragHelper == null) 
   return;
  var helper = targets.treeListHelper;
  var element = targets.targetElement;
  helper.HideHeaderDragImages();
  if(element && element != __aspxDragHelper.obj) {   
   __aspxDragHelper.targetElement = element;
   __aspxDragHelper.targetTag = targets.targetTag;   
   var left = _aspxGetAbsoluteX(element);
   if(!targets.targetTag) {
    var brother = element;
    do {
     var brother = helper.treeList.rtl ? brother.previousSibling : brother.nextSibling;
    } while(brother && brother.nodeType != 1);
    if(brother)
     left = _aspxGetAbsoluteX(brother);
    else
     left += element.offsetWidth;
   }
   if(element == helper.treeList.GetCustomizationWindowElement()) {
    var hideImage = helper.treeList.GetDragAndDropHideImage();
    hideImage.style.top = "";
    __aspxDragHelper.addElementToDragDiv(hideImage);
   } else {
    helper.SetHeaderDragImagesPosition(element, left);
   }
  } else {
   __aspxDragHelper.targetElement = null;
  }
 },
 SetHeaderDragImagesPosition: function(element, left) {
  this.ShowHeaderDragImages();
  var arrowDown = this.treeList.GetDragAndDropArrowDownImage();
  var arrowUp = this.treeList.GetDragAndDropArrowUpImage();
  _aspxSetAbsoluteX(arrowDown, Math.ceil(left - arrowDown.offsetWidth / 2));
  _aspxSetAbsoluteX(arrowUp, Math.ceil(left - arrowUp.offsetWidth / 2));
  var top = _aspxGetAbsoluteY(element);
  _aspxSetAbsoluteY(arrowDown, top - arrowDown.offsetHeight);
  _aspxSetAbsoluteY(arrowUp, top + element.offsetHeight);
 },
 HideHeaderDragImages: function() {
  this.SetHeaderDragImagesVisibility("hidden");
  if(__aspxDragHelper != null)
   __aspxDragHelper.removeElementFromDragDiv();  
 },
 ShowHeaderDragImages: function() {
  this.SetHeaderDragImagesVisibility("visible");
 },
 SetHeaderDragImagesVisibility: function(value) {
  this.treeList.GetDragAndDropArrowDownImage().style.visibility = value;
  this.treeList.GetDragAndDropArrowUpImage().style.visibility = value;
 },
 AssignTreeListMainElementStyles: function(target) {
  var mainElement = this.treeList.GetMainElement();
  if(!target || !mainElement) return;
  target.className = mainElement.className;
  target.style.cssText = mainElement.style.cssText;
 },
 CreateNodeDrag: function(row, e, canDrag) {
  e = _aspxGetEvent(e);
  var drag = new ASPxClientDragHelper(e, row, true);
  drag.__treeList = this.treeList;
  drag.canDrag = canDrag;
  drag.onDragDivCreating = this.OnNodeDragDivCreating;
  drag.onCloneCreating = this.OnNodeCloneCreating;
  drag.onCancelDrag = this.OnNodeCancelDrag;
  drag.onEndDrag = this.OnNodeEndDrag;
  drag.onDoClick = this.OnNodeClick;
  if(this.treeList.HasScrolling()) {
   this.SaveScrollContainerDimension();
   if(this.treeList.HasVertScroll())
    this.ScrollControlManually();
  }
  return drag;
 },
 CreateNodeTargets: function(targetElements, sourceElement) {
  this.nodeTargets = new ASPxClientCursorTargets();
  this.nodeTargets.__treeList = this.treeList;
  for(var i = 0; i < targetElements.length; i++) {
   if(targetElements[i] == sourceElement) continue;
   this.nodeTargets.list.push(new ASPxClientCursorTarget(targetElements[i]));
  }
  this.nodeTargets.onTargetAllowed = function(targetElement, x, y) { return this.OnNodeTargetAllowed(targetElement, x, y); }.aspxBind(this);
  this.nodeTargets.onTargetChanged = this.OnNodeTargetChanged;
 },
 OnNodeDragDivCreating: function(drag, dragDiv) {
  drag.__treeList.dragHelper.AssignTreeListMainElementStyles(dragDiv);
 },
 OnNodeCloneCreating: function(row) {
  var treeList = __aspxDragHelper.__treeList;
  if(treeList.GetHorizontalScrollPosition() > 0)
     treeList.SetHorizontalScrollPosition(0); 
  var helper = treeList.dragHelper;
  var table = document.createElement("table");
  table.cellSpacing = 0;  
  var tbody = document.createElement("tbody");
  table.appendChild(tbody);
  tbody.appendChild(row);
  var list = [ ];
  var extraCellCount = helper.GetExtraCellCount();
  var thr = row.cells.length - treeList.GetColumnCellCount() - extraCellCount;
  var lastDataCellIndex = row.cells.length - extraCellCount - 1;
  var originalRow = __aspxDragHelper.obj;
  var removedWidth = 0;
  for(var i = 0; i < row.cells.length; i++) {
   var cell = row.cells[i];
   var originalCell = originalRow.cells[i];
   if(i < thr || i > lastDataCellIndex) {
    list.push(cell);
    removedWidth += originalCell.offsetWidth;
   } else {
    ASPxClientTreeListDragHelper.RestoreElementBorder(cell, "top");
    ASPxClientTreeListDragHelper.RestoreElementBorder(cell, "bottom");
    if(i == thr)
     ASPxClientTreeListDragHelper.RestoreElementBorder(cell, "left");
    if(i == lastDataCellIndex)
     ASPxClientTreeListDragHelper.RestoreElementBorder(cell, "right");
    cell.style.width = originalCell.offsetWidth - 
     _aspxGetLeftRightBordersAndPaddingsSummaryValue(originalCell) + "px";
   }    
  }
  for(var i = 0; i < list.length; i++)
   row.removeChild(list[i]);
  table.width = (originalRow.offsetWidth - removedWidth).toString() + "px";
  table.style.marginLeft = removedWidth - helper.GetExtraCellWidth() + "px";
  table.style.opacity = 0.80;
  table.style.filter = "alpha(opacity=80)";
  return table;
 },
 OnNodeTargetAllowed: function(targetElement, x, y) {
  if(!this.rect)
   return true;
  if(this.treeList.HasScrolling() && !_aspxGetIsParent(this.treeList.GetMainElement(), targetElement))
   return true;
  return x >= this.rect.left && x <= this.rect.right && y >= this.rect.top && y <= this.rect.bottom;
 },
 OnNodeTargetChanged: function(targets) {
  if(__aspxDragHelper == null) return;
  var element = targets.targetElement;
  var hasTarget = _aspxIsExistsElement(element);
  targets.__treeList.dragHelper.SetNodeImageVisibility(hasTarget, element);
  __aspxDragHelper.targetElement = hasTarget ? targets.targetElement : null;
 },
 OnNodeCancelDrag: function(drag) {
  var helper = drag.__treeList.dragHelper;
  helper.SetNodeImageVisibility(false);
  helper.nodeTargets = null;
  if(helper.mouseMoveHandler)
   _aspxDetachEventFromDocument("mousemove", helper.mouseMoveHandler);
  helper.CancelScrolling();
 },
 OnNodeEndDrag: function(drag, e) {
  if(drag.targetElement == null) 
   return;
  var sourceRow = drag.obj;
  var targetElement = drag.targetElement;
  if(sourceRow == targetElement)
   return;
  var treeList = drag.__treeList;
  var nodeKey = treeList.GetNodeKeyByRow(sourceRow);  
  if(!treeList.RaiseEndDragNode(nodeKey, e, targetElement))
   return;    
  if(treeList.IsElementDataRow(targetElement)) {
   var parentKey = treeList.GetNodeKeyByRow(targetElement);
   treeList.MoveNode(nodeKey, parentKey);
  } else if(targetElement == treeList.GetHeaderRow()) {
   treeList.MoveNode(nodeKey, "");
  } else {
   alert("Unprocessed custom target id=" + targetElement.id);
  }
 },
 OnNodeClick: function(drag, e) {
  drag.__treeList.OnDataTableClick(e);
 }, 
 SetNodeImageVisibility: function(visible, element) {
  if(element == document.body)
   visible = false;
  var img = this.treeList.GetDragAndDropNodeImage();
  img.style.visibility = visible ? "visible" : "hidden";
  if(!visible) return;
  if(element.cells && element.cells.length > 0) {   
   for(var i = element.cells.length - 1; i >= 0; i--) {
    if(element.cells[i].className.indexOf("dxtl__I") > -1) {    
     element = element.cells[1 + i];
     break;
    }
   }
  }
  _aspxSetAbsoluteX(img, _aspxGetAbsoluteX(element) - img.offsetWidth + 4);
  _aspxSetAbsoluteY(img, _aspxGetAbsoluteY(element) + Math.floor(0.5 * (element.clientHeight - img.clientHeight)));
 },
 GetExtraCellCount: function() {
  var tableHelper = this.treeList.GetTableHelper();
  if(tableHelper)
   return tableHelper.GetExtraCellCount();
  return 0;
 },
 GetExtraCellWidth: function() {
  var tableHelper = this.treeList.GetTableHelper();
  if(tableHelper)
   return tableHelper.GetExtraCellWidth();
  return 0;
 },
 OnVerticalScroll: function() {
  if(!this.nodeTargets || this.nodeTargets.list.length == 0)
   return;
  this.updateTargetPositionTimerID = _aspxClearTimer(this.updateTargetPositionTimerID);
  this.updateTargetPositionTimerID = window.setTimeout(function() { this.UpdateTargetProsition(); }.aspxBind(this), 50);
 },
 UpdateTargetProsition: function() {
  if(!this.nodeTargets || this.nodeTargets.list.length == 0)
   return;
  for(var i = 0; i < this.nodeTargets.list.length; i++)
   this.nodeTargets.list[i].UpdatePosition();
 },
 ScrollControlManually: function() {
  if(!__aspxIE && !__aspxFirefox)
   return;
  this.mouseMoveHandler = function(e) { this.OnMouseMove(e); }.aspxBind(this);
  _aspxAttachEventToDocument("mousemove", this.mouseMoveHandler);
 },
 OnMouseMove: function(e) {
  var y = _aspxGetEventY(e);
  if(this.savedY === y) 
   return;
  this.savedY = y;
  if(y >= this.rect.top && y <= this.rect.bottom) {
   this.CancelScrolling();
   return;
  }
  var isTop = y < this.rect.top;
  var diff = isTop ? this.rect.top - y : y - this.rect.bottom;
  this.repeatScrollTimeout = diff < 30 ? 30 - diff : 1;
  this.scrollTopInc = isTop ? -1 : 1;
  this.StartScrolling(diff, isTop);
 },
 StartScrolling: function(diff, isTop) {
  if(this.scrollingProcessing)
   return;
  this.scrollingProcessing = true;
  this.scrollHandler = this.RepeatScrolling();
 },
 CancelScrolling: function() {
  this.scrollingProcessing = false;
  this.scrollHandler = _aspxClearTimer(this.scrollHandler);
 },
 RepeatScrolling: function(time, inc) {
  var scrollableControl = this.treeList.GetScrollHelper().GetVertScrollableControl();
  scrollableControl.scrollTop += this.scrollTopInc;
  return window.setTimeout(function() { this.scrollHandler = this.RepeatScrolling(); }.aspxBind(this), this.repeatScrollTimeout);
 }
});
ASPxClientTreeListDragHelper.RestoreElementBorder = function(element, borderPart) {
 var ruleName = borderPart ? "border-" + borderPart + "-style" : "border-style";
 element.style.cssText += ";" + ruleName + ": solid!important;";
};
ASPxTreeListKbdHelper = _aspxCreateClass(ASPxKbdHelper, {
 HandleKeyDown: function(e) {
  var tree = this.control;
  var row = tree.GetRowByNodeKey(tree.GetFocusedNodeKey());
  var busy = tree.syncLock;
  var key = _aspxGetKeyCode(e);
  if(tree.rtl) {
   if(key == ASPxKey.Left)
    key = ASPxKey.Right;
   else if(key == ASPxKey.Right)
    key = ASPxKey.Left;
  }
  switch(key) {
   case ASPxKey.Down:
    if(!busy)
     this.TryMoveFocusDown(row, e.shiftKey);
    return true;
   case ASPxKey.Up:
    if(!busy)
     this.TryMoveFocusUp(row, e.shiftKey);
    return true;
   case ASPxKey.Right:
    if(!busy) {
     if(!this.TryExpand(row))
      this.TryMoveFocusDown(row, e.shiftKey);
    }
    return true;
   case ASPxKey.Left:
    if(!busy) {
     if(!this.TryCollapse(row))
      this.TryMoveFocusUp(row, e.shiftKey);
    }
    return true;
   case ASPxKey.PageDown:
    if(e.shiftKey) {
     if(!busy && tree.pageIndex < tree.pageCount - 1)
      tree.NextPage();
     return true; 
    }
    break;
   case ASPxKey.PageUp:
    if(e.shiftKey) {
     if(!busy && tree.pageIndex > 0)
      tree.PrevPage();
     return true; 
    }
    break;         
  }
  return false;
 },
 HandleKeyPress: function(e) {
  var tree = this.control;
  var key = tree.GetFocusedNodeKey();
  var busy = tree.syncLock;
  switch(_aspxGetKeyCode(e)) {
   case ASPxKey.Space:   
    if(!busy) {
     var state = tree.IsNodeSelected(key);
     if(state != null) {
      tree.SelectNode(key, !state);
      if(tree.RaiseSelectionChanged())
       tree.SendDummyCommand(true);
     }      
    }
    return true;
    case 43:   
    if(!busy)
     this.TryExpand(tree.GetRowByNodeKey(key));
    return true;
    case 45:    
    if(!busy)
     this.TryCollapse(tree.GetRowByNodeKey(key));
    return true;    
  }
  return false;
 },
 TryMoveFocusDown: function(row, select) {
  var tree = this.control;
  var nextRow = this.GetSiblingRow(row, 1);
  if(nextRow) {
   var processOnServer = tree.OnFocusingNode(tree.GetNodeKeyByRow(nextRow), {});
   if(select && !tree.recursiveSelection) {
    this.TrySelectNodes(row, nextRow);
   } else {
    tree.selectionStartKey = null;
   }
   if(processOnServer)
    tree.SendDummyCommand(true);
   else
    this.EnsureFocusedNodeVisible();
  } else if(tree.pageIndex > -1 && tree.pageIndex < tree.pageCount - 1) {
   tree.NextPage(true);
  }
 },
 TryMoveFocusUp: function(row, select) {
  var tree = this.control; 
  var prevRow = this.GetSiblingRow(row, -1);
  if(prevRow) {
   var processOnServer = tree.OnFocusingNode(tree.GetNodeKeyByRow(prevRow), {});
   if(select && !tree.recursiveSelection) {
    this.TrySelectNodes(row, prevRow);
   } else {
    tree.selectionStartKey = null;
   }
   if(processOnServer)
    tree.SendDummyCommand(true);
   else
    this.EnsureFocusedNodeVisible();
  } else if(tree.pageIndex > 0) {
   tree.PrevPage(true);
  } 
 },
 TryExpand: function(row) {
  var tree = this.control;
  if(tree.GetNodeState(null, row) == "Collapsed") {
   tree.ExpandNode(tree.GetNodeKeyByRow(row));
   return true;
  }
  return false;
 },
 TryCollapse: function(row) {
  var tree = this.control;
  if(tree.GetNodeState(null, row) == "Expanded") {
   tree.CollapseNode(tree.GetNodeKeyByRow(row));
   return true;
  }
  return false;
 },
 GetSiblingRow: function(row, offset) {
  var i = 0;
  if(row == null) {
   var dataRows = this.control.GetAllDataRows();
   if(dataRows == null)
    return;
   return dataRows[offset >= 0 ? 0 : dataRows.length - 1];
  }
  while(i < Math.abs(offset)) {
   row = offset < 0 ? row.previousSibling : row.nextSibling;
   if(!row)
    return null;
   if(row.id == this.control.name + "_ArmRow")
    return null;
   if(row.nodeType != 1 || !this.control.IsElementDataRow(row))
    continue;
   i++;
  }
  return row;
 },
 TrySelectNodes: function(startRow, endRow) {
  var tree = this.control;
  if(tree.selectionStartKey != null)
   startRow = tree.GetRowByNodeKey(tree.selectionStartKey) || startRow;  
  tree.selectionStartKey = tree.GetNodeKeyByRow(startRow);
  if(!tree.FindSelectionCheck(tree.GetDataTable()))
   return ;
  var rows = tree.GetAllDataRows();
  var inside = false;
  var changed = false;
  for(var i = 0; i < rows.length; i++) {
   var hit = rows[i] == startRow || rows[i] == endRow;   
   if(hit && !inside) {
    inside = true;
    hit = false;
   }
   var key = tree.GetNodeKeyByRow(rows[i]);
   if(tree.IsNodeSelected(key) != inside)
    changed = true;
   tree.SelectNode(key, inside);
   if(inside && (hit || startRow == endRow))
    inside = false;
  }
  if(changed) {
   if(tree.RaiseSelectionChanged())
    tree.SendDummyCommand(true);
  }
 },
 EnsureFocusedNodeVisible: function() {
  var tree = this.control;
  if(!tree.HasVertScroll()) return;
  var row = tree.GetRowByNodeKey(tree.GetFocusedNodeKey());
  tree.GetScrollHelper().MakeRowVisible(row, true);
 }
});
function aspxTLPager(name, arg) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList != null)
  treeList.SendPagerCommand(arg);
}
function aspxTLClick(name, e) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.OnDataTableClick(e);
}
function aspxTLDblClick(name, e) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.OnDataTableDblClick(e);
}
function aspxTLHeaderDown(name, element, e) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.OnHeaderMouseDown(element, e);
}
function aspxTLCWCloseUp(name) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.RaiseCustomizationWindowCloseUp();
}
function aspxTLMouseDown(name, e) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.OnDataTableMouseDown(e);
}
function aspxTLStartEdit(name, key) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.StartEdit(key); 
}
function aspxTLStartEditNewNode(name, parentKey) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.StartEditNewNode(parentKey); 
}
function aspxTLDeleteNode(name, key) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.OnNodeDeleting(key); 
}
function aspxTLUpdateEdit(name) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.UpdateEdit(); 
}
function aspxTLCancelEdit(name) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.CancelEdit(); 
}
function aspxTLCustomButton(name, nodeKey, index, id) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.RaiseCustomButtonClick(nodeKey, index, id);
}
function aspxTLMenu(name, objectType, objectKey, htmlEvent) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  return treeList.OnContextMenu(objectType, objectKey, htmlEvent);
 return true;
}
function aspxTLSort(name, columnIndex) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList)
  treeList.SortBy(columnIndex);
}
function aspxTLExpand(name, nodeKey) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList) {
  if(treeList.enableFocusedNode && treeList.focusOnExpandCollapse)
   treeList.OnFocusingNode(nodeKey, null);
  treeList.ExpandNode(nodeKey);
 }
}
function aspxTLCollapse(name, nodeKey) {
 var treeList = aspxGetControlCollection().Get(name);
 if(treeList) {
  if(treeList.enableFocusedNode && treeList.focusOnExpandCollapse)
   treeList.OnFocusingNode(nodeKey, null); 
  treeList.CollapseNode(nodeKey);
 }
}
ASPxClientTreeListColumn = _aspxCreateClass(null, { 
 constructor: function(index, name, fieldName) {
  this.index = index;
  this.name = name;
  this.fieldName = fieldName;
  this.canSort = false; 
  this.showInCw = true;   
  this.minWidth = 0;   
 },
 __dxColumnObject: true
});
ASPxClientTreeListCustomDataCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(arg, result) {
  this.constructor.prototype.constructor.call(this);
  this.arg = arg;
  this.result = result;
 }
});
ASPxClientTreeListNodeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(nodeKey, htmlEvent) {
  this.constructor.prototype.constructor.call(this);
  this.nodeKey = nodeKey;
  this.htmlEvent = htmlEvent;
  this.cancel = false;  
 }
});
ASPxClientTreeListContextMenuEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(objectType, objectKey, htmlEvent) {
  this.constructor.prototype.constructor.call(this);
  this.objectType = objectType;
  this.objectKey = objectKey;
  this.htmlEvent = htmlEvent;
  this.cancel = false;   
 }
});
ASPxClientTreeListStartDragNodeEventArgs = _aspxCreateClass(ASPxClientTreeListNodeEventArgs, {
 constructor: function(nodeKey, htmlEvent, targets) {
  this.constructor.prototype.constructor.call(this, nodeKey, htmlEvent);
  this.targets = targets;  
 }
});
ASPxClientTreeListEndDragNodeEventArgs = _aspxCreateClass(ASPxClientTreeListNodeEventArgs, {
 constructor: function(nodeKey, htmlEvent, targetElement) {
  this.constructor.prototype.constructor.call(this, nodeKey, htmlEvent);
  this.targetElement = targetElement;
 } 
});
ASPxClientTreeListCustomButtonEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(nodeKey, buttonIndex, buttonID) {
  this.constructor.prototype.constructor.call(this);
  this.nodeKey = nodeKey;
  this.buttonIndex = buttonIndex;
  this.buttonID = buttonID;
 } 
});
ASPxClientTreeListColumnResizingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(column) {
  this.constructor.prototype.constructor.call(this);
  this.column = column;
 }
});
ASPxClientTreeListColumnResizedEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this, false);
  this.column = column;
 }
});

MVCxClientTreeList = _aspxCreateClass(ASPxClientTreeList, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.callbackUrl = "";
  this.customActionUrl = "";
  this.customDataActionUrl = "";
  this.addNewNodeUrl = "";
  this.updateNodeUrl = "";
  this.moveNodeUrl = "";
  this.deleteNodeUrl = "";
  this.callbackCustomArgs = {};
  this.customActionCallBack;
  this.customDataActionCallback;
  this.addNewNodeCallback;
  this.moveNodeCallback;
  this.deleteNodeCallback;
  this.updateNodeCallback;
  this.keyName;
  this.parentKeyName;
  this.movingKey;
  this.newParentKey;
  this.deleteKey;
  this.editingParentKey;
  this.UnobtrusiveValidationRulesHiddenFieldPostfix = "_UVR";
 },
 PerformCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientTreeList.prototype.PerformCallback.call(this, data);
 },
 PerformCustomDataCallback: function(data) {
  MVCx.MergeHashTables(this.callbackCustomArgs, data);
  ASPxClientTreeList.prototype.PerformCustomDataCallback.call(this, _aspxToJson(this.callbackCustomArgs));
 },
 InlineInitialize: function() {
  if(this.callbackUrl != "")
   this.callBack = function(arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  if(this.customActionUrl != "")
   this.customActionCallBack = function(arg) { MVCx.PerformControlCallback(this.name, this.customActionUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  if(this.customDataActionUrl != "")
   this.customDataActionCallback = function(arg) { MVCx.PerformControlCallback(this.name, this.customDataActionUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  if(this.addNewNodeUrl != "")
   this.addNewNodeCallback = function(arg) { MVCx.PerformControlCallback(this.name, this.addNewNodeUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  if(this.deleteNodeCallback != "")
   this.deleteNodeCallback = function(arg) { MVCx.PerformControlCallback(this.name, this.deleteNodeUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  if(this.updateNodeUrl != "")
   this.updateNodeCallback = function(arg) { MVCx.PerformControlCallback(this.name, this.updateNodeUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  if(this.moveNodeUrl != "")
   this.moveNodeCallback = function(arg) { MVCx.PerformControlCallback(this.name, this.moveNodeUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs) };
  ASPxClientTreeList.prototype.InlineInitialize.call(this);
 },
 RaiseBeginCallbackInternal: function(command) {
  var args = new MVCxClientBeginCallbackEventArgs(command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  MVCxClientGlobalEvents.OnBeginCallback(args);
  MVCx.MergeHashTables(this.callbackCustomArgs, args.customArgs);
 },
 RaiseEndCallback: function() {
  ASPxClientTreeList.prototype.RaiseEndCallback.call(this);
  MVCxClientGlobalEvents.OnEndCallback();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientTreeList.prototype.RaiseCallbackError.call(this, message);
  if(!result.isHandled) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   MVCxClientGlobalEvents.OnCallbackError(args);
   result = { isHandled: args.handled, errorMessage: args.message };
  }
  return result;
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  this.CreateCallbackInternal(arg, command, true, callbackInfo);
 },
 EvalCallbackResult: function(resultString) {
  var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
  if(resultStringParts.length == 2) {
   var resultObj = ASPxClientTreeList.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
   resultObj.result.data = resultStringParts[1];
   return resultObj;
  }
  return ASPxClientTreeList.prototype.EvalCallbackResult.call(this, resultString);
 },
 GetCallbackParams: function(arg) {
  var params = {};
  var selectionInput = this.GetSelectionInput();
  if(_aspxIsExistsElement(selectionInput))
   params[selectionInput.name] = selectionInput.value;
  var selectAllMarkInput = this.GetSelectAllMarkInput();
  if(_aspxIsExistsElement(selectAllMarkInput))
   params[selectAllMarkInput.name] = selectAllMarkInput.value;
  var resizingInput = this.GetResizingStateInput();
  if(resizingInput)
   params[resizingInput.name] = resizingInput.value;
  if(this.enableFocusedNode)
   params[this.GetFocusedKeyInput().name] = this.GetFocusedKeyInput().value;
  if(this.HasScrolling())
   params[this.GetScrollStateInput().name] = this.GetScrollStateInput().value;
  params[this.GetCallbackStateInput().name] = this.GetCallbackStateInput().value;
  $(this.GetMainElement()).find("input,textarea,select").each(function() {
   if(typeof(params[this.name]) == "undefined")
    params[this.name] = this.type == "checkbox" ? this.checked : this.value;
  });
  var editFields = [];
  var editors = this.GetEditorObjects();
  for(var i = 0; i < editors.length; i++) {
   var column = this.columns[this.GetEditorColumnIndex(editors[i])];
   var editorValue = _aspxToJson(MVCx.GetEditorValueByControl(editors[i]));
   if (_aspxIsExists(editorValue))
    params[column.fieldName] = editorValue;
   editFields.push(column.fieldName);
  }
  if(editFields.length > 0)
   params["DXMVCTreeListEditFields"] = _aspxToJson(editFields);
  if(this.keyName != "") {
   if(this.deleteKey) {
    params[this.keyName] = this.deleteKey;
    this.deleteKey = null;
   }
   else if(this.IsEditing() && !this.isNewNodeEditing && !params[this.keyName])
    params[this.keyName] = this.GetEditingNodeKey();
   else if(this.movingKey) {
    params[this.keyName] = this.movingKey;
    this.movingKey = null;
    params[this.parentKeyName] = this.newParentKey;
    this.newParentKey = null;
   }
  }
  if(this.parentKeyName != "") {
   if(this.IsEditing() && !params[this.parentKeyName] && this.editingParentKey)
    params[this.parentKeyName] = this.editingParentKey;
  }
  var DXEditorValues = {};
  var DXTreeList = this;
  aspxGetControlCollection().ForEachControl(function(control) {
   if (!ASPxIdent.IsASPxClientEdit(control)) return;
   if(control.GetMainElement() && _aspxIsValidElement(control.GetMainElement())) {
    if(_aspxGetIsParent(DXTreeList.GetMainElement(), control.GetMainElement()))
     DXEditorValues[control.name] = MVCx.GetEditorValueByControl(control);
   }
  });
  params[MVCx.EditorsValuesKey] = _aspxToJson(DXEditorValues);
  return params;
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  if(this.callbackCustomArgs != {})
   window.setTimeout(function() { this.callbackCustomArgs = {}; } .aspxBind(this), 0);
  ASPxClientTreeList.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
 },
 GetCallbackMethod: function(command) {
  if(MVCx.IsCustomCallback(command))
   return MVCx.GetCustomActionCallBackMethod(this);
  if(MVCx.IsCustomDataCallback(command))
   return this.customDataActionCallback;
  if(command == "DeleteNode")
   return this.deleteNodeCallback;
  if(command == "UpdateEdit")
   return this.isNewNodeEditing ? this.addNewNodeCallback : this.updateNodeCallback;
  if(command == "MoveNode")
   return this.moveNodeCallback;
  return this.callBack;
 },
 ProcessCallbackResult: function(resultObj) {
  ASPxClientTreeList.prototype.ProcessCallbackResult.call(this, resultObj);
  this.editingParentKey = resultObj.editingParentKey;
  this.errorText = resultObj.errorText;
 },
 DoEndCallback: function() {
  if(this.errorText) {
   var result = this.RaiseCallbackError(this.errorText);
   this.errorText = null;
   if(!result.isHandled)
    this.OnCallbackError(result.errorMessage);
  }
  ASPxClientTreeList.prototype.DoEndCallback.call(this);
 },
 MoveNode: function(nodeKey, parentNodeKey) {
  this.movingKey = nodeKey;
  this.newParentKey = parentNodeKey;
  ASPxClientTreeList.prototype.MoveNode.call(this, nodeKey, parentNodeKey);
 },
 DeleteNode: function(key) {
  this.deleteKey = key;
  ASPxClientTreeList.prototype.DeleteNode.call(this, key);
 },
 ValidateEditors: function(){
  var isValid = ASPxClientTreeList.prototype.ValidateEditors.call(this);
  var form = this.GetParentForm();
  if(MVCx.IsUnobtrusiveValidationEnabled() && _aspxIsExists(form)){
   this.AssignUnobtrusiveValidationRulesToEditors();
   this.PrepareUnobtrusiveValidationRules(form);
   var validator = $.data(form, 'validator');
   if(validator)
    isValid &= validator.form();
  };
  return isValid;
 },
 AssignUnobtrusiveValidationRulesToEditors: function(){
  var uvInput = this.GetUnobtrusiveValidationRulesInput();
  if(!_aspxIsExists(uvInput))
   return;
  var rules = eval(uvInput.value);
  var editors = this.GetEditorObjects();
  var treeList = this;
  $.each(rules, function(fieldName, validationRule){
   var column = treeList.GetColumnByFieldName(fieldName);
   if(column && editors.length > column.index)
    editors[column.index].unobtrusiveValidationAttributes = validationRule;
  });
 },
 PrepareUnobtrusiveValidationRules: function(form){
  if(form.dxUVExecuted)
   return;
  $(form).removeData("validator");
  $.validator.unobtrusive.parse(form);
  form.dxUVExecuted = true;
 },
 GetUnobtrusiveValidationRulesInput: function(){
  return _aspxGetElementById(this.name + this.UnobtrusiveValidationRulesHiddenFieldPostfix);
 }
});
