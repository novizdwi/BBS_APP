@using Models._Utils;

@{
    GridViewModel viewModel = Model;

    var cpGvFind_FilterExpression = GetSqlFromGridViewModelState.getHanaCriteria(viewModel);
    var cpGvFind_SortExpression = GetSqlFromGridViewModelState.getHanaSort(viewModel);
    var cpGvFind_PageIndex = viewModel.Pager.PageIndex;
    var cpGvFind_PageSize = viewModel.Pager.PageSize;

    string cpGvFind_CflType = "";
    string cpGvFind_CflName = "";
    string cpGvFind_CflHeader = "";
    string cpGvFind_CflSqlWhere = "";
    string cpGvFind_CflIsMulti = "N";


    if (Request["hidden_CflType"] != null)
    {
        cpGvFind_CflType = Request["hidden_CflType"];
    }

    if (Request["hidden_CflName"] != null)
    {
        cpGvFind_CflName = Request["hidden_CflName"];
    }

    if (Request["hidden_CflHeader"] != null)
    {
        cpGvFind_CflHeader = Request["hidden_CflHeader"];
    }

    if (Request["hidden_CflSqlWhere"] != null)
    {
        cpGvFind_CflSqlWhere = Request["hidden_CflSqlWhere"];
    }


    if (Request["hidden_CflIsMulti"] != null)
    {
        cpGvFind_CflIsMulti = Request["hidden_CflIsMulti"];
    }

  
    
}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvCflSalesOrderList" + cpGvFind_CflName;
    settings.KeyFieldName = "DocEntry";
    settings.CallbackRouteValues = new { Controller = "_CflSalesOrder", Action = "ListPartial" };

    if (cpGvFind_CflIsMulti == "N")
    {
        settings.Columns.Add(column =>
        {
            column.Caption = "#";

            column.SetDataItemTemplateContent(c =>
            {

                ViewContext.Writer.Write(

                 Html.DevExpress().HyperLink(settingsHL =>
                 {
                     settingsHL.Name = "gvCflSalesOrderListChoose_" + cpGvFind_CflName + DataBinder.Eval(c.DataItem, "DocEntry") + "_" + Guid.NewGuid().ToString();
                     settingsHL.NavigateUrl = "javascript:void(0)";
                     settingsHL.Properties.Text = "Choose";
                     settingsHL.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ OnClickChoose_CflSalesOrder{1}(s, e, {0}); }}", new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(c.DataItem), cpGvFind_CflName);
                 }).GetHtml()


             );
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                   "#Action#"
                );
            });

            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.Width = 70;
        });

    }
    else
    {
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;

        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.CommandColumn.Width = 70;



    }
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;

    settings.Columns.Add("DocEntry", "DocEntry").Visible = false;
    settings.Columns.Add("DocNum", "SO Number");
    settings.Columns.Add(column =>
    {
        column.FieldName = "DocDate";
        column.Name = "DocDate";
        column.Caption = "SO Date";
        column.ColumnType = MVCxGridViewColumnType.DateEdit;
        column.Width = 100;

        var txt = column.PropertiesEdit as DateEditProperties;
        txt.DisplayFormatString = "dd/MM/yyyy";
        txt.EditFormatString = "dd/MM/yyyy";

    });

    settings.Columns.Add("CardCode", "BP Code");
    settings.Columns.Add("CardName", "BP Name");
    //settings.Columns.Add("ItemCode", "Item Code");
    //settings.Columns.Add("ItemName", "Item Name");
    //settings.Columns.Add("AddressType", "Address Type");
    settings.Columns.Add("ShippingType", "Shipping Type");
    settings.Columns.Add("Destination", "Destination");

    settings.Columns.Add(column =>
    {
        column.FieldName = "Quantity";
        column.Name = "Quantity";
        column.Caption = "Qty";
        column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
        column.ReadOnly = true;

        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.Width = 100;
        //column.Visible = ViewBag.IsShowWTax ? true : false;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.NumberType = SpinEditNumberType.Float;
        txt.DisplayFormatString = "#,###.00";
        txt.DisplayFormatInEditMode = true;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "OpenQty";
        column.Name = "OpenQty";
        column.Caption = "Open Qty";
        column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
        column.ReadOnly = true;

        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.Width = 100;
        //column.Visible = ViewBag.IsShowWTax ? true : false;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.NumberType = SpinEditNumberType.Integer;
        txt.DisplayFormatString = "#,###.00";
        txt.DisplayFormatInEditMode = true;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    });
    settings.Columns.Add("WhsCode", "Warehouse");

    settings.SettingsPager.Position = PagerPosition.Bottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.AlwaysShowPager = true;
    //settings.Width = System.Web.UI.WebControls.Unit.Percentage(70); 


    if (cpGvFind_PageIndex == 0)
    {
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
    }


    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
    settings.Settings.VerticalScrollableHeight = 400;

    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;

    settings.SettingsBehavior.AllowFocusedRow = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Hidden;

    settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Paging,
        new { Controller = "_CflSalesOrder", Action = "ListPaging" }
    );

    settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "_CflSalesOrder", Action = "ListFiltering" }
    );

    settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "_CflSalesOrder", Action = "ListSorting" }
    );


    settings.CustomJSProperties = (sender, e) =>
    {
        e.Properties["cpGvFind_FilterExpression"] = cpGvFind_FilterExpression;
        e.Properties["cpGvFind_SortExpression"] = cpGvFind_SortExpression;
        e.Properties["cpGvFind_PageIndex"] = cpGvFind_PageIndex;
        e.Properties["cpGvFind_PageSize"] = cpGvFind_PageSize;
        e.Properties["cpGvFind_CflType"] = cpGvFind_CflType;
        e.Properties["cpGvFind_CflName"] = cpGvFind_CflName;
        e.Properties["cpGvFind_CflHeader"] = cpGvFind_CflHeader;
        e.Properties["cpGvFind_CflSqlWhere"] = cpGvFind_CflSqlWhere;
        e.Properties["cpGvFind_CflIsMulti"] = cpGvFind_CflIsMulti;
    };

    string additionParam = "";


    additionParam = " e.customArgs['hidden_CflDocId']=Id.GetValue(); ";

    settings.ClientSideEvents.BeginCallback = string.Format("function(s, e) {{ {0}  e.customArgs['hidden_CflType']=s.cpGvFind_CflType; e.customArgs['hidden_CflName']=s.cpGvFind_CflName; e.customArgs['hidden_CflHeader']=s.cpGvFind_CflHeader; e.customArgs['hidden_CflSqlWhere']=s.cpGvFind_CflSqlWhere;e.customArgs['hidden_CflIsMulti']=s.cpGvFind_CflIsMulti; }}", additionParam);

    foreach (GridViewDataColumn column in settings.Columns)
    {
        column.Settings.AllowAutoFilterTextInputTimer = DevExpress.Utils.DefaultBoolean.False;
    }


    settings.BeforeGetCallbackResult = (sender, e) =>
    {
        MVCxGridView gridView = sender as MVCxGridView;
        Models._Utils.General.GridViewFilterExpression(gridView, settings);
    };


}).BindToCustomData(Model).GetHtml()
