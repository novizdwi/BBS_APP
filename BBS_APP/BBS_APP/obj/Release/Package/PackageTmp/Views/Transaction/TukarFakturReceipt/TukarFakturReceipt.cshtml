@using Models._Cfl;


@if (false)
{ 
<script src="~/Scripts/ASPxScriptIntelliSense.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-2.2.0.intellisense.js"></script>
<script src="~/Scripts/Test/DXR.js"></script> 
}

@model Models.Transaction.TukarFakturReceipt.TukarFakturReceiptModel


@{
    ViewBag.Title = "Tukar Faktur (Receipt)";
}



<script type="text/javascript">


    $(document).ready(function () {

        SetBtnStatus();
    }
    );


</script>



<script type="text/javascript">

    var beforeSaveActiveTabName = '';
    var beforeSaveActiveTabIndex = 0;

    $.ajaxSetup({
        cache: false
    });

    function OnBegin() {
        loadingPanel.Show();

    }

    function SetBtnStatus() {


        var grpBtnAdd = formLayouBtn.GetItemByName('grpBtnAdd');
        var btnAdd = ASPxClientButton.Cast('btnAdd');
        var grpBtnUpdate = formLayouBtn.GetItemByName('grpBtnUpdate');
        var btnUpdate = ASPxClientButton.Cast('btnUpdate');


        var btnRefresh = ASPxClientButton.Cast('btnRefresh');

        var btnPrint = ASPxClientButton.Cast('btnPrint');


        var btnMenuOther = ASPxClientMenu.Cast('btnMenuOther');

        var formMode = '';
        if ((Id.GetValue() == '') || Id.GetValue() == '0') {
            formMode = 'new';
        } else {
            formMode = 'edit';
        }


        var Status = ASPxClientComboBox.Cast('Status');

        switch (formMode) {
            case 'new':

                grpBtnAdd.SetVisible(true);
                grpBtnUpdate.SetVisible(false);

                btnAdd.SetEnabled(true);
                btnUpdate.SetEnabled(false);
                btnRefresh.SetEnabled(false);
                btnPrint.SetEnabled(false);

                btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);

                btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(false);

                break;
            case 'edit':


                grpBtnAdd.SetVisible(false);
                grpBtnUpdate.SetVisible(true);


                btnAdd.SetEnabled(false);
                btnRefresh.SetEnabled(true);
                btnPrint.SetEnabled(true);

                var Status = ASPxClientComboBox.Cast('Status');



                switch (Status.GetValue()) {
                    case 'Draft':
                        btnUpdate.SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(true);

                        break;
                    case 'Posted':

                        btnUpdate.SetEnabled(true);

                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(true);

                        break;
                    case 'Cancel':
                        btnUpdate.SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(false);

                        break;


                    default:
                        break;
                }


                break;
            default:

                break;
        }



    }

    var msgCount = 0;
    function OnSuccess() {

        $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());

    }


    function OnSuccessMsgBox() {

        $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());
        loadingPanel.Hide();

        popupSuccess.Show();
        setTimeout(function () { popupSuccess.Hide(); }, 1000);

    }

    function OnFailure(jqXhr, textStatus, errorThrown) {
        if (jqXhr.responseText.substring(0, 12) == "[VALIDATION]") {
            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + jqXhr.responseText + '</p>' + $("#MessageText").html());

            loadingPanel.Hide()
            alert(jqXhr.responseText);
        }
        else {
            // untuk error yg tidak ter capture di validation
            var doc = jqXhr.responseText.match(/.*<title>([\s\S]*)<\/title>.*/);
            if (doc != null) {
                $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + doc[1] + '</p>' + $("#MessageText").html());

                loadingPanel.Hide();
                alert(doc[1]);
            }

        }

    }

    function OnComplete() {
        loadingPanel.Hide();
    }


    function BeforeSave() {
        if (!($("#formDetail").valid())) {
            var validator = $("#formDetail").validate();
            var errors = validator.numberOfInvalids();
            if (errors) {
                // alert( validator.errorList[0].message);
                validator.errorList[0].element.focus();

            }
            return false;
        }
        return true;
    }

    function RefreshAfterSuccess(response) {

        $("#contentForm").html(response);

        $.validator.unobtrusive.parse("#formDetail");

        MVCxClientUtils.FinalizeCallback();
        SetBtnStatus();
        ShippingTypeFormVisible();
    }




    function OnClickBtnNew(s, e) {

        $.ajax({
            type: "POST",
            url: "@Url.Action("DetailPartial", "TukarFakturReceipt")",
            beforeSend: function () {
                OnBegin();
            },

            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },

            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },

            complete: function () {
                OnComplete()
            }
        });

    }


    function GetFormData() {
        var formData = $('#formDetail').serializeObject();

        return formData;
    }


    function OnClickBtnAdd(s, e) {
        if (BeforeSave() == false) {
            return;
        }

        //var formData = GetFormData();
        var formData = $('#formDetail').serializeObject();

        $.ajax({
            type: "POST",
            url: '@Url.Action("Add", "TukarFakturReceipt")',
            data: formData,
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccessMsgBox();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete();
            }
        });


    }

    function OnClickBtnUpdate(s, e) {
        if (BeforeSave() == false) {
            return;
        }

        //var formData = GetFormData();
        var formData = $('#formDetail').serializeObject();

        if (Status.GetValue() == "Posted")
        {
            if (!confirm('data sudah di posted, hanya untuk update "Catatan Pengiriman"'))
            {
                return;
            }
        }


        $.ajax({
            type: "POST",
            url: '@Url.Action("Update", "TukarFakturReceipt")',
            data: formData,
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccessMsgBox();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()

            }
        });



    }




    function OnClickBtnNavFirst(s, e) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("NavFirst", "TukarFakturReceipt")",
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnNavPrevious(s, e) {
        key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("NavPrevious", "TukarFakturReceipt")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnNavNext(s, e) {
        key = Id.GetValue();
        $.ajax({
            type: "POST",
            url: '@Url.Action("NavNext", "TukarFakturReceipt")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }



    function OnClickBtnNavLast(s, e) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("NavLast", "TukarFakturReceipt")",
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }


    function OnClickBtnRefresh(s, e) {
        key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartial", "TukarFakturReceipt")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnListFind(s, e) {
        var popup = ASPxClientPopupControl.Cast("popupList");

        var gv = ASPxClientGridView.Cast('gvTukarFakturReceiptList');
        if (gv == null) {
            popup.Show();
        } else {
            popup.SetContentHtml("");
            popup.PerformCallback();
            popup.Show();
        }
    }

    function OnClickBtnPrint(s, e) {
        popupPrint.ShowAtPos(250, 100);
    }


    function OnClickBtnMenuOther(s, e) {

        switch (e.item.name) {

            case 'btnMenuSetStatusCancel':

                if (confirm('Cancel transaction?')) {
                    key = Id.GetValue();

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Cancel", "TukarFakturReceipt")',
                        data: { Id: key },
                        beforeSend: function () {
                            OnBegin();
                        },
                        success: function (response) {
                            RefreshAfterSuccess(response);
                            OnSuccessMsgBox();

                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            OnFailure(jqXhr, textStatus, errorThrown)
                        },
                        complete: function () {
                            OnComplete()
                        }
                    });
                }


                break;
            case 'btnMenuSetStatusPost':

                if (confirm('Post transaction?')) {
                    key = Id.GetValue();

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Post", "TukarFakturReceipt")',
                        data: { Id: key },
                        beforeSend: function () {
                            OnBegin();
                        },
                        success: function (response) {
                            RefreshAfterSuccess(response);
                            OnSuccessMsgBox();

                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            OnFailure(jqXhr, textStatus, errorThrown)
                        },
                        complete: function () {
                            OnComplete()
                        }
                    });
                }


                break;

            default:

                break;
        }
    }



    function OnClickChoose(s, e, key) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartial", "TukarFakturReceipt")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
                popupList.Hide();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function BtnSuratJalanNoOnClick(s, e) {
        //cflLoadingOrderPopupListReceipt.Show();
        var popup = ASPxClientPopupControl.Cast("cflLoadingOrderPopupListTukarFakturReceipt");

        var gv = ASPxClientGridView.Cast('gvCflLoadingOrderListTukarFakturReceipt');
        if (gv == null) {
            popup.Show();
        } else {
            popup.SetContentHtml("");
            popup.PerformCallback();
            popup.Show();
        }
    }

    function ShippingTypeOnValueChange(s, e) {
        ShippingTypeFormVisible();

        var t2DepanBelakang = ASPxClientTextBox.Cast('T2DepanBelakang');
        var temperature = ASPxClientSpinEdit.Cast('Temperature');
        var flowMeterStart = ASPxClientSpinEdit.Cast('FlowMeterStart');
        var flowMeterEnd = ASPxClientSpinEdit.Cast('FlowMeterEnd');

        t2DepanBelakang.SetValue(null);
        temperature.SetValue(null);
        flowMeterStart.SetValue(null);
        flowMeterEnd.SetValue(null);
    }

    function ShippingTypeFormVisible() {
        var shippingType = ASPxClientComboBox.Cast('ShippingType');
        var grpT2DepanBelakang = formLayout.GetItemByName('grpT2DepanBelakang');
        var grpTemperature = formLayout.GetItemByName('grpTemperature');
        var grpFlowMeterStart = formLayout.GetItemByName('grpFlowMeterStart');
        var grpFlowMeterEnd = formLayout.GetItemByName('grpFlowMeterEnd');
    }

    function BtnCflNoTtdPopupListTukarFakturReceiptOnClick(s, e) {
        cflNoTtdPopupListTukarFakturReceipt.Show();
    }

</script>






@Html.Partial("Partial/TukarFakturReceipt_Form_Btn_Partial")

@using (Ajax.BeginForm("mantap", "TukarFakturReceipt", null,
new AjaxOptions
{
    HttpMethod = "POST",
    OnBegin = "OnBegin",
    OnSuccess = "OnSuccessMsgBox",
    OnFailure = "OnFailure",
    OnComplete = "OnComplete",
    UpdateTargetId = "contentForm",
    InsertionMode = InsertionMode.Replace,

},
new
{
    id = "formDetail",
    @class = "edit_form",
    style = "height: 200px; width: 100%;",
    autocomplete = "off"
}))
{ 
<div id="contentForm" style="padding-top:79px">
@Html.Partial("Partial/TukarFakturReceipt_Form_Partial")

</div> 
}


@*
-----------------------------------------------------------------------------
loadingPanel
-----------------------------------------------------------------------------
*@

@Html.DevExpress().LoadingPanel(
    settings =>
    {
        settings.Name = "loadingPanel";
        settings.Modal = true;
        settings.ContainerElementID = "contentForm";
        settings.Styles.LoadingDiv.BackColor = System.Drawing.Color.White;
        settings.Styles.LoadingDiv.Opacity = 0;
    }).GetHtml()



@*
-----------------------------------------------------------------------------
gvReceiptList
-----------------------------------------------------------------------------
*@


@Html.Partial("Partial/TukarFakturReceipt_Panel_List_Partial")


@*-------------------------------------------------
Print
-------------------------------------------------*@

@Html.Partial("~/Views/_CrystalReport/Layout/Print_Panel_Partial.cshtml")

   

@*
-----------------------------------------------------------------------------
CflLoadingOrder
-----------------------------------------------------------------------------

*@


@{
    var cflLoadingOrder_ParamModel = new CflLoadingOrder_ParamModel();
    cflLoadingOrder_ParamModel.Name = "TukarFakturReceipt";
    cflLoadingOrder_ParamModel.Type = "TukarFakturReceipt";
    cflLoadingOrder_ParamModel.Header = "";
    cflLoadingOrder_ParamModel.SqlWhere = "  AND (T0.\"Owner\" = 'SADPII' OR T0.\"Owner\" = 'KGB') AND T0.\"Status\" = 'Delivered'  ";
    cflLoadingOrder_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflLoadingOrderReceipt(s, e, data) {
        SuratJalanId.SetValue(data.Id);
        SuratJalanNo.SetValue(data.TransNo);
        UnitId.SetValue(data.UnitId);
        UnitName.SetValue(data.UnitName);
        UnitPoliceNo.SetValue(data.UnitPoliceNo);
        UnitCapacity.SetValue(data.UnitCapacity);
        DriverId.SetValue(data.DriverId);
        DriverName.SetValue(data.DriverName);
        QtyDelivery.SetValue(data.QtyDelivery);
        ShippingType.SetValue(data.ShippingType);
        //var expiredDate = new Date(parseInt((data.ExpiredDate).substr(6)));
        //OldExpiredDate.SetValue(expiredDate);
        //var warningDate = new Date(parseInt((data.WarningDate).substr(6)));
        //OldWarningDate.SetValue(warningDate);
        ShippingTypeFormVisible();
        cflLoadingOrderPopupListTukarFakturReceipt.Hide();
    }


</script>
@Html.Partial("~/Views/_Cfl/_CflLoadingOrder/Partial/_CflLoadingOrder_Panel_List_Partial.cshtml", cflLoadingOrder_ParamModel)

@*
    -----------------------------------------------------------------------------
    gvCflNoTtdList
    -----------------------------------------------------------------------------
*@


@{
    var cflNoTtd_ParamModel = new CflNoTtd_ParamModel();
    cflNoTtd_ParamModel.Name = "TukarFakturReceipt";
    cflNoTtd_ParamModel.Type = "TukarFakturReceipt";
    cflNoTtd_ParamModel.SqlWhere = "";
    cflNoTtd_ParamModel.Header = "";
    cflNoTtd_ParamModel.IsMulti = "N";
}



<script type="text/javascript">
    function OnClickChoose_CflNoTtdTukarFakturReceipt(s, e, data) {
        NoTtd.SetValue(data.NoDokumen);
        MetodeKirim.SetValue(data.MetodeKirim);
        Pengiriman.SetValue(data.Pengiriman);
        //AlamatKirim.SetValue(data.City);
        cflNoTtdPopupListTukarFakturReceipt.Hide();
    }
</script>
@Html.Partial("~/Views/_Cfl/_CflNoTtd/Partial/_CflNoTtd_Panel_List_Partial.cshtml", cflNoTtd_ParamModel)
