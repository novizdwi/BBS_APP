@using Models;
@using Models._Cfl;
@{
    var Id = Convert.ToInt64(Request["cbId"]);

    if (ViewBag.Id != null)
    {
        Id = ViewBag.Id;
    }

}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvAEKiri";
    settings.KeyFieldName = "DetId";
    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    //settings.Settings.VerticalScrollableHeight = 350;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

    settings.Width = Unit.Percentage(100);
    settings.Height = Unit.Percentage(100);

    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
    settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;


    settings.CommandColumn.Visible = true;
    settings.CommandColumn.ShowDeleteButton = true;
    settings.CommandColumn.ShowNewButtonInHeader = true;
    settings.CommandColumn.Width = 70;
    settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
    settings.Columns.Add("Id", "Id").Visible = false;
    settings.Columns.Add("DetId", "DetId").Visible = false;

    settings.Columns.Add(column =>
    {
        column.FieldName = "Item";
        column.Name = "Item";
        column.Caption = "Item";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 150;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueField = "Item";
        cbo.TextField = "Item";
        cbo.ValueType = typeof(string);
        cbo.DataSource = Models._Utils.GeneralGetList.GetItemEngine();
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "SubItem";
        column.Name = "SubItem";
        column.Caption = "SubItem";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "PartNumber";
        column.Name = "PartNumber";
        column.Caption = "Part Number";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "QtyOrder";
        column.Name = "QtyOrder";
        column.Caption = "Qty Order";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Unit";
        column.Name = "Unit";
        column.Caption = "Unit";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Status";
        column.Name = "Status";
        column.Caption = "Status";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 100;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }

        var txt = column.PropertiesEdit as ComboBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        //txt.ClientInstanceName = "gvDetail_IsApproved";
        txt.Items.Insert(0, new ListEditItem("Open", "Open"));
        txt.Items.Insert(1, new ListEditItem("Close", "Close"));

        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl1";
        column.Name = "Cyl1";
        column.Caption = "Cyl 1";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl2";
        column.Name = "Cyl2";
        column.Caption = "Cyl 2";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl3";
        column.Name = "Cyl3";
        column.Caption = "Cyl 3";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl4";
        column.Name = "Cyl4";
        column.Caption = "Cyl 4";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl5";
        column.Name = "Cyl5";
        column.Caption = "Cyl 5";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl6";
        column.Name = "Cyl6";
        column.Caption = "Cyl 6";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl7";
        column.Name = "Cyl7";
        column.Caption = "Cyl 7";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl8";
        column.Name = "Cyl8";
        column.Caption = "Cyl 8";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl9";
        column.Name = "Cyl9";
        column.Caption = "Cyl 9";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl10";
        column.Name = "Cyl10";
        column.Caption = "Cyl 10";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl11";
        column.Name = "Cyl11";
        column.Caption = "Cyl 11";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "Cyl12";
        column.Name = "Cyl12";
        column.Caption = "Cyl 12";


        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Width = 70;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var cbo = column.PropertiesEdit as ComboBoxProperties;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        cbo.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");
        cbo.ValueType = typeof(string);
        cbo.Items.Insert(0, new ListEditItem("Repair", "Repair"));
        cbo.Items.Insert(1, new ListEditItem("Replace", "Replace"));
        cbo.Items.Insert(2, new ListEditItem("-", "-"));
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "TotalRepair";
        column.Name = "TotalRepair";
        column.Caption = "Total Repair";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "TotalReplace";
        column.Name = "TotalReplace";
        column.Caption = "Total Replace";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "QtySisa";
        column.Name = "QtySisa";
        column.Caption = "Qty Sisa";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 100;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "Remark";
        column.Name = "Remark";
        column.Caption = "Catatan";


        column.ColumnType = MVCxGridViewColumnType.TextBox;
        column.Width = 250;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        if (Model.Status == "Draft" || Model.Status == "Open")
        {
            column.ReadOnly = false;
        }
        else
        {
            column.ReadOnly = true;
        }
        var txt = column.PropertiesEdit as TextBoxProperties;
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.FromName("#E0E0E0");

        //txt.ClientInstanceName = "gvDetail_ShipName";
    });
    settings.Settings.ShowFooter = true;

    settings.ClientSideEvents.BeginCallback = "gvDetailOnBeginCallback";
    settings.ClientSideEvents.EndCallback = "gvDetailOnEndCallback";

    settings.ClientSideEvents.BatchEditStartEditing = "gvDetailOnBatchEditStartEditing";
    settings.ClientSideEvents.BatchEditEndEditing = "gvDetailOnBatchEditEndEditing";
    settings.ClientSideEvents.BatchEditRowValidating = "gvDetailOnBatchEditRowValidating";

}).Bind(Model.ListAEKiris_).GetHtml()

