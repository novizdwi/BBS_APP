@using System.Data;
@*@{
        //ViewBag.Title = "Home";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }*@

@functions{

    //menambahkan style di node
    protected void StyleNodeDetail(MVCxTreeViewNode node)
    {
        if (node.NavigateUrl != "")
        {
            node.NodeStyle.ForeColor = System.Drawing.Color.FromName("#e2e2e2");
            node.NodeStyle.BackColor = System.Drawing.Color.FromName("#292a2d");
            node.NodeStyle.Font.Underline = true;
            node.NodeStyle.HoverStyle.ForeColor = System.Drawing.Color.White;
            node.NodeStyle.HoverStyle.BackColor = System.Drawing.Color.FromName("#FF8800");

            node.NodeStyle.SelectedStyle.ForeColor = System.Drawing.Color.White;
            node.NodeStyle.SelectedStyle.BackColor = System.Drawing.Color.FromName("#116959");
            node.Image.Url = "~/Content/Images/button/menu_default.png";
            node.Image.Height = 15;
            node.Image.UrlSelected = "~/Content/Images/button/menu_selected.png";
        }

        for (int i = 0; i < node.Nodes.Count; i++)
        {
            StyleNodeDetail(node.Nodes[i]);
        }

    }

    protected void StyleMenuNode(MVCxTreeViewNode node, string imageUrl)
    {
        if (node.NavigateUrl != "")
        {
            //node.NodeStyle.ForeColor = System.Drawing.Color.White;
            //node.NodeStyle.SelectedStyle.ForeColor = System.Drawing.Color.Black;

            node.Image.Url = "~/Content/Images/menu/" + imageUrl + "-putih.png";

            node.Image.Height = 15;

            node.Image.UrlSelected = "~/Content/Images/menu/" + imageUrl + "-putih.png";
        }

        for (int i = 0; i < node.Nodes.Count; i++)
        {
            StyleMenuNode(node.Nodes[i], node.Nodes[i].Name);
        }
    }


    //meremove note folder jika empty
    protected void RemoveNodeFolderEmpty(MVCxTreeViewNode node)
    {
        if ((node.NavigateUrl) == "" || (node.NavigateUrl == null))
        {
            var j = node.Nodes.Count - 1;
            for (int i = j; i >= 0; i--)
            {
                RemoveNodeFolderEmpty(node.Nodes[i]);
            }

            if (node.Nodes.Count == 0)
            {
                node.Parent.Nodes.Remove(node);

            }
        }

    }


    protected void AddNode(System.Data.DataTable dtMenuUrls, MVCxTreeViewNode node, string text, string name = "")
    {
        if (Session["isAdmin"] == "Y")
        {
            if (name != "")
            {
                //string find = "Url = '" + name + "/Detail'";
                //DataRow[] foundRows = dtMenuUrls.Select(find);
                //if (foundRows.Length != 0)
                //{
                node.Nodes.Add(new MVCxTreeViewNode[] {
                    new MVCxTreeViewNode(text,"mn" +  name,null,DevExpressHelper.GetUrl( new { controller = name, Action = "Detail" } ))
                });
                //}
            }


            else
            {
                node.Nodes.Add(new MVCxTreeViewNode[] {
                    new MVCxTreeViewNode(text)
                });
            }

        }
        else
        {
            if (name != "")
            {
                string find = "Url = '" + name + "/Detail'";
                DataRow[] foundRows = dtMenuUrls.Select(find);
                if (foundRows.Length != 0)
                {
                    node.Nodes.Add(new MVCxTreeViewNode[] {
                        new MVCxTreeViewNode(text,"mn" +  name,null,DevExpressHelper.GetUrl( new { controller = name, Action = "Detail" } ))
                    });
                }
            }
        }

    }


    //- fungsi untuk mendapatkan object treeview
    //- agar load nya lebih cepat treeview.nodes nya akan di simpan di session :
    //  scenario nya : ketika pertamakali treeview di load akan langsung di simpan di session  "MenuNodes".
    //                  load selanjutnya tidak akan mengenerate treeview.nodes lagu, cukup mengambil dari session.
    //                  ketika logout session MenuNodes harus di destroy
    //- NOTES : Selama develop "MenuNodes" belum di aktifin dulu

    protected TreeViewExtension getTreeView()
    {
        var tv = Html.DevExpress().TreeView(settings =>
        {

            settings.Name = "tableOfContentsTreeView";
            settings.EnableNodeTextWrapping = true;
            settings.AllowSelectNode = true;
            settings.Width = Unit.Percentage(100);
            //settings.ShowExpandButtons = false;
            settings.ControlStyle.ForeColor = System.Drawing.Color.FromName("#e2e2e2");
            settings.SyncSelectionMode = SyncSelectionMode.None;
            settings.NodeLinkMode = ItemLinkMode.ContentBounds;
            settings.Styles.Node.CssClass = "tree-view-node";
            settings.Styles.Node.HoverStyle.CssClass = "hovered";
            settings.Styles.Elbow.CssClass = "tree-view-elbow";
            settings.ClientSideEvents.NodeClick = "function(s, e) { e.node.SetExpanded(!e.node.GetExpanded());}";
            if (Session["MenuNodes"] == null)
            {

                DataTable dataTable = null;
                if (Session["isAdmin"] == "Y")
                {
                    dataTable = new DataTable();
                }
                else
                {
                    dataTable = Models._Utils.GeneralGetList.GetMenuUrls((int)Session["userId"]);
                }


                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Permintaan Barang/Jasa";

                    node1.Nodes.Add(node2 =>
                    {
                        //node2.Text = "Monitoring";
                        //AddNode(dataTable, node2, "Status Permintaan User", "MaterialRequestStatus");

                        node2.Text = "Permintaan User";
                        AddNode(dataTable, node2, "Form - Permintaan User", "MaterialRequest");



                    });
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Approval Permintaan";
                        AddNode(dataTable, node2, "Form - MR Approval", "ApprovalMR");
                    });
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Mutasi Barang";
                        AddNode(dataTable, node2, "Penerimaan(LPB)", "InventoryIn");
                        AddNode(dataTable, node2, "Pengeluaran(SJ)", "GoodIssue");
                        AddNode(dataTable, node2, "Item Transfer (Send)", "InventorySend");
                        AddNode(dataTable, node2, "Item Transfer (Received)", "InventoryReceived");
                    });
                });

                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Technical";

                    node1.Nodes.Add(node2 =>
                    {
                        //node2.Text = "Monitoring";
                        //AddNode(dataTable, node2, "Status Permintaan User", "MaterialRequestStatus");

                        node2.Text = "Master";
                        AddNode(dataTable, node2, "Ship Particular", "Ship");
                        AddNode(dataTable, node2, "Master Perawatan Deck", "MasterSetting");
                        AddNode(dataTable, node2, "Master Perawatan Engine", "MasterSettingEngine");

                    });
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Monitoring";
                        AddNode(dataTable, node2, "Running Hours", "RunningHours");
                        AddNode(dataTable, node2, "Perawatan Kapal (Deck)", "Perawatan");
                        AddNode(dataTable, node2, "Perawatan Kapal (Engine)", "PerawatanEngine");
                        AddNode(dataTable, node2, "Kerusakan Kapal", "KerusakanKapal");
                        AddNode(dataTable, node2, "Docking", "Docking");
                        AddNode(dataTable, node2, "Overhaul", "Overhaul");

                    });
                    
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Inventory Kapal (ROB)";
                        AddNode(dataTable, node2, "Laporan ROB", "ShipInventory");

                    });
                    //node1.Nodes.Add(node2 =>
                    //{

                    //    node2.Text = "Perawatan Kapal";
                    //    AddNode(dataTable, node2, "Plan Perawatan (PMS)", "");
                    //    AddNode(dataTable, node2, "Perawatan harian", "");

                    //});

                    //node1.Nodes.Add(node2 =>
                    //{

                    //    node2.Text = "Docking";
                    //    AddNode(dataTable, node2, "Laporan Docking", "Docking");

                    //});
                    //node1.Nodes.Add(node2 =>
                    //{

                    //    node2.Text = "Overhaul";
                    //    AddNode(dataTable, node2, "Laporan Overhaul", "Overhaul");

                    //});
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Cleaning Tank";
                        AddNode(dataTable, node2, "Laporan Cleaning Tank", "CleaningTank");

                    });


                });

                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Operasional";

                    
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Monitoring";
                        AddNode(dataTable, node2, "Fuel Control", "FuelControl");
                        AddNode(dataTable, node2, "Fresh Water Control", "FreshWaterControl");
                    });
                    
                    node1.Nodes.Add(node2 =>
                    {

                        node2.Text = "Emergency";
                        AddNode(dataTable, node2, "Catatan Kecelakaan", "Kecelakaan");
                    });
                });
                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Tukar Faktur";

                    AddNode(dataTable, node1, "Tukar Faktur (send)", "TukarFakturSend");
                    AddNode(dataTable, node1, "Tukar Faktur (receipt)", "TukarFakturReceipt");
                });
                settings.Nodes.Add(node1 =>
                {

                    node1.Text = "Report";

                    //AddNode(dataTable, node1, "Alert", "ReportAlert");
                    AddNode(dataTable, node1, "Query", "ReportQuery");
                    AddNode(dataTable, node1, "Report", "ReportCustom");
                });

                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Setting";




                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Report";
                        AddNode(dataTable, node2, "Form Layout", "Layout");
                        AddNode(dataTable, node2, "Report Group", "ReportGroup");
                        AddNode(dataTable, node2, "Report", "Report");

                    });



                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Query";
                        AddNode(dataTable, node2, "Query Group", "QueryGroup");
                        AddNode(dataTable, node2, "Query", "Query");

                    });

                });


                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Authentication";

                    AddNode(dataTable, node1, "Role", "Role");
                    AddNode(dataTable, node1, "User", "User");
                    AddNode(dataTable, node1, "Change Password", "ChangePassword");

                });

                Session["MenuNodes"] = settings.Nodes;
            }
            else
            {
                settings.Nodes.Assign((MVCxTreeViewNodeCollection)Session["MenuNodes"]);
            }


            settings.PreRender = (s, e) =>
            {
                var treeView = s as MVCxTreeView;


                //remove jika node folder empty
                var j = treeView.Nodes.Count;
                if (Session["isAdmin"] == "Y")
                {

                }
                else
                {
                    for (int i = j - 1; i >= 0; i--)
                    {
                        var node1 = (MVCxTreeViewNode)treeView.Nodes[i];
                        RemoveNodeFolderEmpty(node1);
                    }
                }


                //tambahkan style di
                j = treeView.Nodes.Count;
                for (int i = 0; i < j; i++)
                {
                    var node1 = (MVCxTreeViewNode)treeView.Nodes[i];
                    //StyleNodeDetail(node1);

                    StyleMenuNode(node1, node1.Name);
                }


                TreeViewNode node = null;

                node = treeView.Nodes.FindByName("mn" + ViewContext.Controller.ValueProvider.GetValue("controller").RawValue.ToString());
                if (node == null)
                {
                    node = treeView.Nodes.FindByName("mn" + ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString());
                }
                else
                {
                    //Models.Authentication.User.UserGetList.UpdateLastController((int)Session["userId"], ViewContext.Controller.ValueProvider.GetValue("controller").RawValue.ToString());
                }


                if (node != null)
                {
                    treeView.SelectedNode = node;
                    treeView.ExpandToNode(node);
                }

            };


        });

        return tv;
    }

        }

@{
    <h3 class="section-caption contents-caption">Menu</h3>
    TreeViewExtension tv;
    tv = getTreeView();
        tv.GetHtml();
}



