@using System.Data;

@{ Layout = "~/Views/Shared/_mainLayout2_0.cshtml"; }

@functions{

    //menambahkan style di node
    protected void StyleNodeDetail(MVCxTreeViewNode node)
    {
        if (node.NavigateUrl != "")
        {
            //node.NodeStyle.ForeColor = System.Drawing.Color.FromName("#116959");
            //node.NodeStyle.BackColor = System.Drawing.Color.FromName("#f8f2f2");
            //node.NodeStyle.Font.Underline = true;

            node.NodeStyle.HoverStyle.ForeColor = System.Drawing.Color.White;
            node.NodeStyle.HoverStyle.BackColor = System.Drawing.Color.FromName("#FF8800");

            node.NodeStyle.SelectedStyle.ForeColor = System.Drawing.Color.White;
            node.NodeStyle.SelectedStyle.BackColor = System.Drawing.Color.FromName("#116959");

            node.Image.Url = "~/Content/Images/button/menu_default.png";
            node.Image.Height = 15;

            node.Image.UrlSelected = "~/Content/Images/button/menu_selected.png";
        }

        for (int i = 0; i < node.Nodes.Count; i++)
        {
            StyleNodeDetail(node.Nodes[i]);
        }

    }

    protected void StyleMenuNode(MVCxTreeViewNode node, string imageUrl)
    {
        if (node.NavigateUrl != "")
        {
            node.NodeStyle.ForeColor = System.Drawing.Color.White;
            node.NodeStyle.SelectedStyle.ForeColor = System.Drawing.Color.Black;

            node.Image.Url = "~/Content/Images/menu/" + imageUrl + "-putih.png";

            node.Image.Height = 15;

            node.Image.UrlSelected = "~/Content/Images/menu/" + imageUrl + "-putih.png";
        }

        for (int i = 0; i < node.Nodes.Count; i++)
        {
            StyleMenuNode(node.Nodes[i], node.Nodes[i].Name);
        }
    }


    //meremove note folder jika empty
    protected void RemoveNodeFolderEmpty(MVCxTreeViewNode node)
    {
        if ((node.NavigateUrl) == "" || (node.NavigateUrl == null))
        {
            var j = node.Nodes.Count - 1;
            for (int i = j; i >= 0; i--)
            {
                RemoveNodeFolderEmpty(node.Nodes[i]);
            }

            if (node.Nodes.Count == 0)
            {
                node.Parent.Nodes.Remove(node);

            }
        }

    }


    protected void AddNode(System.Data.DataTable dtMenuUrls, MVCxTreeViewNode node, string text, string name = "")
    {
        if (Session["isAdmin"] == "Y")
        {
            if (name != "")
            {
                //string find = "Url = '" + name + "/Detail'";
                //DataRow[] foundRows = dtMenuUrls.Select(find);
                //if (foundRows.Length != 0)
                //{
                node.Nodes.Add(new MVCxTreeViewNode[] {
                    new MVCxTreeViewNode(text,"mn" +  name,null,DevExpressHelper.GetUrl( new { controller = name, Action = "Detail" } ))
                });
                //}
            }


            else
            {
                node.Nodes.Add(new MVCxTreeViewNode[] {
                        new MVCxTreeViewNode(text)
                    });
            }

        }
        else
        {
            if (name != "")
            {
                string find = "Url = '" + name + "/Detail'";
                DataRow[] foundRows = dtMenuUrls.Select(find);
                if (foundRows.Length != 0)
                {
                    node.Nodes.Add(new MVCxTreeViewNode[] {
                    new MVCxTreeViewNode(text,"mn" +  name,null,DevExpressHelper.GetUrl( new { controller = name, Action = "Detail" } ))
                });
                }
            }
        }

    }


    //- fungsi untuk mendapatkan object treeview
    //- agar load nya lebih cepat treeview.nodes nya akan di simpan di session :
    //  scenario nya : ketika pertamakali treeview di load akan langsung di simpan di session  "MenuNodes".
    //                  load selanjutnya tidak akan mengenerate treeview.nodes lagu, cukup mengambil dari session.
    //                  ketika logout session MenuNodes harus di destroy
    //- NOTES : Selama develop "MenuNodes" belum di aktifin dulu

    protected TreeViewExtension getTreeView()
    {
        var tv = Html.DevExpress().TreeView(settings =>
        {
            settings.Name = "MailFilter";
            settings.Width = 301;

            if (Session["MenuNodes"] == null)
            {

                DataTable dataTable = null;
                if (Session["isAdmin"] == "Y")
                {
                    dataTable = new DataTable();
                }
                else
                {
                    dataTable = Models._Utils.GeneralGetList.GetMenuUrls((int)Session["userId"]);
                }



                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Master";

                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Document";

                        AddNode(dataTable, node2, "Document Content", "DocContent");
                        AddNode(dataTable, node2, "General Document", "DocGeneral");
                    });
                    AddNode(dataTable, node1, "Ship", "Ship");

                });

                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Transaction";

                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Material Request";
                        AddNode(dataTable, node2, "Material Request", "MaterialRequest");
                    //AddNode(dataTable, node2, "General Doc Renewal", "GeneralDocRenewal");
                });
                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "General Document";
                        AddNode(dataTable, node2, "General Doc Monitoring", "GeneralDocumentMonitoring");
                        AddNode(dataTable, node2, "General Doc Renewal", "GeneralDocRenewal");
                    });

                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Delivery Schedule";


                        node2.Nodes.Add(node3 =>
                        {
                            node3.Text = "Loading Order";
                            AddNode(dataTable, node3, "List SPP/SO", "SppHistory");
                            AddNode(dataTable, node3, "Loading Order", "LoadingOrder");
                        });

                        node2.Nodes.Add(node3 =>
                        {
                            node3.Text = "Receipt";
                            AddNode(dataTable, node3, "DO Receipt", "Receipt");
                            AddNode(dataTable, node3, "Scan DO", "ScanDO");
                        });

                    });

                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Inventory";
                        AddNode(dataTable, node2, "Inventory In", "InventoryIn");
                        AddNode(dataTable, node2, "Inventory Transfer (Send)", "InventorySend");
                        AddNode(dataTable, node2, "Inventory Transfer (Receipt)", "InventoryReceipt");
                        AddNode(dataTable, node2, "Adjustment In", "AdjustmentIn");
                        AddNode(dataTable, node2, "Adjustment Out", "AdjustmentOut");
                    });

                });

                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Tukar Faktur";

                    AddNode(dataTable, node1, "Tukar Faktur (send)", "TukarFakturSend");
                    AddNode(dataTable, node1, "Tukar Faktur (receipt)", "TukarFakturReceipt");
                });


                settings.Nodes.Add(node1 =>
                {

                    node1.Text = "Report";

                //AddNode(dataTable, node1, "Alert", "ReportAlert");
                AddNode(dataTable, node1, "Query", "ReportQuery");
                    AddNode(dataTable, node1, "Report", "ReportCustom");
                });

                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Setting";

                    AddNode(dataTable, node1, "General Setting", "GeneralSetting");


                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Report";
                        AddNode(dataTable, node2, "Form Layout", "Layout");
                        AddNode(dataTable, node2, "Report Group", "ReportGroup");
                        AddNode(dataTable, node2, "Report", "Report");

                    });



                    node1.Nodes.Add(node2 =>
                    {
                        node2.Text = "Query";
                        AddNode(dataTable, node2, "Query Group", "QueryGroup");
                        AddNode(dataTable, node2, "Query", "Query");

                    });

                });


                settings.Nodes.Add(node1 =>
                {
                    node1.Text = "Authentication";

                    AddNode(dataTable, node1, "Role", "Role");
                    AddNode(dataTable, node1, "User", "User");
                    AddNode(dataTable, node1, "Change Password", "ChangePassword");

                });

                Session["MenuNodes"] = settings.Nodes;
            }
            else
            {
                settings.Nodes.Assign((MVCxTreeViewNodeCollection)Session["MenuNodes"]);
            }


            settings.PreRender = (s, e) =>
            {
                var treeView = s as MVCxTreeView;


            //remove jika node folder empty
            var j = treeView.Nodes.Count;
                if (Session["isAdmin"] == "Y")
                {

                }
                else
                {
                    for (int i = j - 1; i >= 0; i--)
                    {
                        var node1 = (MVCxTreeViewNode)treeView.Nodes[i];
                        RemoveNodeFolderEmpty(node1);
                    }
                }


            //tambahkan style di
            j = treeView.Nodes.Count;
                for (int i = 0; i < j; i++)
                {
                    var node1 = (MVCxTreeViewNode)treeView.Nodes[i];
                //StyleNodeDetail(node1);

                StyleMenuNode(node1, node1.Name);
                }


                TreeViewNode node = null;

                node = treeView.Nodes.FindByName("mn" + ViewContext.Controller.ValueProvider.GetValue("controller").RawValue.ToString());
                if (node == null)
                {
                    node = treeView.Nodes.FindByName("mn" + ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString());
                }
                else
                {
                //Models.Authentication.User.UserGetList.UpdateLastController((int)Session["userId"], ViewContext.Controller.ValueProvider.GetValue("controller").RawValue.ToString());
            }


                if (node != null)
                {
                    treeView.SelectedNode = node;
                    treeView.ExpandToNode(node);
                }

            };


        });

        return tv;
    }

}

@section Left {
    @* DXCOMMENT: Configure TreeView that allows filtering the displayed mail messages *@

    @{
        TreeViewExtension tv;
        tv = getTreeView();
        tv.GetHtml();
    }


}


@Html.DevExpress().Splitter(settings =>
{
    settings.Name = "ContentSplitter";
    settings.Orientation = System.Web.UI.WebControls.Orientation.Vertical;
    settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    //settings.ClientSideEvents.PaneResized = "OutlookController.ContentSplitterPaneResized";
    //settings.Styles.Pane.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(0);
    //settings.Styles.Pane.Border.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(0);

    settings.Panes.Add(subpane =>
    {
        subpane.Name = "MessageBody";
        // subpane.PaneStyle.CssClass = "mlist";
        subpane.SetContent(RenderBody().ToHtmlString());
        subpane.ScrollBars = System.Web.UI.WebControls.ScrollBars.Auto;
    });

    settings.Panes.Add(subpane =>
    {
        subpane.Name = "MessageFooter";
        subpane.PaneStyle.CssClass = "MessageFooterPane";
        subpane.ShowCollapseForwardButton = DefaultBoolean.True;
        subpane.ShowCollapseBackwardButton = DefaultBoolean.True;
        subpane.ScrollBars = System.Web.UI.WebControls.ScrollBars.Auto;
        subpane.Collapsed = false;


        subpane.Size = System.Web.UI.WebControls.Unit.Pixel(40);
        subpane.SetContent("<div id=\"MessageText\" class=\"message\"></div>");

    });


    settings.SaveStateToCookies = true;

}).GetHtml()

